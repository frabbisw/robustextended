{"task_id": "JavaScript/0", "prompt": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in gives list of numbers, was any two numbers closer to each other than gives threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  if (numbers.length < 2) {\n    return false;\n  }\n\n  let first = numbers[0];\n  let last = numbers[numbers.length - 1];\n\n  return Math.abs(first - last) <= threshold;\n};\n\nexport {\n  hasCloseElements\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string contains multiple group of nested parentheses. Your goals is to separating those group into separate strings and return the list of those. Separate group was balancing (each open brace is properly close) and not nest within each other Ignore any space in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    let groups = [];\n    let current_group = '';\n    let i = 0;\n    let j = 0;\n    for (i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] == '(') {\n            current_group += paren_string[i];\n            groups.push(current_group);\n            current_group = '';\n        } else {\n            current_group += paren_string[i];\n        }\n    }\n    return groups;\n};\n\n/*\nInput:\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())', '()()()']\n*/\nconst separateParenGroupsRecursive = (paren_string) => {\n    if (paren_string.length == 1) {\n        return [paren_string];\n    }\n    let groups = [];\n    let i = 0;\n    for (i = 0; i < paren_string.length; i++) {\n        if (paren_string[i] == '(') {\n            groups.push(separateParenGroupsRecursive(paren_string.slice(0, i) + '()'));\n            groups.push(paren_string.slice(i + 1));\n        }\n    }\n    return groups;\n};\n\nmodule.exports = {\n    separateParenGroups: separateParenGroups,\n    separateParenGroupsRecursive: separateParenGroupsRecursive\n};<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Gives a positive floating point number, it can is decomposes into and integer parts (larger integer smaller than gives number) and decimals (leftover parts always smaller than 1). Return the decimal parts of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n\n  return [integerPart, decimalPart];\n};\n\nconst isDecimal = (number) => {\n  return number!= null && typeof number === 'number' && number % 1!== 0;\n};\n\nconst getIntegerPart = (number) => {\n  return truncateNumber(number)[0];\n};\n\nconst getDecimalPart = (number) => {\n  return truncateNumber(number)[1];\n};\n\nexport {\n  getIntegerPart,\n  getDecimalPart,\n  isDecimal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're gives a list of deposits and withdrawal operations on a banks accounts that start with zero balance. Your tasks is to detect if at any point the balance of accounts fallls below zeros, and at that point functions should return trueer. Otherwise it should return false.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const list = operations.map((operation) => operation.balance);\n  return list.reduce((acc, current) => acc || current < 0, false);\n};\n\n// export default belowZero;\nexport default function belowZero(operations) {\n  return belowZero(operations);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a gives list of input numbers, calculate Means Absolutes Deviation around the mean of this dataset. Means Absolutes Deviation is the average absolute difference between each elements and a centerpoint (mean in this cases): MADDER = average | x - x_means |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    const mean = getMean(numbers);\n    const deviation = Math.abs(numbers.reduce((a, b) => a + Math.abs(b - mean), 0) / numbers.length)\n    return deviation\n}\n\nconst getMean = (numbers) => {\n    const mean = numbers.reduce((a, b) => a + b, 0) / numbers.length;\n    return mean\n}\n\nmodule.exports = meanAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": false, "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const length = numbers.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  while (i < length) {\n    if (i === 0 || i === length - 1) {\n      result.push(numbers[i]);\n      i++;\n    } else {\n      result.push(numbers[i]);\n      j++;\n      if (j === delimeter) {\n        j = 0;\n        k++;\n      }\n      result.push(numbers[j]);\n      i++;\n      j++;\n      while (k < length && j < length) {\n        result.push(numbers[j]);\n        j++;\n        k++;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  This function returns the length of the longest common substring between two strings.\n\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'dabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"abracadabra\")\n  'abracadabra'\n  >>> common_substring(\"abracadabra\", \"dabra\")\n  'abracadabra'\n  >>> common_substring"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents multiple group for nested parentheses separates by space. For each of the group, output the deeper level of nesting of parentheses. E.g. (()()) had maximum two level of nesting while ((())) had three.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n    let max = 0;\n    let arr = [];\n    let current_depth = 0;\n    let stack = [];\n\n    paren_string.split(' ').forEach(item => {\n        if(item === '()') {\n            current_depth++;\n        } else if(item === ')') {\n            if(current_depth === 0) {\n                return;\n            } else {\n                current_depth--;\n            }\n        }\n\n        if(current_depth === max) {\n            stack.push(item);\n        } else if(current_depth < max) {\n            stack.pop();\n            stack.push(item);\n        }\n\n        if(current_depth === max) {\n            arr.push(stack.length);\n            stack = [];\n        }\n    });\n\n    return arr;\n}\n\n/*\n  Function to find maximum level of nested parentheses in a string.\n  */\nconst maxNestedParens = (paren_string) => {\n    let max = 0;\n    let stack = [];\n    paren_string.split(' ').forEach(item => {\n        if(item === '(') {\n            stack.push(item);\n        } else if(item === ')') {\n            stack.pop();\n        }\n\n        if(stack.length > max) {\n            max = stack.length;\n        }\n    });\n\n    return max;\n}\n\n/*\n  Function to find all the level of nested parentheses in a string.\n  */\nconst nestedParens = (paren_string) => {\n    let stack = [];\n    paren_string.split(' ').forEach(item => {\n        if(item === '(') {\n            stack.push(item);\n        } else if(item === ')') {\n            stack.pop();\n        }\n    });\n\n    return stack;\n}\n\nconst test = () => {\n    let nestedParens = parseNestedParens('(()()) ((())) () ((())()())');\n    console.log(nestedParens);\n    console.log(maxNestedParens(nestedParens));\n    console.log(nestedParens.map(item => item.length));\n    console.log(nestedParens.reduce((previous, current) => previous + current, 0));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that containing gives substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n\n/*\n  >>> filterBySubstring([1, 2, 3, 4, 5], '3')\n  [3, 4, 5]\n  >>> filterBySubstring([1, 2, 3, 4, 5], 'z')\n  []\n  */\nconst filterBySubstring12 = (strings, substring) => {\n  const filter = (string) => {\n    return string.toLowerCase().indexOf(substring.toLowerCase()) >= 0;\n  };\n  return strings.filter(filter);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a gives list of integers, return a tuple consists of a sums and a products of all the integers in a list.\n Empty sums should is equal to 0 and emptiest products should is equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sums = [];\n  const products = [];\n  for (let i = 0; i < numbers.length; i++) {\n    sums.push(numbers[i] * i);\n    products.push(numbers[i] * numbers[i]);\n  }\n  return { sums, products };\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a gives list of integers, generating a list of rolling maximum elements finds until gives moment in the sequences.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let result = [];\n  let maxPos = 0;\n  let resultPos = 0;\n  let i = 0;\n  let j = 0;\n\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxPos = i;\n    }\n    i++;\n  }\n\n  while (i < numbers.length) {\n    if (numbers[i] === max) {\n      result.push(max);\n      i++;\n    } else if (numbers[i] === max) {\n      result.push(max);\n      resultPos = i;\n      i++;\n    } else if (numbers[i] > max) {\n      j = i - 1;\n      while (numbers[j] === max) {\n        j--;\n      }\n      result.push(max);\n      resultPos = i;\n      i = j + 1;\n    } else {\n      result.push(numbers[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tests if gniven strig is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join('');\n}\n\n/* Finds the shorter palindrome that begin with a supplied string.\n Algorithms ideas is simple: - Find the longer postfix of supplied string that is a palindrome. - Append to the ends of the string reverses of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const isPalindrome = string.split('').reverse().join('');\n  const start = string.substring(0, string.length - 1);\n  const end = string.substring(1, string.length);\n  return start + isPalindrome + end;\n}\n\n/* Tests if the supplied string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the longest palindrome in the supplied string */ const findLongestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Tests if the supplied string is a palindrome */ const isPalindrome = (string) => { return string == string.split('').reverse().join(''); }\n\n/* Finds the shortest palindrome in the supplied string */ const findShortestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the longest palindrome in the supplied string */ const findLongestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the longest palindrome in the supplied string */ const findLongestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the shortest palindrome in the supplied string */ const findShortestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the longest palindrome in the supplied string */ const findLongestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the shortest palindrome in the supplied string */ const findShortestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the longest palindrome in the supplied string */ const findLongestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the shortest palindrome in the supplied string */ const findShortestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i < string.length; i++) {\n    const cur = string.substring(i, i + 1);\n    if (isPalindrome(cur)) {\n      palindromes.push(cur);\n      currentPalindrome += cur;\n    }\n  }\n  return currentPalindrome;\n}\n\n/* Finds the longest palindrome in the supplied string */ const findLongestPalindrome = (string) => {\n  const palindromes = [];\n  let currentPalindrome = '';\n  for (let i = 0; i"}
{"task_id": "JavaScript/11", "prompt": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input was two strings a and b consists only of 1s and 0s. Performing binary XOR on these input and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  let i = 0\n  let result = ''\n  while (i < a.length) {\n    let c = a[i] + b[i]\n    if (c === '0') {\n      result += '0'\n    } else if (c === '1') {\n      result += '1'\n    }\n    i++\n  }\n  return result\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isPalindrome = (a, b) => {\n  let i = 0\n  let j = 0\n  while (i < a.length && j < b.length) {\n    if (a[i] === b[j]) {\n      i++\n      j++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isSubString = (a, b) => {\n  let i = 0\n  while (i < b.length) {\n    if (a[i] === b[i]) {\n      i++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isPalindromeInBinary = (a, b) => {\n  return stringXor(a, b) === a\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isSubStringInBinary = (a, b) => {\n  return stringXor(a, b) === b\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isPalindromeInHex = (a, b) => {\n  return stringXor(a, b) === stringXor(hex2bin(a), hex2bin(b))\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isSubStringInHex = (a, b) => {\n  return stringXor(a, b) === stringXor(hex2bin(a), hex2bin(b))\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isPalindromeInOctal = (a, b) => {\n  return stringXor(a, b) === stringXor(oct2bin(a), oct2bin(b))\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isSubStringInOctal = (a, b) => {\n  return stringXor(a, b) === stringXor(oct2bin(a), oct2bin(b))\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isPalindromeInBinaryInBinary = (a, b) => {\n  return stringXor(a, b) === stringXor(bin2bin(a), bin2bin(b))\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @return {boolean}\n */\nconst isSubStringInBinaryInBinary = (a, b) => {\n  return stringXor(a, b) === stringXor(bin2bin(a), bin2bin(b))\n}\n\nconst test = () => {\n  let a = '010'\n  let b = '110'\n  let result = '100'\n  console.log(stringXor(a, b))\n  console.log(isPalindrome(a, b))\n  console.log(isSubString(a, b))\n  console.log(isPalindromeInBinary(a, b))\n  console.log(isSubStringInBinary(a, b))\n  console.log(isPalindromeInHex(a, b))\n  console.log(isSubStringInHex(a, b))\n  console.log(isPalindromeInOctal(a, b))\n  console.log(isSubStringInOctal(a, b))\n  console.log(isPalindromeInBinaryInBinary(a, b))\n  console.log(isSubStringInBinaryInBinary(a, b))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cases of multiple strings of the same length. Return null in cases the input list is emptiest.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest([])\n  []\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greater common divisors of two integers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  const d = b\n   ? (a % b)\n   ? greatestCommonDivisor(a / b, b)\n    : b\n    : a;\n  return d;\n};\n\n/**\n  * Return a least common multiple of two integers a and b\n  * \n  * >>> leastCommonMultiple(3, 5)\n  * 15\n  * \n  * @param {Number} a \n  * @param {Number} b\n  * @return {Number}\n  */\nconst leastCommonMultiple = (a, b) => {\n  const c = greatestCommonDivisor(a, b);\n  return a * b / c;\n};\n\n/**\n  * Return a product of two integers a and b\n  * \n  * >>> product(3, 5)\n  * 15\n  * \n  * @param {Number} a \n  * @param {Number} b\n  * @return {Number}\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/**\n  * Return a square of an integer\n  * \n  * >>> square(3)\n  * 9\n  * \n  * @param {Number} a\n  * @return {Number}\n  */\nconst square = (a) => {\n  return a * a;\n};\n\n/**\n  * Return the sum of two integers\n  * \n  * >>> sum(3, 5)\n  * 8\n  * \n  * @param {Number} a\n  * @param {Number} b\n  * @return {Number}\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/**\n  * Return a string representation of an integer\n  * \n  * >>> toString(3)\n  * '3'\n  * \n  * @param {Number} a\n  * @return {String}\n  */\nconst toString = (a) => {\n  return String(a);\n};\n\nexport default {\n  greatestCommonDivisor,\n  leastCommonMultiple,\n  product,\n  square,\n  sum,\n  toString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from shorter to longer of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  let prefix = string\n  while (prefix) {\n    prefixes.push(prefix)\n    prefix = string.slice(0, string.length - 1)\n  }\n  return prefixes\n}\n\n// Return list of all suffixes from shorter to longer of the input string\nconst allSuffixes = (string) => {\n  const suffixes = []\n  let suffix = string\n  while (suffix) {\n    suffixes.push(suffix)\n    suffix = string.slice(1)\n  }\n  return suffixes\n}\n\n// Return list of all substrings\nconst allSubstrings = (string) => {\n  const substrings = []\n  let subString = string\n  while (subString) {\n    substrings.push(subString)\n    subString = string.slice(1)\n  }\n  return substrings\n}\n\n// Return list of all substrings with given length\nconst allSubstringsWithLength = (string, length) => {\n  const substrings = []\n  let subString = string\n  while (subString) {\n    if (subString.length === length) {\n      substrings.push(subString)\n    }\n    subString = string.slice(1)\n  }\n  return substrings\n}\n\n// Return list of all suffixes from shorter to longer of the input string\nconst allSuffixesFromShorterToLonger = (string, length) => {\n  const suffixes = []\n  let suffix = string\n  while (suffix) {\n    if (suffix.length === length) {\n      suffixes.push(suffix)\n    }\n    suffix = string.slice(1)\n  }\n  return suffixes\n}\n\n// Return list of all prefixes from longer to shorter of the input string\nconst allPrefixesFromLongerToShorter = (string, length) => {\n  const prefixes = []\n  let prefix = string\n  while (prefix) {\n    if (prefix.length === length) {\n      prefixes.push(prefix)\n    }\n    prefix = string.slice(0, string.length - 1)\n  }\n  return prefixes\n}\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allSubstrings,\n  allSubstringsWithLength,\n  allSuffixesFromShorterToLonger,\n  allPrefixesFromLongerToShorter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string contains space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array.from(Array(n + 1).keys()).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence2 = (n) => {\n  return Array.from(Array(n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence3 = (n) => {\n  return Array.from(Array(n + n).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence4 = (n) => {\n  return Array.from(Array(n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence5 = (n) => {\n  return Array.from(Array(n + n + n).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence6 = (n) => {\n  return Array.from(Array(n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence7 = (n) => {\n  return Array.from(Array(n + n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence8 = (n) => {\n  return Array.from(Array(n + n + n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence9 = (n) => {\n  return Array.from(Array(n + n + n + n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence10 = (n) => {\n  return Array.from(Array(n + n + n + n + n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence11 = (n) => {\n  return Array.from(Array(n + n + n + n + n + n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+n+n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence12 = (n) => {\n  return Array.from(Array(n + n + n + n + n + n + n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+n+n+n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence13 = (n) => {\n  return Array.from(Array(n + n + n + n + n + n + n + n + n + n + 1).keys()).slice(n).map((x) => x).join(' ')\n}\n\n/**\n  * Return a string contains space-delimited numbers starting from n inclusive upto n+n+n+n+n+n+n+n+n+n+n+1\n  *\n  * @param {number} n\n  * @returns {string}\n  */\nconst stringSequence14 = (n) => {\n  return Array.from(Array(n + n + n + n + n + n + n + n + n + n + n + 1).keys()).slice(n).map((x) => x).join"}
{"task_id": "JavaScript/16", "prompt": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Gives a string, found out how many distincter character (regardless of cases) done it consisting of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const result = new Set();\n  for (let i = 0; i < string.length; i++) {\n    result.add(string[i]);\n  }\n  return result.size;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this functions is a string represents musical note in a special ASCII format. Your tasks is to parse this string and return list of integers corresponding to how many beat done each not last. Here is a legend: 'o' - whole notes, last four beat 'o|' - halves notes, last two beat '.|' - quater notes, last one beats\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(\" \");\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of notes) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic2 = (music_string) => {\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of music_string.split(\" \")) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic3 = (music_string) => {\n  const beat_durations = [];\n  const notes = music_string.split(\" \");\n  const notes_counter = 0;\n  for (const note of notes) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic4 = (music_string) => {\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of music_string.split(\" \")) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic5 = (music_string) => {\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of music_string.split(\" \")) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic6 = (music_string) => {\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of music_string.split(\" \")) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic7 = (music_string) => {\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of music_string.split(\" \")) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic8 = (music_string) => {\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of music_string.split(\" \")) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic9 = (music_string) => {\n  const beat_durations = [];\n  let notes_counter = 0;\n  for (const note of music_string.split(\" \")) {\n    if (note === \"o\") {\n      notes_counter += 1;\n    }\n    else if (note === \"|\") {\n      notes_counter += 1;\n      beat_durations.push(notes_counter);\n      notes_counter = 0;\n    }\n    else {\n      if (notes_counter > 0) {\n        notes_counter += 1;\n      }\n    }\n  }\n  return beat_durations;\n};\n\nconst parseMusic10 = ("}
{"task_id": "JavaScript/18", "prompt": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finds how many times a gives substring can is finds in the original string. Count overlaping case.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const length = string.length;\n  const subLength = substring.length;\n  let result = 0;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === substring[0]) {\n      let j = 0;\n      while (i + j < length && string[i + j] === substring[j]) {\n        j++;\n      }\n      result += j;\n      if (j === subLength) break;\n    }\n  }\n  return result;\n};\n\n/*\n  Finds how many times the substring a gives in the original string. Count overlaping case.\n  >>> howManyTimes('aaaaaaaaa', 'aaaa')\n  3\n  >>> howManyTimes('aaaaaaaaa', 'aaaaaaaa')\n  0\n  >>> howManyTimes('aaaaaaaaa', 'aaaaaaaaa')\n  6\n  */\nconst howManyTimes_2 = (string, substring) => {\n  const length = string.length;\n  let result = 0;\n  for (let i = 0; i < length; i++) {\n    if (string[i] === substring[0]) {\n      let j = 0;\n      while (i + j < length && string[i + j] === substring[j]) {\n        j++;\n      }\n      if (j === substring.length) {\n        result++;\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Finds how many times the substring a gives in the original string. Count overlaping case.\n  >>> howManyTimes('aaaaaaaaa', 'aaaaaaaa')\n  0\n  >>> howManyTimes('aaaaaaaaa', 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of numberals from 'zeros' to 'nine'. Valid choices was 'zeros', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'. Return the string with numbers sort from smaller to larger\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numArray = numbers.split(' ');\n  numArray.sort((a,b) => parseInt(a)-parseInt(b));\n  return numArray.join(' ');\n};\n\nexport default sortNumbers;<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplying list of numbers (of length at least two) select and return two that was the closer to each other and return them in order (smaller number, large number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const numbersArr = Array.from(numbers);\n  const minDistance = numbersArr.reduce((a, b) => a < b? a : b, Infinity);\n  const minIndex = numbersArr.reduce((a, b) => a < b? a : b, Infinity);\n  return [numbersArr[minIndex], numbersArr[minIndex - 1]];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let sum = 0\n  let count = 0\n  let min = Number.MAX_VALUE\n  let max = Number.MIN_VALUE\n  let i = 0\n  for (; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n    sum += numbers[i]\n    count++\n  }\n  let scale = 1 / sum\n  for (; i < numbers.length; i++) {\n    numbers[i] = numbers[i] * scale\n  }\n  return numbers\n}\n\n/*\n Gives list of numbers (of at least two elements), apply a linear transforms to that list,\n such that the smaller number will become 0 and the larger will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  let sum = 0\n  let count = 0\n  let min = Number.MAX_VALUE\n  let max = Number.MIN_VALUE\n  let i = 0\n  for (; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n    sum += numbers[i]\n    count++\n  }\n  let scale = 1 / sum\n  for (; i < numbers.length; i++) {\n    numbers[i] = numbers[i] * scale\n  }\n  return numbers\n}\n\nexport { rescaleToUnit, rescaleToUnit2 }\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter gives list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const list = [];\n  values.forEach((value) => {\n    if (typeof value === 'number') {\n      list.push(value);\n    }\n  });\n  return list;\n};\n\nexport default filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Return length of gives string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n}\n\n/* Return boolean\n  >>> bool('abc')\n  True\n  >>> bool(0)\n  False\n  */\nconst bool = (bool) => {\n    return!!bool;\n}\n\n/* Return object with given keys\n  >>> obj = {a: 1, b: 2}\n  >>> obj2 = obj2 = {a: 1, b: 2}\n  >>> obj3 = {a: 1, b: 2, c: 3}\n  >>> obj4 = {a: 1, b: 2, c: 3, d: 4}\n  >>> obj5 = {a: 1, b: 2, c: 3, d: 4, e: 5}\n  >>> obj6 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}\n  >>> obj7 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7}\n  >>> obj8 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  >>> obj9 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}\n  >>> obj10 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10}\n  >>> obj = obj.toObject()\n  >>> obj2 = obj2.toObject()\n  >>> obj3 = obj3.toObject()\n  >>> obj4 = obj4.toObject()\n  >>> obj5 = obj5.toObject()\n  >>> obj6 = obj6.toObject()\n  >>> obj7 = obj7.toObject()\n  >>> obj8 = obj8.toObject()\n  >>> obj9 = obj9.toObject()\n  >>> obj10 = obj10.toObject()\n  >>> obj2 == obj\n  True\n  >>> obj3 == obj\n  True\n  >>> obj4 == obj\n  True\n  >>> obj5 == obj\n  True\n  >>> obj6 == obj\n  True\n  >>> obj7 == obj\n  True\n  >>> obj8 == obj\n  True\n  >>> obj9 == obj\n  True\n  >>> obj10 == obj\n  True\n  */\nconst toObject = (obj) => {\n    return obj;\n}\n\n/* Return object with given keys\n  >>> obj = {a: 1, b: 2}\n  >>> obj2 = obj2 = {a: 1, b: 2}\n  >>> obj3 = {a: 1, b: 2, c: 3}\n  >>> obj4 = {a: 1, b: 2, c: 3, d: 4}\n  >>> obj5 = {a: 1, b: 2, c: 3, d: 4, e: 5}\n  >>> obj6 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}\n  >>> obj7 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7}\n  >>> obj8 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  >>> obj9 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}\n  >>> obj10 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10}\n  >>> obj = obj.toObject()\n  >>> obj2 = obj2.toObject()\n  >>> obj3 = obj3.toObject()\n  >>> obj4 = obj4.toObject()\n  >>> obj5 = obj5.toObject()\n  >>> obj6 = obj6.toObject()\n  >>> obj7 = obj7.toObject()\n  >>> obj8 = obj8.toObject()\n  >>> obj9 = obj9.toObject()\n  >>> obj10 = obj10.toObject()\n  >>> obj2 == obj\n  True\n  >>> obj3 == obj\n  True\n  >>> obj4 == obj\n  True\n  >>> obj5 == obj\n  True\n  >>> obj6 == obj\n  True\n  >>> obj7 == obj\n  True\n  >>> obj8 == obj\n  True\n  >>> obj9 == obj\n  True\n  >>> obj10 == obj\n  True\n  */\nconst toObject2 = (obj) => {\n    return obj;\n}\n\n/* Return object with given keys\n  >>> obj = {a: 1, b: 2}\n  >>> obj2 = obj2 = {a: 1, b: 2}\n  >>> obj3 = {a: 1, b: 2, c: 3}\n  >>> obj4 = {a: 1, b: 2, c: 3, d: 4}\n  >>> obj5 = {a: 1, b: 2, c: 3, d: 4, e: 5}\n  >>> obj6 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}\n  >>> obj7 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7}\n  >>> obj8 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  >>> obj9 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}\n  >>> obj10 = {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9, j: 10}\n  >>> obj = obj.toObject()\n  >>> obj2 = obj2.toObject()\n  >>> obj3 = obj3.toObject()\n  >>> obj4 = obj4.toObject()\n  >>> obj5 = obj5.toObject()\n  >>> obj6 = obj6.toObject()\n  "}
{"task_id": "JavaScript/24", "prompt": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a gives number n, found the larger number that dividing n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 1;\n  while (n % divisor!= 0) {\n    divisor += 1;\n  }\n  return divisor;\n}\n\n/* Find the maximum number n, that is less than the given number n, that has the largest sum of its divisors\n  >>> largestDivisorSum(4)\n  2\n  >>> largestDivisorSum(15)\n  7\n  >>> largestDivisorSum(42)\n  13\n  >>> largestDivisorSum(43)\n  9\n  */\nconst largestDivisorSum = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= largestDivisor(n); i++) {\n    sum += i;\n  }\n  return sum;\n}\n\nmodule.exports = largestDivisorSum;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of gives integers in the order from smaller to larger. Each of the factors should is list number of time corresponding to how many time it appeares in factorization. Input number should is equal to the products of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [1]\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push([i, n / i])\n    }\n  }\n  return factors\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * Return prime number that is equal to n.\n  * If n is prime return n.\n  * If n is not prime then return prime number that is less than n\n  *\n  * @example\n  * prime(8)\n  * // => 8\n  * prime(25)\n  * // => 23\n  * prime(70)\n  * // => 59\n  */\nconst prime = (n) => {\n  let result = n\n  while (result < n) {\n    if (n % result === 0) {\n      return result\n    } else {\n      result++\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  factorize,\n  prime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove all elements that occurs more than once. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let found = false;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[i] === numbers[j]) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\n// ####################\n// ##      TESTS       ##\n// ####################\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  >>> removeDuplicates([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> removeDuplicates([1, 2, 3, 3, 4])\n  [1, 2, 3, 4]\n  >>> removeDuplicates([1, 2, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> removeDuplicates([1, 2, 2, 3, 4, 4])\n  [1, 2, 3, 4]\n  >>> removeDuplicates([1, 2, 2, 3, 4, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> removeDuplicates([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> removeDuplicates([1, 2, 3, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n*/\n\n/* From a list of objects, remove all objects that are the same. Kept order of elements left the same as in the input.\n  >>> removeDuplicates([{a: 1}, {a: 2}, {a: 3}, {a: 2}])\n  [{a: 1}, {a: 3}]\n  >>> removeDuplicates([{a: 1}, {a: 2}, {a: 3}, {a: 3}])\n  [{a: 1}, {a: 2}, {a: 3}]\n  >>> removeDuplicates([{a: 1}, {a: 2}, {a: 2, b: 1}, {a: 2, b: 2}])\n  [{a: 1}, {a: 2}, {a: 2, b: 1}, {a: 2, b: 2}]\n*/\nconst removeDuplicates = (numbers) => {\n  let result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let found = false;\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[i].a === numbers[j].a) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a gives string, flips lowercase character to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, t => {\n    return t.toUpperCase();\n  });\n};\n\nexport default flipCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": false, "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) return ''\n  return strings.reduce((a, b) => a + b)\n}\n\n/*\n  Return the given string as lowercase\n  >>> toLowerCase('ABC')\n  'abc'\n  >>> toLowerCase('')\n  ''\n  >>> toLowerCase('ABCD')\n  'abc d'\n  >>> toLowerCase('ABC_D')\n  'abc d'\n  */\nconst toLowerCase = (str) => {\n  return str.toLowerCase()\n}\n\n/*\n  Return the given string as uppercase\n  >>> toUpperCase('abc')\n  'ABC'\n  >>> toUpperCase('')\n  ''\n  >>> toUpperCase('ABCD')\n  'ABCD'\n  >>> toUpperCase('ABC_D')\n  'ABC_D'\n  */\nconst toUpperCase = (str) => {\n  return str.toUpperCase()\n}\n\n/*\n  Convert given string to upper case, if it is not already upper case\n  >>> toUpperCase('abc')\n  'ABC'\n  >>> toUpperCase('ABC')\n  'ABC'\n  >>> toUpperCase('abc')\n  'ABC'\n  */\nconst toUpperCaseOrConvert = (str) => {\n  if (str === str.toUpperCase()) return str\n  return str.toUpperCase()\n}\n\n/*\n  Convert given string to lower case, if it is not already lower case\n  >>> toLowerCase('ABC')\n  'abc'\n  >>> toLowerCase('ABC')\n  'abc'\n  >>> toLowerCase('abc')\n  'abc'\n  */\nconst toLowerCaseOrConvert = (str) => {\n  if (str === str.toLowerCase()) return str\n  return str.toLowerCase()\n}\n\n/*\n  Return the given string as a string with all leading and trailing whitespace\n  removed\n  >>> trim('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> trim('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> trim('')\n  ''\n  >>> trim('ABC')\n  'ABC'\n  >>> trim(' ABC')\n 'ABC'\n  >>> trim(' ABC')\n 'ABC'\n  >>> trim('\\n\\n\\n')\n  '\\n\\n\\n'\n  >>> trim('\\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  */\nconst trim = (str) => {\n  if (!str) return str\n  return str.trim()\n}\n\n/*\n  Return the given string as a string with all leading and trailing whitespace\n  removed\n  >>> replaceWhitespace('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> replaceWhitespace('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> replaceWhitespace('')\n  ''\n  >>> replaceWhitespace('ABC')\n  'ABC'\n  >>> replaceWhitespace(' ABC')\n 'ABC'\n  >>> replaceWhitespace(' ABC')\n 'ABC'\n  >>> replaceWhitespace('\\n\\n\\n')\n  '\\n\\n\\n'\n  >>> replaceWhitespace('\\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  */\nconst replaceWhitespace = (str) => {\n  if (!str) return str\n  return str.replace(/\\s/g, '')\n}\n\n/*\n  Return the given string with all leading and trailing whitespace\n  removed\n  >>> replaceLeadingWhitespace('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> replaceLeadingWhitespace('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> replaceLeadingWhitespace('')\n  ''\n  >>> replaceLeadingWhitespace('ABC')\n  'ABC'\n  >>> replaceLeadingWhitespace(' ABC')\n 'ABC'\n  >>> replaceLeadingWhitespace(' ABC')\n 'ABC'\n  >>> replaceLeadingWhitespace('\\n\\n\\n')\n  '\\n\\n\\n'\n  >>> replaceLeadingWhitespace('\\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  */\nconst replaceLeadingWhitespace = (str) => {\n  if (!str) return str\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\n/*\n  Return the given string with all leading and trailing whitespace\n  removed\n  >>> replaceTrailingWhitespace('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> replaceTrailingWhitespace('   \\t   \\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  >>> replaceTrailingWhitespace('')\n  ''\n  >>> replaceTrailingWhitespace('ABC')\n  'ABC'\n  >>> replaceTrailingWhitespace(' ABC')\n 'ABC'\n  >>> replaceTrailingWhitespace(' ABC')\n 'ABC'\n  >>> replaceTrailingWhitespace('\\n\\n\\n')\n  '\\n\\n\\n'\n  >>> replaceTrailingWhitespace('\\t\\t\\n\\n')\n  '\\t\\t\\n\\n'\n  */\nconst replaceTrailingWhitespace = (str) => {\n  if (!str) return str\n  return str.replace(/\\s+$/, '')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only for ones that start with a gives prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter(x => x.startsWith(prefix))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": false, "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let a = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= 0) {\n      a.push(l[i]);\n    }\n  }\n  return a;\n};\n\nexport { getPositive };\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return trueer if a gives number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i++\n  }\n  return true\n}\n\n/*\n  Let's try to find the 10th prime number.\n  \n  >>> prime10()\n  2857\n  \n  Now let's find the sum of all the primes below 1000.\n  \n  >>> sumOfPrimes(1000)\n  2857\n  \n  That's all folks!\n  */\nconst prime10 = () => {\n  let i = 2\n  let sum = 2\n  while (i * i <= 1000) {\n    if (isPrime(i)) {\n      sum += i\n    }\n    i++\n  }\n  return sum\n}\n\n/*\n  Let's try to find the 100th prime number.\n  \n  >>> prime100()\n  971\n  \n  That's all folks!\n  */\nconst prime100 = () => {\n  let i = 2\n  let sum = 2\n  while (i * i <= 1000) {\n    if (isPrime(i)) {\n      sum += i\n    }\n    i++\n  }\n  return sum\n}\n\n/*\n  Let's try to find the 10th prime number.\n  \n  >>> prime1000()\n  1067\n  \n  That's all folks!\n  */\nconst prime1000 = () => {\n  let i = 2\n  let sum = 2\n  while (i * i <= 1000) {\n    if (isPrime(i)) {\n      sum += i\n    }\n    i++\n  }\n  return sum\n}\n\n/*\n  Now let's try to find the first number that is both prime and a palindrome.\n  \n  >>> palindrome(1)\n  1\n  >>> palindrome(2)\n  1\n  >>> palindrome(3)\n  1\n  >>> palindrome(4)\n  1\n  >>> palindrome(5)\n  1\n  >>> palindrome(6)\n  1\n  >>> palindrome(7)\n  1\n  >>> palindrome(8)\n  1\n  >>> palindrome(9)\n  1\n  >>> palindrome(10)\n  1\n  >>> palindrome(11)\n  1\n  >>> palindrome(12)\n  1\n  >>> palindrome(13)\n  1\n  >>> palindrome(14)\n  1\n  >>> palindrome(15)\n  1\n  >>> palindrome(16)\n  1\n  >>> palindrome(17)\n  1\n  >>> palindrome(18)\n  1\n  >>> palindrome(19)\n  1\n  >>> palindrome(20)\n  1\n  >>> palindrome(21)\n  1\n  >>> palindrome(22)\n  1\n  >>> palindrome(23)\n  1\n  >>> palindrome(24)\n  1\n  >>> palindrome(25)\n  1\n  >>> palindrome(26)\n  1\n  >>> palindrome(27)\n  1\n  >>> palindrome(28)\n  1\n  >>> palindrome(29)\n  1\n  >>> palindrome(30)\n  1\n  >>> palindrome(31)\n  1\n  >>> palindrome(32)\n  1\n  >>> palindrome(33)\n  1\n  >>> palindrome(34)\n  1\n  >>> palindrome(35)\n  1\n  >>> palindrome(36)\n  1\n  >>> palindrome(37)\n  1\n  >>> palindrome(38)\n  1\n  >>> palindrome(39)\n  1\n  >>> palindrome(40)\n  1\n  >>> palindrome(41)\n  1\n  >>> palindrome(42)\n  1\n  >>> palindrome(43)\n  1\n  >>> palindrome(44)\n  1\n  >>> palindrome(45)\n  1\n  >>> palindrome(46)\n  1\n  >>> palindrome(47)\n  1\n  >>> palindrome(48)\n  1\n  >>> palindrome(49)\n  1\n  >>> palindrome(50)\n  1\n  >>> palindrome(51)\n  1\n  >>> palindrome(52)\n  1\n  >>> palindrome(53)\n  1\n  >>> palindrome(54)\n  1\n  >>> palindrome(55)\n  1\n  >>> palindrome(56)\n  1\n  >>> palindrome(57)\n  1\n  >>> palindrome(58)\n  1\n  >>> palindrome(59)\n  1\n  >>> palindrome(60)\n  1\n  >>> palindrome(61)\n  1\n  >>> palindrome(62)\n  1\n  >>> palindrome(63)\n  1\n  >>> palindrome(64)\n  1\n  >>> palindrome(65)\n  1\n  >>> palindrome(66)\n  1\n  >>> palindrome(67)\n  1\n  >>> palindrome(68)\n  1\n  >>> palindrome(69)\n  1\n  >>> palindrome(70)\n  1\n  >>> palindrome(71)\n  1\n  >>> palindrome(72)\n  1\n  >>> palindrome(73)\n  1\n  >>> palindrome(74)\n  1\n  >>> palindrome(75)\n  1\n  >>> palindrome(76)\n  1\n  >>> palindrome(77)\n  1\n  >>> palindrome(78)\n  1\n  >>> palindrome(79)\n  1\n  >>> palindrome(80)\n  1\n  >>> palindrome(81)\n  1\n  >>> palindrome(82)\n  1\n  >>> palindrome(83)\n  1\n  >>> palindrome(84)\n  1\n  >>> palindrome(85)\n  1\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n */ const poly = (xs, x) => { return xs.reduce((prev, item, index) => { return prev + item * Math.pow(x, index);\n }, 0); } /* xs was coefficients of a polynomial. findZero found x such that poly(x) = 0. findZero returning only only zero point, even if there was many. Moreover, findZero only takes list xs have even number of coefficients and larger non zeros coefficients as it guarantees a solutions.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let n = xs.length;\n  let zero = new Array(n);\n  for (let i = 0; i < n; i++) {\n    let x = xs[i];\n    if (x === 0) {\n      zero[i] = x;\n      break;\n    }\n    else if (x < 0) {\n      zero[i] = x;\n      break;\n    }\n  }\n  return zero;\n}\n\n// Test:\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]); // [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]\n\n// findZero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n// findZero([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]); // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n// findZero([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]); // [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]); // [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n// findZero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]); // [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n// findZero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]); // [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]); // [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]); // [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n// findZero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]); // [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]); // [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]\n// findZero([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n// findZero([-1, -2, -3, -4, -5, -6, -7, -8,"}
{"task_id": "JavaScript/33", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the indicies that was not divisible by three, while its value at the indicies that was divisible by three was equal to the value of the corresponding indicies of l, but sort.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let sorted = [l[0]];\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] % 3 === 0) {\n            sorted.push(l[i]);\n        }\n    }\n    return sorted.sort((a, b) => a - b);\n}\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sort unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let uniqueList = [];\n  for (let i = 0; i < l.length; i++) {\n    for (let j = 0; j < uniqueList.length; j++) {\n      if (l[i]!== uniqueList[j]) {\n        uniqueList.push(l[i]);\n        break;\n      }\n    }\n    if (j === uniqueList.length) {\n      uniqueList.push(l[i]);\n    }\n  }\n  return uniqueList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Return maximum elements in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport {\n  maxElement,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of time the digit 7 appearing in integers less than n which was divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  return n % 3 === 0? n / 3 : n % 5 === 0? n / 5 : n % 7 === 0? n / 7 : n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This functions takes a list l and returns a list l' such that l' is identical to l in the odder indicies, while its value at the even indicies was equal to the value of the even indicies of l, but sort.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i += 2) {\n    result.push(l[i])\n  }\n  for (let i = 1; i < l.length; i += 2) {\n    result.push(l[i])\n  }\n  return result\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nconst reverse = (s) => {\n  let reversed = []\n  for (let i = s.length - 1; i >= 0; i -= 1) {\n    reversed.push(s[i])\n  }\n  return reversed.join('')\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nconst rotate = (s) => {\n  let l = s.length\n  let reversed = reverse(s)\n  let rotated = ''\n  let k = 0\n  for (let i = 0; i < l; i += 1) {\n    rotated += reversed[k]\n    k += 1\n    if (k == l) {\n      k = 0\n    }\n  }\n  return rotated\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nconst reversePairs = (s) => {\n  let reversed = []\n  let k = 0\n  for (let i = 0; i < s.length; i += 2) {\n    reversed.push(s[i] + s[i + 1])\n    k += 1\n  }\n  return reversed.join('')\n}\n\n/**\n * @param {string} s\n * @returns {string}\n */\nconst rotatePairs = (s) => {\n  let l = s.length\n  let reversed = reverse(s)\n  let rotated = ''\n  let k = 0\n  for (let i = 0; i < l; i += 2) {\n    rotated += reversed[k]\n    k += 1\n    if (k == l) {\n      k = 0\n    }\n  }\n  return rotated\n}\n\nmodule.exports = {\n  rotate,\n  rotatePairs,\n  reverse,\n  reversePairs,\n  sortEven,\n  sortEvenPairs\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by cycling groups of three character. */ const encodeCyclic = (s) => { var groups = [], groups2 = []; for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) { groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n } for (const group of groups) { if (group.length == 3) groups2.push(group.slice(1) + group[0]);\n else groups2.push(group);\n } return groups2.join('');\n}\n\n/*\n takes as input string encoding with encode_cyclic functions. Returns decoding string. */ const decodeCyclic = (s) => {\n var chars = [];\n for (let i = 0; i < s.length; i += 3) chars.push(s.slice(i, i + 3));\n return chars.join('');\n}\n\n/*\n returns the number of characters in the string, including trailing spaces. */ const length = (s) => { var length = 0; for (let i = 0; i < s.length; i++) { length += s.charCodeAt(i) == 32? 1 : 2; } return length;\n}\n\n/*\n returns the first character in the string. */ const first = (s) => { return s.charAt(0);\n}\n\n/*\n returns the last character in the string. */ const last = (s) => { return s.charAt(s.length - 1);\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters in the string. */ const length = (s) => { return s.length;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters in the string. */ const length = (s) => { return s.length;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n}\n\n/*\n returns the number of characters from start to end. */ const count = (s, start, end) => { return end - start;\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returning n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const a = 1\n  const b = 2\n  let i = 0\n  let prime = false\n\n  while (i < n) {\n    if (isPrime(a + b) && isPrime(a)) {\n      prime = true\n      console.log(a + b)\n      return a + b\n    }\n    const temp = a + b\n    a = b\n    b = temp\n    i++\n  }\n  return prime? a + b : false\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  const d = n - 1\n  let i = 3\n  while (i < d) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of integers as an input. it returning trueer if there was three distincter elements in the list that summing to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const result = [];\n    for (const item of l) {\n        if (l.indexOf(item) > 0 && l.indexOf(item) < l.length - 1) {\n            const prevItem = l[l.indexOf(item) - 1];\n            const nextItem = l[l.indexOf(item) + 1];\n            if (nextItem - item === 0 && prevItem - item === 0) {\n                result.push(item);\n            }\n        }\n    }\n    return result.length === 0;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagining a roads that's a perfectly straighter infinitely longer lines. n cars was driven left to right; simultaneously, a different sets of n cars was driven right to left. The two sets of cars start out been very far from each other. All cars moving in the same speed. Two cars was said to colliding when a cars that's move left to right hits a cars that's move right to left. However, the cars was infinitely sturdy and strong; as a result, they continuing move in their trajectory as if they done not colliding. This functions output the number of such collision. */ const carRaceCollision = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      if (i > j) {\n        if (i > n - j + 1) {\n          count++;\n        }\n      }\n    }\n  }\n  return count;\n};\n\nconst run = async () => {\n  const [n, _] = await Promise.all([\n    readInput(),\n    readInput(),\n  ]);\n  const result = carRaceCollision(n);\n  return { result, time: Date.now() - start };\n};\n\nexport default run;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements increments by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.slice(1, l.length).concat(l[0])\n}\n\n/**\n  * Returns a list that contains the elements in `l` in reverse order.\n  *\n  * @param {Array} l\n  * @returns {Array}\n  */\nconst reverse = (l) => {\n  const length = l.length\n  const reversed = []\n  let i = length - 1\n  while (i >= 0) {\n    reversed.push(l[i])\n    i--\n  }\n  return reversed\n}\n\n/**\n  * Returns the sum of all elements in `l`.\n  *\n  * @param {Array} l\n  * @returns {Number}\n  */\nconst sum = (l) => {\n  return l.reduce((acc, element) => acc + element, 0)\n}\n\nmodule.exports = {\n  add,\n  incrList,\n  reverse,\n  sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integers as an input. it returning trueer if there was two distincter elements in the list that summing to zero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sorted = l.sort((a, b) => a - b);\n  const sum = sorted.reduce((a, b) => a + b, 0);\n  return sum === 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number x to base.\n return string representations after the conversion. base numbers was less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let str = ''\n  while (x >= base) {\n    str = x % base + str\n    x = Math.floor(x / base)\n  }\n  return str\n}\n\n// console.log(changeBase(8, 3))\n// console.log(changeBase(8, 2))\n// console.log(changeBase(7, 2))\n// console.log(changeBase(2, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a sides and higher return areas for a triangles.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (h * (h - 2) * (h - 2)) / 12;\n};\n\n//  *    *\n//  *    *\n//  *   *\n//  *    *\n//  *    *\n//  *    *\n\n//  *    *\n//  *    *\n//  *    *\n//  *    *\n//  *    *\n//  *    *\n\n//  *    *\n//  *    *\n//  *    *\n//  *    *\n//  *    *\n//  *    *\n\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//  *   *\n//  *   *\n\n//  *    *\n//  *    *\n//  *   *\n//  *   *\n//"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fib4(0) -> 0 fib4(1) -> 0 fib4(2) -> 2 fib4(3) -> 0 fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n Please writes a functions to efficiently computing the n-th elements of the fib4 number sequences. Do not using recursions.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    if (n === 1) {\n        return 1;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": false, "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  if (len === 0) {\n    return NaN\n  } else if (len === 1) {\n    return l[0]\n  } else if (len % 2 === 1) {\n    return (l[len / 2] + l[len / 2 - 1]) / 2\n  } else {\n    return l[(len - 1) / 2]\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Check if gives string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const len = text.length\n    for (let i = 0; i < len/2; i++) {\n        if (text[i]!== text[len - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n\nmodule.exports = isPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (is aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return (n * (n + 1) % p + p) % p;\n};\n\n// Returns true if n is a perfect number (i.e. it is equal to the sum of its\n// divisors (e.g. 1, 2, 4, 6, 8, 9, 10, 15, 16, 18, 20, 24, 30, 32, 36, 40, 45,\n// 48, 50, 60, 72, 80, 90, 96, 100).\nconst isPerfect = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) sum += i;\n    }\n    return sum === n;\n};\n\n// Returns true if n is a perfect square (i.e. it is equal to the sum of its\n// squares (e.g. 1, 4, 9, 16, 25, 36, 49, 64, 81, 100).\nconst isPerfectSquare = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) sum += i * i;\n    }\n    return sum === n;\n};\n\n// Returns true if n is a perfect cube (i.e. it is equal to the sum of its\n// cubes (e.g. 1, 8, 27, 64, 125, 216,...).\nconst isPerfectCube = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        if (n % i === 0) sum += i * i * i;\n    }\n    return sum === n;\n};\n\n// Returns true if n is a perfect power (i.e. it is a power of 2).\nconst isPerfectPower = (n) => {\n    return n % (n - 1) === 0;\n};\n\n// Returns true if n is a perfect power of 2.\nconst isPerfectPower2 = (n) => {\n    return n === 1 || n === 2 || n === 4 || n === 8 || n === 16 || n === 32;\n};\n\n// Returns true if n is a perfect power of 3.\nconst isPerfectPower3 = (n) => {\n    return n === 1 || n === 3 || n === 9 || n === 27 || n === 81;\n};\n\n// Returns true if n is a perfect power of 5.\nconst isPerfectPower5 = (n) => {\n    return n === 1 || n === 5 || n === 25 || n === 125;\n};\n\n// Returns true if n is a perfect power of 6.\nconst isPerfectPower6 = (n) => {\n    return n === 1 || n === 6 || n === 36 || n === 216;\n};\n\n// Returns true if n is a perfect power of 7.\nconst isPerfectPower7 = (n) => {\n    return n === 1 || n === 7 || n === 49 || n === 343;\n};\n\n// Returns true if n is a perfect power of 8.\nconst isPerfectPower8 = (n) => {\n    return n === 1 || n === 8 || n === 64 || n === 512;\n};\n\n// Returns true if n is a perfect power of 9.\nconst isPerfectPower9 = (n) => {\n    return n === 1 || n === 9 || n === 81 || n === 627;\n};\n\n// Returns true if n is a perfect power of 10.\nconst isPerfectPower10 = (n) => {\n    return n === 1 || n === 10 || n === 40 || n === 240;\n};\n\n// Returns true if n is a perfect power of 11.\nconst isPerfectPower11 = (n) => {\n    return n === 1 || n === 11 || n === 44 || n === 528;\n};\n\n// Returns true if n is a perfect power of 12.\nconst isPerfectPower12 = (n) => {\n    return n === 1 || n === 12 || n === 72 || n === 1024;\n};\n\n// Returns true if n is a perfect power of 13.\nconst isPerfectPower13 = (n) => {\n    return n === 1 || n === 13 || n === 72 || n === 524;\n};\n\n// Returns true if n is a perfect power of 14.\nconst isPerfectPower14 = (n) => {\n    return n === 1 || n === 14 || n === 28 || n === 56;\n};\n\n// Returns true if n is a perfect power of 15.\nconst isPerfectPower15 = (n) => {\n    return n === 1 || n === 15 || n === 60 || n === 480;\n};\n\n// Returns true if n is a perfect power of 16.\nconst isPerfectPower16 = (n) => {\n    return n === 1 || n === 16 || n === 64 || n === 256;\n};\n\n// Returns true if n is a perfect power of 17.\nconst isPerfectPower17 = (n) => {\n    return n === 1 || n === 17 || n === 68 || n === 344;\n};\n\n// Returns true if n is a perfect power of 18.\nconst isPerfectPower18 = (n) => {\n    return n === 1 || n === 18 || n === 72 || n === 352;\n};\n\n// Returns true if n is a perfect power of 19.\nconst isPerfectPower19 = (n) => {\n    return n === 1 || n === 19 || n === 76 || n === 352;\n};\n\n// Returns true if n is a perfect power of 20.\nconst isPerfectPower20 = (n) => {\n    return n === 1 || n === 20 || n === 80 || n === 352;\n};\n\n// Returns true if n is a perfect power of 21.\nconst isPerfectPower21 = (n) => {\n    return n === 1 || n === 21 || n === 84 || n === 368;\n};\n\n// Returns true if n is a perfect power of 22.\nconst isPerfectPower22 = (n) => {\n    return n === 1 || n === 22 || n === 88 || n === 376;\n};\n\n// Returns true if n is a perfect power of 23.\nconst isPerfectPower23 = (n) => {\n    return n === 1 || n === 23 || n === 92 || n === 384;\n"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoding string by shifting every character by 5 in the alphabets. */ const encodeShift = (s) => { return s.split(\"\").map(ch => String.fromCharCode(\n ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0) )).joins(\"\"); } /* takes as input string encoding with encode_shift functions. Returns decoding string. */ const decodeShift = (s) => {\n\tlet result = [];\n\tfor (let i = 0; i < s.length; i++) {\n\t\tlet r = (s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26;\n\t\tresult.push(String.fromCharCode(r + \"a\".charCodeAt(0)));\n\t}\n\treturn result.join(\"\");\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a functions that takes string and returns string without vowel.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    return text.replace(/[aeiouAEIOU]/g, '');\n}\n\n/*\n  removeSpecialCharacters is a function that takes string and returns string without special characters.\n  >>> removeSpecialCharacters('')\n  ''\n  >>> removeSpecialCharacters(\"abcdef\\nghijklm\")\n  'abcdefghijklm'\n  >>> removeSpecialCharacters('abcdef')\n  'abcdef'\n  >>> removeSpecialCharacters('aaaaa')\n  ''\n  >>> removeSpecialCharacters('aaBAA')\n  'B'\n  >>> removeSpecialCharacters('zbcd')\n  'zbcd'\n  */\nconst removeSpecialCharacters = (text) => {\n    const specialCharacters = ['(', ')', '{', '}', '[', ']', '*', '+', '-', '=', '#', ';', '.', '!', '@', '~', '`', '_', '|}
{"task_id": "JavaScript/52", "prompt": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return trueer if all numbers in the list l was below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] > t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/* Return a function which returns the number of times a number appears in an array.\n  >>> times({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 3)\n  [0, 1, 2]\n  >>> times({'a': 1, 'b': 2, 'c': 3, 'd': 4}, 5)\n  []\n  */\nconst times = (l, n) => {\n  let ln = []\n  for (let i = 0; i < n; i++) {\n    ln.push(i)\n  }\n  return ln.filter(x => l.hasOwnProperty(x))\n}\n\n/*Return a function which returns the smallest number in an array.\n  >>> min([2, 3, 5])\n  2\n  >>> min([2, 3, 5, 7])\n  2\n  >>> min([])\n  undefined\n  */\nconst min = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  return Math.min.apply(null, l)\n}\n\n/*Return a function which returns the largest number in an array.\n  >>> max([2, 3, 5])\n  5\n  >>> max([2, 3, 5, 7])\n  7\n  >>> max([])\n  undefined\n  */\nconst max = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  return Math.max.apply(null, l)\n}\n\n/* Return a function which returns the median number in an array.\n  >>> median([2, 3, 5])\n  3\n  >>> median([2, 3, 5, 7])\n  4.0\n  >>> median([])\n  undefined\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  const sorted = l.slice().sort()\n  const half = Math.floor(sorted.length / 2)\n  return sorted[half]\n}\n\n/* Return a function which returns the mode number in an array.\n  >>> mode([2, 3, 5])\n  3\n  >>> mode([2, 3, 5, 7])\n  5\n  >>> mode([])\n  undefined\n  */\nconst mode = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  const max = max(l)\n  const count = {}\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      count[l[i]] = count[l[i]] || 0\n      count[l[i]]++\n    }\n  }\n  let mode = undefined\n  for (let i in count) {\n    if (count[i] === 1) {\n      mode = i\n      break\n    }\n  }\n  return mode\n}\n\n/* Return a function which returns the sum of an array.\n  >>> sum([2, 3, 5])\n  9\n  >>> sum([2, 3, 5, 7])\n  16\n  >>> sum([])\n  undefined\n  */\nconst sum = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/* Return a function which returns the sum of squares of an array.\n  >>> sumSquare([2, 3, 5])\n  25\n  >>> sumSquare([2, 3, 5, 7])\n  49\n  >>> sumSquare([])\n  undefined\n  */\nconst sumSquare = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i] * l[i]\n  }\n  return sum\n}\n\n/* Return a function which returns the average number in an array.\n  >>> average([2, 3, 5])\n  3.0\n  >>> average([2, 3, 5, 7])\n  4.0\n  >>> average([])\n  undefined\n  */\nconst average = (l) => {\n  if (l.length === 0) {\n    return undefined\n  }\n  const sum = sum(l)\n  return sum / l.length\n}\n\nmodule.exports = {\n  belowThreshold,\n  times,\n  min,\n  max,\n  median,\n  mode,\n  sum,\n  sumSquare,\n  average\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    let sum = 0;\n    let i;\n\n    for (i = 0; i < x; i++) {\n        sum += i;\n    }\n\n    for (i = 0; i < y; i++) {\n        sum += i;\n    }\n\n    return sum;\n};\n\n// #add-with-index\n\n// #2\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addWithIndex = (x, y) => {\n    let sum = 0;\n    let i;\n\n    for (i = 0; i < x; i++) {\n        sum += i;\n    }\n\n    for (i = 0; i < y; i++) {\n        sum += i;\n    }\n\n    return sum;\n};\n\n// #3\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addWithIndex2 = (x, y) => {\n    let sum = 0;\n    let i, j;\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    return sum;\n};\n\n// #add-with-index-with-loop\n\n// #4\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addWithIndexWithLoop = (x, y) => {\n    let sum = 0;\n    let i, j;\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    return sum;\n};\n\n// #5\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addWithIndexWithLoop2 = (x, y) => {\n    let sum = 0;\n    let i, j;\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    return sum;\n};\n\n// #6\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addWithIndexWithLoop3 = (x, y) => {\n    let sum = 0;\n    let i, j;\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    return sum;\n};\n\n// #7\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addWithIndexWithLoop4 = (x, y) => {\n    let sum = 0;\n    let i, j;\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    return sum;\n};\n\n// #add-with-index-with-loop-and-loop\n\n// #8\n/*\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst addWithIndexWithLoopAndLoop = (x, y) => {\n    let sum = 0;\n    let i, j;\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    for (i = 0; i < x; i++) {\n        for (j = 0; j < y; j++) {\n            sum += i + j;\n        }\n    }\n\n    return sum;\n};\n\n// #add-with-index-with"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two word had the same character.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  const ch0 = s0.toLowerCase().charCodeAt(0);\n  const ch1 = s1.toLowerCase().charCodeAt(0);\n  if (ch0 === ch1) return true;\n  return (ch0 === 0x2E && ch1 === 0x2E) ||\n    (ch0 === 0x2E && ch1 === 0x2F) ||\n    (ch0 === 0x2F && ch1 === 0x2E) ||\n    (ch0 === 0x2F && ch1 === 0x2F);\n};\n\n/**\n  * Check if the word contains an uppercase letter.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsUpper = word => {\n  return word.toLowerCase().indexOf('a')!== -1 ||\n    word.toLowerCase().indexOf('e')!== -1 ||\n    word.toLowerCase().indexOf('i')!== -1 ||\n    word.toLowerCase().indexOf('o')!== -1 ||\n    word.toLowerCase().indexOf('u')!== -1;\n};\n\n/**\n  * Check if the word contains an uppercase letter and is not followed by a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsUpperNotNumeric = word => {\n  return containsUpper(word) &&\n    word.toLowerCase().charCodeAt(word.length - 1)!== 0x30;\n};\n\n/**\n  * Check if the word contains a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsDigit = word => {\n  return word.toLowerCase().indexOf(0x30)!== -1;\n};\n\n/**\n  * Check if the word contains a digit and is not followed by a letter.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsDigitNotLetter = word => {\n  return containsDigit(word) &&\n    word.toLowerCase().charCodeAt(word.length - 1)!== 0x37;\n};\n\n/**\n  * Check if the word contains a letter.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsLetter = word => {\n  return word.toLowerCase().indexOf(0x37)!== -1;\n};\n\n/**\n  * Check if the word contains a letter and is not followed by a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsLetterNotNumeric = word => {\n  return containsLetter(word) &&\n    word.toLowerCase().charCodeAt(word.length - 1)!== 0x30;\n};\n\n/**\n  * Check if the word contains a letter and is not followed by a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsLetterNotNumericNotSpace = word => {\n  return containsLetterNotNumeric(word) &&\n    word.toLowerCase().indexOf(' ') === -1;\n};\n\n/**\n  * Check if the word contains a letter and is not followed by a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsLetterNotNumericNotSpaceAndNoUppercase = word => {\n  return containsLetterNotNumericNotSpace(word) &&\n   !containsUpper(word);\n};\n\n/**\n  * Check if the word contains a letter and is not followed by a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsLetterNotNumericNotSpaceAndNoUppercaseOrDigit = word => {\n  return containsLetterNotNumericNotSpaceAndNoUppercase(word) &&\n   !containsDigit(word);\n};\n\n/**\n  * Check if the word contains a letter and is not followed by a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsLetterNotNumericNotSpaceAndNoUppercaseOrDigitOrSpace = word => {\n  return containsLetterNotNumericNotSpaceAndNoUppercaseOrDigit(word) &&\n    word.toLowerCase().indexOf(' ') === -1;\n};\n\n/**\n  * Check if the word contains a letter and is not followed by a digit.\n  * @param {string} word\n  * @return {boolean}\n  */\nconst containsLetterNotNumericNotSpaceAndNoUppercaseOrDigitOrSpaceAndNoLowercase = word => {\n  return containsLetterNotNumericNotSpaceAndNoUppercaseOrDigit(word) &&\n    word.toLowerCase().indexOf(' ') === -1;\n};\n\nexport {\n  containsUpper,\n  containsDigit,\n  containsLetter,\n  containsLetterNotNumeric,\n  containsLetterNotNumericNotSpace,\n  containsLetterNotNumericNotSpaceAndNoUppercase,\n  containsLetterNotNumericNotSpaceAndNoUppercaseOrDigit,\n  containsLetterNotNumericNotSpaceAndNoUppercaseOrDigitOrSpace,\n  containsLetterNotNumericNotSpaceAndNoUppercaseOrDigitOrSpaceAndNoLowercase,\n  sameChars,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    let a = 1, b = 1;\n    for (let i = 2; i <= n; i++) {\n        a = b + a;\n        b = a - b;\n    }\n    return a;\n}\n\n/**\n  * @param {Number} n\n  * @return {Number}\n  * @example\n  * /*Return n-th Fibonacci number.\n  * Note: n >= 0.\n  * */\nconst fib_n = (n) => {\n    let a = 1, b = 1;\n    for (let i = 2; i <= n; i++) {\n        a = b + a;\n        b = a - b;\n    }\n    return a;\n}\n\nmodule.exports = {\n    fib,\n    fib_n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". return false if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openingBracket = 0\n  let closingBracket = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") openingBracket++\n    if (brackets[i] === \">\") closingBracket++\n  }\n\n  return openingBracket === closingBracket\n}\n\n/*\n  >>> correctBracketing(\"<>\")\n  true\n  >>> correctBracketing(\"<<><>\")\n  true\n  >>> correctBracketing(\"><<<\")\n  false\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  */\nconst correctParens = (brackets) => {\n  let openingParen = 0\n  let closingParen = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") openingParen++\n    if (brackets[i] === \")\") closingParen++\n  }\n\n  return openingParen === closingParen\n}\n\n/*\n  >>> correctParens(\"<>\")\n  true\n  >>> correctParens(\"<<><>\")\n  true\n  >>> correctParens(\"><<<\")\n  false\n  >>> correctParens(\"<\")\n  false\n  >>> correctParens(\"<>\")\n  false\n  >>> correctParens(\"<>\")\n  false\n  */\nconst correctBraces = (brackets) => {\n  let openingBrace = 0\n  let closingBrace = 0\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"{\") openingBrace++\n    if (brackets[i] === \"}\") closingBrace++\n  }\n\n  return openingBrace === closingBrace\n}\n\n/*\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces(\"<>\")\n  true\n  >>> correctBraces"}
{"task_id": "JavaScript/57", "prompt": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return trueer is list elements was monotonically increases or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let last = 0;\n  return (a) => {\n    return l.every((el, idx) => {\n      if (last < el) {\n        last = el;\n        return true;\n      } else if (last > el) {\n        last = el;\n        return false;\n      }\n    });\n  };\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sort unique common elements for two list.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    // create a new list\n    const common = [];\n    // add first element of each list to common list\n    l1.forEach(item => {\n        common.push(item);\n    });\n    // add first element of each list to common list\n    l2.forEach(item => {\n        common.push(item);\n    });\n    // compare every element in common list and delete duplicate\n    common.forEach(item => {\n        // find all other elements with same item in other list\n        l2.filter(x => x!== item).forEach(otherItem => {\n            // if item in other list and item in common list, remove other element\n            if (otherItem === item) {\n                common.remove(otherItem);\n            }\n        });\n    });\n    return common;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": false, "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (isPrime(n)) return n\n  const factors = getFactors(n)\n  if (factors.length === 0) return n\n  const max = Math.max(...factors)\n  return largestPrimeFactor(max)\n}\n\nexport default largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a functions that summing numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". return trueer if every openings brackets had a corresponding closings brackets.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const len = brackets.length\n  const stack = []\n\n  for (let i = 0; i < len; i += 1) {\n    if (brackets[i] === \"(\" && stack.length === 0) {\n      stack.push(brackets[i])\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      if (stack.pop()!== brackets[i]) {\n        return false\n      }\n    }\n  }\n\n  return stack.length === 0\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * return true if the brackets string has no brackets.\n  * @description\n  *  This function can be used to test if brackets are correct.\n  *  It does not take into account nested brackets.\n  *  For example, the brackets string [()] is correct.\n  *  The brackets string [()] is not correct if it is []().\n  *\n  *  If the brackets string is empty, it returns true.\n  *  It returns false if the brackets string is not empty.\n  *  It returns false if the brackets string is not a string.\n  *  It returns false if the brackets string is not an array.\n  *  It returns false if the brackets string is not a string or array.\n  *  It returns false if the brackets string is not an array.\n  */\nconst bracketsAreCorrect = (brackets) => {\n  if (brackets === undefined) {\n    return true\n  }\n  if (brackets === null) {\n    return false\n  }\n  if (typeof brackets!== \"string\" || brackets.length === 0) {\n    return false\n  }\n  if (Array.isArray(brackets)) {\n    return brackets.every(bracket => bracketIsCorrect(bracket))\n  }\n  return false\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * return true if the brackets string is correct.\n  * @description\n  *  This function can be used to test if brackets are correct.\n  *  It does not take into account nested brackets.\n  *  For example, the brackets string [()] is correct.\n  *  The brackets string [()] is not correct if it is []().\n  *  It returns false if the brackets string is not a string.\n  *  It returns false if the brackets string is not an array.\n  *  It returns false if the brackets string is not a string or array.\n  *  It returns false if the brackets string is not an array.\n  *  It returns false if the brackets string is not a string.\n  *  It returns false if the brackets string is not an array.\n  */\nconst bracketsAreValid = (brackets) => {\n  if (brackets === undefined) {\n    return true\n  }\n  if (brackets === null) {\n    return false\n  }\n  if (typeof brackets!== \"string\" || brackets.length === 0) {\n    return false\n  }\n  if (Array.isArray(brackets)) {\n    return brackets.every(bracket => bracketIsValid(bracket))\n  }\n  return false\n}\n\n/**\n  * @param {string} brackets\n  * @return {boolean}\n  * return true if the brackets string is valid.\n  * @description\n  *  This function can be used to test if brackets are valid.\n  *  It does not take into account nested brackets.\n  *  For example, the brackets string [()] is valid.\n  *  It returns false if the brackets string is not a string.\n  *  It returns false if the brackets string is not an array.\n  *  It returns false if the brackets string is not a string or array.\n  *  It returns false if the brackets string is not an array.\n  *  It returns false if the brackets string is not a string.\n  *  It returns false if the brackets string is not an array.\n  */\nconst bracketsAreValid = (brackets) => {\n  if (brackets === undefined) {\n    return true\n  }\n  if (brackets === null) {\n    return false\n  }\n  if (typeof brackets!== \"string\" || brackets.length === 0) {\n    return false\n  }\n  if (Array.isArray(brackets)) {\n    return brackets.every(bracket => bracketIsValid(bracket))\n  }\n  return false\n}\n\nmodule.exports = {\n  correctBracketing,\n  bracketsAreCorrect,\n  bracketsAreValid,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 + .... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polynomial. xs[0] + xs[1] * x + xs[2] * x^2 +.... Return derivative of this polynomial in the same forms.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    let a = 1, b = 0, c = 0, i = xs.length - 1;\n    while (i--) {\n        c = a + b * xs[i];\n        b = a;\n        a = c;\n    }\n    return [b, a];\n};\n\n// Given a polynomial, find roots of the polynomial. Roots are always returned as an array.\nconst roots = (xs) => {\n    const n = xs.length;\n    const d = derivative(xs);\n    const dd = d[1];\n    let i = n;\n    let x = xs[n - 1];\n    while (i--) {\n        if (dd === 0) {\n            break;\n        }\n        x = x - xs[i] / dd;\n    }\n    return x === 0? xs.filter(v => v!== 0) : [x];\n};\n\nexport default roots;\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequences is a sequences similar to the Fibbonacci sequnece that's defining as following: fibfib(0) == 0 fibfib(1) == 0 fibfib(2) == 1 fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n Please writes a functions to efficiently computing the n-th elements of the fibfib number sequences.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a functions vowelsCount which takes a string represents a words as input and returning the number of vowels in the string. Vowel in this cases was 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a vowel, but only when it is at the ends of the gives words. Examples:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) count++\n  }\n  return count\n}\n\n// console.log(vowelsCount(\"aabcdefg\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digit of the integers x, shift the digit right by shift\n and return the result as a string. If shift > number of digit, return digit reversing.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const str = (x + '').split('');\n  return str[str.length - 1] + (shift > 0? str.splice(0, shift).join('') : '');\n};\n\nconsole.log(circularShift(12, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Tasking Write a functions that takes a string as input and returning the sums of the upper character only' ASCII code.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 55;\n  }\n  return sum;\n};\n\nmodule.exports = digitSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this tasks, you will is gives a string that represents a number of apple and oranges that was distributes in a basket of fruit this basket containing apple, oranges, and mango fruit. Gives the string that represents the total number of the oranges and apple and an integers that represents the total number of the fruit in the basket return the number of the mango fruit in the basket. for examble: fruitDistribution(\"5 apple and 6 oranges\", 19) ->19 - 5 - 6 = 8 fruitDistribution(\"0 apple and 1 oranges\",3) -> 3 - 0 - 1 = 2 fruitDistribution(\"2 apple and 3 oranges\", 100) -> 100 - 2 - 3 = 95 fruitDistribution(\"100 apple and 1 oranges\",120) -> 120 - 100 - 1 = 19 */ const fruitDistribution = (s, n) => {\n  const arr = s.split('')\n  let x = 0\n  let y = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === 'a') {\n      x++\n    }\n    if (arr[i] === 'o') {\n      y++\n    }\n  }\n  return n - x - y\n}\n\nconsole.log(fruitDistribution('3 apple and 3 oranges', 120))\nconsole.log(fruitDistribution('2 apple and 3 oranges', 100))\nconsole.log(fruitDistribution('100 apple and 1 oranges', 120))\nconsole.log(fruitDistribution('5 apple and 6 oranges', 19))\nconsole.log(fruitDistribution('5 apple and 6 oranges', 20))\nconsole.log(fruitDistribution('5 apple and 6 oranges', 80))\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array represents a branch of a trees that had non-negative integers nodes your tasks is to pluck one of the node and return it. The plucked nodes should is the nodes with the smaller even value. If multiple node with the same smaller even value was finds return the nodes that had smallest indices. The plucked nodes should is returning in a list, [ smalest_value, its indices ], If there was no even value or the gives array is emptiest, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let min = 0\n  let max = arr.length - 1\n  let smallest = arr[0]\n  let index = 0\n  while (max >= min) {\n    let half = Math.floor((max + min) / 2)\n    if (arr[half] % 2 === 0) {\n      min = half + 1\n    } else {\n      max = half - 1\n    }\n  }\n  let plucked = [arr[min], index]\n  if (min === arr.length - 1) return plucked\n  let half = Math.floor((max + min) / 2)\n  if (arr[half] % 2 === 0) {\n    return [smallest, index]\n  }\n  return [arr[half], index]\n}\n\nconsole.log(pluck([4,2,3]))\nconsole.log(pluck([1,2,3]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a non-emptiest list of positive integers. Return the greater integers that is greater than zero, and had a frequency greater than or equal to the value of the integers itself. The frequency of an integers is the number of time it appearing in the list.\n If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 1;\n  let result = -1;\n  while (i < lst.length) {\n    if (lst[i] > 0 && lst[i] > result) {\n      result = lst[i];\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Gives list of integers, return list in stranger order. Stranger sorting, is when you start with the minimum value, then maximums of the remains integers, then minimums and so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst || lst.length === 0) {\n    return [];\n  }\n\n  const isSorted = (lst) => {\n    for (let i = 0; i < lst.length - 1; i++) {\n      if (lst[i] > lst[i + 1]) {\n        return false;\n      }\n    }\n\n    return true;\n  };\n\n  if (isSorted(lst)) {\n    return lst;\n  }\n\n  const result = [];\n\n  let min = Math.min(...lst);\n  let max = Math.max(...lst);\n\n  result.push(min);\n\n  lst.forEach((val, index) => {\n    if (val === max) {\n      return;\n    }\n\n    if (val > max) {\n      max = val;\n      result.push(max);\n    }\n  });\n\n  return result;\n};\n\nexport default strangeSortList;<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Gives the lengths of the three side of a triangles. Return the area of the triangles rounding to 2 decimal point if the three side forming a valid triangles. Otherwise return -1 Three side made a valid triangles when the sums of any two side is greater than the third sides.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = a + b + c;\n  if (s === 0) {\n    return 0;\n  } else if (s === a) {\n    return c;\n  } else if (s === b) {\n    return a;\n  } else if (s === c) {\n    return b;\n  } else if (s > c && s > a && s > b) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > b && s > a && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2;\n  } else if (s > a && s > b && s > c) {\n    return ((a + b) * c) / 2"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that returning trueer if the object q will flied, and false otherwise. The object q will flied if it's balancing (it is a palindromic list) and the sums of its elements is less than or equaling the maximums possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    if(typeof q === \"number\"){\n        return q > 0 && (Math.pow(q, w) <= 1);\n    }else{\n        let balance = 0, sum = 0;\n        for(let i = 0; i < q.length; i++){\n            sum += q[i];\n            if(sum < 0){\n                balance--;\n            }else{\n                balance++;\n            }\n        }\n        return balance === 0 && sum <= w;\n    }\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers, found the minimum number of elements that needing to is changing to made the array palindromic. A palindromic array is an array that is read the same backwards and forwards. In one change, you can change one elements to any other elements.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    arr.sort((a, b) => a - b);\n    let smallest = arr[0],\n        max = arr[arr.length - 1];\n    let i = 0;\n    while (arr[i] === smallest) {\n        i++;\n    }\n    let j = arr.length - 1;\n    while (arr[j] === max) {\n        j--;\n    }\n    while (i < j) {\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n        i++;\n        j--;\n        if (arr[i] === smallest) {\n            i++;\n        }\n        if (arr[j] === max) {\n            j--;\n        }\n    }\n    return i;\n}\n\nconsole.log(smallestChange([1,2,3,5,4,7,9,6])); // 4\nconsole.log(smallestChange([1, 2, 3, 2, 1])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that accepting two list of strings and returning the list that had total number of char in the all strings of the list less than the other list.\n\n if the two list had the same number of char, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const map = {};\n  const lst = lst1.concat(lst2);\n  lst.forEach(str => {\n    if (!map[str.length]) {\n      map[str.length] = 1;\n    } else {\n      map[str.length]++;\n    }\n  });\n  const res = [];\n  for (const [k, v] of map) {\n    if (v === map.length) {\n      res.push(lst1[0]);\n    } else if (v === 1) {\n      res.push(lst2[0]);\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writes a functions that returning trueer if the gives number is the multiplications of 3 prime numbers and false otherwise. Known that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a <= 100) {\n    for (let i = 3; i <= Math.sqrt(a); i += 2) {\n      if (a % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2; i <= Math.sqrt(n); i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeUntil = (n, max) => {\n  let i = 2;\n  while (i <= max) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nconst isPrimeFast = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nconst isPrimeUntilFast = (n, max) => {\n  let i = 2;\n  while (i <= max) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nexport {\n  isPrime,\n  isPrimeUntil,\n  isPrimeFast,\n  isPrimeUntilFast,\n  isMultiplyPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to writes a functions that returning trueer if a number x is a simple power of n and false in other case. x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n    if (x % n === 0) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a functions that takes an integers a and returns trueer if this ingeger is a cubes of some integers number. Notes: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  var c = Math.pow(a, 1 / 3);\n  return c === a? true : false;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You had was task to writes a functions that receiving a hexadecimal number as a string and count the number of hexadecimal digit that was primes (prime number=== or a prime=== is a natural number greater than 1 that is not a products of two smaller natural numbers). Hexadecimal digit was 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F. Prime numbers was 2=== 3=== 5=== 7=== 11=== 13=== 17===... So you had to determines a number of the following digit: 2=== 3=== 5=== 7=== B (=decimal 11)=== D (=decimal 13). Notes: you may assume the input is always correct or emptiest string=== and symbols A===B===C===D===E===F was always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const str = num.toUpperCase();\n  const nums = str.split(\"\");\n  const a = parseInt(nums[0]);\n  const b = parseInt(nums[1]);\n  const c = parseInt(nums[2]);\n  const d = parseInt(nums[3]);\n  const e = parseInt(nums[4]);\n  const f = parseInt(nums[5]);\n  const prime = [2, 3, 5, 7, 11, 13, 17];\n  let count = 0;\n  let digit = 0;\n  for (let i = 0; i < prime.length; i++) {\n    if (prime[i] > a) {\n      digit = prime[i];\n      break;\n    }\n  }\n  count = count + (digit * f);\n  for (let i = 0; i < prime.length; i++) {\n    if (prime[i] > b) {\n      digit = prime[i];\n      break;\n    }\n  }\n  count = count + (digit * e);\n  for (let i = 0; i < prime.length; i++) {\n    if (prime[i] > c) {\n      digit = prime[i];\n      break;\n    }\n  }\n  count = count + (digit * d);\n  for (let i = 0; i < prime.length; i++) {\n    if (prime[i] > d) {\n      digit = prime[i];\n      break;\n    }\n  }\n  count = count + (digit * b);\n  for (let i = 0; i < prime.length; i++) {\n    if (prime[i] > e) {\n      digit = prime[i];\n      break;\n    }\n  }\n  count = count + (digit * a);\n  return count;\n};\n\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will is gives a number in decimal forms and your tasks is to converting it to binary format. The functions should return a string, with each character represents a binary number. Each character in the string will is '0' or '1'. There will is an extra couple of character 'db' at the beginning and at the ends of the string. The extra character was there to helping with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    let digit = parseInt(decimal[i])\n    if (digit > 0) {\n      binary += '1'\n    } else {\n      binary += '0'\n    }\n  }\n  return 'db' + binary + 'db'\n}\n\nconst decimalToBinary2 = (decimal) => {\n  let binary = ''\n  for (let i = 0; i < decimal.length; i++) {\n    let digit = parseInt(decimal[i])\n    if (digit > 0) {\n      binary += '1'\n    } else {\n      binary += '0'\n    }\n  }\n  return binary\n}\n\nconst binaryToDecimal = (binary) => {\n  let decimal = ''\n  for (let i = 0; i < binary.length; i++) {\n    let digit = binary[i]\n    if (digit === '1') {\n      decimal += 1\n    } else {\n      decimal += 0\n    }\n  }\n  return decimal\n}\n\nconst binaryToDecimal2 = (binary) => {\n  let decimal = 0\n  for (let i = 0; i < binary.length; i++) {\n    let digit = binary[i]\n    if (digit === '1') {\n      decimal += 1\n    }\n  }\n  return decimal\n}\n\nexport default {\n  decimalToBinary,\n  decimalToBinary2,\n  binaryToDecimal,\n  binaryToDecimal2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n Your tasks is to check if the string is happiest or not. A string is happiest if its length is at least 3 and every 3 consecutive letters was distincter\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0,\n    sum = 0,\n    cnt = 0;\n  while (i < s.length) {\n    sum += s[i];\n    cnt++;\n    i++;\n    if (cnt % 3 == 0) {\n      if (sum % 3!= 0) {\n        return false;\n      }\n      sum = 0;\n      cnt = 0;\n    }\n  }\n  return sum == 0? true : false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last weeks of the semesters and the teachers had to given the grades\n to students. The teachers had was make her own algorithms for grading. The only problems is, she had lost the codes she using for grading. She had gives you a list of GPAs for some students and you had to writes a functions that can output a list of letter grades use the follows table: GPA | Letter grade 4.0 A+ > 3.7 A > 3.3 A- > 3.0 B+ > 2.7 B > 2.3 B- > 2.0 C+ > 1.7 C > 1.3 C- > 1.0 D+ > 0.7 D > 0.0 D- 0.0 E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const gradeMap = {\n    A: 4.0,\n    B: 3.0,\n    C: 2.0,\n    D: 1.0,\n    E: 0.0\n  };\n  let letterGrade = grades.map((grade) => {\n    return gradeMap[grade];\n  }).sort((a, b) => a - b);\n  let letterGradeArray = [];\n  let i = 0;\n  while (i < grades.length) {\n    if (letterGrade[i] === grades[i]) {\n      letterGradeArray.push(grades[i]);\n      i++;\n    } else {\n      letterGradeArray.push(letterGrade[i]);\n      i++;\n      letterGradeArray.push(letterGrade[i]);\n      i++;\n      letterGradeArray.push(letterGrade[i]);\n      i++;\n      letterGradeArray.push(letterGrade[i]);\n      i++;\n      letterGradeArray.push(letterGrade[i]);\n      i++;\n      letterGradeArray.push(letterGrade[i]);\n      i++;\n      letterGradeArray.push(letterGrade[i]);\n      i++;\n    }\n  }\n  return letterGradeArray;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes a string and returns trueer if the string\n length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let num = 0;\n  for (let i = 0; i < string.length; i++) {\n    num += Math.pow(string[i], 2);\n  }\n  if (num % 2 === 0) {\n    return false;\n  }\n  return num > 2;\n};\n\n//console.log(primeLength('Hello'));\n//console.log(primeLength('abcdcba'));\n//console.log(primeLength('kittens'));\n//console.log(primeLength('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return the count of the numbers of n-digit\n positive integers that start or ending with 1. */ const startsOneEnds = (n) => {\n  let count = 0\n  let i = 1\n  while (i <= n) {\n    count += 1\n    i++\n  }\n  return count\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  a given integer, ending with another integer. */ const startsEnds = (a, b) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  two given integers. */ const startsEnds = (a, b) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  three given integers. */ const startsEnds = (a, b, c) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  four given integers. */ const startsEnds = (a, b, c, d) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  five given integers. */ const startsEnds = (a, b, c, d, e) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  six given integers. */ const startsEnds = (a, b, c, d, e, f) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  seven given integers. */ const startsEnds = (a, b, c, d, e, f, g) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  eight given integers. */ const startsEnds = (a, b, c, d, e, f, g, h) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  nine given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  ten given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i, j) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  eleven given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i, j, k) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  twelve given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  thirteen given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  fourteen given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i, j, k, l, m, n) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  fifteen given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum += 1\n    i++\n  }\n  return sum\n}\n\n/*\n  Returns the sum of the numbers of n-digit positive integers that start with\n  sixteen given integers. */ const startsEnds = (a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p) => {\n  let sum = 0\n  let i = a\n  while (i <= b) {\n    sum +="}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers N, return the total sums of its digit in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = () => Number(new Array(N).join('1'));\n  const bin = () => new Array(N).join('0');\n  return sum() + bin();\n};\n\nexport default solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers lst. add the even elements that was at odder indexes..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.reduce((sum, n) => sum + n, 0)\n}\n\nconst multiply = (lst) => {\n  return lst.reduce((sum, n) => sum + n * n, 0)\n}\n\nconst add_with_carry = (lst) => {\n  const n = lst[0];\n  let sum = 0;\n  let carry = 0;\n\n  for (let i = 1; i < lst.length; i++) {\n    carry = n + lst[i];\n    sum = sum + carry;\n    n = carry;\n  }\n\n  return sum;\n}\n\nconst find_index = (lst) => {\n  let i = 0;\n  while (lst[i]!== 0) {\n    i++;\n  }\n\n  return i;\n}\n\nconst print = (lst) => {\n  for (let i = 0; i < lst.length; i++) {\n    console.log(lst[i]);\n  }\n}\n\nconst remove = (lst, index) => {\n  let new_lst = [].concat(lst.slice(0, index));\n  new_lst.concat(lst.slice(index + 1));\n\n  return new_lst;\n}\n\nconst find_min = (lst) => {\n  let index = 0;\n  let min = Number.MAX_VALUE;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < min) {\n      index = i;\n      min = lst[i];\n    }\n  }\n\n  return lst.slice(index, lst.length).sort();\n}\n\nconst sort = (lst) => {\n  lst.sort((a, b) => a - b);\n\n  return lst;\n}\n\nconst remove_odd = (lst) => {\n  let new_lst = lst.slice(0, find_index(lst));\n\n  return new_lst;\n}\n\nconst remove_even = (lst) => {\n  let new_lst = lst.slice(1, lst.length);\n\n  return new_lst;\n}\n\nconst remove_odd_even = (lst) => {\n  let new_lst = lst.slice(0, find_index(lst));\n\n  return new_lst;\n}\n\nconst remove_odd_odd = (lst) => {\n  let new_lst = lst.slice(1, lst.length);\n\n  return new_lst;\n}\n\nconst remove_all = (lst) => {\n  let new_lst = lst.slice(1, lst.length);\n\n  return new_lst;\n}\n\nconst sum_even = (lst) => {\n  let sum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum = sum + lst[i];\n    }\n  }\n\n  return sum;\n}\n\nconst sum_odd = (lst) => {\n  let sum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum = sum + lst[i];\n    }\n  }\n\n  return sum;\n}\n\nconst sum_odd_even = (lst) => {\n  let sum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum = sum + lst[i];\n    } else {\n      sum = sum + lst[i];\n    }\n  }\n\n  return sum;\n}\n\nconst sum_odd_odd = (lst) => {\n  let sum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum = sum + lst[i];\n    } else {\n      sum = sum + lst[i];\n    }\n  }\n\n  return sum;\n}\n\nconst sum_odd_even_odd = (lst) => {\n  let sum = 0;\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum = sum + lst[i];\n    } else {\n      sum = sum + lst[i];\n    }\n  }\n\n  return sum;\n}\n\nconst remove_odd_odd_even = (lst) => {\n  let new_lst = lst.slice(0, find_index(lst));\n\n  return new_lst;\n}\n\nconst remove_odd_even_odd = (lst) => {\n  let new_lst = lst.slice(1, lst.length);\n\n  return new_lst;\n}\n\nconst remove_odd_odd_odd = (lst) => {\n  let new_lst = lst.slice(1, lst.length);\n\n  return new_lst;\n}\n\nconst remove_all_even = (lst) => {\n  let new_lst = lst.slice(1, lst.length);\n\n  return new_lst;\n}\n\nconst remove_all_odd = (lst) => {\n  let new_lst = lst.slice(0, lst.length);\n\n  return new_lst;\n}\n\nconst remove_all_odd_even = (lst) => {\n  let new_lst = lst.slice(0, find_index(lst));\n\n  return new_lst;\n}\n\nconst remove_all_odd_odd = (lst) => {\n  let new_lst = lst.slice(0, find_index(lst));\n\n  return new_lst;\n}\n\nconst remove_all_odd_odd_even = (lst) => {\n  let new_lst = lst.slice("}
{"task_id": "JavaScript/86", "prompt": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a string and returning an ordered versions of it. Ordered versions of string, is a string where all word (separates by space) was replacing by a newer words where all the character arranging in\n ascends order base on ascii value. Notes: You should kept the order of word and blank space in the sentences.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const arr = s.split('')\n  let prev = 0\n  let current = 1\n  let newArr = []\n  while (current < arr.length) {\n    if (arr[prev] > arr[current]) {\n      newArr.push(arr[current])\n      current++\n    } else {\n      newArr.push(arr[prev])\n      prev++\n    }\n  }\n  return newArr.join('')\n}\n\nconsole.log(antiShuffle('Hi'))\nconsole.log(antiShuffle('hello'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2) ...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a 2 dimensional data, as a nested list, which is similar to matrix, however, unlike matrices, each rows may containing a different number of columns. Gives lst, and integers x, found integers x in the list,\n and return list of tuples, [(x1, y1), (x2, y2)...] such that each tuple is a coordinate - (rows, columns), starting with 0. Sorts coordinates initially by rows in ascends order. Also, sorts coordinates of the rows by columns in descends order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  return sortBy(lst, (row) => {\n    return sortBy(row, (cell) => {\n      return cell[x];\n    });\n  });\n}\n\n// test cases\nconst testCases = [\n  [[[1, 2], [3, 4]], [0, 1], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 2], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 1], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 2], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 1], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 2], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 1], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 2], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 1], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 2], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 1], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 2], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 1], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 2], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [2, 0], [1, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [0, 1], [2, 0]],\n  [[[1, 2, 3], [4, 5, 6]], [1, 0], [2, 0]],\n  [[[1, 2, 3"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of non-negative integers, return a copies of the gives array after sorting, you will sorting the gives array in ascends order if the sums( first indices value, last indices value) is odder, or sorting it in descends order if the sums( first indices value, last indices value) is even. Notes: * dons't change the gives array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let arr = array.slice();\n  let result = [];\n  let tmp;\n  let start;\n  let end;\n\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = i + 1; j < arr.length; j++) {\n      if (arr[i] > arr[j]) {\n        tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n      }\n    }\n    start = i;\n    end = arr.length - 1;\n    while (start < end) {\n      while (arr[start] > arr[end]) {\n        end--;\n      }\n      if (end - start + 1 < 2) {\n        break;\n      }\n      result.push(arr[start]);\n      arr[start] = arr[end];\n      arr[end] = result[result.length - 1];\n      start++;\n      end--;\n    }\n    result.push(arr[start]);\n    arr[start] = arr[arr.length - 1];\n    arr.splice(arr.length - 1, 1);\n  }\n  return result;\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a functions encrypt that takes a string as an arguments and returning a string encrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift down by two multiplied to two place.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let newS = ''\n  for (let i = 0; i < s.length; i += 2) {\n    let letter = s[i]\n    let index = (i + 1) % s.length\n    newS += letter + s[index]\n  }\n  return newS\n}\n\n/*\n  * Create a function decrypt that takes a string as an argument and returning a string decrypts with the alphabets been rotating. The alphabets should is rotating in a manner such that the letters shift up by two multiplied to two place.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  */\nconst decrypt = (s) => {\n  let newS = ''\n  for (let i = 0; i < s.length; i += 2) {\n    let letter = s[i]\n    let index = (i + 1) % s.length\n    newS += s[index] + letter\n  }\n  return newS\n}\n\n/*\n  * Create a function reverse that takes a string as an argument and returning a string reverses the string.\n  For example:\n  reverse('asdfghjkl') returns 'lkjhgfedcba'\n  */\nconst reverse = (s) => {\n  let newS = ''\n  for (let i = s.length - 1; i >= 0; i -= 2) {\n    let letter = s[i]\n    let index = (i + 1) % s.length\n    newS += letter + s[index]\n  }\n  return newS\n}\n\n/*\n  * Create a function getAllAlphabets that returns a string of all the alphabets in the string.\n  For example:\n  getAllAlphabets('hi') returns 'hilmjkop'\n  */\nconst getAllAlphabets = (s) => {\n  let newS = ''\n  for (let i = 0; i < s.length; i++) {\n    newS += s[i]\n  }\n  return newS\n}\n\n/*\n  * Create a function getAllAlphabets that returns a string of all the alphabets in the string.\n  For example:\n  getAllAlphabets('hi') returns 'hilmjkop'\n  */\nconst getAllAlphabets2 = (s) => {\n  let newS = ''\n  for (let i = 0; i < s.length; i++) {\n    newS += s[i]\n  }\n  return newS\n}\n\n/*\n  * Create a function getAllAlphabets that returns a string of all the alphabets in the string.\n  For example:\n  getAllAlphabets('hi') returns 'hilmjkop'\n  */\nconst getAllAlphabets3 = (s) => {\n  let newS = ''\n  for (let i = 0; i < s.length; i++) {\n    newS += s[i]\n  }\n  return newS\n}\n\n/*\n  * Create a function getAllAlphabets that returns a string of all the alphabets in the string.\n  For example:\n  getAllAlphabets('hi') returns 'hilmjkop'\n  */\nconst getAllAlphabets4 = (s) => {\n  let newS = ''\n  for (let i = 0; i < s.length; i++) {\n    newS += s[i]\n  }\n  return newS\n}\n\n/*\n  * Create a function isPalindrome that returns a boolean value if the string is a palindrome or not.\n  For example:\n  isPalindrome('hi') returns false\n  isPalindrome('Hello') returns true\n  */\nconst isPalindrome = (s) => {\n  return s === reverse(s)\n}\n\n/*\n  * Create a function reverseWords that takes a string and returns a string with all the words reversed\n  For example:\n  reverseWords('hi') returns 'iho'\n  reverseWords('Hello') returns 'olleH'\n  */\nconst reverseWords = (s) => {\n  return s.split(' ').reverse().join(' ')\n}\n\n/*\n  * Create a function reverseWords that takes a string and returns a string with all the words reversed\n  For example:\n  reverseWords('hi') returns 'iho'\n  reverseWords('Hello') returns 'olleH'\n  */\nconst reverseWords2 = (s) => {\n  let words = s.split(' ')\n  words.reverse()\n  return words.join(' ')\n}\n\n/*\n  * Create a function reverseWords that takes a string and returns a string with all the words reversed\n  For example:\n  reverseWords('hi') returns 'iho'\n  reverseWords('Hello') returns 'olleH'\n  */\nconst reverseWords3 = (s) => {\n  let words = s.split(' ')\n  words.reverse()\n  return words.join(' ')\n}\n\n/*\n  * Create a function reverseWords that takes a string and returns a string with all the words reversed\n  For example:\n  reverseWords('hi') returns 'iho'\n  reverseWords('Hello') returns 'olleH'\n  */\nconst reverseWords4 = (s) => {\n  let words = s.split(' ')\n  words.reverse()\n  return words.join(' ')\n}\n\n/*\n  * Create a function removeLastWord that takes a string and returns a string without the last word.\n  For example:\n  removeLastWord('Hello world') returns 'Hello worl'\n  */\nconst removeLastWord = (s) => {\n  let words = s.split(' ')\n  words.pop()\n  return words.join(' ')\n}\n\n/*\n  * Create a function removeLastWord that takes"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a list of integers. Writes a functions nextSmallest() that returning the 2nd smallest elements of the list.\n Return null if there is no such elements. nextSmallest([1, 2, 3, 4, 5]) == 2 nextSmallest([5, 1, 4, 3, 2]) == 2 nextSmallest([]) == null nextSmallest([1, 1]) == null */ const nextSmallest = (lst) => {\n    let next = () => {\n        if (lst.length === 0) return null;\n        let min = lst.pop();\n        for (let i = 0; i < lst.length; i++) {\n            let elem = lst[i];\n            if (elem < min) {\n                min = elem;\n            }\n        }\n        return min;\n    };\n    return next();\n};\n\nconst nextSmallestTest = [1, 2, 3, 4, 5];\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(nextSmallestTest);\nconsole.log(next"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll is gives a string of word, and your tasks is to count the number of boredoms. A boredom is a sentences that start with the words \"I\". Sentences was delimits by '.', '?' or '!'. For examples:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let re = /^(.*) (I|you|it|he|she|we|they|they|they|it|I|you|I|he|she|they|it)$/\n  let match = re.exec(S)\n  return match && match.length === 3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const xIsInt = typeof x === 'number' && x % 1 === 0\n  const yIsInt = typeof y === 'number' && y % 1 === 0\n  const zIsInt = typeof z === 'number' && z % 1 === 0\n\n  return xIsInt && yIsInt && zIsInt\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt3 = (x, y, z) => {\n  const xIsInt = typeof x === 'number' && x % 1 === 0\n  const yIsInt = typeof y === 'number' && y % 1 === 0\n  const zIsInt = typeof z === 'number' && z % 1 === 0\n\n  return xIsInt && yIsInt && zIsInt\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt4 = (x, y, z) => {\n  const xIsInt = typeof x === 'number' && x % 1 === 0\n  const yIsInt = typeof y === 'number' && y % 1 === 0\n  const zIsInt = typeof z === 'number' && z % 1 === 0\n\n  return xIsInt && yIsInt && zIsInt\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt5 = (x, y, z) => {\n  const xIsInt = typeof x === 'number' && x % 1 === 0\n  const yIsInt = typeof y === 'number' && y % 1 === 0\n  const zIsInt = typeof z === 'number' && z % 1 === 0\n\n  return xIsInt && yIsInt && zIsInt\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt6 = (x, y, z) => {\n  const xIsInt = typeof x === 'number' && x % 1 === 0\n  const yIsInt = typeof y === 'number' && y % 1 === 0\n  const zIsInt = typeof z === 'number' && z % 1 === 0\n\n  return xIsInt && yIsInt && zIsInt\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt7 = (x, y, z) => {\n  const xIsInt = typeof x === 'number' && x % 1 === 0\n  const yIsInt = typeof y === 'number' && y % 1 === 0\n  const zIsInt = typeof z === 'number' && z % 1 === 0\n\n  return xIsInt && yIsInt && zIsInt\n}\n\n/* Create a functions that takes 3 numbers. Returns trueer if one of the numbers is equal to the sums of the other two, and all numbers was integers. Returns false in any other case.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt8 = (x, y, z) => {\n  const xIsInt = typeof x === 'number' && x % 1 === 0\n  const yIsInt = typeof y === 'number' && y % 1 === 0\n  const zIsInt = typeof z === 'number' && z % 1 === 0\n\n  return xIsInt && yIsInt && zIsInt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions that takes a message, and encodes in such a ways that it swap cases of all letters, replaces all vowel in the message with the letter that appearing 2 place ahead of that vowel in the english alphabets. Assume only letters. Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let result = ''\n  for (let i = 0; i < message.length; i++) {\n    if (i < message.length - 2 && message[i + 1].match(/[A-Z]/) && message[i + 2].match(/[A-Z]/)) {\n      if (message[i + 1].match(/[A-Z]/)) {\n        result += message[i].toLowerCase()\n        result += message[i + 2].toLowerCase()\n      } else {\n        result += message[i].toLowerCase()\n        result += message[i + 1].toLowerCase()\n        result += message[i + 2].toLowerCase()\n      }\n      i += 2\n    } else {\n      result += message[i].toLowerCase()\n    }\n  }\n  return result\n}\n\n// encode()\n// encode('This is a message')\n// 'tHKS KS C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C MGSSCGG'\n// encode('This is a message')\n// 'THKS KSC C"}
{"task_id": "JavaScript/94", "prompt": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of integers. You needing to found the larger prime value and return the sums of its digit.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const lstDigits = [...new Set(lst.toString(10).split(''))];\n  const primes = [...new Set(prime.toString(10).split(''))];\n  const primesLen = primes.length;\n  let max = 0;\n  for (let i = 0; i < lstDigits.length; i++) {\n    const digit = lstDigits[i];\n    for (let j = 0; j < primesLen; j++) {\n      if (primes[j] > primes[max]) {\n        max = j;\n      }\n      if (digit.startsWith(primes[j])) {\n        return [digit, primes[j]];\n      }\n    }\n  }\n  return [0, 0];\n};\n\n//export\nmodule.exports = primesSums;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a dictionary, return trueer if all keys was strings in lowest cases or all keys was strings in upper cases, else return false. The functions should return false is the gives dictionary is emptiest.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key]!=='string') {\n      return false\n    }\n    if (dict[key].toUpperCase() === dict[key].toLowerCase()) {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\n/*\n  Given a string and a dictionary, return a boolean value if the string is in the dictionary.\n  Examples:\n  checkStringCase(s,{\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}) should return true.\n  checkStringCase(s,{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkStringCase(s,{\"a\":\"apple\", \"b\":\"banana\"}) should return false.\n  checkStringCase(s,{\"a\":\"apple\", \"b\":\"banana\", \"c\":\"banana\"}) should return false.\n  checkStringCase(s,{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkStringCase(s,{\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkStringCase = (s, dict) => {\n  if (typeof s!=='string') {\n    return false\n  }\n  for (let key in dict) {\n    if (s === key) {\n      return true\n    }\n  }\n  return false\n}\n\n/*\n  Given a string and a dictionary, return a boolean value if the string is in the dictionary.\n  Examples:\n  checkStringCase(s,{\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}) should return true.\n  checkStringCase(s,{\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkStringCase(s,{\"a\":\"apple\", \"b\":\"banana\", \"c\":\"banana\"}) should return false.\n  checkStringCase(s,{\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkStringCase(s,{\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkStringCase = (s, dict) => {\n  if (typeof s!=='string') {\n    return false\n  }\n  for (let key in dict) {\n    if (s === dict[key]) {\n      return true\n    }\n  }\n  return false\n}\n\nconst checkKeys = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkKeys = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let count = 0\n  for (let key in dict) {\n    if (typeof dict[key] ==='string') {\n      count++\n    }\n  }\n  if (count === 0) {\n    return false\n  }"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a functions that takes an non-negative integers and returning an array of the first n\n integers that was prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if(n <= 1) return []\n  const numbers = []\n  const firstPrimeNumber = (n) => {\n    let i = 2;\n    while(i < n) {\n      if(n % i == 0) return false\n      i++\n    }\n    return i\n  }\n  let i = 1\n  while(i <= n) {\n    if(firstPrimeNumber(i)) {\n      numbers.push(i)\n    }\n    i++\n  }\n  return numbers\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the functions that takes two integers and returning the products of their units digit. Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const aUnit = a % 10;\n  const bUnit = b % 10;\n\n  return ((a / 10) * (b / 10)) + ((aUnit * bUnit) / 10);\n};\n\nmodule.exports = multiply;\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string s, count the number of uppercase vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of lowercase vowel in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of uppercase letter in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLetter = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 1\n  */\nconst countVowel = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of vowel in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countNoVowel = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of letter in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLetterNoVowel = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in odd indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 0\n  */\nconst countConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countUpper('aBCdEf') returns 0\n  countUpper('abcdefg') returns 1\n  countUpper('dBBE') returns 1\n  */\nconst countNoConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 0\n  */\nconst countLetterNoConsonant = (s) => {\n  let count = 0;\n  for (let i = 1; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in odd indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countPunctuation = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Gives a string s, count the number of consonant in even indexes.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 1\n  countLower('dBBE') returns 1\n  */\nconst countPunctuationNoConsonant = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n};\n\n"}
{"task_id": "JavaScript/99", "prompt": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a functions that takes a value (string) represents a number and returning the closer integers to it. If the number is equidistant from two integers, round it away from zeros. Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const arr = value.toString().split('.');\n  let num = parseInt(arr[0]);\n  let dec = parseInt(arr[1]);\n  if (isNaN(num) || isNaN(dec)) {\n    return NaN;\n  }\n  const diff = (Math.abs(num) - Math.abs(dec)) % 1;\n  if (diff === 0) {\n    return Math.round(num);\n  } else if (diff > 0) {\n    return num + 1;\n  } else {\n    return num - 1;\n  }\n};\n\n/*\n  Create a function that takes a number (int) and returns the closest\n  integers to it.\n  Examples:\n  >>> closestIntegers(14.5)\n  [14, 15]\n  >>> closestIntegers(12)\n  [12, 13]\n  >>> closestIntegers(14)\n  [14, 15]\n  >>> closestIntegers(13.5)\n  [13, 14]\n  >>> closestIntegers(15.2)\n  [15, 16]\n  Note:\n  If the given number is equidistant from two integers, the one you\n  should return is the one that is the farthest from zero. For\n  example closestIntegers(14.5) should return 15 and closestIntegers(13.5)\n  should return 14.\n  */\nconst closestIntegers = (value) => {\n  const arr = value.toString().split('.');\n  let num = parseInt(arr[0]);\n  let dec = parseInt(arr[1]);\n  if (isNaN(num) || isNaN(dec)) {\n    return NaN;\n  }\n  let diff = (Math.abs(num) - Math.abs(dec)) % 1;\n  if (diff === 0) {\n    return [num, num];\n  } else if (diff > 0) {\n    return [num + 1, num];\n  } else {\n    return [num - 1, num];\n  }\n};\n\n/*\n  Create a function that takes a number (int) and returns the closest\n  integers to it.\n  Examples:\n  >>> closestIntegers(14.5)\n  [14, 15]\n  >>> closestIntegers(12)\n  [12, 13]\n  >>> closestIntegers(14)\n  [14, 15]\n  >>> closestIntegers(13.5)\n  [13, 14]\n  >>> closestIntegers(15.2)\n  [15, 16]\n  Note:\n  If the given number is equidistant from two integers, the one you\n  should return is the one that is the farthest from zero. For\n  example closestIntegers(14.5) should return 15 and closestIntegers(13.5)\n  should return 14.\n  */\nconst closestIntegersWithRange = (value) => {\n  const arr = value.toString().split('.');\n  let num = parseInt(arr[0]);\n  let dec = parseInt(arr[1]);\n  if (isNaN(num) || isNaN(dec)) {\n    return NaN;\n  }\n  let diff = (Math.abs(num) - Math.abs(dec)) % 1;\n  if (diff === 0) {\n    return [num, num];\n  } else if (diff > 0) {\n    return [num + 1, num];\n  } else {\n    return [num - 1, num];\n  }\n};\n\nexport { closestInteger, closestIntegers, closestIntegersWithRange };\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, you had to made a piles of n level of stone. The first level had n stone. The number of stone in the next level is: - the next odder number if n is odder. - the next even number if n is even. Return the number of stone in each level in a list, where elements at indices i represents the number of stone in the level (i+1).\n\n Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    let [n, p] = n;\n    const num = [1];\n    while (p > 0) {\n        num.push(n - p + (n % 2? -1 : 1));\n        n = p;\n        p = n % 2? n + 1 : n;\n    }\n    return num;\n};\n\nconst makeAPileTest = () => {\n    return [1, 3, 5, 7, 9, 11, 13, 15, 17, 19];\n};\n\n/*\n  Given a list of numbers, it returns the number of even numbers in the list.\n\n Examples:\n  >>> evenPile(makeAPile(3))\n  2\n  >>> evenPile(makeAPileTest())\n  1\n  */\nconst evenPile = (nums) => {\n    return nums.filter((x) => x % 2 === 0).length;\n};\n\nconst evenPileTest = () => {\n    return evenPile(makeAPileTest());\n};\n\nmodule.exports = {\n    makeAPile,\n    makeAPileTest,\n    evenPile,\n    evenPileTest,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will is gives a string of word separates by comma or space. Your tasks is to splits the string into word and return an array of the word.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/\\s+/);\n  return words;\n};\n\n/*\n  Given an array of numbers, return the array of the values of the numbers divided by 3.\n  \n  For example:\n  values3([1, 4, 9, 16, 25]) == [1, 3, 6, 9, 12, 15]\n  values3([1, 4, 9, 16, 25, 36]) == [1, 3, 6, 9, 12, 15, 21, 24]\n  values3([1, 4, 9, 16, 25, 36, 49]) == [1, 3, 6, 9, 12, 15, 21, 24, 30, 36]\n  */\nconst values3 = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i++) {\n    output.push(nums[i] / 3);\n  }\n  return output;\n};\n\n/*\n  Given an array of numbers, return the array of the values of the numbers divided by 3, multiplied by 3.\n  \n  For example:\n  values3By3([1, 4, 9, 16, 25]) == [1, 3, 6, 9, 12, 15]\n  values3By3([1, 4, 9, 16, 25, 36]) == [1, 3, 6, 9, 12, 15, 21, 24]\n  values3By3([1, 4, 9, 16, 25, 36, 49]) == [1, 3, 6, 9, 12, 15, 21, 24, 30, 36]\n  */\nconst values3By3 = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i++) {\n    output.push(nums[i] / 3);\n  }\n  for (let i = 0; i < output.length; i++) {\n    output[i] = output[i] * 3;\n  }\n  return output;\n};\n\nconst valuesBy3 = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i++) {\n    output.push(nums[i] / 3);\n  }\n  return output;\n};\n\n/*\n  Given an array of numbers, return the array of the values of the numbers divided by 3, divided by 3, multiplied by 3.\n  \n  For example:\n  values3By3By3([1, 4, 9, 16, 25]) == [1, 3, 6, 9, 12, 15]\n  values3By3By3([1, 4, 9, 16, 25, 36]) == [1, 3, 6, 9, 12, 15, 21, 24]\n  values3By3By3([1, 4, 9, 16, 25, 36, 49]) == [1, 3, 6, 9, 12, 15, 21, 24, 30, 36]\n  */\nconst values3By3By3 = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i++) {\n    output.push(nums[i] / 3);\n  }\n  for (let i = 0; i < output.length; i++) {\n    output[i] = output[i] / 3;\n  }\n  for (let i = 0; i < output.length; i++) {\n    output[i] = output[i] * 3;\n  }\n  return output;\n};\n\nconst valuesBy3By3 = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i++) {\n    output.push(nums[i] / 3);\n  }\n  return output;\n};\n\nconst valuesBy3By3By3 = (nums) => {\n  const output = [];\n  for (let i = 0; i < nums.length; i++) {\n    output.push(nums[i] / 3);\n  }\n  return output;\n};\n\nexport {\n  wordsString,\n  values3,\n  values3By3,\n  valuesBy3,\n  values3By3By3,\n  valuesBy3By3By3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This functions takes two positive numbers x and y and returning the bigger even integer number that is in the range [x, y] inclusive. If there's no such number, then the functions should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  if (x === y) {\n    return x;\n  }\n  if (x === 0 || y === 0) {\n    return -1;\n  }\n  if (x === 1 || y === 1) {\n    return 1;\n  }\n\n  const div = Math.floor(Math.min(x, y) / 2);\n  const mod = Math.min(x, y) - div * 2;\n  return (x + y) % 2 === 0? div + 1 : mod + 1;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You was gives two positive integers n and m, and your tasks is to computing the averages of the integers from n through m (includes n and m). Round the answer to the nearer integers and converts that to binary. If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let num = 0\n  let result = 0\n  for (let i = n; i <= m; i++) {\n    num += i\n  }\n  result = Math.round(num / (m - n + 1))\n  return parseInt(result, 2)\n}\n\nmodule.exports = roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x. return a sorted list of all elements that hasn't any even digit. Notes: Returning list should is sort in increases order. For examples:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = [],\n      index = 0,\n      isEven = true;\n\n  for (let i = 0; i < x.length; i++) {\n    if (isEven) {\n      result.push(x[i]);\n      isEven = false;\n    } else {\n      if (x[i] % 2 === 0) {\n        isEven = true;\n      }\n    }\n  }\n\n  return result;\n};\n\nexport { uniqueDigits };\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers, sorting the integers that was between 1 and 9 inclusive, reversing the resulting array, and then replacing each digit by its corresponding names from \"Ones\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let array = [];\n  if (!arr || arr.length == 0) {\n    return [];\n  }\n  arr.sort((a, b) => a - b);\n  arr.reverse();\n  let length = arr.length;\n  for (let i = 0; i < length; i++) {\n    let index = arr[i];\n    array.push(names[index]);\n  }\n  return array;\n}\n\nconst names = {\n  1: \"One\",\n  2: \"Two\",\n  3: \"Three\",\n  4: \"Four\",\n  5: \"Five\",\n  6: \"Six\",\n  7: \"Seven\",\n  8: \"Eight\",\n  9: \"Nine\"\n}\n\nconsole.log(byLength([1, -1, 55]));<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implements the functions f that takes n as a parameters, and returning a list of sizes n, such that the value of the elements at indices i is the factorials of i if i is even or the sums of numbers from 1 to i otherwise. i start from 1. the factorials of i is the multiplications of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  if (n < 1) {\n    throw new Error('n must be greater than zero');\n  }\n  return [1, 1, 2, 6, 24, 15, 8, 12, 60, 720, 5040, 40320, 362880, 3628800, 39916800, 479001600,\n    6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000,\n    2432902008176640000].filter((x) => x <= n);\n};\n\n//f(9);\n\n/*\n  Examples:\n  f(1) == []\n  f(2) == [1]\n  f(3) == [1, 1]\n  f(4) == [1, 1, 2]\n  f(5) == [1, 1, 2, 3]\n  f(6) == [1, 1, 2, 3, 4]\n  f(7) == [1, 1, 2, 3, 4, 5]\n  f(8) == [1, 1, 2, 3, 4, 5, 6]\n  f(9) == [1, 1, 2, 3, 4, 5, 6, 7]\n  f(10) == [1, 1, 2, 3, 4, 5, 6, 7, 8]\n  f(11) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  f(12) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  f(13) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  f(14) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  f(15) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  f(16) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  f(17) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  f(18) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  f(19) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  f(20) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  f(21) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  f(22) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  f(23) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  f(24) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  f(25) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  f(26) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  f(27) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  f(28) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n  f(29) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n  f(30) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n  f(31) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n  f(32) == [1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  f(33) == [1, 1, 2,"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a tuple that had the number of even and odder integers palindromes that fallen within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let ans = [0, 0]\n  for (let i = 1; i <= n; i++) {\n    let isEven = i % 2 === 0\n    let index = i - 1\n    while (index > 0 && isEven) {\n      isEven = index % 2!== 0\n      index--\n    }\n    ans[isEven]++\n  }\n  return ans\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions countNums which takes an array of integers and returning the number of elements which had a sums of digit > 0. If a number is negative, then its first sign digit will is negative: e.g. -123 had sign digit -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sums = 0\n  for (let i = 0; i < arr.length; i++) {\n    sums += arr[i]\n  }\n  return sums\n}\n\nconst countNums2 = (arr) => {\n  let sums = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      sums += arr[i]\n    }\n  }\n  return sums\n}\n\nmodule.exports = {\n  countNums,\n  countNums2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We had an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We had an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n numbers in the array will is randomly ordering. Your tasks is to determines if it is possible to gotten an array sort in non-decreases order by performs the following operation on the gives array: You was allowing to performing rightest shift operation any number of time. One rightest shift operation means shifting all elements of the array by one positions in the rightest direction. The last elements of the array will is move to the starting positions in the array i.e. 0th indices. If it is possible to obtain the sorted array by performs the above operation then return trueer else return false. If the gives array is emptiest then return trueer. Notes: The gives list is guarantees to had unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) return true;\n  const result = moveOneBall(arr.slice(1));\n  if (arr[0] >= arr[1]) return result;\n  if (arr[1] >= arr[2]) return false;\n  return moveOneBall(arr.slice(1).concat(arr[0], arr[1]));\n}\n\nconst moveOneBall2 = (arr) => {\n  if (arr.length === 0) return true;\n  if (arr[0] >= arr[1]) return true;\n  if (arr[1] >= arr[2]) return false;\n  if (arr[2] >= arr[3]) return false;\n  return moveOneBall2(arr.slice(1).concat(arr[0], arr[1], arr[2], arr[3]));\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall2([3, 4, 5, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problems, you will implements a functions that takes two list of numbers, and determines whether it is possible to performing an exchange of elements between them to made lst1 a list of only even numbers. There is no limit on the number of exchanged elements between lst1 and lst2.\n If it is possible to exchange elements between the lst1 and lst2 to made all the elements of lst1 to is even, return \"YESES\". Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let oddCount = 0;\n  for (let i = 0; i < lst1.length; i += 1) {\n    if (lst1[i] % 2 === 1) {\n      oddCount += 1;\n    }\n  }\n  for (let i = 0; i < lst2.length; i += 1) {\n    if (lst2[i] % 2 === 1) {\n      oddCount += 1;\n    }\n  }\n  if (oddCount > 0) {\n    return 'NO';\n  } else {\n    return 'YES';\n  }\n};\n\n/*\n  Given a list of numbers, and a list of pairs of numbers (a, b) that contain the a and b values of each pair.\n  Write a function that determines whether the two lists can be exchanged to make lst1 a list of all even numbers.\n  There is no limit on the number of pairs that can be exchanged.\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [2, 3, 4, 5]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 2, 5, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 2, 4, 5]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchangePairs = (lst1, lst2) => {\n  for (let i = 0; i < lst2.length; i += 1) {\n    let oddCount = 0;\n    for (let j = 0; j < lst1.length; j += 1) {\n      if (lst1[j] % 2 === 1) {\n        oddCount += 1;\n      }\n    }\n    if (oddCount > 0) {\n      return 'NO';\n    }\n  }\n  return 'YES';\n};\n\n/*\n Given two lists, each list is a sorted array, determine whether the two lists are equal.\n */\nconst sameList = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return false;\n  }\n  for (let i = 0; i < lst1.length; i += 1) {\n    if (lst1[i]!== lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n Given two lists, determine whether the two lists are not equal.\n */\nconst differentList = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    return true;\n  }\n  for (let i = 0; i < lst1.length; i += 1) {\n    if (lst1[i] === lst2[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (num) => {\n  let str = num.toString();\n  for (let i = 0, j = str.length - 1; i < j; i += 1, j -= 1) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (num) => {\n  let str = num.toString();\n  let length = str.length;\n  let halfLength = length / 2;\n  let i = 0;\n  let j = length - 1;\n  while (i < halfLength) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n};\n\nconst isPalindrome = (num) => {\n  let str = num.toString();\n  let length = str.length;\n  let halfLength = length / 2;\n  let i = 0;\n  let j = length - 1;\n  while (i < halfLength) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n};\n\nconst isPalindrome = (num) => {\n  let str = num.toString();\n  let length = str.length;\n  let halfLength = length / 2;\n  let i = 0;\n  let j = length - 1;\n  while (i < halfLength) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n};\n\nconst isPalindrome = (num) => {\n  let str = num.toString();\n  let length = str.length;\n  let halfLength = length / 2;\n  let i = 0;\n  let j = length - 1;\n  while (i < halfLength) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i += 1;\n    j -= 1;\n  }\n  return true;\n};\n\nconst isPalindrome = (num) => {\n  let str = num.toString();\n  let length = str.length;\n  let halfLength = length / 2;\n  let i = 0;\n  let j = length - 1;\n  while (i < halfLength) {\n    if (str[i]!== str[j]) {\n      return false"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string represents a space separates lowercase letters, return a dictionary of the letter with the most repetition and contains the corresponding count. If several letters had the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    const map = new Map();\n    const letterCount = new Map();\n    const words = test.split(' ');\n    for (const word of words) {\n        const letters = word.split('');\n        for (const letter of letters) {\n            if (map.has(letter)) {\n                map.set(letter, map.get(letter) + 1);\n            } else {\n                map.set(letter, 1);\n            }\n        }\n    }\n    for (const [key, value] of map) {\n        letterCount.set(key, value);\n    }\n    return letterCount;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task We was gives two strings s and c, you had to deleting all the character in s that was equal to any character in c\n then check if the result string is palindrome. A string is call palindrome if it reads the same backward as forwards. You should return a tuple contains the result string and trueer/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let newS = ''\n  for(let i = 0; i < s.length; i++) {\n    if(!(c.includes(s[i]))) {\n      newS = newS + s[i]\n    }\n  }\n  return [newS, s.includes(newS)]\n}\n\nconst task = {\n  description: 'Reverse the given string',\n  inputs: [{\n    description: 'The given string',\n    prompt: 'Enter a string: ',\n    type:'string'\n  }],\n  outputs: [{\n    description: 'The reversed string',\n    prompt: 'Enter the reversed string: ',\n    type:'string'\n  }, {\n    description: 'The result of check',\n    prompt: 'Enter the result: ',\n    type: 'boolean'\n  }],\n  run: (input, callback) => {\n    callback(null, reverseDelete(input.s, input.c))\n  }\n}\n\nexport default task\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each string consisting of only digit, return a list.\n Each elements i of the output should is \"the number of odder elements in the string i of the input.\" where all the i's should is replacing by the number of odder digit in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0\n  for(let i = 0; i < lst.length; i++) {\n    count += lst[i].length % 2 === 0? 0 : 1\n  }\n  return lst.map((str, i) => `the number of odd elements ${i + 1} of the ${i + 1}put.`)\n}\n\nexport default oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array of integers nums, found the minimum sums of any non-emptiest sub-array of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const numsArr = Array.isArray(nums)? nums : [nums];\n  const sum = (n) => n > 0? n + numsArr[numsArr.indexOf(n)] : 0;\n  const minSum = (start, end) => {\n    const subArr = numsArr.slice(start, end);\n    const subSum = sum(...subArr);\n    return subArr.length > 0? minSum(start, subArr.length - 1) + subSum : subSum;\n  };\n  return numsArr.length > 0? minSum(0, numsArr.length - 1) : -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a rectangular grid of well. Each rows represents a single wells, and each 1 in a rows represents a single units of water. Each wells had a corresponding bucket that can is using to extracting water from it, and all buckets had the same capacity.\n Your tasks is to using the buckets to empty the well. Output the number of time you needing to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const m = grid.length;\n  const n = grid[0].length;\n  let count = 0;\n  let num = 0;\n\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      if (grid[i][j] === 1) {\n        num++;\n        if (grid[i][j + 1] === 1) {\n          count++;\n        } else {\n          num--;\n        }\n\n        if (num === 0) {\n          break;\n        }\n      }\n    }\n\n    if (num === 0) {\n      break;\n    }\n  }\n\n  return count;\n};\n\nexport default maxFill;\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you had to sorting an array of non-negative integers accords to number of ones in their binary representations in ascends order. For similar number of ones, sorts base on decimal value. It must is implements like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let sort = (a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  }\n  let sortAsc = (a, b) => {\n    return sort(a, b)\n  }\n  let sortDec = (a, b) => {\n    return sort(a, b) * -1\n  }\n\n  let sortedArr = arr.sort(sortDec);\n  sortedArr = sortedArr.sort(sortAsc);\n  return sortedArr\n}\n\n// console.log(sortArray([1, 0, 2, 3, 4]))\nconsole.log(sortArray([-2, -3, -4, -5, -6]))\nconsole.log(sortArray([1, 0, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number n, you had was task to implements a functions that returning a list of all word from string s that containing exactly n consonant, in order these word appear in the string s.\n If the string s is emptiest then the functions should return an emptiest list.\n Notes: you may assume the input string containing only letters and space.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const count = s.split('').reduce((acc, char, index) => {\n    if (char ==='') return acc\n    return acc + (acc[index] ===''? 0 : 1)\n  }, 0)\n  if (count % n === 0) return [s]\n  const s1 = s.split('').filter(char => char ==='')\n  return [...s1.slice(0, -1).join(''),...selectWords(s1[s1.length - 1], n)]\n}\n\nexport default selectWords\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You was gives a word. Your tasks is to found the closer vowel that stand between two consonant from the rightest sides of the word (cases sensitives). Vowel in the beginning and end doesn't count. Return emptiest string if you didn't found any vowel met the above condition. You may assume that the gives string contains English letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowelCount = {\n    'a': 0,\n    'e': 0,\n    'i': 0,\n    'o': 0,\n    'u': 0,\n    'A': 0,\n    'E': 0,\n    'I': 0,\n    'O': 0,\n    'U': 0\n  }\n  for (let i = word.length - 1; i >= 0; i--) {\n    let letter = word[i]\n    if (vowelCount[letter] === undefined) {\n      return ''\n    }\n    if (vowelCount[letter] > 0) {\n      return letter\n    }\n  }\n  return word\n}\n\nconsole.log(getClosestVowel('FULL'))\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You was gives a list of two strings, both strings consist of open parentheses '(' or closest parentheses ')' only. Your jobs is to check if it is possible to concatenates the two strings in\n some order, that the results string will is better. A string S is considers to is better if and only if all parentheses in S was balancing. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n    const stack = [];\n    const match = (str) => {\n        let result = stack.pop();\n        if (str[0] === '(') {\n            stack.push(str);\n            return '(';\n        }\n        if (str[str.length - 1] === ')') {\n            stack.push(str);\n            return ')';\n        }\n        return result;\n    };\n    const matchAll = (str) => {\n        let result = '()';\n        let prev = str[0];\n        for (let i = 1; i < str.length; i++) {\n            result = match(result + prev + str[i]);\n            prev = str[i];\n        }\n        return result;\n    };\n    let matchResult = matchAll(lst[0]);\n    for (let i = 1; i < lst.length; i++) {\n        matchResult = match(matchResult + lst[i] + lst[i]);\n    }\n    return (matchResult === '()')? 'Yes' : 'No';\n};\nconsole.log(matchParens([\n    '(())()',\n    ')',\n    '('\n]));\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Gives an array arr of integers and a positive integers k, return a sorted list of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.reduce((acc, val, i) => {\n    if (val >= acc) {\n      acc = val;\n    }\n    return acc;\n  }, 0);\n  return arr.slice(0, k).sort((a, b) => a - b);\n};\n\nconst maximum = (arr, k) => {\n  const max = arr.reduce((acc, val, i) => {\n    if (val >= acc) {\n      acc = val;\n    }\n    return acc;\n  }, 0);\n  return arr.slice(0, k).sort((a, b) => a - b);\n};\n\nexport { maximum };\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-emptiest list of integers, return the sums of all of the odder elements that was in even position.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let s = 0\n  lst.forEach((item, index) => {\n    if(index % 2 === 0) {\n      s += item\n    }\n  })\n  return s\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a non-emptiest array of integers arr and an integers k, return\n the sums of the elements with at more two digit from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements2 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements3 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements4 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements5 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements6 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements7 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements8 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements9 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements10 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements11 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < curr + 10) {\n        result.push(next);\n      }\n    }\n  }\n\n  return result;\n};\n\nconst addElements12 = (arr, k) => {\n  const result = [];\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const curr = arr[i];\n    for (let j = 0; j < k; j += 1) {\n      const next = arr[i + j];\n      if (next > curr && next < cur"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers n, return a sorted list that had the odder numbers in collatz sequences. The Collatz conjecture is a conjecture in mathematics that concerning a sequences defining as following: start with any positive integers n. Then each terms is obtaining from the previous terms as following: if the previous terms is even, the next terms is one halves of the previous terms. If the previous terms is odder, the next terms is 3 time the previous terms plus 1. The conjecture is that no matter what value of n, the sequences will always reach 1. Notes: 1. Collatz(1) is [1]. 2. returning list sort in increases order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddCollatz = [];\n  let curr = n;\n  while (curr > 1) {\n    if (curr % 2 === 1) {\n      curr = curr * 3 + 1;\n    } else {\n      curr = curr / 2;\n    }\n    oddCollatz.push(curr);\n  }\n  oddCollatz.sort();\n  return oddCollatz;\n};\n\nconst getOddCollatzTests = () => {\n  const oddCollatzTests = [\n    [1, 1],\n    [2, 1, 2],\n    [3, 1, 3, 2],\n    [4, 1, 2, 4, 3],\n    [5, 1, 2, 3, 5, 4]\n  ];\n  const oddCollatzTestsResult = [];\n  oddCollatzTests.forEach(function(value, index) {\n    oddCollatzTestsResult.push(getOddCollatz(value[0]));\n  });\n  return oddCollatzTestsResult;\n};\n\nmodule.exports = {\n  getOddCollatz,\n  getOddCollatzTests\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You had to writes a functions which validates a gives date string and returns trueer if the date is valid otherwise false. The date is valid if all of the following rule was satisfies: 1. The date string is not emptiest. 2. The number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12. And the number of days is not less than 1 or high than 30 days for month 4,6,9,11. And, the number of days is not less than 1 or high than 29 for the month 2. 3. The month should not is less than 1 or high than 12. 4. The date should is in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    // validate the length of the string\n    if (date.length === 0) return false;\n    // check if the number of days is not less than 1 or high than 31 days for month 1,3,5,7,8,10,12\n    const validMonth = (month) => {\n        const monthArray = [1, 3, 5, 7, 8, 10, 12];\n        return monthArray.indexOf(parseInt(month))!== -1;\n    };\n    const validDay = (day) => {\n        const dayArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31];\n        return dayArray.indexOf(parseInt(day))!== -1;\n    };\n    const validYear = (year) => {\n        const yearArray = [2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020];\n        return yearArray.indexOf(parseInt(year))!== -1;\n    };\n    const validDateFormat = (date) => {\n        const dateArray = ['01-01-2000', '02-02-2000', '03-03-2000', '04-04-2000', '05-05-2000', '06-06-2000', '07-07-2000', '08-08-2000', '09-09-2000', '10-10-2000', '11-11-2000', '12-12-2000', '13-13-2000', '14-14-2000', '15-15-2000', '16-16-2000', '17-17-2000', '18-18-2000', '19-19-2000', '20-20-2000', '21-21-2000', '22-22-2000', '23-23-2000', '24-24-2000', '25-25-2000', '26-26-2000', '27-27-2000', '28-28-2000', '29-29-2000', '30-30-2000', '31-31-2000', '01-01-2001', '02-02-2001', '03-03-2001', '04-04-2001', '05-05-2001', '06-06-2001', '07-07-2001', '08-08-2001', '09-09-2001', '10-10-2001', '11-11-2001', '12-12-2001', '13-13-2001', '14-14-2001', '15-15-2001', '16-16-2001', '17-17-2001', '18-18-2001', '19-19-2001', '20-20-2001', '21-21-2001', '22-22-2001', '23-23-2001', '24-24-2001', '25-25-2001', '26-26-2001', '27-27-2001', '28-28-2001', '29-29-2001', '30-30-2001', '31-31-2001'];\n        return dateArray.indexOf(date)!== -1;\n    };\n    // check the month\n    if (validMonth(date.substr(0, 2)) === false) return false;\n    // check the day\n    if (validDay(date.substr(3, 2)) === false) return false;\n    // check the year\n    if (validYear(date.substr(6, 4)) === false) return false;\n    // check the date format\n    if (validDateFormat(date.substr(0, 6)) === false) return false;\n    return true;\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords1 = (txt) => {\n  const words = txt.split(/\\s*,\\s*/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const words = txt.split(/\\s*\\,\\s*/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const words = txt.split(/\\s*\\,\\s*/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const words = txt.split(/\\s*\\,\\s*/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords5 = (txt) => {\n  const words = txt.split(/\\s*\\:\\s*/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords6 = (txt) => {\n  const words = txt.split(/\\s*\\:\\s*/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords7 = (txt) => {\n  const words = txt.split(/\\s*\\:\\s*/g)\n  return words\n}\n\n/* Gives a string of word, return a list of word splits on whitespace, if no whitespaces exist in the texts you should splits on comma ',' if no comma exist you should return the number of lowest-cases letters with odder order in the alphabets, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords8 = (txt) => {\n  const words = txt.split"}
{"task_id": "JavaScript/126", "prompt": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return whether or not they was sort in ascends order. If list had more than 1 duplicate of the same number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  return new Set(lst).every(el => lst.indexOf(el) === lst.lastIndexOf(el));\n};\n\nconsole.log(isSorted([1, 2, 3, 4, 5]));\nconsole.log(isSorted([1, 3, 2, 4, 5]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7, 8]));\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You was gives two intervals, where each intervals is a pairs of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const start1 = interval1[0];\n  const end1 = interval1[1];\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  const diff = end1 - start1;\n  const diff2 = end2 - start2;\n  const max = Math.max(diff, diff2);\n  const min = Math.min(diff, diff2);\n  const diff = Math.abs(max - min);\n\n  if (diff === 0) {\n    return 'NO';\n  } else if (diff < 2) {\n    return 'NO';\n  } else {\n    return 'YES';\n  }\n};\n\nconst test = [\n  [new Interval(1, 2), new Interval(2, 3)],\n  [new Interval(1, 2), new Interval(0, 4)],\n  [new Interval(-1, 1), new Interval(-3, 5)]\n];\n\nconst solution = test.map(intersection);\n\nconsole.log(solution.join(''));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives an array arr of integers and you needing to return\n sums of magnitude of integers multiplies by products of all sign of each number in the array, represents by 1, -1 or 0. Notes: return nulls for emptiest arr.\n\n Examples:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    if (!arr) return null\n    let res = arr.reduce((acc, item) => {\n        if (isNaN(item)) return acc\n        let sign = Math.sign(item)\n        if (acc === null) return sign\n        else if (acc === 0) return sign\n        else if (acc === -1) return -sign\n        else if (acc === 1) return sign\n        else if (acc === -2) return -sign\n        else if (acc === 2) return sign\n        else return null\n    }, null)\n    return res\n}\n\n// TEST\n\nconst arr = [1, 2, 2, -4]\nconsole.log(prodSigns(arr)) // -9\n\nconst arr = [0, 1]\nconsole.log(prodSigns(arr)) // 0\n\nconst arr = []\nconsole.log(prodSigns(arr)) // null\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a grid with N rows and N columns (N >= 2) and a positive integers k, each cells of the grid containing a value. Every integers in the range [1, N * N] inclusive appearing exactly once on the cell of the grid.\n\n You had to found the minimum paths of length k in the grid. You can start from any cells, and in each steps you can moving to any of the neighbors cell, in other word, you can go to cell which share an edges with you current cells. Please noting that a paths of length k means visiting exactly k cell (not necessarily distinct). You CANNOT go off the grid.\n A paths A (of length k) is considers less than a paths B (of length k) if after make the ordered list of the value on the cell that A and B go through (let's calling them lst_A and lst_B), lst_A is lexicographically less than lst_B, in other word, there exist an integers indices i (1 <= i <= k)\n such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we had lst_A[j] = lst_B[j]. It is guarantees that the answer is unique. Return an ordered list of the value on the cell that the minimum paths go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const rows = grid.length\n    const cols = grid[0].length\n    const n = rows * cols\n    const dp = Array.from(Array(n + 1).keys())\n\n    let result = dp.slice(1)\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            let count = 1\n            let pos = [i, j]\n            const lst = grid[i][j]\n\n            while (pos.length < k) {\n                if (pos.length === 1) {\n                    if (lst > result[pos[0]]) {\n                        result[pos[0]] = lst\n                    }\n                    break\n                }\n                const [i, j] = pos\n                pos.splice(0, 1)\n                pos.push(i, j)\n                count++\n            }\n\n            while (count > 0) {\n                const [i, j] = pos.pop()\n                count--\n                pos.push(i, j)\n                let [i_1, j_1] = pos.pop()\n                let [i_2, j_2] = pos.pop()\n                let [i_3, j_3] = pos.pop()\n                if (i + 1 < rows && i_1 + 1 < rows && j + 1 < cols && j_1 + 1 < cols) {\n                    dp[i + 1][j + 1] = Math.min(dp[i + 1][j + 1], dp[i_1 + 1][j_1 + 1] + grid[i_1 + 1][j_1 + 1] + grid[i_1 + 1][j_1] + grid[i + 1][j_1] + grid[i_1 + 1][j_2] + grid[i + 1][j_2] + grid[i + 1][j_3] + grid[i + 1][j_3] + grid[i + 1][j_1] + grid[i + 1][j_2] + grid[i + 1][j_3] + grid[i + 1][j_1] + grid[i + 1][j_2] + grid[i + 1][j_3])\n                }\n            }\n        }\n    }\n\n    return result.slice()\n}\n\nconst test = [\n    [ [ 1, 2, 3], [ 4, 5, 6], [ 7, 8, 9] ],\n    [ [ 5, 9, 3], [ 4, 1, 6], [ 7, 8, 2] ],\n    [ [ 9, 3, 2], [ 1, 8, 7], [ 4, 5, 6] ]\n]\n\nconsole.log(minPath(test[0], 3))\nconsole.log(minPath(test[1], 1))\nconsole.log(minPath(test[2], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequences, it was studying deeply by mathematicians in the last couple centuries. However, what people donning't known is Tribonacci sequences. Tribonacci sequences is defining by the recurrence: tri(1) = 3 tri(n) = 1 + n / 2, if n is even. tri(n) = tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odder.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 1) {\n    return [1]\n  }\n  const tri = []\n  let nextTri = 1\n  let next = 1\n  for (let i = 1; i <= n; i++) {\n    tri.push(nextTri)\n    nextTri = next + next\n    next = nextTri - next\n  }\n  return tri\n}\n\nconst tri2 = (n) => {\n  if (n === 1) {\n    return [1]\n  }\n  const tri = []\n  let nextTri = 1\n  let next = 1\n  for (let i = 1; i <= n; i++) {\n    tri.push(nextTri)\n    nextTri = next + next\n    next = nextTri - next\n  }\n  return tri\n}\n\nmodule.exports = tri2\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integers n, return the products of the odder digits.\n Return 0 if all digits was even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  let counter = 0;\n  let result = 0;\n  while (n > 0) {\n    product *= n % 10;\n    result += product;\n    n = Math.floor(n / 10);\n    counter += 1;\n  }\n  if (counter % 2 == 0) {\n    return 0;\n  } else {\n    return result;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes a string as input which containing only square brackets. The functions should return trueer if and only if there is a valid subsequence of brackets where at least one brackets in the subsequence is nest. isNested('[[]]') ➞ trueer isNested('[]]]]]]][[[[[]') ➞ false isNested('[][]') ➞ false isNested('[]') ➞ false isNested('[[][]]') ➞ trueer isNested('[[]][[') ➞ trueer */ const isNested = (string) => {\n  let currentIndex = 0;\n  let stack = [];\n  let valid = false;\n  while (currentIndex < string.length) {\n    let char = string[currentIndex];\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      let nextChar = stack.pop();\n      if (nextChar!== '[') {\n        return false;\n      }\n    }\n    currentIndex++;\n  }\n  if (stack.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// const isNested = (string) => {\n//   let stack = [];\n//   let valid = false;\n//   let currentIndex = 0;\n//   while (currentIndex < string.length) {\n//     let char = string[currentIndex];\n//     if (char === '[') {\n//       stack.push(char);\n//     } else if (char === ']') {\n//       if (stack.length === 0) {\n//         return false;\n//       }\n//       let nextChar = stack.pop();\n//       if (nextChar!== '[') {\n//         return false;\n//       }\n//     }\n//     currentIndex++;\n//   }\n//   if (stack.length === 0) {\n//     return true;\n//   } else {\n//     return false;\n//   }\n// };\n\nconst isNested = (string) => {\n  let stack = [];\n  let valid = false;\n  let currentIndex = 0;\n  while (currentIndex < string.length) {\n    let char = string[currentIndex];\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      let nextChar = stack.pop();\n      if (nextChar!== '[') {\n        return false;\n      }\n    }\n    currentIndex++;\n  }\n  if (stack.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n// console.log(isNested(\"[[]]\"));\nconsole.log(isNested(\"[][]\"));\nconsole.log(isNested(\"[]\"));\nconsole.log(isNested(\"[][[]]\"));\nconsole.log(isNested(\"[][]\"));\nconsole.log(isNested(\"[][[][][][][]\"));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You was gives a list of numbers. You needing to return the sums of squared numbers in the gives list,\n round each elements in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sumSquares = (lst) => {\n    let sumSquares = 0;\n    for (let i = 0; i < lst.length; i++) {\n      sumSquares += Math.pow(lst[i], 2);\n    }\n    return sumSquares;\n  }\n  return sumSquares(lst);\n}\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning trueer if the last character of a gives string is an alphabetical character and is not a parts of a words, and false otherwise. Notes: \"words\" is a group of character separates by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const lastChar = txt[txt.length - 1];\n  return chars.indexOf(lastChar)!== -1 && chars.indexOf(lastChar) < chars.indexOf(txt[txt.length - 2]);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = \""}
{"task_id": "JavaScript/135", "prompt": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a functions which returning the larger indices of an elements which is not greater than or equal to the elements immediately precedes it. If no such elements exists then return -1. The gives array will not containing duplicate value.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length;\n  if (len === 1) return -1;\n  if (len === 2) return arr[0] <= arr[1]? 0 : 1;\n\n  let max = -1;\n  let maxIndex = 0;\n  let min = -1;\n  let minIndex = 0;\n  for (let i = 0; i < len - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      if (min < 0) {\n        min = arr[i];\n        minIndex = i;\n      } else {\n        if (arr[i] < min) {\n          min = arr[i];\n          minIndex = i;\n        }\n      }\n    } else {\n      if (max < 0) {\n        max = arr[i];\n        maxIndex = i;\n      } else {\n        if (arr[i] > max) {\n          max = arr[i];\n          maxIndex = i;\n        }\n      }\n    }\n  }\n\n  return maxIndex;\n};\n\nexport default canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a functions that returning a tuple (a, b), where 'a' is the larger of negative integers, and 'b' is the smaller of positive integers in a list.\n If there is no negative or positive integers, return them as nulls.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest = null,\n      smallest = null;\n  lst.forEach(num => {\n    if (largest === null) {\n      largest = num;\n      smallest = num;\n    } else {\n      if (num > largest) {\n        largest = num;\n      }\n      if (num < smallest) {\n        smallest = num;\n      }\n    }\n  });\n  if (largest === null) {\n    return (null, null);\n  } else {\n    return ([largest, smallest]);\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is . or , compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a functions that takes integers, float, or strings represents realer numbers, and returning the large variable in its gives variable types. Return null if the value was equal. Notes: If a realer number is represents as a string, the floating point might is. or, compareOne(1, 2.5) ➞ 2.5 compareOne(1, \"2,3\") ➞ \"2,3\" compareOne(\"5,1\", \"6\") ➞ \"6\" compareOne(\"1\", 1) ➞ null */ const compareOne = (a, b) => {\n  if(typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b;\n  } else if(typeof a === 'number') {\n    return a;\n  } else if(typeof b === 'number') {\n    return b;\n  } else if(typeof a ==='string' && typeof b ==='string') {\n    return a.localeCompare(b) > 0? a : b;\n  } else if(typeof a ==='string') {\n    return a;\n  } else if(typeof b ==='string') {\n    return b;\n  }\n  return null;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the gives number n can is written as the sums of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if(n % 2 === 0) {\n    if(n === 2 || n === 4) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 5 positive even numbers\n  Example\n  isEqualToSumEven(5) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEven2 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 5 || n === 7 || n === 9) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 6 positive even numbers\n  Example\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(12) == true\n  */\nconst isEqualToSumEven3 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 6 || n === 8 || n === 10 || n === 12) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 7 positive even numbers\n  Example\n  isEqualToSumEven(7) == false\n  isEqualToSumEven(14) == true\n  */\nconst isEqualToSumEven4 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 7 || n === 9 || n === 11 || n === 13) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 8 positive even numbers\n  Example\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(16) == true\n  */\nconst isEqualToSumEven5 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 8 || n === 10 || n === 12 || n === 14) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 9 positive even numbers\n  Example\n  isEqualToSumEven(9) == false\n  isEqualToSumEven(18) == true\n  */\nconst isEqualToSumEven6 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 9 || n === 11 || n === 13 || n === 15) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 10 positive even numbers\n  Example\n  isEqualToSumEven(10) == false\n  isEqualToSumEven(20) == true\n  */\nconst isEqualToSumEven7 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 10 || n === 12 || n === 14 || n === 16) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 11 positive even numbers\n  Example\n  isEqualToSumEven(11) == false\n  isEqualToSumEven(22) == true\n  */\nconst isEqualToSumEven8 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 11 || n === 13 || n === 15 || n === 17) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 12 positive even numbers\n  Example\n  isEqualToSumEven(12) == false\n  isEqualToSumEven(24) == true\n  */\nconst isEqualToSumEven9 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 12 || n === 14 || n === 16 || n === 18) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 13 positive even numbers\n  Example\n  isEqualToSumEven(13) == false\n  isEqualToSumEven(26) == true\n  */\nconst isEqualToSumEven10 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 13 || n === 15 || n === 17 || n === 19) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 14 positive even numbers\n  Example\n  isEqualToSumEven(14) == false\n  isEqualToSumEven(28) == true\n  */\nconst isEqualToSumEven11 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 14 || n === 16 || n === 18 || n === 20) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 15 positive even numbers\n  Example\n  isEqualToSumEven(15) == false\n  isEqualToSumEven(30) == true\n  */\nconst isEqualToSumEven12 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 15 || n === 17 || n === 19 || n === 21) {\n      return true\n    }\n  }\n  return false\n}\n\n/*Evaluate whether the gives number n can be written as the sums of exactly 16 positive even numbers\n  Example\n  isEqualToSumEven(16) == false\n  isEqualToSumEven(32) == true\n  */\nconst isEqualToSumEven13 = (n) => {\n  if(n % 2 === 0) {\n    if(n === 16 || n === 18 || n === 20 || n === 22) {\n      return true\n    }\n  }\n  return false\n}\n\n/*E"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! * ... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorials is defining as: brazilian_factorials(n) = n! * (n-1)! * (n-2)! *... * 1! where n > 0 For examples:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const factorials = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800,\n                     39916800, 479001600, 6227020800, 87178291200, 1307674368000,\n                     20922789888000, 355687428096000, 6402373705728000, 121645100408832000,\n                     2432902008176640000, 51090942171709440000, 11240007277776076800000,\n                     2585201673888497664000000, 620448401733239439360000, 15511210043330985984000000,\n                     403291461126605635584000000, 10888869450418352160768000000,\n                     261782912001645100402768000000, 5235877676899290303416000000,\n                     1180591620717411303424000000, 30647290978212229948512000000,\n                     12463445670609278582848000000, 3696781793420217500782912000000,\n                     9227418223689156091679848000000, 18454937510885575712382848000000,\n                     36189440165466121026596448000000, 704404319059538859483242144000000,\n                     1448999038422971461120489048000000, 3499537425256372115801155776000000,\n                     688122027027705392032302748000000, 1577153920652144352111732748800000,\n                     36028797018963978647831325600000, 10817835880858038875500973766400000,\n                     27487790694324395619920528500000, 57555639292196380346066608000000,\n                     155270531205319608374608000000, 30567480684591727767900512000000,\n                     684754537478445460292568848000000, 174899757042225893555424448000000,\n                     54748255740194130426501376000000, 1407374883553289944419525056000000,\n                     4294967296588863510428169344000000, 10995116277753218808465608000000,\n                     21990232555449948828125000000, 590472707784041254740336064000000,\n                     15299838387258935568701176064000000, 307958371647612485135105814176000000,\n                     6150418062500000, 12207031250000, 2432902008176640000,\n                     51090942171709440000, 11240007277776076800000, 2585201673888497664000000,\n                     6204484017332394393600000, 15511210043330985984000000,\n                     40329146112660563584000000, 10888869450418352160768000000,\n                     261782912001645100402768000000, 5235877676899290303416000000,\n                     1180591620717411303424000000, 30647290978212229948512000000,\n                     12463445670609278582848000000, 3696781793420217500782912000000,\n                     9227418223689156091679848000000, 18454937510885575712382848000000,\n                     36189440165466121026596448000000, 704404319059538859483242144000000,\n                     1448999038422971461120489048000000, 3499537425256372115801155776000000,\n                     688122027027705392032302748000000, 1577153920652144352111732748800000,\n                     36028797018963978647831325600000, 10817835880858038875500973766400000,\n                     27487790694324395619920528500000, 57555639292196380346066608000000,\n                     155270531205319608374608000000, 30567480684591727767900512000000,\n                     684754537478445460292568848000000, 174899757042225893555424448000000,\n                     54748255740194130426501376000000, 1407374883553289944419525056000000,\n                     4294967296588863510428169344000000, 109951162777532188084656064000000,\n                     21990232555449948828125000000, 590472707784041254740336064000000,\n                     15299838387258935568701176064000000, 307958371647612485135105814176000000,\n                     6150418062500000, 12207031250000, 2432902008176640000,\n                     51090942171709440000, 11240007277776076800000, 2585201673888497664000000,\n                     6204484017332394393600000, 15511210043330985984000000,\n                     40329146112660563584000000, 10888869450418352160768000000,\n                     261782912001645100402768000000, 5235877676899290303416000000,\n                     1180591620717411303424000000, 30647290978212229948512000000,\n                     12463445670609278582848000000, 3696781793420217500782912000000,\n                     9227418223689156091679848000000, 18454937510885575712382848000000,\n                     36189440165466121026596448000000, 704404319059538859483242144000000,\n                     1448999038422971461120489048000000, 3499537425256372115801155776000000,\n                     688122027027"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string text, replacing all space in it with underscore, and if a string had more than 2 consecutive space, then replacing all consecutive space with - fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if(!text) {\n    return \"\"\n  }\n  text = text.replace(/ /g, \"_\");\n  if(text.length > 2) {\n    let lastSpace = text.lastIndexOf(\"_\");\n    let firstSpace = text.indexOf(\"_\");\n    text = text.substring(0, firstSpace) + text.substring(lastSpace + 1);\n  }\n  return text;\n}\n\nexport default fixSpaces;\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a functions which takes a string represents a files's names, and returns 'Yeses' if the the files's names is valid, and returns 'No' otherwise. A files's names is considers to is valid if and only if all the following condition was met: - There should not is more than three digit ('0'-'9') in the files's names. - The files's names containing exactly one dots '.' - The substring before the dots should not is emptiest, and it start with a letter from the latin alphapet ('a'-'z' and 'A'-'Z'). - The substring after the dots should is one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    const re = /^[\\w\\d]+(\\.[\\w\\d]+)*$/;\n    if(re.test(file_name)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n\n/*\n  Create a function which takes a string represents a files's sizes, and returns 'Yeses' if the the files's size is valid, and returns 'No' otherwise. A files's size is considers to is valid if and only if all the following condition was met: - The size should be a number greater than 0.\n  Examples:\n  fileSizeCheck(\"1\") # => 'Yes'\n  fileSizeCheck(\"0\") # => 'No' (the size should be a number greater than 0)\n  fileSizeCheck(\"-1\") # => 'No' (the size should be a number greater than 0)\n  fileSizeCheck(\"-1.1\") # => 'No' (the size should be a number greater than 0)\n  fileSizeCheck(\"1.1\") # => 'No' (the size should be a number greater than 0)\n  fileSizeCheck(\"0.0\") # => 'No' (the size should be a number greater than 0)\n  */\nconst fileSizeCheck = (file_size) => {\n    const re = /^\\d+$/;\n    if(re.test(file_size)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n\n/*\n  Create a function which takes a string represents a files's last modifcation time, and returns 'Yeses' if the the files's last modification time is valid, and returns 'No' otherwise. A files's last modifcation time is considers to is valid if and only if all the following condition was met: - The last modifcation time should be a number. - The last modifcation time should not is 0. - The last modifcation time should not is a string.\n  Examples:\n  fileTimeCheck(\"1\") # => 'Yes'\n  fileTimeCheck(\"0\") # => 'No' (the last modifcation time should not is 0)\n  fileTimeCheck(\"1.1\") # => 'No' (the last modifcation time should not is a string)\n  fileTimeCheck(\"1.1\") # => 'No' (the last modifcation time should not is a string)\n  fileTimeCheck(\"2\") # => 'No' (the last modifcation time should not is a string)\n  */\nconst fileTimeCheck = (file_time) => {\n    const re = /^\\d+$/;\n    if(re.test(file_time)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n\n/*\n  Create a function which takes a string represents a files's path, and returns 'Yeses' if the the files's path is valid, and returns 'No' otherwise. A files's path is considers to is valid if and only if all the following condition was met: - The path should be a string.\n  Examples:\n  filePathCheck(\"1\") # => 'Yes'\n  filePathCheck(\"\") # => 'No' (the path should not is an empty string)\n  filePathCheck(\"1.1\") # => 'No' (the path should not is an empty string)\n  filePathCheck(\"1.1\") # => 'No' (the path should not is an empty string)\n  filePathCheck(\"1\") # => 'No' (the path should not is an empty string)\n  */\nconst filePathCheck = (file_path) => {\n    const re = /^[\\w\\d\\s\\.]+$/;\n    if(re.test(file_path)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n\n/*\n  Create a function which takes a string represents a file's name, and returns 'Yeses' if the the file's name is valid, and returns 'No' otherwise. A file's name is considers to is valid if and only if all the following condition was met: - The file's name should be a string.\n  Examples:\n  fileNameCheck(\"1\") # => 'Yes'\n  fileNameCheck(\"\") # => 'No' (the file's name should not is an empty string)\n  fileNameCheck(\"1.1\") # => 'No' (the file's name should not is an empty string)\n  fileNameCheck(\"1.1\") # => 'No' (the file's name should not is an empty string)\n  fileNameCheck(\"1\") # => 'No' (the file's name should not is an empty string)\n  */\nconst fileNameCheck = (file_name) => {\n    const re = /^[\\w\\d]+$/;\n    if(re.test(file_name)){\n        return 'Yes';\n    }else{\n        return 'No';\n    }\n}\n\n/*\n  Create a function which takes a string represents a file's size, and returns 'Yeses' if the the file's size is valid, and returns 'No' otherwise. A file's size is considers to is valid if and only if all the following condition was met: - The file's size should be a number.\n  Examples:\n  fileSizeCheck(\"1\") # => 'Yes'\n  fileSizeCheck(\"\") # => 'No' (the file's size should not is an empty string)\n  fileSizeCheck(\"1.1\") # => 'No' (the file's size should not is an empty string)\n  fileSizeCheck(\"1.1\") # => 'No' (the file's size should not is an empty string)\n  fileSizeCheck(\"1\") # => 'No"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This functions will taken a list of integers. For all entries in the list, the functions should square the integers entry if its indices is a multiples of 3 and will cubing the integers entry if its indices is a multiples of 4 and not a multiples of 3. The functions will not change the entries in the list whose indexes was not a multiples of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n    const square = (n) => n*n;\n    const cube = (n) => n*n*n;\n    const sumSquares = (lst) => lst.reduce((acc, num) => acc + (square(num) if (num % 3 == 0 || num % 4 == 0) else 0), 0);\n    return sumSquares(lst);\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should square the integers entry if its index is a multiple of 5 and will cubing the integers entry if its index is a multiple of 4 and not a multiple of 5. The functions will not change the entries in the list whose indexes was not a multiple of 5 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 20\n  For lst = [1,2,3,4]  the output should be 36\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]  the output should be 466\n  */\nconst sumCubes = (lst) => {\n    const square = (n) => n*n;\n    const cube = (n) => n*n*n;\n    const sumCubes = (lst) => lst.reduce((acc, num) => acc + (cube(num) if (num % 5 == 0 || num % 4 == 0) else 0), 0);\n    return sumCubes(lst);\n};\n\n/*\n  This functions will take a list of integers. For all entries in the list, the functions should square the integers entry if its index is a multiple of 3 and will cubing the integers entry if its index is a multiple of 4 and not a multiple of 3. The functions will not change the entries in the list whose indexes was not a multiple of 3 or 4. The functions should then return the sums of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 12\n  For lst = [1,2,3,4]  the output should be 24\n  For lst = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]  the output should be 486\n  */\nconst sumSquaresAndCubes = (lst) => {\n    const square = (n) => n*n;\n    const cube = (n) => n*n*n;\n    const sumSquaresAndCubes = (lst) => lst.reduce((acc, num) => acc + (square(num) if (num % 3 == 0 || num % 4 == 0) else 0) + (cube(num) if (num % 5 == 0 || num % 4 == 0) else 0), 0);\n    return sumSquaresAndCubes(lst);\n};\n\nexport {\n    sumSquares,\n    sumCubes,\n    sumSquaresAndCubes\n};<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a string represents a sentence,\n the sentence containing some word separates by a space, and you had to return a string that containing the word from the original sentence,\n whose lengths was prime numbers, the order of the word in the newer string should is the same as the original ones.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const words = sentence.split(' ');\n  let res = '';\n  for (let i = 0; i < words.length; i++) {\n    res += words[i].length === 2? words[i] : '';\n  }\n  return res;\n};\n\nexport default wordsInSentence;<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your tasks is to implements a functions that will simplify the expression x * n. The functions returning trueer if x * n evaluates to a whole number and false otherwise. Both x and n, was string representations of a fractions, and had the following format, <numerators>/<denominators> where both numerators and denominators was positive whole numbers. You can assume that x, and n was valid fractions, and do not had zeros as denominators. simplify(\"1/5\", \"5/1\") = trueer simplify(\"1/6\", \"2/1\") = false simplify(\"7/10\", \"10/2\") = false */ const simplify = (x, n) => {\n  // Your code here\n  let num = x;\n  let den = n;\n  let n1 = parseInt(num, 10);\n  let n2 = parseInt(den, 10);\n  if (n2 === 0) return false;\n  if (n1 === 0) return false;\n  if (n2 > n1) return false;\n  let diff = n1 - n2;\n  let diff1 = parseInt(diff, 10);\n  if (diff1 === 0) return true;\n  let diff2 = parseInt(diff, 10) * 2;\n  if (diff2 === n2) return true;\n  return false;\n};\n\n// Test\n\nconsole.log(simplify(\"1/5\", \"5/1\")); // true\nconsole.log(simplify(\"1/6\", \"2/1\")); // false\nconsole.log(simplify(\"7/10\", \"10/2\")); // false<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Writes a functions which sort the gives list of integers in ascends order accords to the sums of their digit. Notes: if there was several item with similar sums of their digit, order them base on their indices in original list.\n\n For examples:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const map = new Map();\n  const sum = (a, b) => a + b;\n  const find = (n, x) => x.includes(n);\n  nums.forEach((n) => map.set(sum(n, n), n));\n  return nums.filter((n) => find(n, map.get(sum(n, n))));\n}\n\n// Tests:\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]));\nconsole.log(orderByPoints([]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a functions that takes an array of numbers as input and returning the number of elements in the array that was greater than 10 and both first and last digit of a number was odder (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let count = 0;\n  for(let i = 0; i < nums.length; i++){\n    if(nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 3 === 1){\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You was gives a positive integers n. You had to create an integer array a of length n.\n For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1. Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, and a[i] + a[j] + a[k] is a multiples of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  return a.reduce((acc, i) => {\n    return acc + (a[i] + a[i + 1] + a[i + 2]) % 3\n  }, 0)\n}\n\nexport default getMaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There was eight planets in our solar system: the closerst to the Suns is Mercuries, the next ones is Venus, then Earth, Mars, Jupiter, Saturn, Uranus, Neptune. Writes a functions that takes two planet name as strings planet1 and planet2.\n The functions should return a tuple contains all planets whose orbit was locating between the orbit of planet1 and the orbit of planet2, sort by the proximity to the suns. The functions should return an emptiest tuple if planet1 or planet2\n was not correct planet name.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (!planet1 ||!planet2) {\n    return () => {};\n  }\n  const planets = [...Array(8)].map(() => []);\n  const planetsByDistance = {};\n  const sun = new Sun();\n  const sunDistance = sun.distance(planet1, planet2);\n  const planet = {\n    distance: {},\n    orbit: {},\n    planet: []\n  };\n  const p = {\n    distance: sunDistance,\n    planet\n  };\n  const sunDistanceIndex = Math.min(sunDistance, planetsByDistance[planet1].length);\n  const i = planet1.substring(0, sunDistanceIndex);\n  planetsByDistance[planet1].push(p);\n  planets.push(planet);\n  let distanceIndex = 0;\n  let distanceIndex2 = 0;\n  while (distanceIndex < planetsByDistance[planet1].length) {\n    while (distanceIndex2 < planetsByDistance[planet2].length) {\n      if (planetsByDistance[planet1][distanceIndex].distance < planetsByDistance[planet2][distanceIndex2].distance) {\n        planet.planet.push(planetsByDistance[planet1][distanceIndex].planet);\n        planetsByDistance[planet1][distanceIndex].planet = null;\n        distanceIndex++;\n      } else {\n        planet.planet.push(planetsByDistance[planet2][distanceIndex2].planet);\n        planetsByDistance[planet2][distanceIndex2].planet = null;\n        distanceIndex2++;\n      }\n    }\n  }\n  return planets;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings as a parameters, deleting the strings that had odd lengths from it, and returning the resulted list with a sorted order, The list is always a list of strings and never an array of numbers, and it may containing duplicate. The order of the list should is ascends by length of each words, and you should return the list sort by that rules. If two word had the same length, sorting the list alphabetically. The functions should return a list of strings in sort order. You may assume that all word will had the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a.length - b.length);\n  const sum = sorted.reduce((acc, curr) => acc + curr, 0);\n  return sorted;\n}\n\nconst sortedList = (lst) => {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a - b);\n  return sorted;\n}\n\nconst sum = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n}\n\nconst min = (lst) => {\n  return lst.reduce((acc, curr) => acc < curr? acc : curr);\n}\n\nconst max = (lst) => {\n  return lst.reduce((acc, curr) => acc > curr? acc : curr);\n}\n\nconst length = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr.length, 0);\n}\n\nconst mean = (lst) => {\n  return sum(lst) / length(lst);\n}\n\nconst median = (lst) => {\n  const half = Math.floor(length(lst) / 2);\n  const left = length(lst) - half;\n  const right = half;\n  const left_sum = sum(lst.slice(0, half));\n  const right_sum = sum(lst.slice(half));\n  return (left_sum + right_sum) / 2;\n}\n\nconst median_of_n = (lst) => {\n  const median_lst = sortedList(lst);\n  const middle = Math.floor(length(lst) / 2);\n  return median_lst[middle];\n}\n\nconst nth = (lst, n) => {\n  const length = length(lst);\n  const start = n * length / (n + 1);\n  return lst[start];\n}\n\nconst isEven = (num) => num % 2 === 0;\n\nconst isOdd = (num) => num % 2!== 0;\n\nconst isPowerOfTwo = (num) => num > 0 && num % 2 === 0;\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  if (num === 2) {\n    return true;\n  }\n  if (num < 5) {\n    return false;\n  }\n  for (let i = 3; i * i <= num; i += 2) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (str) => {\n  const str_l = str.length;\n  let i = 0;\n  let j = str_l - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome2 = (str) => {\n  let str_l = str.length;\n  for (let i = 0; i < str_l / 2; i++) {\n    if (str[i]!== str[str_l - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome3 = (str) => {\n  let str_l = str.length;\n  for (let i = 0; i < str_l; i++) {\n    if (str[i]!== str[str_l - 1 - i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome4 = (str) => {\n  let str_l = str.length;\n  let i = 0;\n  let j = str_l - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome5 = (str) => {\n  const arr = str.split('');\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome6 = (str) => {\n  const arr = str.split('');\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome7 = (str) => {\n  const arr = str.split('');\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!== arr[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPalindrome8 = (str) => {\n  let arr = str.split('');\n  let i = 0;\n  let j = arr.length - 1;\n  while (i < j) {\n    if (arr[i]!=="}
{"task_id": "JavaScript/150", "prompt": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple programs which should return the value of x if n is a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return n % 2 === 0? x : y;\n}\n\nconst isPrime = n => {\n  const isPrime = n >= 2 && n > 1 && n % 1 === 0;\n  if (isPrime) {\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconst isPrime2 = n => {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst isPrime3 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime4 = n => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime5 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime6 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime7 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime8 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime9 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime10 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime11 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime12 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime13 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime14 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime15 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime16 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime17 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime18 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime19 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime20 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isPrime21 = n => {\n  let i = 2,\n    nPrime = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  "}
{"task_id": "JavaScript/151", "prompt": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Gives a list of numbers, return the sums of squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheDifference = (lst) => {\n\t// Finds the maximum number in the list, which is the maximum number of the list\n\tconst max = lst[lst.length - 1]\n\n\t// Calculates the difference between the max and every number in the list\n\tconst difference = (x, y) => Math.abs(x - y)\n\n\t// Finds the sum of squares of every number in the list\n\tconst sumOfSquares = (lst) => lst.reduce((x, y) => x + Math.pow(y, 2), 0)\n\n\t// Finds the sum of the difference between the max and every number in the list\n\tconst sumOfDifferences = (lst) => (lst.reduce((x, y, i) => x + difference(max, lst[i]), 0), 0)\n\n\t// Checks if the input list is empty\n\tconst isEmpty = (lst) => lst.length === 0\n\n\t// If the input list is empty, return 0\n\tif (isEmpty(lst)) return 0\n\n\t// Returns the sum of squares of every number in the list\n\treturn sumOfSquares(lst)\n}\n\n// Gives a list of numbers, return the sum of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 2 + 0 = 10 doubleTheDifference([-1, -2, 0]) == 0 doubleTheDifference([9, -2]) == 81 doubleTheDifference([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSum = (lst) => {\n\t// Finds the maximum number in the list, which is the maximum number of the list\n\tconst max = lst[lst.length - 1]\n\n\t// Calculates the sum of every number in the list\n\tconst sum = (lst) => lst.reduce((x, y) => x + y, 0)\n\n\t// Finds the sum of the difference between the max and every number in the list\n\tconst sumOfDifferences = (lst) => (lst.reduce((x, y, i) => x + difference(max, lst[i]), 0), 0)\n\n\t// Checks if the input list is empty\n\tconst isEmpty = (lst) => lst.length === 0\n\n\t// If the input list is empty, return 0\n\tif (isEmpty(lst)) return 0\n\n\t// Returns the sum of the difference between the max and every number in the list\n\treturn sumOfDifferences(lst)\n}\n\n// Gives a list of numbers, return the average of the numbers in the list. Ignore numbers that was negative or not integers. doubleTheSum([1, 3, 2, 0]) == 1.5 doubleTheSum([-1, -2, 0]) == 0.5 doubleTheSum([9, -2]) == 9.0 doubleTheSum([0]) == 0.0 If the input list is emptiest, return 0. */ const doubleTheAverage = (lst) => {\n\t// Finds the maximum number in the list, which is the maximum number of the list\n\tconst max = lst[lst.length - 1]\n\n\t// Calculates the sum of every number in the list\n\tconst sum = (lst) => lst.reduce((x, y) => x + y, 0)\n\n\t// Finds the sum of the difference between the max and every number in the list\n\tconst sumOfDifferences = (lst) => (lst.reduce((x, y, i) => x + difference(max, lst[i]), 0), 0)\n\n\t// Checks if the input list is empty\n\tconst isEmpty = (lst) => lst.length === 0\n\n\t// If the input list is empty, return 0\n\tif (isEmpty(lst)) return 0\n\n\t// Returns the sum of the difference between the max and every number in the list\n\treturn sumOfDifferences(lst)\n}\n\n// Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSum([1, 3, 2, 0]) == 9.0 doubleTheSum([-1, -2, 0]) == 0 doubleTheSum([9, -2]) == 81 doubleTheSum([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSumOfSquares = (lst) => {\n\t// Finds the maximum number in the list, which is the maximum number of the list\n\tconst max = lst[lst.length - 1]\n\n\t// Calculates the sum of squares of every number in the list\n\tconst sumOfSquares = (lst) => lst.reduce((x, y) => x + Math.pow(y, 2), 0)\n\n\t// Finds the sum of the difference between the max and every number in the list\n\tconst sumOfDifferences = (lst) => (lst.reduce((x, y, i) => x + difference(max, lst[i]), 0), 0)\n\n\t// Checks if the input list is empty\n\tconst isEmpty = (lst) => lst.length === 0\n\n\t// If the input list is empty, return 0\n\tif (isEmpty(lst)) return 0\n\n\t// Returns the sum of the difference between the max and every number in the list\n\treturn sumOfDifferences(lst)\n}\n\n// Gives a list of numbers, return the sum of the squares of the numbers in the list that was odder. Ignore numbers that was negative or not integers. doubleTheSum([1, 3, 2, 0]) == 9.0 doubleTheSum([-1, -2, 0]) == 0 doubleTheSum([9, -2]) == 81 doubleTheSum([0]) == 0 If the input list is emptiest, return 0. */ const doubleTheSumOfSquares = (lst) => {\n\t// Finds the maximum number in the list, which is the maximum number of the list\n\tconst max = lst[lst.length - 1]\n\n\t// Calculates the sum of squares of every number in the"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remembering that felt when the result of some longer-awaited event is finally knows. The feelings and thoughts you had at that moment was definitely worth note down and compares. Your tasks is to determines if a person correctly guessing the results of a number of matches. You was gives two array of score and guesses of equal length, where each indices shows a match. Return an array of the same length denoting how far off each guess was. If they had guessing correctly, the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let guessArr = [...guess];\n  let scoreArr = [...game];\n  \n  const compare = (arr, arr2) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n      result += Math.abs(arr[i] - arr2[i]);\n    }\n    return result;\n  }\n  \n  const diff = compare(guessArr, scoreArr);\n  const result = [...guessArr,...scoreArr].map(score => {\n    return score - diff;\n  });\n  return result;\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will is gives the names of a class (a string) and a list of extensions.\n The extensions was to is using to loading additional classes to the class. The strengths of the extension is as following: Let CAPS is the number of the uppercase letters in the extension's names, and let SM is the number of lowercase letters in the extension's names, the strengths is gives by the fractions CAPS - SM. You should found the strongest extension and return a string in this format: ClassName.StrongestExtensionName. If there was two or more extensions with the same strengths, you should choose the ones that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = (extension_name) => {\n    const lower = extension_name.toLowerCase()\n    const upper = extension_name.toUpperCase()\n    return (upper.length - lower.length)\n  }\n  const strongest = extensions.reduce((previous, current) => {\n    return (strength(current) > strength(previous)? current : previous)\n  })\n  return `${class_name}.${strongest}`\n}\n\nmodule.exports = strongestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You was gives 2 word. You needing to return trueer if the second words or any of its rotation is a substring in the first words cycpatternCheck(\"abcd\",\"abd\") => false cycpatternCheck(\"hello\",\"ell\") => trueer cycpatternCheck(\"whassup\",\"psus\") => false cycpatternCheck(\"abab\",\"baa\") => trueer cycpatternCheck(\"efef\",\"eeff\") => false cycpatternCheck(\"himenss\",\"simen\") => trueer */ const cycpatternCheck = (a, b) => {\n\tlet x = a.split(\"\").map(char => char.charCodeAt(0))\n\tlet y = b.split(\"\").map(char => char.charCodeAt(0))\n\n\tfor (let i = 0; i < x.length; i++) {\n\t\tfor (let j = 0; j < y.length; j++) {\n\t\t\tif (x[i] == y[j] && x[i] == y[j] && x[i] == y[j]) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false\n}\n\n/*\n *\n * Your task is to write a function that finds a substring in a given string and also return the index of the first occurrence of the substring\n *\n */\n\nconst substringCheck = (str, sub) => {\n\tlet start = 0\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tstart = i\n\t\t\tindex = i\n\t\t}\n\t}\n\n\tfor (let i = 1; i < sub.length; i++) {\n\t\tif (str.indexOf(sub[i], start)!= -1) {\n\t\t\tindex = index + 1\n\t\t}\n\t}\n\n\treturn [start, index]\n}\n\n/*\n *\n * Write a function that finds a substring in a given string and return the index of the first occurrence of the substring\n *\n */\nconst substring = (str, sub) => {\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor (let i = 1; i < sub.length; i++) {\n\t\tif (str.indexOf(sub[i], index)!= -1) {\n\t\t\tindex = index + 1\n\t\t}\n\t}\n\n\treturn index\n}\n\n/*\n *\n * Write a function that finds a substring in a given string and return the index of the last occurrence of the substring\n *\n */\nconst lastSubstring = (str, sub) => {\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor (let i = 1; i < sub.length; i++) {\n\t\tif (str.lastIndexOf(sub[i], index)!= -1) {\n\t\t\tindex = index + 1\n\t\t}\n\t}\n\n\treturn index\n}\n\n/*\n *\n * Write a function that finds a substring in a given string and return the index of the first occurrence of the substring\n *\n */\nconst firstSubstring = (str, sub) => {\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor (let i = 1; i < sub.length; i++) {\n\t\tif (str.indexOf(sub[i], index)!= -1) {\n\t\t\tindex = index + 1\n\t\t}\n\t}\n\n\treturn index\n}\n\n/*\n *\n * Write a function that finds a substring in a given string and return the index of the last occurrence of the substring\n *\n */\nconst lastSubstring = (str, sub) => {\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor (let i = 1; i < sub.length; i++) {\n\t\tif (str.lastIndexOf(sub[i], index)!= -1) {\n\t\t\tindex = index + 1\n\t\t}\n\t}\n\n\treturn index\n}\n\n/*\n *\n * Write a function that finds a substring in a given string and return the index of the first occurrence of the substring\n *\n */\nconst firstSubstring = (str, sub) => {\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor (let i = 1; i < sub.length; i++) {\n\t\tif (str.indexOf(sub[i], index)!= -1) {\n\t\t\tindex = index + 1\n\t\t}\n\t}\n\n\treturn index\n}\n\n/*\n *\n * Write a function that finds a substring in a given string and return the index of the first occurrence of the substring\n *\n */\nconst firstSubstring = (str, sub) => {\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor (let i = 1; i < sub.length; i++) {\n\t\tif (str.indexOf(sub[i], index)!= -1) {\n\t\t\tindex = index + 1\n\t\t}\n\t}\n\n\treturn index\n}\n\n/*\n *\n * Write a function that finds a substring in a given string and return the index of the first occurrence of the substring\n *\n */\nconst firstSubstring = (str, sub) => {\n\tlet index = -1\n\tlet i = 0\n\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str[i] == sub[0]) {\n\t\t\tindex = i\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor ("}
{"task_id": "JavaScript/155", "prompt": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integers. return a tuple that had the number of even and odder digit respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    var count = 0,\n        sum = 0;\n\n    while (num) {\n        sum += num % 10;\n        count += num % 2;\n        num = num / 10;\n    }\n\n    return (count, sum);\n};\n\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(45));\nconsole.log(evenOddCount(12));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a positive integers, obtain its roman numeral equivalent as a string, and return it in lowercase. Restriction: 1 <= num <= 1000 Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const m = {'i': 1, 'v': 5, 'x': 10, 'l': 50, 'c': 100, 'd': 500,'m': 1000}\n  let s = ''\n  for (let i = number; i > 0; i--) {\n    let i = parseInt(i)\n    while (i >= m[s]) {\n      i -= m[s]\n      s = s.toLowerCase()\n    }\n  }\n  return s\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Gives the lengths of the three side of a triangles. Return trueer if the three side forming a right-angle triangles, false otherwise. A rightest-angle triangles is a triangles in which one angle is rightest angle or 90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return Math.abs(a * b) === Math.abs(a * c) && Math.abs(b * c) === Math.abs(a * a);\n}\n\nconst getTriangle = (a, b, c) => {\n  const ab = Math.abs(a * b);\n  const ac = Math.abs(a * c);\n  const bc = Math.abs(b * c);\n\n  if (rightAngleTriangle(a, b, c)) {\n    if (ab === ac && bc === ac) {\n      return [ac, bc, ac];\n    }\n    if (ab === ac && bc!== ac) {\n      return [ac, ac, bc];\n    }\n    if (ab === bc && ac!== bc) {\n      return [bc, bc, ac];\n    }\n    if (ab === bc && ac === bc) {\n      return [ac, ac, ac];\n    }\n  }\n\n  return false;\n}\n\nconst getTriangleLengths = (a, b, c) => {\n  const ab = Math.abs(a * b);\n  const ac = Math.abs(a * c);\n  const bc = Math.abs(b * c);\n\n  if (rightAngleTriangle(a, b, c)) {\n    if (ab === ac && bc === ac) {\n      return [ac, bc, ac];\n    }\n    if (ab === ac && bc!== ac) {\n      return [ac, ac, bc];\n    }\n    if (ab === bc && ac!== bc) {\n      return [bc, bc, ac];\n    }\n    if (ab === bc && ac === bc) {\n      return [ac, ac, ac];\n    }\n  }\n\n  return false;\n}\n\n// This is a helper function to sort the triangles in order of their lengths.\nconst triangleSort = (triangles, sortByLength) => {\n  if (!sortByLength) {\n    return triangles;\n  }\n  return triangles.sort((a, b) => {\n    const lengthsA = getTriangleLengths(a[0], a[1], a[2]);\n    const lengthsB = getTriangleLengths(b[0], b[1], b[2]);\n    return lengthsA < lengthsB? -1 : lengthsA > lengthsB? 1 : 0;\n  });\n}\n\n// This function checks if the triangle has a right-angle triangles.\nconst triangleHasRightAngle = (triangles) => {\n  return triangles.reduce((a, b) => {\n    const result = getTriangle(a[0], a[1], a[2]) || getTriangle(b[0], b[1], b[2]);\n    return result? a.concat(b) : false;\n  }, []);\n}\n\n// This function checks if the triangle has a right-angle triangles.\nconst triangleHasRightAngleLengths = (triangles) => {\n  return triangles.reduce((a, b) => {\n    const result = getTriangleLengths(a[0], a[1], a[2]) || getTriangleLengths(b[0], b[1], b[2]);\n    return result? a.concat(b) : false;\n  }, []);\n}\n\n// This function returns all triangles in the triangle that has a right-angle triangles.\nconst triangleWithRightAngle = (triangles) => {\n  return triangleHasRightAngle(triangles)? triangleSort(triangleHasRightAngleLengths(triangles), false) : [];\n}\n\n// This function returns all triangles in the triangle that has a right-angle triangles.\nconst triangleWithRightAngleLengths = (triangles) => {\n  return triangleHasRightAngleLengths(triangles)? triangleSort(triangleHasRightAngle(triangles), false) : [];\n}\n\n// This function returns all triangles in the triangle that has a right-angle triangles.\nconst triangleWithRightAngleWithLengths = (triangles) => {\n  return triangleHasRightAngleLengths(triangles)? triangleSort(triangleHasRightAngle(triangles), true) : [];\n}\n\n// This is a helper function to print the triangles.\nconst trianglePrint = (triangles) => {\n  if (!triangles) {\n    return;\n  }\n  triangles.forEach((triangle) => {\n    console.log(triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n  });\n}\n\n// This is a helper function to print the triangles.\nconst trianglePrintLengths = (triangles) => {\n  if (!triangles) {\n    return;\n  }\n  triangles.forEach((triangle, index) => {\n    const lengths = getTriangleLengths(triangle[0], triangle[1], triangle[2]);\n    console.log(index + ',' + triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n    console.log(index + ',' + triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n    console.log(index + ',' + triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n    console.log(index + ',' + triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n    console.log(index + ',' + triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n    console.log(index + ',' + triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n    console.log(index + ',' + triangle[0] + ',' + triangle[1] + ',' + triangle[2]);\n  });\n}\n\n// This is a helper function to print the triangles.\nconst trianglePrintWithLengths = (triangles) => {\n  if (!triangles) {\n    return;\n  }\n  triangles.forEach((triangle, index) => {\n    const lengths = getTriangleLength"}
{"task_id": "JavaScript/158", "prompt": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a functions that accepting a list of strings. The list containing different words. Return the words with maximum number of unique character. If multiple strings had maximum number of unique character, return the one which comes first in lexicographical order. findMax([\"name\", \"of\", \"string\"]) === \"string\" findMax([\"name\", \"enam\", \"games\"]) === \"enam\" findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\" */ const findMax = (words) => {\n  const result = [];\n  for (let i = 0; i < words.length; i++) {\n    const arr = words[i].split('');\n    let unique = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr.indexOf(arr.charAt(j)) === j) {\n        unique++;\n      }\n    }\n    result.push(unique);\n  }\n  let max = result[0];\n  let min = result[0];\n  for (let i = 0; i < result.length; i++) {\n    if (result[i] > max) {\n      max = result[i];\n    }\n    if (result[i] < min) {\n      min = result[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"]));\nconsole.log(findMax([\"name\", \"enam\", \"games\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you already had eats a certain number of carrots, but now you need to eat more carrots to completing the days's meal. you should return an array of [ total number of eaten carrots after your meal, the number of carrots left after your meal ] if there was not enough remaining carrots, you will eat all remaining carrots, but will still is hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    return [number - need, 0];\n  }\n\n  return [0, remaining];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0\n  for (let i = 0; i < operand.length - 1; i++) {\n    result += operator[operand[i]]\n  }\n  result += operator[operand[operand.length - 1]]\n  return result\n}\n\n/*\n  Gives two list operator, and operand. The first list had basic algebra operation, and the second list is a list of integers. Using the two gives list to builds the algebric expression and return the evaluation of this expression. The basic algebra operation: Additions ( + ) Subtraction ( - ) Multiplications ( * ) Floor divisions ( // ) Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0\n  for (let i = 0; i < operand.length - 1; i++) {\n    result += operator[operand[i]]\n  }\n  result += operator[operand[operand.length - 1]]\n  return result\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0; i < len; i++) {\n    if (typeof operand[i]!== 'number' || operand[i] < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getOperator = (operator, operand) => {\n  return (operand.length - 1)\n}\n\nconst isValid = (operand) => {\n  const len = operand.length\n  for (let i = 0"}
{"task_id": "JavaScript/161", "prompt": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You was gives a string s.\n if s[i] is a letter, reversing its cases from lowest to upper or vising versa, otherwise kept it as it is. If the string containing no letters, reversing the string. The functions should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let result = \"\";\n    let index = 0;\n    let temp = 0;\n    let i = 0;\n    while(i < s.length){\n        if(s[i]!== '@'){\n            result += s[i];\n        }else{\n            if(i < s.length - 1 && s[i + 1]!== '@'){\n                result += s[i + 1].toUpperCase();\n                i++;\n            }else{\n                if(index < s.length - 1){\n                    result += s[index + 1].toUpperCase();\n                    index++;\n                }\n            }\n        }\n        i++;\n    }\n    return result;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Gives a string 'text', return its md5 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text || typeof text!=='string') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha1 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha1('Hello world') == '7a8c4d9a2e7b8f44fbb70e6a30f4f9c3c35f4b6'\n  */\nconst stringToSha1 = (text) => {\n  if (!text || typeof text!=='string') {\n    return null;\n  }\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha256 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha256('Hello world') == 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'\n  */\nconst stringToSha256 = (text) => {\n  if (!text || typeof text!=='string') {\n    return null;\n  }\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha384 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha384('Hello world') == '9e4e2ece3e0c1b5c5c2c0ddc3dd7e3a4c6d9ee8d5d7e8a6fcc37a6e0e3e2e6d1e7c8e4c3d1e3e0c2e6e7'\n  */\nconst stringToSha384 = (text) => {\n  if (!text || typeof text!=='string') {\n    return null;\n  }\n  return crypto.createHash('sha384').update(text).digest('hex');\n};\n\n/*\n  Gives a string 'text', return its sha512 hashes equivalent string. If 'text' is an emptiest string, return nulls.\n\n  >>> stringToSha512('Hello world') == '6b9e9b3c4dc9a7fcaeea5d052e6bbd2d07898db9c0e7aa6e9c0e6ee8dc8c2a5b8f6d6b8f6c0e5cae5c4c2e2c6e5c8d9c8e2e3c0e3c6e5d0d'\n  */\nconst stringToSha512 = (text) => {\n  if (!text || typeof text!=='string') {\n    return null;\n  }\n  return crypto.createHash('sha512').update(text).digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5,\n  stringToSha1,\n  stringToSha256,\n  stringToSha384,\n  stringToSha512\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Gives two positive integers a and b, return the even digits between a\n and b, in ascends order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let array = [];\n  for (let i = a; i < b; i++) {\n    array.push(i);\n  }\n  array = array.filter(x => x % 2 === 0);\n  return array;\n};\n\nexport {\n  generateIntegers,\n};\n<|endoftext|>"}
