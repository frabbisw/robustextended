{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.every(number => Math.abs(number - threshold) < 0.001);\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], 0.2)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsArray = (numbers, threshold) => {\n  return numbers.every(number => Math.abs(number - threshold) < 0.001);\n}\n\n/*\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], 0.2)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElementsArrayAndThreshold = (numbers, threshold) => {\n  return numbers.every(number => Math.abs(number - threshold) < 0.001);\n}\n\nmodule.exports = {\n  hasCloseElements,\n  hasCloseElementsArray,\n  hasCloseElementsArrayAndThreshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    const reg = new RegExp(/\\(|\\)/g)\n    const paren_array = reg.exec(paren_string)\n    const group_array = []\n    while (paren_array!== null) {\n        group_array.push(paren_array.toString().replace('(', '').replace(')', ''))\n        paren_array = reg.exec(paren_string)\n    }\n    return group_array\n}\n\n/*\n  >>> separateParenGroups('()')\n  ['()']\n  >>> separateParenGroups('(()())')\n  ['()', '(())', '()()()']\n  >>> separateParenGroups('(()()(()(())))')\n  ['()', '(())', '()()()', '(())', '()()()', '(())', '()()()']\n  >>> separateParenGroups('(((()()())))')\n  ['(()())', '(()()())', '((()())())']\n  >>> separateParenGroups('(((()()())())')\n  ['(()())', '(()()())', '(()())', '(()()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('(((()())()()))')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('(()((()(()))()))')\n  ['()', '(())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()((()(())))()))')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('(((()(())))()))')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('(((()(())))()))')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()((()(())))()))')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('(((()(()(())))()))')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('(((()(()(()))())()))')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()(()()(())))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()(()()(())))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()(()()(())))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()()(())))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()()(()))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()()(()))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()()(()))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()()(()))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()()(()))())')\n  ['(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())', '(()())']\n  >>> separateParenGroups('((()()()()(()))())')\n  ['(()())', '(()())',"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    const numParts = number.toString().split('.');\n    const numDigits = numParts[1].length;\n\n    if (numParts[1].length === 0) {\n        return number;\n    }\n\n    if (numDigits > 3) {\n        return number;\n    }\n\n    const numPartsInt = numParts[0].split('');\n\n    if (numPartsInt[numPartsInt.length - 1].length === 0) {\n        return number;\n    }\n\n    return numParts[0].replace(numPartsInt[numPartsInt.length - 1], '') + '.' +\n        numParts[1].substr(0, 3 - numDigits);\n};\n\nexport default truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const total = operations.reduce((a, b) => a + b)\n  const belowZero = total < 0\n  return belowZero\n}\n\n/*\n  You'Re giVen a list oF operations on A bank AccOUnT that have a positive balance. Your TASk is To\n  detect if At any point thE balance of acCoUNt is positive, anD At THAt pOiNT FunCtIOn ShoulD\n  return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, 4, 5])\n  true\n  */\nconst belowPositive = (operations) => {\n  const total = operations.reduce((a, b) => a + b)\n  const belowPositive = total > 0\n  return belowPositive\n}\n\n/*\n  You'Re giVen a list oF operations on A bank AccOUnT that have a negative balance. Your TASk is To\n  detect if At any point thE balance of acCoUNt is negative, anD At THAt pOiNT FunCtIOn ShoulD\n  return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowPositive([1, 2, 3])\n  false\n  >>> belowPositive([1, 2, -4, 5])\n  true\n  */\nconst belowNegative = (operations) => {\n  const total = operations.reduce((a, b) => a + b)\n  const belowNegative = total < 0\n  return belowNegative\n}\n\nconst main = () => {\n  console.log(\n    `The following operation sums are below zero: ${belowZero([1, 2, -3])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([1, 2, -4, 5])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([1, 2, -4, 5, -6])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17])}`\n  )\n  console.log(\n    `The following operation sums are below zero: ${belowZero([-1, -2, -3, -4, -5,"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sortedNubmers = sortNubmers(numbers);\n  return Math.abs(\n    sortedNubmers[numbers.length - 1] -\n      sortedNubmers[0]\n  );\n};\n\nexport default meanAbsoluteDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const n = numbers.length;\n  if (n === 0) {\n    return [];\n  }\n  const d = delimeter;\n  const out = [];\n  let i = 0;\n  while (i < n - 1) {\n    out.push(numbers[i]);\n    out.push(d);\n    i++;\n  }\n  out.push(numbers[i]);\n  return out;\n};\n\n/**\n  * This method is used to intersperse a list of strings.\n  * @param  {Array} list of strings\n  * @param  {Number} delimeter to be inserted between every two consEcuTive eLemENtS\n  * @return {Array} the interspersee list of strings\n  * @example\n  *   >>> intersperse(['one', 'two', 'three'], 2)\n  *   ['one', 'two', 'two', 'three']\n  *   >>> intersperse(['one', 'two', 'three'], 1)\n  *   ['one', 'two', 'two', 'three']\n  *   >>> intersperse(['one', 'two', 'three'], 4)\n  *   ['one', 'two', 'two', 'three']\n  *   >>> intersperse(['one', 'two', 'three'], 3)\n  *   ['one', 'two', 'two', 'three']\n  */\nconst intersperse2 = (list, delimeter) => {\n  const n = list.length;\n  if (n === 0) {\n    return [];\n  }\n  const d = delimeter;\n  const out = [];\n  let i = 0;\n  while (i < n - 1) {\n    out.push(list[i]);\n    out.push(d);\n    i++;\n  }\n  out.push(list[i]);\n  return out;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_stack = [paren_string];\n  let nested_paren_stack = paren_string.split(/\\((\\()/);\n  const paren_count = nested_paren_stack.length;\n  let nested_paren_count = 0;\n\n  const parseParen = (paren_string, depth) => {\n    if (paren_string === \"\") return;\n\n    let paren_char = paren_string[0];\n    let next_char = paren_string[1];\n\n    // If the next character is a paren, then recurse.\n    if (next_char === \"(\" || next_char === \")\") {\n      paren_stack.push(paren_string);\n      parseParen(paren_string.substr(1, paren_string.length - 2), depth + 1);\n      paren_stack.pop();\n    } else {\n      paren_stack.push(paren_string);\n      let paren_value = paren_stack.length - 1;\n      nested_paren_count += paren_value;\n      // If the paren is the last one in the stack, then set the value of the\n      // paren_count to its depth.\n      if (paren_stack.length - 1 === paren_count) {\n        paren_count = depth;\n      }\n    }\n  };\n\n  while (nested_paren_count > 0) {\n    parseParen(nested_paren_stack.pop(), 0);\n  }\n  return paren_stack;\n};\n\n/*\n  A fUncTion for a function that takes a string,\n  a function that returns the number of spaces,\n  and a function that adds one to that number.\n  E.g.\n  >>> function space(string) {\n ...   let result = string.split(\" \").length;\n ...   return result;\n ... }\n  >>> function add_one(n) {\n ...   return n + 1;\n ... }\n  >>> space(\"foo bar baz\")\n  6\n  >>> add_one(space(\"foo bar baz\"))\n  7\n  >>> space(\"foo \")\n  2\n  >>> add_one(space(\"foo \"))\n  3\n  >>> space(\" \")\n  1\n  >>> add_one(space(\" \"))\n  2\n  >>> space(\"\")\n  0\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\" \"))\n  1\n  >>> add_one(space(\" \"))\n  1\n  >>> add_one(space(\" \"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add_one(space(\"\"))\n  1\n  >>> add"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!strings ||!substring) {\n    return []\n  }\n  const substringLower = substring.toLowerCase()\n  return strings.filter(string => string.toLowerCase().indexOf(substringLower)!== -1)\n}\n\nexport {\n  filterBySubstring,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct2 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct3 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct4 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct5 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct6 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct7 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct8 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct9 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct10 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct11 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct12 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct13 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct14 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct15 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct16 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct17 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct18 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n\nconst sumProduct19 = (numbers, int) => {\n    let sum = 0\n    let product = 1\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i]\n        product *= numbers[i]\n    }\n    return [sum, product]\n}\n"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n    const max = 0;\n    const maxIndex = 0;\n    let i = 0;\n    let j = 0;\n    while (i < numbers.length - 1) {\n        j = i + 1;\n        while (j < numbers.length - 1) {\n            if (numbers[i] + numbers[j] > max) {\n                max = numbers[i] + numbers[j];\n                maxIndex = i;\n            }\n            j++;\n        }\n        i++;\n    }\n    return [numbers[maxIndex], max];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const substr = string.split('').reverse().join('');\n  const suffix = substr.split('').reverse().join('');\n  const prefix = substr.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* find tHE sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THAt Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const substr = string.split('').reverse().join('');\n  const suffix = substr.split('').reverse().join('');\n  const prefix = substr.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* The sHOrTeSt paLIndRome that beginS wiTh a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THAt Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const substr = string.split('').reverse().join('');\n  const suffix = substr.split('').reverse().join('');\n  const prefix = substr.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* The sHOrTeSt paLIndRome that beginS wiTh a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THAt Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const substr = string.split('').reverse().join('');\n  const suffix = substr.split('').reverse().join('');\n  const prefix = substr.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* The sHOrTeSt paLIndRome that beginS wiTh a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THAt Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const substr = string.split('').reverse().join('');\n  const suffix = substr.split('').reverse().join('');\n  const prefix = substr.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* The sHOrTeSt paLIndRome that beginS wiTh a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THAt Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const substr = string.split('').reverse().join('');\n  const suffix = substr.split('').reverse().join('');\n  const prefix = substr.split('').reverse().join('');\n  return prefix + suffix;\n}\n\n/* The sHOrTeSt paLIndRome that beginS wiTh a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THAt Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const x = a.split('').map((n) => n.charCodeAt(0))\n  const y = b.split('').map((n) => n.charCodeAt(0))\n\n  const count = Math.min(x.length, y.length)\n\n  const result = x.filter((n, i) => n!== y[i] && n).join('')\n  const count = count.toString(2)\n\n  return `${result}${count}`\n}\n\n/*\n  __________   ______ _____ _____ _____\n  |\\   ____\\ \\ /\\  _  |\\__  |\\  ___/\\  ___/\n  \\ \\  \\___|\\ V  V /|  | |\\  | |\\  | |\\  \\___\n   \\ \\_____  \\ \\_/\\_\\_|  |_|\\_\\ |_|\\_\\  \\___/\n    \\_____|    \\__/ \\__/ \\_____/  \\__|    \\___|\n           |__|        |__|\n   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   Author:  H.Yoshiaki Oi (https://github.com/hyoshi)\n   Version: 1.0\n   Copyright (C) 2015-2019\n   Released under MIT License.\n   GitHub: https://github.com/hyoshi\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null;\n  }\n  const maxLength = strings[0];\n  const longestString = strings[0];\n  for (const string of strings) {\n    if (string.length > longestString.length) {\n      longestString = string;\n    }\n  }\n  return longestString;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let divisor = 0;\n  while (b!= 0) {\n    let quotient = a / b;\n    if (quotient > divisor) {\n      divisor = quotient;\n    }\n    a = b;\n    b = a % b;\n  }\n  return divisor;\n};\n\n/**\n  * Return a gReateSt cOmmon DivisOr of two IntEgers a And b\n  * For example:\n  *  >>> a = 3;\n  *  >>> b = 5;\n  *  >>> greatestCommonDivisor(a, b)\n  *  1\n  *  >>> a = 25;\n  *  >>> b = 15;\n  *  >>> greatestCommonDivisor(a, b)\n  *  5\n  *  >>> a = -2;\n  *  >>> b = -3;\n  *  >>> greatestCommonDivisor(a, b)\n  *  1\n  *  >>> a = -25;\n  *  >>> b = -15;\n  *  >>> greatestCommonDivisor(a, b)\n  *  5\n  *  >>> a = -3;\n  *  >>> b = -5;\n  *  >>> greatestCommonDivisor(a, b)\n  *  1\n  *  >>> a = -25;\n  *  >>> b = -15;\n  *  >>> greatestCommonDivisor(a, b)\n  *  1\n  */\nconst greatestCommonDivisor_2 = (a, b) => {\n  let gcd = 1;\n  if (a < 0 && b < 0) {\n    gcd = -1;\n  }\n  while (b!= 0) {\n    let quotient = a / b;\n    if (quotient > gcd) {\n      gcd = quotient;\n    }\n    a = b;\n    b = a % b;\n  }\n  return gcd;\n};\n\nconst gcd_1 = greatestCommonDivisor(2, 3);\nconst gcd_2 = greatestCommonDivisor_2(2, 3);\nconst gcd_3 = greatestCommonDivisor(3, 5);\nconst gcd_4 = greatestCommonDivisor_2(3, 5);\n\nconst gcd_5 = greatestCommonDivisor(25, 15);\nconst gcd_6 = greatestCommonDivisor_2(25, 15);\nconst gcd_7 = greatestCommonDivisor(25, -15);\nconst gcd_8 = greatestCommonDivisor_2(25, -15);\n\nconst gcd_9 = greatestCommonDivisor(25, -15);\nconst gcd_10 = greatestCommonDivisor_2(25, -15);\n\nconst gcd_11 = greatestCommonDivisor(-2, -3);\nconst gcd_12 = greatestCommonDivisor_2(-2, -3);\nconst gcd_13 = greatestCommonDivisor(-2, -3);\nconst gcd_14 = greatestCommonDivisor_2(-2, -3);\n\nconst gcd_15 = greatestCommonDivisor(-2, -3);\nconst gcd_16 = greatestCommonDivisor_2(-2, -3);\nconst gcd_17 = greatestCommonDivisor(-2, -3);\nconst gcd_18 = greatestCommonDivisor_2(-2, -3);\n\nconst gcd_19 = greatestCommonDivisor(-25, -15);\nconst gcd_20 = greatestCommonDivisor_2(-25, -15);\nconst gcd_21 = greatestCommonDivisor(-25, -15);\nconst gcd_22 = greatestCommonDivisor_2(-25, -15);\n\nconst gcd_23 = greatestCommonDivisor(-25, -15);\nconst gcd_24 = greatestCommonDivisor_2(-25, -15);\nconst gcd_25 = greatestCommonDivisor(-25, -15);\nconst gcd_26 = greatestCommonDivisor_2(-25, -15);\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  const split = string.split('');\n  let start = 0;\n  for (let i = 0; i < split.length; i++) {\n    const sub = split.slice(start, i + 1);\n    if (sub.length > 0) {\n      ret.push(sub.join(''));\n    }\n    start = i + 1;\n  }\n  return ret;\n};\n\nmodule.exports = {\n  isEmpty,\n  remove,\n  split,\n  replace,\n  join,\n  allPrefixes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array(n+1).fill('0').join('')\n}\n\n/* Return a random number from 0 to n inclusive.\n  >>> randomNumber(1)\n  0\n  >>> randomNumber(10)\n  3\n  >>> randomNumber(100)\n  37\n  */\nconst randomNumber = (n) => {\n  return Math.floor(Math.random() * n)\n}\n\n/* Return a random number from 0 to n inclusive, but in the same order as the\n  given list.\n  >>> randomNumberList(1, 'one')\n  0\n  >>> randomNumberList(10, 'ten')\n  3\n  >>> randomNumberList(100, 'hundred')\n  37\n  */\nconst randomNumberList = (n, list) => {\n  return list.map((i) => {\n    return randomNumber(n)\n  }).join('')\n}\n\n/* Retrun a random number from 0 to n inclusive, but in a random order.\n  >>> randomOrder(1, 'one')\n  0\n  >>> randomOrder(10, 'ten')\n  3\n  >>> randomOrder(100, 'hundred')\n  37\n  */\nconst randomOrder = (n, list) => {\n  const shuffled = list.concat().sort().join('')\n  return shuffled.substr(0, n)\n}\n\n/* Return a random list of n strings.\n  >>> randomStringList(1, 'one')\n  'one'\n  >>> randomStringList(10, 'ten')\n  '1 0 2 3 4 5 6 7 8 9'\n  >>> randomStringList(100, 'hundred')\n  '10 0 20 30 40 50 60 70 80 90'\n  */\nconst randomStringList = (n, list) => {\n  const randomNumbers = randomNumberList(n, list)\n  return list.map((i) => {\n    return i.substr(randomNumbers)\n  })\n}\n\n/* Return a random list of n random strings.\n  >>> randomStringList(1, 'one')\n  'one'\n  >>> randomStringList(10, 'ten')\n  '1 0 2 3 4 5 6 7 8 9'\n  >>> randomStringList(100, 'hundred')\n  '10 0 20 30 40 50 60 70 80 90'\n  */\nconst randomStringList = (n, list) => {\n  const randomNumbers = randomNumberList(n, list)\n  return list.map((i) => {\n    return i.substr(randomNumbers)\n  })\n}\n\n/* Return a list of n random numbers.\n  >>> randomNumberList(1, 'one')\n  0\n  >>> randomNumberList(10, 'ten')\n  3\n  >>> randomNumberList(100, 'hundred')\n  37\n  */\nconst randomNumberList = (n, list) => {\n  const shuffled = list.concat().sort().join('')\n  return shuffled.substr(0, n)\n}\n\n/* Return a list of n random numbers, but in a random order.\n  >>> randomOrder(1, 'one')\n  0\n  >>> randomOrder(10, 'ten')\n  3\n  >>> randomOrder(100, 'hundred')\n  37\n  */\nconst randomOrder = (n, list) => {\n  const shuffled = list.concat().sort().join('')\n  return shuffled.substr(0, n)\n}\n\n/* Return a list of n random strings, but in a random order.\n  >>> randomOrder(1, 'one')\n  'one'\n  >>> randomOrder(10, 'ten')\n  '1 0 2 3 4 5 6 7 8 9'\n  >>> randomOrder(100, 'hundred')\n  '10 0 20 30 40 50 60 70 80 90'\n  */\nconst randomOrder = (n, list) => {\n  const shuffled = list.concat().sort().join('')\n  return shuffled.substr(0, n)\n}\n\nmodule.exports = {\n  stringSequence,\n  randomNumber,\n  randomNumberList,\n  randomOrder,\n  randomStringList,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characters = [];\n  for (let i = 0; i < string.length; i++) {\n    characters.push(string[i]);\n  }\n  const charLength = characters.length;\n  const uniqueCharacters = [];\n  for (let i = 0; i < charLength; i++) {\n    let char = characters[i];\n    const found = uniqueCharacters.indexOf(char)!== -1;\n    if (!found) {\n      uniqueCharacters.push(char);\n    }\n  }\n  return uniqueCharacters.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let count = 0;\n  const notes = [];\n  const currentNote = '';\n  const prevNote = '';\n  const prevPrevNote = '';\n  let currNote = '';\n  let prevNote = '';\n\n  // parse the string to an array of notes\n  for (let i = 0; i < music_string.length; i++) {\n    currNote = music_string[i];\n    if (currNote === 'o' && prevNote === 'o') {\n      count += 2;\n    } else if (currNote === 'o' && prevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count += 1;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote!== 'o' && prevPrevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote!== 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote!== 'o' && prevPrevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote!== 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote!== 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote!== 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count++;\n    } else if (currNote === 'o' && prevNote === 'o' && prevPrevNote === 'o') {\n      count"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  const stringLength = string.length;\n  const substringLength = substring.length;\n  let i = 0;\n  while (i < stringLength) {\n    if (string.indexOf(substring, i)!== -1) {\n      count++;\n      i = string.indexOf(substring, i) + substringLength;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\nexport default howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbers = numbers.split(\" \");\n  numbers.sort();\n  return numbers.join(\" \");\n}\n\nconst words = [\"zeRO\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"];\n\nconst sortWords = (str) => {\n  let numbers = str.split(\" \");\n  numbers.sort();\n  return numbers.join(\" \");\n}\n\nconst isPalindrome = (str) => {\n  let str_len = str.length;\n  let reverse = \"\";\n  let i = 0;\n  while (i < str_len) {\n    reverse += str[i];\n    i++;\n  }\n  reverse = reverse.reverse();\n  return str === reverse;\n}\n\nconst isPalindrome2 = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    if (str[i]!== str[str_len - i - 1]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst reverseString = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  let j = str_len - 1;\n  while (i < j) {\n    let tmp = str[i];\n    str[i] = str[j];\n    str[j] = tmp;\n    i++;\n    j--;\n  }\n  return str;\n}\n\nconst isNumber = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (ch < '0' || ch > '9') {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isChar = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (!(ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z')) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isCharOrNumber = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (!(ch >= 'A' && ch <= 'Z' || ch >= 'a' && ch <= 'z' || ch >= '0' && ch <= '9')) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isUpperCase = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (ch >= 'A' && ch <= 'Z') {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isLowerCase = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (ch >= 'a' && ch <= 'z') {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isWord = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (words.indexOf(ch) < 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst containsOnly = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (isUpperCase(ch) || isLowerCase(ch) || isNumber(ch) || isChar(ch)) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst containsOnly2 = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (!(isUpperCase(ch) || isLowerCase(ch) || isNumber(ch) || isChar(ch))) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst containsOnly3 = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (!(isUpperCase(ch) || isLowerCase(ch) || isNumber(ch) || isChar(ch) || isCharOrNumber(ch))) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst isAlphanumeric = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch = str[i];\n    if (!(isUpperCase(ch) || isLowerCase(ch) || isNumber(ch))) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}\n\nconst containsLetters = (str) => {\n  let str_len = str.length;\n  let i = 0;\n  while (i < str_len) {\n    let ch"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const numbersArray = Array.from(numbers);\n  const len = numbersArray.length;\n  const closest = [];\n  let min = numbersArray[0];\n  let minIdx = 0;\n  for (let i = 0; i < len; i += 1) {\n    let current = numbersArray[i];\n    if (Math.abs(current - min) < Math.abs(current - numbersArray[minIdx])) {\n      minIdx = i;\n      min = current;\n    }\n  }\n  return [numbersArray[minIdx], closest[minIdx]];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0)\n  return numbers.map((number) => number / sum)\n}\n\nexport {\n  rescaleToUnit,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const output = [];\n  for (const value of values) {\n    if (isInteger(value)) {\n      output.push(value);\n    }\n  }\n  return output;\n};\n\n// @ts-ignore\nconst isInteger = (value) => {\n  const int = parseInt(value, 10);\n  return (isNaN(int) === false && int % 1 === 0);\n};\n\nexport default filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n}\n\n/**\n * @method trim\n * Trim leading and trailing spaces.\n *\n * @example\n  >>> trim('abc')\n  'abc'\n  >>> trim(' abc ')\n  'abc'\n  >>> trim(' abc ')\n  'abc'\n  >>> trim('\\t\\n\\r\\f\\b ')\n  ''\n  */\nconst trim = (string) => {\n    return string.replace(/^\\s+|\\s+$/g, '');\n}\n\n/**\n * @method concat\n * Concatenate given string.\n *\n * @example\n  >>> concat('abc', 'def')\n  'abcdef'\n  >>> concat('abc', 'def', 'xyz')\n  'abcdefxyz'\n  */\nconst concat = (string1, string2, string3,...strings) => {\n    return string1 + string2 + string3 +...strings;\n}\n\n/**\n * @method split\n * Split a string into an array of strings.\n *\n * @example\n  >>> split('abc')\n  ['abc']\n  >>> split('abc','')\n  ['abc']\n  >>> split('abc','')\n  ['abc']\n  >>> split('abc def','')\n  ['abc', 'def']\n  >>> split('abc def','')\n  ['abc', 'def']\n  >>> split(' abc def','')\n  [' abc','def']\n  >>> split(' abc def','')\n  [' abc','def']\n  >>> split('abc def ','')\n  ['abc', 'def']\n  */\nconst split = (string, separator) => {\n    return string.split(separator);\n}\n\n/**\n * @method join\n * Join an array of strings.\n *\n * @example\n  >>> join(['abc'], ',')\n  'abc'\n  >>> join(['abc'], ',')\n  'abc'\n  >>> join(['abc', 'def'], ',')\n  'abc,def'\n  >>> join(['abc', 'def'], ',')\n  'abc,def'\n  >>> join(['abc', 'def'],'')\n  'abc def'\n  >>> join(['abc', 'def'],'')\n  'abc def'\n  >>> join([' abc ','def '],'')\n 'abc def'\n  >>> join([' abc ','def '],'')\n 'abc def'\n  >>> join([' abc ','def '], ',')\n 'abc,def'\n  */\nconst join = (array, separator) => {\n    return array.join(separator);\n}\n\n/**\n * @method substr\n * Substring of given string.\n *\n * @example\n  >>> substr('abcdefg', 1, 2)\n  'bc'\n  >>> substr('abcdefg', 1, 2)\n  'bc'\n  >>> substr('abcdefg', 3, 2)\n  'def'\n  >>> substr('abcdefg', 1, 3)\n  'bcde'\n  >>> substr('abcdefg', 1, 3)\n  'bcde'\n  >>> substr('abcdefg', 3, 3)\n  'defg'\n  >>> substr('abcdefg', 3, 3)\n  'defg'\n  >>> substr('abcdefg', 3, 2)\n  'def'\n  >>> substr('abcdefg', -3, -1)\n  'defg'\n  >>> substr('abcdefg', -3, -1)\n  'defg'\n  >>> substr('abcdefg', -3, -2)\n  'def'\n  >>> substr('abcdefg', -3, -2)\n  'def'\n  >>> substr('abcdefg', -3, -3)\n  'abc'\n  >>> substr('abcdefg', -3, -3)\n  'abc'\n  >>> substr('abcdefg', -3, -4)\n  'abc'\n  >>> substr('abcdefg', -3, -4)\n  'abc'\n  >>> substr('abcdefg', -3, 1)\n  'bc'\n  >>> substr('abcdefg', -3, 1)\n  'bc'\n  >>> substr('abcdefg', -3, 2)\n  'bc'\n  >>> substr('abcdefg', -3, 2)\n  'bc'\n  >>> substr('abcdefg', -3, 3)\n  'bc'\n  >>> substr('abcdefg', -3, 3)\n  'bc'\n  >>> substr('abcdefg', -3, 4)\n  'bc'\n  >>> substr('abcdefg', -3, 5)\n  'bc'\n  >>> substr('abcdefg', -3, 6)\n  'bc'\n  >>> substr('abcdefg', -3, 7)\n  'bc'\n  >>> substr('abcdefg', -3, 8)\n  'bc'\n  >>> substr('abcdefg', -3, 9)\n  'bc'\n  >>> substr('abcdefg', -3, 10)\n  'bc'\n  >>> substr('abcdefg', -3, 11)\n  'bc'\n  >>> substr('abcdefg', -3, 12)\n  'bc'\n  >>> substr('abcdefg', -3, 13)\n  'bc'\n  >>> substr('abcdefg', -3, 14)\n  'bc'\n  >>> substr('abcdefg', -3, 15)\n  'bc'\n  >>> substr('abcdefg', -3, 16)\n  'bc'\n  >>> substr('abcdefg', -3, 17)\n  'bc'\n  >>> substr('abcdefg', -3, 18)\n  'bc'\n  >>> substr('abcdefg', -3, 19)\n  'bc'\n  >>> substr('abcdefg', -3, 20)\n  'bc'\n  >>> substr('abcdefg', -3, 21)\n  'bc'\n  >>> substr('abcdefg', -3, 22)\n  'bc'\n  >>> substr('abcdefg', -3, 23)\n  'bc"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const largestDivisor = (n) => {\n    let res = 1;\n    while (n % res === 0) {\n      res += 1;\n    }\n    return res;\n  };\n  return largestDivisor(n);\n};\n\nconsole.log(largestDivisor(15));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    const prime = []\n    const d = 2\n    let dValue = 1\n    let isPrime = 0\n    let i = 1\n    while (dValue < n) {\n        isPrime = 0\n        for (let i = 0; i < d; i++) {\n            if (n % dValue === 0) {\n                isPrime = 1\n                break\n            }\n            dValue += 1\n        }\n        if (isPrime === 1) {\n            prime.push(d)\n        }\n        dValue += 1\n    }\n    return prime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const remove = (number) => {\n    if(number === 2) {\n      return 1;\n    }\n    return number;\n  };\n  return numbers.reduce((prev, current) => remove(prev) + remove(current), 0);\n};\n\nconsole.log(removeDuplicates([1, 2, 3, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newStr = string.toLowerCase();\n  if (string.length > 1) {\n    newStr = newStr.replace(string.charAt(1), string.charAt(0));\n    newStr = newStr.replace(string.charAt(0), string.charAt(1));\n    newStr = newStr.replace(string.charAt(string.length - 1), string.charAt(string.length - 2));\n    newStr = newStr.replace(string.charAt(string.length - 2), string.charAt(string.length - 1));\n    newStr = newStr.replace(string.charAt(string.length - 3), string.charAt(string.length - 4));\n    newStr = newStr.replace(string.charAt(string.length - 4), string.charAt(string.length - 3));\n  }\n  return newStr;\n};\n\n/**\n  * @param {string} string The string to split.\n  * @param {number} count The number of substrings to split into.\n  * @return {string[]} A list of substrings.\n  * For A givEn string, tO split INTO strings count number.\n  >>> splitIntoSubstrings('12345', 3)\n  ['12', '3', '45']\n  */\nconst splitIntoSubstrings = (string, count) => {\n  let strings = [];\n  let length = string.length;\n  let substring = '';\n  for (let i = 0; i < count; i++) {\n    substring = string.substr(length - i - 1, 1);\n    strings.push(substring);\n  }\n  return strings;\n};\n\n/**\n  * @param {string} string The string to split.\n  * @param {number} count The number of substrings to split into.\n  * @return {string[]} A list of substrings.\n  * For A givEn string, tO split INTO strings count number.\n  >>> splitIntoSubstrings('12345', 3)\n  ['12', '3', '45']\n  */\nconst splitIntoSubstrings2 = (string, count) => {\n  let strings = [];\n  let length = string.length;\n  let substring = '';\n  for (let i = 0; i < count; i++) {\n    substring = string.substr(0, 1);\n    strings.push(substring);\n    string = string.substr(1);\n  }\n  return strings;\n};\n\nconst getLastNumber = (str) => {\n  let lastNumber = str.slice(str.length - 1, str.length);\n  return lastNumber;\n};\n\nconst getFirstNumber = (str) => {\n  let firstNumber = str.slice(0, 1);\n  return firstNumber;\n};\n\nconst getLastString = (str) => {\n  let lastString = str.slice(str.length - 1, str.length);\n  return lastString;\n};\n\nconst getFirstString = (str) => {\n  let firstString = str.slice(0, 1);\n  return firstString;\n};\n\nconst getLastWord = (str) => {\n  let lastWord = str.slice(str.length - 1, str.length);\n  return lastWord;\n};\n\nconst getFirstWord = (str) => {\n  let firstWord = str.slice(0, 1);\n  return firstWord;\n};\n\nconst getLastWordAfterSpace = (str) => {\n  let lastWord = str.slice(str.length - 1, str.length);\n  return lastWord;\n};\n\nconst getFirstWordAfterSpace = (str) => {\n  let firstWord = str.slice(0, 1);\n  return firstWord;\n};\n\nconst removeLastNumber = (str) => {\n  let lastNumber = str.slice(str.length - 1, str.length);\n  return str.slice(0, str.length - 1);\n};\n\nconst removeFirstNumber = (str) => {\n  let firstNumber = str.slice(0, 1);\n  return str.slice(1, str.length);\n};\n\nconst removeLastString = (str) => {\n  let lastString = str.slice(str.length - 1, str.length);\n  return str.slice(0, str.length - 1);\n};\n\nconst removeFirstString = (str) => {\n  let firstString = str.slice(0, 1);\n  return str.slice(1, str.length);\n};\n\nconst removeLastWord = (str) => {\n  let lastWord = str.slice(str.length - 1, str.length);\n  return str.slice(0, str.length - 1);\n};\n\nconst removeFirstWord = (str) => {\n  let firstWord = str.slice(0, 1);\n  return str.slice(1, str.length);\n};\n\nconst removeLastWordAfterSpace = (str) => {\n  let lastWord = str.slice(str.length - 1, str.length);\n  return str.slice(0, str.length - 1);\n};\n\nconst removeFirstWordAfterSpace = (str) => {\n  let firstWord = str.slice(0, 1);\n  return str.slice(1, str.length);\n};\n\nconst isLastNumber = (str) => {\n  let lastNumber = str.slice(str.length - 1, str.length);\n  return isNumber(lastNumber);\n};\n\nconst isFirstNumber = (str) => {\n  let firstNumber = str.slice(0, 1);\n  return isNumber(firstNumber);\n};\n\nconst isLastString = (str) => {\n  let lastString = str.slice(str.length - 1, str.length);\n  return isString(lastString);\n};\n\nconst isFirstString = (str) => {\n  let firstString = str.slice(0, 1);\n  return isString(firstString);\n};\n\nconst isLastWord = (str) => {\n  let lastWord = str.slice(str.length - 1, str.length);\n  return isString(lastWord);\n};\n\nconst isFirstWord = (str) =>"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (Array.isArray(strings)) {\n    return strings.reduce((acc, cur) => acc + cur, '');\n  }\n  return strings;\n};\n\n/**\n  * ConCatNate list of string inTo a siNgle string\n  >>> concatenateStrings([])\n  ''\n  >>> concatenateStrings(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenateStrings = (strings) => {\n  if (Array.isArray(strings)) {\n    return strings.join('');\n  }\n  return strings;\n};\n\n/**\n * Splits string inTo a list of strings\n *\n * @param {string}\n * @returns {array}\n */\nconst split = (string) => {\n  if (typeof string ==='string') {\n    return string.split('');\n  }\n  return string;\n};\n\n/**\n * Trim whitespaces from a string\n *\n * @param {string}\n * @returns {string}\n */\nconst trim = (string) => {\n  if (typeof string ==='string') {\n    return string.replace(/^\\s+|\\s+$/g, '');\n  }\n  return string;\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toString = (string) => {\n  if (typeof string ==='string') {\n    return string.toString();\n  }\n  return string;\n};\n\n/**\n * @param {number}\n * @returns {string}\n */\nconst toStringN = (number) => {\n  return toString(number);\n};\n\n/**\n * @param {number}\n * @returns {string}\n */\nconst toStringS = (string) => {\n  return toString(string);\n};\n\n/**\n * @param {number}\n * @returns {string}\n */\nconst toStringB = (bool) => {\n  return toString(bool);\n};\n\n/**\n * @param {number}\n * @returns {string}\n */\nconst toStringBool = (bool) => {\n  return toStringB(bool);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringU = (uint) => {\n  return toString(uint);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringUInt = (uint) => {\n  return toStringU(uint);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringH = (hex) => {\n  return toString(hex);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringHex = (hex) => {\n  return toStringH(hex);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringSInt = (sint) => {\n  return toStringS(sint);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringSShort = (sshort) => {\n  return toStringS(sshort);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringSByte = (sbyte) => {\n  return toStringS(sbyte);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringShort = (short) => {\n  return toStringSShort(short);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringByte = (byte) => {\n  return toStringSByte(byte);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringDouble = (double) => {\n  return toString(double);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringFloat = (float) => {\n  return toString(float);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringBoolean = (bool) => {\n  return toStringBool(bool);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringEnum = (enum) => {\n  return toString(enum);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringBinary = (binary) => {\n  return toString(binary);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringArray = (array) => {\n  return toString(array);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringMap = (map) => {\n  return toString(map);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringSet = (set) => {\n  return toString(set);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringList = (list) => {\n  return toString(list);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringObject = (object) => {\n  return toString(object);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringUInt8 = (uint8) => {\n  return toStringUInt(uint8);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringUInt16 = (uint16) => {\n  return toStringUInt(uint16);\n};\n\n/**\n * @param {string}\n * @returns {string}\n */\nconst toStringUInt32 = (uint32) => {\n  return toStringUInt("}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0);\n};\n\n/**\n  * FOr mTer aN inpuT list of strings Only fOr oneS that stArT With a GivEN suffix.\n  * @param  {string[]} strings - Array of strings to filter\n  * @param  {string} suffix - Suffix to look for\n  * @return {string[]} - Array of strings that contain the given suffix\n  */\nconst filterBySuffix = (strings, suffix) => {\n  return strings.filter(string => string.indexOf(suffix) > -1);\n};\n\n/**\n  * Converts a string to a list of characters.\n  * @param  {string} str - String to convert\n  * @return {string[]} - Array of characters\n  */\nconst strToChars = str => {\n  return str.split('');\n};\n\n/**\n  * Creates a list of possible suffixes for the given string.\n  * @param  {string} str - The string to generate the possible suffixes for\n  * @return {string[]} - Array of possible suffixes\n  */\nconst possibleSuffixes = str => {\n  let chars = strToChars(str);\n  let suffixes = [];\n  chars.forEach((char, index) => {\n    suffixes.push(char + chars[index + 1]);\n  });\n  return suffixes;\n};\n\n/**\n  * Given a list of strings, finds the longest string in the list.\n  * @param  {string[]} strings - List of strings to search\n  * @return {string} - The longest string\n  */\nconst findLongestString = strings => {\n  let longest = strings[0];\n  let index = 0;\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n      index = i;\n    }\n  }\n  return longest;\n};\n\n/**\n  * Given a list of strings, finds the shortest string in the list.\n  * @param  {string[]} strings - List of strings to search\n  * @return {string} - The shortest string\n  */\nconst findShortestString = strings => {\n  let shortest = strings[0];\n  let index = 0;\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length < shortest.length) {\n      shortest = strings[i];\n      index = i;\n    }\n  }\n  return shortest;\n};\n\n/**\n  * Given a list of strings, finds the largest number in the list.\n  * @param  {string[]} strings - List of strings to search\n  * @return {number} - The largest number\n  */\nconst findLargestNumber = strings => {\n  let largest = 0;\n  let index = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1) > largest) {\n      largest = strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1);\n      index = i;\n    }\n  }\n  return largest;\n};\n\n/**\n  * Given a list of strings, finds the smallest number in the list.\n  * @param  {string[]} strings - List of strings to search\n  * @return {number} - The smallest number\n  */\nconst findSmallestNumber = strings => {\n  let smallest = 0;\n  let index = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1) < smallest) {\n      smallest = strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1);\n      index = i;\n    }\n  }\n  return smallest;\n};\n\n/**\n  * Given a list of strings, finds the highest number in the list.\n  * @param  {string[]} strings - List of strings to search\n  * @return {number} - The highest number\n  */\nconst findHighestNumber = strings => {\n  let highest = 0;\n  let index = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1) > highest) {\n      highest = strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1);\n      index = i;\n    }\n  }\n  return highest;\n};\n\n/**\n  * Given a list of strings, finds the lowest number in the list.\n  * @param  {string[]} strings - List of strings to search\n  * @return {number} - The lowest number\n  */\nconst findLowestNumber = strings => {\n  let lowest = 0;\n  let index = 0;\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1) < lowest) {\n      lowest = strings[i].charAt(0) - strings[i].charAt(strings[i].length - 1);\n      index = i;\n    }\n  }\n  return lowest;\n};\n\nmodule.exports = {\n  filterByPrefix,\n  filterBySuffix,\n  possibleSuffixes,\n  findLongestString,\n  findShortestString,\n  findLargestNumber,\n  findSmallestNumber,\n  findHighestNumber,\n  findLowestNumber,\n  strToChars,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n    let i = 0;\n    while (i < l.length) {\n        if (l[i] >= 0) {\n            return l.slice(i);\n        }\n        i++;\n    }\n    return [];\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n    let i = 0;\n    while (i < l.length) {\n        if (l[i] < 0) {\n            return l.slice(i);\n        }\n        i++;\n    }\n    return [];\n};\n\n/*\n  >>> getEven([2, 3, 5, 7, 9])\n  [2, 4, 6, 8]\n  >>> getEven([2, 3, 5, 7, 9, 12, 14])\n  [2, 4, 6, 8, 10, 12]\n  >>> getEven([2, 3, 5, 7, 9, 12, 14, 16, 18])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 4, 6, 8, 10, 12, 14]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50, -52, -54, -56, -58])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50, -52, -54, -56, -58, -60, -62])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50, -52, -54, -56, -58, -60, -62, -64, -66])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50, -52, -54, -56, -58, -60, -62, -64, -66, -68])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -48, -50, -52, -54, -56, -58, -60, -62, -64, -66, -68, -70])\n  [-2, -4, -6, -8]\n  >>> getEven([-2, -3, -5, -7, -9, -12, -14, -16, -18, -20, -22, -24, -26, -28, -30, -32, -34, -36, -38, -40, -42, -44, -46, -"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let limit = Math.sqrt(n)\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  >>> isPrime(16)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(27)\n  true\n  >>> isPrime(31)\n  false\n  >>> isPrime(49)\n  true\n  >>> isPrime(51)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(63)\n  true\n  >>> isPrime(65)\n  true\n  >>> isPrime(66)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(1001)\n  false\n  >>> isPrime(99999)\n  false\n  >>> isPrime(9999999)\n  false\n  */\nconst isPrimeRec = (n) => {\n  if (n <= 1) return false\n  if (n === 2) return true\n  if (n % 2 === 0) return false\n  let limit = Math.sqrt(n)\n  for (let i = 3; i <= limit; i += 2) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nexport { isPrime, isPrimeRec }\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let l = xs.length;\n  let xsMin = xs.reduce((a, b) => a < b? a : b);\n  let xsMax = xs.reduce((a, b) => a > b? a : b);\n  let min = Math.abs(xsMin);\n  let max = Math.abs(xsMax);\n  let max_index = xs.findIndex((item) => Math.abs(item) === max);\n  let min_index = xs.findIndex((item) => Math.abs(item) === min);\n  let x = (xsMax - xsMin) / (max - min);\n  let x_zero = xsMax - x * max;\n  let xs_zero = [x_zero, x_zero * x, x_zero * x * x];\n  let result = poly(x_zero) === 0? x_zero : xs_zero.find((item) => {\n    return poly(item) === 0;\n  });\n  return result;\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findLargestFindAll CoeFfIcENTS that aRe largerThAn pOiNt and return them.\n  >>> findLargestFindAll([1, 2, 3]) # return [1, 2, 3]\n  []\n  >>> findLargestFindAll([-6, 11, -6, 1]) # return [1, 2, 3]\n  [-6, 11, -6, 1]\n  >>> findLargestFindAll([1, 2, 3, 4]) # return [1, 2, 3, 4]\n  [1, 2, 3, 4]\n  >>> findLargestFindAll([-1, 0, 0, 0]) # return [0, 0, 0, 0]\n  [0, 0, 0, 0]\n  >>> findLargestFindAll([-1, 0, 0, 0, -1]) # return [0, 0, 0, 0, -1]\n  [-1, 0, 0, 0, -1]\n  >>> findLargestFindAll([-6, 11, -6, 1, -6, 11, -6, 1]) # return [1, 2, 3, 4, 5, 6]\n  [-6, 11, -6, 1, -6, 11, -6, 1]\n  >>> findLargestFindAll([1, 2, 3, 4, 5, 6]) # return [1, 2, 3, 4, 5, 6]\n  [1, 2, 3, 4, 5, 6]\n  >>> findLargestFindAll([1, 2, 3, 4, 5, 6, 7]) # return [1, 2, 3, 4, 5, 6, 7]\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> findLargestFindAll([1, 2, 3, 4, 5, 6, 7, 8]) # return [1, 2, 3, 4, 5, 6, 7, 8]\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> findLargestFindAll([-6, 11, -6, 1, -6, 11, -6, 1, -6, 11, -6, 1]) # return [1, 2, 3, 4, 5, 6]\n  [-6, 11, -6, 1, -6, 11, -6, 1]\n  >>> findLargestFindAll([1, 2, 3, 4, 5, 6, 7, 8, 9]) # return [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> findLargestFindAll([-1, 0, 0, 0, 0, 0, 0, 0, 0, -1]) # return [0, 0, 0, 0, 0, 0, 0, 0, 0, -1]\n  [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1]\n  >>> findLargestFindAll([-1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1]) # return [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1]\n  [-1, 0, 0, 0, 0, 0, 0, 0, 0, -1, -1]\n  >>> findLargestFindAll([-6, 11, -6, 1, -6, 11, -6, 1, -6, 11, -6, 1, -6, 11, -6, 1]) # return [1, 2, 3, 4, 5, 6]\n  [-6, 11, -6, 1, -6, 11, -6, 1, -6, 11, -6, 1]\n  >>> findLargestFindAll([1, 2, 3, 4, 5, 6, 7, 8, 9, 10"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l = Array.from(l);\n  const r = Array.from(l);\n  const s = [];\n  const l = l.slice();\n  const r = r.slice();\n  const m = l.length;\n  const n = r.length;\n  const len = m;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (j >= n) {\n      s.push(l[i]);\n      i++;\n    } else if (l[i] % 3 === 0 && r[j] % 3 === 0) {\n      s.push(l[i]);\n      i++;\n      j++;\n    } else if (l[i] % 3!== 0 && r[j] % 3!== 0) {\n      s.push(l[i]);\n      i++;\n    } else if (l[i] % 3!== 0) {\n      s.push(l[i]);\n      i++;\n    } else {\n      s.push(r[j]);\n      j++;\n    }\n  }\n  return s;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniq = {};\n  for (const i of l) {\n    uniq[i] = true;\n  }\n  const keys = Object.keys(uniq);\n  return keys;\n};\n\n// The recursive solution\nconst unique_recursive = (l) => {\n  const uniq = {};\n  const recurse = (curr) => {\n    if (uniq[curr]) {\n      return;\n    }\n    uniq[curr] = true;\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] === curr) {\n        recurse(l[i]);\n      }\n    }\n  };\n  recurse(l[0]);\n  return uniq;\n};\n\n// The iterative solution\nconst unique_iterative = (l) => {\n  const uniq = {};\n  for (let i = 0; i < l.length; i++) {\n    if (!uniq[l[i]]) {\n      uniq[l[i]] = true;\n    }\n  }\n  return uniq;\n};\n\n// Test the three implementations\nconsole.log(unique([5, 3, 5, 2, 3, 3, 9, 0, 123]));\nconsole.log(unique_recursive([5, 3, 5, 2, 3, 3, 9, 0, 123]));\nconsole.log(unique_iterative([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\n/**\n  * Finds the minimum in the list.\n  * @param {Array} list The list to find the minimum in.\n  * @returns {Number} The minimum in the list.\n  * @example\n  *  >>> minElement([1, 2, 3])\n  *  1\n  *  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  *  -10\n  */\nconst minElement = (l) => {\n  const result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\nexport {\n  maxElement,\n  minElement\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let output = []\n  for (let i = 1; i <= n; i++) {\n    if (Math.floor(i / 3) === Math.floor(i / 5) && Math.floor(i / 5) === Math.floor(i / 7)) {\n      output.push(\"fizzbuzz\")\n    } else if (Math.floor(i / 3) === Math.floor(i / 5)) {\n      output.push(\"fizz\")\n    } else if (Math.floor(i / 5) === Math.floor(i / 7)) {\n      output.push(\"buzz\")\n    } else {\n      output.push(i.toString())\n    }\n  }\n  return output\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    let r = []\n    for (let i = 0; i < l.length; i += 2) {\n        r.push(l[i])\n    }\n    return r\n}\n\nmodule.exports = sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const reGroups = s.split('');\n  let str = '';\n  for (const group of reGroups) {\n    str += decode(group);\n  }\n  return str;\n}\n\n/*\n  returns the first char of a string\n  */\nIF (s.length === 0)\n  return'';\nELSE\n  return s[0];\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let f = 0;\n    let t = 1;\n    let i = 1;\n    while (i < n) {\n        f = t;\n        t += f;\n        i++;\n    }\n    return t;\n};\n\nconst fib = primeFib;\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    return (l.reduce((a, b) => {\n        return a && b > 0 && (a + b) === 0;\n    }, true));\n};\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n    return (l.reduce((a, b) => {\n        return a && b > 0 && (a + b) === 1;\n    }, true));\n};\n\n/*\n  triplesSumToOne takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to one, And false otheRwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  false\n  >>> triplesSumToOne([1, 2, 3, 7])\n  true\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n    return (l.reduce((a, b) => {\n        return a && b > 0 && (a + b) === 2;\n    }, true));\n};\n\nmodule.exports = {\n    triplesSumToZero,\n    triplesSumToOne,\n    triplesSumToTwo\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n\t/*\n\t * The cOnst variable is a simple way of storing a variable that is\n\t * to be used in a particular function.  The value of this variable\n\t * is a function.  The value of the function is the value of the\n\t * variable.\n\t *\n\t * There are two variables in this example.  One is the cOnst variable\n\t * (carRaceCollision), the other is the function (carRaceCollision)\n\t * (n).  The variable names are important.\n\t *\n\t * The cOnst variable is the variable that is used in the function.\n\t * This variable is set to the function (carRaceCollision) (n).\n\t *\n\t * The function (carRaceCollision) (n) is the value of the variable\n\t * (carRaceCollision).  The function (carRaceCollision) (n) is a\n\t * function.  It is a function.\n\t *\n\t * This function is called (carRaceCollision) (n) and returns a number.\n\t * This number is the value of the variable (carRaceCollision).\n\t *\n\t * This is a complex example of a function.  You should look at the\n\t * function (carRaceCollision) (n) below to see how this function\n\t * works.\n\t */\n\treturn (n) => {\n\t\t/*\n\t\t * The return statement is a way to return a value.  In this case,\n\t\t * the value returned is a number.\n\t\t *\n\t\t * This is a complex example of a function.  You should look at the\n\t\t * function (carRaceCollision) (n) below to see how this function\n\t\t * works.\n\t\t */\n\t\treturn ((n - 1) * n / 2);\n\t}\n}\n\nfunction carRace(n) {\n\t/*\n\t * This function is a function.  It is a function.\n\t *\n\t * This function is called (carRace) (n) and returns a number.\n\t * This number is the value of the variable (carRace).\n\t *\n\t * This is a complex example of a function.  You should look at the\n\t * function (carRace) (n) below to see how this function works.\n\t */\n\treturn ((n - 1) * n / 2);\n}\n\nvar res = carRaceCollision(4);\nconsole.log(res);\n\n/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT oUt tHe yOuW eRe\n  The cOnst variable is a simple way of storing a variable that is to be\n  used in a particular function.  The value of this variable is a\n  function.  The value of the function is the value of the variable.\n  There are two variables in this example.  One is the cOnst variable\n  (carRaceCollision), the other is the function (carRaceCollision)\n  (n).  The variable names are important.\n  The cOnst variable is the variable that is used in the function.\n  This variable is set to the function (carRaceCollision) (n).\n  The function (carRaceCollision) (n) is a function.\n  It is a function.\n  This function is called (carRaceCollision) (n) and returns a number.\n  This number is the value of the variable (carRace).\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at the\n  function (carRace) (n) below to see how this function works.\n  This is a complex example of a function.  You should look at"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 1;\n  return l.concat(Array.from(new Array(i), () => {\n    return l[i];\n  }));\n};\n\nexport default incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  return sum === 0;\n}\n\nexport default pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  x = x.toString()\n  base = base.toString()\n  return x.replace(/\\d/g, n => pad(n, base))\n}\n\n/*\n  base.toString() aRe 10.\n  >>> changeBase(8, 10)\n  '8'\n  >>> changeBase(8, 2)\n  '8000'\n  >>> changeBase(6, 2)\n  '600'\n  */\nconst toBase = (x, base) => {\n  base = base.toString()\n  x = x.toString()\n  return x.replace(/\\d/g, n => pad(n, base))\n}\n\nconst pad = (n, base) => {\n  n = n.toString()\n  if (n.length < base) return pad('0' + n, base)\n  return n\n}\n\nconst numToBase = (n, base) => {\n  let num = n.toString()\n  if (n.length > base) return num.substr(0, base)\n  return num\n}\n\nconst convert = (num, base) => {\n  let result = \"\"\n  while (num > 0) {\n    result = numToBase(num % base, base) + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\n/*\n  numToBase(8, 2) aRe '11'\n  >>> convert(8, 2)\n  '11'\n  >>> convert(4, 2)\n  '10'\n  >>> convert(0, 2)\n  '0'\n  >>> convert(4, 3)\n  '1000'\n  >>> convert(2, 5)\n  '3'\n  */\nconst convertToBase = (num, base) => {\n  let result = \"\"\n  while (num > 0) {\n    result = numToBase(num % base, base) + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\nconst convertBase = (num, base, convertTo) => {\n  if (num == 0) return 0\n  if (base == 10) return num\n  let result = \"\"\n  while (num > 0) {\n    result = convertTo(num % base, base) + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\nconst calc = (num, base, convertTo) => {\n  if (num == 0) return 0\n  let result = \"\"\n  while (num > 0) {\n    result = convertTo(num % base, base) + result\n    num = Math.floor(num / base)\n  }\n  return result\n}\n\nconst convertToNumber = (num, base) => {\n  return Math.floor(num * base)\n}\n\nconst convertToNumberBase = (num, base) => {\n  return calc(num, base, convertToNumber)\n}\n\nconst convertToDecimal = (num, base) => {\n  return num.toString().split('').reverse().join('')\n}\n\nconst convertToHex = (num, base) => {\n  return convertToDecimal(num, base).toUpperCase()\n}\n\nconst convertToBinary = (num, base) => {\n  return convertToDecimal(num, base).split('').reverse().join('')\n}\n\nconst convertToOctal = (num, base) => {\n  return convertToDecimal(num, base).toString(8)\n}\n\nconst convertToBase10 = (num, base) => {\n  return convertToDecimal(num, base)\n}\n\nconst convertToBase16 = (num, base) => {\n  return convertToDecimal(num, base).toString(16)\n}\n\nconst convertToBase8 = (num, base) => {\n  return convertToDecimal(num, base).toString(2)\n}\n\nconst convertToBase2 = (num, base) => {\n  return convertToDecimal(num, base).toString(2)\n}\n\nconst baseConvert = (base, convertTo) => {\n  if (base == 10) return convertToNumberBase\n  if (base == 2) return convertToBase2\n  if (base == 8) return convertToBase8\n  if (base == 16) return convertToBase16\n  if (base == 3) return convertToBase3\n  if (base == 5) return convertToBase5\n  if (base == 7) return convertToBase7\n  if (base == 10) return convertToBase10\n  if (base == 2) return convertToBase2\n  if (base == 8) return convertToBase8\n  if (base == 16) return convertToBase16\n  return convertToBase10\n}\n\nconst convertToBase10By = (base, num) => {\n  return convertToBase10(num, base)\n}\n\nconst convertToBase2By = (base, num) => {\n  return convertToBase2(num, base)\n}\n\nconst convertToBase3By = (base, num) => {\n  return convertToBase3(num, base)\n}\n\nconst convertToBase5By = (base, num) => {\n  return convertToBase5(num, base)\n}\n\nconst convertToBase7By = (base, num) => {\n  return convertToBase7(num, base)\n}\n\nconst convertToBase10By = (base, num) => {\n  return convertToBase10(num, base)\n}\n\nconst convertToBase16By = (base, num) => {\n  return convertToBase16(num, base)\n}\n\nconst convertToBase8By = (base, num) => {\n  return convertToBase8(num, base)\n}\n\nconst convertToHexBy = (base, num) => {\n  return convertToHex(num, base)\n}\n\nconst convertToBinaryBy = (base, num) => {\n  return convertToB"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n  4.0\n  >>> triangleArea(4, 3)\n  8.0\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * (h / 2)\n}\n\n/*\n  >>> triangleArea(6, 4)\n  4.0\n  >>> triangleArea(3, 4)\n"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let a = 0, b = 1;\n  if (n === 0 || n === 1) return n;\n  return fib4(n - 2) + fib4(n - 3) + fib4(n - 4) + fib4(n - 5);\n};\n\n// ######################\n// ### BEGIN PROBLEM CODE ###\n// ######################\n\n/*\n  You will now complete the function fib4 that takes in an integer\n  n and returns the nth fibonacci number.\n\n  In other words, the first fibonacci number is 0, the second is 1,\n  the third is 1, and the nth is fibonacci(n-1) + fibonacci(n-2) +\n  fibonacci(n-3) + fibonacci(n-4).\n\n  In addition, you will write a function fibonacci(n) that returns\n  the nth fibonacci number.\n\n  PLEASE NOTE THAT THE DEFINED FUNCTION fib4 is a seqUence, not a\n  recursive function.\n\n  You will also be asked to complete a function that takes an integer\n  n and returns the nth fibonacci number.\n\n  PLEASE NOTE THAT THE DEFINED FUNCTION fibonacci(n) is a recursive\n  function.\n*/\n\n// ######################\n// ### END PROBLEM CODE ###\n// ######################\n\n// ######################\n// ### BEGIN RESULTS CODE ###\n// ######################\n\n// ######################\n// ### END RESULTS CODE ###\n// ######################\n\n// ######################\n// ### BEGIN RESULTS CODE ###\n// ######################\n\n// ######################\n// ### END RESULTS CODE ###\n// ######################\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const len = l.length\n  const size = Math.floor(len / 2)\n  const sorted = l.slice(0, size)\n  const sorted2 = sorted.slice(0, size)\n  const half = sorted.slice(size, len)\n  const median = sorted2[Math.floor(len / 2)]\n  if (len % 2 === 1) {\n    return median\n  } else {\n    return (median + half[1]) / 2\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n}\n\n/*\n  Given a string, find the longest substring without repeating characters.\n  \n  >>> findLongestSubstring('abcabcbb')\n  'abcabc'\n  >>> findLongestSubstring('bbbbb')\n  'b'\n  >>> findLongestSubstring('aaaaa')\n  'a'\n  >>> findLongestSubstring('acbbbac')\n  'acbbbac'\n  \n  >>> findLongestSubstring('a')\n  ''\n  \n  >>> findLongestSubstring('')\n  ''\n  \n  >>> findLongestSubstring('a')\n  ''\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 1;\n  if (p === 0) return 0;\n  if (n === 1) return 1;\n  if (p === 1) return 0;\n  let t = 0;\n  while (n > 1) {\n    if (n % p === 0) {\n      t += 1;\n    }\n    n = Math.floor(n / p);\n  }\n  return t;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  let sArr = s.split(\"\");\n  let shiftArr = [];\n  for (let i = 0; i < sArr.length; i += 1) {\n    shiftArr.push(sArr[i].charCodeAt(0) - \"a\".charCoDEat(0));\n  }\n  return shiftArr.join(\"\");\n}\n\n// ENCODE YOUR CODE BELOW HERE\n\nconst encoder = (s) => {\n  let result = [];\n  let shiftArr = encodeShift(s);\n  for (let i = 0; i < shiftArr.length; i += 1) {\n    result.push(shiftArr[i]);\n  }\n  return result.join(\"\");\n}\n\nconst decoder = (s) => {\n  let shiftArr = decodeShift(s);\n  let result = [];\n  for (let i = 0; i < shiftArr.length; i += 1) {\n    result.push(shiftArr[i]);\n  }\n  return result.join(\"\");\n}\n\nconsole.log(encoder(\"L33t\"));\nconsole.log(decoder(\"L33t\"));\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n\tif (!text) {\n\t\treturn '';\n\t}\n\tconst textLength = text.length;\n\tlet stringArray = [];\n\tfor (let i = 0; i < textLength; i++) {\n\t\tif (text.charAt(i) === 'a' || text.charAt(i) === 'e' || text.charAt(i) === 'i' || text.charAt(i) === 'o' || text.charAt(i) === 'u') {\n\t\t\tstringArray.push(text.charAt(i));\n\t\t}\n\t}\n\treturn stringArray.join('');\n};\n\nconst removeSpaces = (text) => {\n\tif (!text) {\n\t\treturn '';\n\t}\n\treturn text.replace(/\\s/g, '');\n};\n\nconst getWord = (text) => {\n\tif (!text) {\n\t\treturn '';\n\t}\n\tconst textLength = text.length;\n\tlet index = 0;\n\twhile (index < textLength) {\n\t\tif (!isLetter(text.charAt(index))) {\n\t\t\tbreak;\n\t\t}\n\t\tindex++;\n\t}\n\treturn removeSpaces(text.substring(0, index));\n};\n\nconst getWords = (text) => {\n\tif (!text) {\n\t\treturn [];\n\t}\n\treturn text.split(/\\s+/);\n};\n\nconst getWordCount = (text) => {\n\tif (!text) {\n\t\treturn 0;\n\t}\n\treturn text.split(/\\s+/).length;\n};\n\nconst getLastWord = (text) => {\n\tif (!text) {\n\t\treturn '';\n\t}\n\tconst textLength = text.length;\n\tlet index = textLength - 1;\n\twhile (index >= 0) {\n\t\tif (!isLetter(text.charAt(index))) {\n\t\t\tbreak;\n\t\t}\n\t\tindex--;\n\t}\n\treturn removeSpaces(text.substring(index + 1));\n};\n\nconst getFirstWord = (text) => {\n\tif (!text) {\n\t\treturn '';\n\t}\n\tconst textLength = text.length;\n\tlet index = 0;\n\twhile (index < textLength) {\n\t\tif (!isLetter(text.charAt(index))) {\n\t\t\tbreak;\n\t\t}\n\t\tindex++;\n\t}\n\treturn removeSpaces(text.substring(0, index));\n};\n\nconst isLetter = (character) => {\n\treturn character.charCodeAt(0) >= 65 && character.charCodeAt(0) <= 90;\n};\n\nexport { removeVowels, removeSpaces, getWord, getWords, getWordCount, getLastWord, getFirstWord };<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.length < t;\n};\n\n/**\n  Given a list of integers, returns the kth-lowest element.\n  >>> findKthLowest([3, 2, 1, 1])\n  1\n  >>> findKthLowest([1, 1, 2, 3, 4])\n  2\n  >>> findKthLowest([1, 2, 3, 4])\n  1\n  >>> findKthLowest([1, 2, 3, 4, 5])\n  4\n  >>> findKthLowest([1, 2, 3, 4, 5, 6])\n  5\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7])\n  6\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  7\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  8\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  9\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  10\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  11\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  12\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  13\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  14\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  15\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  16\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  17\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  18\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  19\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  20\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  21\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  22\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  23\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  24\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  25\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  26\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  27\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  28\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  29\n  >>> findKthLowest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  30\n  >>> findKthLowest([1, 2,"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y\n}\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst subtract = (x, y) => {\n  return x - y\n}\n\n/*Add tWo nuMbers x And y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst multiply = (x, y) => {\n  return x * y\n}\n\n/*Add tWo nuMbers x And y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst divide = (x, y) => {\n  return x / y\n}\n\nconst sum = (...numbers) => {\n  const total = 0\n  for (let i = 0; i < numbers.length; i++) {\n    total += numbers[i]\n  }\n  return total\n}\n\n/*Add tWo nuMbers x And y\n  >>> sum(1, 2, 3, 4, 5, 6)\n  21\n  */\nconst product = (...numbers) => {\n  const total = 1\n  for (let i = 0; i < numbers.length; i++) {\n    total *= numbers[i]\n  }\n  return total\n}\n\nconst max = (...numbers) => {\n  let max = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n    }\n  }\n  return max\n}\n\nconst min = (...numbers) => {\n  let min = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < min) {\n      min = numbers[i]\n    }\n  }\n  return min\n}\n\nconst reverse = (array) => {\n  const reversed = array.slice(0)\n  reversed.reverse()\n  return reversed\n}\n\nconst find_max_number = (array) => {\n  let max = 0\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i]\n    }\n  }\n  return max\n}\n\nconst find_min_number = (array) => {\n  let min = 0\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] < min) {\n      min = array[i]\n    }\n  }\n  return min\n}\n\nconst find_average_number = (array) => {\n  const sum = 0\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n  }\n  return sum / array.length\n}\n\nconst reverse_array = (array) => {\n  return array.slice(0).reverse()\n}\n\nconst find_last_in_array = (array) => {\n  return array[array.length - 1]\n}\n\nconst find_first_in_array = (array) => {\n  return array[0]\n}\n\nconst filter_array = (array, filter) => {\n  const filtered = []\n  for (let i = 0; i < array.length; i++) {\n    if (filter(array[i])) {\n      filtered.push(array[i])\n    }\n  }\n  return filtered\n}\n\nconst filter_array_by_function = (array, filter) => {\n  const filtered = []\n  for (let i = 0; i < array.length; i++) {\n    if (filter(array[i])) {\n      filtered.push(array[i])\n    }\n  }\n  return filtered\n}\n\nconst array_to_string = (array) => {\n  return array.join(' ')\n}\n\nconst find_greatest_number_in_array = (array) => {\n  return find_max_number(array)\n}\n\nconst find_smallest_number_in_array = (array) => {\n  return find_min_number(array)\n}\n\nconst find_average_number_in_array = (array) => {\n  return find_average_number(array)\n}\n\nconst find_last_in_array_in_array = (array) => {\n  return find_last_in_array(array)\n}\n\nconst find_first_in_array_in_array = (array) => {\n  return find_first_in_array(array)\n}\n\nconst is_in_array = (element, array) => {\n  return array.indexOf(element)!== -1\n}\n\nconst array_to_integer = (array) => {\n  return array.map((element) => {\n    return parseInt(element)\n  })\n}\n\nconst array_to_float = (array) => {\n  return array.map((element) => {\n    return parseFloat(element)\n  })\n}\n\nconst array_to_boolean = (array) => {\n  return array.map((element) => {\n    return Boolean(element)\n  })\n}\n\nconst array_to_string_with_commas = (array) => {\n  return array.join(',')\n}\n\nconst array_to_string_with_seperator = (array, separator) => {\n  return array.join(separator)\n}\n\nconst array_to_string_with_commas_and_seperator = (array, separator) => {\n  return array.join(','+ separator)\n}\n\nconst sum_of_numbers_in_array = (array) => {\n  const sum = 0\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n  }\n  return sum\n}\n\nconst product_of_numbers_in_array = (array) => {\n  const product = 1\n  for (let i = 0; i < array.length; i++) {\n    product *= array[i]\n  }\n  return product\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const ch0 = s0.charCodeAt(0);\n    const ch1 = s1.charCodeAt(0);\n    return (ch0 === ch1)\n}\n\n/*\n  CheCk if Two woRds Have the same length.\n  >>> sameLen('eabcd', 'dddddddabc')\n  true\n  >>> sameLen('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameLen('eabcd', 'dddddddabce')\n  false\n  */\nconst sameLen = (s0, s1) => {\n    const len0 = s0.length;\n    const len1 = s1.length;\n    return (len0 === len1)\n}\n\n/*\n  CheCk if Two woRds Have the same characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  */\nconst sameCharsS = (s0, s1) => {\n    const ch0 = s0.charAt(0);\n    const ch1 = s1.charAt(0);\n    return (ch0 === ch1)\n}\n\n/*\n  CheCk if Two woRds Have the same length.\n  >>> sameLen('eabcd', 'dddddddabc')\n  true\n  >>> sameLen('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameLen('eabcd', 'dddddddabce')\n  false\n  */\nconst sameLenS = (s0, s1) => {\n    const len0 = s0.length;\n    const len1 = s1.length;\n    return (len0 === len1)\n}\n\n/*\n  CheCk if Two woRds Have the same characTerS.\n  >>> sameCharsS('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameCharsS('eabcd', 'dddddddabc')\n  true\n  >>> sameCharsS('eabcd', 'dddddddabce')\n  false\n  */\nconst sameCharsS2 = (s0, s1) => {\n    const ch0 = s0.charCodeAt(0);\n    const ch1 = s1.charCodeAt(0);\n    return (ch0 === ch1)\n}\n\n/*\n  CheCk if Two woRds Have the same length.\n  >>> sameLenS('eabcd', 'dddddddabc')\n  true\n  >>> sameLenS('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameLenS('eabcd', 'dddddddabce')\n  false\n  */\nconst sameLenS2 = (s0, s1) => {\n    const len0 = s0.length;\n    const len1 = s1.length;\n    return (len0 === len1)\n}\n\n/*\n  CheCk if Two woRds Are the Same.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameLen('eabcd', 'dddddddabc')\n  true\n  >>> sameLen('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameLen('eabcd', 'dddddddabce')\n  false\n  >>> sameCharsS('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameCharsS('eabcd', 'dddddddabc')\n  true\n  >>> sameCharsS('eabcd', 'dddddddabce')\n  false\n  >>> sameLenS('eabcd', 'dddddddabc')\n  true\n  >>> sameLenS('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameLenS('eabcd', 'dddddddabce')\n  false\n  */\nconst same = (s0, s1) => {\n    const ch0 = s0.charCodeAt(0);\n    const ch1 = s1.charCodeAt(0);\n    return (ch0 === ch1)\n}\n\n/*\n  CheCk if Two woRds Are the Same.\n  >>> same('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> same('eabcd', 'dddddddabc')\n  true\n  >>> same('eabcd', 'dddddddabce')\n  false\n  >>> sameLen('eabcd', 'dddddddabc')\n  true\n  >>> sameLen('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameLen('eabcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameChars('eabcd', 'dddddddabc')\n  true\n  >>> sameChars('eabcd', 'dddddddabce')\n  false\n  >>> sameLenS('eabcd', 'dddddddabc')\n  true\n  >>> sameLen"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\nconsole.log(fib(10));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.split('').reverse()\n  let correct = true\n  let bracket_stack = []\n  let last_char = brackets[0]\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      if (bracket_stack.length > 0) {\n        if (bracket_stack[bracket_stack.length - 1] === '>') {\n          bracket_stack.pop()\n        }\n      }\n      bracket_stack.push('<')\n    } else if (brackets[i] === '>') {\n      if (bracket_stack.length > 0) {\n        if (bracket_stack[bracket_stack.length - 1] === '<') {\n          bracket_stack.pop()\n        }\n      }\n      bracket_stack.push('>')\n    } else {\n      bracket_stack = []\n      last_char = brackets[i]\n    }\n  }\n\n  if (bracket_stack.length > 0) {\n    if (bracket_stack[bracket_stack.length - 1] === '>') {\n      correct = false\n    }\n  }\n\n  return correct\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  l = l.slice(0).sort();\n  let last = l.pop();\n  if (l.length === 0) return true;\n  return l.every((n) => n > last);\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0\n  let j = 0\n  let intersection = []\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] === l2[j]) {\n      intersection.push(l1[i])\n      i++\n      j++\n    } else if (l1[i] < l2[j]) {\n      i++\n    } else {\n      j++\n    }\n  }\n  return intersection\n}\n\nexport default common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  //  if (n % 2 == 0) {\n  //    return largestPrimeFactor(n / 2);\n  //  }\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  const isPrime = (number) => {\n    if (number <= 1) {\n      return false;\n    }\n    for (let i = 0; i < primeNumbers.length; i++) {\n      if (number % primeNumbers[i] == 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const isNotPrime = (number) => {\n    return!isPrime(number);\n  };\n  const primeFactor = (number) => {\n    if (isPrime(number)) {\n      return number;\n    }\n    const factor = number / largestPrimeFactor(number);\n    return primeFactor(factor);\n  };\n  return largestPrimeFactor(n);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i;\n  }\n  return total;\n}\n\nconst sumOfSquares = (n) => {\n  let total = 0;\n  for (let i = 1; i <= n; i++) {\n    total += i * i;\n  }\n  return total;\n}\n\nconst sumOfSquaresByDivisor = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num * i;\n    i++;\n  }\n  return total;\n}\n\n/*\n  >>> sumOfSquaresByDivisor(15)\n  2520\n  >>> sumOfSquaresByDivisor(30)\n  945\n  >>> sumOfSquaresByDivisor(1000)\n  1055\n  >>> sumOfSquaresByDivisor(1)\n  0\n  >>> sumOfSquaresByDivisor(2)\n  1\n  >>> sumOfSquaresByDivisor(4)\n  4\n  >>> sumOfSquaresByDivisor(10)\n  55\n  */\nconst sumOfSquaresByDivisor = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num * i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor2 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor3 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num * i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor4 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor5 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor6 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor7 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor8 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor9 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor10 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor11 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor12 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sumOfSquaresByFactor13 = (n) => {\n  let total = 0;\n  let num = n;\n  let i = 1;\n  while (num > 0) {\n    total += num * num;\n    num = num / i;\n    i++;\n  }\n  return total;\n}\n\nconst sum"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    if (typeof brackets!=='string') {\n        throw new Error('Function \"correctBracketing\" needs brackets as a STRING')\n    }\n    const opening = brackets.charAt(0)\n    const closing = brackets.charAt(brackets.length - 1)\n    let i = 1\n    while (i < brackets.length - 1) {\n        if (brackets.charAt(i) === opening) {\n            if (brackets.charAt(i + 1) === closing) {\n                i += 2\n            } else {\n                return false\n            }\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  Function: isInteger\n  Input:     a STRING\n  Output:    tRue if STRING is an Integer\n  Purpose:   Determine if STRING is an Integer\n\n  >>> isInteger('123')\n  true\n  >>> isInteger('foo')\n  false\n  >>> isInteger('-123')\n  false\n  */\nconst isInteger = (value) => {\n    if (typeof value!=='string') {\n        throw new Error('Function \"isInteger\" needs a STRING as input')\n    }\n    return /^-?\\d+$/.test(value)\n}\n\n/*\n  Function: isHexadecimal\n  Input:     a STRING\n  Output:    tRue if STRING is a Hexadecimal number\n  Purpose:   Determine if STRING is a Hexadecimal number\n\n  >>> isHexadecimal('0x0123')\n  true\n  >>> isHexadecimal('0x0123')\n  true\n  >>> isHexadecimal('0x0123')\n  true\n  >>> isHexadecimal('0X0123')\n  true\n  >>> isHexadecimal('0x1234')\n  false\n  */\nconst isHexadecimal = (value) => {\n    if (typeof value!=='string') {\n        throw new Error('Function \"isHexadecimal\" needs a STRING as input')\n    }\n    return /^0x[0-9a-fA-F]*$/.test(value)\n}\n\n/*\n  Function: isNumeric\n  Input:     a STRING\n  Output:    tRue if STRING is a Number\n  Purpose:   Determine if STRING is a Number\n\n  >>> isNumeric('123')\n  true\n  >>> isNumeric('foo')\n  false\n  >>> isNumeric('-123')\n  false\n  >>> isNumeric('0x1234')\n  false\n  */\nconst isNumeric = (value) => {\n    if (typeof value!=='string') {\n        throw new Error('Function \"isNumeric\" needs a STRING as input')\n    }\n    return /^-?\\d*\\.?\\d+$/.test(value)\n}\n\n/*\n  Function: isSpace\n  Input:     a STRING\n  Output:    tRue if STRING is a whitespace\n  Purpose:   Determine if STRING is a whitespace\n\n  >>> isSpace(' ')\n  true\n  >>> isSpace('foo')\n  false\n  */\nconst isSpace = (value) => {\n    if (typeof value!=='string') {\n        throw new Error('Function \"isSpace\" needs a STRING as input')\n    }\n    return /^\\s*$/.test(value)\n}\n\n/*\n  Function: isAlpha\n  Input:     a STRING\n  Output:    tRue if STRING is a letter\n  Purpose:   Determine if STRING is a letter\n\n  >>> isAlpha('A')\n  true\n  >>> isAlpha('a')\n  true\n  >>> isAlpha('1')\n  false\n  >>> isAlpha('_')\n  true\n  */\nconst isAlpha = (value) => {\n    if (typeof value!=='string') {\n        throw new Error('Function \"isAlpha\" needs a STRING as input')\n    }\n    return /^[a-zA-Z]+$/.test(value)\n}\n\n/*\n  Function: isUppercase\n  Input:     a STRING\n  Output:    tRue if STRING is a letter\n  Purpose:   Determine if STRING is a letter\n\n  >>> isUppercase('A')\n  true\n  >>> isUppercase('a')\n  false\n  >>> isUppercase('1')\n  false\n  >>> isUppercase('_')\n  false\n  */\nconst isUppercase = (value) => {\n    if (typeof value!=='string') {\n        throw new Error('Function \"isUppercase\" needs a STRING as input')\n    }\n    return /^[A-Z]+$/.test(value)\n}\n\n/*\n  Function: isLowercase\n  Input:     a STRING\n  Output:    tRue if STRING is a letter\n  Purpose:   Determine if STRING is a letter\n\n  >>> isLowercase('a')\n  true\n  >>> isLowercase('A')\n  false\n  >>> isLowercase('1')\n  false\n  >>> isLowercase('_')\n  false\n  */\nconst isLowercase = (value) => {\n    if (typeof value!=='string') {\n        throw new Error('Function \"isLowercase\" needs a STRING as input')\n    }\n    return /^[a-z]+$/.test(value)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return [1]\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1)\n  }\n  return [sum]\n}\n\nconst derivative2 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2)\n  }\n  return sum\n}\n\nconst derivative3 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3)\n  }\n  return sum\n}\n\nconst derivative4 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4)\n  }\n  return sum\n}\n\nconst derivative5 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5)\n  }\n  return sum\n}\n\nconst derivative6 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6)\n  }\n  return sum\n}\n\nconst derivative7 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7)\n  }\n  return sum\n}\n\nconst derivative8 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7) * (i + 8)\n  }\n  return sum\n}\n\nconst derivative9 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7) * (i + 8) * (i + 9)\n  }\n  return sum\n}\n\nconst derivative10 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7) * (i + 8) * (i + 9) * (i + 10)\n  }\n  return sum\n}\n\nconst derivative11 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7) * (i + 8) * (i + 9) * (i + 10) * (i + 11)\n  }\n  return sum\n}\n\nconst derivative12 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let sum = 0\n  for (let i = 0; i < len; i++) {\n    sum += xs[i] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7) * (i + 8) * (i + 9) * (i + 10) * (i + 11) * (i + 12)\n  }\n  return sum\n}\n\nconst derivative13 = (xs) => {\n  const len = xs.length\n  if (len === 1) {\n    return 1\n  }\n  let"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 1;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconst fibfibSum = (n) => {\n  let fibs = [];\n  for (let i = 0; i <= n; i++) {\n    fibs.push(fibfib(i));\n  }\n  return fibs.reduce((prev, current, i) => prev + current, 0);\n};\n\nmodule.exports = {\n  fibfib,\n  fibfibSum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowel = ['a', 'e', 'i', 'o', 'u', 'y']\n  return s.replace(/[AEIOUY]/g, (v) => vowel.indexOf(v) > -1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let s = x.toString();\n  while (s.length < shift) {\n    s = s + s;\n  }\n  return s.substr(shift);\n};\n\n/*\n  Circular shift by one Digit, and add a leading zero.\n  >>> circularShift(12, 1)\n  \"12\"\n  >>> circularShift(12, 2)\n  \"13\"\n  */\nconst circularShiftWithLeadingZero = (x, shift) => {\n  let s = x.toString();\n  while (s.length < shift) {\n    s = '0' + s;\n  }\n  return s.substr(shift);\n};\n\nconst circularShiftTest = () => {\n  console.log(circularShift(3, 2));\n  console.log(circularShift(3, 1));\n  console.log(circularShift(3, 0));\n  console.log(circularShift(12, 2));\n  console.log(circularShift(12, 1));\n  console.log(circularShift(12, 0));\n};\n\nconst circularShiftTest2 = () => {\n  console.log(circularShiftWithLeadingZero(3, 2));\n  console.log(circularShiftWithLeadingZero(3, 1));\n  console.log(circularShiftWithLeadingZero(3, 0));\n  console.log(circularShiftWithLeadingZero(12, 2));\n  console.log(circularShiftWithLeadingZero(12, 1));\n  console.log(circularShiftWithLeadingZero(12, 0));\n};\n\ncircularShiftTest();\ncircularShiftTest2();\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  s.split('').forEach(x => sum += (x.charCodeAt(0) - 64));\n  return sum;\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  const appleS = s.match(/Apple/g)[0];\n  const oranges = s.match(/Orange/g);\n  const fruit = appleS + oranges.length;\n  const result = n - fruit;\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let r = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].value) {\n      r.push([arr[i].value, i]);\n    }\n  }\n  if (r.length) {\n    r.sort((a, b) => a[0] - b[0]);\n    return r.pop();\n  }\n  return [];\n};\n\nconst check = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check1 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check2 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check3 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check4 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check5 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check6 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check7 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check8 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check9 = (nodes, nums) => {\n  let index = 0;\n  let last = nodes.length - 1;\n  let node = nodes[index];\n  while (node) {\n    node = nodes[++index];\n    if (index === last) {\n      return [node.value, nums.indexOf(node.value)];\n    }\n  }\n  return [0, 0];\n};\n\nconst check10 = (nodes, nums)"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let i = 0\n    let j = lst.length - 1\n    while (i <= j) {\n        const k = (i + j) / 2\n        const current = lst[k]\n        if (current < 0) {\n            return -1\n        }\n        if (current === lst[k - 1]) {\n            return k\n        }\n        if (current === lst[k + 1]) {\n            return k\n        }\n        if (current > lst[k - 1] && current < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] < lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] < lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] && lst[k] > lst[k + 1]) {\n            return k\n        }\n        if (lst[k] > lst[k - 1] &&"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const arr = []\n  const len = lst.length\n\n  for (let i = 0; i < len; i++) {\n    arr.push(lst[i])\n  }\n\n  const sortedArr = arr.sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  })\n\n  const len2 = len - 1\n  const mid = len2 / 2\n  const start = 0\n  const end = len2\n\n  for (let i = 0; i < len2; i++) {\n    const [low, high] = [start + i, start + i + 1]\n\n    for (let j = low; j < high; j++) {\n      if (sortedArr[j] < sortedArr[j + 1]) {\n        const temp = sortedArr[j]\n        sortedArr[j] = sortedArr[j + 1]\n        sortedArr[j + 1] = temp\n      }\n    }\n  }\n\n  return sortedArr\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  if (a + b > c) return triangleArea(b, c, a);\n  if (b + c > a) return triangleArea(c, a, b);\n  return a * (b + c) / 2;\n};\n\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0 || a <= 0) return -1;\n  "}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return false;\n  }\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum === w) {\n    return true;\n  }\n  let left = w - sum;\n  if (left < q[0]) {\n    return false;\n  }\n  let next = q[0];\n  for (let i = 1; i < q.length; i++) {\n    next = next + q[i];\n    if (next === left) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = {\n  willItFly\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = 1\n  let j = arr.length - 1\n  let smallest = arr[0]\n  let index = 0\n  while (i <= j) {\n    if (arr[i] < arr[j]) {\n      smallest = arr[i]\n      index = i\n      i++\n    } else if (arr[i] > arr[j]) {\n      smallest = arr[j]\n      index = j\n      j--\n    } else {\n      i++\n      j--\n    }\n  }\n  return smallest\n}\n\n/*\n  ElEnAd The ElEmEnTs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changEd To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChangeTwo = (arr) => {\n  let i = 1\n  let j = arr.length - 1\n  let smallest = arr[0]\n  let index = 0\n  while (i <= j) {\n    if (arr[i] < arr[j]) {\n      smallest = arr[i]\n      index = i\n      i++\n    } else if (arr[i] > arr[j]) {\n      smallest = arr[j]\n      index = j\n      j--\n    } else {\n      i++\n      j--\n    }\n  }\n  return smallest\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 3)\nconsole.log(smallestChangeTwo([1, 2, 3, 2, 1]) === 1)\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const listLength = lst1.length;\n  const totalLength = lst2.length;\n\n  const match = [];\n  for (let i = 0; i < listLength; i++) {\n    if (lst1[i].length === totalLength) {\n      match.push(lst1[i]);\n    }\n  }\n\n  return match;\n}\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns tHe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch2 = (lst1, lst2) => {\n  const listLength = lst1.length;\n  const totalLength = lst2.length;\n\n  const match = [];\n  for (let i = 0; i < listLength; i++) {\n    if (lst2.length === totalLength) {\n      match.push(lst2[i]);\n    }\n  }\n\n  return match;\n}\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns tHe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch3 = (lst1, lst2) => {\n  const listLength = lst1.length;\n  const totalLength = lst2.length;\n\n  const match = [];\n  for (let i = 0; i < listLength; i++) {\n    if (lst1[i].length === totalLength) {\n      match.push(lst1[i]);\n    }\n  }\n\n  return match;\n}\n\nexport default {\n  totalMatch,\n  totalMatch2,\n  totalMatch3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const sum = a * a * a;\n  for (let i = 2; i <= sum; i++) {\n    if (i % a === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERs\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime2 = (a) => {\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMBERs\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == false\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime3 = (a) => {\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = (a) => {\n  if (a === 2) {\n    return true;\n  }\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBER IS a prime NUMBER\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime2 = (a) => {\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  WritE a funCtion ThaT retuRns trUe if the GivEn numBER IS a prime NUMBER\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime3 = (a) => {\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime4 = (a) => {\n  if (a === 2 || a === 3) {\n    return true;\n  }\n  let b = 1;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime5 = (a) => {\n  let b = 2;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime6 = (a) => {\n  let b = 3;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime7 = (a) => {\n  let b = 5;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime8 = (a) => {\n  let b = 7;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime9 = (a) => {\n  let b = 11;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime10 = (a) => {\n  let b = 13;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime11 = (a) => {\n  let b = 17;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime12 = (a) => {\n  let b = 19;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime13 = (a) => {\n  let b = 23;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n  return true;\n};\n\nconst isPrime14 = (a) => {\n  let b = 29;\n  while (b * b <= a) {\n    if (a % b === 0) {\n      return false;\n    }\n    b++;\n  }\n"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x < 0) {\n    return false\n  }\n  if (x === 1) {\n    return true\n  }\n  if (x === n) {\n    return true\n  }\n  if (x % n!== 0) {\n    return false\n  }\n  return isSimplePower(x / n, n)\n}\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return (a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a + a +"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    var hexDigits = num.replace(/\\s/g, '').match(/[a-fA-F0-9]/g);\n    return hexDigits.reduce((prev, current, i, array) => {\n        return prev + parseInt(current, 16);\n    }, 0);\n}\nconst primeNumber = (number) => {\n    var numberDigits = number.replace(/\\s/g, '').match(/[0-9]/g);\n    return numberDigits.reduce((prev, current, i, array) => {\n        return prev + parseInt(current, 10);\n    }, 1);\n}\nconst primeList = (num) => {\n    var primeList = [];\n    for (let i = 2; i <= num; i++) {\n        if (primeNumber(i) === 0) {\n            primeList.push(i);\n        }\n    }\n    return primeList;\n}\n\nfunction findPrime(num) {\n    return primeList(num);\n}\n\nconst hexToDecimal = (num) => {\n    return parseInt(num, 16);\n}\n\nfunction getHex(num) {\n    return num.replace(/[a-fA-F0-9]/g, '$&0');\n}\n\nfunction toHex(num) {\n    return num.replace(/\\d/g, '$&');\n}\n\nfunction toDecimal(num) {\n    return num.replace(/[$&0]/g, '');\n}\n\nfunction hexToBase(num, base) {\n    return parseInt(num, base);\n}\n\nfunction baseToHex(num, base) {\n    return num.toString(base);\n}\n\nfunction findPrimeByHex(num) {\n    return primeList(hexToDecimal(num));\n}\n\nfunction getHexByHex(num) {\n    return getHex(num);\n}\n\nfunction toHexByHex(num) {\n    return toHex(num);\n}\n\nfunction toBaseByHex(num, base) {\n    return baseToHex(num, base);\n}\n\nfunction hexToBaseByHex(num) {\n    return hexToBase(num, 16);\n}\n\nfunction baseToHexByHex(num, base) {\n    return baseToHex(num, base);\n}\n\nfunction findPrimeByBase(num) {\n    return primeList(baseToHex(num));\n}\n\nfunction getHexByBase(num) {\n    return getHex(baseToHex(num));\n}\n\nfunction toHexByBase(num, base) {\n    return toHex(baseToHex(num, base));\n}\n\nfunction toBaseByBase(num, base) {\n    return baseToHex(num, base);\n}\n\nfunction hexToBaseByBase(num) {\n    return hexToBase(num, 16);\n}\n\nfunction baseToHexByBase(num, base) {\n    return baseToHex(num, base);\n}\n\nfunction findPrimeByBaseWithHex(num) {\n    return primeList(baseToHexByHex(num));\n}\n\nfunction getHexByBaseWithHex(num) {\n    return getHexByHex(baseToHexByHex(num));\n}\n\nfunction toHexByBaseWithHex(num, base) {\n    return toHexByHex(baseToHexByHex(num, base));\n}\n\nfunction toBaseByBaseWithHex(num, base) {\n    return toBaseByHex(num, base);\n}\n\nfunction findPrimeByHexWithBase(num) {\n    return primeList(hexToBaseByBase(num));\n}\n\nfunction getHexByHexWithBase(num) {\n    return getHexByHex(hexToBaseByBase(num));\n}\n\nfunction toHexByHexWithBase(num, base) {\n    return toHexByHex(hexToBaseByBase(num, base));\n}\n\nfunction toBaseByHexWithBase(num, base) {\n    return toBaseByHex(num, base);\n}\n\nfunction findPrimeByHexWithHex(num) {\n    return primeList(hexToBaseByHex(num));\n}\n\nfunction getHexByHexWithHex(num) {\n    return getHexByHex(hexToBaseByHex(num));\n}\n\nfunction toHexByHexWithHex(num, base) {\n    return toHexByHex(hexToBaseByHex(num, base));\n}\n\nfunction toBaseByHexWithHex(num, base)"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = []\n  const d = decimal\n  while (d!== 0) {\n    const b = d % 2\n    d = Math.floor(d / 2)\n    binary.unshift(String.fromCharCode(b + '0'))\n  }\n  return binary.join('')\n}\n\nmodule.exports = decimalToBinary\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let isHappy = true;\n  let cur = 1;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (cur === 1) {\n      cur = 0;\n    } else {\n      cur = cur * 10;\n    }\n    if (cur === parseInt(s.charAt(i))) {\n      cur = 1;\n    } else {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n}\n\n/*\n  Solves the problem in the LeetCode.\n  https://leetcode.com/problems/happy-number/\n  Given an integer, write a function to determine if it is a happy number.\n  A happy number is a number defined by the following process: Starting with any positive integer, replace the number\n  by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay),\n  or it loops endlessly. Those numbers for which this process ends in 1 are happy numbers.\n  Note: 1 is a happy number.\n  For example:\n  Given 16, the process is:\n  1*16 = 16, 16 + 16 = 32, 32 + 32 = 64, 64 + 64 = 128, 128 + 128 = 256, 256 + 256 = 512, 512 + 512 = 1024\n  So 16 is a happy number.\n  Example:\n  Given 13, the process is:\n  1*13 = 13, 13 + 13 = 26, 26 + 26 = 52, 52 + 52 = 104, 104 + 104 = 208, 208 + 208 = 416, 416 + 416 =\n  912, 912 + 912 = 1824, 1824 + 1824 = 3696, 3696 + 3696 = 7392, 7392 + 7392 = 14688, 14688 + 14688 =\n  22960, 22960 + 22960 = 45888, 45888 + 45888 = 91776, 91776 + 91776 = 183552, 183552 + 183552 = 367008,\n  367008 + 367008 = 736704, 736704 + 736704 = 1475040, 1475040 + 1475040 = 2295040, 2295040 + 2295040 =\n  4550240, 4550240 + 4550240 = 9175160, 9175160 + 9175160 = 18350320, 18350320 + 18350320 = 36700160,\n ...\n  Also, note that 0 is *not* a happy number.\n  Example:\n  Given 7, the process is:\n  1*7 = 7, 7 + 7 = 14, 14 + 14 = 28, 28 + 28 = 56, 56 + 56 = 112, 112 + 112 = 224, 224 + 224 = 448,\n  448 + 448 = 976, 976 + 976 = 1968, 1968 + 1968 = 3904, 3904 + 3904 = 7968, 7968 + 7968 = 15840,\n  15840 + 15840 = 23888, 23888 + 23888 = 47616, 47616 + 47616 = 96320, 96320 + 96320 = 192000,\n  192000 + 192000 = 384000, 384000 + 384000 = 768000, 768000 + 768000 = 1536000, 1536000 + 1536000 =\n  2384000, 2384000 + 2384000 = 4784000, 4784000 + 4784000 = 972000, 972000 + 972000 = 1960000,\n  1960000 + 1960000 = 3900000, 3900000 + 3900000 = 7800000, 7800000 + 7800000 = 15600000,\n ...\n  Example:\n  Given 11, the process is:\n  1*11 = 11, 11 + 11 = 22, 22 + 22 = 44, 44 + 44 = 88, 88 + 88 = 176, 176 + 176 = 352, 352 + 352 =\n  704, 704 + 704 = 1408, 1408 + 1408 = 2816, 2816 + 2816 = 5632, 5632 + 5632 = 11264, 11264 + 11264 =\n  22528, 22528 + 22528 = 44976, 44976 + 44976 = 94944, 94944 + 94944 = 189872, 189872 + 189872 = 379920,\n  379920 + 379920 = 759360, 759360 + 759360 = 1518400, 1518400 + 1518400 = 2386240, 2386240 + 2386240 =\n  4765600, 4765600 + 4765600 = 9530800, 9530800 + 9530800 = 19567200, 19567200 + 19567200 = 39135200,\n ...\n  and may be extended to work with larger inputs.\n  The function should return true only if the number is a happy number.\n  Note: The input number can be arbitrarily large, but your algorithm's runtime complexity must be\n  insubstantially less than O(10^8).\n  You may assume that the input number is always positive.\n  Credits:\n  Special thanks to @ts for adding this problem and creating all test cases.\n  Credits:\n  Special thanks to @elmirap for adding this problem.\n  */\nconst isHappy = (number) => {\n  let counter = 0;\n  while (number > 0) {\n    number = number % 10 + number / 10;\n    counter++;\n  }\n  return counter === 1;\n}\n\nconsole.log(isHappy(13));\nconsole.log(isHappy(1));\nconsole.log(isHappy(8));\nconsole.log(isHappy(2));\nconsole.log(isHappy(16));\nconsole.log(isHappy(19));\nconsole.log(isHappy(17));\nconsole.log(isHappy(13));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4\n  };\n  let finalGrade = [];\n  let letter;\n  for (let i = 0; i < grades.length; i++) {\n    letter = grades[i].toLowerCase();\n    finalGrade.push(letterGrade[letter]);\n  }\n  return finalGrade;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  return /^[0-9]*$/.test(string)\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeCount('Hello') == 2\n  primeCount('abcdcba') == 5\n  primeCount('kittens') == 5\n  primeCount('orange') == 0\n  */\nconst primeCount = (string) => {\n  const number = +string\n  if (number < 0) {\n    return 0\n  }\n  const i = 1\n  const prime = number / 2\n  while (prime < i) {\n    if (number % i === 0) {\n      return i\n    }\n    i++\n  }\n  return number\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  factorial('Hello') == 1\n  factorial('abcdcba') == 3628800\n  factorial('kittens') == 6.2832\n  factorial('orange') == 0\n  */\nconst factorial = (string) => {\n  const number = +string\n  if (number < 0) {\n    return 0\n  }\n  const result = 1\n  while (number > 1) {\n    result *= number\n    number--\n  }\n  return result\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeFactors('Hello') == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  primeFactors('abcdcba') == [1, 2, 2, 2, 3, 5, 7, 9]\n  primeFactors('kittens') == [1, 2, 4]\n  primeFactors('orange') == []\n  */\nconst primeFactors = (string) => {\n  const number = +string\n  if (number < 0) {\n    return []\n  }\n  const primeList = []\n  let i = 2\n  while (number > 1) {\n    const prime = number / i\n    if (primeList.indexOf(prime) === -1) {\n      primeList.push(prime)\n    }\n    number = number % i\n    i++\n  }\n  return primeList\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  numberOfPrimes(123) == 12\n  numberOfPrimes(456) == 24\n  numberOfPrimes(789) == 24\n  numberOfPrimes(0) == 0\n  numberOfPrimes(1) == 1\n  numberOfPrimes(5) == 5\n  */\nconst numberOfPrimes = (string) => {\n  const number = +string\n  if (number < 2) {\n    return 0\n  }\n  const primeList = primeFactors(number)\n  return primeList.length\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeTrials(123) == 12\n  primeTrials(456) == 24\n  primeTrials(789) == 24\n  primeTrials(0) == 0\n  primeTrials(1) == 1\n  primeTrials(5) == 5\n  */\nconst primeTrials = (string) => {\n  const number = +string\n  if (number < 2) {\n    return 0\n  }\n  const primeList = primeFactors(number)\n  return numberOfPrimes(primeList.reduce((acc, prime) => acc * prime, number))\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeTrials('Hello') == 12\n  primeTrials('abcdcba') == 24\n  primeTrials('kittens') == 24\n  primeTrials('orange') == 0\n  primeTrials('kittens') == 0\n  */\nconst primeTrials = (string) => {\n  const number = +string\n  if (number < 2) {\n    return 0\n  }\n  const primeList = primeFactors(number)\n  return numberOfPrimes(primeList.reduce((acc, prime) => acc * prime, number))\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  numberOfPrimes('Hello') == 12\n  numberOfPrimes('abcdcba') == 24\n  numberOfPrimes('kittens') == 24\n  numberOfPrimes('orange') == 0\n  numberOfPrimes('kittens') == 0\n  */\nconst numberOfPrimes = (string) => {\n  const number = +string\n  if (number < 2) {\n    return 0\n  }\n  const primeList = primeFactors(number)\n  return numberOfPrimes(primeList.reduce((acc, prime) => acc * prime, number))\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  numberOfPr"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  const s = n\n  const count = 0\n  while (s % 10!== 0) {\n    s = s / 10\n    count += 1\n  }\n  return count\n}\n\nconst getNumbers = (n) => {\n  const s = n\n  const count = 0\n  while (s!== 0) {\n    count += 1\n    s = s / 10\n  }\n  return count\n}\n\nconst sum = (a, b) => {\n  return a + b\n}\n\nconst getSum = (a, b) => {\n  return sum(a, b)\n}\n\nconst givend = (a, b) => {\n  return a + b\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst getOne = (n) => {\n  return 1\n}\n\nconst givendOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n) => {\n  return n + 1\n}\n\nconst addOne = (n"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    if (N < 0) {\n        throw new Error('Error: N must be positive');\n    }\n    if (N > 10000) {\n        throw new Error('Error: N must be under 10000');\n    }\n\n    let sum = 0;\n    for (let i = N; i >= 1; i--) {\n        sum += Math.pow(2, N - i);\n    }\n    return String(sum);\n};\n\nconst test = (test) => {\n    const result = solve(test);\n    console.log(`${test} = ${result}`);\n};\n\n// test(100);\n// test(500);\n// test(1000);\n// test(3000);\n// test(5000);\n// test(10000);\n// test(15000);\n// test(20000);\n// test(30000);\n// test(40000);\n// test(50000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n// test(450000);\n// test(520000);\n// test(550000);\n// test(100000);\n// test(150000);\n// test(200000);\n// test(320000);\n"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.reduce((acc, curr) => acc + curr, 0);\n}\n\nconst sub = (lst) => {\n  return lst.reduce((acc, curr) => acc - curr, 0);\n}\n\nconst mul = (lst) => {\n  return lst.reduce((acc, curr) => acc * curr, 1);\n}\n\nconst div = (lst) => {\n  return lst.reduce((acc, curr) => acc / curr, 1);\n}\n\nconst gcd = (lst) => {\n  return lst.reduce((acc, curr) => {\n    return curr === 0? acc : gcd(curr, acc);\n  }, lst[0]);\n}\n\nconst isPrime = (lst) => {\n  for (let i = 2; i < lst; i++) {\n    if (lst % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst hasDivisor = (lst) => {\n  for (let i = 2; i < lst; i++) {\n    if (lst % i === 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst isPythagorean = (lst) => {\n  return (Math.pow(lst[0], 2) + Math.pow(lst[1], 2) === Math.pow(lst[2], 2));\n}\n\nconst isEven = (lst) => {\n  return (lst % 2 === 0);\n}\n\nconst isOdd = (lst) => {\n  return (lst % 2!== 0);\n}\n\nconst isOddEven = (lst) => {\n  return (lst % 2 === 0 && lst % 2 === 1);\n}\n\nconst hasDivisorTwo = (lst) => {\n  return hasDivisor(lst);\n}\n\nconst hasDivisorThree = (lst) => {\n  return hasDivisor(lst);\n}\n\nconst hasDivisorFive = (lst) => {\n  return hasDivisor(lst);\n}\n\nconst hasDivisorThreeFive = (lst) => {\n  return hasDivisorThree(lst);\n}\n\nconst hasDivisorFiveThree = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorThreeSix = (lst) => {\n  return hasDivisorThree(lst);\n}\n\nconst hasDivisorThreeSeven = (lst) => {\n  return hasDivisorThree(lst);\n}\n\nconst hasDivisorFiveSeven = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorSevenFive = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorNineFive = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorThreeEight = (lst) => {\n  return hasDivisorThree(lst);\n}\n\nconst hasDivisorNineThree = (lst) => {\n  return hasDivisorThree(lst);\n}\n\nconst hasDivisorNineSix = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorFiveNine = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorNineSeven = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorSevenFive = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorThreeTen = (lst) => {\n  return hasDivisorThree(lst);\n}\n\nconst hasDivisorNineTen = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorTenNine = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorThreeFour = (lst) => {\n  return hasDivisorThree(lst);\n}\n\nconst hasDivisorFiveSix = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorSevenEight = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorNineFour = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorFourTen = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorFiveTen = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorTenFive = (lst) => {\n  return hasDivisorFive(lst);\n}\n\nconst hasDivisorNineNine = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorTenFour = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorNineFive = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorFiveNine = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorTenNine = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorTenTen = (lst) => {\n  return hasDivisorNineThree(lst);\n}\n\nconst hasDivisorFourFour = (lst) => {\n  return hasDivisorFour(lst);\n}\n\nconst hasDivisorSevenSeven = (lst) => {\n  "}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const sLen = s.length\n  const arr = []\n  for (let i = 0; i < sLen; i++) {\n    arr.push(s.charAt(i))\n  }\n  return arr.join('')\n}\n\n/*\n  THe function hasD a SENTENCE that is in aSCENdiNg order, and the sentence\n  will be reversed.\n  It returns the sTring in aSCENdiNg order.\n  */\nconst reverseSentence = (s) => {\n  const sLen = s.length\n  let result = []\n  for (let i = sLen - 1; i >= 0; i--) {\n    result.push(s.charAt(i))\n  }\n  return result.join('')\n}\n\n/*\n  You shouDl difFERENT string with the same sTring in aSCENdiNg order.\n  The function will return true, if the senteNce sTring is the reverse of\n  aSCENdiNg order of the string, and false, if the senteNce is not reversed\n  of aSCENdiNg order.\n  */\nconst isReverse = (s) => {\n  const sLen = s.length\n  let arr = []\n  for (let i = 0; i < sLen; i++) {\n    arr.push(s.charAt(i))\n  }\n  arr.reverse()\n  const result = antiShuffle(s)\n  return result === arr.join('')\n}\n\nconsole.log(isReverse('Hello World!!!'))\n\n/*\n  This is an example of a function, that can be called from a\n  SCRIPT.\n  */\n\nfunction isReverse2(s) {\n  return isReverse(s)\n}\n\nconst test = (s) => {\n  const sLen = s.length\n  const arr = []\n  for (let i = 0; i < sLen; i++) {\n    arr.push(s.charAt(i))\n  }\n  return arr.join('')\n}\n\nconsole.log(test('Hello World!!!'))\nconsole.log(test('Hello World!!!'))\nconsole.log(test('Hello World!!!'))\nconsole.log(test('Hello World!!!'))\n\nconst test2 = (s) => {\n  return isReverse(s)\n}\n\nconsole.log(test2('Hello World!!!'))\nconsole.log(test2('Hello World!!!'))\nconsole.log(test2('Hello World!!!'))\nconsole.log(test2('Hello World!!!'))\n\n/*\n  Here you can see the difference between the functions:\n  isReverse returns a boolean value, that will be false, if the senteNce\n  is not in aSCENdiNg order, and true, if the senteNce is in aSCENdiNg order.\n  This means, that isReverse() is not a function, but a simple function,\n  that returns the value of isReverse(s).\n  */\n\nconsole.log(isReverse2('Hello World!!!'))\nconsole.log(isReverse2('Hello World!!!'))\nconsole.log(isReverse2('Hello World!!!'))\nconsole.log(isReverse2('Hello World!!!'))\n\n/*\n  Here you see the difference between the functions:\n  reverseSentence returns the string in aSCENdiNg order.\n  This means, that reverseSentence() is not a function, but a simple\n  function, that returns the value of reverseSentence(s).\n  */\n\nconsole.log(reverseSentence('Hello World!!!'))\nconsole.log(reverseSentence('Hello World!!!'))\nconsole.log(reverseSentence('Hello World!!!'))\nconsole.log(reverseSentence('Hello World!!!'))\n\n/*\n  Here you see the difference between the functions:\n  antiShuffle returns the string in aSCENdiNg order.\n  This means, that antiShuffle() is not a function, but a simple function,\n  that returns the value of antiShuffle(s).\n  */\n\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello World!!!'))\nconsole.log(antiShuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((j, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow2 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((i, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow3 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((i, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow4 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((i, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow5 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((i, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow6 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((i, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow7 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((i, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow8 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for (let j = 0; j < len; j++) {\n      if (j < x) {\n        res.push((i, curRow[j]))\n      }\n    }\n    curRow = lst[++last]\n  }\n  return res\n}\n\nconst getRow9 = (lst, x) => {\n  const len = lst.length\n  const size = lst[0].length\n  const res = []\n  let curRow = lst[0]\n  let last = 0\n  for (let i = 0; i < size; i++) {\n    for"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    let sorted = [];\n    array.forEach((value, index) => {\n        if(index % 2 === 0) {\n            sorted.push(value);\n        } else {\n            sorted.push(sorted.slice().reverse().find((v, i) => v > value));\n        }\n    });\n    return sorted;\n};\n\n/*\n  FindTheMax value of the array.\n*/\nconst findTheMax = (array) => {\n    let max = array[0];\n    array.forEach((value, index) => {\n        if(value > max) {\n            max = value;\n        }\n    });\n    return max;\n};\n\n/*\n  FindTheMin value of the array.\n*/\nconst findTheMin = (array) => {\n    let min = array[0];\n    array.forEach((value, index) => {\n        if(value < min) {\n            min = value;\n        }\n    });\n    return min;\n};\n\n/*\n  The function return an array of even and odd number.\n*/\nconst evenOddArray = (array) => {\n    let even = [],\n        odd = [];\n    array.forEach((value, index) => {\n        if(index % 2 === 0) {\n            even.push(value);\n        } else {\n            odd.push(value);\n        }\n    });\n    return [odd, even];\n};\n\n/*\n  The function return an array of odd and even number.\n*/\nconst oddEvenArray = (array) => {\n    let odd = [],\n        even = [];\n    array.forEach((value, index) => {\n        if(index % 2 === 1) {\n            odd.push(value);\n        } else {\n            even.push(value);\n        }\n    });\n    return [odd, even];\n};\n\n/*\n  The function return an array of max and min number.\n*/\nconst maxMinArray = (array) => {\n    let max = array[0],\n        min = array[0];\n    array.forEach((value, index) => {\n        if(value > max) {\n            max = value;\n        }\n        if(value < min) {\n            min = value;\n        }\n    });\n    return [max, min];\n};\n\n/*\n  The function return an array of the average number of the array.\n*/\nconst avgArray = (array) => {\n    let sum = array.reduce((previousValue, currentValue) => {\n        return previousValue + currentValue;\n    }, 0);\n    return sum / array.length;\n};\n\n/*\n  The function return an array of the median number of the array.\n*/\nconst medianArray = (array) => {\n    let half = Math.floor(array.length / 2);\n    let sorted = sortArray(array);\n    if(array.length % 2 === 0) {\n        return sorted[half - 1];\n    } else {\n        return (sorted[half - 1] + sorted[half]) / 2;\n    }\n};\n\n/*\n  The function return an array of the mode number of the array.\n*/\nconst modeArray = (array) => {\n    let modeArray = [],\n        max = array[0];\n    array.forEach((value, index) => {\n        if(value === max) {\n            max = max + 1;\n        } else {\n            max = value;\n        }\n    });\n    maxArray = [max, max];\n    array.forEach((value, index) => {\n        if(value === max) {\n            modeArray.push(value);\n        }\n    });\n    return modeArray;\n};\n\n/*\n  The function return an array of the standard deviation number of the array.\n*/\nconst stdDevArray = (array) => {\n    let sum = 0,\n        mean = avgArray(array),\n        deviation = 0,\n        squareSum = 0;\n    array.forEach((value, index) => {\n        sum += Math.pow(value - mean, 2);\n    });\n    squareSum = sum;\n    deviation = Math.sqrt(squareSum / array.length);\n    return [mean, deviation];\n};\n\nexport {\n    sortArray,\n    findTheMax,\n    findTheMin,\n    oddEvenArray,\n    evenOddArray,\n    maxMinArray,\n    avgArray,\n    medianArray,\n    modeArray,\n    stdDevArray\n};<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z'];\n  const index = alphabet.indexOf(s[0]);\n  const n = alphabet.length;\n  const result = alphabet.slice(index, index + n);\n  return result.join('');\n};\n\nconsole.log(encrypt('hi'));\nconsole.log(encrypt('asdfghjkl'));\nconsole.log(encrypt('gf'));\nconsole.log(encrypt('et'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  var min = lst[0];\n  for(var i=1;i<lst.length;i++){\n    if(min > lst[i]){\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextLargest() that RetURN tHe 2nd largest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 5\n  nextLargest([]) == nUll\n  nextLargest([1, 1]) == 1\n  */\nCOnSt nextLargest = (lst) => {\n  var max = lst[0];\n  for(var i=1;i<lst.length;i++){\n    if(max < lst[i]){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN min() that RetURNs the smallest number of the list.\n  ReturN NUll iF there is no Such element.\n  \n  min([1, 2, 3, 4, 5]) == 1\n  min([5, 1, 4, 3, 2]) == 1\n  min([]) == nUll\n  min([1, 1]) == 1\n  */\nCOnSt min = (lst) => {\n  var min = lst[0];\n  for(var i=1;i<lst.length;i++){\n    if(min > lst[i]){\n      min = lst[i];\n    }\n  }\n  return min;\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN max() that RetURNs the largest number of the list.\n  ReturN NUll iF there is no Such element.\n  \n  max([1, 2, 3, 4, 5]) == 5\n  max([5, 1, 4, 3, 2]) == 5\n  max([]) == nUll\n  max([1, 1]) == 1\n  */\nCOnSt max = (lst) => {\n  var max = lst[0];\n  for(var i=1;i<lst.length;i++){\n    if(max < lst[i]){\n      max = lst[i];\n    }\n  }\n  return max;\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN sum() that RetURNs the sum of the elements of the list.\n  ReturN NUll iF there is no Such element.\n  \n  sum([1, 2, 3, 4, 5]) == 15\n  sum([5, 1, 4, 3, 2]) == 14\n  sum([]) == 0\n  sum([1, 1]) == 2\n  */\nCOnSt sum = (lst) => {\n  var sum = 0;\n  for(var i=0;i<lst.length;i++){\n    sum += lst[i];\n  }\n  return sum;\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN median() that RetURNs the median of the list.\n  ReturN NUll iF there is no Such element.\n  \n  median([1, 2, 3, 4, 5]) == 3\n  median([5, 1, 4, 3, 2]) == 4\n  median([]) == nUll\n  median([1, 1]) == 1\n  */\nCOnSt median = (lst) => {\n  var mid = (lst.length - 1) / 2;\n  if(lst.length % 2 == 0){\n    return (lst[mid] + lst[mid + 1]) / 2;\n  }\n  return lst[mid];\n}\n\n/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN mean() that RetURNs the mean of the list.\n  ReturN NUll iF there is no Such element.\n  \n  mean([1, 2, 3, 4, 5]) == 2.5\n  mean([5, 1, 4, 3, 2]) == 3.5\n  mean([]) == nUll\n  mean([1, 1]) == 1\n  */\nCOnSt mean = (lst) => {\n  var sum = 0;\n  for(var i=0;i<lst.length;i++){\n    sum += lst[i];\n  }\n  return sum / lst.length;\n}\n\n\nmodule.exports = {\n  nextSmallest,\n  nextLargest,\n  min,\n  max,\n  sum,\n  median\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const i = S.indexOf(\"i\")\n  if (i === -1) return false\n\n  const j = S.indexOf(\"?\")\n  if (j === -1) return false\n\n  const k = S.indexOf(\".\")\n  if (k === -1) return false\n\n  return (S.indexOf(\"!\")!== -1) || (S.indexOf(\"?\")!== -1) || (S.indexOf(\".\")!== -1)\n}\n\nconst hasThreeLetters = S => (S.length === 3)\nconst hasOneLetter = S => (S.length === 1)\nconst hasTwoLetters = S => (S.length === 2)\n\nconst hasCapitalLetter = S => (S[0] >= 'A' && S[0] <= 'Z')\nconst hasLowerLetter = S => (S[0] >= 'a' && S[0] <= 'z')\nconst hasLetter = S => (hasCapitalLetter(S) || hasLowerLetter(S))\nconst hasLetters = S => (hasLetter(S) || hasTwoLetters(S))\n\nconst hasDigit = S => (S.indexOf(\"1\")!== -1 || S.indexOf(\"2\")!== -1 || S.indexOf(\"3\")!== -1 || S.indexOf(\"4\")!== -1 || S.indexOf(\"5\")!== -1 || S.indexOf(\"6\")!== -1 || S.indexOf(\"7\")!== -1 || S.indexOf(\"8\")!== -1 || S.indexOf(\"9\")!== -1)\nconst hasNumber = S => (hasDigit(S) || S.indexOf(\"-\")!== -1)\n\nconst hasSpecial = S => (hasCapitalLetter(S) || hasDigit(S) || S.indexOf(\"!\")!== -1 || S.indexOf(\"?\")!== -1 || S.indexOf(\".\")!== -1)\nconst hasSpecialLetter = S => (hasSpecial(S) || hasOneLetter(S))\n\nconst hasSpecialLetters = S => (hasSpecialLetter(S) || hasLetters(S))\n\nconst hasAll = S => (hasSpecialLetters(S) || hasCapitalLetter(S) || hasLowerLetter(S) || hasLetter(S))\n\nconst hasWord = S => hasAll(S)\n\nconst hasAny = S => (hasWord(S) || hasLetters(S))\n\nconst hasLetters = S => (hasLetters(S) || hasLetters(S.split(\"\").reverse().join(\"\")))\n\nconst hasLettersReverse = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")))\n\nconst hasLettersReverseSplit = S => (hasLettersReverse(S) || hasLetters(S.split(\"\").join(\"\")))\n\nconst hasLettersReverseSplitAll = S => (hasLettersReverse(S) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasLettersReverseSplitAllAll = S => (hasLettersReverse(S) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasLettersSplit = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")))\n\nconst hasLettersSplitAll = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasLettersSplitAllAll = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasLettersSplitAllAllReverse = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasLettersSplitAllAllReverseAll = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasLettersSplitAllAllReverseAllAll = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasLettersSplitAllAllReverseAllAllAll = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || hasLetters(S.split(\"\").join(\"\")) || S.split(\"\").join(\"\"))\n\nconst hasAllLetters = S => (hasLetters(S) || hasLetters(S.split(\"\").join(\"\")))\nconst hasAllLettersReverse = S => (hasLettersReverse(S) || hasLetters(S.split(\"\").join(\"\")))\nconst hasAllLettersReverseSplit = S => (hasLettersReverseSplit(S) || hasLetters(S.split(\"\").join(\"\")))\nconst hasAllLettersReverseSplitAll = S => (hasLettersReverseSplitAll(S) || hasLetters(S.split(\"\").join(\"\")))\nconst hasAllLettersReverseSplitAllAll = S => (hasLettersReverseSplit"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return x + y === z\n}\n\n/*\n  REturnS true if the NumbErs are all equal, and false otherwise.\n  Examples\n  anyEq(3, 3, 3) ➞ true\n  anyEq(3, 2, 3) ➞ false\n  anyEq(3, 2, 2) ➞ true\n  anyEq(3, 2.2, 2.2) ➞ true\n  anyEq(3, 2.2, 2) ➞ true\n  anyEq(3, -2.2, -2.2) ➞ true\n  anyEq(3, -2.2, -2) ➞ true\n  anyEq(3.6, -2.2, -2.2) ➞ true\n  anyEq(3.6, -2.2, -2) ➞ true\n  */\nconst anyEq = (x, y, z) => {\n  return x === y && x === z\n}\n\n/*\n  REturnS true if the NumbErs are all equal to the value of the parameter, and false otherwise.\n  Examples\n  anyEq(3, 3, 3, 3) ➞ true\n  anyEq(3, 2, 3, 3) ➞ false\n  anyEq(3, 2, 2, 2) ➞ true\n  anyEq(3, 2.2, 2.2, 2.2) ➞ true\n  anyEq(3, 2.2, 2.2, 2) ➞ true\n  anyEq(3, 2.2, 2, 2.2) ➞ true\n  anyEq(3, 2.2, 2, 2) ➞ true\n  */\nconst anyEqVal = (x, y, z, val) => {\n  return x === y && x === z && x === val\n}\n\n/*\n  REturnS true if the NumbErs are all greater than the value of the parameter, and false otherwise.\n  Examples\n  anyGr(2, 2, 3) ➞ true\n  anyGr(2, 2, 2) ➞ true\n  anyGr(2, 2.2, 2.2) ➞ true\n  anyGr(2, 2.2, 2) ➞ true\n  anyGr(2, 2, 2.2) ➞ false\n  */\nconst anyGr = (x, y, z) => {\n  return x > y && x > z\n}\n\n/*\n  REturnS true if the NumbErs are all greater than or equal to the value of the parameter, and false otherwise.\n  Examples\n  anyGrE(2, 2, 3) ➞ true\n  anyGrE(2, 2, 2) ➞ true\n  anyGrE(2, 2.2, 2.2) ➞ true\n  anyGrE(2, 2.2, 2) ➞ true\n  anyGrE(2, 2, 2.2) ➞ true\n  */\nconst anyGrE = (x, y, z) => {\n  return x >= y && x >= z\n}\n\n/*\n  REturnS true if the NumbErs are all less than the value of the parameter, and false otherwise.\n  Examples\n  anyLt(2, 2, 3) ➞ true\n  anyLt(2, 2, 2) ➞ true\n  anyLt(2, 2.2, 2.2) ➞ true\n  anyLt(2, 2.2, 2) ➞ true\n  anyLt(2, 2, 2.2) ➞ false\n  */\nconst anyLt = (x, y, z) => {\n  return x < y && x < z\n}\n\n/*\n  REturnS true if the NumbErs are all less than or equal to the value of the parameter, and false otherwise.\n  Examples\n  anyLtE(2, 2, 3) ➞ true\n  anyLtE(2, 2, 2) ➞ true\n  anyLtE(2, 2.2, 2.2) ➞ true\n  anyLtE(2, 2.2, 2) ➞ true\n  anyLtE(2, 2, 2.2) ➞ true\n  */\nconst anyLtE = (x, y, z) => {\n  return x <= y && x <= z\n}\n\n/*\n  REturnS true if the NumbErs are all between the value of the parameter and the next NumbErs, and false otherwise.\n  Examples\n  anyBtw(2, 2, 3) ➞ true\n  anyBtw(2, 2, 2) ➞ false\n  anyBtw(2, 2.2, 2.2) ➞ true\n  anyBtw(2, 2.2, 2) ➞ true\n  anyBtw(2, 2, 2.2) ➞ true\n  */\nconst anyBtw = (x, y, z) => {\n  return x <= y && x >= z\n}\n\nexport {\n  anyInt,\n  anyEq,\n  anyEqVal,\n  anyGr,\n  anyGrE,\n  anyLt,\n  anyLtE,\n  anyBtw,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const allLetters = message.split('');\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  const result = [];\n  for (let i = 0; i < allLetters.length; i++) {\n    let letter = allLetters[i];\n    if (vowels.indexOf(letter) > -1) {\n      result.push(letter);\n    } else {\n      result.push(getTwo(letter));\n    }\n  }\n  return result.join('');\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> decode('TGSST')\n  'test'\n  >>> decode('ThKS KS C MGSSCGG')\n  'this is a message'\n  */\nconst decode = (message) => {\n  const result = [];\n  const allLetters = message.split('');\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  for (let i = 0; i < allLetters.length; i++) {\n    let letter = allLetters[i];\n    if (vowels.indexOf(letter) > -1) {\n      result.push(letter);\n    } else {\n      result.push(getTwo(letter));\n    }\n  }\n  return result.join('');\n};\n\nconst getTwo = (letter) => {\n  if (letter === 'a') {\n    return 'p';\n  } else if (letter === 'e') {\n    return'm';\n  } else if (letter === 'i') {\n    return's';\n  } else if (letter === 'o') {\n    return 'k';\n  } else if (letter === 'u') {\n    return 't';\n  }\n};\n\nmodule.exports = {\n  encode,\n  decode\n};<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  if(lst.length === 0) {\n    return 0;\n  }\n\n  let sum = 0;\n  lst.forEach(n => {\n    if(isNaN(n)) {\n      sum += parseInt(n,10);\n    } else {\n      sum += n;\n    }\n  });\n\n  return sum;\n};\n\nmodule.exports = {\n  skjkasdkd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  for (let i = 0; i < keys.length; i++) {\n    if (typeof(dict[keys[i]])!= \"string\") {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isValidEmail = (email) => {\n  if (typeof(email)!= \"string\") {\n    return false;\n  }\n  const regex = /^[\\w\\-]+(\\.[\\w\\-]+)*@[\\w\\-]+(\\.[\\w\\-]+)*\\.([a-z]{2,4})$/;\n  return regex.test(email);\n};\n\nconst isValidUsername = (username) => {\n  if (typeof(username)!= \"string\") {\n    return false;\n  }\n  const regex = /^[a-zA-Z0-9_-]{3,15}$/;\n  return regex.test(username);\n};\n\nconst isValidPassword = (password) => {\n  if (typeof(password)!= \"string\") {\n    return false;\n  }\n  const regex = /^[a-zA-Z0-9_-]{3,15}$/;\n  return regex.test(password);\n};\n\nconst isValidPhoneNumber = (phoneNumber) => {\n  if (typeof(phoneNumber)!= \"string\") {\n    return false;\n  }\n  const regex = /^\\d{3}-\\d{3}-\\d{4}$/;\n  return regex.test(phoneNumber);\n};\n\nconst isValidDate = (date) => {\n  if (typeof(date)!= \"string\") {\n    return false;\n  }\n  const regex = /^\\d{1,2}\\/\\d{1,2}\\/\\d{4}$/;\n  return regex.test(date);\n};\n\nconst isValidTime = (time) => {\n  if (typeof(time)!= \"string\") {\n    return false;\n  }\n  const regex = /^[0-9]{2}:[0-9]{2}:[0-9]{2}$/;\n  return regex.test(time);\n};\n\nconst isValidIP = (ip) => {\n  if (typeof(ip)!= \"string\") {\n    return false;\n  }\n  const regex = /^(25[0-5]|2[0-4]\\d|1?\\d?\\d)(\\.(25[0-5]|2[0-4]\\d|1?\\d?\\d)){3}$/;\n  return regex.test(ip);\n};\n\nconst isValidAddress = (address) => {\n  if (typeof(address)!= \"string\") {\n    return false;\n  }\n  const regex = /^([A-Z]{2,4}\\s+[0-9]{2,4}[\\s,\\s-]{1}[0-9]{4}|[A-Z]{2,4}\\s+[0-9]{2,4}|[A-Z]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}|[A-Z]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}|[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}|[A-Z]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}[\\s,\\s-]{1}[0-9]{4}|[A-Z]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}[\\s,\\s-]{1}[0-9]{4}|[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}[\\s,\\s-]{1}[0-9]{4}|[0-9]{2,4}[\\s,\\s-]{1}[0-9]{4}|[A-Z]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}|[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}|[A-Z]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}|[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}|[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}\\s+[0-9]{2,4}$/;\n  return regex.test(address);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2,3]\n  for (let i = 5; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      primes.push(i)\n      primes.push(n / i)\n    }\n  }\n  return primes\n}\n\n/*\n  ConSruct an array of anInts starting from aLow and anUp.\n  the method will return anInts[0], anInts[1],... anInts[anInts.length-1]\n  if anUp is greater than anInts.length, the method will return\n  anInts[0], anInts[1],... anInts[anInts.length-1].\n  if anUp is less than anInts.length, the method will return anInts[0]\n  and anInts[1].\n  anInts[0] will be the lowest number in the array.\n  anInts[anInts.length-1] will be the highest number in the array.\n  */\nconst range = (aLow, anUp) => {\n  let length = anUp - aLow\n  if (length < 0) {\n    length *= -1\n  }\n  let range = []\n  for (let i = 0; i < length; i++) {\n    range.push(aLow + i)\n  }\n  return range\n}\n\nconst isPalindrome = (number) => {\n  let numberString = \"\" + number\n  numberString = numberString.replace(/^0*(.*)$/, \"$1\")\n  return numberString === numberString.split('').reverse().join('')\n}\n\nconst isPalindrome2 = (number) => {\n  let numberString = \"\" + number\n  numberString = numberString.replace(/^0*(.*)$/, \"$1\")\n  numberString = numberString.replace(/\\d/g, \"\")\n  return numberString === numberString.split('').reverse().join('')\n}\n\nconst isPalindrome3 = (number) => {\n  return number.toString().replace(/^0*(.*)$/, \"$1\") === number.toString().split('').reverse().join('')\n}\n\nconst reverse = (string) => {\n  let reversed = \"\"\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i]\n  }\n  return reversed\n}\n\nconst isPrime = (number) => {\n  let count = 0\n  let i = 2\n  while (i <= number) {\n    if (number % i === 0) {\n      count++\n    }\n    i++\n  }\n  return count === 2\n}\n\nconst isPrime2 = (number) => {\n  for (let i = 2; i <= number / 2; i++) {\n    if (number % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isPrime3 = (number) => {\n  let i = 2\n  while (i <= Math.sqrt(number)) {\n    if (number % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime4 = (number) => {\n  let i = 2\n  while (i < number) {\n    if (number % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst isPrime5 = (number) => {\n  let prime = 2\n  let i = 3\n  while (i < number) {\n    if (number % i === 0) {\n      return false\n    }\n    i = i + 2\n  }\n  return true\n}\n\nconst isPrime6 = (number) => {\n  let prime = 2\n  let i = 3\n  while (i <= Math.sqrt(number)) {\n    if (number % i === 0) {\n      return false\n    }\n    i = i + 2\n  }\n  return true\n}\n\nconst isPrime7 = (number) => {\n  let prime = 2\n  let i = 3\n  while (i < number) {\n    if (number % i === 0) {\n      return false\n    }\n    i = i + 2\n  }\n  return true\n}\n\nconst isPrime8 = (number) => {\n  let prime = 2\n  let i = 3\n  while (i <= number) {\n    if (number % i === 0) {\n      return false\n    }\n    i = i + 2\n  }\n  return true\n}\n\nconst primeFactors = (number) => {\n  let primeFactors = []\n  let prime = 2\n  while (prime <= number) {\n    while (number % prime === 0) {\n      primeFactors.push(prime)\n      number = number / prime\n    }\n    prime = prime + 1\n  }\n  return primeFactors\n}\n\nconst factorCount = (number) => {\n  let factorCount = 0\n  let primeFactors = primeFactors(number)\n  for (let i = 0; i < primeFactors.length; i++) {\n    factorCount = factorCount + (number / primeFactors[i])\n  }\n  return factorCount\n}\n\nconst primesBetween = (low, high) => {\n  let primes = []\n  let count = 0\n  let i = low\n  while (i < high) {\n    if (isPrime(i)) {\n      primes.push(i)\n      count++\n      i++\n    }\n    else {\n      i++\n    }"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (b === 0) {\n    return 0\n  }\n\n  if (a === 0) {\n    return 0\n  }\n\n  let ans = a % b\n  let p = 0\n  let m = 0\n\n  while (p < b) {\n    if (ans >= 0) {\n      m = b\n      ans -= m\n    } else {\n      m = a\n      ans += m\n    }\n\n    p++\n  }\n\n  return ans\n}\n\n// multiply(1, 2) should return 1\n// multiply(1, -2) should return -1\n// multiply(2, -1) should return -1\n// multiply(2, 1) should return 2\n// multiply(2, 2) should return 4\n// multiply(2, -2) should return -4\n// multiply(4, 2) should return 8\n// multiply(4, -2) should return -8\n// multiply(9, 3) should return 27\n// multiply(9, -3) should return -27\n\n// multiply(5, -5) should return -25\n// multiply(5, 5) should return 25\n// multiply(6, -3) should return -27\n// multiply(6, 3) should return 27\n// multiply(7, -4) should return -28\n// multiply(7, 4) should return 28\n// multiply(8, -4) should return -32\n// multiply(8, 4) should return 32\n\n/*\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let i = 0, j = 0, k = 0, count = 0;\n  for (i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      j = i + 1;\n      while (j < s.length && s[j].toUpperCase() === s[j]) {\n        j++;\n      }\n      k = j - 1;\n      count++;\n      while (i <= k) {\n        s[i] = s[k];\n        i++;\n      }\n      s[k] = s[j];\n      k--;\n    }\n  }\n  return count;\n};\n\n/*\n  Find all the word in a String s,\n  And the NumbeR of words that are Upper-case in EVeN iNdicES.\n  \n  For example:\n  countUpper(\"ABC\") returns 2\n  countUpper(\"Bbc\") returns 0\n  */\nconst countUpperCase = (s) => {\n  let count = 0, i = 0;\n  while (i < s.length) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return count;\n};\n\n/*\n  The method return a String that has same character but in different case.\n  \n  For example:\n  toCamelCase(\"aBcDe\") returns \"AbcDe\"\n  toCamelCase(\"aBcDeF\") returns \"AbcDeF\"\n  toCamelCase(\"aBcDeFg\") returns \"AbcDeFg\"\n  */\nconst toCamelCase = (s) => {\n  let i = 0, j = 0, k = 0, s2 = \"\";\n  while (i < s.length) {\n    if (s[i].toUpperCase() === s[i]) {\n      s2 += s[i].toLowerCase();\n      i++;\n    } else {\n      s2 += s[i];\n      i++;\n    }\n  }\n  return s2;\n};\n\n/*\n  The method returns a String that has all vowels in EVeN iNdicES in UPPERCASE\n  \n  For example:\n  toUpper(\"aBcDeFg\") returns \"ABCDEFG\"\n  */\nconst toUpperCase = (s) => {\n  let i = 0, j = 0, s2 = \"\";\n  while (i < s.length) {\n    if (s[i].toUpperCase() === s[i]) {\n      s2 += s[i].toUpperCase();\n      i++;\n    } else {\n      s2 += s[i];\n      i++;\n    }\n  }\n  return s2;\n};\n\n/*\n  The method returns a String that has all vowels in EVeN iNdicES in LowerCase\n  \n  For example:\n  toLower(\"ABCDEFG\") returns \"abcdefg\"\n  */\nconst toLowerCase = (s) => {\n  let i = 0, j = 0, s2 = \"\";\n  while (i < s.length) {\n    if (s[i].toLowerCase() === s[i]) {\n      s2 += s[i].toLowerCase();\n      i++;\n    } else {\n      s2 += s[i];\n      i++;\n    }\n  }\n  return s2;\n};\n\nmodule.exports = {\n  countUpper,\n  countUpperCase,\n  toCamelCase,\n  toUpperCase,\n  toLowerCase\n};<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  // if (value < 0) {\n  //   return -closestInteger(-value);\n  // }\n  let result = closestIntegerHelper(value);\n  return result;\n};\n\nexport default closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const lIS = [1];\n  const pile = [];\n\n  for (let i = 0; i < n; i++) {\n    const pile = [...pile,...lIS];\n    lIS.push(lIS.shift());\n  }\n  return pile;\n};\n\nconst pile = makeAPile(3);\nconsole.log(pile);\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const w = s.split(\" \")\n  return w\n}\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst numWords = (s) => {\n  const w = s.split(\" \")\n  return w.length\n}\n\nmodule.exports = {\n  wordsString,\n  numWords\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  const n = x - 1;\n  const m = y - 1;\n  const max = Math.min(n, m);\n  const min = Math.max(n, m);\n  let sum = 0;\n  for (let i = min; i <= max; i++) {\n    sum += i;\n  }\n  if (sum === x) {\n    return x;\n  }\n  if (sum === y) {\n    return y;\n  }\n  return -1;\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nBits = Math.ceil(Math.log(n) / Math.log(2));\n  const mBits = Math.ceil(Math.log(m) / Math.log(2));\n  const max = Math.pow(2, nBits) - 1;\n  const min = Math.pow(2, mBits) - 1;\n  const diff = max - min + 1;\n  let result = 0;\n  let tmp = 0;\n\n  for (let i = min; i <= max; i++) {\n    tmp = i;\n    result += tmp;\n  }\n\n  result = result / diff;\n  return Math.round(result);\n};\n\nmodule.exports = roundedAvg;<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let uniqueDigits = []\n  for (let i = x; i > 0; i--) {\n    let j = parseInt(x / i)\n    if (i === j) {\n      uniqueDigits.push(i)\n    }\n  }\n  return uniqueDigits\n}\n\n/*Given a list of PositIve IntegErs x, return a list of the PositIve \n  IntegErs which are the sum of the elements in the list.\n\n  Note: RETUrnD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 9])\n  [1, 2, 3, 4, 5, 6, 9]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 9, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 9, 14, 15, 16]\n  */\nconst sumOfDigits = (x) => {\n  let sumOfDigits = []\n  for (let i = x; i > 0; i--) {\n    let j = parseInt(x / i)\n    if (i === j) {\n      sumOfDigits.push(i)\n    }\n  }\n  return sumOfDigits\n}\n\n/*Given a list of PositIve IntegErs x, return a list of the PositIve \n  IntegErs which are the sum of the elements in the list.\n\n  Note: RETUrnD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 9])\n  [1, 2, 3, 4, 5, 6, 9]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 9, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 9, 14, 15, 16]\n  */\nconst sumOfDigits2 = (x) => {\n  let sumOfDigits = []\n  for (let i = x; i > 0; i--) {\n    let j = parseInt(x / i)\n    if (i === j) {\n      sumOfDigits.push(i)\n    }\n  }\n  return sumOfDigits\n}\n\nconst getSumOfDigits = (x) => {\n  let sum = 0\n  for (let i = x; i > 0; i--) {\n    let j = parseInt(x / i)\n    if (i === j) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst getSumOfDigits2 = (x) => {\n  let sum = 0\n  for (let i = x; i > 0; i--) {\n    let j = parseInt(x / i)\n    if (i === j) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*Given a list of PositIve IntegErs x, return a list of the PositIve \n  IntegErs which are the sum of the elements in the list.\n\n  Note: RETUrnD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 9])\n  [1, 2, 3, 4, 5, 6, 9]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> sumOfDigits([1, 2, 3, 4, 5, 6, 9, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 9, 14, 15, 16]\n  */\nconst sumOfDigits3 = (x) => {\n  let sumOfDigits = []\n  for (let i = x; i > 0; i--) {\n    let j = parseInt(x / i)\n    if (i === j) {\n      sumOfDigits.push(i)\n    }\n  }\n  return sumOfDigits\n}\n\nconst getSumOfDigits3 = (x) => {\n  let sumOfDigits = []\n  for (let i = x; i > 0; i--) {\n    let j = parseInt(x / i)\n    if (i === j) {\n      sumOfDigits.push(i)\n    }\n  }\n  return sumOfDigits\n}\n\nmodule.exports = {\n  uniqueDigits,\n  sumOfDigits,\n  sumOfDigits2,\n  sumOfDigits3,\n  getSumOfDigits,\n  getSumOfDigits2,\n  getSumOfDigits3,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (!arr) return []\n  const sortedArr = arr.sort((a, b) => {\n    const aL = a.length\n    const bL = b.length\n    if (aL < bL) return -1\n    if (aL > bL) return 1\n    return 0\n  })\n  const revArr = sortedArr.reverse()\n  return sortedArr.concat(revArr)\n}\n\n/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byCount = (arr) => {\n  if (!arr) return []\n  const sortedArr = arr.sort((a, b) => {\n    const aC = a.length\n    const bC = b.length\n    if (aC < bC) return -1\n    if (aC > bC) return 1\n    return 0\n  })\n  const revArr = sortedArr.reverse()\n  return sortedArr.concat(revArr)\n}\n\nconst byCountToIndex = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    const aC = a.length\n    const bC = b.length\n    if (aC < bC) return -1\n    if (aC > bC) return 1\n    return 0\n  })\n  return sortedArr.reverse().map((i) => i)\n}\n\nconst byIndexToCount = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    const aC = a.length\n    const bC = b.length\n    if (aC < bC) return -1\n    if (aC > bC) return 1\n    return 0\n  })\n  return sortedArr.reverse().map((i) => i)\n}\n\nconst byCountToName = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    const aC = a.length\n    const bC = b.length\n    if (aC < bC) return -1\n    if (aC > bC) return 1\n    return 0\n  })\n  return sortedArr.reverse().map((i) => i)\n}\n\nconst byNameToCount = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    const aC = a.length\n    const bC = b.length\n    if (aC < bC) return -1\n    if (aC > bC) return 1\n    return 0\n  })\n  return sortedArr.reverse().map((i) => i)\n}\n\nconst byNameToIndex = (arr) => {\n  const sortedArr = arr.sort((a, b) => {\n    const aC = a.length\n    const bC = b.length\n    if (aC < bC) return -1\n    if (aC > bC) return 1\n    return 0\n  })\n  return sortedArr.reverse().map((i) => i)\n}\n\nexport {\n  byLength,\n  byCount,\n  byCountToIndex,\n  byIndexToCount,\n  byCountToName,\n  byNameToCount,\n  byNameToIndex,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\n/* CompLies the two numbers*/\nconst compLies = (a, b) => {\n  if (a < b) {\n    return false;\n  }\n  return true;\n}\n\n/* impLEmeNt the FunCtion f THAT tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALUE oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst impLemeNt = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst compLies = (a, b) => {\n  if (a < b) {\n    return false;\n  }\n  return true;\n}\n\nconst impLemeNt = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret.push(fun(ret[i - 1] * ret[i - 1]));\n  }\n  return ret;\n}\n\nconst f = (n) => {\n  const fun = (x) => {\n    return (x === n)? 1 : x;\n  }\n  const ret = Array.from(Array(n + 1).fill(1));\n  ret.unshift(fun(n));\n  for (let i = 2; i <= n; i++) {\n    ret"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let numOfEven = 0;\n    let numOfOdd = 0;\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                numOfEven++;\n            } else {\n                numOfOdd++;\n            }\n        }\n    }\n    return [numOfEven, numOfOdd];\n};\n\nconst isPalindrome = (num) => {\n    return (num.toString() + num.toString()).toString() === num.toString();\n};\n\nconst testEvenOddPalindrome = () => {\n    const [numOfEven, numOfOdd] = evenOddPalindrome(12);\n    console.log(`${numOfEven} even and ${numOfOdd} odd integers are palindromes`);\n};\n\nconst evenOddPalindrome2 = (n) => {\n    let countEven = 0;\n    let countOdd = 0;\n    let even = [];\n    let odd = [];\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            if (i % 2 === 0) {\n                countEven++;\n                even.push(i);\n            } else {\n                countOdd++;\n                odd.push(i);\n            }\n        }\n    }\n    return [countEven, countOdd, even, odd];\n};\n\nconst testEvenOddPalindrome2 = () => {\n    const [countEven, countOdd, even, odd] = evenOddPalindrome2(12);\n    console.log(`${countEven} even and ${countOdd} odd integers are palindromes`);\n    console.log(`Even integers are: ${even.join(', ')}`);\n    console.log(`Odd integers are: ${odd.join(', ')}`);\n};\n\ntestEvenOddPalindrome();\ntestEvenOddPalindrome2();\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    let sum = 0;\n    let count = 0;\n\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i];\n            count += 1;\n        }\n    }\n\n    if (sum > 0) {\n        return count;\n    } else {\n        return 0;\n    }\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  // Complete this function\n  const isPossible = moveOneBall(arr.slice(1, arr.length));\n  \n  if (isPossible) {\n    console.log('Yes');\n  } else {\n    console.log('No');\n  }\n};\n\nmoveOneBall([3, 4, 5, 1, 2]);<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let i = 0\n  let j = 0\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] < lst2[j]) {\n      lst1[i] = lst2[j]\n      i++\n    } else if (lst1[i] > lst2[j]) {\n      lst1[j] = lst1[i]\n      j++\n    } else {\n      lst1[i] = lst2[j]\n      lst1[j] = lst1[i]\n      i++\n      j++\n    }\n  }\n  while (i < lst1.length) {\n    lst1[i] = lst2[j]\n    i++\n  }\n  while (j < lst2.length) {\n    lst1[i] = lst2[j]\n    j++\n  }\n  if (lst1.length!== lst2.length) {\n    return 'NO'\n  }\n  return 'YES'\n}\n\nmodule.exports = exchange\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const hist = {}\n  test = test.toLowerCase()\n  const allWords = test.split(' ')\n  for(let i = 0; i < allWords.length; i++) {\n    hist[allWords[i]] = (hist[allWords[i]] || 0) + 1\n  }\n  return hist\n}\n\nmodule.exports = histogram\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n\tconst len = s.length;\n\tlet sReverse = \"\";\n\tlet sNext = \"\";\n\tlet sReversed = \"\";\n\tfor (let i = 0; i < len; i++) {\n\t\tsNext = s.charAt(i);\n\t\tsReverse += sNext;\n\t\tif (sReverse.includes(c)) {\n\t\t\tsReversed = sReverse.replace(c, \"\");\n\t\t\treturn [sReversed, false];\n\t\t}\n\t}\n\treturn [sReverse, true];\n}\n\n/*\n  the task is to check if the given string is palindrome.\n  Example\n  Given \"aab\" return true.\n  Given \"abc\" return false.\n  Given \"aba\" return true.\n  Given \"aaa\" return false.\n*/\nconst isPalindrome = str => {\n\tlet len = str.length;\n\tlet half = Math.floor(len / 2);\n\tlet mid = half;\n\twhile (mid > 0) {\n\t\tif (str.charAt(mid - 1)!== str.charAt(len - mid)) {\n\t\t\treturn false;\n\t\t}\n\t\tmid--;\n\t}\n\treturn true;\n}\n\n/*\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is Palindrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"aab\", c = \"a\", the result should be ('a',true)\n  For s = \"abc\", c = \"a\", the result should be ('ab',false)\n  For s = \"aba\", c = \"a\", the result should be ('ba',true)\n  For s = \"aaa\", c = \"a\", the result should be ('aa',false)\n*/\nconst palindrome = (s, c) => {\n\tlet len = s.length;\n\tlet half = Math.floor(len / 2);\n\tlet mid = half;\n\twhile (mid > 0) {\n\t\tif (s.charAt(mid - 1)!== s.charAt(len - mid)) {\n\t\t\treturn [s.substring(0, half - 1), false];\n\t\t}\n\t\tmid--;\n\t}\n\treturn [s.substring(0, half), true];\n}\n\nmodule.exports = {\n\treverseDelete,\n\tisPalindrome,\n\tpalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const result = [];\n  for(let i = 0; i < lst.length; i++){\n    if(i%2 == 1){\n      result.push(lst[i]);\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let len = nums.length\n  let minSum = Infinity\n  let minSumArr = []\n  for (let i = 0; i < len; i++) {\n    let curSum = 0\n    let subArr = []\n    for (let j = 0; j < len - i; j++) {\n      curSum += nums[j]\n      if (curSum < minSum) {\n        minSum = curSum\n        subArr = [nums[j]]\n      } else if (curSum === minSum) {\n        subArr.push(nums[j])\n      }\n    }\n    minSumArr = [...minSumArr,...subArr]\n  }\n  return minSumArr.reduce((sum, n) => sum + n)\n}\n\nexport default minSubArraySum\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const length = grid.length\n  let ret = 0\n  let row = 0\n  let col = 0\n  while (row < length && col < length) {\n    if (grid[row][col] === 0) {\n      ret += fill(row, col, length, capacity)\n    }\n    if (row!== length - 1) row++\n    if (col!== length - 1) col++\n  }\n  return ret\n}\n\nconst fill = (row, col, length, capacity) => {\n  const c = col + 1\n  const r = row + 1\n  const ret = Math.min(c * capacity, length - r)\n  grid[row][col] = 1\n  return ret\n}\n\nconst n = parseInt(process.argv[2])\nconst c = parseInt(process.argv[3])\nconst grid = []\nfor (let i = 0; i < n; i++) {\n  const row = []\n  for (let j = 0; j < c; j++) {\n    row.push(parseInt(process.argv[4 + i * c + j]))\n  }\n  grid.push(row)\n}\n\nconsole.log(maxFill(grid, c))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    const compare = (a, b) => a - b\n    let result = arr.slice(0)\n    result.sort(compare)\n    return result\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let len = s.length;\n    let start = i;\n    let end = i + 1;\n    while (end < len) {\n      if (s[end] ==='') {\n        end++;\n        continue;\n      }\n      break;\n    }\n    let word = s.slice(start, end);\n    list.push(word);\n  }\n  return list;\n}\n\n/*\nGiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \nA function that RETurnS a list of all words from string s That cOnTAiN eXAcTly \nn coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\niF thE striNg s iS eMpTY THen The functiON shOUlD return an empTy list.\nnOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let len = s.length;\n    let start = i;\n    let end = i + 1;\n    while (end < len) {\n      if (s[end] ==='') {\n        end++;\n        continue;\n      }\n      break;\n    }\n    let word = s.slice(start, end);\n    list.push(word);\n  }\n  return list;\n}\n\n/*\nGiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \nA function that RETurnS a list of all words from string s That cOnTAiN eXAcTly \nn coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\niF thE striNg s iS eMpTY THen The functiON shOUlD return an empTy list.\nnOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\nExamples:\nselectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\nselectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\"]\nselectWords(\"simple white space\", 2) ==> []\nselectWords(\"Hello world\", 4) ==> [\"world\"]\nselectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n*/\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < n; i++) {\n    let len = s.length;\n    let start = i;\n    let end = i + 1;\n    while (end < len) {\n      if (s[end] ==='') {\n        end++;\n        continue;\n      }\n      break;\n    }\n    let word = s.slice(start, end);\n    list.push(word);\n  }\n  return list;\n}\n\nconst isIn = (list, item) => {\n  let index = list.indexOf(item);\n  return index > -1;\n}\n\nconst wordCount = (s) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      continue;\n    }\n    list.push(1);\n  }\n  return list;\n}\n\nconst wordLength = (s) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      continue;\n    }\n    list.push(1);\n  }\n  return list;\n}\n\nconst isAlpha = (s) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      continue;\n    }\n    list.push(1);\n  }\n  return list;\n}\n\nconst isSpace = (s) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      list.push(1);\n    }\n  }\n  return list;\n}\n\nconst isAllAlpha = (s) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      continue;\n    }\n    list.push(1);\n  }\n  return list;\n}\n\nconst isAllSpace = (s) => {\n  let list = [];\n  for (let i ="}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n\tvar charArr = word.toLowerCase().split(\"\");\n\tvar letter;\n\tvar vowel;\n\tvar vowelCount = 0;\n\tvar vowelIndex = -1;\n\tvar vowelList = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\tvar vowelWord = \"\";\n\n\tfor (var i = 0; i < charArr.length; i++) {\n\t\tletter = charArr[i];\n\t\tfor (var j = 0; j < vowelList.length; j++) {\n\t\t\tvowel = vowelList[j];\n\t\t\tif (letter === vowel) {\n\t\t\t\tvowelCount++;\n\t\t\t\tvowelIndex = j;\n\t\t\t\tvowelWord += letter;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vowelCount === 0) {\n\t\treturn \"\";\n\t}\n\n\treturn vowelWord.substr(0, vowelCount);\n}\n\nmodule.exports = getClosestVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const [open, close] = lst\n  return match(open, close)\n}\n\nconst match = (open, close) => {\n  if (open === close) {\n    return 'Yes'\n  }\n  if (open === close.toUpperCase()) {\n    return 'No'\n  }\n  if (open.toUpperCase() === close) {\n    return 'No'\n  }\n  if (match(open.toUpperCase(), close.toUpperCase())) {\n    return 'No'\n  }\n  if (match(open.toLowerCase(), close.toLowerCase())) {\n    return 'No'\n  }\n  return 'Yes'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const length = arr.length;\n  const max = arr[0];\n  const [left, right] = [0, length - 1];\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n\n    if (arr[mid] < max) {\n      left = mid + 1;\n    } else if (arr[mid] > max) {\n      right = mid - 1;\n    } else {\n      return arr.slice(left, right + 1);\n    }\n  }\n\n  return [arr[left]];\n};\n\n// const maximum = (arr, k) => {\n//   const length = arr.length;\n//   const max = arr[0];\n//   const [left, right] = [0, length - 1];\n\n//   while (left < right) {\n//     const mid = Math.floor((left + right) / 2);\n\n//     if (arr[mid] < max) {\n//       left = mid + 1;\n//     } else if (arr[mid] > max) {\n//       right = mid - 1;\n//     } else {\n//       return arr.slice(left, right + 1);\n//     }\n//   }\n\n//   return [arr[left]];\n// };\n\nconsole.log(maximum([-3, -4, 5], 3));\nconsole.log(maximum([4, -4, 4], 2));\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i];\n  }\n  return result;\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let sum = 0;\n    for (let i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\n\nconst findMaxSum = (arr) => {\n    let maxSum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        for (let j = i + 1; j < arr.length; j++) {\n            let sum = addElements(arr, j);\n            if (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n    }\n    return maxSum;\n}\n\nmodule.exports = findMaxSum;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz(n/2);\n  oddCollatz[3] = getOddCollatz(3*n+1);\n  return oddCollatz;\n};\n\n// END OF COLLATZ\n\n/*\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz2 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz2(n/2);\n  oddCollatz[3] = getOddCollatz2(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz3 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz3(n/2);\n  oddCollatz[3] = getOddCollatz3(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz4 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz4(n/2);\n  oddCollatz[3] = getOddCollatz4(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz5 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz5(n/2);\n  oddCollatz[3] = getOddCollatz5(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz6 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz6(n/2);\n  oddCollatz[3] = getOddCollatz6(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz7 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz7(n/2);\n  oddCollatz[3] = getOddCollatz7(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz8 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz8(n/2);\n  oddCollatz[3] = getOddCollatz8(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz9 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz9(n/2);\n  oddCollatz[3] = getOddCollatz9(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz10 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz10(n/2);\n  oddCollatz[3] = getOddCollatz10(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz11 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz11(n/2);\n  oddCollatz[3] = getOddCollatz11(3*n+1);\n  return oddCollatz;\n};\n\nconst getOddCollatz12 = (n) => {\n  const oddCollatz = [];\n  oddCollatz[0] = 1;\n  oddCollatz[1] = n;\n  oddCollatz[2] = getOddCollatz12(n/2);\n  oddCollatz[3] = getOddCollatz12(3*n+1);\n  return odd"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const d = date.split('-');\n  const year = d[0];\n  const month = d[1];\n  const day = d[2];\n  const dateArr = [year, month, day];\n  const dateStr = `${year}-${month}-${day}`;\n  const dateNum = dateArr.join('-');\n  const validDateArr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n  const validDateNum = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n  const currentDate = new Date();\n  const currentDateNum = currentDate.getFullYear() * 10000 + currentDate.getMonth() * 100 + currentDate.getDate();\n  const isValid = true;\n  if (dateNum.length!== 8) {\n    isValid = false;\n  } else if (dateNum.length === 8) {\n    for (let i = 0; i < 8; i++) {\n      if (dateNum[i] < 1 || dateNum[i] > 31) {\n        isValid = false;\n      }\n    }\n  }\n  if (isValid) {\n    for (let i = 0; i < 12; i++) {\n      if (dateStr === validDateArr[i]) {\n        isValid = false;\n      }\n    }\n  }\n  if (isValid) {\n    for (let i = 0; i < validDateNum.length; i++) {\n      if (dateNum === validDateNum[i]) {\n        isValid = false;\n      }\n    }\n  }\n  return isValid;\n}\n\nconst isValidDate = (date) => {\n  return validDate(date);\n}\n\nmodule.exports = {\n  isValidDate,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/g);\n  let res = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    let w = word.toUpperCase();\n    if (w.length > 1 && w.charAt(0) === w.charAt(1)) {\n      res.push(w.substr(1));\n    }\n  }\n  return res;\n};\n\nconst checkWord = (txt, word) => {\n  const words = splitWords(txt);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst letterCount = (txt) => {\n  let count = 0;\n  let length = txt.length;\n  for (let i = 0; i < length; i++) {\n    if (txt.charAt(i) >= 97 && txt.charAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst createLetters = (txt) => {\n  let letters = [];\n  let length = txt.length;\n  for (let i = 0; i < length; i++) {\n    if (txt.charAt(i) >= 97 && txt.charAt(i) <= 122) {\n      let newChar = txt.charAt(i);\n      let newIndex = letters.length;\n      letters.push(newChar);\n      letters.push(newIndex);\n    }\n  }\n  return letters;\n};\n\nconst makeWords = (letters) => {\n  let words = [];\n  let length = letters.length;\n  for (let i = 0; i < length; i += 2) {\n    words.push(letters[i] + letters[i + 1]);\n  }\n  return words;\n};\n\nconst getLength = (txt) => {\n  let length = txt.length;\n  return length;\n};\n\nconst findFirstLetters = (txt, letter) => {\n  let letters = createLetters(txt);\n  let firstLetters = [];\n  let length = txt.length;\n  for (let i = 0; i < length; i++) {\n    if (txt.charAt(i) === letter) {\n      firstLetters.push(i);\n    }\n  }\n  return firstLetters;\n};\n\nconst getWord = (txt, word) => {\n  let length = txt.length;\n  let firstLetters = findFirstLetters(txt, word[0]);\n  let wordLength = word.length;\n  for (let i = 0; i < wordLength; i++) {\n    if (firstLetters.indexOf(i) === -1) {\n      return false;\n    }\n  }\n  let words = splitWords(txt);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst isWord = (txt, word) => {\n  let length = txt.length;\n  let firstLetters = findFirstLetters(txt, word[0]);\n  let wordLength = word.length;\n  for (let i = 0; i < wordLength; i++) {\n    if (firstLetters.indexOf(i) === -1) {\n      return false;\n    }\n  }\n  let words = splitWords(txt);\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] === word) {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst getLastWord = (txt, letter) => {\n  let length = txt.length;\n  let lastWord = [];\n  let firstLetters = findFirstLetters(txt, letter);\n  let wordLength = firstLetters.length - 1;\n  for (let i = 0; i < wordLength; i++) {\n    lastWord.push(txt.charAt(firstLetters[i] + 1));\n  }\n  return lastWord.join('');\n};\n\nconst getWordLength = (txt, word) => {\n  let firstLetters = findFirstLetters(txt, word[0]);\n  let wordLength = word.length;\n  for (let i = 0; i < wordLength; i++) {\n    if (firstLetters.indexOf(i) === -1) {\n      return false;\n    }\n  }\n  return wordLength;\n};\n\nconst isFirstLetter = (txt, letter) => {\n  let length = txt.length;\n  let firstLetters = findFirstLetters(txt, letter);\n  return firstLetters.length === 1;\n};\n\nconst makeWordsLength = (txt) => {\n  let words = splitWords(txt);\n  let length = words.length;\n  for (let i = 0; i < length; i++) {\n    words[i] = getWordLength(txt, words[i]);\n  }\n  return words;\n};\n\nconst hasLetter = (txt, letter) => {\n  let length = txt.length;\n  let firstLetters = findFirstLetters(txt, letter);\n  return firstLetters.length > 0;\n};\n\nconst hasWord = (txt, word) => {\n  let words = splitWords(txt);\n  let length = words.length;\n  for (let i = 0; i < length; i++) {\n    if"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let i = 1\n  let prev = lst[0]\n  while (lst.length > i) {\n    if (lst[i] < prev) {\n      return false\n    }\n    prev = lst[i]\n    i += 1\n  }\n  return true\n}\n\nconst sort = (lst) => {\n  return lst.sort((a, b) => a - b)\n}\n\nmodule.exports = {\n  isSorted, sort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (!interval1 ||!interval2) {\n    return false;\n  }\n\n  const start = interval1[0];\n  const end = interval1[1];\n\n  const start2 = interval2[0];\n  const end2 = interval2[1];\n\n  if (start > end) {\n    return false;\n  }\n\n  if (start2 > end2) {\n    return false;\n  }\n\n  const min = Math.min(start, start2);\n  const max = Math.max(end, end2);\n\n  const length = Math.max(min, max) - min + 1;\n\n  return isPrime(length);\n};\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n\n  let i = 2;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n\n  return true;\n};\n\nexport default intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    prod *= arr[i];\n  }\n  return prod;\n};\n\n/*\n  Return nUmber of times each sign oF aSigns\n  is in the ArRAY.\n  notE: return 0 for invalid ArRAY.\n\n  ExamPle:\n  >>> countSigns([1, 2, 2, -4]) == 4\n  >>> countSigns([0, 1]) == 0\n  >>> countSigns([]) == null\n  */\nconst countSigns = (arr) => {\n  let signSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signSum += 1;\n    } else if (arr[i] < 0) {\n      signSum -= 1;\n    }\n  }\n  return signSum;\n};\n\n/*\n  Return the maximum of two numbers.\n  notE: return null for invalid number.\n\n  ExamPle:\n  >>> max([1, 2, 3]) == 3\n  >>> max([0, 1]) == null\n  >>> max(null) == null\n  */\nconst max = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  } else if (a === null) {\n    return b;\n  } else if (b === null) {\n    return a;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Return the minimum of two numbers.\n  notE: return null for invalid number.\n\n  ExamPle:\n  >>> min([1, 2, 3]) == 1\n  >>> min([0, 1]) == null\n  >>> min(null) == null\n  */\nconst min = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a < b) {\n      return a;\n    } else {\n      return b;\n    }\n  } else if (a === null) {\n    return b;\n  } else if (b === null) {\n    return a;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Return the sign of the given number.\n  notE: return null for invalid number.\n\n  ExamPle:\n  >>> sign(0) == 0\n  >>> sign(-0) == -1\n  >>> sign(null) == null\n  */\nconst sign = (a) => {\n  if (typeof a === 'number') {\n    if (a > 0) {\n      return 1;\n    } else if (a < 0) {\n      return -1;\n    } else {\n      return 0;\n    }\n  } else if (a === null) {\n    return null;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Return the sN of the given number.\n  notE: return null for invalid number.\n\n  ExamPle:\n  >>> str(0) == \"0\"\n  >>> str(-0) == \"0\"\n  >>> str(null) == null\n  */\nconst str = (a) => {\n  if (typeof a === 'number') {\n    return a.toString();\n  } else if (a === null) {\n    return null;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Return the sum of the given numbers.\n  notE: return null for invalid number.\n\n  ExamPle:\n  >>> sum([1, 2, 3]) == 6\n  >>> sum([1, 2, 3, -0]) == null\n  >>> sum([1, 2, 3, null]) == null\n  */\nconst sum = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n/*\n  Return the number of times the given sign is in the array.\n  notE: return 0 for invalid number.\n\n  ExamPle:\n  >>> countSigns([1, 2, 2, -4]) == 3\n  >>> countSigns([0, 1]) == 0\n  >>> countSigns([]) == null\n  */\nconst countSign = (arr) => {\n  let signSum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      signSum += 1;\n    } else if (arr[i] < 0) {\n      signSum -= 1;\n    }\n  }\n  return signSum;\n};\n\n/*\n  Return the sign of the given number.\n  notE: return null for invalid number.\n\n  ExamPle:\n  >>> sign(0) == 0\n  >>> sign(-0) == -1\n  >>> sign(null) == null\n  */\nconst sign = (a) => {\n  if (typeof a === 'number') {\n    if (a > 0) {\n      return 1;\n    } else if (a < 0) {\n      return -1;\n    } else {\n      return 0;\n    }\n  } else if (a === null) {\n    return null;\n  } else {\n    return null;\n  }\n};\n\n/*\n  Return the sN of the given number.\n  notE: return null for invalid number.\n\n  ExamPle:\n  >>> str(0) == \"0\"\n  >>> str(-0) == \"0\"\n  >>> str(null) == null\n  */\nconst str ="}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const len = grid.length\n    const m = len * len\n    const [a, b] = [0, m - 1]\n\n    let t = []\n    while (b > a) {\n        let [x, y] = [a % len, (a - a % len) / len]\n        t.push(grid[x][y])\n        a = (a + m - 1) % m\n    }\n\n    return t\n}\n\nconsole.log(minPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 1) return [1];\n  let res = [1];\n  let a = 1;\n  let b = 1;\n  for (let i = 2; i <= n; i++) {\n    a = a + b;\n    b = a + b;\n    res.push(b);\n  }\n  return res;\n};\n\nconsole.log(tri(3));<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  let t = n\n  while (t % 10 === 0) {\n    t = t / 10\n  }\n  if (t === 1) {\n    return 1\n  }\n  return t\n}\n\nconst isOdd = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  return (n % 2) === 1\n}\n\nconst oddDigits = (n) => {\n  let d = 0\n  while (n > 0) {\n    d = d + n % 10\n    n = n / 10\n  }\n  return d\n}\n\nexport { digits, isOdd, oddDigits }\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n\tvar stack = new Stack();\n\tfor (var i = 0; i < string.length; i++) {\n\t\tif (string[i] === '[' || string[i] === '{' || string[i] === '(') {\n\t\t\tstack.push(string[i]);\n\t\t} else if (string[i] === ']' || string[i] === '}' || string[i] === ')') {\n\t\t\tvar top = stack.pop();\n\t\t\tif (stack.size === 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tif (top!== string[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn stack.size === 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += val * val\n  })\n  return sum\n}\n\nconst addNumbers = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += val\n  })\n  return sum\n}\n\nconst sum = (lst) => {\n  return lst.reduce((prev, curr) => {\n    return prev + curr\n  })\n}\n\nconst sumSquaresOfNumbers = (lst) => {\n  return lst.reduce((prev, curr) => {\n    return prev + curr * curr\n  })\n}\n\nconst addNumbersOfNumbers = (lst) => {\n  return lst.reduce((prev, curr) => {\n    return prev + curr\n  })\n}\n\nconst max = (lst) => {\n  let max = lst[0]\n  lst.forEach((curr) => {\n    if (curr > max) {\n      max = curr\n    }\n  })\n  return max\n}\n\nconst sumOfSquares = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += val * val\n  })\n  return sum\n}\n\nconst sumOfSqrt = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += Math.sqrt(val)\n  })\n  return sum\n}\n\nconst addSquares = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += val * val\n  })\n  return sum\n}\n\nconst addSqrt = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += Math.sqrt(val)\n  })\n  return sum\n}\n\nconst sumOfSqrtOfSquares = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += Math.sqrt(val) * val\n  })\n  return sum\n}\n\nconst addSquaresOfSquares = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += val * val\n  })\n  return sum\n}\n\nconst sumOfSqrtOfSqrt = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += Math.sqrt(val) * Math.sqrt(val)\n  })\n  return sum\n}\n\nconst sumOfSqrtOfSqrtOfSquares = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += Math.sqrt(val) * Math.sqrt(val) * val\n  })\n  return sum\n}\n\nconst maxOfSquares = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst maxOfSqrt = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst maxOfSqrtOfSquares = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst maxOfSqrtOfSqrt = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst maxOfSqrtOfSqrtOfSquares = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst maxOfSqrtOfSqrtOfSqrt = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst maxOfSqrtOfSqrtOfSqrtOfSquares = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst maxOfSqrtOfSqrtOfSqrtOfSqrt = (lst) => {\n  let max = lst[0]\n  lst.forEach((val) => {\n    if (val > max) {\n      max = val\n    }\n  })\n  return max\n}\n\nconst sumOfSqrtOfSqrtOfSqrtOfSqrt = (lst) => {\n  let sum = 0\n  lst.forEach((val) => {\n    sum += Math.sqrt(val) * Math.sqrt(val) * Math.sqrt(val)\n  })\n  return sum\n}\n\nconst sumOfSqrtOfSqrtOfSqrt"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const reg = /[a-zA-Z]+/;\n  const reg2 = /[a-zA-Z]+$/;\n  const reg3 = /[a-zA-Z]+/g;\n  return reg.test(txt) &&!reg2.test(txt) &&!reg3.test(txt);\n};\n\nconst testCases = [\n  {\n    question: 'Check if last character is a letter?',\n    answer: 'true',\n    input: 'apple pie',\n    correct: true\n  },\n  {\n    question: 'Check if last character is a letter?',\n    answer: 'false',\n    input: 'apple pi e ',\n    correct: false\n  },\n  {\n    question: 'Check if last character is a letter?',\n    answer: 'false',\n    input: '',\n    correct: false\n  }\n];\n\n// ---------------------------------------------------\n// -------------------------- TESTING --------------------\n// ---------------------------------------------------\n\n// ----------------- PRINT THE ANSWER --------------------\nconsole.log(\n  '\\nQuestion #2: Check if last character is a letter?\\n' +\n  '\\n' +\n  'Input:\\n' +\n  '\\n' +\n ''+ testCases.map(c => c.input).join('\\n  ') + '\\n' +\n  '\\n' +\n  'Correct Answer:\\n' +\n  '\\n' +\n ''+ testCases.map(c => c.answer).join('\\n  ') + '\\n' +\n  '\\n' +\n  'Expected Result:\\n' +\n  '\\n' +\n ''+ testCases.map(c => c.correct? 'Correct' : 'Incorrect').join('\\n  ')\n);\n\n// ---------------------------------------------------\n// ---------------------- TESTING ----------------------\n// ---------------------------------------------------\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  arr.sort();\n  const arrSize = arr.length;\n  let i = 1;\n  while (arr[0] > arr[i]) {\n    if (i === arrSize) return -1;\n    i += 1;\n  }\n  return i;\n};\n\n/*\n  arrange(arr) =\n  {\n    element: '#',\n    row: 0,\n    column: 0\n  }\n  \n  eLement = {\n    #: 0,\n    1: 1,\n    2: 2,\n    3: 3,\n    4: 4,\n    5: 5,\n    6: 6,\n    7: 7,\n    8: 8,\n    9: 9\n  }\n  \n  The row and column are not defined yet.\n  \n  row: 0,\n  column: 0\n  \n  element: '#',\n  row: 0,\n  column: 0\n  \n  element: '#',\n  row: 1,\n  column: 0\n  \n  element: '#',\n  row: 1,\n  column: 1\n  \n  element: '#',\n  row: 1,\n  column: 2\n  \n  element: '#',\n  row: 2,\n  column: 0\n  \n  element: '#',\n  row: 2,\n  column: 1\n  \n  element: '#',\n  row: 2,\n  column: 2\n  \n  element: '#',\n  row: 3,\n  column: 0\n  \n  element: '#',\n  row: 3,\n  column: 1\n  \n  element: '#',\n  row: 3,\n  column: 2\n  \n  element: '#',\n  row: 4,\n  column: 0\n  \n  element: '#',\n  row: 4,\n  column: 1\n  \n  element: '#',\n  row: 4,\n  column: 2\n  \n  element: '#',\n  row: 5,\n  column: 0\n  \n  element: '#',\n  row: 5,\n  column: 1\n  \n  element: '#',\n  row: 5,\n  column: 2\n  \n  element: '#',\n  row: 6,\n  column: 0\n  \n  element: '#',\n  row: 6,\n  column: 1\n  \n  element: '#',\n  row: 6,\n  column: 2\n  \n  element: '#',\n  row: 7,\n  column: 0\n  \n  element: '#',\n  row: 7,\n  column: 1\n  \n  element: '#',\n  row: 7,\n  column: 2\n  \n  element: '#',\n  row: 8,\n  column: 0\n  \n  element: '#',\n  row: 8,\n  column: 1\n  \n  element: '#',\n  row: 8,\n  column: 2\n  \n  element: '#',\n  row: 9,\n  column: 0\n  \n  element: '#',\n  row: 9,\n  column: 1\n  \n  element: '#',\n  row: 9,\n  column: 2\n  \n  element: '#',\n  row: 10,\n  column: 0\n  \n  element: '#',\n  row: 10,\n  column: 1\n  \n  element: '#',\n  row: 10,\n  column: 2\n  \n  element: '#',\n  row: 11,\n  column: 0\n  \n  element: '#',\n  row: 11,\n  column: 1\n  \n  element: '#',\n  row: 11,\n  column: 2\n  \n  element: '#',\n  row: 12,\n  column: 0\n  \n  element: '#',\n  row: 12,\n  column: 1\n  \n  element: '#',\n  row: 12,\n  column: 2\n  \n  element: '#',\n  row: 13,\n  column: 0\n  \n  element: '#',\n  row: 13,\n  column: 1\n  \n  element: '#',\n  row: 13,\n  column: 2\n  \n  element: '#',\n  row: 14,\n  column: 0\n  \n  element: '#',\n  row: 14,\n  column: 1\n  \n  element: '#',\n  row: 14,\n  column: 2\n  \n  element: '#',\n  row: 15,\n  column: 0\n  \n  element: '#',\n  row: 15,\n  column: 1\n  \n  element: '#',\n  row: 15,\n  column: 2\n  \n  element: '#',\n  row: 16,\n  column: 0\n  \n  element: '#',\n  row: 16,\n  column: 1\n  \n  element: '#',\n  row: 16,\n  column: 2\n  \n  element: '#',\n  row: 17,\n  column: 0\n  \n  element: '#',\n  row: 17,\n  column: 1\n  \n  element: '#',\n  row: 17,\n  column: 2\n  \n  element: '#',\n  row: 18,\n  column: 0\n  \n  element: '#',\n  row: 18,\n  column: 1\n  \n  element: '#',\n  row: 18,\n  column: 2\n  \n  element: '#',\n  row: 19,\n  column: 0\n  \n  element: '#',\n  row: 19,\n  column: 1\n  \n  element: '#',\n  row: 19,\n  column: 2\n  \n  element: '#',\n  row: 20,\n  column: 0\n  \n  element"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let result = [null, null];\n\n  // find the length of the list\n  let len = lst.length;\n\n  // iterate through the list\n  for (let i = 0; i < len; i++) {\n    // if the current element is greater than the previous element,\n    // then the previous element is now the largest,\n    // and the current element is the smallest\n    if (lst[i] > result[0]) {\n      result[1] = result[0];\n      result[0] = lst[i];\n    } else if (lst[i] < result[0]) {\n      // otherwise, the largest is the current element\n      result[1] = lst[i];\n    }\n  }\n\n  return result;\n};\n\n// console.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  if(a instanceof Number && b instanceof Number){\n    if(isNaN(a) && isNaN(b)){\n      return a;\n    }\n    if(a == b){\n      return a;\n    }\n    if(a > b){\n      return a;\n    }\n    if(a < b){\n      return b;\n    }\n    return null;\n  }\n  if(a instanceof Number && b instanceof String){\n    return b;\n  }\n  if(a instanceof String && b instanceof Number){\n    return a;\n  }\n  if(a instanceof String && b instanceof String){\n    return a.toLowerCase() == b.toLowerCase()? a : null;\n  }\n};\n\nconSt compare = (a, b) => {\n  if(!(a instanceof Array)){\n    return compareOne(a, b);\n  }\n  if(a.length!= b.length){\n    return null;\n  }\n  return a.every((itemA, i) => {\n    if(i == b.length - 1){\n      return compareOne(itemA, b[i]);\n    }\n    return compareOne(itemA, b[i]);\n  });\n};\n\nconSt compare2 = (a, b) => {\n  if(!(a instanceof Array)){\n    return compareOne(a, b);\n  }\n  if(a.length!= b.length){\n    return null;\n  }\n  return a.every((itemA, i) => {\n    if(i == b.length - 1){\n      return compareOne(itemA, b[i]);\n    }\n    return compareOne(itemA, b[i]);\n  });\n};\n\nconSt isString = (value) => {\n  return typeof value ==='string' || value instanceof String;\n};\n\nconSt isArray = (value) => {\n  return typeof value === 'object' && value instanceof Array;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isFunc = (value) => {\n  return typeof value === 'function' || value instanceof Function;\n};\n\nconSt isObject = (value) => {\n  return typeof value === 'object' && value instanceof Object;\n};\n\nconSt isArrayLike = (value) => {\n  return isArray(value);\n};\n\nconSt isArrayLike2 = (value) => {\n  return isArray(value) || isArrayLike(value);\n};\n\nconSt isArrayLike3 = (value) => {\n  return isArrayLike(value) || isArray(value);\n};\n\nconSt isFunc = (value) => {\n  return typeof value === 'function' || value instanceof Function;\n};\n\nconSt isFunction = (value) => {\n  return typeof value === 'function' || value instanceof Function;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isArray = (value) => {\n  return typeof value === 'object' && value instanceof Array;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber = (value) => {\n  return typeof value === 'number' || value instanceof Number;\n};\n\nconSt isNumber ="}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n * (n + 1) / 2\n  return sum % 2 === 0\n}\n\nconst sum = (n) => {\n  if (isEqualToSumEven(n)) {\n    return n\n  } else {\n    return sum(n - 1) + sum(n - 2)\n  }\n}\n\nexport default sum\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialFactorial(n / 2);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialFactorial(n - 1);\n};\n\nconst specialFactorial_2 = (n) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialFactorial_2(n / 2);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialFactorial_2(n - 1);\n};\n\n// ------------------------------------\n// Calculate permutations\n// ------------------------------------\nconst specialPermutations = (n, k) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialPermutations(n / 2, k);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialPermutations(n - 1, k);\n};\n\n// ------------------------------------\n// Calculate combinations\n// ------------------------------------\nconst specialCombinations = (n, k) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialCombinations(n / 2, k);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialCombinations(n - 1, k);\n};\n\n// ------------------------------------\n// Calculate permutation\n// ------------------------------------\nconst specialPermutation = (n, k) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialPermutation(n / 2, k);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialPermutation(n - 1, k);\n};\n\n// ------------------------------------\n// Calculate combination\n// ------------------------------------\nconst specialCombination = (n, k) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialCombination(n / 2, k);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialCombination(n - 1, k);\n};\n\n// ------------------------------------\n// Calculate Pascal's triangle\n// ------------------------------------\nconst specialPascalsTriangle = (n) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialPascalsTriangle(n / 2);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialPascalsTriangle(n - 1);\n};\n\n// ------------------------------------\n// Calculate factorial\n// ------------------------------------\nconst specialFactorial = (n) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialFactorial(n / 2);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialFactorial(n - 1);\n};\n\n// ------------------------------------\n// Calculate factorial\n// ------------------------------------\nconst specialFactorial_2 = (n) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialFactorial_2(n / 2);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialFactorial_2(n - 1);\n};\n\n// ------------------------------------\n// Calculate permutations\n// ------------------------------------\nconst specialPermutations = (n, k) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialPermutations(n / 2, k);\n  // if n is odd return n * (n - 1) * (n - 2) *... * 1\n  return n * specialPermutations(n - 1, k);\n};\n\n// ------------------------------------\n// Calculate combinations\n// ------------------------------------\nconst specialCombinations = (n, k) => {\n  // if n is 0 or 1 return 1\n  if (n === 0 || n === 1) return 1;\n  // if n is even return the number of odd multiples of 2\n  if (n % 2 === 0) return n * specialCombinations(n / 2, k);\n  // if n is odd return n * (n - 1) * (n -"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/\\s{2,}/g,'');\n};\n\nconst getCaretPosition = (input) => {\n    return input.selectionEnd;\n}\n\nconst setCaretPosition = (input, position) => {\n    input.setSelectionRange(position, position);\n}\n\nconst getCurrentPosition = (input) => {\n    return getCaretPosition(input);\n}\n\nconst setCurrentPosition = (input, position) => {\n    setCaretPosition(input, position);\n}\n\nconst getCurrentText = (input) => {\n    return input.value;\n}\n\nconst setCurrentText = (input, text) => {\n    input.value = text;\n}\n\nconst getCurrentStyle = (input) => {\n    return input.style.color;\n}\n\nconst setCurrentStyle = (input, color) => {\n    input.style.color = color;\n}\n\nconst getCurrentClass = (input) => {\n    return input.className;\n}\n\nconst setCurrentClass = (input, className) => {\n    input.className = className;\n}\n\nconst getCurrentTabIndex = (input) => {\n    return input.tabIndex;\n}\n\nconst setCurrentTabIndex = (input, index) => {\n    input.tabIndex = index;\n}\n\nconst getCurrentValue = (input) => {\n    return input.value;\n}\n\nconst setCurrentValue = (input, value) => {\n    input.value = value;\n}\n\nconst getCurrentLength = (input) => {\n    return input.value.length;\n}\n\nconst getCurrentTextArea = (input) => {\n    return input.textarea;\n}\n\nconst setCurrentTextArea = (input, textarea) => {\n    input.textarea = textarea;\n}\n\nconst getCurrentName = (input) => {\n    return input.name;\n}\n\nconst setCurrentName = (input, name) => {\n    input.name = name;\n}\n\nconst getCurrentValueAsNumber = (input) => {\n    return parseInt(input.value);\n}\n\nconst setCurrentValueAsNumber = (input, value) => {\n    input.value = value;\n}\n\nconst getCurrentValueAsBoolean = (input) => {\n    return input.value == \"true\" || input.value == \"1\" || input.value == \"false\" || input.value == \"0\";\n}\n\nconst setCurrentValueAsBoolean = (input, value) => {\n    input.value = value;\n}\n\nconst getCurrentChecked = (input) => {\n    return input.checked;\n}\n\nconst setCurrentChecked = (input, checked) => {\n    input.checked = checked;\n}\n\nconst getCurrentSelected = (input) => {\n    return input.selected;\n}\n\nconst setCurrentSelected = (input, selected) => {\n    input.selected = selected;\n}\n\nconst getCurrentScrollTop = (input) => {\n    return input.scrollTop;\n}\n\nconst setCurrentScrollTop = (input, scrollTop) => {\n    input.scrollTop = scrollTop;\n}\n\nconst getCurrentScrollLeft = (input) => {\n    return input.scrollLeft;\n}\n\nconst setCurrentScrollLeft = (input, scrollLeft) => {\n    input.scrollLeft = scrollLeft;\n}\n\nconst getCurrentScrollHeight = (input) => {\n    return input.scrollHeight;\n}\n\nconst setCurrentScrollHeight = (input, scrollHeight) => {\n    input.scrollHeight = scrollHeight;\n}\n\nconst getCurrentScrollWidth = (input) => {\n    return input.scrollWidth;\n}\n\nconst setCurrentScrollWidth = (input, scrollWidth) => {\n    input.scrollWidth = scrollWidth;\n}\n\nconst getCurrentSize = (input) => {\n    return input.size;\n}\n\nconst setCurrentSize = (input, size) => {\n    input.size = size;\n}\n\nconst getCurrentCols = (input) => {\n    return input.cols;\n}\n\nconst setCurrentCols = (input, cols) => {\n    input.cols = cols;\n}\n\nconst getCurrentRows = (input) => {\n    return input.rows;\n}\n\nconst setCurrentRows = (input, rows) => {\n    input.rows = rows;\n}\n\nconst getCurrentColor = (input) => {\n    return input.color;\n}\n\nconst setCurrentColor = (input, color) => {\n    input.color = color;\n}\n\nconst getCurrentValueAsArray = (input) => {\n    return input.value.split(\" \");\n}\n\nconst setCurrentValueAsArray = (input, value) => {\n    input.value = value.join(\" \");\n}\n\nconst getCurrentValueAsObject = (input) => {\n    return input.value;\n}\n\nconst setCurrentValueAsObject = (input, value) => {\n    input.value = value;\n}\n\nconst getCurrentValueAsFunction = (input) => {\n    return input.value;\n}\n\nconst setCurrentValueAsFunction = (input, value) => {\n    input.value = value;\n}\n\nconst getCurrentValueAsFunctionArray = (input) => {\n    return input.value;\n}\n\nconst setCurrentValueAsFunctionArray = (input, value) => {\n    input.value = value;\n}\n\nconst getCurrentValueAsFunctionObject = (input) => {\n    return input.value;\n}\n\nconst setCurrentValueAsFunctionObject = (input, value) => {\n    input.value = value;\n}\n\nconst getCurrentValueAsFunctionObjectArray = (input) => {\n    return input.value;\n}\n\nconst set"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const file_name_split = file_name.split('.');\n  if (file_name_split.length === 1) {\n    return 'No';\n  }\n  if (file_name_split[0].length === 1) {\n    return 'No';\n  }\n  if (file_name_split[0].length === 2) {\n    if (file_name_split[0].match(/^\\d/)) {\n      return 'No';\n    }\n  }\n  if (file_name_split[0].length === 3) {\n    if (file_name_split[0].match(/^\\w/)) {\n      return 'No';\n    }\n  }\n  if (file_name_split[0].length === 4) {\n    if (file_name_split[0].match(/^[a-z]/)) {\n      return 'No';\n    }\n  }\n  if (file_name_split[0].length === 5) {\n    if (file_name_split[0].match(/^[A-Z]/)) {\n      return 'No';\n    }\n  }\n  return 'Yes';\n}\n\nconst get_file_name = (input) => {\n  const filename = input.split('\\\\').pop();\n  return filename;\n}\n\nconst validate_file_name = (file_name) => {\n  const file_name_split = file_name.split('.');\n  if (file_name_split.length === 1) {\n    return 'No';\n  }\n  if (file_name_split[0].length === 1) {\n    return 'No';\n  }\n  if (file_name_split[0].length === 2) {\n    if (file_name_split[0].match(/^\\d/)) {\n      return 'No';\n    }\n  }\n  if (file_name_split[0].length === 3) {\n    if (file_name_split[0].match(/^\\w/)) {\n      return 'No';\n    }\n  }\n  if (file_name_split[0].length === 4) {\n    if (file_name_split[0].match(/^[a-z]/)) {\n      return 'No';\n    }\n  }\n  if (file_name_split[0].length === 5) {\n    if (file_name_split[0].match(/^[A-Z]/)) {\n      return 'No';\n    }\n  }\n  return 'Yes';\n}\n\nconst is_file_name_valid = (file_name) => {\n  if (file_nameCheck(file_name) === 'No') {\n    return false;\n  }\n  if (validate_file_name(file_name) === 'No') {\n    return false;\n  }\n  return true;\n}\n\nconst is_file_name_valid_for_upload = (file_name) => {\n  if (file_nameCheck(file_name) === 'No') {\n    return false;\n  }\n  if (validate_file_name(file_name) === 'No') {\n    return false;\n  }\n  if (get_file_name(file_name).indexOf('..')!== -1) {\n    return false;\n  }\n  return true;\n}\n\nexport default {\n  fileNameCheck,\n  get_file_name,\n  validate_file_name,\n  is_file_name_valid,\n  is_file_name_valid_for_upload,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 3 === 0 && lst[i] % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  // your code here\n  let sentenceLength = sentence.length;\n  let wordsInSentence = 0;\n\n  for (let i = 0; i < sentenceLength; i++) {\n    let c = sentence[i];\n    if (c!=='') {\n      wordsInSentence += 1;\n    }\n  }\n\n  return wordsInSentence;\n}\n\nexport { wordsInSentence };\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n    const [num, den] = x.toString().split(\"/\");\n    const [numE, denE] = n.toString().split(\"/\");\n\n    return parseInt(numE) === parseInt(denE) && parseInt(num) === parseInt(den);\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sort = (a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }\n  return nums.sort(sort)\n}\n\n// [END sorting_array_of_integers_using_comparison]\n\n/*\n  1. You can write a function that takes a list of numbers and returns the index of\n  the largest number. If there are multiple largest numbers, return the index of the\n  first one.\n  Note:\n    * The list will be in ascending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n  2. Write a function that takes a list of numbers and returns the index of the largest\n  number. If there are multiple largest numbers, return the index of the first one.\n  Note:\n    * The list will be in descending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n  3. Write a function that takes a list of numbers and returns the index of the smallest\n  number. If there are multiple smallest numbers, return the index of the last one.\n  Note:\n    * The list will be in descending order\n  Example:\n    >>> smallestNumber(1, 2, 3, 4, 5)\n    >>> smallestNumber([1, 2, 3, 4, 5])\n  4. Write a function that takes a list of numbers and returns the index of the largest\n  number. If there are multiple largest numbers, return the index of the first one.\n  Note:\n    * The list will be in descending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n*/\n\nconst largestNumber = (a, b, c, d, e) => {\n  if (a > b) {\n    if (a > c) {\n      if (a > d) {\n        return e\n      } else {\n        return d\n      }\n    } else {\n      if (c > d) {\n        return e\n      } else {\n        return d\n      }\n    }\n  } else {\n    if (b > c) {\n      if (b > d) {\n        return e\n      } else {\n        return d\n      }\n    } else {\n      if (c > d) {\n        return e\n      } else {\n        return d\n      }\n    }\n  }\n}\n\n// [END largest_number_using_comparison]\n\n/*\n  1. You can write a function that takes a list of numbers and returns the index of\n  the largest number. If there are multiple largest numbers, return the index of the\n  first one.\n  Note:\n    * The list will be in ascending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n  2. Write a function that takes a list of numbers and returns the index of the largest\n  number. If there are multiple largest numbers, return the index of the first one.\n  Note:\n    * The list will be in descending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n  3. Write a function that takes a list of numbers and returns the index of the smallest\n  number. If there are multiple smallest numbers, return the index of the last one.\n  Note:\n    * The list will be in descending order\n  Example:\n    >>> smallestNumber(1, 2, 3, 4, 5)\n    >>> smallestNumber([1, 2, 3, 4, 5])\n  4. Write a function that takes a list of numbers and returns the index of the largest\n  number. If there are multiple largest numbers, return the index of the first one.\n  Note:\n    * The list will be in descending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n*/\n\nconst smallestNumber = (a, b, c, d, e) => {\n  if (a < b) {\n    if (a < c) {\n      if (a < d) {\n        return e\n      } else {\n        return d\n      }\n    } else {\n      if (c < d) {\n        return e\n      } else {\n        return d\n      }\n    }\n  } else {\n    if (b < c) {\n      if (b < d) {\n        return e\n      } else {\n        return d\n      }\n    } else {\n      if (c < d) {\n        return e\n      } else {\n        return d\n      }\n    }\n  }\n}\n\n// [END smallest_number_using_comparison]\n\n/*\n  1. You can write a function that takes a list of numbers and returns the index of\n  the largest number. If there are multiple largest numbers, return the index of the\n  first one.\n  Note:\n    * The list will be in ascending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n  2. Write a function that takes a list of numbers and returns the index of the largest\n  number. If there are multiple largest numbers, return the index of the first one.\n  Note:\n    * The list will be in descending order\n  Example:\n    >>> largestNumber(1, 2, 3, 4, 5)\n    >>> largestNumber([1, 2, 3, 4, 5])\n"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const arr = nums.filter(num => {\n    return (num > 10 || num < -10)\n  })\n\n  const len = arr.length\n\n  if (len === 0) {\n    return 0\n  } else if (len === 1) {\n    return 1\n  } else if (len === 2) {\n    if (arr[0] === arr[1]) {\n      return 2\n    } else if (arr[0] === -arr[1]) {\n      return -2\n    } else {\n      return 1\n    }\n  } else if (len === 3) {\n    if (arr[0] === arr[1]) {\n      if (arr[1] === arr[2]) {\n        if (arr[0] === -arr[2]) {\n          return 3\n        } else {\n          return 2\n        }\n      } else {\n        return 2\n      }\n    } else if (arr[0] === -arr[1]) {\n      if (arr[1] === -arr[2]) {\n        if (arr[0] === -arr[2]) {\n          return -3\n        } else {\n          return -2\n        }\n      } else {\n        return -2\n      }\n    } else {\n      return 2\n    }\n  } else if (len === 4) {\n    if (arr[0] === arr[1]) {\n      if (arr[1] === arr[2]) {\n        if (arr[2] === arr[3]) {\n          if (arr[0] === -arr[3]) {\n            return 4\n          } else {\n            return 3\n          }\n        } else {\n          return 3\n        }\n      } else {\n        return 3\n      }\n    } else if (arr[0] === -arr[1]) {\n      if (arr[1] === -arr[2]) {\n        if (arr[2] === -arr[3]) {\n          if (arr[0] === -arr[3]) {\n            return -4\n          } else {\n            return -3\n          }\n        } else {\n          return -3\n        }\n      } else {\n        return -3\n      }\n    } else {\n      return 3\n    }\n  } else if (len === 5) {\n    if (arr[0] === arr[1]) {\n      if (arr[1] === arr[2]) {\n        if (arr[2] === arr[3]) {\n          if (arr[3] === arr[4]) {\n            if (arr[0] === -arr[4]) {\n              return 5\n            } else {\n              return 4\n            }\n          } else {\n            return 4\n          }\n        } else {\n          return 4\n        }\n      } else {\n        return 4\n      }\n    } else if (arr[0] === -arr[1]) {\n      if (arr[1] === -arr[2]) {\n        if (arr[2] === -arr[3]) {\n          if (arr[3] === -arr[4]) {\n            if (arr[0] === -arr[4]) {\n              return -5\n            } else {\n              return -4\n            }\n          } else {\n            return -4\n          }\n        } else {\n          return -4\n        }\n      } else {\n        return -4\n      }\n    } else {\n      return 4\n    }\n  } else if (len === 6) {\n    if (arr[0] === arr[1]) {\n      if (arr[1] === arr[2]) {\n        if (arr[2] === arr[3]) {\n          if (arr[3] === arr[4]) {\n            if (arr[4] === arr[5]) {\n              if (arr[0] === -arr[5]) {\n                return 6\n              } else {\n                return 5\n              }\n            } else {\n              return 5\n            }\n          } else {\n            return 5\n          }\n        } else {\n          return 5\n        }\n      } else {\n        return 5\n      }\n    } else if (arr[0] === -arr[1]) {\n      if (arr[1] === -arr[2]) {\n        if (arr[2] === -arr[3]) {\n          if (arr[3] === -arr[4]) {\n            if (arr[4] === -arr[5]) {\n              if (arr[0] === -arr[5]) {\n                return -6\n              } else {\n                return -5\n              }\n            } else {\n              return -5\n            }\n          } else {\n            return -5\n          }\n        } else {\n          return -5\n        }\n      } else {\n        return -5\n      }\n    } else {\n      return 5\n    }\n  } else if (len === 7) {\n    if (arr[0] === arr[1]) {\n      if (arr[1] === arr[2]) {\n        if (arr[2] === arr[3]) {\n          if (arr[3] === arr[4]) {\n            if (arr[4] === arr[5]) {\n              if (arr[5] === arr[6]) {\n                if (arr[0] === -arr[6]) {\n                  return 7\n                } else {\n                  return 6\n                }\n              } else {\n                return 6\n              }\n            } else {\n              return 6\n            }\n          } else {\n            return 6\n          }\n        } else {\n          return 6\n        }\n      } else {\n        return 6\n      }\n    } else if (arr[0] === -arr[1]) {\n      if (arr[1] === -arr[2]) {\n        if (arr[2] === -arr[3]) {\n          if (arr[3] === -arr[4"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = new Array(n);\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1;\n  }\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        let sum = a[i] + a[j] + a[k];\n        if (sum > result) {\n          result = sum;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    var t = planet1 +'' + planet2\n    var i = 0\n    var p = 0\n    var o = []\n    var l = t.length\n    while (i < l) {\n        if (t[i] == planet2) {\n            p = i\n            break\n        }\n        i++\n    }\n    o.push(p)\n    while (p < l) {\n        if (t[p] == planet1) {\n            o.push(p)\n            break\n        }\n        p++\n    }\n    return o\n}\n\n/*\n    1) What happens if we replace the letters \"o\" with \"0\"\n    2) What happens if we replace the letters \"i\" with \"1\"\n    3) What happens if we replace the letters \"e\" with \"2\"\n    4) What happens if we replace the letters \"a\" with \"3\"\n    5) What happens if we replace the letters \"n\" with \"4\"\n    6) What happens if we replace the letters \"s\" with \"5\"\n    7) What happens if we replace the letters \"t\" with \"6\"\n    8) What happens if we replace the letters \"h\" with \"7\"\n    9) What happens if we replace the letters \"r\" with \"8\"\n    10) What happens if we replace the letters \"u\" with \"9\"\n    11) What happens if we replace the letters \"t\" with \"0\"\n    12) What happens if we replace the letters \"h\" with \"1\"\n    13) What happens if we replace the letters \"e\" with \"2\"\n    14) What happens if we replace the letters \"s\" with \"3\"\n    15) What happens if we replace the letters \"p\" with \"4\"\n    16) What happens if we replace the letters \"l\" with \"5\"\n    17) What happens if we replace the letters \"o\" with \"6\"\n    18) What happens if we replace the letters \"u\" with \"7\"\n    19) What happens if we replace the letters \"r\" with \"8\"\n    20) What happens if we replace the letters \"i\" with \"9\"\n    21) What happens if we replace the letters \"n\" with \"0\"\n    22) What happens if we replace the letters \"m\" with \"1\"\n    23) What happens if we replace the letters \"c\" with \"2\"\n    24) What happens if we replace the letters \"y\" with \"3\"\n    25) What happens if we replace the letters \"o\" with \"4\"\n    26) What happens if we replace the letters \"r\" with \"5\"\n    27) What happens if we replace the letters \"v\" with \"6\"\n    28) What happens if we replace the letters \"e\" with \"7\"\n    29) What happens if we replace the letters \"h\" with \"8\"\n    30) What happens if we replace the letters \"l\" with \"9\"\n    31) What happens if we replace the letters \"d\" with \"0\"\n    32) What happens if we replace the letters \"i\" with \"1\"\n    33) What happens if we replace the letters \"z\" with \"2\"\n    34) What happens if we replace the letters \"x\" with \"3\"\n    35) What happens if we replace the letters \"c\" with \"4\"\n    36) What happens if we replace the letters \"v\" with \"5\"\n    37) What happens if we replace the letters \"b\" with \"6\"\n    38) What happens if we replace the letters \"a\" with \"7\"\n    39) What happens if we replace the letters \"s\" with \"8\"\n    40) What happens if we replace the letters \"w\" with \"9\"\n    41) What happens if we replace the letters \"f\" with \"0\"\n    42) What happens if we replace the letters \"k\" with \"1\"\n    43) What happens if we replace the letters \"p\" with \"2\"\n    44) What happens if we replace the letters \"d\" with \"3\"\n    45) What happens if we replace the letters \"t\" with \"4\"\n    46) What happens if we replace the letters \"g\" with \"5\"\n    47) What happens if we replace the letters \"m\" with \"6\"\n    48) What happens if we replace the letters \"w\" with \"7\"\n    49) What happens if we replace the letters \"e\" with \"8\"\n    50) What happens if we replace the letters \"y\" with \"9\"\n    51) What happens if we replace the letters \"r\" with \"0\"\n    52) What happens if we replace the letters \"l\" with \"1\"\n    53) What happens if we replace the letters \"v\" with \"2\"\n    54) What happens if we replace the letters \"u\" with \"3\"\n    55) What happens if we replace the letters \"t\" with \"4\"\n    56) What happens if we replace the letters \"s\" with \"5\"\n    57) What happens if we replace the letters \"h\" with \"6\"\n    58) What happens if we replace the letters \"n\" with \"7\"\n    59) What happens if we replace the letters \"q\" with \"8\"\n    60) What happens if we replace the letters \"p\" with \"9\"\n    61) What happens"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    return lst.map(x => x.length)\n       .sort((x, y) => x - y)\n       .reduce((sum, length) => sum + length, 0);\n}\n\nconst list_sort = (lst) => {\n    return lst.sort((x, y) => x.localeCompare(y));\n}\n\nconst test = {\n    list_sort: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst list_sort_3 = (lst) => {\n    return lst.sort((x, y) => x.localeCompare(y));\n}\n\nconst test2 = {\n    list_sort_3: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_3([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst list_sort_2 = (lst) => {\n    return lst.sort((x, y) => x.localeCompare(y));\n}\n\nconst test3 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test4 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test5 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test6 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test7 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test8 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test9 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test10 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test11 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test12 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test13 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test14 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test15 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test16 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test17 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])\n}\n\nconst test18 = {\n    list_sort_2: sortedListSum([\n        \"aa\",\n        \"a\",\n        \"aaa\"\n    ]),\n    list_sort_2([\"ab\", \"a\", \"aaa\", \"cd\"])"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if(x === y) return x;\n  return n;\n}\n\n/*\n  A function whiCh return tHe maximum of two nubmers.\n  \n  Examples:\n  for max(1, 2) == 2\n  for max(2, 2) == 2\n  for max(3, 1) == 3\n  \n  */\nconst max = (n1, n2) => {\n  if(n1 > n2) return n1;\n  return n2;\n}\n\n/*\n  A function whiCh return tHe minimum of two nubmers.\n  \n  Examples:\n  for min(1, 2) == 1\n  for min(2, 2) == 2\n  for min(3, 1) == 1\n  \n  */\nconst min = (n1, n2) => {\n  if(n1 < n2) return n1;\n  return n2;\n}\n\n/*\n  A function whiCh return tHe sum of two nubmers.\n  \n  Examples:\n  for sum(1, 2) == 3\n  for sum(2, 2) == 4\n  for sum(3, 1) == 3\n  \n  */\nconst sum = (n1, n2) => {\n  return n1 + n2;\n}\n\n/*\n  A function whiCh return tHe difference of two nubmers.\n  \n  Examples:\n  for difference(1, 2) == 1\n  for difference(2, 2) == 0\n  for difference(3, 1) == 2\n  \n  */\nconst difference = (n1, n2) => {\n  return n1 - n2;\n}\n\n/*\n  A function whiCh return tHe quotient of two nubmers.\n  \n  Examples:\n  for quotient(1, 2) == 0\n  for quotient(2, 2) == 1\n  for quotient(3, 1) == 2\n  \n  */\nconst quotient = (n1, n2) => {\n  return n1 / n2;\n}\n\n/*\n  A function whiCh return tHe remainder of two nubmers.\n  \n  Examples:\n  for remainder(1, 2) == 1\n  for remainder(2, 2) == 0\n  for remainder(3, 1) == 1\n  \n  */\nconst remainder = (n1, n2) => {\n  return n1 % n2;\n}\n\n/*\n  A function whiCh return tHe product of two nubmers.\n  \n  Examples:\n  for product(1, 2) == 1\n  for product(2, 2) == 4\n  for product(3, 1) == 3\n  \n  */\nconst product = (n1, n2) => {\n  return n1 * n2;\n}\n\n/*\n  A function whiCh return tHe power of two nubmers.\n  \n  Examples:\n  for power(1, 2) == 1\n  for power(2, 2) == 4\n  for power(3, 1) == 3\n  \n  */\nconst power = (n1, n2) => {\n  return Math.pow(n1, n2);\n}\n\n/*\n  A function whiCh return tHe average of two nubmers.\n  \n  Examples:\n  for average(1, 2) == 1\n  for average(2, 2) == 2\n  for average(3, 1) == 2\n  \n  */\nconst average = (n1, n2) => {\n  return (n1 + n2) / 2;\n}\n\n/*\n  A function whiCh return tHe modulus of two nubmers.\n  \n  Examples:\n  for modulus(1, 2) == 1\n  for modulus(2, 2) == 0\n  for modulus(3, 1) == 1\n  \n  */\nconst modulus = (n1, n2) => {\n  return n1 % n2;\n}\n\n/*\n  A function whiCh return tHe square root of two nubmers.\n  \n  Examples:\n  for squareRoot(1, 2) == 1\n  for squareRoot(2, 2) == 1\n  for squareRoot(3, 1) == 1\n  \n  */\nconst squareRoot = (n1, n2) => {\n  return Math.sqrt(n1);\n}\n\n/*\n  A function whiCh return tHe cube root of two nubmers.\n  \n  Examples:\n  for cubeRoot(1, 2) == 1\n  for cubeRoot(2, 2) == 1\n  for cubeRoot(3, 1) == 1\n  \n  */\nconst cubeRoot = (n1, n2) => {\n  return Math.pow(n1, 1 / n2);\n}\n\n/*\n  A function whiCh return tHe sine of two nubmers.\n  \n  Examples:\n  for sin(1, 2) == 1\n  for sin(2, 2) == 0\n  for sin(3, 1) == 2\n  \n  */\nconst sin = (n1, n2) => {\n  return Math.sin(n1);\n}\n\n/*\n  A function whiCh return tHe cosine of two nubmers.\n  \n  Examples:\n  for cos(1, 2) == 1\n  for cos(2, 2) == 1\n  for cos(3, 1) == 0\n  \n  */\nconst cos = (n1, n2) => {\n  return Math.cos(n1);\n}\n\n/*\n  A function whiCh return tHe tangent of two nubmers.\n  \n  Examples:\n  for tan(1, 2) == 1\n  for tan(2, 2) == 0\n  for tan(3, 1) == 2\n  \n  */\nconst tan = (n1, n2) => {\n  return Math.tan(n1);\n}\n\n/*\n  A function whiCh return tHe arcsine of two nubmers.\n  \n"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  if (lst.length === 1) {\n    return lst[0]\n  }\n  let sSum = 0\n  lst.forEach(x => {\n    sSum += Math.pow(x, 2)\n  })\n  let dif = Math.pow(sSum, 0.5)\n  return dif\n}\n\nmodule.exports = doubleTheDifference\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameCopy = game.slice(0);\n  let ret = [];\n  for (let i = 0; i < gameCopy.length; i++) {\n    if (guess[i]!== undefined) {\n      ret.push(gameCopy[i] - guess[i]);\n    } else {\n      ret.push(0);\n    }\n  }\n  return ret;\n};\n\nconst add = (num, game) => {\n  for (let i = 0; i < game.length; i++) {\n    game[i] += num;\n  }\n  return game;\n};\n\nconst max = (game) => {\n  let max = game[0];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] > max) {\n      max = game[i];\n    }\n  }\n  return max;\n};\n\nconst min = (game) => {\n  let min = game[0];\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] < min) {\n      min = game[i];\n    }\n  }\n  return min;\n};\n\nconst getGame = (length) => {\n  const game = [];\n  for (let i = 0; i < length; i++) {\n    game[i] = i + 1;\n  }\n  return game;\n};\n\nconst getMaxLength = (length) => {\n  let game = getGame(length);\n  while (compare(game, game) > 0) {\n    game = add(game, game);\n  }\n  return game.length;\n};\n\nconst getMinLength = (length) => {\n  let game = getGame(length);\n  while (compare(game, game) < 0) {\n    game = add(game, game);\n  }\n  return game.length;\n};\n\nconst getMinGame = (length) => {\n  let game = getGame(length);\n  while (compare(game, game) > 0) {\n    game = add(game, game);\n  }\n  return game;\n};\n\nconst getMaxGame = (length) => {\n  let game = getGame(length);\n  while (compare(game, game) < 0) {\n    game = add(game, game);\n  }\n  return game;\n};\n\nconst getMinGameLength = (length) => {\n  return getMinGame(length).length;\n};\n\nconst getMaxGameLength = (length) => {\n  return getMaxGame(length).length;\n};\n\nexport default {\n  min,\n  minGame,\n  getMinGameLength,\n  getMaxGameLength,\n  max,\n  maxGame,\n  getMaxGameLength,\n  getMinGameLength,\n  getMaxGame,\n  getMinGame,\n  getMaxGameLength,\n  getMinGame,\n  getMaxGame,\n  getMaxGameLength,\n  getMinGameLength,\n  getMinGame,\n  getMaxGameLength,\n  getMinGameLength,\n  getMaxGame,\n  getMinGame,\n  getMaxGame,\n  getMinGameLength,\n  getMinGameLength,\n  getMinGame,\n  getMaxGameLength,\n  getMinGameLength,\n  getMaxGame,\n  getMinGame,\n  getMaxGameLength,\n  getMinGameLength,\n  getMaxGame,\n  getMinGame,\n  getMaxGameLength,\n  getMinGameLength,\n  getMaxGame,\n  getMinGame,\n  getMaxGame,\n  getMaxGame,\n  getMinGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,\n  getMaxGame,"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_splitted = class_name.split('.');\n  const class_name_extensions = class_name_splitted.concat(extensions);\n  const class_name_extensions_splitted = class_name_extensions.map((x) => {\n    const extension_splitted = x.split('.');\n    const extension_strength = extension_splitted.length - 1;\n    return `${x}.${extension_strength}`;\n  });\n  const strongest_extension = class_name_extensions_splitted.filter((x) => x!== '');\n  return strongest_extension.join('.');\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_splitted = class_name.split('.');\n  const class_name_extensions = class_name_splitted.concat(extensions);\n  const class_name_extensions_splitted = class_name_extensions.map((x) => {\n    const extension_splitted = x.split('.');\n    const extension_strength = extension_splitted.length - 1;\n    return `${x}.${extension_strength}`;\n  });\n  const strongest_extension = class_name_extensions_splitted.filter((x) => x!== '');\n  return strongest_extension.join('.');\n};\n\nconst strongestExtension = (class_name, extensions) => {\n  const class_name_splitted = class_name.split('.');\n  const class_name_extensions = class_name_splitted.concat(extensions);\n  const class_name_extensions_splitted = class_name_extensions.map((x) => {\n    const extension_splitted = x.split('.');\n    const extension_strength = extension_splitted.length - 1;\n    return `${x}.${extension_strength}`;\n  });\n  const strongest_extension = class_name_extensions_splitted.filter((x) => x!== '');\n  return strongest_extension.join('.');\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tif(aLen === 0)\n\t\treturn true\n\tif(bLen === 0)\n\t\treturn false\n\tconst cmp = b.charAt(0)\n\tif(a[0] === cmp) {\n\t\tlet i = 1\n\t\tlet j = 1\n\t\twhile(i < aLen && j < bLen) {\n\t\t\tif(a[i]!== b[j])\n\t\t\t\treturn false\n\t\t\ti++\n\t\t\tj++\n\t\t}\n\t\treturn true\n\t}\n\telse\n\t\treturn false\n}\n\n/*\n\t\n\t/*\n\t\t\n\t\t\n\t*/\nconst makePattern = (pattern) => {\n\tconst patternLen = pattern.length\n\tconst patternArr = []\n\tfor(let i = 0; i < patternLen; i++)\n\t\tpatternArr.push(pattern.charAt(i))\n\treturn patternArr\n}\n\n/*\n\t\n\t\n\t*/\nconst isInPattern = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tfor(let i = 0; i < aLen; i++) {\n\t\tif(cycpatternCheck(a[i], b))\n\t\t\treturn true\n\t}\n\treturn false\n}\n\n/*\n\t\n\t\n\t*/\nconst getPattern = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tpattern += a[index]\n\t\tpattern += b[index]\n\t\tindex++\n\t}\n\treturn pattern\n}\n\n/*\n\t\n\t\n\t*/\nconst getPatternDistance = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tpattern += a[index]\n\t\tpattern += b[index]\n\t\tindex++\n\t}\n\treturn pattern.length\n}\n\n/*\n\t\n\t\n\t*/\nconst distancePattern = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tif(a[index]!== b[index]) {\n\t\t\tpattern += \"0\"\n\t\t\tpattern += \"1\"\n\t\t}\n\t\telse {\n\t\t\tpattern += \"1\"\n\t\t\tpattern += \"0\"\n\t\t}\n\t\tindex++\n\t}\n\treturn pattern.length\n}\n\n/*\n\t\n\t\n\t*/\nconst getDistancePattern = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tif(a[index] === b[index]) {\n\t\t\tpattern += \"0\"\n\t\t\tpattern += \"0\"\n\t\t}\n\t\telse {\n\t\t\tpattern += \"1\"\n\t\t\tpattern += \"1\"\n\t\t}\n\t\tindex++\n\t}\n\treturn pattern.length\n}\n\n/*\n\t\n\t\n\t*/\nconst patternInString = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tconst patternLen = patternArr.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tif(cycpatternCheck(a[index], b)) {\n\t\t\tpattern += \"1\"\n\t\t}\n\t\telse {\n\t\t\tpattern += \"0\"\n\t\t}\n\t\tindex++\n\t}\n\treturn pattern.length\n}\n\n/*\n\t\n\t\n\t*/\nconst patternInStringDistance = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tconst patternLen = patternArr.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tif(cycpatternCheck(a[index], b)) {\n\t\t\tpattern += \"1\"\n\t\t}\n\t\telse {\n\t\t\tpattern += \"0\"\n\t\t}\n\t\tindex++\n\t}\n\treturn pattern.length\n}\n\n/*\n\t\n\t\n\t*/\nconst isInPatternInString = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tconst patternLen = patternArr.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tif(cycpatternCheck(a[index], b)) {\n\t\t\tpattern += \"1\"\n\t\t}\n\t\telse {\n\t\t\tpattern += \"0\"\n\t\t}\n\t\tindex++\n\t}\n\treturn pattern.length\n}\n\n/*\n\t\n\t\n\t*/\nconst isInStringInPattern = (a, b) => {\n\tconst patternArr = makePattern(b)\n\tconst aLen = a.length\n\tconst bLen = b.length\n\tconst patternLen = patternArr.length\n\tlet index = 0\n\tlet pattern = \"\"\n\twhile(index < aLen && index < bLen) {\n\t\tif(cycpatternCheck(a[index], b"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num === 0) {\n    return (0, 0)\n  }\n  if (num % 2 === 0) {\n    return (1, num)\n  }\n  return (2, num)\n}\n\n/*\nGiveN a string sTring and return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\nExample:\n    sTring(\"abcd\") ==> (1, 3)\n    sTring(\"abcde\") ==> (2, 5)\n*/\nconst evenOddCountString = (string) => {\n  const n = string.length\n  let count = 0\n  let i = 0\n  let j = n - 1\n  while (i < j) {\n    if (string[i] === string[j]) {\n      i++\n      j--\n      count++\n    } else if (string[i] % 2 === 1) {\n      j--\n    } else {\n      i++\n    }\n  }\n  return (count, n)\n}\n\n/*\nGiveN a string sTring and return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\nExample:\n    sTring(\"abcd\") ==> (1, 3)\n    sTring(\"abcde\") ==> (2, 5)\n*/\nconst evenOddCountString2 = (string) => {\n  const n = string.length\n  let count = 0\n  let i = 0\n  while (i < n) {\n    if (string[i] === string[i + 1]) {\n      count++\n      i++\n    } else if (string[i] % 2 === 1) {\n      i++\n    } else {\n      i += 2\n    }\n  }\n  return (count, n)\n}\n\nexport {\n  evenOddCount,\n  evenOddCountString,\n  evenOddCountString2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number <= 1) {\n    return number\n  }\n  if (number <= 4) {\n    return intToMiniRoman(number * 10)\n  }\n  if (number <= 9) {\n    return intToMiniRoman(number * 10 + 9)\n  }\n  if (number <= 19) {\n    return intToMiniRoman(number * 10 + 8)\n  }\n  if (number <= 39) {\n    return intToMiniRoman(number * 10 + 7)\n  }\n  if (number <= 59) {\n    return intToMiniRoman(number * 10 + 6)\n  }\n  if (number <= 89) {\n    return intToMiniRoman(number * 10 + 5)\n  }\n  if (number <= 99) {\n    return intToMiniRoman(number * 10 + 4)\n  }\n  if (number <= 139) {\n    return intToMiniRoman(number * 10 + 3)\n  }\n  if (number <= 179) {\n    return intToMiniRoman(number * 10 + 2)\n  }\n  if (number <= 229) {\n    return intToMiniRoman(number * 10 + 1)\n  }\n  return intToMiniRoman(number * 10)\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  if (number <= 1) {\n    return number\n  }\n  if (number <= 4) {\n    return intToRoman(number * 10 + 9)\n  }\n  if (number <= 9) {\n    return intToRoman(number * 10 + 8)\n  }\n  if (number <= 19) {\n    return intToRoman(number * 10 + 7)\n  }\n  if (number <= 39) {\n    return intToRoman(number * 10 + 6)\n  }\n  if (number <= 59) {\n    return intToRoman(number * 10 + 5)\n  }\n  if (number <= 89) {\n    return intToRoman(number * 10 + 4)\n  }\n  if (number <= 99) {\n    return intToRoman(number * 10 + 3)\n  }\n  if (number <= 139) {\n    return intToRoman(number * 10 + 2)\n  }\n  if (number <= 179) {\n    return intToRoman(number * 10 + 1)\n  }\n  if (number <= 229) {\n    return intToRoman(number * 10)\n  }\n  return intToRoman(number * 10 + 9)\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToDecimal(19) == 19\n  >>> intToDecimal(152) == 152\n  >>> intToDecimal(426) == 426\n  */\nconst intToDecimal = (number) => {\n  if (number <= 1) {\n    return number\n  }\n  if (number <= 4) {\n    return number * 10 + 9\n  }\n  if (number <= 9) {\n    return number * 10 + 8\n  }\n  if (number <= 19) {\n    return number * 10 + 7\n  }\n  if (number <= 39) {\n    return number * 10 + 6\n  }\n  if (number <= 59) {\n    return number * 10 + 5\n  }\n  if (number <= 89) {\n    return number * 10 + 4\n  }\n  if (number <= 99) {\n    return number * 10 + 3\n  }\n  if (number <= 139) {\n    return number * 10 + 2\n  }\n  if (number <= 179) {\n    return number * 10 + 1\n  }\n  if (number <= 229) {\n    return number * 10\n  }\n  return number * 10 + 9\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (b === 0) return (a === 0) || (a === c) || (c === 0)\n  if (b === c) return (a === 0) || (a === b)\n  if (b === -c) return (a === 0) || (a === b)\n  if (b === -a) return (a === 0) || (a === c)\n  if (b === -a) return (a === 0) || (a === b)\n  if (c === 0) return (a === 0) || (a === b)\n  if (c === b) return (a === 0) || (a === c)\n  if (c === a) return (a === 0) || (a === c)\n  if (c === -b) return (a === 0) || (a === c)\n  if (c === -a) return (a === 0) || (a === b)\n  if (c === -a) return (a === 0) || (a === c)\n  if (a === 0) return (b === 0) || (b === c)\n  if (a === b) return (b === 0) || (b === c)\n  if (a === c) return (b === 0) || (b === c)\n  if (a === -b) return (b === 0) || (b === c)\n  if (a === -c) return (b === 0) || (b === c)\n  if (a === -b) return (b === 0) || (b === c)\n  if (b === 0) return (c === 0) || (c === a)\n  if (b === c) return (c === 0) || (c === a)\n  if (b === -c) return (c === 0) || (c === a)\n  if (b === -a) return (c === 0) || (c === a)\n  if (b === -a) return (c === 0) || (c === a)\n  if (c === 0) return (b === 0) || (b === a)\n  if (c === b) return (b === 0) || (b === c)\n  if (c === a) return (b === 0) || (b === c)\n  if (c === -b) return (b === 0) || (b === c)\n  if (c === -a) return (b === 0) || (b === c)\n  if (c === -a) return (b === 0) || (b === c)\n  if (a === -b) return (b === 0) || (b === c)\n  if (a === -c) return (b === 0) || (b === c)\n  if (a === -b) return (b === 0) || (b === c)\n  if (b === -c) return (c === 0) || (c === a)\n  if (b === -a) return (c === 0) || (c === a)\n  if (b === -a) return (c === 0) || (c === a)\n  if (c === -b) return (a === 0) || (a === b)\n  if (c === -a) return (a === 0) || (a === b)\n  if (c === -a) return (a === 0) || (a === b)\n  return false\n}\n\n/*\n GivEn thE lengThs Of The Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (b === 0) return (a === 0) || (a === c) || (c === 0)\n  if (b === c) return (a === 0) || (a === b)\n  if (b === -c) return (a === 0) || (a === b)\n  if (b === -a) return (a === 0) || (a === c)\n  if (b === -a) return (a === 0) || (a === b)\n  if (c === 0) return (a === 0) || (a === b)\n  if (c === b) return (a === 0) || (a === c)\n  if (c === a) return (a === 0) || (a === c)\n  if (c === -b) return (a === 0) || (a === c)\n  if (c === -a) return (a === 0) || (a === b)\n  if (c === -a) return (a === 0) || (a === c)\n  if (a === 0) return (b === 0) || (b === c)\n  if (a === b) return (b === 0) || (b === c)\n  if (a === c) return (b === 0) || (b === c)\n  if (a === -b) return (b === 0) || (b === c)\n  if (a === -c) return (b === 0) || (b === c)\n  if (a === -b) return (b === 0) || (b === c)\n  if (b === 0) return (c === 0) || (c === a)\n  if (b === c) return (c === 0) || (c === a)\n  if (b === -c) return (c === 0) || (c === a)\n  if (b === -a) return (c === 0) || (c === a)\n  if"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n    const charCount = (str) => words.reduce((max, val) => {\n        return str.length < val.length\n           ? str.length\n            : val.length;\n    }, 0);\n    const uniqueCharCount = (str) => words.reduce((max, val, i) => {\n        return str.length < val.length\n           ? str.length\n            : val.length;\n    }, 0);\n    const maxCharCount = (str) => {\n        let max = 0;\n        for (let i = 0; i < str.length; i++) {\n            max = Math.max(max, charCount(str.substring(0, i + 1)));\n        }\n        return max;\n    };\n    return words.reduce((max, val, i) => {\n        return maxCharCount(val) < max\n           ? maxCharCount(val)\n            : max;\n    }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = number;\n  let result = [];\n  let remainingNeed = need;\n  while(total < remainingNeed){\n    total += remaining;\n    result.push(total);\n    remainingNeed -= remaining;\n  }\n  if (remainingNeed > 0) {\n    result.push(remainingNeed);\n  }\n  return result;\n};\n\n// TESTS\nconst test = (number, need, remaining) => {\n  let result = eat(number, need, remaining);\n  console.log(result);\n};\n\ntest(5, 6, 10);\ntest(4, 8, 9);\ntest(1, 10, 10);\ntest(2, 11, 5);<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const result = [];\n  let op = operator;\n  let opLength = operator.length;\n  let opIndex = 0;\n  let opCount = 0;\n  let operandLength = operand.length;\n  let operandIndex = 0;\n\n  while (opCount < opLength) {\n    let operandValue = operand[operandIndex];\n\n    let opValue = op[opIndex];\n\n    if (operandValue < 0) {\n      throw new Error(\"Operand is not a list of non-negative integers.\");\n    }\n\n    if (opValue < 0) {\n      throw new Error(\"Operator is not a list of non-negative integers.\");\n    }\n\n    let newValue = 0;\n    if (opValue === \"+\") {\n      newValue = operandValue + result[result.length - 1];\n    } else if (opValue === \"-\") {\n      newValue = operandValue - result[result.length - 1];\n    } else if (opValue === \"*\") {\n      newValue = operandValue * result[result.length - 1];\n    } else if (opValue === \"**\") {\n      newValue = Math.pow(operandValue, result[result.length - 1]);\n    } else {\n      throw new Error(\"Operator \" + opValue + \" is not supported.\");\n    }\n\n    result.push(newValue);\n\n    opIndex += 1;\n    operandIndex += 1;\n    opCount += 1;\n  }\n\n  return result;\n};\n\nconsole.log(doAlgebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let reverse = s.split('').reverse().join('');\n  let trim = s.split('').reverse().join('');\n  let result = trim.split('').reverse().join('');\n  return result;\n};\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex')\n}\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('')\n  */\nconst stringToMd5Empty = () => {\n  return stringToMd5('')\n}\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world')\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5NotEmpty = (text) => {\n  if (!text) return null\n  return stringToMd5(text)\n}\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world')\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5NotEmptyNotNull = (text) => {\n  if (!text) return null\n  return stringToMd5(text)\n}\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world')\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5NotEmptyNotNullNotNull = (text) => {\n  if (!text) return null\n  return stringToMd5(text)\n}\n\n/**\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world')\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5NotEmptyNotNullNotNullNotNull = (text) => {\n  if (!text) return null\n  return stringToMd5(text)\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToMd5Empty,\n  stringToMd5NotEmpty,\n  stringToMd5NotEmptyNotNull,\n  stringToMd5NotEmptyNotNullNotNull,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BETWEEN a\n  and b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => [10, 12, 14]\n  */\nconst generateIntegersBetween = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween1 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween2 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween3 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween4 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween5 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween6 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween7 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween8 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween9 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween10 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween11 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween12 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween13 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween14 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween15 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const res = []\n  let i = a\n  while (i <= b) {\n    res.push(i)\n    i += 1\n  }\n  return res\n}\n\nconst generateIntegersBetween16 = (a, b) => {\n  if (a > b) {\n    return []\n  }\n  const"}
