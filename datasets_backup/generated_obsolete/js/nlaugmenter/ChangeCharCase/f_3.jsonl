{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let result = false\n  for (let i = 0; i < numbers.length; i++) {\n    let j = i + 1\n    while (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        result = true\n        j++\n      } else if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        result = true\n        j++\n      } else {\n        break\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given a List of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements2 = (numbers, threshold) => {\n  let result = false\n  let index = -1\n  for (let i = 0; i < numbers.length; i++) {\n    let j = i + 1\n    while (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        index = j\n        j++\n      } else if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        index = j\n        j++\n      } else {\n        break\n      }\n    }\n    if (index > -1) {\n      result = true\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Given a List of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements3 = (numbers, threshold) => {\n  let result = false\n  let index = -1\n  for (let i = 0; i < numbers.length; i++) {\n    let j = i + 1\n    while (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        index = j\n        j++\n      } else if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        index = j\n        j++\n      } else {\n        break\n      }\n    }\n    if (index > -1) {\n      result = true\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Given a List of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements4 = (numbers, threshold) => {\n  let result = false\n  let index = -1\n  let last = -1\n  for (let i = 0; i < numbers.length; i++) {\n    let j = i + 1\n    while (j < numbers.length) {\n      if (numbers[i] === numbers[j]) {\n        index = j\n        j++\n      } else if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        index = j\n        j++\n      } else {\n        break\n      }\n    }\n    if (index > -1 && index > last) {\n      result = true\n      break\n    }\n    last = index\n  }\n  return result\n}\n\nmodule.exports = {\n  hasCloseElements,\n  hasCloseElements2,\n  hasCloseElements3,\n  hasCloseElements4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_str = paren_string.trim()\n  const paren_arr = paren_str.split(/\\s+/)\n  const nested_arr = []\n  for (let i = 0; i < paren_arr.length; i++) {\n    const str = paren_arr[i].trim()\n    if (str.length) {\n      const n_paren = 0\n      const n_brack = 0\n      const n_sqbr = 0\n      const str_len = str.length\n      let nest_str = ''\n      for (let j = 0; j < str_len; j++) {\n        const ch = str.charAt(j)\n        if (ch === '(') {\n          n_paren++\n          nest_str += ch\n        } else if (ch === ')') {\n          n_paren--\n          nest_str += ch\n        } else if (ch === '[' || ch === ']') {\n          n_brack++\n          nest_str += ch\n        } else if (ch === '{' || ch === '}') {\n          n_sqbr++\n          nest_str += ch\n        }\n      }\n      nested_arr.push(n_paren, n_brack, n_sqbr, nest_str)\n    }\n  }\n  return nested_arr\n}\n\n/**\n  * InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst getChildGrp = (paren_string) => {\n  const paren_str = paren_string.trim()\n  const paren_arr = paren_str.split(/\\s+/)\n  const nested_arr = []\n  for (let i = 0; i < paren_arr.length; i++) {\n    const str = paren_arr[i].trim()\n    if (str.length) {\n      const n_paren = 0\n      const n_brack = 0\n      const n_sqbr = 0\n      const str_len = str.length\n      let nest_str = ''\n      for (let j = 0; j < str_len; j++) {\n        const ch = str.charAt(j)\n        if (ch === '(') {\n          n_paren++\n          nest_str += ch\n        } else if (ch === ')') {\n          n_paren--\n          nest_str += ch\n        } else if (ch === '[' || ch === ']') {\n          n_brack++\n          nest_str += ch\n        } else if (ch === '{' || ch === '}') {\n          n_sqbr++\n          nest_str += ch\n        }\n      }\n      nested_arr.push(n_paren, n_brack, n_sqbr, nest_str)\n    }\n  }\n  return nested_arr\n}\n\n/**\n  * InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst getChildGrpByLength = (paren_string) => {\n  const paren_str = paren_string.trim()\n  const paren_arr = paren_str.split(/\\s+/)\n  const nested_arr = []\n  for (let i = 0; i < paren_arr.length; i++) {\n    const str = paren_arr[i].trim()\n    if (str.length) {\n      const n_paren = 0\n      const n_brack = 0\n      const n_sqbr = 0\n      const str_len = str.length\n      let nest_str = ''\n      for (let j = 0; j < str_len; j++) {\n        const ch = str.charAt(j)\n        if (ch === '(') {\n          n_paren++\n          nest_str += ch\n        } else if (ch === ')') {\n          n_paren--\n          nest_str += ch\n        } else if (ch === '[' || ch === ']') {\n          n_brack++\n          nest_str += ch\n        } else if (ch === '{' || ch === '}') {\n          n_sqbr++\n          nest_str += ch\n        }\n      }\n      nested_arr.push(n_paren, n_brack, n_sqbr, nest_str)\n    }\n  }\n  return nested_arr\n}\n\nexport default {"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let result = Math.floor(number)\n  let length = Math.floor(Math.log10(number))\n  let newNumber = number\n  if (length === 0) {\n    return number\n  }\n  if (length > 2) {\n    length = 2\n  }\n  while (result >= 10) {\n    length--\n    result = result / 10\n  }\n  return (result).toFixed(length)\n}\n\n/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumberToDecimal = (number) => {\n  let result = Math.floor(number)\n  let length = Math.floor(Math.log10(number))\n  let newNumber = number\n  if (length === 0) {\n    return number\n  }\n  if (length > 2) {\n    length = 2\n  }\n  while (result >= 10) {\n    length--\n    result = result / 10\n  }\n  return (result).toFixed(length)\n}\n\n/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumberToDecimalWithoutPrecision = (number) => {\n  let result = Math.floor(number)\n  return result.toFixed(0)\n}\n\n/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumberToDecimalWithoutPrecisionWithPrecision = (number, precision) => {\n  let result = Math.floor(number)\n  return result.toFixed(precision)\n}\n\nexport {\n  truncateNumber,\n  truncateNumberToDecimal,\n  truncateNumberToDecimalWithoutPrecision,\n  truncateNumberToDecimalWithoutPrecisionWithPrecision\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let counter = 0\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      counter++\n    }\n  }\n  return counter === operations.length\n}\n\n/*\n  >>> belowZero([1, 2, -4, 5])\n  true\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([-1, 2, 3])\n  true\n  >>> belowZero([1, -1, 3])\n  false\n  >>> belowZero([-1, 2, -1])\n  true\n  >>> belowZero([1, -1, -1])\n  false\n  >>> belowZero([-1, -1, -1])\n  true\n  >>> belowZero([1, -1, -1, 1])\n  true\n  */\nconst belowZeroInArray = (operations) => {\n  let counter = 0\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      counter++\n    }\n  }\n  return counter === operations.length\n}\n\nexport { belowZero, belowZeroInArray }\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const mean = sum / numbers.length;\n  const mad = numbers.reduce((a, b) => Math.abs(b - mean), 0);\n  return mad;\n};\n\nconst meanAbsoluteDeviationInRange = (numbers, range) => {\n  const min = range[0];\n  const max = range[1];\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] >= min && numbers[i] <= max) {\n      result.push(numbers[i]);\n    }\n  }\n  return meanAbsoluteDeviation(result);\n};\n\nconst testMeanAbsoluteDeviation = () => {\n  const test = [1, 2, 3, 4, 5];\n  console.log(meanAbsoluteDeviation(test));\n};\n\nconst testMeanAbsoluteDeviationRange = () => {\n  const test = [1, 2, 3, 4, 5];\n  console.log(meanAbsoluteDeviationInRange(test, [1, 3]));\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  meanAbsoluteDeviationInRange,\n  testMeanAbsoluteDeviation,\n  testMeanAbsoluteDeviationRange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    const len = numbers.length;\n    const isDelimeter = typeof delimeter === 'number';\n    const result = [];\n    const len = numbers.length;\n    const start = isDelimeter? 1 : 0;\n    let j = start;\n    let i = start;\n    while (j < len) {\n        result.push(numbers[i]);\n        if (isDelimeter && (i + 1) < len) {\n            result.push(delimeter);\n            i += 1;\n        } else if (isDelimeter && i === len - 1) {\n            result.push(delimeter);\n        }\n        j += 1;\n    }\n    return result;\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100], 4)\n  [1, 4, 2, 4, 3, 4, 5, 4, 6, 4, 7, 4, 8, 4, 9, 4, 10, 4, 11, 4, 12, 4, 13, 4, 14, 4, 15, 4, 16, 4, 17, 4, 18, 4, 19, 4, 20, 4, 21, 4, 22, 4, 23, 4, 24, 4, 25, 4, 26, 4, 27, 4, 28, 4, 29, 4, 30, 4, 31, 4, 32, 4, 33, 4, 34, 4, 35, 4, 36, 4, 37, 4, 38, 4, 39, 4, 40, 4, 41, 4, 42, 4, 43, 4, 44, 4, 45, 4, 46, 4, 47, 4, 48, 4, 49, 4, 50, 4, 51, 4, 52, 4, 53, 4, 54, 4, 55, 4, 56, 4, 57, 4, 58, 4, 59, 4, 60, 4, 61, 4, 62, 4, 63, 4, 64, 4, 65, 4, 66, 4, 67, 4, 68, 4, 69, 4, 70, 4, 71, 4, 72, 4, 73, 4, 74, 4, 75, 4, 76, 4, 77, 4, 78, 4, 79, 4, 80, 4, 81, 4, 82, 4, 83, 4, 84, 4, 85, 4, 86, 4, 87, 4, 88, 4, 89, 4, 90, 4, 91, 4, 92, 4, 93, 4, 94, 4, 95, 4, 96, 4, 97, 4, 98, 4, 99, 4, 100]\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302,"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const str_len = paren_string.length\n  const level = 0\n  const stack = []\n  let start_pos = 0\n  const get_level = (pos) => {\n    return stack[pos].length\n  }\n  const get_end_pos = (pos) => {\n    const start = stack[pos].length - 1\n    const end = start + 1\n    if (start >= str_len) return end\n    const last_char = paren_string[start]\n    const next_char = paren_string[end]\n    if (last_char === '(' && next_char === ')') {\n      return end\n    }\n    return start\n  }\n  const get_next_start = (pos) => {\n    return stack[pos].indexOf(paren_string[pos]) + 1\n  }\n  const get_next_end = (pos) => {\n    return stack[pos].indexOf(paren_string[pos + 1])\n  }\n  const pop = (pos) => {\n    const start = stack[pos].length - 1\n    const end = start + 1\n    if (start >= str_len) return null\n    const last_char = paren_string[start]\n    const next_char = paren_string[end]\n    if (last_char === '(' && next_char === ')') {\n      return stack.pop()\n    }\n    return null\n  }\n  const push = (start, end, level) => {\n    stack.push(paren_string.substring(start, end))\n    return level\n  }\n  const get_stack = () => {\n    return stack\n  }\n  let paren_counter = 0\n  while (paren_counter < str_len) {\n    if (paren_string[paren_counter] === '(') {\n      paren_counter++\n      const start_pos = paren_counter\n      const end_pos = get_end_pos(paren_counter)\n      const level = get_level(paren_counter)\n      const next_start = get_next_start(paren_counter)\n      const next_end = get_next_end(paren_counter)\n      const stack_level = push(start_pos, end_pos, level)\n      if (stack_level === level) {\n        paren_counter = next_end\n      } else {\n        paren_counter = next_start\n      }\n    } else if (paren_string[paren_counter] === ')') {\n      paren_counter++\n      const start_pos = paren_counter\n      const end_pos = get_end_pos(paren_counter)\n      const level = get_level(paren_counter)\n      const next_start = get_next_start(paren_counter)\n      const next_end = get_next_end(paren_counter)\n      const stack_level = pop(paren_counter)\n      if (stack_level === level) {\n        paren_counter = next_end\n      } else {\n        paren_counter = next_start\n      }\n    }\n  }\n  return stack\n}\n\nmodule.exports = parseNestedParens\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!strings ||!substring) {\n    return [];\n  }\n  const subStrings = strings.map(s => s.toLowerCase());\n  const index = subStrings.indexOf(substring.toLowerCase());\n  return index!== -1? subStrings.slice(index) : [];\n};\n\nmodule.exports = {\n  filterBySubstring,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6])\n  (45, 720)\n  */\nconst sumProduct2 = (numbers, int) => {\n  const isEmpty = (x, y) => (x === 0 || y === 0)\n  const product = 1\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (!isEmpty(numbers[i], product)) {\n      sum += numbers[i] * product\n    }\n    product *= numbers[i]\n  }\n  return sum\n}\n\nconst sumProduct3 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const product = 1\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (product!== 0) {\n      sum += numbers[i] * product\n    }\n    product *= numbers[i]\n  }\n  return sum\n}\n\nconst sumProduct4 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct5 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n  }\n  return (sum, product)\n}\n\nconst sumProduct6 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n    sum *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct7 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n    sum *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct8 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n    sum *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct9 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n    sum *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct10 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n    sum *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct11 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n    sum *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct12 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    if (sum!== 0) {\n      product *= sum\n    }\n    sum *= numbers[i]\n  }\n  return (sum, product)\n}\n\nconst sumProduct13 = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  let sum = 0\n  let product = 1\n  "}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = Math.max(...numbers);\n  const result = [];\n  const isMax = (num) => {\n    if (numbers.indexOf(num) === -1) {\n      return false;\n    }\n    result.push(num);\n    return true;\n  };\n\n  while (numbers.length) {\n    numbers.forEach(isMax);\n    numbers.splice(0, 1);\n  }\n\n  return result;\n};\n\n/*\n  THe maXimUM eLeMent of a giVen list of IntEgers, GenerAte a list of rOllIng\n  maXimUM eLeMent FOunD until given moMENt in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = Math.max(...numbers);\n  const result = [];\n  const isMax = (num) => {\n    if (numbers.indexOf(num) === -1) {\n      return false;\n    }\n    result.push(num);\n    return true;\n  };\n\n  while (numbers.length) {\n    numbers.forEach(isMax);\n    numbers.splice(0, 1);\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  rollingMax\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const { startsWith, endsWith } = String;\n  return endsWith(startsWith(string, string.split('').reverse().join('')), string.split('').reverse().join(''));\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort(range(100))\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sort = (array) => {\n  const { sort } = Array;\n  return sort(array);\n}\n\n/* a simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortBy = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByDescending = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.reverse);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByDescendingAndIncreasing = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.descendingAndIncreasing);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByDescendingAndDecreasing = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.descendingAndDecreasing);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByIncreasing = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.increasing);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByIncreasingAndDecreasing = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.increasingAndDecreasing);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByDecreasing = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.decreasing);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByDecreasingAndIncreasing = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.decreasingAndIncreasing);\n}\n\n/* A simple \"Sorting\" AlGorithm\n  This algorithm sorts an array in O(n log n) time.\n  >>> sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst sortByIncreasingAndDecreasing = (array, comparer) => {\n  const { sort } = Array;\n  return sort(array, comparer.increasingAndDecreasing);\n}\n\n/* A simple \"Sorting\" AlGor"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aa = a.split('')\n  const bb = b.split('')\n  const res = []\n  for (let i = 0; i < aa.length; i++) {\n    if (aa[i] === bb[i]) {\n      res.push(aa[i])\n    } else {\n      res.push(1)\n    }\n  }\n  return res.join('')\n}\n\n/*\n  Convert number X to binary with leading zeros.\n  >>> binary(3)\n  '11'\n  >>> binary(2)\n  '10'\n  >>> binary(1)\n  '01'\n  >>> binary(0)\n  '00'\n  >>> binary(-2)\n  '11'\n  >>> binary(10)\n  '1010'\n  >>> binary(11)\n  '1011'\n  >>> binary(12)\n  '1100'\n  >>> binary(13)\n  '1101'\n  >>> binary(14)\n  '1110'\n  >>> binary(15)\n  '1111'\n  >>> binary(-10)\n  '0110'\n  >>> binary(-11)\n  '0111'\n  >>> binary(-12)\n  '1000'\n  >>> binary(-13)\n  '1001'\n  >>> binary(-14)\n  '1010'\n  >>> binary(-15)\n  '1011'\n  >>> binary(1024)\n  '1111111110100'\n  */\nconst binary = n => {\n  let res = ''\n  while (n > 0) {\n    res = `${n & 1? '1' : '0'}${res}`\n    n = n >>> 1\n  }\n  return res\n}\n\nconst convert = (str) => {\n  let res = ''\n  for (let i = 0; i < str.length; i++) {\n    res += str[i].toUpperCase()\n  }\n  return res\n}\n\nconst isPalindrome = (str) => {\n  let reversed = convert(str)\n  return str === reversed\n}\n\nconst remove = (str, char) => {\n  return str.replace(char, '')\n}\n\nconst convertToRoman = (num) => {\n  let res = ''\n  let n = num\n  while (n > 0) {\n    res += roman(n % 10)\n    n = Math.floor(n / 10)\n  }\n  return res\n}\n\nconst roman = (num) => {\n  if (num === 1) {\n    return 'I'\n  } else if (num === 5) {\n    return 'V'\n  } else if (num === 9) {\n    return 'X'\n  } else if (num % 10 === 0) {\n    return roman(num % 10)\n  } else {\n    return `${num % 10}${roman(num % 10 - 1)}`\n  }\n}\n\nconst solve = (s) => {\n  let str = s\n  let res = ''\n  let stack = []\n  while (str.length > 0) {\n    if (str[0] === '0') {\n      stack.push(str.slice(1, str.length))\n      str = str.slice(1, str.length)\n    } else {\n      let last = stack.pop()\n      res += last + str[0]\n      str = str.slice(1, str.length)\n    }\n  }\n  return res\n}\n\nconst numberToRoman = (num) => {\n  let stack = []\n  while (num > 0) {\n    if (num >= 50) {\n      stack.push(`${num % 10}M`)\n      num = Math.floor(num / 10)\n    } else if (num >= 40) {\n      stack.push(`${num % 10}CM`)\n      num = Math.floor(num / 10)\n    } else if (num >= 30) {\n      stack.push(`${num % 10}D`)\n      num = Math.floor(num / 10)\n    } else if (num >= 20) {\n      stack.push(`${num % 10}CD`)\n      num = Math.floor(num / 10)\n    } else if (num >= 10) {\n      stack.push(`${num % 10}C`)\n      num = Math.floor(num / 10)\n    } else if (num >= 5) {\n      stack.push(`${num % 10}X`)\n      num = Math.floor(num / 10)\n    } else if (num >= 1) {\n      stack.push(`${num}`)\n      num = 0\n    }\n  }\n  return stack.reverse().join('')\n}\n\nconst isPalindrome = (str) => {\n  let reversed = convert(str)\n  return str === reversed\n}\n\nconst find = (str, char) => {\n  let i = str.indexOf(char)\n  return i === -1? -1 : i\n}\n\nconst reverse = (str) => {\n  return str.split('').reverse().join('')\n}\n\nconst stringToNumber = (str) => {\n  return parseInt(str, 10)\n}\n\nconst numberToString = (num) => {\n  return num.toString()\n}\n\nconst getLength = (str) => {\n  return str.length\n}\n\nconst stringToArray = (str) => {\n  return str.split('')\n}\n\nmodule.exports = {\n  convert,\n  isPalindrome,\n  remove,\n  convertToRoman,\n  solve,\n  numberToRoman,\n  isPalindrome,\n  find,\n  reverse,\n  stringToArray,\n  stringToNumber,\n  numberToString,\n  getLength,\n  binary,\n  reverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const longest = (x, y) => x.length > y.length? x : y;\n  const stringsOfSameLength = (x, y) => x.length === y.length;\n  const findLongest = (x, y) => x.length > y.length? x : y;\n  return strings.reduce(findLongest);\n};\n\nconsole.log(longest(['a', 'bb', 'ccc']));\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let i = 0;\n  let j = 0;\n  while (i < b) {\n    if (a % b === 0) {\n      return b;\n    }\n    i++;\n  }\n  return a;\n};\n\n//# sourceMappingURL=greatestCommonDivisor.js.map<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((arr, c) => {\n    arr = arr.concat(c + string.slice(0, c.length));\n    return arr;\n  }, []);\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcdef')\n  ['a', 'ab', 'abc', 'abcd', 'abcdef']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((arr, c) => {\n    arr = arr.concat(c + string.slice(0, c.length));\n    return arr;\n  }, []);\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcdef')\n  ['a', 'ab', 'abc', 'abcd', 'abcdef']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((arr, c) => {\n    arr = arr.concat(c + string.slice(0, c.length));\n    return arr;\n  }, []);\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcdef')\n  ['a', 'ab', 'abc', 'abcd', 'abcdef']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((arr, c) => {\n    arr = arr.concat(c + string.slice(0, c.length));\n    return arr;\n  }, []);\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcdef')\n  ['a', 'ab', 'abc', 'abcd', 'abcdef']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((arr, c) => {\n    arr = arr.concat(c + string.slice(0, c.length));\n    return arr;\n  }, []);\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcdef')\n  ['a', 'ab', 'abc', 'abcd', 'abcdef']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((arr, c) => {\n    arr = arr.concat(c + string.slice(0, c.length));\n    return arr;\n  }, []);\n};\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('ab')\n  ['a', 'ab']\n  >>> allPrefixes('abcd')\n  ['a', 'ab', 'abc', 'abcd']\n  >>> allPrefixes('abcdef')\n  ['a', 'ab', 'abc', 'abcd', 'abcdef']\n  */\nconst allPrefixes = (string) => {\n  return string.split('').reduce((arr, c) => {\n    arr = arr.concat(c + string.slice(0, c.length));\n    return arr;\n  }, []);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array(n + 1).join(' ')\n}\n\nconst string = () => {\n  /*\n  >>> string(0)\n  ''\n  >>> string(1)\n  '1'\n  >>> string(10)\n  '0123456789'\n  >>> string(10, '*')\n  '********'\n  >>> string(10, '-')\n  '-------'\n  */\n  const text = Array(10).fill('')\n  for (let i = 0; i < text.length; i++) {\n    text[i] = String.fromCharCode(i + 97)\n  }\n  return text.join('')\n}\n\nconst sum = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumInt = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntBool = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntBoolArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrArrArrArrArr = (num1, num2) => {\n  return num1 + num2\n}\n\nconst sumIntArrArrArrArrArrAr"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  return chars.reduce((prev, curr) => {\n    const index = chars.indexOf(curr)\n    if (index === -1) {\n      return prev + 1\n    }\n    return prev\n  }, 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let note_list = []\n  let current_note = ''\n  let current_note_dots = 0\n  let current_note_time = 0\n  let current_note_octave = 0\n  let current_note_note = 0\n  let current_note_note_string = ''\n  let current_note_is_lower = true\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      if (current_note_is_lower) {\n        current_note = current_note + 'o'\n        current_note_octave = current_note_octave + 1\n      } else {\n        current_note = current_note + 'o'\n      }\n    } else if (music_string[i] === 'o|') {\n      current_note_time = current_note_time + 1\n      current_note_dots = current_note_dots + 1\n    } else if (music_string[i] === '.') {\n      current_note_dots = current_note_dots + 1\n    } else if (music_string[i] === '|') {\n      current_note_time = current_note_time + 1\n      current_note_octave = current_note_octave + 1\n      current_note_note = current_note_note + 1\n      current_note_note_string = current_note_note_string + music_string[i]\n      current_note_is_lower =!current_note_is_lower\n    }\n  }\n\n  return [current_note_octave, current_note_time, current_note_note, current_note_dots, current_note_note_string]\n}\n\nmodule.exports = parseMusic\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let index = 0;\n  while (index < string.length - 1) {\n    if (string.includes(substring, index)) {\n      index = string.indexOf(substring, index + 1);\n    } else {\n      break;\n    }\n  }\n  return index;\n};\n\n/*\n  Let's check the result.\n  */\nconsole.log(howManyTimes('aaaaa', 'aa'));\nconsole.log(howManyTimes('aaaaa', 'aaa'));\nconsole.log(howManyTimes('aaaaa', 'aaaa'));\nconsole.log(howManyTimes('aaaaa', 'aaaaa'));\nconsole.log(howManyTimes('aaaaa', 'aaaaaaa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const num = numbers.trim();\n  let numArray = num.split('');\n  let sortedArray = [];\n  numArray.forEach(x => sortedArray.push(x));\n  sortedArray = sortedArray.sort((a, b) => a - b);\n  return sortedArray.join('');\n}\n\nconsole.log(sortNumbers('three one five'));\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = numbers.sort((a, b) => {\n    if (a < b) {\n      return -1\n    }\n    if (a > b) {\n      return 1\n    }\n    return 0\n  })\n  return sortedNumbers[sortedNumbers.length - 1]\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const max2 = max * 2\n  const min2 = min * 2\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      newNumbers.push(max2)\n    } else if (numbers[i] === min) {\n      newNumbers.push(min2)\n    } else {\n      newNumbers.push(numbers[i] / (max2 - min2))\n    }\n  }\n  return newNumbers\n}\n\n/**\n  GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  const max = Math.max(...numbers)\n  const min = Math.min(...numbers)\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === max) {\n      newNumbers.push(max)\n    } else if (numbers[i] === min) {\n      newNumbers.push(min)\n    } else {\n      newNumbers.push(numbers[i] / (max - min))\n    }\n  }\n  return newNumbers\n}\n\nexport { rescaleToUnit, rescaleToUnit2 }\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers2 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers3 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers4 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers5 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers6 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers7 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers8 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers9 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers10 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers11 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v!== 5);\n};\n\n/*\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [2, 3]\n  */\nconst filterIntegers12 = (values) => {\n  return values.filter(v => typeof v === 'number').map(v => v + 1).filter(v => v!== 5).map(v => v + 1).filter(v => v"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  # StrLen Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcd')\n  4\n  */\nconst str"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisors = [];\n  let i = 0;\n  let n = n;\n  while (n!== 1) {\n    if (n % 2 === 0) {\n      divisors.push(2);\n      n = n / 2;\n    } else {\n      divisors.push(n);\n      n = n - 1;\n    }\n    i += 1;\n  }\n  return divisors[i - 1];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const prime = () => {\n    let p = 0;\n    for (let i = 1; i <= n; i++) {\n      while (n % i === 0) {\n        p += 1;\n        n = n / i;\n      }\n    }\n    return p;\n  };\n  let factors = [];\n  let primeP = prime();\n  for (let i = 1; i <= primeP; i++) {\n    let factor = prime();\n    while (n % factor === 0) {\n      factors.push(factor);\n      n = n / factor;\n      factor = prime();\n    }\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let nums = [];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers.indexOf(numbers[i]) === -1) {\n      nums.push(numbers[i]);\n    }\n  }\n  return nums;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    return string.toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase2 = (string) => {\n    return string.toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase3 = (string) => {\n    return string.toUpperCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase4 = (string) => {\n    return string.toLowerCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase5 = (string) => {\n    return string.toUpperCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase6 = (string) => {\n    return string.toUpperCase().toUpperCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase7 = (string) => {\n    return string.toLowerCase().toLowerCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase8 = (string) => {\n    return string.toLowerCase().toUpperCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase9 = (string) => {\n    return string.toLowerCase().toUpperCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase10 = (string) => {\n    return string.toUpperCase().toLowerCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase11 = (string) => {\n    return string.toUpperCase().toUpperCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase12 = (string) => {\n    return string.toUpperCase().toUpperCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase13 = (string) => {\n    return string.toUpperCase().toLowerCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase14 = (string) => {\n    return string.toLowerCase().toLowerCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase15 = (string) => {\n    return string.toLowerCase().toUpperCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase16 = (string) => {\n    return string.toLowerCase().toUpperCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase17 = (string) => {\n    return string.toUpperCase().toLowerCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase18 = (string) => {\n    return string.toUpperCase().toLowerCase().toUpperCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase19 = (string) => {\n    return string.toUpperCase().toUpperCase().toLowerCase()\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase20 = (string) => {\n    return string.toUpperCase().toLowerCase().toUpperCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n// ConCateNate list oF numbers inTo a siNgle sTring\nconst concatenateNumbers = (numbers) => {\n  return numbers.reduce((acc, num) => acc + num, '');\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst concatenateStrings = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n// ConCateNate list oF numbers inTo a siNgle sTring\nconst concatenateNumbersInToStrings = (numbers, strings) => {\n  return numbers.reduce((acc, num) => acc + num + strings[num], '');\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst concatenateStringsInToNumbers = (strings, numbers) => {\n  return numbers.reduce((acc, num) => acc + strings[num], '');\n};\n\nconst add = (a, b) => {\n  return a + b;\n};\n\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n// ConCateNate list oF numbers inTo a siNgle sTring\nconst multiplyNumbers = (numbers, strings) => {\n  return numbers.reduce((acc, num) => acc + num * strings[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst multiplyStrings = (strings, numbers) => {\n  return numbers.reduce((acc, num) => acc + num * strings[num], 0);\n};\n\nconst subtract = (a, b) => {\n  return a - b;\n};\n\n// ConCateNate list oF numbers inTo a siNgle sTring\nconst subtractNumbers = (numbers, strings) => {\n  return numbers.reduce((acc, num) => acc + num - strings[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst subtractStrings = (strings, numbers) => {\n  return numbers.reduce((acc, num) => acc + num - strings[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst subtractStringsInToNumbers = (strings, numbers) => {\n  return numbers.reduce((acc, num) => acc + num - strings[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst subtractStringsInToNumbersInToStrings = (strings, numbers, strings2) => {\n  return numbers.reduce((acc, num) => acc + num - strings[num] - strings2[num], 0);\n};\n\nconst divide = (a, b) => {\n  return a / b;\n};\n\nconst divideNumbers = (numbers, strings) => {\n  return numbers.reduce((acc, num) => acc + num / strings[num], 0);\n};\n\nconst divideStrings = (strings, numbers) => {\n  return numbers.reduce((acc, num) => acc + num / strings[num], 0);\n};\n\nconst modulus = (a, b) => {\n  return a % b;\n};\n\nconst modulusNumbers = (numbers, strings) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num], 0);\n};\n\nconst modulusStrings = (strings, numbers) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst modulusStringsInToNumbers = (strings, numbers) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst modulusStringsInToNumbersInToStrings = (strings, numbers, strings2) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num] + strings2[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst modulusStringsInToNumbersInToStringsInToNumbers = (strings, numbers, strings2, numbers2) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num] + strings2[num] + numbers2[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst modulusStringsInToNumbersInToStringsInToNumbersInToStrings = (strings, numbers, strings2, numbers2, strings3) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num] + strings2[num] + numbers2[num] + strings3[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst modulusStringsInToNumbersInToStringsInToNumbersInToStringsInToNumbers = (strings, numbers, strings2, numbers2, strings3, numbers3) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num] + strings2[num] + numbers2[num] + strings3[num] + numbers3[num], 0);\n};\n\n// ConCateNate list oF strings inTo a siNgle sTring\nconst modulusStringsInToNumbersInToStringsInToNumbersInToStringsInToNumbersInToStrings = (strings, numbers, strings2, numbers2, strings3, numbers3, strings4) => {\n  return numbers.reduce((acc, num) => acc + num % strings[num] + strings2[num] + numbers2[num] + strings3[num] + numbers3[num] +"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.startsWith(prefix)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix2 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix3 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 0)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix4 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 1)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filterByPrefix5 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 2)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filterByPrefix6 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 3)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filterByPrefix7 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 4)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix8 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 5)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filterByPrefix9 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 6)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix10 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 7)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix11 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 8)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix12 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 9)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix13 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 10)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix14 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 11)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filterByPrefix15 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 12)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filterByPrefix16 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 13)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix17 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 14)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix18 = (strings, prefix) => {\n  return strings.filter((s) => {\n    return s.includes(prefix, 15)\n  })\n}\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix19 = (strings, prefix) => {"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*\n  The getNegative function in the previous example was a little bit\n  overcomplicated.  We can use a regular array to store negative\n  numbers and return a filtered array of the ones we care about.\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, 9, 123, 1]\n  */\nconst getNegative = (l) => {\n  return l.filter(x => x < 0)\n}\n\n/*\n  The getAbs function can take a list and return a list with all the\n  absolute values.\n  >>> getAbs([-1, 2, -4, 5, 6])\n  [1, 2, 4, 5, 6]\n  >>> getAbs([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getAbs = (l) => {\n  return l.map(x => Math.abs(x))\n}\n\n/*\n  The getSorted function can take a list and return a sorted list.\n  >>> getSorted([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> getSorted([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [1, 2, 3, 3, 4, 5, 9, 123, 1, -10, -3]\n  >>> getSorted([-5, 2, -4, 5, 6])\n  [-5, -4, -6, 5, 6]\n  */\nconst getSorted = (l) => {\n  return l.sort()\n}\n\n/*\n  We can use the filter function to return a list of even numbers\n  >>> getEven([2, 6, 8, 0, 4, 3])\n  [2, 4, 6]\n  >>> getEven([2, 6, 8, 0, 4, 3])\n  [2, 4, 6]\n  >>> getEven([1, 2, 5, 6, 7])\n  []\n  */\nconst getEven = (l) => {\n  return l.filter(x => x % 2 === 0)\n}\n\n/*\n  We can use the map function to do some math on our list.\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  */\nconst getSum = (l) => {\n  return l.reduce((a, b) => a + b, 0)\n}\n\n/*\n  We can use the reduce function to do some math on our list.\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  */\nconst getReduce = (l) => {\n  return l.reduce((a, b) => a + b, 0)\n}\n\n/*\n  We can use the reduceRight function to do some math on our list.\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  */\nconst getReduceRight = (l) => {\n  return l.reduceRight((a, b) => a + b, 0)\n}\n\n/*\n  We can use the reduceLeft function to do some math on our list.\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  */\nconst getReduceLeft = (l) => {\n  return l.reduceLeft((a, b) => a + b, 0)\n}\n\n/*\n  Let's use some examples\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  >>> getSum([1, 2, 3, 4, 5])\n  15\n  */\nconst main = () => {\n  // test our getPositive\n  console.log('getPositive:'+ getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 0 || n === 1) return false\n  const sqrtN = Math.sqrt(n)\n  for (let i = 2; i <= sqrtN; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/**\n  * RetuRn the number of divisors of n.\n  * >>> countDivisors(1)\n  * 1\n  * >>> countDivisors(3)\n  * 1\n  * >>> countDivisors(10)\n  * 1\n  * >>> countDivisors(100)\n  * 1\n  * >>> countDivisors(600)\n  * 1\n  * >>> countDivisors(100000000)\n  * 1\n  * >>> countDivisors(20000000000)\n  * 2\n  * >>> countDivisors(2147483648)\n  * 1\n  * >>> countDivisors(2147483647)\n  * 1\n  * >>> countDivisors(2147483646)\n  * 1\n  * >>> countDivisors(2147483645)\n  * 1\n  * >>> countDivisors(2147483644)\n  * 1\n  * >>> countDivisors(2147483643)\n  * 1\n  * >>> countDivisors(2147483642)\n  * 1\n  * >>> countDivisors(2147483641)\n  * 1\n  * >>> countDivisors(2147483640)\n  * 1\n  * >>> countDivisors(2147483639)\n  * 1\n  * >>> countDivisors(2147483638)\n  * 1\n  * >>> countDivisors(2147483637)\n  * 1\n  * >>> countDivisors(2147483636)\n  * 1\n  * >>> countDivisors(2147483635)\n  * 1\n  * >>> countDivisors(2147483634)\n  * 1\n  * >>> countDivisors(2147483633)\n  * 1\n  * >>> countDivisors(2147483632)\n  * 1\n  * >>> countDivisors(2147483631)\n  * 1\n  * >>> countDivisors(2147483630)\n  * 1\n  * >>> countDivisors(2147483629)\n  * 1\n  * >>> countDivisors(2147483628)\n  * 1\n  * >>> countDivisors(2147483627)\n  * 1\n  * >>> countDivisors(2147483626)\n  * 1\n  * >>> countDivisors(2147483625)\n  * 1\n  * >>> countDivisors(2147483624)\n  * 1\n  * >>> countDivisors(2147483623)\n  * 1\n  * >>> countDivisors(2147483622)\n  * 1\n  * >>> countDivisors(2147483621)\n  * 1\n  * >>> countDivisors(2147483620)\n  * 1\n  * >>> countDivisors(2147483619)\n  * 1\n  * >>> countDivisors(2147483618)\n  * 1\n  * >>> countDivisors(2147483617)\n  * 1\n  * >>> countDivisors(2147483616)\n  * 1\n  * >>> countDivisors(2147483615)\n  * 1\n  * >>> countDivisors(2147483614)\n  * 1\n  * >>> countDivisors(2147483613)\n  * 1\n  * >>> countDivisors(2147483612)\n  * 1\n  * >>> countDivisors(2147483611)\n  * 1\n  * >>> countDivisors(2147483610)\n  * 1\n  * >>> countDivisors(2147483609)\n  * 1\n  * >>> countDivisors(2147483608)\n  * 1\n  * >>> countDivisors(2147483607)\n  * 1\n  * >>> countDivisors(2147483606)\n  * 1\n  * >>> countDivisors(2147483605)\n  * 1\n  * >>> countDivisors(2147483604)\n  * 1\n  * >>> countDivisors(2147483603)\n  * 1\n  * >>> countDivisors(2147483602)\n  * 1\n  * >>> countDivisors(2147483601)\n  * 1\n  * >>> countDivisors(2147483600)\n  * 1\n  * >>> countDivisors(2147483599)\n  * 1\n  * >>> countDivisors(2147483598)\n  * 1\n  * >>> countDivisors(2147483597)\n  * 1\n  * >>> countDivisors(2147483596)\n  * 1\n  * >>> countDivisors(2147483595)\n  * 1\n  * >>> countDivisors(2147483594)\n  * 1\n  * >>> countDivisors(2147483593)\n  * 1\n  * >>> countDivisors(2147483592)\n  * 1\n  * >>> countDivisors(2147483591)\n  * 1\n  * >>> countDivisors(2147483590)\n  * 1\n  * >>> countDivisors(2147483589)\n  * 1\n  * >>> countDivisors(2147483588)\n  * 1\n  * >>> countDivisors(2147483587)\n  * 1\n  * >>> countDivisors(2147483586)\n  * 1\n  * >>> countDivisors(2147483585)\n  * 1\n  * >>> countDivis"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const coeficients = xs.reduce((acc, item, index) => {\n    return acc + item * index;\n  }, 0);\n  const x = 1;\n  const poly = poly(x, coeficients);\n  let index = 0;\n  while (poly!= 0) {\n    x--;\n    index++;\n    poly = poly(x, coeficients);\n  }\n  return x - index;\n}\n\n/*\n  findZero onlY finds the x of a polyNOMial.\n  findZero returns onlY only ZeRO pOiNT, eVEN if There arE MaNY.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([0, 1, 1]), 2) # f(x) = 0 + 1x + 1x^2\n  0.0\n  */\nconst findX = (xs) => {\n  const coeficients = xs.reduce((acc, item, index) => {\n    return acc + item * index;\n  }, 0);\n  const poly = poly(1, coeficients);\n  let index = 0;\n  while (poly!= 0) {\n    index++;\n    poly = poly(1, coeficients);\n  }\n  return index;\n}\n\nconst main = (x) => {\n  const xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const result = xs.reduce((prev, item, index) => {\n    return prev + item * index;\n  }, 0);\n  console.log(round(result, 2));\n  console.log(findX(xs));\n  console.log(findZero(xs));\n}\n\nmain(1);\nmain(2);\nmain(3);\nmain(4);\nmain(5);\nmain(6);\nmain(7);\nmain(8);\nmain(9);\nmain(10);\nmain(11);\nmain(12);\nmain(13);\nmain(14);\nmain(15);\nmain(16);\nmain(17);\nmain(18);\nmain(19);\nmain(20);\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sortedList = [...l];\n  const index = sortedList.indexOf(3);\n  const third = sortedList.slice(index, index + 3);\n  const sortedList = [...l].filter(i => i!== 3);\n  const sortedList3 = [...third].concat(sortedList);\n  return sortedList3;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return [...new Set(l)].filter((x) => l.indexOf(x) === -1)\n}\n\nconst uniqueBy = (l, key) => {\n  return [...new Set(l.map(x => x[key]))].filter((x) => l.indexOf(x) === -1)\n}\n\nconst uniqueByKey = (l, key) => {\n  return [...new Set(l.filter((x) => x[key]))].filter((x) => l.indexOf(x) === -1)\n}\n\n/*\n  >>> uniqueBy('abbc', 1)\n  ['a', 'b']\n  >>> uniqueBy('abbc', 2)\n  ['c']\n  >>> uniqueBy('abbc', 3)\n  []\n  >>> uniqueBy('abbc', 4)\n  ['a', 'b', 'c']\n  >>> uniqueBy('abbc', 5)\n  []\n  >>> uniqueBy('abbc', 6)\n  []\n  >>> uniqueBy('abbc', 7)\n  []\n  >>> uniqueBy('abbc', 8)\n  []\n  >>> uniqueBy('abbc', 9)\n  []\n  >>> uniqueBy('abbc', 10)\n  []\n  >>> uniqueBy('abbc', 11)\n  []\n  >>> uniqueBy('abbc', 12)\n  []\n  >>> uniqueBy('abbc', 13)\n  []\n  >>> uniqueBy('abbc', 14)\n  []\n  >>> uniqueBy('abbc', 15)\n  []\n  >>> uniqueBy('abbc', 16)\n  []\n  >>> uniqueBy('abbc', 17)\n  []\n  >>> uniqueBy('abbc', 18)\n  []\n  >>> uniqueBy('abbc', 19)\n  []\n  >>> uniqueBy('abbc', 20)\n  []\n  >>> uniqueBy('abbc', 21)\n  []\n  >>> uniqueBy('abbc', 22)\n  []\n  >>> uniqueBy('abbc', 23)\n  []\n  >>> uniqueBy('abbc', 24)\n  []\n  >>> uniqueBy('abbc', 25)\n  []\n  >>> uniqueBy('abbc', 26)\n  []\n  >>> uniqueBy('abbc', 27)\n  []\n  >>> uniqueBy('abbc', 28)\n  []\n  >>> uniqueBy('abbc', 29)\n  []\n  >>> uniqueBy('abbc', 30)\n  []\n  >>> uniqueBy('abbc', 31)\n  []\n  >>> uniqueBy('abbc', 32)\n  []\n  >>> uniqueBy('abbc', 33)\n  []\n  >>> uniqueBy('abbc', 34)\n  []\n  >>> uniqueBy('abbc', 35)\n  []\n  >>> uniqueBy('abbc', 36)\n  []\n  >>> uniqueBy('abbc', 37)\n  []\n  >>> uniqueBy('abbc', 38)\n  []\n  >>> uniqueBy('abbc', 39)\n  []\n  >>> uniqueBy('abbc', 40)\n  []\n  >>> uniqueBy('abbc', 41)\n  []\n  >>> uniqueBy('abbc', 42)\n  []\n  >>> uniqueBy('abbc', 43)\n  []\n  >>> uniqueBy('abbc', 44)\n  []\n  >>> uniqueBy('abbc', 45)\n  []\n  >>> uniqueBy('abbc', 46)\n  []\n  >>> uniqueBy('abbc', 47)\n  []\n  >>> uniqueBy('abbc', 48)\n  []\n  >>> uniqueBy('abbc', 49)\n  []\n  >>> uniqueBy('abbc', 50)\n  []\n  >>> uniqueBy('abbc', 51)\n  []\n  >>> uniqueBy('abbc', 52)\n  []\n  >>> uniqueBy('abbc', 53)\n  []\n  >>> uniqueBy('abbc', 54)\n  []\n  >>> uniqueBy('abbc', 55)\n  []\n  >>> uniqueBy('abbc', 56)\n  []\n  >>> uniqueBy('abbc', 57)\n  []\n  >>> uniqueBy('abbc', 58)\n  []\n  >>> uniqueBy('abbc', 59)\n  []\n  >>> uniqueBy('abbc', 60)\n  []\n  >>> uniqueBy('abbc', 61)\n  []\n  >>> uniqueBy('abbc', 62)\n  []\n  >>> uniqueBy('abbc', 63)\n  []\n  >>> uniqueBy('abbc', 64)\n  []\n  >>> uniqueBy('abbc', 65)\n  []\n  >>> uniqueBy('abbc', 66)\n  []\n  >>> uniqueBy('abbc', 67)\n  []\n  >>> uniqueBy('abbc', 68)\n  []\n  >>> uniqueBy('abbc', 69)\n  []\n  >>> uniqueBy('abbc', 70)\n  []\n  >>> uniqueBy('abbc', 71)\n  []\n  >>> uniqueBy('abbc', 72)\n  []\n  >>> uniqueBy('abbc', 73)\n  []\n  >>> uniqueBy('abbc', 74)\n  []\n  >>> uniqueBy('abbc', 75)\n  []\n  >>> uniqueBy('abbc', 76)\n  []\n  >>> uniqueBy('abbc', 77)\n  []\n  >>> uniqueBy('abbc', 78)\n  []\n  >>> uniqueBy('abbc', 79)\n  []\n  >>> uniqueBy('abbc', 80)\n  []\n  >>> uniqueBy('abbc', 81)\n  []\n  >>> uniqueBy('abbc', 82)\n  []\n  >>> uniqueBy('abbc', 83)\n  []\n  >>> uniqueBy('abbc', 84)\n  []\n  >>> uniqueBy('abbc', 85)\n  []\n  >>> uniqueBy('abbc', 86)\n  []\n  >>> uniqueBy('abbc', 87)\n  []\n  >>> uniqueBy('abbc', 88)\n  []\n  >>> uniqueBy('abbc', 89)\n  []\n  >>> uniqueBy('abbc', 90)\n  []\n  >>> uniqueBy('abbc', 91)\n  []\n  >>> uniqueBy('abbc', 92)\n  []\n  >>> uniqueBy('abbc', 93)\n  []\n  >>> uniqueBy('abbc', 94)\n  []\n  >>>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (!l ||!l.length) {\n    return null;\n  }\n  return l.reduce((prev, current) => {\n    if (prev === null || current > prev) {\n      return current;\n    }\n    return prev;\n  });\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if ((i % 3 === 0) && (i % 5 === 0)) {\n      result.push('FizzBuzz');\n    } else if (i % 3 === 0) {\n      result.push('Fizz');\n    } else if (i % 5 === 0) {\n      result.push('Buzz');\n    } else {\n      result.push(i.toString());\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let sorted = [];\n  for (let i = 0; i < l.length; i++) {\n    sorted.push(l[i]);\n  }\n  let index = 0;\n  while (index < sorted.length) {\n    let left = sorted[index];\n    let right = sorted[index + 1];\n    if (left === right) {\n      index++;\n    } else {\n      sorted[index] = right;\n      sorted[index + 1] = left;\n      index++;\n    }\n  }\n  return sorted;\n}\n\nmodule.exports = sortEven;<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    const group = s.slice(i, i + 3);\n    groups.push(group[1] + group[2]);\n  }\n  return groups.join('');\n}\n\nconst test = encodeCyclic('aoeu');\nconsole.log(test);\nconst decoded = decodeCyclic(test);\nconsole.log(decoded);<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 2, b = 3, c = 5, d = 7, f = 11;\n  return (n <= 1)? 1 : (a * primeFib(n - 2) + b * primeFib(n - 3) + c * primeFib(n - 5) + d * primeFib(n - 7) + f * primeFib(n - 11));\n};\n\nexport default primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if (l.length <= 1) return false\n  let c = 0\n  l.forEach((x) => {\n    c += x\n  })\n  return c === 0\n}\n\nmodule.exports = triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n    // console.log(\"carRaceCollision\")\n    return carRaceCollision(cars, car)\n}\n\ncOnst carRaceCollision = (cars, car) => {\n    // console.log(\"carRaceCollision\")\n    // console.log(\"cars\")\n    // console.log(cars)\n    // console.log(\"car\")\n    // console.log(car)\n    // console.log(\"cars.indexOf(car)\")\n    // console.log(cars.indexOf(car))\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)!= -1)\n    // console.log(cars.indexOf(car)"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i = 0\n  let a = [...l]\n  const s = a.slice()\n  while (i < s.length - 1) {\n    const j = parseInt(s[i]) + 1\n    a[i] = j\n    s[i] = j\n    i++\n  }\n  a.push(s.slice().pop())\n  return a\n}\n\n/*\n  >>> incrList(['A', 'B', 'C', 'D'])\n  ['A', 'B', 'C', 'D', 'E']\n  >>> incrList(['A', 'B', 'C', 'D', 'E', 'E', 'F', 'G'])\n  ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']\n  */\nconst incrList = (l) => {\n  let i = 0\n  let a = []\n  l.forEach((item) => {\n    a.push(item)\n    a.push(parseInt(item) + 1)\n    i++\n  })\n  a.push(a.slice().pop())\n  return a\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const s = l.slice()\n  const i = s.indexOf(s.pop())\n  while (i < s.length - 1) {\n    s[i] = parseInt(s[i]) + 1\n    i++\n  }\n  return s\n}\n\nmodule.exports = {\n  incrList,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  return l.every((e) => e < 0)\n}\n\nmodule.exports = pairsSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const stringBase = base.toString();\n  const newBase = Number(x).toString(stringBase);\n  return newBase.slice(newBase.length - stringBase.length);\n};\n\n//change base to decimal\nconst changeBaseDecimal = (x, base) => {\n  const stringBase = base.toString();\n  const newBase = Number(x).toString(stringBase);\n  return newBase.slice(newBase.length - stringBase.length);\n};\n\n//change base to hex\nconst changeBaseHex = (x, base) => {\n  const stringBase = base.toString();\n  const newBase = Number(x).toString(stringBase);\n  return newBase.slice(newBase.length - stringBase.length);\n};\n\n//convert decimal to base\nconst convertDecimalToBase = (decimal, base) => {\n  let result = \"\";\n  while (decimal > 0) {\n    result = `${base}${decimal % base}`;\n    decimal = decimal / base;\n  }\n  return result;\n};\n\n//convert decimal to hex\nconst convertDecimalToHex = (decimal) => {\n  let result = \"\";\n  while (decimal > 0) {\n    result = `${decimal % 16}${result}`;\n    decimal = decimal / 16;\n  }\n  return result;\n};\n\n//convert hex to base\nconst convertHexToBase = (hex) => {\n  let result = 0;\n  let index = 0;\n  while (index < hex.length) {\n    result += Number(hex[index]) * Math.pow(16, index);\n    index++;\n  }\n  return result;\n};\n\nconst getBase = (x, base) => {\n  switch (base) {\n    case \"0\":\n    case \"1\":\n    case \"2\":\n    case \"3\":\n    case \"4\":\n    case \"5\":\n    case \"6\":\n    case \"7\":\n    case \"8\":\n    case \"9\":\n      return Number(x).toString(base);\n    default:\n      return \"NaN\";\n  }\n};\n\nexport default {\n  changeBase,\n  changeBaseDecimal,\n  changeBaseHex,\n  convertDecimalToBase,\n  convertDecimalToHex,\n  convertHexToBase,\n  getBase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let s = (h / 2) * (a / 2)\n  return s * Math.sqrt(a * (a - 2 * s) + s * (s + 2 * a)) / 2\n}\n\n/*\n  Given a triangle, find the lengths of its three sides\n  >>> triangleSideLengths(3, 3, 3)\n  [3, 3, 3]\n  >>> triangleSideLengths(3, 3, 4)\n  [3, 4, 5]\n  >>> triangleSideLengths(4, 3, 3)\n  [3, 4, 4]\n  >>> triangleSideLengths(2, 3, 4)\n  [2, 3, 4]\n  >>> triangleSideLengths(2, 4, 3)\n  [2, 4, 3]\n  >>> triangleSideLengths(2, 4, 4)\n  [2, 3, 4]\n  >>> triangleSideLengths(2, 3, 5)\n  [2, 3, 4]\n  >>> triangleSideLengths(2, 5, 3)\n  [2, 3, 4]\n  >>> triangleSideLengths(2, 5, 4)\n  [2, 3, 4]\n  >>> triangleSideLengths(2, 5, 5)\n  [2, 3, 4]\n  >>> triangleSideLengths(3, 4, 5)\n  [3, 4, 4]\n  >>> triangleSideLengths(3, 5, 4)\n  [3, 4, 4]\n  >>> triangleSideLengths(3, 5, 5)\n  [3, 4, 4]\n  >>> triangleSideLengths(4, 5, 4)\n  [3, 4, 4]\n  >>> triangleSideLengths(4, 5, 5)\n  [3, 4, 4]\n  >>> triangleSideLengths(5, 5, 4)\n  [3, 4, 4]\n  >>> triangleSideLengths(5, 5, 5)\n  [3, 4, 4]\n  */\nconst triangleSideLengths = (a, b, c) => [\n  Math.sqrt(a * a + b * b - 2 * a * b),\n  Math.sqrt(b * b + c * c - 2 * b * c),\n  Math.sqrt(c * c + a * a - 2 * c * a)\n]\n\n/*\n  Given a triangle, find the lengths of the three sides,\n  and find the length of the longest side\n  >>> longestTriangleSideLength(3, 3, 3)\n  3\n  >>> longestTriangleSideLength(3, 3, 4)\n  5\n  >>> longestTriangleSideLength(4, 3, 3)\n  4\n  >>> longestTriangleSideLength(2, 3, 4)\n  3\n  >>> longestTriangleSideLength(2, 4, 3)\n  3\n  >>> longestTriangleSideLength(2, 4, 4)\n  4\n  >>> longestTriangleSideLength(2, 3, 5)\n  3\n  >>> longestTriangleSideLength(2, 5, 3)\n  3\n  >>> longestTriangleSideLength(2, 5, 4)\n  4\n  >>> longestTriangleSideLength(2, 5, 5)\n  5\n  >>> longestTriangleSideLength(3, 4, 5)\n  4\n  >>> longestTriangleSideLength(3, 5, 4)\n  4\n  >>> longestTriangleSideLength(3, 5, 5)\n  5\n  >>> longestTriangleSideLength(4, 5, 4)\n  4\n  >>> longestTriangleSideLength(4, 5, 5)\n  5\n  >>> longestTriangleSideLength(5, 5, 4)\n  5\n  >>> longestTriangleSideLength(5, 5, 5)\n  5\n  */\nconst longestTriangleSideLength = (a, b, c) => {\n  return Math.max(triangleSideLengths(a, b, c), triangleSideLengths(b, a, c), triangleSideLengths(c, a, b))\n}\n\n/*\n  Given two triangles, find the smallest area they share\n  >>> sharedTriangleArea(3, 3, 3, 4)\n  3\n  >>> sharedTriangleArea(3, 3, 3, 5)\n  3\n  >>> sharedTriangleArea(3, 3, 4, 4)\n  3\n  >>> sharedTriangleArea(3, 3, 4, 5)\n  3\n  >>> sharedTriangleArea(3, 3, 5, 4)\n  3\n  >>> sharedTriangleArea(3, 3, 5, 5)\n  3\n  >>> sharedTriangleArea(3, 4, 3, 5)\n  3\n  >>> sharedTriangleArea(3, 4, 3, 4)\n  3\n  >>> sharedTriangleArea(3, 4, 4, 5)\n  3\n  >>> sharedTriangleArea(3, 4, 5, 4)\n  3\n  >>> sharedTriangleArea(3, 4, 5, 5)\n  3\n  >>> sharedTriangleArea(3, 5, 3, 5)\n  3\n  >>> sharedTriangleArea(3, 5, 4, 5)\n  3\n  >>> sharedTriangleArea(3, 5, 5, 4)\n  3\n  >>> sharedTriangleArea(3, 5, 5, 5)\n  3\n  >>> sharedTriangleArea(4, 3, 3, 5)\n  3\n  >>> sharedTriangleArea(4, 3, 3, 4)\n  3\n  >>> sharedTriangleArea(4, 3, 4, 5)\n  3\n  >>> sharedTriangleArea(4, 3, 5, 4)\n  3\n  >>> sharedTriangleArea(4, 3, 5, 5)\n  3\n  >>> sharedTriangleArea(4, 4, 3, 5)\n  3\n  >>> sharedTriangleArea(4, 4, 3, 4)\n  3\n  >>> sharedTriangleArea(4, 4, 4, 5)\n  3\n  >>> sharedTriangleArea(4, 4, 5, 4)\n  3\n  >>> sharedTriangleArea(4, 4, 5, 5)\n  3\n  >>> sharedTriangleArea(4, 5, 3, 5)\n  3\n  >>> sharedTriangleArea(4, 5, 4, 5)\n  3\n  >>> sharedTriangleArea(4, 5, 5, 4)\n"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\n/*\n  This is the fib4 function you wrote, tO eFFiCiENtLy complEte.\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  >>> fib4(8)\n  21\n  */\nconst fib4b = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  return fib4b(n - 1) + fib4b(n - 2) + fib4b(n - 3) + fib4b(n - 4);\n}\n\n/*\n  This is the fib4 function you wrote, tO eFFiCiENtLy complEte.\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4b(5)\n  4\n  >>> fib4b(6)\n  8\n  >>> fib4b(7)\n  14\n  >>> fib4b(8)\n  21\n  */\n\n// This is the fib4 function you wrote, tO eFFiCiENtLy complEte.\n// PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n// >>> fib4(5)\n// 4\n// >>> fib4(6)\n// 8\n// >>> fib4(7)\n// 14\n// >>> fib4(8)\n// 21\n\n/*\n  This is the fib4 function you wrote, tO eFFiCiENtLy complEte.\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  >>> fib4(8)\n  21\n  >>> fib4(9)\n  0\n  >>> fib4(10)\n  1\n  >>> fib4(11)\n  2\n  >>> fib4(12)\n  3\n  >>> fib4(13)\n  0\n  >>> fib4(14)\n  1\n  >>> fib4(15)\n  2\n  >>> fib4(16)\n  3\n  >>> fib4(17)\n  0\n  >>> fib4(18)\n  1\n  >>> fib4(19)\n  2\n  >>> fib4(20)\n  3\n  >>> fib4(21)\n  0\n  >>> fib4(22)\n  1\n  >>> fib4(23)\n  2\n  >>> fib4(24)\n  3\n  >>> fib4(25)\n  0\n  >>> fib4(26)\n  1\n  >>> fib4(27)\n  2\n  >>> fib4(28)\n  3\n  >>> fib4(29)\n  0\n  >>> fib4(30)\n  1\n  >>> fib4(31)\n  2\n  >>> fib4(32)\n  3\n  >>> fib4(33)\n  0\n  >>> fib4(34)\n  1\n  >>> fib4(35)\n  2\n  >>> fib4(36)\n  3\n  >>> fib4(37)\n  0\n  >>> fib4(38)\n  1\n  >>> fib4(39)\n  2\n  >>> fib4(40)\n  3\n  >>> fib4(41)\n  0\n  >>> fib4(42)\n  1\n  >>> fib4(43)\n  2\n  >>> fib4(44)\n  3\n  >>> fib4(45)\n  0\n  >>> fib4(46)\n  1\n  >>> fib4(47)\n  2\n  >>> fib4(48)\n  3\n  >>> fib4(49)\n  0\n  >>> fib4(50)\n  1\n  >>> fib4(51)\n  2\n  >>> fib4(52)\n  3\n  >>> fib4(53)\n  0\n  >>> fib4(54)\n  1\n  >>> fib4(55)\n  2\n  >>> fib4(56)\n  3\n  >>> fib4(57)\n  0\n  >>> fib4(58)\n  1\n  >>> fib4(59)\n  2\n  >>> fib4(60)\n  3\n  >>> fib4(61)\n  0\n  >>> fib4(62)\n  1\n  >>> fib4(63)\n  2\n  >>> fib4(64)\n  3\n  >>> fib4(65)\n  0\n  >>> fib4(66)\n  1\n  >>> fib4(67)\n  2\n  >>> fib4(68)\n  3\n  >>>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let m = l.length;\n  let i = 0;\n  let j = m - 1;\n  let t;\n  while (i < j) {\n    t = (l[i] + l[j]) / 2;\n    if (l[i] < t) {\n      i = i + 1;\n    } else if (l[j] < t) {\n      j = j - 1;\n    } else {\n      return t;\n    }\n  }\n  return l[i];\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let textLength = text.length\n    let textArray = text.split('')\n    let half = Math.floor(textLength / 2)\n    let arrayLength = textArray.length\n    let i = 0\n    while (i < half) {\n        if (textArray[i]!== textArray[textLength - i - 1]) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nmodule.exports = {\n    isPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) {\n    return 0\n  } else {\n    const a = n % p\n    return a < 0? a + p : a\n  }\n}\n\n/*\n  >>> modr(3, 5)\n  3\n  >>> modr(1101, 101)\n  2\n  >>> modr(0, 101)\n  1\n  >>> modr(3, 11)\n  8\n  >>> modr(100, 101)\n  1\n  */\nconst modr = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr(3, 5)\n  3\n  >>> modr(1101, 101)\n  2\n  >>> modr(0, 101)\n  1\n  >>> modr(3, 11)\n  8\n  >>> modr(100, 101)\n  1\n  */\nconst modr2 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr2(3, 5)\n  3\n  >>> modr2(1101, 101)\n  2\n  >>> modr2(0, 101)\n  1\n  >>> modr2(3, 11)\n  8\n  >>> modr2(100, 101)\n  1\n  */\nconst modr3 = (n, m) => {\n  return (n % m)\n}\n\nconst modr4 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr4(3, 5)\n  3\n  >>> modr4(1101, 101)\n  2\n  >>> modr4(0, 101)\n  1\n  >>> modr4(3, 11)\n  8\n  >>> modr4(100, 101)\n  1\n  */\n\nconst modr5 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr5(3, 5)\n  3\n  >>> modr5(1101, 101)\n  2\n  >>> modr5(0, 101)\n  1\n  >>> modr5(3, 11)\n  8\n  >>> modr5(100, 101)\n  1\n  */\n\n/*\n  >>> modr6(3, 5)\n  3\n  >>> modr6(1101, 101)\n  2\n  >>> modr6(0, 101)\n  1\n  >>> modr6(3, 11)\n  8\n  >>> modr6(100, 101)\n  1\n  */\n\n/*\n  >>> modr7(3, 5)\n  3\n  >>> modr7(1101, 101)\n  2\n  >>> modr7(0, 101)\n  1\n  >>> modr7(3, 11)\n  8\n  >>> modr7(100, 101)\n  1\n  */\n\nconst modr8 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr8(3, 5)\n  3\n  >>> modr8(1101, 101)\n  2\n  >>> modr8(0, 101)\n  1\n  >>> modr8(3, 11)\n  8\n  >>> modr8(100, 101)\n  1\n  */\n\nconst modr9 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr9(3, 5)\n  3\n  >>> modr9(1101, 101)\n  2\n  >>> modr9(0, 101)\n  1\n  >>> modr9(3, 11)\n  8\n  >>> modr9(100, 101)\n  1\n  */\n\nconst modr10 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr10(3, 5)\n  3\n  >>> modr10(1101, 101)\n  2\n  >>> modr10(0, 101)\n  1\n  >>> modr10(3, 11)\n  8\n  >>> modr10(100, 101)\n  1\n  */\n\nconst modr11 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr11(3, 5)\n  3\n  >>> modr11(1101, 101)\n  2\n  >>> modr11(0, 101)\n  1\n  >>> modr11(3, 11)\n  8\n  >>> modr11(100, 101)\n  1\n  */\n\nconst modr12 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr12(3, 5)\n  3\n  >>> modr12(1101, 101)\n  2\n  >>> modr12(0, 101)\n  1\n  >>> modr12(3, 11)\n  8\n  >>> modr12(100, 101)\n  1\n  */\n\nconst modr13 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr13(3, 5)\n  3\n  >>> modr13(1101, 101)\n  2\n  >>> modr13(0, 101)\n  1\n  >>> modr13(3, 11)\n  8\n  >>> modr13(100, 101)\n  1\n  */\n\nconst modr14 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr14(3, 5)\n  3\n  >>> modr14(1101, 101)\n  2\n  >>> modr14(0, 101)\n  1\n  >>> modr14(3, 11)\n  8\n  >>> modr14(100, 101)\n  1\n  */\n\nconst modr15 = (n, m) => {\n  return (n % m)\n}\n\n/*\n  >>> modr15(3,"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - 5 + \"a\".charCoDEat(0)) % 26\n  ) + \"a\").join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retURNS dEcodeD stRiNG.\n  */\nConSt encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retURNS dEcodeD stRiNG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    (ch.charCodeAt(0) - \"a\".charCoDEat(0)) % 26\n  ) + \"a\").join(\"\");\n}\n\nconst encode = (s) => {\n  const shift = encodeShift(s);\n  const shift2 = decodeShift(shift);\n  return encodeShift(shift2);\n}\n\nconst decode = (s) => {\n  const shift = decodeShift(s);\n  const shift2 = decodeShift(shift);\n  return decodeShift(shift2);\n}\n\nconsole.log(encode(\"Hello\"));\nconsole.log(encode(\"abcdef\"));\nconsole.log(decode(\"aabcdef\"));\nconsole.log(decode(\"aabcdef\"));\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n\treturn text.replace(/[aeiouAEIOU]/g,'');\n}\n\n/*\n  getVowelCount is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> getVowelCount('')\n  0\n  >>> getVowelCount('abcdef\\nghijklm')\n  4\n  >>> getVowelCount('abcdef')\n  1\n  >>> getVowelCount('aaaaa')\n  0\n  >>> getVowelCount('aaBAA')\n  1\n  >>> getVowelCount('zbcd')\n  1\n  */\nconst getVowelCount = (text) => {\n\tlet count = 0;\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i].toUpperCase() === text[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\n/*\n  getLongestWord is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT words.\n  >>> getLongestWord('')\n  ''\n  >>> getLongestWord('abcdef\\nghijklm')\n  'abcdef'\n  >>> getLongestWord('abcdef')\n  'abcdef'\n  >>> getLongestWord('aaaaa')\n  ''\n  >>> getLongestWord('aaBAA')\n  'aaBAA'\n  >>> getLongestWord('zbcd')\n  'zbcd'\n  */\nconst getLongestWord = (text) => {\n\tlet longest = '';\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i].toUpperCase()!== text[i]) {\n\t\t\tif (text.length - i > longest.length) {\n\t\t\t\tlongest = text.substring(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn longest;\n}\n\n/*\n  getLongestWord is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT words.\n  >>> getLongestWord('')\n  ''\n  >>> getLongestWord('abcdef\\nghijklm')\n  'abcdef'\n  >>> getLongestWord('abcdef')\n  'abcdef'\n  >>> getLongestWord('aaaaa')\n  ''\n  >>> getLongestWord('aaBAA')\n  'aaBAA'\n  >>> getLongestWord('zbcd')\n  'zbcd'\n  */\nconst getLongestWord = (text) => {\n\tlet longest = '';\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i].toUpperCase()!== text[i]) {\n\t\t\tif (text.length - i > longest.length) {\n\t\t\t\tlongest = text.substring(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn longest;\n}\n\n/*\n  getLongestWord is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT words.\n  >>> getLongestWord('')\n  ''\n  >>> getLongestWord('abcdef\\nghijklm')\n  'abcdef'\n  >>> getLongestWord('abcdef')\n  'abcdef'\n  >>> getLongestWord('aaaaa')\n  ''\n  >>> getLongestWord('aaBAA')\n  'aaBAA'\n  >>> getLongestWord('zbcd')\n  'zbcd'\n  */\nconst getLongestWord = (text) => {\n\tlet longest = '';\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i].toUpperCase()!== text[i]) {\n\t\t\tif (text.length - i > longest.length) {\n\t\t\t\tlongest = text.substring(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn longest;\n}\n\nconst getLongestWord = (text) => {\n\tlet longest = '';\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i].toUpperCase()!== text[i]) {\n\t\t\tif (text.length - i > longest.length) {\n\t\t\t\tlongest = text.substring(i);\n\t\t\t}\n\t\t}\n\t}\n\treturn longest;\n}\n\n/*\n  getWordCount is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT words.\n  >>> getWordCount('')\n  0\n  >>> getWordCount('abcdef\\nghijklm')\n  5\n  >>> getWordCount('abcdef')\n  1\n  >>> getWordCount('aaaaa')\n  0\n  >>> getWordCount('aaBAA')\n  1\n  >>> getWordCount('zbcd')\n  1\n  */\nconst getWordCount = (text) => {\n\tlet count = 0;\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i].toUpperCase()!== text[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst getWordCount = (text) => {\n\tlet count = 0;\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif (text[i].toUpperCase()!== text[i]) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n}\n\nconst getWordCount = (text) => {\n\tlet count = 0;\n\tfor (let i = 0; i < text.length; i++) {\n\t\tif"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum > t) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 2, 4, 10], 10000000)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum < t) {\n            return false;\n        }\n    }\n    return true;\n}\n\nmodule.exports = {\n    aboveThreshold,\n    belowThreshold\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst sub = (x, y) => {\n  return x - y;\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst mul = (x, y) => {\n  return x * y;\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst div = (x, y) => {\n  return x / y;\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst mod = (x, y) => {\n  return x % y;\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst pow = (x, y) => {\n  return Math.pow(x, y);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst exp = (x, y) => {\n  return Math.exp(x * y);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst log = (x, y) => {\n  return Math.log(x) * y;\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst sqrt = (x) => {\n  return Math.sqrt(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst sin = (x) => {\n  return Math.sin(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst cos = (x) => {\n  return Math.cos(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst tan = (x) => {\n  return Math.tan(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst acos = (x) => {\n  return Math.acos(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst asin = (x) => {\n  return Math.asin(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst atan = (x) => {\n  return Math.atan(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst atan2 = (y, x) => {\n  return Math.atan2(y, x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst ceil = (x) => {\n  return Math.ceil(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst floor = (x) => {\n  return Math.floor(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst round = (x) => {\n  return Math.round(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst sign = (x) => {\n  return Math.sign(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst isNaN = (x) => {\n  return isNaN(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst isFinite = (x) => {\n  return isFinite(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst isInfinite = (x) => {\n  return isInfinite(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst isInteger = (x) => {\n  return isInteger(x);\n};\n\n/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const a = s0.split('')\n  const b = s1.split('')\n  if (a.length!== b.length) {\n    return false\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst sameWords = (s0, s1) => {\n  const a = s0.split(' ')\n  const b = s1.split(' ')\n  if (a.length!== b.length) {\n    return false\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Check if the given word has a unique number of vowels.\n  >>> uniqueVowels('aabbccddee')\n  true\n  >>> uniqueVowels('aabbccddeea')\n  false\n  >>> uniqueVowels('aabbccddeeaa')\n  false\n  >>> uniqueVowels('aabbccddeeaab')\n  false\n  >>> uniqueVowels('aabbccddeeaaab')\n  true\n  */\nconst uniqueVowels = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const vowelsLength = vowels.length\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < word.length) {\n    while (j < word.length && vowels[j] === word[i]) {\n      j++\n    }\n    if (j < word.length) {\n      count++\n    }\n    i++\n  }\n  return count === vowelsLength\n}\n\nconst uniqueLetters = (s0) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const letters = s0.split('')\n  const lettersLength = letters.length\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < lettersLength) {\n    while (j < lettersLength && letters[j] === letters[i]) {\n      j++\n    }\n    if (j < lettersLength) {\n      count++\n    }\n    i++\n  }\n  return count === lettersLength\n}\n\nconst sameChars2 = (s0, s1) => {\n  const a = s0.split('')\n  const b = s1.split('')\n  if (a.length!== b.length) {\n    return false\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst sameWords2 = (s0, s1) => {\n  const a = s0.split(' ')\n  const b = s1.split(' ')\n  if (a.length!== b.length) {\n    return false\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!== b[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst allUniqueLetters = (s0) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const letters = s0.split('')\n  const lettersLength = letters.length\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < lettersLength) {\n    while (j < lettersLength && letters[j] === letters[i]) {\n      j++\n    }\n    if (j < lettersLength) {\n      count++\n    }\n    i++\n  }\n  return count === lettersLength\n}\n\nconst allUniqueVowels = (s0) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const letters = s0.split('')\n  const lettersLength = letters.length\n  let i = 0\n  let j = 0\n  let count = 0\n  while (i < lettersLength) {\n    while (j < lettersLength && vowels[j] === letters[i]) {\n      j++\n    }\n    if (j < lettersLength) {\n      count++\n    }\n    i++\n  }\n  return count === lettersLength\n}\n\nmodule.exports = {\n  sameChars,\n  sameWords,\n  allUniqueLetters,\n  allUniqueVowels\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const fib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fib(n-1) + fib(n-2);\n  };\n  return fib(n);\n};\n\nexport default fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = brackets.split(\"\").reverse().map((c) => {\n    if (c === \">\") {\n      return [\"<\", \">\", \"<<\", \">>\", \">\"];\n    }\n    return [\"<\", \">\"];\n  });\n\n  stack.pop();\n\n  return stack.every(([c, s]) => {\n    const [, _c, _s] = s.split(\"\");\n\n    return (\n      _c === \">\" &&\n      c === _c &&\n      s === _s &&\n      stack.every(([_c, _s]) => {\n        const [, _c2, _s2] = _s.split(\"\");\n\n        return (\n          _c2 === \">\" &&\n          c === _c2 &&\n          s === _s2 &&\n          stack.every(([_c2, _s2]) => {\n            const [, _c3, _s3] = _s2.split(\"\");\n\n            return (\n              _c3 === \">\" &&\n              c === _c3 &&\n              s === _s3 &&\n              stack.every(([_c3, _s3]) => {\n                const [, _c4, _s4] = _s3.split(\"\");\n\n                return (\n                  _c4 === \">\" &&\n                  c === _c4 &&\n                  s === _s4 &&\n                  stack.every(([_c4, _s4]) => {\n                    const [, _c5, _s5] = _s4.split(\"\");\n\n                    return (\n                      _c5 === \">\" &&\n                      c === _c5 &&\n                      s === _s5 &&\n                      stack.every(([_c5, _s5]) => {\n                        const [, _c6, _s6] = _s5.split(\"\");\n\n                        return (\n                          _c6 === \">\" &&\n                          c === _c6 &&\n                          s === _s6 &&\n                          stack.every(([_c6, _s6]) => {\n                            const [, _c7, _s7] = _s6.split(\"\");\n\n                            return (\n                              _c7 === \">\" &&\n                              c === _c7 &&\n                              s === _s7 &&\n                              stack.every(([_c7, _s7]) => {\n                                const [, _c8, _s8] = _s7.split(\"\");\n\n                                return (\n                                  _c8 === \">\" &&\n                                  c === _c8 &&\n                                  s === _s8 &&\n                                  stack.every(([_c8, _s8]) => {\n                                    const [, _c9, _s9] = _s8.split(\"\");\n\n                                    return (\n                                      _c9 === \">\" &&\n                                      c === _c9 &&\n                                      s === _s9 &&\n                                      stack.every(([_c9, _s9]) => {\n                                        const [, _c10, _s10] = _s9.split(\"\");\n\n                                        return (\n                                          _c10 === \">\" &&\n                                          c === _c10 &&\n                                          s === _s10 &&\n                                          stack.every(([_c10, _s10]) => {\n                                            const [, _c11, _s11] = _s10.split(\"\");\n\n                                            return (\n                                              _c11 === \">\" &&\n                                              c === _c11 &&\n                                              s === _s11 &&\n                                              stack.every(([_c11, _s11]) => {\n                                                const [, _c12, _s12] = _s11.split(\"\");\n\n                                                return (\n                                                  _c12 === \">\" &&\n                                                  c === _c12 &&\n                                                  s === _s12 &&\n                                                  stack.every(([_c12, _s12]) => {\n                                                    const [, _c13, _s13] = _s12.split(\"\");\n\n                                                    return (\n                                                      _c13 === \">\" &&\n                                                      c === _c13 &&\n                                                      s === _s13 &&\n                                                      stack.every(([_c13, _s13]) => {\n                                                        const [, _c14, _s14] = _s13.split(\"\");\n\n                                                        return (\n                                                          _c14 === \">\" &&\n                                                          c === _c14 &&\n                                                          s === _s14 &&\n                                                          stack.every(([_c14, _s14]) => {\n                                                           const [, _c15, _s15] = _s14.split(\"\");\n\n                                                           return (\n                                                            _c15 === \">\" &&\n                                                            c === _c15 &&\n                                                            s === _s15 &&\n                                                            stack.every(([_c15, _s15]) => {\n                                                            const [, _c16, _s16] = _s15.split(\"\");\n\n                                                            return (\n                                                              _c16 === \">\" &&\n                                                              c === _c16 &&\n                                                              s === _s16 &&\n                                                              stack.every(([_c16, _s16]) => {\n                                                                const [, _c17, _s17] = _s16.split(\"\");\n\n                                                                return (\n                               "}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = Array.from(l)\n .sort((a, b) => a - b)\n .every((x) => x >= 0)\n  if (sorted.length === 0) return false\n  if (sorted.length === 1) return true\n  if (sorted.length === 2) return sorted[0] === sorted[1]\n  if (sorted.length % 2 === 0) return sorted[sorted.length - 1] <= sorted[sorted.length - 2]\n  return sorted[sorted.length - 1] < sorted[sorted.length - 2]\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const len = Math.min(l1.length, l2.length)\n  let i = 0, j = 0\n  while (i < len && j < len) {\n    if (l1[i] === l2[j]) {\n      return [l1[i]]\n    }\n    i++\n    j++\n  }\n  return []\n}\n\n/*\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([5, 3, 2, 8], [4, 3])\n  []\n  >>> common([5, 3, 2, 8], [5, 3])\n  [5, 3]\n  >>> common([5, 3, 2, 8], [5, 4])\n  [5]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [5, 3, 2, 8]\n  >>> common([5, 3, 2, 8], [5, 3, 2, 8, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let a = 1\n  while (n > 1) {\n    let i = 0\n    while (n % a === 0) {\n      i += 1\n      n /= a\n    }\n    if (i > 0) {\n      a *= 2\n    }\n  }\n  return a\n}\n\nexport default largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n// Sums n to n^2\nconst sumNToN = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n    for (let j = 1; j <= i; j++) {\n      sum += j\n    }\n  }\n  return sum\n}\n\n// Sums n to n^3\nconst sumNToNToN = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n    for (let j = 1; j <= i; j++) {\n      sum += j\n      for (let k = 1; k <= j; k++) {\n        sum += k\n      }\n    }\n  }\n  return sum\n}\n\n/*\n  Sums 1 to n using a for loop.\n  >>> sumForN(5)\n  15\n  >>> sumForN(10)\n  55\n  >>> sumForN(1)\n  1\n  */\nconst sumForN = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToNUsingFor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumNToNUsingFor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n    for (let j = 1; j <= i; j++) {\n      sum += j\n    }\n  }\n  return sum\n}\n\nconst sumNToNToNUsingFor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n    for (let j = 1; j <= i; j++) {\n      sum += j\n      for (let k = 1; k <= j; k++) {\n        sum += k\n      }\n    }\n  }\n  return sum\n}\n\nconst sumNToNUsingWhile = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\nconst sumNToNToNUsingWhile = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n    for (let i = 1; i <= n; i++) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumNToNUsingFunction = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  return sumNToN(n)\n}\n\nconst sumNToNToNUsingFunction = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  return sumNToNToN(n)\n}\n\nconst sumNToNUsingFunctionWithLet = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    sum += i\n    i++\n  }\n  return sum\n}\n\nconst sumNToNToNUsingFunctionWithLet = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    sum += i\n    i++\n    for (let k = 1; k <= i; k++) {\n      sum += k\n    }\n    j++\n  }\n  return sum\n}\n\nconst sumNToNUsingFunctionWithLetAndFor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    sum += i\n    i++\n    for (let k = 1; k <= i; k++) {\n      sum += k\n    }\n  }\n  return sum\n}\n\nconst sumNToNToNUsingFunctionWithLetAndFor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    sum += i\n    i++\n    for (let k = 1; k <= i; k++) {\n      sum += k\n      for (let l = 1; l <= k; l++) {\n        sum += l\n      }\n    }\n    j++\n  }\n  return sum\n}\n\nconst sumNToNUsingFunctionWithLetAndWhile = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  const sum = 0\n  let i = 1\n  let j = 1\n  while (i <= n) {\n    sum += i\n    i++\n    for (let k = 1; k <= i; k++) {\n      sum += k\n    }\n  }\n  return sum\n}\n\nconst sumNToNToNUsingFunction"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const opening = brackets[0]\n  const closing = brackets[brackets.length - 1]\n  let openIndex = 1\n  let closeIndex = brackets.length - 2\n  while (openIndex < brackets.length) {\n    if (brackets[openIndex] == opening && brackets[closeIndex] == closing) {\n      openIndex++\n      closeIndex--\n    } else if (brackets[openIndex] == opening) {\n      closeIndex--\n    } else if (brackets[closeIndex] == closing) {\n      openIndex++\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets = (brackets) => {\n  const openBracket = brackets[0]\n  const closeBracket = brackets[brackets.length - 1]\n  const currentIndex = 1\n  while (currentIndex < brackets.length) {\n    if (brackets[currentIndex] == openBracket) {\n      currentIndex++\n    } else if (brackets[currentIndex] == closeBracket) {\n      currentIndex--\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets2 = (brackets) => {\n  const openBracket = brackets[0]\n  const closeBracket = brackets[brackets.length - 1]\n  const currentIndex = 1\n  const bracketsLength = brackets.length\n  while (currentIndex < bracketsLength) {\n    if (brackets[currentIndex] == openBracket) {\n      currentIndex++\n    } else if (brackets[currentIndex] == closeBracket) {\n      currentIndex--\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Function: checkBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst checkBrackets = (brackets) => {\n  return validateBrackets(brackets) && validateBrackets2(brackets)\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets3 = (brackets) => {\n  const bracketsLength = brackets.length\n  const currentIndex = 1\n  while (currentIndex < bracketsLength) {\n    if (brackets[currentIndex] == brackets[currentIndex - 1]) {\n      return false\n    }\n    currentIndex++\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets4 = (brackets) => {\n  const bracketsLength = brackets.length\n  const currentIndex = 1\n  while (currentIndex < bracketsLength) {\n    if (brackets[currentIndex] == brackets[currentIndex + 1]) {\n      return false\n    }\n    currentIndex++\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets5 = (brackets) => {\n  const bracketsLength = brackets.length\n  const currentIndex = 1\n  while (currentIndex < bracketsLength) {\n    if (brackets[currentIndex] == brackets[currentIndex - 1]) {\n      return false\n    }\n    currentIndex++\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets6 = (brackets) => {\n  const bracketsLength = brackets.length\n  const currentIndex = 1\n  while (currentIndex < bracketsLength) {\n    if (brackets[currentIndex] == brackets[currentIndex + 1]) {\n      return false\n    }\n    currentIndex++\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets7 = (brackets) => {\n  const bracketsLength = brackets.length\n  const currentIndex = 1\n  while (currentIndex < bracketsLength) {\n    if (brackets[currentIndex] == brackets[currentIndex - 1]) {\n      return false\n    }\n    currentIndex++\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets\n  @return:\n  true if the brackets are valid.\n  false if the brackets are invalid.\n  */\nconst validateBrackets8 = (brackets) => {\n  const bracketsLength = brackets.length\n  const currentIndex = 1\n  while (currentIndex < bracketsLength) {\n    if (brackets[currentIndex] == brackets[currentIndex + 1]) {\n      return false\n    }\n    currentIndex++\n  }\n  return true\n}\n\n/*\n  Function: validateBrackets\n  Check if the brackets are valid.\n  @brackets: the brackets"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1)\n  }\n  return deriv\n}\n\n/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative2 = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1) + xs[i + 2] * (i + 1) * (i + 2)\n  }\n  return deriv\n}\n\nconst derivative3 = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1) + xs[i + 2] * (i + 1) * (i + 2) + xs[i + 3] * (i + 1) * (i + 2) * (i + 3)\n  }\n  return deriv\n}\n\nconst derivative4 = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1) + xs[i + 2] * (i + 1) * (i + 2) + xs[i + 3] * (i + 1) * (i + 2) * (i + 3) + xs[i + 4] * (i + 1) * (i + 2) * (i + 3) * (i + 4)\n  }\n  return deriv\n}\n\nconst derivative5 = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1) + xs[i + 2] * (i + 1) * (i + 2) + xs[i + 3] * (i + 1) * (i + 2) * (i + 3) + xs[i + 4] * (i + 1) * (i + 2) * (i + 3) * (i + 4) + xs[i + 5] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5)\n  }\n  return deriv\n}\n\nconst derivative6 = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1) + xs[i + 2] * (i + 1) * (i + 2) + xs[i + 3] * (i + 1) * (i + 2) * (i + 3) + xs[i + 4] * (i + 1) * (i + 2) * (i + 3) * (i + 4) + xs[i + 5] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) + xs[i + 6] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6)\n  }\n  return deriv\n}\n\nconst derivative7 = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1) + xs[i + 2] * (i + 1) * (i + 2) + xs[i + 3] * (i + 1) * (i + 2) * (i + 3) + xs[i + 4] * (i + 1) * (i + 2) * (i + 3) * (i + 4) + xs[i + 5] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) + xs[i + 6] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) + xs[i + 7] * (i + 1) * (i + 2) * (i + 3) * (i + 4) * (i + 5) * (i + 6) * (i + 7)\n  }\n  return deriv\n}\n\nconst derivative8 = (xs) => {\n  let length = xs.length\n  let deriv = []\n  for (let i = length - 1; i >= 0; i--) {\n    deriv[i] = xs[i] + xs[i + 1] * (i + 1) + xs[i + 2] * (i + 1) * (i + 2) + xs[i + 3] * (i + 1) * (i +"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    const a = [1, 1]\n    const b = []\n    const fib = []\n    const max = 10000\n    let i = 2\n    let j = 1\n\n    while (i < n) {\n        if (i % 2 === 0) {\n            fib.push(a[i])\n        } else {\n            fib.push(b[i])\n        }\n        i += 1\n    }\n    let k = 0\n    for (let i = 1; i < n; i += 1) {\n        let a1 = fib[k]\n        let b1 = fib[k + 1]\n        let c = a1 + b1\n        fib.push(c)\n        k += 1\n    }\n    if (n >= max) {\n        console.log(n)\n        return\n    }\n    return fib\n}\n\nfibfib(3)\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const str = toArray(s)\n  const result = {}\n\n  str.forEach((v, i) => {\n    if (isVowel(v)) {\n      result[i] = (result[i] || 0) + 1\n    }\n  })\n\n  return Object.keys(result).length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let res = x.toString();\n    while (shift--) {\n        res = res.substr(1) + res.substr(0, res.length - 1);\n    }\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\nconst circularShift = (x, shift) => {\n    let res = x.toString();\n    while (shift--) {\n        res = res.substr(1) + res.substr(0, res.length - 1);\n    }\n    return res;\n}\n\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\nconst circularShift = (x, shift) => {\n    let res = x.toString();\n    while (shift--) {\n        res = res.substr(1) + res.substr(0, res.length - 1);\n    }\n    return res;\n}\n\nconst circularShift = (x, shift) => {\n    let res = x.toString();\n    while (shift--) {\n        res = res.substr(1) + res.substr(0, res.length - 1);\n    }\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//TODO: Add a test for this function\nconst multiply = (x, y) => {\n    let res = x.toString() + y.toString();\n    return res;\n}\n\n//T"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 97 && s[i] <= 122) {\n            sum += parseInt(s[i], 10);\n        }\n    }\n    return sum;\n};\n\n/*Task\n  Write a function to find the longest word in a given dictionary\n  which can be formed by the concatenation of at most n different words.\n\n  Examples:\n      longestWord([\"c\", \"e\", \"g\", \"e\", \"r\", \"a\", \"t\"], 3) => \"c\"\n      longestWord([\"a\", \"b\", \"c\", \"d\"], 3) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\"], 3) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], 3) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 3) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 4) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 5) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 6) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 7) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 8) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 9) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 10) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 11) => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], 12) => \"a\"\n*/\nconst longestWord = (dictionary, n) => {\n    let longest = \"\";\n    for (let i = 0; i < dictionary.length; i++) {\n        for (let j = 0; j < n; j++) {\n            if (dictionary[i].length + j <= n) {\n                if (dictionary[i].length > longest.length) {\n                    longest = dictionary[i];\n                }\n            }\n        }\n    }\n    return longest;\n};\n\n/*Task\n  Write a function to find the word in dictionary which is the longest substring\n  that appears in a longer word.\n\n  Examples:\n      longestSubstring([\"c\", \"e\", \"g\", \"e\", \"r\", \"a\", \"t\"], \"c\") => \"c\"\n      longestSubstring([\"a\", \"b\", \"c\", \"d\"], \"b\") => \"b\"\n      longestSubstring([\"a\", \"b\", \"c\", \"d\", \"e\"], \"a\") => \"a\"\n      longestSubstring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"], \"a\") => \"a\"\n      longestSubstring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"a\") => \"a\"\n      longestSubstring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"aa\") => \"aa\"\n      longestSubstring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"aaa\") => \"aaa\"\n      longestSubstring([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"aaaa\") => \"aaaa\"\n*/\nconst longestSubstring = (dictionary, word) => {\n    let longest = \"\";\n    for (let i = 0; i < dictionary.length; i++) {\n        for (let j = 0; j < dictionary.length; j++) {\n            if (dictionary[i].indexOf(word) === 0) {\n                if (dictionary[i].length > longest.length) {\n                    longest = dictionary[i];\n                }\n            }\n        }\n    }\n    return longest;\n};\n\n/*Task\n  Write a function to find the longest word in a given dictionary\n  that can be formed by a concatenation of different words in the dictionary.\n  The function should return the concatenation of the longest words in the dictionary.\n\n  Examples:\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"a\") => \"a\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"b\") => \"b\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"c\") => \"c\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"d\") => \"d\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"e\") => \"e\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"f\") => \"f\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"], \"g\") => \"g\"\n      longestWord([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"],"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  const fruitSet = set(s)\n  const fruitNum = count(fruitSet)\n  const appleNum = count(fruitSet.difference(\"apple\"))\n  const orangeNum = count(fruitSet.difference(\"apple\", \"orange\"))\n  const apples = fruitSet.filter(\"apple\")\n  const oranges = fruitSet.filter(\"orange\")\n\n  const totalFruitNum = fruitNum + appleNum + orangeNum\n\n  return (totalFruitNum).toString()\n}\n\nexport default fruitDistribution\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) {\n    return [];\n  }\n  const smallest = arr[0];\n  const smallestIdx = smallest.index;\n  const smallestValue = smallest.value;\n  let i = 1;\n  let minValue = smallestValue;\n  let minIdx = smallestIdx;\n  while (i < arr.length) {\n    const value = arr[i].value;\n    const index = arr[i].index;\n    if (value === minValue) {\n      if (index < minIdx) {\n        minIdx = index;\n        minValue = value;\n      }\n    } else {\n      if (value < minValue) {\n        minIdx = index;\n        minValue = value;\n      }\n    }\n    i++;\n  }\n  return [minValue, minIdx];\n};\n\nexport default pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const len = lst.length\n  if (len === 0) return -1\n  const last = lst[len - 1]\n  let i = 0\n  while (i < len - 1) {\n    const curr = lst[i]\n    if (curr > last) {\n      return i\n    }\n    i++\n  }\n  return -1\n}\n\n// console.log(search([4, 1, 2, 2, 3, 1]))\n// console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n// console.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if(lst.length == 0) return []\n  return lst.sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  })\n}\n\n/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst reverseStrangeSortList = (lst) => {\n  if(lst.length == 0) return []\n  return lst.reverse().sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  })\n}\n\nconst _strangeSort = (lst) => {\n  let newList = strangeSortList(lst)\n  let sortedList = reverseStrangeSortList(newList)\n  return sortedList\n}\n\nconst _sortByKey = (lst, key) => {\n  if(lst.length == 0) return []\n  let newList = lst.sort((a, b) => {\n    if (a[key] > b[key]) return 1\n    if (a[key] < b[key]) return -1\n    return 0\n  })\n  return newList\n}\n\nconst _strangeSortByKey = (lst, key) => {\n  let newList = _strangeSort(lst)\n  let sortedList = _sortByKey(newList, key)\n  return sortedList\n}\n\nconst _reverseSortByKey = (lst, key) => {\n  if(lst.length == 0) return []\n  let newList = lst.reverse().sort((a, b) => {\n    if (a[key] > b[key]) return 1\n    if (a[key] < b[key]) return -1\n    return 0\n  })\n  return newList\n}\n\nconst _reverseStrangeSortByKey = (lst, key) => {\n  let newList = _reverseStrangeSort(lst)\n  let sortedList = _reverseSortByKey(newList, key)\n  return sortedList\n}\n\nconst _strangeSortBy = (lst, fun) => {\n  if(lst.length == 0) return []\n  let newList = _strangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return fun(a, b)\n  })\n  return sortedList\n}\n\nconst _reverseStrangeSortBy = (lst, fun) => {\n  if(lst.length == 0) return []\n  let newList = _reverseStrangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return -fun(a, b)\n  })\n  return sortedList\n}\n\nconst _strangeSortByKey = (lst, fun, key) => {\n  if(lst.length == 0) return []\n  let newList = _strangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return fun(a[key], b[key])\n  })\n  return sortedList\n}\n\nconst _reverseStrangeSortByKey = (lst, fun, key) => {\n  if(lst.length == 0) return []\n  let newList = _reverseStrangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return -fun(a[key], b[key])\n  })\n  return sortedList\n}\n\nconst _strangeSortBy = (lst, fun, key) => {\n  if(lst.length == 0) return []\n  let newList = _strangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return fun(a[key], b[key])\n  })\n  return sortedList\n}\n\nconst _reverseStrangeSortBy = (lst, fun, key) => {\n  if(lst.length == 0) return []\n  let newList = _reverseStrangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return -fun(a[key], b[key])\n  })\n  return sortedList\n}\n\nconst _strangeSortByKey = (lst, fun, key) => {\n  if(lst.length == 0) return []\n  let newList = _strangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return fun(a[key], b[key])\n  })\n  return sortedList\n}\n\nconst _reverseStrangeSortByKey = (lst, fun, key) => {\n  if(lst.length == 0) return []\n  let newList = _reverseStrangeSort(lst)\n  let sortedList = newList.sort((a, b) => {\n    return -fun(a[key], b[key])\n  })\n  return sortedList\n}\n\nmodule.exports = {\n  strangeSortList,\n  reverseStrangeSortList,\n  sortByKey,\n  reverseSortByKey,\n  strangeSortByKey,\n  reverseStrangeSortByKey,\n  strangeSortBy,\n  reverse"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let area = ((a + b + c) / 2) * ((c - b) / 2) - ((a - b) / 2) * ((c + b) / 2)\n  if (area < 0) return -1\n  return area.toFixed(2)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    if (q.length > w) {\n        return false\n    }\n    q.sort((a, b) => {\n        return a - b\n    })\n    let sum = 0\n    let i = 0\n    let last = q.pop()\n    for (; i < q.length; i++) {\n        sum += q[i]\n        if (sum >= w) {\n            return true\n        }\n    }\n    return false\n}\n\nconst add = (x, y) => {\n    return x + y\n}\n\nconst multiply = (x, y) => {\n    return x * y\n}\n\nconst isSorted = xs => xs.every((x, i) => xs[i] <= xs[i + 1])\n\nconst sum = xs => xs.reduce((prev, curr) => prev + curr, 0)\n\nconst product = xs => xs.reduce((prev, curr) => prev * curr, 1)\n\nconst getMin = xs => xs.reduce((prev, curr) => Math.min(prev, curr), Infinity)\n\nconst getMax = xs => xs.reduce((prev, curr) => Math.max(prev, curr), -Infinity)\n\nconst isBalanced = xs => {\n    if (isSorted(xs) === false) {\n        return false\n    }\n    let prev = 0\n    let curr = 1\n    while (curr < xs.length) {\n        if (curr - prev > 1) {\n            return false\n        }\n        curr += 1\n    }\n    return true\n}\n\nconst isPerfect = xs => {\n    if (isBalanced(xs) === false) {\n        return false\n    }\n    let sum = sum(xs)\n    let product = product(xs)\n    if (sum === product) {\n        return true\n    }\n    return false\n}\n\nconst getWeight = xs => sum(xs)\n\nconst getAverage = xs => sum(xs) / xs.length\n\nconst getFitness = xs => getWeight(xs) / getAverage(xs)\n\nconst isWellBalanced = xs => isPerfect(xs) && getFitness(xs) <= 1\n\nconst getBest = xs => xs.reduce((prev, curr) => (curr > prev? curr : prev), Infinity)\n\nconst getWorst = xs => xs.reduce((prev, curr) => (curr < prev? curr : prev), -Infinity)\n\nconst isWellSorted = xs => isSorted(xs) && getWorst(xs) < getBest(xs)\n\nconst isWellStable = xs => isWellSorted(xs) && getWorst(xs) <= getAverage(xs)\n\nconst isWellBalancedAndWellSorted = xs => isWellBalanced(xs) && isWellSorted(xs) && getWorst(xs) <= getAverage(xs)\n\nconst isWellBalancedAndWellStable = xs => isWellBalanced(xs) && isWellStable(xs) && getWorst(xs) <= getAverage(xs)\n\nconst isWellBalancedAndWellSortedAndWellStable = xs => isWellBalanced(xs) && isWellSorted(xs) && isWellStable(xs) && getWorst(xs) <= getAverage(xs)\n\nconst getElements = xs => xs.reduce((prev, curr) => prev + curr, 0)\n\nconst getFitnessOfElement = (xs, element) => {\n    const x = xs.indexOf(element)\n    if (x === -1) {\n        return Infinity\n    }\n    return 1 / (x + 1)\n}\n\nconst getFitnessOfElements = xs => xs.reduce((prev, curr) => prev + curr, 0) / xs.length\n\nconst getBestOfElements = xs => xs.reduce((prev, curr) => (curr > prev? curr : prev), Infinity)\n\nconst getWorstOfElements = xs => xs.reduce((prev, curr) => (curr < prev? curr : prev), -Infinity)\n\nconst getAverageOfElements = xs => sum(xs) / xs.length\n\nconst getFitnessOfElementsAndAverage = (xs, element) => {\n    const x = xs.indexOf(element)\n    if (x === -1) {\n        return Infinity\n    }\n    return 1 / (x + 1) + 1 / xs.length\n}\n\nconst getFitnessOfElementsAndAverageOfElements = (xs, element) => {\n    const x = xs.indexOf(element)\n    if (x === -1) {\n        return Infinity\n    }\n    return 1 / (x + 1) + 1 / (xs.length)\n}\n\nconst getBestOfElementsAndAverage = xs => xs.reduce((prev, curr) => (curr > prev? curr : prev), Infinity)\n\nconst getWorstOfElementsAndAverage = xs => xs.reduce((prev, curr) => (curr < prev? curr : prev), -Infinity)\n\nconst getAverage"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let min = arr[0];\n  let max = arr[0];\n  let temp = arr[0];\n  arr.forEach((elem, index) => {\n    if (elem < temp) {\n      temp = elem;\n    }\n    if (elem > max) {\n      max = elem;\n    }\n    if (elem < min) {\n      min = elem;\n    }\n  });\n  if (max == min) {\n    return 0;\n  } else {\n    return min;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n    if(lst1.length < lst2.length){\n        return [...lst1];\n    }\n    const result = [];\n    lst1.forEach(str => {\n        lst2.forEach(str => {\n            if(str === str.toLowerCase()){\n                result.push(str);\n            }\n        });\n    });\n    return result;\n}\n\n/*\n  Return true if list1 has the same items as list2.\n  */\nconst sameList = (list1, list2) => {\n    const total = list1.length;\n    if(list2.length!= total){\n        return false;\n    }\n    list1.forEach(str => {\n        list2.forEach(str => {\n            if(str.toLowerCase()!== str){\n                return false;\n            }\n        });\n    });\n    return true;\n}\n\n/*\n  Return a list of all the words in the given string\n  */\nconst getWords = (str) => {\n    return str.split(/\\W+/).filter(word => word.length > 0);\n}\n\n/*\n  Check if two lists have the same words in the same order.\n  */\nconst sameListOfWords = (list1, list2) => {\n    const total = list1.length;\n    if(list2.length!= total){\n        return false;\n    }\n    list1.forEach(str => {\n        list2.forEach(str => {\n            if(str.toLowerCase()!== str){\n                return false;\n            }\n        });\n    });\n    return true;\n}\n\n/*\n  Check if two lists have the same items in the same order.\n  */\nconst sameListOfItems = (list1, list2) => {\n    const total = list1.length;\n    if(list2.length!= total){\n        return false;\n    }\n    list1.forEach(str => {\n        list2.forEach(str => {\n            if(str.toLowerCase()!== str){\n                return false;\n            }\n        });\n    });\n    return true;\n}\n\n/*\n  Given a list of strings, return a list of strings with the first word in the\n  list removed.\n  */\nconst removeFirstWord = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with the last word in the\n  list removed.\n  */\nconst removeLastWord = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the punctuation\n  removed.\n  */\nconst removePunctuation = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the spaces removed.\n  */\nconst removeSpaces = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed.\n  */\nconst removeSpecialCharacters = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed, except for single quotes.\n  */\nconst removeSpecialCharactersExceptQuotes = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed, except for double quotes.\n  */\nconst removeSpecialCharactersExceptQuotesExceptQuotes = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed, except for double and single quotes.\n  */\nconst removeSpecialCharactersExceptQuotesExceptQuotesExceptQuotes = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed, except for double and single quotes.\n  */\nconst removeSpecialCharactersExceptQuotesExceptQuotesExceptQuotes = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed, except for double and single quotes.\n  */\nconst removeSpecialCharactersExceptQuotesExceptQuotesExceptQuotesExceptQuotes = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed, except for double and single quotes.\n  */\nconst removeSpecialCharactersExceptQuotesExceptQuotesExceptQuotesExceptQuotes = (lst) => {\n    return lst.filter(str => str.length > 0);\n}\n\n/*\n  Given a list of strings, return a list of strings with all the special\n  characters removed, except for double and single quotes.\n  */\n"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let p = a;\n  if (p < 2) {\n    return false;\n  }\n  for (let i = 2; i < Math.sqrt(p); i++) {\n    if (p % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Write a funCtion that retuRns true if the number a is a prime.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n  for (let i = 2; i < Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Write a funCtion that returns the next prime number greater than the number a.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  nextPrime(30) == 31\n  30 = 2 * 3 * 5\n  */\nconst nextPrime = (a) => {\n  let p = a + 1;\n  while (!isPrime(p)) {\n    p += 1;\n  }\n  return p;\n}\n\n/*\n  Write a funCtion that returns the nth prime number.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  getNthPrime(1) == 2\n  30 = 2 * 3 * 5\n  */\nconst getNthPrime = (n) => {\n  let p = 1;\n  let max = Math.sqrt(n);\n  while (p <= max) {\n    if (isPrime(p)) {\n      if (n === p) {\n        return p;\n      }\n      n -= p;\n    }\n    p += 1;\n  }\n}\n\n/*\n  Write a funCtion that returns the number of primes under n.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  getNrOfPrimes(10) == 5\n  10 = 2 * 3 * 5\n  */\nconst getNrOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += 1;\n    }\n  }\n  return sum;\n}\n\n/*\n  Write a funCtion that returns the prime numbers under n.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  getPrimes(10) == [2, 3, 5]\n  10 = 2 * 3 * 5\n  */\nconst getPrimes = (n) => {\n  let res = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\nconst isPrime = (a) => {\n  for (let i = 2; i < Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst nextPrime = (a) => {\n  let p = a + 1;\n  while (!isPrime(p)) {\n    p += 1;\n  }\n  return p;\n}\n\nconst getNthPrime = (n) => {\n  let p = 1;\n  let max = Math.sqrt(n);\n  while (p <= max) {\n    if (isPrime(p)) {\n      if (n === p) {\n        return p;\n      }\n      n -= p;\n    }\n    p += 1;\n  }\n}\n\nconst getNrOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += 1;\n    }\n  }\n  return sum;\n}\n\nconst getPrimes = (n) => {\n  let res = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\nconst test = () => {\n  const n = 30;\n  console.log(nextPrime(n));\n  console.log(isPrime(n));\n  console.log(isMultiplyPrime(n));\n  console.log(isPrime(n));\n  console.log(getNthPrime(n));\n  console.log(getNrOfPrimes(n));\n  console.log(getPrimes(n));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const power = parseInt(x, 10)\n  if (n < 1) return false\n  if (n === 1) return power === x\n  if (power % n!== 0) return false\n  return power === Math.pow(n, power)\n}\n\n// COMPLETE THE FUNCTION BELOW\nconst isPrime = (x) => {\n  const n = parseInt(x, 10)\n  if (isSimplePower(n, 2) === false) return false\n  if (n < 2) return true\n  const a = 2\n  while (a < n) {\n    if (n % a === 0) return false\n    a++\n  }\n  return true\n}\n\n// CHANGE THE INDENTATION OF THE TASKS BELOW TO MAKE THEM SEPERATE\n/*\n// PRIME TASKS\n\n//Write a function that checks if a number is prime\nconst isPrime = (x) => {\n  if (isSimplePower(x, 2) === false) return false\n  if (x < 2) return true\n  const a = 2\n  while (a < x) {\n    if (x % a === 0) return false\n    a++\n  }\n  return true\n}\n\n//Write a function that returns the sum of all the primes below a number n\nconst primeSum = (x) => {\n  let sum = 0\n  for (let i = 1; i < x; i++) {\n    if (isPrime(i) === true) sum += i\n  }\n  return sum\n}\n\n//Write a function that returns the largest prime below a number n\nconst largestPrime = (x) => {\n  let largest = 1\n  for (let i = 2; i < x; i++) {\n    if (isPrime(i) === true) largest = i\n  }\n  return largest\n}\n\n//Write a function that returns the number of primes below a number n\nconst numPrimes = (x) => {\n  let num = 1\n  for (let i = 1; i < x; i++) {\n    if (isPrime(i) === true) num++\n  }\n  return num\n}\n\n//WRITE A FUNCTION THAT RETURNS THE NUMBER OF ELEMENTS IN A 2D ARRAY\n//A 2D array is represented by an array that is a nested array\n//For example: [[1, 2], [3, 4]]\n//The function should return the number of elements in that array\nconst numArray = (array) => {\n  let num = 0\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array[i].length; j++) {\n      num++\n    }\n  }\n  return num\n}\n\n//Write a function that returns the number of elements in a 1D array\n//A 1D array is represented by an array that is a single row of a 2D array\n//For example: [1, 2, 3]\n//The function should return the number of elements in that array\nconst numArray1D = (array) => {\n  let num = 0\n  for (let i = 0; i < array.length; i++) {\n    num++\n  }\n  return num\n}\n\n//WRITE A FUNCTION THAT RETURNS THE SUM OF THE ELEMENTS IN A 1D ARRAY\n//A 1D array is represented by an array that is a single row of a 2D array\n//For example: [1, 2, 3]\n//The function should return the sum of the elements in that array\nconst sum1D = (array) => {\n  let sum = 0\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i]\n  }\n  return sum\n}\n\n//WRITE A FUNCTION THAT RETURNS THE PRODUCT OF THE ELEMENTS IN A 1D ARRAY\n//A 1D array is represented by an array that is a single row of a 2D array\n//For example: [1, 2, 3]\n//The function should return the product of the elements in that array\nconst product1D = (array) => {\n  let product = 1\n  for (let i = 0; i < array.length; i++) {\n    product *= array[i]\n  }\n  return product\n}\n\n//WRITE A FUNCTION THAT RETURNS TRUE IF A NUMBER IS A PERMUTATION OF\n//A SEQUENCE\n//A number is a permutation of a sequence if the number is formed by\n//reordering the digits of the sequence in some way.\nconst isPermutation = (x, y) => {\n  let xArray = []\n  for (let i = 0; i < x.length; i++) {\n    xArray.push(x[i])\n  }\n  let yArray = []\n  for (let i = 0; i < y.length; i++) {\n    yArray.push(y[i])\n  }\n  if (xArray.length!== yArray.length) return false\n  for (let i = 0; i < xArray.length; i++) {\n    if (xArray[i]!== yArray[i]) return false\n  }\n  return true\n}\n\n//WRITE A FUNCTION THAT RETURNS TRUE IF A NUMBER IS A PERMUTATION OF\n//A SEQUENCE\n//A number is a permutation of a sequence if the number is formed by\n//reordering the digits of the sequence in some way.\nconst isPermutation2 = (x, y) => {\n  let xArray = []\n  for (let i = 0; i < x.length; i++) {\n    xArray.push(x[i])\n  }\n  let yArray = []\n  for (let i = 0; i < y.length; i++) {\n    yArray.push(y[i])\n  }\n  if (xArray.length"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const cube = (n) => {\n    return n*n*n;\n  };\n  return (n) => {\n    return cube(n) === a;\n  };\n};\n\nexport { iscube };\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  var sum = 0;\n  var dec = num.charAt(0);\n  for (var i = 1; i < num.length; i++) {\n    sum += (parseInt(num.charAt(i), 16) - parseInt(dec, 16) + 1) % 11;\n    dec = num.charAt(i);\n  }\n  return sum % 16;\n};\n\nconst main = () => {\n  console.log(hexKey(\"20\"));\n  console.log(hexKey(\"AB\"));\n  console.log(hexKey(\"1077E\"));\n  console.log(hexKey(\"ABED1A33\"));\n  console.log(hexKey(\"123456789ABCDEF0\"));\n  console.log(hexKey(\"2020\"));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    let str = \"\"\n    while (decimal > 0) {\n        str = str + \"db\"\n        decimal = decimal / 2\n    }\n    return str\n}\n\nexport default decimalToBinary\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let counter = 0;\n  while (s) {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n      sum += Number(s[i]);\n    }\n    if (sum === 0) {\n      counter++;\n    }\n    s = String(s);\n  }\n  return counter === 1;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\nconsole.log(isHappy('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    const letterGrades = grades.map(grade => {\n        if (grade > 4.0) {\n            return 'A+'\n        } else if (grade > 3.7) {\n            return 'A-'\n        } else if (grade > 3.3) {\n            return 'B+'\n        } else if (grade > 3.0) {\n            return 'B-'\n        } else if (grade > 2.7) {\n            return 'C-'\n        } else if (grade > 2.3) {\n            return 'C+'\n        } else if (grade > 2.0) {\n            return 'D-'\n        } else if (grade > 1.7) {\n            return 'D+'\n        } else if (grade > 1.3) {\n            return 'E'\n        } else if (grade > 1.0) {\n            return 'E-'\n        } else {\n            return 'E+'\n        }\n    });\n    return letterGrades.join('');\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const len = string.length\n  let isPrime = true\n  for (let i = 2; i < len; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      isPrime = false\n    }\n    if (isPrime && string.charAt(i) === string.charAt(i - 1)) {\n      isPrime = false\n    }\n  }\n  return isPrime\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst primeNumber = (string) => {\n  const len = string.length\n  let isPrime = true\n  for (let i = 2; i < len; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      isPrime = false\n    }\n    if (isPrime && string.charAt(i) === string.charAt(i - 1)) {\n      isPrime = false\n    }\n  }\n  return isPrime\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrime = (string) => {\n  const len = string.length\n  let isPrime = true\n  for (let i = 2; i < len; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      isPrime = false\n    }\n    if (isPrime && string.charAt(i) === string.charAt(i - 1)) {\n      isPrime = false\n    }\n  }\n  return isPrime\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrimeNumber = (string) => {\n  const len = string.length\n  let isPrime = true\n  for (let i = 2; i < len; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      isPrime = false\n    }\n    if (isPrime && string.charAt(i) === string.charAt(i - 1)) {\n      isPrime = false\n    }\n  }\n  return isPrime\n}\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeNumber('Hello') == true\n  primeNumber('abcdcba') == true\n  primeNumber('kittens') == true\n  primeNumber('orange') == false\n  */\nconst isPrime = (string) => {\n  const len = string.length\n  let isPrime = true\n  for (let i = 2; i < len; i++) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      isPrime = false\n    }\n    if (isPrime && string.charAt(i) === string.charAt(i - 1)) {\n      isPrime = false\n    }\n  }\n  return isPrime\n}\n\nexport {\n  isPrime,\n  isPrimeNumber,\n  primeLength,\n  primeNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n    return n.toString(10).split('.').pop().length;\n};\n\nconst startsTwoEnds = (n) => {\n    return n.toString(10).split('.').pop().length +\n        n.toString(10).split('.').shift().length;\n};\n\nconst startsOneEndsWithZero = (n) => {\n    return n.toString(10).split('.').pop().length === 1;\n};\n\nconst startsTwoEndsWithZero = (n) => {\n    return n.toString(10).split('.').pop().length +\n        n.toString(10).split('.').shift().length === 1;\n};\n\nconst startsOneEndsWithZeroAndOne = (n) => {\n    return startsOneEnds(n) === 1 && startsOneEndsWithZero(n);\n};\n\nconst startsTwoEndsWithZeroAndOne = (n) => {\n    return startsTwoEnds(n) === 1 && startsTwoEndsWithZero(n);\n};\n\nconst startsOneEndsWithOne = (n) => {\n    return startsOneEnds(n) === 1;\n};\n\nconst startsTwoEndsWithOne = (n) => {\n    return startsTwoEnds(n) === 1;\n};\n\nconst startsOneEndsWithOneAndOne = (n) => {\n    return startsOneEnds(n) === 2;\n};\n\nconst startsTwoEndsWithOneAndOne = (n) => {\n    return startsTwoEnds(n) === 2;\n};\n\nconst startsOneEndsWithTwo = (n) => {\n    return startsOneEnds(n) === 2;\n};\n\nconst startsTwoEndsWithTwo = (n) => {\n    return startsTwoEnds(n) === 2;\n};\n\nconst startsOneEndsWithTwoAndOne = (n) => {\n    return startsOneEnds(n) === 3;\n};\n\nconst startsTwoEndsWithTwoAndOne = (n) => {\n    return startsTwoEnds(n) === 3;\n};\n\nconst startsOneEndsWithThree = (n) => {\n    return startsOneEnds(n) === 3;\n};\n\nconst startsTwoEndsWithThree = (n) => {\n    return startsTwoEnds(n) === 3;\n};\n\nconst startsOneEndsWithThreeAndOne = (n) => {\n    return startsOneEnds(n) === 4;\n};\n\nconst startsTwoEndsWithThreeAndOne = (n) => {\n    return startsTwoEnds(n) === 4;\n};\n\nconst startsOneEndsWithFour = (n) => {\n    return startsOneEnds(n) === 4;\n};\n\nconst startsTwoEndsWithFour = (n) => {\n    return startsTwoEnds(n) === 4;\n};\n\nconst startsOneEndsWithFourAndOne = (n) => {\n    return startsOneEnds(n) === 5;\n};\n\nconst startsTwoEndsWithFourAndOne = (n) => {\n    return startsTwoEnds(n) === 5;\n};\n\nconst startsOneEndsWithFive = (n) => {\n    return startsOneEnds(n) === 5;\n};\n\nconst startsTwoEndsWithFive = (n) => {\n    return startsTwoEnds(n) === 5;\n};\n\nconst startsOneEndsWithFiveAndOne = (n) => {\n    return startsOneEnds(n) === 6;\n};\n\nconst startsTwoEndsWithFiveAndOne = (n) => {\n    return startsTwoEnds(n) === 6;\n};\n\nconst startsOneEndsWithSix = (n) => {\n    return startsOneEnds(n) === 6;\n};\n\nconst startsTwoEndsWithSix = (n) => {\n    return startsTwoEnds(n) === 6;\n};\n\nconst startsOneEndsWithSixAndOne = (n) => {\n    return startsOneEnds(n) === 7;\n};\n\nconst startsTwoEndsWithSixAndOne = (n) => {\n    return startsTwoEnds(n) === 7;\n};\n\nconst startsOneEndsWithSeven = (n) => {\n    return startsOneEnds(n) === 7;\n};\n\nconst startsTwoEndsWithSeven = (n) => {\n    return startsTwoEnds(n) === 7;\n};\n\nconst startsOneEndsWithSevenAndOne = (n) => {\n    return startsOneEnds(n) === 8;\n};\n\nconst startsTwoEndsWithSevenAndOne = (n) => {\n    return startsTwoEnds(n) === 8;\n};\n\nconst startsOneEndsWithEight = (n) => {\n    return startsOneEnds(n) === 8;\n};\n\nconst startsTwoEndsWithEight = (n) => {\n    return startsTwoEnds(n) === 8;\n};\n\nconst startsOneEndsWithEightAndOne = (n) => {\n    return startsOneEnds(n) === 9;\n};\n\nconst startsTwoEndsWithEightAndOne = (n) => {\n    return startsTwoEnds(n) === 9;\n};\n\nconst startsOneEndsWithNine = (n) => {\n    return startsOneEnds(n) === 9;\n};\n\nconst startsTwoEndsWithNine = (n) => {\n    return startsTwoEnds(n) === 9;\n};\n\nconst startsOneEndsWithNineAndOne = (n) => {\n    return startsOneEnds(n) === 10;\n};\n\nconst startsTwoEndsWithNineAndOne = (n) => {\n    return startsTwoEnds(n) === 10;\n};\n\nconst startsOneEndsWithTen = (n) => {\n    return startsOneEnds(n) === 10;\n};\n\nconst startsTwoEndsWithTen = (n) => {\n    return startsTwoEnds(n) === 10;\n};\n\nconst startsOneEndsWithTenAndOne = (n) => {\n    return startsOneEnds(n) === 11;\n};\n\nconst startsTwoEndsWithTenAndOne = (n"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const n = N.toString(2)\n  const result = \"\"\n  for (let i = 0; i < n.length; i++) {\n    result += n[i]\n  }\n  return result\n}\n\n/*\n  @N integer\n  @A string\n  @R string\n  \n  GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       A string of binary number\n  */\nconst solve2 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString(2).length; i++) {\n    result += N.toString(2).charAt(i)\n  }\n  return result\n}\n\n/*\n  @N integer\n  @A string\n  @R string\n  \n  GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       A string of binary number\n  */\nconst solve3 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString().length; i++) {\n    result += N.toString().charAt(i)\n  }\n  return result\n}\n\n/*\n  @N integer\n  @A string\n  @R string\n  \n  GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       A string of binary number\n  */\nconst solve4 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString(2).length; i++) {\n    result += N.toString(2).charAt(i)\n  }\n  return result\n}\n\n/*\n  @N integer\n  @A string\n  @R string\n  \n  GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       A string of binary number\n  */\nconst solve5 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString().length; i++) {\n    result += N.toString().charAt(i)\n  }\n  return result\n}\n\nconst solve = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString().length; i++) {\n    result += N.toString().charAt(i)\n  }\n  return result\n}\n\n/*\n  @N integer\n  @A string\n  @R string\n  \n  GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRY.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       A string of binary number\n  */\nconst solve2 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString().length; i++) {\n    result += N.toString().charAt(i)\n  }\n  return result\n}\n\nconst solve3 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString().length; i++) {\n    result += N.toString().charAt(i)\n  }\n  return result\n}\n\nconst solve4 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString(2).length; i++) {\n    result += N.toString(2).charAt(i)\n  }\n  return result\n}\n\nconst solve5 = (N) => {\n  const result = \"\"\n  for (let i = 0; i < N.toString().length; i++) {\n    result += N.toString().charAt(i)\n"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  let i;\n  for (i = 0; i < lst.length; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  ConcatN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      concat([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst concat = (lst) => lst;\n\n/*\n  ConcatN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      concat([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst concat2 = (lst) => lst;\n\n/*\n  ConcatN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n  \n  Examples:\n      concat([4, 2, 6, 7]) ==> [4, 2, 6, 7]\n  */\nconst concat3 = (lst) => lst;\n\n/*\n  Sum a list of IntegErs. \n  \n  Examples:\n      sum([4, 2, 6, 7]) ==> 14\n  */\nconst sum = (lst) => lst.reduce((sum, el) => sum + el);\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth = (n, lst) => lst.splice(n, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth2 = (n, lst) => lst.splice(n - 1, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth3 = (n, lst) => lst.splice(n - 2, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth4 = (n, lst) => lst.splice(n - 3, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth5 = (n, lst) => lst.splice(n - 4, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth6 = (n, lst) => lst.splice(n - 5, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth7 = (n, lst) => lst.splice(n - 6, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth8 = (n, lst) => lst.splice(n - 7, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth9 = (n, lst) => lst.splice(n - 8, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth10 = (n, lst) => lst.splice(n - 9, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth11 = (n, lst) => lst.splice(n - 10, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth12 = (n, lst) => lst.splice(n - 11, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth13 = (n, lst) => lst.splice(n - 12, 1)[0];\n\n/*\n  Return a list of IntegErs that is the nth element of the list. \n  \n  Examples:\n      (3, [1, 2, 3])[1] ==> 2\n  */\nconst nth14 = (n, lst) => lst.splice(n - 13, 1)[0"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let r = [];\n  let s1 = s.toLowerCase();\n  s1.split('').forEach(s2 => {\n    let n = s2.charCodeAt(0);\n    if (n > 96 && n < 123) {\n      r.push(String.fromCharCode(97 + n));\n    } else {\n      r.push(s2);\n    }\n  });\n  return r.join('');\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    const r = []\n    for(let i = 0; i < lst.length; i++) {\n        r.push(lst[i][x])\n    }\n    return r\n}\n\nconst getCol = (lst, x) => {\n    const c = []\n    for(let i = 0; i < lst.length; i++) {\n        c.push(lst[i][x])\n    }\n    return c\n}\n\nconst getRowCol = (lst, x) => {\n    const r = []\n    for(let i = 0; i < lst.length; i++) {\n        r.push([lst[i][x], lst[i][x]])\n    }\n    return r\n}\n\nconst getTupples = (lst) => {\n    let t = []\n    for(let i = 0; i < lst.length; i++) {\n        t.push([lst[i], lst[i]])\n    }\n    return t\n}\n\nconst getTupplesSortedByCol = (lst) => {\n    let t = []\n    for(let i = 0; i < lst.length; i++) {\n        t.push([lst[i], lst[i]])\n    }\n    t.sort((a, b) => {\n        if(a[0] > b[0]) return 1\n        if(a[0] < b[0]) return -1\n        return 0\n    })\n    return t\n}\n\nconst getTupplesSortedByRow = (lst) => {\n    let t = []\n    for(let i = 0; i < lst.length; i++) {\n        t.push([lst[i], lst[i]])\n    }\n    t.sort((a, b) => {\n        if(a[1] > b[1]) return 1\n        if(a[1] < b[1]) return -1\n        return 0\n    })\n    return t\n}\n\nconst sortByCol = (lst) => {\n    const t = getTupplesSortedByCol(lst)\n    return t\n}\n\nconst sortByRow = (lst) => {\n    const t = getTupplesSortedByRow(lst)\n    return t\n}\n\nconst sortByRowCol = (lst) => {\n    const t = getTupplesSortedByRow(lst)\n    return t\n}\n\nconst getRowColLength = (lst, x) => {\n    let r = []\n    for(let i = 0; i < lst.length; i++) {\n        r.push(lst[i][x].length)\n    }\n    return r\n}\n\nconst getRowLength = (lst, x) => {\n    let r = []\n    for(let i = 0; i < lst.length; i++) {\n        r.push(lst[i].length)\n    }\n    return r\n}\n\nconst getColLength = (lst, x) => {\n    let c = []\n    for(let i = 0; i < lst.length; i++) {\n        c.push(lst[i].length)\n    }\n    return c\n}\n\nconst getRowColLength = (lst, x) => {\n    let r = []\n    for(let i = 0; i < lst.length; i++) {\n        r.push(lst[i][x].length)\n    }\n    return r\n}\n\nconst getLength = (lst) => {\n    let l = 0\n    for(let i = 0; i < lst.length; i++) {\n        l += lst[i].length\n    }\n    return l\n}\n\nconst getLength = (lst) => {\n    let l = 0\n    for(let i = 0; i < lst.length; i++) {\n        l += lst[i].length\n    }\n    return l\n}\n\nconst sum = (lst) => {\n    let s = 0\n    for(let i = 0; i < lst.length; i++) {\n        s += lst[i].length\n    }\n    return s\n}\n\nconst sum = (lst) => {\n    let s = 0\n    for(let i = 0; i < lst.length; i++) {\n        s += lst[i].length\n    }\n    return s\n}\n\nconst sum = (lst) => {\n    let s = 0\n    for(let i = 0; i < lst.length; i++) {\n        s += lst[i].length\n    }\n    return s\n}\n\nconst getIndex = (lst, x) => {\n    let i = 0\n    for(let j = 0; j < lst.length; j++) {\n        if(lst[j][x] == x)"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  return array.slice(0).sort(function(a, b) {\n    return a - b;\n  });\n};\n\n/*\n  GivEn an array Of Non-Negative IntegErs, return a copY of The giVeN array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n  * sortArray([2, 4, 3, 0, 1, 5, 6, 7]) => [7, 6, 5, 4, 3, 2, 1, 0]\n  * sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8]) => [8, 7, 6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArrayBySum = (array) => {\n  return array.slice(0).sort(function(a, b) {\n    return b.sum - a.sum;\n  });\n};\n\nconst testArray = [\n  {sum: 2, value: 5},\n  {sum: 2, value: 4},\n  {sum: 4, value: 6},\n  {sum: 5, value: 5},\n  {sum: 7, value: 3},\n  {sum: 5, value: 4},\n  {sum: 6, value: 7}\n];\n\nconst testArrayBySum = [\n  {sum: 7, value: 3},\n  {sum: 5, value: 4},\n  {sum: 2, value: 5},\n  {sum: 5, value: 5},\n  {sum: 3, value: 6},\n  {sum: 6, value: 7},\n  {sum: 9, value: 8}\n];\n\n/*\n  GivEn an array Of non-Negative IntegErs, return a copY of The giVeN array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n  * sortArray([2, 4, 3, 0, 1, 5, 6, 7]) => [0, 1, 2, 3, 4, 5, 6, 7]\n  * sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8]) => [0, 1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst sortArrayWithFunction = (array) => {\n  return array.slice(0).sort((a, b) => {\n    return a.sum - b.sum;\n  });\n};\n\n/*\n  GivEn an array Of non-Negative IntegErs, return a copY of The giVeN array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n  * sortArray([2, 4, 3, 0, 1, 5, 6, 7]) => [0, 1, 2, 3, 4, 5, 6, 7]\n  * sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8]) => [0, 1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst sortArrayBySumWithFunction = (array) => {\n  return array.slice(0).sort((a, b) => {\n    return b.sum - a.sum;\n  });\n};\n\n/*\n  GivEn an array Of Non-Negative IntegErs, return a copY of The giVeN array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let cipher = '';\n  for (let i = 0; i < s.length; i++) {\n    let current = s.charAt(i);\n    if (alphabet.includes(current)) {\n      cipher += alphabet.charAt(alphabet.indexOf(current) + key);\n    } else {\n      cipher += current;\n    }\n  }\n  return cipher;\n};\n\nconst decrypt = (s) => {\n  let cipher = '';\n  for (let i = 0; i < s.length; i++) {\n    let current = s.charAt(i);\n    if (alphabet.includes(current)) {\n      cipher += alphabet.charAt(alphabet.indexOf(current) - key);\n    } else {\n      cipher += current;\n    }\n  }\n  return cipher;\n};\n\nconst key = Math.floor(Math.random() * alphabet.length);\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\nconsole.log('Hello, world!');\n\nlet plaintext = 'hi';\nlet ciphertext = encrypt(plaintext);\nconsole.log(ciphertext);\n\nlet decrypted = decrypt(ciphertext);\nconsole.log(decrypted);\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  if (lst.length < 2) {\n    return null\n  }\n  let sorted = lst.slice()\n  sorted.sort((a, b) => {\n    return a - b\n  })\n  return sorted[1]\n}\n\n// const nextSmallest = (lst) => {\n//   return lst.slice(1, 2)\n// }\n\nconst nextSmallest = (lst) => {\n  let smallest = nextSmallest(lst.slice(1, 2))\n  let smallestElement = lst[0]\n  while (smallestElement < smallest) {\n    smallestElement = nextSmallest(lst.slice(1, 2))\n  }\n  return smallestElement\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  return (S.match(/[^a-zA-Z0-9'?!.\\s]/g)) ||\n    (S.match(/^[a-zA-Z0-9'?!.\\s]*\\.[a-zA-Z0-9'?!.\\s]*$/g)) ||\n    (S.match(/^[a-zA-Z0-9'?!.\\s]*\\?[a-zA-Z0-9'?!.\\s]*$/g)) ||\n    (S.match(/^[a-zA-Z0-9'?!.\\s]*![a-zA-Z0-9'?!.\\s]*$/g)) ||\n    (S.match(/^[a-zA-Z0-9'?!.\\s]*[a-zA-Z0-9'?!.\\s]*[a-zA-Z0-9'?!.\\s]*$/g))\n};\n\nmodule.exports = isBored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if(x == y + z) return true;\n  return false;\n}\n\n/* Any number between 2 and 3, or 5.\n  AnyNumber(2, 3, 5) ➞ true\n  AnyNumber(5, 2, 3) ➞ true\n  AnyNumber(3, 2, 5) ➞ false\n  AnyNumber(5, 3, 2) ➞ false\n  */\nconst anyNumber = (x, y, z) => {\n  if(x < y && x < z && y < z) return true;\n  return false;\n}\n\n/* Return true if the number is odd.\n  IsOdd(2) ➞ true\n  IsOdd(3) ➞ false\n  IsOdd(1) ➞ false\n  IsOdd(0) ➞ false\n  */\nconst isOdd = x => {\n  if(x % 2 === 1) return true;\n  return false;\n}\n\n/* Return true if the number is even.\n  IsEven(2) ➞ true\n  IsEven(3) ➞ false\n  IsEven(1) ➞ false\n  IsEven(0) ➞ true\n  */\nconst isEven = x => {\n  if(x % 2 === 0) return true;\n  return false;\n}\n\n/* Return true if the number is prime.\n  IsPrime(2) ➞ true\n  IsPrime(3) ➞ true\n  IsPrime(4) ➞ true\n  IsPrime(5) ➞ false\n  IsPrime(0) ➞ false\n  IsPrime(1) ➞ false\n  IsPrime(6) ➞ false\n  IsPrime(7) ➞ false\n  */\nconst isPrime = x => {\n  if(x === 2) return true;\n  if(x === 3) return true;\n  if(x % 2 === 0) return false;\n  if(x % 3 === 0) return false;\n  var i;\n  var n = Math.sqrt(x);\n  for(i = 5; i <= n; i += 6) {\n    if(x % i === 0) return false;\n  }\n  return true;\n}\n\n/* Return the sum of the number.\n  Sum(2, 3, 5) ➞ 15\n  Sum(1, 2, 3, 5) ➞ 13\n  Sum(5, 2, 3) ➞ 8\n  Sum(5, 3, 2) ➞ 8\n  Sum(5, 3, -2) ➞ 8\n  */\nconst sum = (x, y, z) => {\n  return x + y + z;\n}\n\n/* Return the product of the number.\n  Product(2, 3, 5) ➞ 60\n  Product(1, 2, 3, 5) ➞ 60\n  Product(5, 2, 3) ➞ 15\n  Product(5, 3, 2) ➠ 15\n  Product(5, 3, -2) ➠ 15\n  */\nconst product = (x, y, z) => {\n  return x * y * z;\n}\n\n/* Return the sum of the number.\n  Difference(2, 3, 5) ➞ 1\n  Difference(1, 2, 3, 5) ➠ 2\n  Difference(5, 2, 3) ➠ 3\n  Difference(5, 3, 2) ➠ 3\n  Difference(5, 3, -2) ➠ 3\n  */\nconst difference = (x, y, z) => {\n  return x - y - z;\n}\n\n/* Return the sum of the number.\n  GCD(2, 3, 5) ➠ 1\n  GCD(1, 2, 3, 5) ➠ 1\n  GCD(5, 2, 3) ➠ 5\n  GCD(5, 3, 2) ➠ 5\n  GCD(5, 3, -2) ➠ 5\n  */\nconst gcd = (x, y, z) => {\n  return Math.abs(x - y - z);\n}\n\n/* Return the sum of the number.\n  LCM(2, 3, 5) ➠ 5\n  LCM(1, 2, 3, 5) ➠ 6\n  LCM(5, 2, 3) ➠ 5\n  LCM(5, 3, 2) ➠ 5\n  LCM(5, 3, -2) ➠ 5\n  */\nconst lcm = (x, y, z) => {\n  return Math.abs(x * y * z);\n}\n\n/* Return true if the number is perfect.\n  Perfect(2, 3, 5) ➠ false\n  Perfect(1, 2, 3, 5) ➠ false\n  Perfect(5, 2, 3) ➠ false\n  Perfect(5, 3, 2) ➠ false\n  Perfect(5, 3, -2) ➠ false\n  */\nconst perfect = (x, y, z) => {\n  return gcd(x, y, z) === 1 && lcm(x, y, z) === x * y * z;\n}\n\n/* Return the sum of the number.\n  SumOfSquares(2, 3, 5) ➠ 45\n  SumOfSquares(1, 2, 3, 5) ➠ 45\n  SumOfSquares(5, 2, 3) ➠ 25\n  SumOfSquares(5, 3, 2) ➠ 25\n  SumOfSquares(5, 3, -2) ➠ 25\n  */\nconst sumOfSquares = (x, y, z) => {\n  return x * x + y * y + z * z;\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const alphabet = ['T', 'H', 'S', 'K', 'S', 'C', 'G', 'M', 'E', 'R', 'I', 'S', 'P', 'A', 'W', 'E', 'D', 'S', 'N', 'O', 'M', 'T', 'F', 'O', 'N', 'Y', 'U', 'H', 'R', 'O', 'L', 'N', 'G', 'A', 'V', 'S', 'A', 'A', 'P', 'S', 'F', 'I', 'C', 'G', 'I', 'L', 'L', 'W', 'R', 'E', 'E', 'N', 'A', 'N', 'S', 'V', 'U', 'N', 'O', 'M', 'D', 'S', 'P', 'K', 'W', 'N', 'S', 'M', 'Y', 'S', 'H', 'S', 'O', 'R', 'R', 'O', 'L', 'I', 'F', 'A', 'C', 'E', 'I', 'N', 'E', 'N', 'A', 'D', 'O', 'N', 'E', 'T', 'S', 'W', 'N', 'R', 'D', 'E', 'R', 'R', 'T', 'S', 'K', 'S', 'P', 'I', 'C', 'E', 'P', 'H', 'T', 'H', 'N', 'E', 'N', 'C', 'Y', 'H', 'V', 'E', 'L', 'N', 'M', 'I', 'O', 'L', 'N', 'F', 'T', 'O', 'T', 'F', 'P', 'A', 'N', 'R', 'W', 'L', 'E', 'R', 'C', 'M', 'E', 'C', 'M', 'I', 'R', 'R', 'W', 'A', 'N', 'N', 'N', 'I', 'S', 'L', 'O', 'H', 'V', 'I', 'S', 'I', 'C', 'R', 'F', 'A', 'C', 'O', 'N', 'N', 'R', 'C', 'E', 'L', 'V', 'W', 'E', 'P', 'L', 'S', 'M', 'A', 'C', 'A', 'L', 'V', 'T', 'S', 'O', 'V', 'O', 'N', 'P', 'C', 'E', 'A', 'D', 'I', 'A', 'M', 'R', 'M', 'P', 'I', 'H', 'O', 'N', 'Y', 'T', 'M', 'E', 'N', 'F', 'E', 'A', 'E', 'C', 'N', 'N', 'E', 'A', 'D', 'P', 'R', 'D', 'A', 'R', 'S', 'O', 'C', 'R', 'F', 'O', 'I', 'R', 'I', 'O', 'N', 'I', 'S', 'L', 'C', 'N', 'I', 'E', 'L', 'L', 'C', 'O', 'L', 'P', 'A', 'D', 'N', 'S', 'W', 'O', 'D', 'N', 'P', 'R', 'E', 'N', 'O', 'L', 'D', 'S', 'W', 'S', 'F', 'O', 'N', 'P', 'A', 'S', 'S', 'L', 'T', 'N', 'A', 'S', 'E', 'N', 'T', 'W', 'V', 'H', 'W', 'L', 'N', 'I', 'O', 'F', 'P', 'V', 'S', 'A', 'A', 'O', 'S', 'M', 'E', 'M', 'L', 'R', 'O', 'P', 'N', 'R', 'W', 'N', 'I', 'R', 'I', 'I', 'M', 'W', 'N', 'P', 'T', 'H', 'E', 'S', 'H', 'L', 'T', 'R', 'D', 'I', 'N', 'O', 'C', 'N', 'I', 'I', 'O', 'T', 'N', 'A', 'L', 'N', 'A', 'A', 'I', 'N', 'E', 'R', 'O', 'O', 'M', 'C', 'L', 'M', 'M', 'R', 'I', 'M', 'E', 'N', 'S', 'I', 'E', 'M', 'E', 'C', 'A', 'N', 'T', 'H', 'A', 'V', 'N', 'C', 'N', 'N', 'E', 'S', 'C', 'I', 'O', 'T', 'O', 'O', 'M', 'P', 'O', 'O', 'N', 'N', 'I', 'N', 'I', 'N', 'M', 'O', 'S', 'O', 'O', 'L', 'R', 'N', 'N', 'I', 'R', 'V', 'I', 'S', 'C', 'I', 'N', 'O', 'R', 'V', 'O', 'N', 'S', 'M', 'E', 'I', 'P', 'N', 'N', 'N', 'T', 'E', 'O', 'T', 'E', 'O', 'O', 'R', 'A', 'E', 'A', 'S', 'O', 'O', 'E', 'E', 'N', 'I', 'V', 'N', 'V', 'N', 'A', 'N', 'I', 'N', 'E', 'O', 'R', '"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const sum = (a) => a + b;\n  const reduce = (a, b) => a + b;\n  const sumBy = (key, fn) => (a) => fn(a, key);\n  const reduceBy = (key, fn) => (a, b) => fn(a, b, key);\n  const countBy = (key) => (a) => (b) => a[key] += b;\n  const isEmpty = (arr) => arr.length === 0;\n  const isNotEmpty = (arr) => arr.length > 0;\n  const length = (arr) => arr.length;\n  const isNumeric = (arr) => arr.every((item) => typeof item === 'number');\n  const isString = (arr) => typeof arr ==='string';\n  const isArray = (arr) => Array.isArray(arr);\n  const isObject = (arr) => typeof arr === 'object';\n  const map = (arr) => Array.from(arr);\n  const reduceRight = (arr) => (a, b) => b + a;\n  const mapRight = (arr) => (a, b) => b(a);\n  const reduceByRight = (key, arr) => (a, b) => b[key] + a;\n  const mapByRight = (key) => (a, b) => b[key](a);\n  const find = (arr) => (item) => arr.indexOf(item) > -1;\n  const findLast = (arr) => (item) => arr.lastIndexOf(item) > -1;\n  const findAll = (arr) => (item) => arr.indexOf(item) > -1;\n  const findFirst = (arr) => (item) => arr.indexOf(item) > -1;\n  const findLastNot = (arr) => (item) =>!find(arr, item);\n  const findFirstNot = (arr) => (item) =>!find(arr, item);\n  const findAllNot = (arr) => (item) =>!find(arr, item);\n  const filter = (arr) => (item) => find(arr, item);\n  const findFirstOrLast = (arr) => (item) => {\n    const found = find(arr, item);\n    return found? found : findLast(arr, item);\n  };\n  const findFirstOrLastNot = (arr) => (item) => {\n    const found = find(arr, item);\n    return found? found : findLastNot(arr, item);\n  };\n  const findAllOrLast = (arr) => (item) => {\n    const found = find(arr, item);\n    return found? found : findLast(arr, item);\n  };\n  const findAllOrFirst = (arr) => (item) => {\n    const found = find(arr, item);\n    return found? found : findFirst(arr, item);\n  };\n  const first = (arr) => (item) => {\n    const found = find(arr, item);\n    return found? found[0] : null;\n  };\n  const last = (arr) => (item) => {\n    const found = findLast(arr, item);\n    return found? found[0] : null;\n  };\n  const lastNot = (arr) => (item) => {\n    const found = findLastNot(arr, item);\n    return found? found[0] : null;\n  };\n  const firstNot = (arr) => (item) => {\n    const found = findFirstNot(arr, item);\n    return found? found[0] : null;\n  };\n  const all = (arr) => (item) => findAll(arr, item);\n  const allNot = (arr) => (item) => findAllNot(arr, item);\n  const any = (arr) => (item) => find(arr, item);\n  const anyNot = (arr) => (item) => find(arr, item);\n  const every = (arr) => (item) => findAll(arr, item);\n  const everyNot = (arr) => (item) => findAllNot(arr, item);\n  const sumBy = (key, fn) => (a) => fn(a, key);\n  const reduceBy = (key, fn) => (a, b) => fn(a, b, key);\n  const reduceRightBy = (key, fn) => (a, b) => fn(b, a, key);\n  const mapBy = (key) => (a, b) => b[key](a);\n  const mapRightBy = (key) => (a, b) => b[key](a);\n  const findBy = (key) => (item) => item[key];\n  const findLastBy = (key) => (item) => item[key];\n  const findFirstBy = (key) => (item) => item[key];\n  const findAllBy = (key) => (item) => item[key];\n  const findLastNotBy = (key) => (item) =>!item[key];\n  const findFirstNotBy = (key) => (item) =>!item[key];\n  const findAll"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict)\n  for (let i = 0; i < keys.length; i++) {\n    let key = keys[i]\n    if (!(typeof key ==='string')) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  This function will return true if the given dIcTioNy is NOT empTy.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return false.\n  */\nconst checkDictCaseNot = (dict) => {\n  return!checkDictCase(dict)\n}\n\n/*\n  This function will return true if the given dIcTioNy is empTy.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return true.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return true.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseEq = (dict) => {\n  return checkDictCase(dict)\n}\n\nexport default {\n  checkDictCase,\n  checkDictCaseNot,\n  checkDictCaseEq\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let res = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\nconst isPrime = (num) => {\n  if (num < 2) {\n    return false;\n  }\n  let sqrt = Math.sqrt(num);\n  for (let i = 2; i <= sqrt; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are divisble by n.\n  for example:\n  countDivisble(5) => [2,3]\n  countDivisble(11) => [2,3,5,7]\n  countDivisble(0) => []\n  countDivisble(20) => [2,3,5,7,11,13,17,19]\n  countDivisble(1) => []\n  countDivisble(18) => [2,3,5,7,11,13,17]\n  */\nconst countDivisble = (n) => {\n  let res = [];\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\nconst findPrime = (num) => {\n  let sqrt = Math.sqrt(num);\n  let i = 2;\n  while (i <= sqrt) {\n    if (num % i === 0) {\n      return i;\n    }\n    i++;\n  }\n  return num;\n}\n\nconst findPrimeUpTo = (num) => {\n  let prime = 2;\n  while (prime <= num) {\n    if (num % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return num;\n}\n\nconst findPrimeUpToLimit = (num) => {\n  let prime = 2;\n  while (prime <= num) {\n    if (num % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return num;\n}\n\nconst isPrimeUpTo = (num) => {\n  let prime = 2;\n  while (prime <= num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime++;\n  }\n  return true;\n}\n\nconst isPrimeUpToLimit = (num) => {\n  let prime = 2;\n  while (prime <= num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime++;\n  }\n  return true;\n}\n\nconst findPrimeUpToLimit = (num) => {\n  let prime = 2;\n  while (prime <= num) {\n    if (num % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return num;\n}\n\nconst getAllPrimes = () => {\n  let primes = [];\n  for (let i = 1; i < 1000; i++) {\n    let num = i;\n    while (num > 1) {\n      let prime = findPrimeUpTo(num);\n      primes.push(prime);\n      num = prime;\n    }\n  }\n  return primes;\n}\n\nconst getPrimeUpToLimit = (num) => {\n  let prime = 2;\n  while (prime <= num) {\n    if (num % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return num;\n}\n\nconst getPrimeUpToLimitUpTo = (num) => {\n  let prime = 2;\n  while (prime <= num) {\n    if (num % prime === 0) {\n      return prime;\n    }\n    prime++;\n  }\n  return num;\n}\n\nconst getAllPrimesUpToLimit = () => {\n  let primes = [];\n  for (let i = 1; i < 1000; i++) {\n    let num = i;\n    while (num > 1) {\n      let prime = findPrimeUpToLimit(num);\n      primes.push(prime);\n      num = prime;\n    }\n  }\n  return primes;\n}\n\nconst getAllPrimesUpToLimitUpTo = () => {\n  let primes = [];\n  for (let i = 1; i < 1000; i++) {\n    let num = i;\n    while (num > 1) {\n      let prime = findPrimeUpToLimitUpTo(num);\n      primes.push(prime);\n      num = prime;\n    }\n  }\n  return primes;\n}\n\nconst main = () => {\n  console.log(countUpTo(1000));\n  console.log(countDivisble(1000));\n  console.log(findPrime(10));\n  console.log(findPrimeUpTo(10));\n  console.log(findPrimeUpToLimit(10));\n  console.log(isPrimeUpTo(10));\n  console.log(isPrimeUpToLimit(10));\n  console.log(findPrimeUpToLimit(10));\n  console.log(getAllPrimes());\n  console.log(getAllPrimesUpToLimit());\n  console.log(getAllPrimesUpToLimitUpTo());\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return ((a - b + 10) % 10) + b\n}\n\n/*\n  * Compute the factorial of a non-negative integer.\n  * factorial(0) is defined to be 1.\n  * factorial(-1) is not defined.\n  * factorial(x) = x * (x-1) * (x-2) *... * 1\n  * factorial(x) = 1 for x < 1\n  * factorial(x) = x for x >= 1\n  * */\nconst factorial = (n) => {\n  const factorial = n > 0? (n * factorial(n - 1)) : 1\n  return factorial\n}\n\nconst main = (input) => {\n  const digits = input.split('').reverse().map((x) => parseInt(x))\n  const n = digits.pop()\n\n  const m = n + 1\n  const k = n\n  const product = factorial(n)\n\n  let sum = 0\n  while (k > 0) {\n    sum = sum + multiply(digits[0], k)\n    k = k - 1\n  }\n  sum = sum + multiply(digits[0], n)\n  sum = sum * product\n\n  return sum\n}\n\nconst test = (name, input, expected) => {\n  it(name, () => {\n    const actual = main(input)\n    console.log(`${name}: ${actual}`)\n    assert.equal(actual, expected)\n  })\n}\n\ntest('0', '0', 0)\ntest('1', '1', 1)\ntest('5', '5', 5)\ntest('10', '10', 10)\ntest('15', '15', 15)\ntest('20', '20', 20)\ntest('100', '100', 100)\ntest('1000', '1000', 1000)\ntest('10000', '10000', 10000)\ntest('100000', '100000', 100000)\ntest('1000000', '1000000', 1000000)\ntest('10000000', '10000000', 10000000)\ntest('100000000', '100000000', 100000000)\ntest('1000000000', '1000000000', 1000000000)\ntest('10000000000', '10000000000', 10000000000)\ntest('100000000000', '100000000000', 100000000000)\ntest('1000000000000', '1000000000000', 1000000000000)\ntest('10000000000000', '10000000000000', 10000000000000)\ntest('100000000000000', '100000000000000', 100000000000000)\ntest('1000000000000000', '1000000000000000', 1000000000000000)\ntest('10000000000000000', '10000000000000000', 10000000000000000)\ntest('100000000000000000', '100000000000000000', 100000000000000000)\ntest('1000000000000000000', '1000000000000000000', 10000000000000000000)\ntest('10000000000000000000', '10000000000000000000', 1000000000000000000)\ntest('100000000000000000000', '100000000000000000000', 10000000000000000000)\ntest('1000000000000000000000', '1000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000', '10000000000000000000000', 10000000000000000000)\ntest('100000000000000000000000', '100000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000', '1000000000000000000000000', 10000000000000000000)\ntest('10000000000000000000000000', '10000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000', '100000000000000000000000000', 10000000000000000000)\ntest('1000000000000000000000000000', '1000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000', '10000000000000000000000000000', 10000000000000000000)\ntest('100000000000000000000000000000', '100000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000', '1000000000000000000000000000000', 10000000000000000000)\ntest('10000000000000000000000000000000', '10000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000', '100000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000', '10000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000', '100000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000', '1000000000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000000', '10000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000', '100000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000', '1000000000000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000000000', '10000000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000000', '100000000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000000000000', '10000000000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000000000', '100000000000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000000000000000', '10000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000000000000', '100000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000000000000000', '100000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000000000000000000000', '10000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000000000000000000', '100000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000000000000000000000000', '10000000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000000000000000000000', '100000000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('10000000000000000000000000000000000000000000000000000000000', '10000000000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('100000000000000000000000000000000000000000000000000000000000', '100000000000000000000000000000000000000000000000000000000000', 100000000000000000000)\ntest('1000000000000000000000000000000000000000000000000000000000000', '1000000000000000000000000000000000000000000000000000000000000',"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let u = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == s[i].toUpperCase()) {\n            u++;\n        }\n    }\n    return u;\n};\n\nconst countUpperCase = (s) => {\n    let u = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() == s[i]) {\n            u++;\n        }\n    }\n    return u;\n};\n\nconst countNumber = (s) => {\n    let n = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() == s[i].toUpperCase()) {\n            n++;\n        }\n    }\n    return n;\n};\n\nconst countVowels = (s) => {\n    let v = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] == s[i].toUpperCase()) {\n            v++;\n        }\n    }\n    return v;\n};\n\nconst countLetters = (s) => {\n    let l = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i].toUpperCase() == s[i].toUpperCase()) {\n            l++;\n        }\n    }\n    return l;\n};\n\nconst countWords = (s) => {\n    let w = 0;\n    let p = s.indexOf(\" \");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\" \", p + 1);\n    }\n    return w;\n};\n\nconst countSentences = (s) => {\n    let w = 0;\n    let p = s.indexOf(\".\");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\".\", p + 1);\n    }\n    return w;\n};\n\nconst countLines = (s) => {\n    let w = 0;\n    let p = s.indexOf(\"\\n\");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\"\\n\", p + 1);\n    }\n    return w;\n};\n\nconst countChars = (s) => {\n    let w = 0;\n    for (let i = 0; i < s.length; i++) {\n        w++;\n    }\n    return w;\n};\n\nconst countWordsInSentence = (s) => {\n    let w = 0;\n    let p = s.indexOf(\" \");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\" \", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInLine = (s) => {\n    let w = 0;\n    let p = s.indexOf(\"\\n\");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\"\\n\", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInChars = (s) => {\n    let w = 0;\n    for (let i = 0; i < s.length; i++) {\n        w++;\n    }\n    return w;\n};\n\nconst countWordsInSentences = (s) => {\n    let w = 0;\n    let p = s.indexOf(\".\");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\".\", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInLines = (s) => {\n    let w = 0;\n    let p = s.indexOf(\"\\n\");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\"\\n\", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInWords = (s) => {\n    let w = 0;\n    let p = s.indexOf(\" \");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\" \", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInChars = (s) => {\n    let w = 0;\n    for (let i = 0; i < s.length; i++) {\n        w++;\n    }\n    return w;\n};\n\nconst countWordsInSentences = (s) => {\n    let w = 0;\n    let p = s.indexOf(\".\");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\".\", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInLines = (s) => {\n    let w = 0;\n    let p = s.indexOf(\"\\n\");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\"\\n\", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInWords = (s) => {\n    let w = 0;\n    for (let i = 0; i < s.length; i++) {\n        w++;\n    }\n    return w;\n};\n\nconst countWordsInChars = (s) => {\n    let w = 0;\n    for (let i = 0; i < s.length; i++) {\n        w++;\n    }\n    return w;\n};\n\nconst countWordsInWordsInLine = (s) => {\n    let w = 0;\n    let p = s.indexOf(\" \");\n    while (p!= -1) {\n        w++;\n        p = s.indexOf(\" \", p + 1);\n    }\n    return w;\n};\n\nconst countWordsInWordsInSentence = (s) => {\n    let w = 0;\n    let p = s."}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  return Math.round(Math.abs(value));\n}\n\n/*\n  This function returns the closest fraction to the given number.\n  For example closestFraction(3.1) should return 3.0,\n  closestFraction(3.14) should return 3.14.\n  */\nconst closestFraction = (value) => {\n  return Math.round(Math.abs(value - Math.floor(value)));\n}\n\n/*\n  This function returns the closest number to the given number.\n  For example closestNumber(3.1) should return 3.0,\n  closestNumber(3.14) should return 3.14.\n  */\nconst closestNumber = (value) => {\n  return Math.round(Math.abs(value - Math.floor(value)));\n}\n\n/*\n  This function returns the closest multiple to the given number.\n  For example closestMultiple(3.1) should return 6,\n  closestMultiple(3.14) should return 7.\n  */\nconst closestMultiple = (value) => {\n  return Math.round(Math.abs(value - Math.ceil(value)));\n}\n\n/*\n  This function returns the closest power of two to the given number.\n  For example closestPowerOfTwo(3.1) should return 4,\n  closestPowerOfTwo(3.14) should return 4.\n  */\nconst closestPowerOfTwo = (value) => {\n  return Math.round(Math.abs(Math.pow(2, Math.ceil(Math.log(value) / Math.LN2)) - value));\n}\n\n/*\n  This function returns the closest prime to the given number.\n  For example closestPrime(3.1) should return 2,\n  closestPrime(3.14) should return 3.\n  */\nconst closestPrime = (value) => {\n  let prime = 2;\n  while (prime < Math.sqrt(value)) {\n    if (value % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n}\n\n/*\n  This function returns the closest binary number to the given number.\n  For example closestBinary(3.1) should return \"11\",\n  closestBinary(3.14) should return \"11\".\n  */\nconst closestBinary = (value) => {\n  let binary = \"\";\n  while (value > 0) {\n    let remainder = value % 2;\n    binary += remainder;\n    value = value / 2;\n  }\n  return binary;\n}\n\n/*\n  This function returns the closest hexadecimal number to the given number.\n  For example closestHexadecimal(3.1) should return \"3A\",\n  closestHexadecimal(3.14) should return \"3B\".\n  */\nconst closestHexadecimal = (value) => {\n  let hexadecimal = \"\";\n  while (value > 0) {\n    let remainder = value % 16;\n    hexadecimal += remainder.toString(16);\n    value = value / 16;\n  }\n  return hexadecimal;\n}\n\n/*\n  This function returns the closest octal number to the given number.\n  For example closestOctal(3.1) should return \"33\",\n  closestOctal(3.14) should return \"34\".\n  */\nconst closestOctal = (value) => {\n  let octal = \"\";\n  while (value > 0) {\n    let remainder = value % 8;\n    octal += remainder.toString(8);\n    value = value / 8;\n  }\n  return octal;\n}\n\n/*\n  This function returns the closest decimal number to the given number.\n  For example closestDecimal(3.1) should return \"3.1\",\n  closestDecimal(3.14) should return \"3.14\".\n  */\nconst closestDecimal = (value) => {\n  let decimal = value.toString();\n  while (decimal.length < 3) {\n    decimal = \"0\" + decimal;\n  }\n  return decimal;\n}\n\n/*\n  This function returns the closest decimal number to the given number.\n  For example closestDecimal(3.1) should return \"3.1\",\n  closestDecimal(3.14) should return \"3.14\".\n  */\nconst closestDecimalPadded = (value) => {\n  let decimal = value.toString();\n  while (decimal.length < 3) {\n    decimal = \"0\" + decimal;\n  }\n  return decimal;\n}\n\n/*\n  This function returns the closest number to the given number.\n  For example closestNumber(3.1) should return 3.1,\n  closestNumber(3.14) should return 3.14.\n  */\nconst closestNumberPadded = (value) => {\n  let number = value.toString();\n  while (number.length < 5) {\n    number = \"0\" + number;\n  }\n  return number;\n}\n\n/*\n  This function returns the closest multiple to the given number.\n  For example closestMultiple(3.1) should return 6,\n  closestMultiple(3.14) should return 7.\n  */\nconst closestMultiplePadded = (value) => {\n  let multiple = value.toString();\n  while (multiple.length < 5) {\n    multiple = \"0\" + multiple;\n  }\n  return multiple;\n}\n\n/*\n  This function returns the closest power of two to the given number.\n  For example closestPowerOfTwo(3.1) should return 4,\n  cl"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  while (n > 0) {\n    pile.push(n--);\n  }\n  return pile;\n};\n\nconst makeAPile2 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile3 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile4 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile5 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile6 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile7 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile8 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile9 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile10 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile11 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile12 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile13 = (n) => {\n  const pile = [];\n  for (let i = 0; i < n; i++) {\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n    pile.push(i);\n  }\n  return pile;\n};\n\nconst makeAPile14"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const strArray = s.split(' ');\n  return strArray;\n}\n\n/*\n  This is just a simple tester. You can use this to write your own code to\n  test your own wordsString function.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsStringTester = (s) => {\n  const strArray = s.split(' ');\n  return strArray;\n}\n\n/*\n  You will be givEn a StrinG of Words sepaRatEd by cOmmAS oR sPaceS. YouR task is\n  to spliT THe stRing into Words and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words = (s) => {\n  const strArray = s.split('');\n  return strArray;\n}\n\n/*\n  This is just a simple tester. You can use this to write your own code to\n  test your own words function.\n  \n  For example:\n  words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsTester = (s) => {\n  const strArray = s.split('');\n  return strArray;\n}\n\nexport default {\n  wordsString,\n  wordsStringTester,\n  words,\n  wordsTester\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  // your code here\n  const div = Math.floor(x / y)\n  if (x % y === 0) return div\n  else return -1\n}\n\n// let's try some examples\n// chooseNum(12, 15) = 14\n// chooseNum(12, 14) = -1\n// chooseNum(15, 12) = -1\n\nconsole.log(`You choose ${x} to ${y}. The result is ${chooseNum(x, y)}`)\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let count = 0\n  let sum = 0\n  let result = 0\n  \n  for (let i = n; i <= m; i++) {\n    result = (result + i) / 2\n    sum += i\n    count += 1\n  }\n  \n  if (count > 0) {\n    return result\n  } else {\n    return -1\n  }\n}\n\nmodule.exports = roundedAvg<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const r = [];\n  let t = x;\n  let s = '';\n  while (t > 0) {\n    s = t % 10 + s;\n    t = Math.floor(t / 10);\n  }\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (r.indexOf(s[i]) === -1) {\n      r.unshift(s[i]);\n    }\n  }\n  return r;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  arr.sort((a, b) => a.length - b.length);\n  return arr.reverse().map(x => x.length);\n}\n\nmodule.exports = byLength;<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let [x, y, z, p, q, r, s] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let i = n;\n  let t = 0;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      t += x * p * q * r * s;\n    }\n    i -= 1;\n    x *= 2;\n    y *= 2;\n    z *= 2;\n    p *= 2;\n    q *= 2;\n    r *= 2;\n    s *= 2;\n  }\n  return t;\n};\n\n/*\n  ImpLemeNt the funCTion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f2 = (n) => {\n  let [x, y, z, p, q, r, s] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let i = n;\n  let t = 0;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      t += x * p * q * r * s;\n    }\n    i -= 1;\n    x *= 2;\n    y *= 2;\n    z *= 2;\n    p *= 2;\n    q *= 2;\n    r *= 2;\n    s *= 2;\n  }\n  return t;\n};\n\nconst g = (n) => {\n  let [x, y, z, p, q, r, s] = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  let i = n;\n  let t = 0;\n  while (i > 1) {\n    if (i % 2 === 0) {\n      t += x * p * q * r * s;\n    }\n    i -= 1;\n    x *= 2;\n    y *= 2;\n    z *= 2;\n    p *= 2;\n    q *= 2;\n    r *= 2;\n    s *= 2;\n  }\n  return t;\n};\n\nconsole.log(f(5));\nconsole.log(f2(5));\nconsole.log(g(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let even = 0;\n    let odd = 0;\n    for (let i = 1; i <= n; i++) {\n        let a = i;\n        let b = n - i;\n        let c = n - b;\n        if (a > b && b > c) {\n            if (a % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return (even, odd);\n}\n\nconsole.log(evenOddPalindrome(3)); // (1, 2)\nconsole.log(evenOddPalindrome(12)); // (4, 6)\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let sum = 0,\n    result = 0;\n\n  arr.forEach(num => {\n    sum += num;\n  });\n\n  if (sum > 0) {\n    result = arr.length - 1;\n  }\n\n  return result;\n};\n\nexport { countNums };\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  if (arr.length === 0) {\n    return true;\n  } else {\n    return result;\n  }\n};\n\nconst moveOneBall1 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall2 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall3 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall4 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall5 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall6 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall7 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall8 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall9 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {\n    if (arr[index] <= arr[index - 1]) {\n      result.splice(index, 1);\n    } else {\n      break;\n    }\n    index--;\n  }\n  \n  return result;\n};\n\nconst moveOneBall10 = (arr) => {\n  let result = arr.slice();\n  let index = arr.length - 1;\n  \n  while (index > 0) {"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    const len1 = lst1.length, len2 = lst2.length\n    let i = 0, j = 0, k = 0, temp = 0\n    while (i < len1 && j < len2) {\n        if (lst1[i] < lst2[j]) {\n            temp = lst1[i]\n            lst1[i] = lst2[j]\n            lst2[j] = temp\n            i++\n        } else if (lst1[i] > lst2[j]) {\n            temp = lst2[j]\n            lst2[j] = lst1[i]\n            lst1[i] = temp\n            j++\n        } else {\n            i++\n            j++\n        }\n    }\n    while (i < len1) {\n        temp = lst1[i]\n        lst1[i] = lst2[j]\n        lst2[j] = temp\n        i++\n        j++\n    }\n    while (j < len2) {\n        temp = lst2[j]\n        lst2[j] = lst1[i]\n        lst1[i] = temp\n        i++\n        j++\n    }\n    return \"YES\" if len1 == len2 else \"NO\"\n}\n\nconst main = () => {\n    console.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n    console.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n    console.log(exchange([1, 2, 3, 4], [1, 3, 2, 4]))\n    console.log(exchange([1, 2, 3, 4], [1, 3, 4, 2]))\n    console.log(exchange([1, 2, 3, 4], [1, 3, 4, 3]))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let charCount = {};\n  let allLower = test.toLowerCase();\n  allLower.split('').forEach(char => {\n    charCount[char] = (charCount[char] || 0) + 1;\n  });\n  let maxCount = 0;\n  let mostCommonChar = '';\n  Object.keys(charCount).forEach(char => {\n    if (charCount[char] > maxCount) {\n      maxCount = charCount[char];\n      mostCommonChar = char;\n    }\n  });\n  return { mostCommonChar, maxCount };\n};\n\nmodule.exports = histogram;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const a = []\n    for(let i = 0; i < s.length; i++) {\n        a.push(s[i])\n    }\n    const str = a.reverse().join('')\n    let index = 0\n    for(let i = 0; i < str.length; i++) {\n        if(str[i] === c) {\n            a.splice(index, 1)\n            index--\n        }\n        index++\n    }\n    return (a.reverse().join(''), a.length === 0)\n}\n\nconst reverse = (s) => {\n    const a = []\n    for(let i = 0; i < s.length; i++) {\n        a.push(s[s.length - i - 1])\n    }\n    return a.join('')\n}\n\nconst isPalindrome = (s) => {\n    const a = []\n    for(let i = 0; i < s.length; i++) {\n        a.push(s[i])\n    }\n    return s === reverse(a.reverse().join(''))\n}\n\nconst removeCharacter = (s, c) => {\n    const a = []\n    for(let i = 0; i < s.length; i++) {\n        if(s[i]!== c) {\n            a.push(s[i])\n        }\n    }\n    return a.join('')\n}\n\nmodule.exports = {\n    reverseDelete,\n    reverse,\n    isPalindrome,\n    removeCharacter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    return lst.reduce((acc, val) => {\n        if (val.match(/^[0-9]$/i)) {\n            acc.push(`the number of odd elements ${val}`)\n        }\n        return acc\n    }, [])\n}\n\nexport default oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0\n  let arr = nums\n  let minSum = Infinity\n\n  while (arr.length > 0) {\n    let subSum = 0\n    for (let i = 0; i < arr.length; i++) {\n      subSum += arr[i]\n      if (subSum < minSum) {\n        minSum = subSum\n      }\n    }\n    arr = arr.filter(x => x!== 0)\n  }\n\n  return minSum\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\nconsole.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const [n, m] = grid.length;\n    const [nR, mR] = grid[0].length;\n\n    const gridFill = [];\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < mR; j++) {\n            gridFill[i][j] = 0;\n        }\n    }\n\n    for (let i = 0; i < nR; i++) {\n        for (let j = 0; j < m; j++) {\n            gridFill[i][j] = grid[i][j];\n        }\n    }\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (gridFill[i][j] === 0) {\n                gridFill[i][j] = capacity;\n            } else {\n                gridFill[i][j]--;\n            }\n        }\n    }\n\n    let answer = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (gridFill[i][j] === 0) {\n                answer++;\n            }\n        }\n    }\n\n    return answer;\n};\n\nconst grid = [[0,0,1,1], [0,1,0,0], [1,1,1,1], [0,1,1,1]];\nconsole.log(maxFill(grid, 1));\nconsole.log(maxFill(grid, 2));\nconsole.log(maxFill(grid, 5));\nconsole.log(maxFill(grid, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let n = arr.length;\n  if (n === 0) {\n    return arr;\n  }\n  let len = arr.length;\n  let half = Math.floor(len / 2);\n  let left = arr.slice(0, half);\n  let right = arr.slice(half);\n  let leftLen = left.length;\n  let rightLen = right.length;\n  let leftMin = Math.min.apply(Math, left);\n  let rightMin = Math.min.apply(Math, right);\n  let isLeftBigger = leftMin < rightMin;\n  let leftSorted = sortArray(left);\n  let rightSorted = sortArray(right);\n  if (isLeftBigger) {\n    return leftSorted.concat(rightSorted);\n  } else {\n    return rightSorted.concat(leftSorted);\n  }\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  let words = s.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    if (n === words.length) {\n      list.push(words[i]);\n    } else if (isVowel(words[i]) && n > 0) {\n      list.push(words[i]);\n      n--;\n    }\n  }\n  return list;\n};\n\nconst isVowel = w => {\n  if (w === \"a\") return true;\n  if (w === \"e\") return true;\n  if (w === \"i\") return true;\n  if (w === \"o\") return true;\n  if (w === \"u\") return true;\n  if (w === \"y\") return true;\n  return false;\n};\n\n/*\n  GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all wordPairs in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  wordPairs(\"Mary had a little lamb\", 4) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n  wordPairs(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n  wordPairs(\"simple white space\", 2) ==> []\n  wordPairs(\"Hello world\", 4) ==> [\"Hello\", \"world\"]\n  wordPairs(\"Uncle sam\", 3) ==> [\"Uncle\", \"sam\"]\n  */\nconst wordPairs = (s, n) => {\n  let list = [];\n  let words = s.split(/\\s+/);\n  let pair = [];\n  let pairStr = [];\n  for (let i = 0; i < words.length; i++) {\n    pair.push(words[i]);\n    pairStr.push(words[i]);\n  }\n  if (n === words.length) {\n    list.push(pairStr);\n  } else {\n    let pw = pair[n - 1];\n    let pws = pairStr.slice(0, n);\n    if (n > 0) {\n      list.push(pw);\n      list.push(pws);\n      n--;\n    }\n    if (n > 0) {\n      list = list.concat(wordPairs(s, n));\n    }\n  }\n  return list;\n};\n\nconst wordCount = (s) => {\n  let list = [];\n  let words = s.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    list.push(words[i]);\n  }\n  return list.length;\n};\n\nmodule.exports = {\n  selectWords,\n  wordPairs,\n  wordCount,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowel = new RegExp('[a-zA-Z]')\n  const vowelSensitive = new RegExp('[a-zA-Z]+')\n  const vowelSensitive2 = new RegExp('[A-Z]+')\n  let letter = 0\n  let letterCount = 0\n  let letter2Count = 0\n  let vowelCount = 0\n  let vowelCount2 = 0\n  const length = word.length\n\n  for (let i = 0; i < length; i++) {\n    const char = word[i]\n    const charLower = char.toLowerCase()\n    if (vowel.test(charLower)) {\n      if (vowelSensitive2.test(charLower)) {\n        letter2Count++\n      } else {\n        letterCount++\n      }\n      vowelCount++\n    }\n    if (vowelSensitive.test(charLower)) {\n      letterCount++\n    }\n  }\n  if (letterCount === 0) {\n    return \"\"\n  }\n  const closest = letterCount - vowelCount2 > vowelCount - letter2Count? letter : letter2Count\n  return word.charAt(closest)\n}\n\n/*\n  getClosestVowel2(\"yogurt\") ==> \"y\"\n  getClosestVowel2(\"FULL\") ==> \"U\"\n  getClosestVowel2(\"quick\") ==> \"k\"\n  getClosestVowel2(\"ab\") ==> \"a\"\n  */\nconst getClosestVowel2 = (word) => {\n  const vowel = new RegExp('[a-zA-Z]')\n  const vowelSensitive = new RegExp('[a-zA-Z]+')\n  const vowelSensitive2 = new RegExp('[A-Z]+')\n  let letter = 0\n  let letterCount = 0\n  let letter2Count = 0\n  let vowelCount = 0\n  let vowelCount2 = 0\n  const length = word.length\n\n  for (let i = 0; i < length; i++) {\n    const char = word[i]\n    const charLower = char.toLowerCase()\n    if (vowel.test(charLower)) {\n      if (vowelSensitive2.test(charLower)) {\n        letter2Count++\n      } else {\n        letterCount++\n      }\n      vowelCount++\n    }\n    if (vowelSensitive.test(charLower)) {\n      letterCount++\n    }\n  }\n  if (letterCount === 0) {\n    return \"\"\n  }\n  const closest = letterCount - vowelCount > vowelCount - letter2Count? letter : letter2Count\n  return word.charAt(closest)\n}\n\n/*\n  getClosestVowel3(\"yogurt\") ==> \"y\"\n  getClosestVowel3(\"FULL\") ==> \"U\"\n  getClosestVowel3(\"quick\") ==> \"k\"\n  getClosestVowel3(\"ab\") ==> \"a\"\n  */\nconst getClosestVowel3 = (word) => {\n  const vowel = new RegExp('[a-zA-Z]')\n  const vowelSensitive = new RegExp('[a-zA-Z]+')\n  const vowelSensitive2 = new RegExp('[A-Z]+')\n  let letter = 0\n  let letterCount = 0\n  let letter2Count = 0\n  let vowelCount = 0\n  let vowelCount2 = 0\n  const length = word.length\n\n  for (let i = 0; i < length; i++) {\n    const char = word[i]\n    const charLower = char.toLowerCase()\n    if (vowel.test(charLower)) {\n      if (vowelSensitive2.test(charLower)) {\n        letter2Count++\n      } else {\n        letterCount++\n      }\n      vowelCount++\n    }\n    if (vowelSensitive.test(charLower)) {\n      letterCount++\n    }\n  }\n  if (letterCount === 0) {\n    return \"\"\n  }\n  const closest = letterCount - vowelCount > vowelCount - letter2Count? letter : letter2Count\n  return word.charAt(closest)\n}\n\n/*\n  getClosestVowel4(\"yogurt\") ==> \"y\"\n  getClosestVowel4(\"FULL\") ==> \"U\"\n  getClosestVowel4(\"quick\") ==> \"k\"\n  getClosestVowel4(\"ab\") ==> \"a\"\n  */\nconst getClosestVowel4 = (word) => {\n  const vowel = new RegExp('[a-zA-Z]')\n  const vowelSensitive = new RegExp('[a-zA-Z]+')\n  const vowelSensitive2 = new RegExp('[A-Z]+')\n  let letter = 0\n  let letterCount = 0\n  let letter2Count = 0\n  let vowelCount = 0\n  let vowelCount2 = 0\n  const length = word.length\n\n  for (let i = 0; i < length; i++) {\n    const char = word[i]\n    const charLower = char.toLowerCase()\n    if (vowel.test(charLower)) {\n      if (vowelSensitive2.test(charLower)) {"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if (!lst.length) return 'No'\n  const last = lst.pop()\n  if (last === '(') {\n    lst.forEach((lst) => {\n      if (lst === ')') return lst\n      lst = lst.replace(/\\(/g,'')\n    })\n    return 'Yes'\n  } else if (last === ')') {\n    return 'No'\n  } else if (last === '(') {\n    return matchParens(lst)\n  } else {\n    return matchParens(lst)\n  }\n}\n\nconst testCase = [\n  [\n    ['(()(', ')'],\n    'Yes'\n  ],\n  [\n    [')', ')'],\n    'No'\n  ],\n  [\n    ['(()()', '())'],\n    'No'\n  ],\n  [\n    ['())', '()()'],\n    'No'\n  ],\n  [\n    ['()(()', ')()'],\n    'No'\n  ],\n  [\n    ['()()()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '()()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['(())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '()()'],\n    'No'\n  ],\n  [\n    ['()()', '()()'],\n    'No'\n  ],\n  [\n    ['(())()', '()()'],\n    'No'\n  ],\n  [\n    ['()()()', '()()'],\n    'No'\n  ],\n  [\n    ['(())()', '())()'],\n    'No'\n  ],\n  [\n    ['()()()', '())()'],\n    'No'\n  ],\n  [\n    ['()()()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    ['())()', '())()'],\n    'No'\n  ],\n  [\n    "}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const arrLen = arr.length;\n  let index = -1;\n  let max = 0;\n  let maxIdx = 0;\n  let temp = 0;\n  let i = 0;\n  let j = 0;\n\n  for (i = 0; i < arrLen; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      index = i;\n      maxIdx = i;\n    } else if (arr[i] === max) {\n      if (i < arrLen - k) {\n        temp = arr[i + k];\n        if (temp > arr[i]) {\n          max = temp;\n          index = i + k;\n          maxIdx = i + k;\n        }\n      }\n    }\n  }\n\n  return [maxIdx, max, index, arr];\n}\n\nmodule.exports = maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for(let i=0; i<lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n// console.log(addElements([111,21,3,4000,5,6,7,8,9], 4)); // 24\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let oddList = [];\n  let nextOdd = n;\n  let nextOddEven = n;\n  let nextOddOdd = n;\n  let nextOddEvenOdd = n;\n\n  while (nextOdd) {\n    if (nextOdd % 2 === 1) {\n      oddList.push(nextOdd);\n    }\n    nextOddEven = nextOddEven + nextOdd;\n    nextOddEvenOdd = nextOddEven + nextOddEven;\n    nextOddOdd = nextOddEvenOdd + nextOddEvenOdd;\n    nextOddEven = nextOddOdd + nextOddEven;\n    nextOddEvenOdd = nextOddOdd + nextOddEvenOdd;\n    nextOdd = nextOddEvenOdd + nextOddEvenOdd;\n  }\n  return oddList;\n};\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const year = date.split(\"-\")[0]\n  const month = date.split(\"-\")[1]\n  const day = date.split(\"-\")[2]\n  const validDate = new Date(year, month - 1, day);\n  return validDate.getFullYear() === year && validDate.getMonth() === month - 1 && validDate.getDate() === day;\n}\n\nmodule.exports = validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  txt = txt.replace(/\\s+/g,'');\n  const words = txt.split(' ');\n  const list = [];\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length > 1) {\n      list.push(word);\n    }\n  }\n  return list;\n}\n\n/*\n  GivEn a sTring Of wOrds, return a list Of wOrds, if the wOrds are alphABLe the string\n  Examples\n  \"hello world\" ➞ [\"hello\", \"world\"]\n  \"h e l l o w o r d\" ➞ [\"h e l l o\", \"w o r d\"]\n  \"HELLO WORLD\" ➞ [\"HELLO\", \"WORLD\"]\n  \"HELLO WORLD\" ➞ [\"HELLO\", \"WORLD\"]\n  \"HELLO WORLD\" ➞ [\"HELLO\", \"WORLD\"]\n*/\nconst getWords = (txt) => {\n  const words = splitWords(txt);\n  const list = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 1) {\n      list.push(words[i]);\n    }\n  }\n  return list;\n}\n\n/*\n  GivEn a sTring Of wOrds, return a list Of wOrds, if the wOrds are alphABLe the string\n  Examples\n  \"hello world\" ➞ [\"hello\", \"world\"]\n  \"h e l l o w o r d\" ➞ [\"h e l l o\", \"w o r d\"]\n  \"HELLO WORLD\" ➞ [\"HELLO\", \"WORLD\"]\n  \"HELLO WORLD\" ➞ [\"HELLO\", \"WORLD\"]\n  \"HELLO WORLD\" ➞ [\"HELLO\", \"WORLD\"]\n*/\nconst getAlphabets = (txt) => {\n  const words = splitWords(txt);\n  const list = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > 1) {\n      list.push(words[i]);\n    }\n  }\n  return list;\n}\n\nconst isAlphabets = (txt) => {\n  const words = splitWords(txt);\n  const alphabets = getAlphabets(txt);\n  return words.length === alphabets.length;\n}\n\nmodule.exports = {\n  splitWords,\n  getWords,\n  getAlphabets,\n  isAlphabets\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.slice();\n  let index = 0;\n  while (index < sorted.length - 1) {\n    const compare = sorted[index + 1] - sorted[index];\n    if (compare > 0) {\n      return false;\n    }\n    index++;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // check interval validity\n  if (interval1.start < interval1.end &&\n    interval2.start < interval2.end) {\n    // intervals are valid\n    const intersection = (start1, end1) => {\n      const end2 = end1 + 1\n      const start2 = Math.max(start1, interval2.start)\n      return (start2 < end2)? end2 : start2\n    }\n    const start = intersection(interval1.start, interval1.end)\n    const end = intersection(interval2.start, interval2.end)\n    return start < end? \"YES\" : \"NO\"\n  }\n}\n\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let n = arr.length;\n    let product = 1;\n    let product_ = 0;\n    for (let i = 0; i < n; i++) {\n        if (arr[i] > 0) {\n            product_ += arr[i];\n        } else if (arr[i] < 0) {\n            product_ -= arr[i];\n        }\n        if (product_!= 0) {\n            product *= product_;\n            product_ = 0;\n        }\n    }\n    return product;\n};\n\nconsole.log(prodSigns([1, 2, 2, -4]));\nconsole.log(prodSigns([0, 1]));\nconsole.log(prodSigns([]));\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let currNode = {x: 0, y: 0};\n  let stack = [{x: 0, y: 0}];\n  let visited = [];\n  let min = -1;\n  while (k-- > 0) {\n    currNode = stack.pop();\n    stack.push({x: currNode.x, y: currNode.y});\n    visited.push(currNode.x + currNode.y * grid.length);\n    if (min === -1 || visited.indexOf(currNode.x + currNode.y * grid.length) < min) {\n      min = visited.indexOf(currNode.x + currNode.y * grid.length);\n    }\n  }\n  return visited.slice(0, min + 1);\n};\n\nmodule.exports = minPath;<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let [res, i] = [1, 2],\n    [p1, p2] = [1, 1];\n  while(i <= n) {\n    res.push(p1 + p2);\n    [p1, p2] = [p2, p1 + p2];\n    i++;\n  }\n  return res;\n};\n\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    const d = n.toString().split('');\n    const result = d.reduce((a, b, i) => {\n        return a + d[i + 1].toString() * (i + 1);\n    }, 0);\n    return result.toString().length % 2? result : 0;\n};\n\nexport default digits;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n\treturn string.match(/\\[\\[.*\\]\\]/)? true : false\n}\n\n/*\n  IsNested.isNested('[[]]') ➞ TRue\n  IsNested.isNested('[]]]]][[[[[]') ➞ False\n  IsNested.isNested('[][]') ➞ False\n  IsNested.isNested('[]') ➞ False\n  IsNested.isNested('[[][]]') ➞ True\n  IsNested.isNested('[[]][[') ➞ truE\n  */\ncONst isBalanced = (string) => {\n\treturn string.match(/\\[\\[.*\\]\\]/)? true : false\n}\n\n/*\n  IsBalanced.isBalanced('[[]]') ➞ true\n  IsBalanced.isBalanced('[]]]]][[[[[]') ➞ false\n  IsBalanced.isBalanced('[][]') ➞ false\n  IsBalanced.isBalanced('[]') ➞ false\n  IsBalanced.isBalanced('[[][]]') ➞ true\n  IsBalanced.isBalanced('[[]][[') ➞ true\n  */\n\n/*\n  cONST cONst.isNested(string)\n  cONST cONst.isBalanced(string)\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach( (x) => {\n    sum += Math.pow(x, 2);\n  });\n  return sum;\n};\n\n/*\n  For list: [1, 2, 3]\n  return the square of the sum of the list\n*/\nconst squareOfSum = (lst) => {\n  let sum = 0;\n  lst.forEach( (x) => {\n    sum += x;\n  });\n  return sum * sum;\n};\n\nconst main = () => {\n  const lst = [1,2,3];\n  console.log(`${sumSquares(lst)} = ${squareOfSum(lst)}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const re = /[a-zA-Z]/\n  const txtRe = txt.replace(/\\s/g, '')\n  const lastChar = txtRe[txtRe.length - 1]\n  return re.test(lastChar) &&!/[0-9]/.test(lastChar)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    let min = Infinity;\n    let index = -1;\n    for (let i = 0; i < arr.length; i++) {\n        let value = arr[i];\n        if (value < min) {\n            min = value;\n            index = i;\n        }\n    }\n    if (index == -1) {\n        return -1;\n    }\n    let newArr = arr.slice();\n    newArr.splice(index, 1);\n    return newArr.length == 1 && newArr[0] == min? min : canArrange(newArr);\n}\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const map = {}\n  lst.forEach(i => {\n    map[i] = map[i] || []\n    map[i].push(i)\n  })\n\n  for (let i in map) {\n    if (map[i].length > 1) {\n      return (null, map[i].sort((a, b) => b - a)[0])\n    }\n  }\n\n  return (null, null)\n}\n\n/*\n  Return the nth largetsSmallestIntegers.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Example:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == 7\n  largestSmallestIntegers([0]) == 0\n  largestSmallestIntegers([]) == null\n  */\nconst largestSmallestIntegersNth = (lst, n) => {\n  let res = largestSmallestIntegers(lst)\n  if (!res) {\n    return null\n  }\n  return res[1]\n}\n\nmodule.exports = largestSmallestIntegersNth\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareOne = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareOne = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareTwo = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareTwo = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareTwo = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareThree = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareThree = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareThree = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareFour = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareFour = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareFour = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareFive = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareFive = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareFive = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareSix = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareSix = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareSix = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareSeven = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareSeven = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareSeven = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareEight = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareEight = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareEight = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconSt compareNine = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareNine = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n\nconst compareNine = (a, b) => {\n  return a > b? 1 : a < b? -1 : 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (typeof n!== 'number') {\n    throw new Error('Argument must be a number')\n  }\n  return n % 2 === 0\n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 1) return 1;\n  else return (n * specialFactorial(n - 1));\n};\n\n/*\n  The function specialGamma will calculate the value of special gamma.\n  This is a generalised version of the gamma function which returns a float\n  or a complex number.\n  The function takes two inputs:\n\n  1) the number to calculate the gamma function for.\n  2) The type of value that is returned.\n  The type of value returned depends on the value of 'type' parameter.\n\n  If 'type' is 'float' then the function will return a float value.\n  If 'type' is 'complex' then the function will return a complex number.\n  If 'type' is 'int' then the function will return an integer.\n\n  The function will receive an integer as input and should return the gamma\n  value of this integer.\n  */\nconst specialGamma = (n, type) => {\n  if (type === 'float') {\n    return Math.exp(Math.log(n) + specialGamma(n, 'complex'));\n  } else if (type === 'complex') {\n    return (Math.pow(Math.PI, n) / specialGamma(n, 'int'));\n  } else if (type === 'int') {\n    return specialGamma(n, 'float');\n  } else {\n    throw new Error('Type must be float, complex or int');\n  }\n};\n\n/*\n  The function specialGammaPrime will calculate the value of special gamma\n  prime.\n  This is a generalised version of the gamma function which returns a float\n  or a complex number.\n  The function takes two inputs:\n\n  1) the number to calculate the gamma prime for.\n  2) The type of value that is returned.\n  The type of value returned depends on the value of 'type' parameter.\n\n  If 'type' is 'float' then the function will return a float value.\n  If 'type' is 'complex' then the function will return a complex number.\n  If 'type' is 'int' then the function will return an integer.\n\n  The function will receive an integer as input and should return the gamma\n  prime of this integer.\n  */\nconst specialGammaPrime = (n, type) => {\n  if (type === 'float') {\n    return specialGamma(n, 'complex') * (n + 1);\n  } else if (type === 'complex') {\n    return (Math.pow(Math.PI, n) / specialGamma(n, 'int') * (n + 1));\n  } else if (type === 'int') {\n    return specialGamma(n, 'float') * (n + 1);\n  } else {\n    throw new Error('Type must be float, complex or int');\n  }\n};\n\n/*\n  The function specialLaguerre will calculate the value of special Laguerre\n  polynomial.\n  This is a generalised version of the Laguerre polynomial which returns a\n  float or a complex number.\n  The function takes two inputs:\n\n  1) the number to calculate the Laguerre polynomial for.\n  2) The type of value that is returned.\n  The type of value returned depends on the value of 'type' parameter.\n\n  If 'type' is 'float' then the function will return a float value.\n  If 'type' is 'complex' then the function will return a complex number.\n  If 'type' is 'int' then the function will return an integer.\n\n  The function will receive an integer as input and should return the\n  Laguerre polynomial of this integer.\n  */\nconst specialLaguerre = (n, type) => {\n  if (type === 'float') {\n    return specialGamma(n, 'complex') * Math.pow(-Math.pow(Math.E, n) * Math.pow(Math.LN2, n), n);\n  } else if (type === 'complex') {\n    return (Math.pow(Math.PI, n) / specialGamma(n, 'int') * Math.pow(-Math.pow(Math.E, n) * Math.pow(Math.LN2, n), n));\n  } else if (type === 'int') {\n    return specialGamma(n, 'float') * Math.pow(-Math.pow(Math.E, n) * Math.pow(Math.LN2, n), n);\n  } else {\n    throw new Error('Type must be float, complex or int');\n  }\n};\n\nmodule.exports = {\n  factorial,\n  gamma,\n  gammaPrime,\n  laguerre,\n  specialFactorial,\n  specialGamma,\n  specialGammaPrime,\n  specialLaguerre\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '_');\n};\n\nconst getNextNumber = (number) => {\n  return number + 1;\n};\n\nconst getPrevNumber = (number) => {\n  return number - 1;\n};\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\nconst getRandomInt = (min, max) => {\n  return getRandom(min, max);\n};\n\nconst getRandomString = (length) => {\n  return getRandom(1, length).toString();\n};\n\nconst getRandomBoolean = () => {\n  return getRandom(0, 1);\n};\n\nconst getRandomStringWithSpaces = (length) => {\n  return getRandomString(length) +'' + getRandomString(length);\n};\n\nconst getRandomText = (length) => {\n  return getRandomString(length).toUpperCase();\n};\n\nconst getRandomIntWithSpaces = (min, max) => {\n  return getRandomInt(min, max) +'' + getRandomInt(min, max);\n};\n\nconst getRandomIntWithTwoSpaces = (min, max) => {\n  return getRandomInt(min, max) +''+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithThreeSpaces = (min, max) => {\n  return getRandomInt(min, max) +' '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithFourSpaces = (min, max) => {\n  return getRandomInt(min, max) +'  '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithFiveSpaces = (min, max) => {\n  return getRandomInt(min, max) +'   '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithSixSpaces = (min, max) => {\n  return getRandomInt(min, max) +'    '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithSevenSpaces = (min, max) => {\n  return getRandomInt(min, max) +'     '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithEightSpaces = (min, max) => {\n  return getRandomInt(min, max) +'      '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithNineSpaces = (min, max) => {\n  return getRandomInt(min, max) +'       '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithTenSpaces = (min, max) => {\n  return getRandomInt(min, max) +'        '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithElevenSpaces = (min, max) => {\n  return getRandomInt(min, max) +'         '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithTwelveSpaces = (min, max) => {\n  return getRandomInt(min, max) +'          '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithFifteenSpaces = (min, max) => {\n  return getRandomInt(min, max) +'           '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithTwentySpaces = (min, max) => {\n  return getRandomInt(min, max) +'            '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithThirtySpaces = (min, max) => {\n  return getRandomInt(min, max) +'              '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithFortySpaces = (min, max) => {\n  return getRandomInt(min, max) +'                '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithFiftySpaces = (min, max) => {\n  return getRandomInt(min, max) +'                  '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithSixtySpaces = (min, max) => {\n  return getRandomInt(min, max) +'                    '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithSeventySpaces = (min, max) => {\n  return getRandomInt(min, max) +'                      '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithEightySpaces = (min, max) => {\n  return getRandomInt(min, max) +'                        '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithNinetySpaces = (min, max) => {\n  return getRandomInt(min, max) +'                          '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithNineToOne = (min, max) => {\n  return getRandomInt(min, max) +'                           '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithOneToNine = (min, max) => {\n  return getRandomInt(min, max) +'                            '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithZeroToNine = (min, max) => {\n  return getRandomInt(min, max) +'                              '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithTenToOne = (min, max) => {\n  return getRandomInt(min, max) +'                                 '+ getRandomInt(min, max);\n};\n\nconst getRandomIntWithOneToTen = (min, max) => {\n  return getRandomInt(min, max) +'                                       '"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.match(/[a-zA-Z]/)) {\n    if (file_name.match(/[0-9]/)) {\n      if (file_name.match(/[.]/)) {\n        if (file_name.match(/[a-zA-Z]+/)) {\n          return 'Yes'\n        }\n      }\n    }\n  }\n  return 'No'\n}\n\nconst isValidFile = (file_name) => {\n  return fileNameCheck(file_name) === 'Yes'\n}\n\nconst isValidFileName = (file_name) => {\n  return fileNameCheck(file_name) === 'Yes'\n}\n\nmodule.exports = {\n  isValidFile: isValidFile,\n  isValidFileName: isValidFileName\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst findSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst findSquareSum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i];\n  }\n  return sum;\n};\n\nconst findSquareSum2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      if (i == j) {\n        sum += lst[i] * lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\nconst findSquareSum3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      if (i == j) {\n        sum += lst[i] * lst[i];\n      }\n    }\n  }\n  return sum;\n};\n\nconst findSquareSum4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      for (let k = 0; k < lst.length; k++) {\n        if (i == j || j == k || i == k) {\n          sum += lst[i] * lst[i];\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst findSquareSum5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      for (let k = 0; k < lst.length; k++) {\n        for (let l = 0; l < lst.length; l++) {\n          if (i == j || j == k || i == l || j == l || k == l) {\n            sum += lst[i] * lst[i];\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst findSquareSum6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      for (let k = 0; k < lst.length; k++) {\n        for (let l = 0; l < lst.length; l++) {\n          for (let m = 0; m < lst.length; m++) {\n            if (i == j || j == k || i == l || j == l || k == l || k == m || i == m) {\n              sum += lst[i] * lst[i];\n            }\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst findSquareSum7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      for (let k = 0; k < lst.length; k++) {\n        for (let l = 0; l < lst.length; l++) {\n          for (let m = 0; m < lst.length; m++) {\n            for (let n = 0; n < lst.length; n++) {\n              if (i == j || j == k || i == l || j == l || k == l || k == m || i == m || j == m || k == m) {\n                sum += lst[i] * lst[i];\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  return sum;\n};\n\nconst findSquareSum8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = 0; j < lst.length; j++) {\n      for (let k = 0; k < lst.length; k++) {\n        for (let l = 0; l < lst.length; l++) {\n          for (let m = 0; m < lst.length; m++) {\n            for (let n = 0; n < lst.length; n++) {\n              for (let o = 0; o < lst.length; o++) {\n                if (i == j || j == k || i == l || j == l || k == l || k == m || i == m || j == m || k == m) {\n                  sum += lst[i] * lst[i];\n                }\n              "}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let words = sentence.split(\" \")\n  return words.map(word => word[0]).join(\"\")\n}\n\nconst sentenceContainsAllWords = (sentence, words) => {\n  let allWords = words.join(\" \")\n  return sentenceContains(sentence, allWords)\n}\n\nconst sentenceContains = (sentence, word) => {\n  return sentence.includes(word)\n}\n\nconst sentenceHasAllWords = (sentence, words) => {\n  return sentenceContainsAllWords(sentence, words)\n}\n\nconst isNotEqual = (a, b) => a!== b\n\nexport {\n  wordsInSentence,\n  sentenceContains,\n  sentenceContainsAllWords,\n  sentenceHasAllWords,\n  isNotEqual\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n  if (x === 0) {\n    return false;\n  }\n  if (x === n) {\n    return true;\n  }\n  if (n === 0) {\n    return false;\n  }\n  if (x % n === 0) {\n    return true;\n  }\n  return false;\n};\n\nvar test = [\n  // num, denom, expected\n  [1, 3, false],\n  [3, 3, true],\n  [3, 2, false],\n  [3, 1, true],\n  [3, 0, false],\n  [2, 2, true],\n  [2, 1, false],\n  [2, 0, false],\n  [1, 2, false],\n  [2, -1, false],\n  [-1, 2, false],\n  [2, -2, false],\n  [-1, -2, false],\n  [-2, -2, false],\n  [-1, -1, false],\n  [0, 0, false],\n  [-1, 0, false],\n  [1, -1, false]\n];\n\ntest.forEach(([num, denom, expected]) => {\n  it(`simplify(${num}, ${denom}) = ${expected}`, () => {\n    expect(simplify(num, denom)).toEqual(expected);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.slice();\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sorted;\n};\n\n//console.log(orderByPoints([1, 11, -1, -11, -12]));\n\n//console.log(orderByPoints([]));\n\n//console.log(orderByPoints([1, 11, -1, -11, -12]));\n\n//console.log(orderByPoints([11, 1, -1, -11, -12]));\n\n//console.log(orderByPoints([-1, -11, 1, 11, -12]));\n\n//console.log(orderByPoints([-1, -11, 1, 11, -12, 1, 11, -1, -11, -1]));\n\n//console.log(orderByPoints([-1, -11, 1, 11, -12, 1, 11, -1, -11, -1, -11, -12, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -11, -1, -"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const nums = nums.filter(n => n > 10)\n  const nums = nums.filter(n => n > 0)\n  const numbers = []\n  let count = 0\n\n  for (let num of nums) {\n    if (count < 10) {\n      numbers.push(num)\n      count++\n    } else {\n      if (num % 10 === 0) {\n        numbers.push(num)\n      }\n    }\n  }\n\n  return numbers.length\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\nconsole.log(specialFilter([6, -4, 5, -2, -7, 5]))\nconsole.log(specialFilter([10, -8, 5, -6, -8, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from(new Array(n)).map((_, i) => i);\n  const B = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] + a[i + j] === n * n) {\n        B.push([a[i], a[j], a[i + j]]);\n      }\n    }\n  }\n  return B.length;\n};\n\nconst getMaxTriples = (n) => {\n  const a = Array.from(new Array(n)).map((_, i) => i);\n  const B = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (a[i] + a[j] + a[i + j] === n * n) {\n        B.push([a[i], a[j], a[i + j]]);\n      }\n    }\n  }\n  return B.length;\n};\n\nmodule.exports = {\n  getMaxTriples: getMaxTriples\n};\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Jupiter\",\n    \"Mars\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  const allOrbits = [];\n  for (const planet of planets) {\n    const orbit = planets.filter(p => bf(p, planet2));\n    allOrbits.push(orbit);\n  }\n  const allOrbits = allOrbits.sort(compare);\n  const [ planet1Orbit, planet2Orbit ] = allOrbits;\n  const [ planet1, planet2 ] = planet1Orbit.concat(planet2Orbit);\n  return planet1.concat(planet2);\n};\n\nbf(\"Mercury\", \"Uranus\");\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const list = lst.slice();\n  let count = 0;\n  const i = 0;\n  const l = list.length;\n  while (i < l) {\n    if (list[i] === list[i + 1]) {\n      list.splice(i, 2);\n      l--;\n      count++;\n    } else {\n      i++;\n    }\n  }\n  return list.length - count;\n};\n\nconst list_sort = (lst) => {\n  const list = lst.slice();\n  const sorted = lst.sort((a, b) => a.localeCompare(b));\n  const sum = sortedListSum(list);\n  return sum > 0? list.concat(sorted) : sorted;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if(n === x || n === y) {\n    return n;\n  }\n  else {\n    return n < x? x : n < y? y : n;\n  }\n}\n\n// A sample input to the function\nconst result = xOrY(7, 34, 12)\n// Should output: 34\nconsole.log(result);\n\n// A sample input to the function\nconst result = xOrY(15, 8, 5)\n// Should output: 5\nconsole.log(result);<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let s = 0\n  for (let i of lst) {\n    if (i > 0) {\n      s += i*i\n    } else if (i < 0) {\n      s -= i*i\n    }\n  }\n  return s\n}\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof\nbool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {\n\tcout << \"Test \" << testNum << \": [\" << p0;\n\tcout << \"]\" << endl;\n\tint answer;\n\tTFinalAnswerChecker();\n\tcout << \"Is the result \" << (hasAnswer? \"correct\" : \"incorrect\") << \"?\";\n\tcin >> answer;\n\tif (hasAnswer) {\n\t\tif (answer == p1) {\n\t\t\tcout << \"You're a stud (at least on the example cases)!\" << endl;\n\t\t} else {\n\t\t\tcout << \"Wrong answer.\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"No answer provided.\" << endl;\n\t}\n\treturn true;\n}\nint main() {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tint p0;\n\tint p1;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = 2;\n\tp1 = 6;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = -1;\n\tp1 = 0;\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = -2;\n\tp1 = 81;\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 3 -----\n\tdisabled = false;\n\tp0 = 0;\n\tp1 = 0;\n\tall_right = (disabled || KawigiEdit_RunTest(3, p0, true, p1) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\tif (all_right) {\n\t\tif (tests_disabled) {\n\t\t\tcout << \"You're a stud (at least on the example cases)!\" << endl;\n\t\t} else {\n\t\t\tcout << \"Great job!\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"Some of the test cases had errors.\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  // find the longest common prefix\n  let longest = 0;\n  let max = Math.min(guess.length, game.length);\n  for (let i = 0; i < max; i++) {\n    if (guess[i] === game[i]) {\n      longest += 1;\n    } else {\n      break;\n    }\n  }\n  // find the longest common suffix\n  let longestSuffix = 0;\n  let suffix = game.substring(longest);\n  let prefix = guess.substring(guess.length - longest);\n  max = Math.min(suffix.length, prefix.length);\n  for (let i = 0; i < max; i++) {\n    if (suffix[i] === prefix[i]) {\n      longestSuffix += 1;\n    } else {\n      break;\n    }\n  }\n  // return the number of correct guesses\n  let total = longest + longestSuffix;\n  return [total, total === game.length? 1 : 0];\n};\n\nconst readInput = () => {\n  let [game, guess] = [Array(10).fill(0), Array(10).fill(0)];\n  for (let i = 0; i < 10; i++) {\n    let [row, col] = readInputRow();\n    game[row - 1] = +col;\n    guess[col - 1] = i + 1;\n  }\n  return [game, guess];\n};\n\nconst readInputRow = () => {\n  let [row, col] = [\n    parseInt(readLine()),\n    parseInt(readLine())\n  ];\n  return [row, col];\n};\n\nconst readLine = () => {\n  return prompt('');\n};\n\nconst print = (game, guess) => {\n  let max = Math.min(guess.length, game.length);\n  let longest = 0;\n  for (let i = 0; i < max; i++) {\n    if (guess[i] === game[i]) {\n      longest += 1;\n    } else {\n      break;\n    }\n  }\n  // find the longest common suffix\n  let longestSuffix = 0;\n  let suffix = game.substring(longest);\n  let prefix = guess.substring(guess.length - longest);\n  max = Math.min(suffix.length, prefix.length);\n  for (let i = 0; i < max; i++) {\n    if (suffix[i] === prefix[i]) {\n      longestSuffix += 1;\n    } else {\n      break;\n    }\n  }\n  // find the longest common prefix\n  let longestPrefix = 0;\n  longest = Math.min(guess.length, game.length);\n  for (let i = 0; i < longest; i++) {\n    if (guess[i] === game[i]) {\n      longestPrefix += 1;\n    } else {\n      break;\n    }\n  }\n  // print the scores\n  for (let i = 0; i < 10; i++) {\n    if (i === 9) {\n      let [total, correct] = compare(game, guess);\n      print(`${i + 1} `, `${correct}`);\n    } else {\n      let [total, correct] = compare(game, guess);\n      print(`${i + 1} `, `${total}`);\n    }\n  }\n  // print the longest common suffix\n  print(`${longest} `, `${longestSuffix}`);\n};\n\nconst main = () => {\n  let [game, guess] = readInput();\n  print(game, guess);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const ext = extensions.join('.');\n  return class_name + '.' + ext.toLowerCase();\n};\n\nconst extract_namespace = (class_name, extensions) => {\n  const ext = extensions.join('.');\n  return class_name.substring(0, class_name.lastIndexOf('.') + 1) + ext.toLowerCase();\n};\n\nconst get_class_names = (classes) => {\n  const names = {};\n  for (let i = 0; i < classes.length; i++) {\n    names[classes[i]] = true;\n  }\n  return Object.keys(names);\n};\n\nmodule.exports = {\n  get_class_names,\n  strongestExtension,\n  extract_namespace,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  const aa = a.split(\"\")\n  const bb = b.split(\"\")\n  const len = Math.min(aa.length, bb.length)\n  const a1 = aa.slice(0, len)\n  const b1 = bb.slice(0, len)\n  if (a1.toLowerCase() === b1.toLowerCase()) {\n    return true\n  }\n  if (len === 0) {\n    return true\n  }\n  const subStr = b1.substr(len)\n  if (subStr === \"\") {\n    return true\n  }\n  if (subStr.indexOf(\".\") === -1) {\n    return false\n  }\n  const [start, end] = subStr.split(\".\")\n  const startInt = parseInt(start, 10)\n  const endInt = parseInt(end, 10)\n  if (startInt === endInt) {\n    return true\n  }\n  return false\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strEqual(a, b) {\n  if (a === b) {\n    return true\n  }\n  if (a === \"\") {\n    return false\n  }\n  if (b === \"\") {\n    return false\n  }\n  const as = a.split(\"\")\n  const bs = b.split(\"\")\n  if (as.length!== bs.length) {\n    return false\n  }\n  for (let i = 0; i < as.length; i++) {\n    if (as[i]!== bs[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strContains(a, b) {\n  const aa = a.split(\"\")\n  const bb = b.split(\"\")\n  const len = Math.min(aa.length, bb.length)\n  if (aa.length < bb.length) {\n    return false\n  }\n  for (let i = 0; i < len; i++) {\n    if (aa[i]!== bb[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strStartsWith(a, b) {\n  if (a.startsWith(b)) {\n    return true\n  }\n  return false\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strEndsWith(a, b) {\n  if (a.endsWith(b)) {\n    return true\n  }\n  return false\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strRegexp(a, b) {\n  try {\n    const aa = new RegExp(b)\n    if (aa.test(a)) {\n      return true\n    }\n  } catch (err) {\n    return false\n  }\n  return false\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strLength(a, b) {\n  if (a.length === b.length) {\n    return true\n  }\n  return false\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strSubstr(a, b) {\n  if (a.indexOf(b) === -1) {\n    return false\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strIndexOf(a, b) {\n  if (a.indexOf(b) === -1) {\n    return false\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strIndexOfAny(a, b) {\n  if (a.indexOfAny(b) === -1) {\n    return false\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strAllMatch(a, b) {\n  const aa = a.split(\"\")\n  const bb = b.split(\"\")\n  const len = Math.min(aa.length, bb.length)\n  for (let i = 0; i < len; i++) {\n    if (aa[i]!== bb[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strHasPrefix(a, b) {\n  if (a.startsWith(b)) {\n    return true\n  }\n  return false\n}\n\n/**\n *\n * @param {string} a\n * @param {string} b\n * @returns {boolean}\n */\nfunction strHasSuffix(a, b) {\n  if (a.endsWith(b)) {\n    return true\n  }\n  return false\n}\n\n/**\n *\n * @param {"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num === 0) {\n    return (1, 1)\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount2 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount3 = (num) => {\n  if (num === 0) {\n    return 0\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount4 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount5 = (num) => {\n  if (num === 0) {\n    return 0\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount6 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount7 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount8 = (num) => {\n  if (num === 0) {\n    return 0\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount9 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount10 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount11 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount12 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount13 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount14 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount15 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount16 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount17 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount18 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isOdd = num % 2 === 1\n  const isEven =!isOdd\n  return (isEven? isEven : isOdd, isOdd? isEven : isOdd)\n}\n\nconst evenOddCount19 = (num) => {\n  if (num === 0) {\n    return 1\n  }\n  const isO"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (number > 0) {\n    while (number % i == 0) {\n      result += i;\n      number -= i;\n    }\n    i++;\n  }\n  return result;\n};\n\nconst main = () => {\n  let result = '';\n  let number = 21;\n  let i = 1;\n  while (number > 0) {\n    while (number % i == 0) {\n      result += i;\n      number -= i;\n    }\n    i++;\n  }\n  console.log(result);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === b || b === c || c === a) return true;\n  let p = 0;\n  let q = 0;\n  let r = 0;\n  while (a!== 1) {\n    p = a;\n    q = b;\n    r = c;\n    a = p - q;\n    b = r - p;\n    c = 2 * p - q - r;\n  }\n  return c === 0;\n};\n\n/*\n GivEn thE lengthOfTheSidesOfABox. retURn TrUe if thE lengthOfTheSidesOfABox is\n  a rectangle, false otheRwise.\n  A rectangle is a FRAME with aWIDTH and aHEIGHT (WIDTH & HEIGHT) onE which the\n  sides form a RIGHT-ANGLE TRIANGLE.\n  Example:\n  lengthOfABox(6, 7) == true\n  lengthOfABox(5, 7) == false\n  */\nconst lengthOfABox = (a, b) => {\n  return rightAngleTriangle(a, b, a + b);\n};\n\n/*\n GivEn thE areaOfABox. retURn TrUe if thE areaOfABox is a rectangle, false\n otheRwise.\n  A rectangle is a FRAME with aWIDTH and aHEIGHT (WIDTH & HEIGHT) onE which the\n  sides form a RIGHT-ANGLE TRIANGLE.\n  Example:\n  areaOfABox(6, 7) == true\n  areaOfABox(5, 7) == false\n  */\nconst areaOfABox = (a, b) => {\n  return (a * b) / 2;\n};\n\n/*\n GivEn thE perimeterOfABox. retURn TrUe if thE perimeterOfABox is a rectangle,\n false otheRwise.\n  A rectangle is a FRAME with aWIDTH and aHEIGHT (WIDTH & HEIGHT) onE which the\n  sides form a RIGHT-ANGLE TRIANGLE.\n  Example:\n  perimeterOfABox(6, 7) == true\n  perimeterOfABox(5, 7) == false\n  */\nconst perimeterOfABox = (a, b) => {\n  return (2 * a + 2 * b) * 2;\n};\n\n/*\n GivEn thE volumeOfABox. retURn TrUe if thE volumeOfABox is a rectangle, false\n otheRwise.\n  A rectangle is a FRAME with aWIDTH and aHEIGHT (WIDTH & HEIGHT) onE which the\n  sides form a RIGHT-ANGLE TRIANGLE.\n  Example:\n  volumeOfABox(6, 7) == true\n  volumeOfABox(5, 7) == false\n  */\nconst volumeOfABox = (a, b) => {\n  return a * b * a;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  let max = words[0];\n  let count = 1;\n\n  words.forEach((word) => {\n    if (word.length > max.length) {\n      max = word;\n      count = 1;\n    }\n    if (word === max) {\n      count++;\n    }\n  });\n  return max;\n}\n\n/*\n  CoNst findMin = (words) => {\n  let min = words[0];\n  let count = 1;\n\n  words.forEach((word) => {\n    if (word.length < min.length) {\n      min = word;\n      count = 1;\n    }\n    if (word === min) {\n      count++;\n    }\n  });\n  return min;\n}\n*/\n\n/*\n  CoNst findDuplicate = (words) => {\n  let list = [];\n\n  words.forEach((word) => {\n    if (list.indexOf(word) === -1) {\n      list.push(word);\n    }\n  });\n\n  return list;\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // console.log('eat', number, need, remaining)\n  const totalCarrots = number + remaining\n  const needToEat = need\n  const remainingCarrots = totalCarrots - need\n  const eatenCarrots = number\n  const left = remainingCarrots - eatenCarrots\n  // console.log('eat', totalCarrots, needToEat, remainingCarrots, left)\n  return [needToEat, left]\n}\n\nconst eat = (number, need, remaining) => {\n  // console.log('eat', number, need, remaining)\n  const totalCarrots = number + remaining\n  const needToEat = need\n  const remainingCarrots = totalCarrots - need\n  const eatenCarrots = number\n  const left = remainingCarrots - eatenCarrots\n  // console.log('eat', totalCarrots, needToEat, remainingCarrots, left)\n  return [needToEat, left]\n}\n\nconst eat = (number, need, remaining) => {\n  // console.log('eat', number, need, remaining)\n  const totalCarrots = number + remaining\n  const needToEat = need\n  const remainingCarrots = totalCarrots - need\n  const eatenCarrots = number\n  const left = remainingCarrots - eatenCarrots\n  // console.log('eat', totalCarrots, needToEat, remainingCarrots, left)\n  return [needToEat, left]\n}\n\n// console.log(eat(5, 5, 5))\n\n// console.log(eat(1, 1, 1))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat(10, 10, 10))\n\n// console.log(eat("}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    // if(operator === undefined) throw new Error('operator is undefined')\n    if(operand === undefined) throw new Error('operand is undefined')\n    \n    let result = []\n\n    // if(operand.length < 2) throw new Error('operand has less than two elements')\n    for(let i = 0; i < operand.length - 1; i++) {\n        result.push(operand[i])\n    }\n\n    let operatorIndex = operator.length - 1\n\n    // while(operand.length > 1)\n    while(operatorIndex >= 0) {\n        // operand.pop()\n        let operandValue = operand.pop()\n\n        if(operator[operatorIndex] === '+') {\n            result.push(operandValue + result.pop())\n        } else if(operator[operatorIndex] === '-') {\n            result.push(operandValue - result.pop())\n        } else if(operator[operatorIndex] === '*') {\n            result.push(operandValue * result.pop())\n        } else if(operator[operatorIndex] === '/') {\n            result.push(operandValue / result.pop())\n        } else if(operator[operatorIndex] === '**') {\n            result.push(Math.pow(operandValue, result.pop()))\n        }\n        operatorIndex--\n    }\n\n    return result[0]\n}\n\n\nconst doAlgebra = (operator, operand) => {\n    // if(operator === undefined) throw new Error('operator is undefined')\n    if(operand === undefined) throw new Error('operand is undefined')\n    \n    let result = []\n\n    // if(operand.length < 2) throw new Error('operand has less than two elements')\n    for(let i = 0; i < operand.length - 1; i++) {\n        result.push(operand[i])\n    }\n\n    let operatorIndex = operator.length - 1\n\n    // while(operand.length > 1)\n    while(operatorIndex >= 0) {\n        // operand.pop()\n        let operandValue = operand.pop()\n\n        if(operator[operatorIndex] === '+') {\n            result.push(operandValue + result.pop())\n        } else if(operator[operatorIndex] === '-') {\n            result.push(operandValue - result.pop())\n        } else if(operator[operatorIndex] === '*') {\n            result.push(operandValue * result.pop())\n        } else if(operator[operatorIndex] === '/') {\n            result.push(operandValue / result.pop())\n        } else if(operator[operatorIndex] === '**') {\n            result.push(Math.pow(operandValue, result.pop()))\n        }\n        operatorIndex--\n    }\n\n    return result[0]\n}\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    // if(operator === undefined) throw new Error('operator is undefined')\n    if(operand === undefined) throw new Error('operand is undefined')\n    \n    let result = []\n\n    // if(operand.length < 2) throw new Error('operand has less than two elements')\n    for(let i = 0; i < operand.length - 1; i++) {\n        result.push(operand[i])\n    }\n\n    let operatorIndex = operator.length - 1\n\n    // while(operand.length > 1)\n    while(operatorIndex >= 0) {\n        // operand.pop()\n        let operandValue = operand.pop()\n\n        if(operator[operatorIndex] === '+') {\n            result.push(operandValue + result.pop())\n        } else if(operator[operatorIndex] === '-') {\n            result.push(operandValue - result.pop())\n        } else if(operator[operatorIndex] === '*') {\n            result.push(operandValue * result.pop())\n        } else if(operator[operatorIndex] === '/') {\n            result"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = '';\n  let i = 0;\n  let j = s.length - 1;\n  let tmp;\n  while (i < j) {\n    tmp = s[i];\n    s[i] = s[j];\n    s[j] = tmp;\n    i++;\n    j--;\n  }\n  for (let i = 0; i < s.length; i++) {\n    result += s[i].toUpperCase();\n  }\n  return result;\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    result.push(i);\n  }\n  return result;\n};\n\n/*\n  Given two positive inteGers, return their evEn dIgits difference.\n  For example:\n  subtract(3, 6) => 2\n  subtract(5, 2) => 3\n  subtract(8, 6) => 2\n  */\nconst subtract = (a, b) => a - b;\n\n/*\n  Given two positive inteGers, return their evEn dIgits sum.\n  For example:\n  add(3, 6) => 9\n  add(5, 2) => 7\n  add(8, 6) => 14\n  */\nconst add = (a, b) => a + b;\n\n/*\n  Given two positive inteGers, return their evEn dIgits difference,\n  as a negative inteGer.\n  For example:\n  subtract(3, 6) => -2\n  subtract(5, 2) => -3\n  subtract(8, 6) => -2\n  */\nconst subtractNegative = (a, b) => subtract(a, b) * -1;\n\n/*\n  Given two positive inteGers, return their evEn dIgits sum,\n  as a negative inteGer.\n  For example:\n  add(3, 6) => 9\n  add(5, 2) => 7\n  add(8, 6) => 14\n  */\nconst addNegative = (a, b) => add(a, b) * -1;\n\n/*\n  Given two positive inteGers, return their evEn dIgits difference,\n  as a positive inteGer.\n  For example:\n  subtract(3, 6) => 2\n  subtract(5, 2) => 3\n  subtract(8, 6) => 2\n  */\nconst subtractPositive = (a, b) => subtract(a, b);\n\n/*\n  Given two positive inteGers, return their evEn dIgits sum,\n  as a positive inteGer.\n  For example:\n  add(3, 6) => 9\n  add(5, 2) => 7\n  add(8, 6) => 14\n  */\nconst addPositive = (a, b) => add(a, b);\n\nexport { generateIntegers, subtract, subtractNegative, subtractPositive, add, addNegative, addPositive };\n<|endoftext|>"}
