{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return numbers.some(number => {\n    const diff = number - threshold;\n    const prevNumber = numbers[numbers.indexOf(number) - 1];\n    return (number - prevNumber) > diff;\n  });\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const split = paren_string.split('(')\n  let str_array = []\n  let paren_count = 0\n  let i = 0\n  for (i = 0; i < split.length; i++) {\n    let split_paren = split[i].split(')')\n    let paren_count = paren_count + 1\n    if (paren_count == 2) {\n      str_array.push(split_paren[0])\n      paren_count = 0\n    } else {\n      str_array.push(split_paren[1])\n    }\n  }\n  return str_array\n}\n\n/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('((())())')\n  ['()()()']\n  >>> separateParenGroups('((())')\n  ['(())']\n  >>> separateParenGroups('((())()')\n  ['(())']\n  >>> separateParenGroups('(((())())')\n  ['(()())']\n  >>> separateParenGroups('((()())())')\n  ['(()())']\n  */\nconst separateParens = (paren_string) => {\n  const split = paren_string.split('(')\n  let str_array = []\n  let i = 0\n  for (i = 0; i < split.length; i++) {\n    let split_paren = split[i].split(')')\n    let paren_count = paren_count + 1\n    if (paren_count == 2) {\n      str_array.push(split_paren[0])\n      paren_count = 0\n    } else {\n      str_array.push(split_paren[1])\n    }\n  }\n  return str_array\n}\n\n// Exercice 3.5\n\n// Exercice 3.6\n\n// Exercice 3.7\n\n// Exercice 3.8\n\n// Exercice 3.9\n\n// Exercice 3.10\n\n// Exercice 3.11\n\n// Exercice 3.12\n\n// Exercice 3.13\n\n// Exercice 3.14\n\n// Exercice 3.15\n\n// Exercice 3.16\n\n// Exercice 3.17\n\n// Exercice 3.18\n\n// Exercice 3.19\n\n// Exercice 3.20\n\n// Exercice 3.21\n\n// Exercice 3.22\n\n// Exercice 3.23\n\n// Exercice 3.24\n\n// Exercice 3.25\n\n// Exercice 3.26\n\n// Exercice 3.27\n\n// Exercice 3.28\n\n// Exercice 3.29\n\n// Exercice 3.30\n\n// Exercice 3.31\n\n// Exercice 3.32\n\n// Exercice 3.33\n\n// Exercice 3.34\n\n// Exercice 3.35\n\n// Exercice 3.36\n\n// Exercice 3.37\n\n// Exercice 3.38\n\n// Exercice 3.39\n\n// Exercice 3.40\n\n// Exercice 3.41\n\n// Exercice 3.42\n\n// Exercice 3.43\n\n// Exercice 3.44\n\n// Exercice 3.45\n\n// Exercice 3.46\n\n// Exercice 3.47\n\n// Exercice 3.48\n\n// Exercice 3.49\n\n// Exercice 3.50\n\n// Exercice 3.51\n\n// Exercice 3.52\n\n// Exercice 3.53\n\n// Exercice 3.54\n\n// Exercice 3.55\n\n// Exercice 3.56\n\n// Exercice 3.57\n\n// Exercice 3.58\n\n// Exercice 3.59\n\n// Exercice 3.60\n\n// Exercice 3.61\n\n// Exercice 3.62\n\n// Exercice 3.63\n\n// Exercice 3.64\n\n// Exercice 3.65\n\n// Exercice 3.66\n\n// Exercice 3.67\n\n// Exercice 3.68\n\n// Exercice 3.69\n\n// Exercice 3.70\n\n// Exercice 3.71\n\n// Exercice 3.72\n\n// Exercice 3.73\n\n// Exercice 3.74\n\n// Exercice 3.75\n\n// Exercice 3.76\n\n// Exercice 3.77\n\n// Exercice 3.78\n\n// Exercice 3.79\n\n// Exercice 3.80\n\n// Exercice 3.81\n\n// Exercice 3.82\n\n// Exercice 3.83\n\n// Exercice 3.84\n\n// Exercice 3.85\n\n// Exercice 3.86\n\n// Exercice 3.87\n\n// Exercice 3.88\n\n// Exercice 3.89\n\n// Exercice 3.90\n\n// Exercice 3.91\n\n// Exercice 3.92\n\n// Exercice 3.93\n\n// Exercice 3.94\n\n// Exerc"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    if(number === 0) {\n        return 0;\n    }\n    var decimalNumber = number.toString().split(\".\")[1];\n    var intNumber = number.toString().split(\".\")[0];\n    var decimalLength = decimalNumber.length;\n    var intLength = intNumber.length;\n    if(decimalLength > intLength) {\n        return number;\n    }\n    var truncatedNumber = intNumber.substr(0, intLength - decimalLength);\n    var intPart = intNumber.substr(0, intLength - decimalLength);\n    var decimalPart = number.toString().split(\".\")[1];\n    var truncatedDecimalPart = decimalPart.substr(0, decimalLength);\n    var truncatedIntPart = intPart + \".\" + truncatedDecimalPart;\n    return truncatedIntPart;\n};\n\n/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncate = (number) => {\n    if(number === 0) {\n        return 0;\n    }\n    var decimalNumber = number.toString().split(\".\")[1];\n    var intNumber = number.toString().split(\".\")[0];\n    var decimalLength = decimalNumber.length;\n    var intLength = intNumber.length;\n    if(decimalLength > intLength) {\n        return number;\n    }\n    var truncatedNumber = intNumber.substr(0, intLength - decimalLength);\n    var intPart = intNumber.substr(0, intLength - decimalLength);\n    var decimalPart = number.toString().split(\".\")[1];\n    var truncatedDecimalPart = decimalPart.substr(0, decimalLength);\n    var truncatedIntPart = intPart + \".\" + truncatedDecimalPart;\n    return truncatedIntPart;\n};\n\nmodule.exports = {\n    truncateNumber,\n    truncate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let allNegative = true;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] > 0) {\n      allNegative = false;\n    }\n  }\n  return allNegative;\n};\n\nconsole.log(belowZero([1, 2, 3])); // true\nconsole.log(belowZero([1, 2, -4, 5])); // true\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const abs = numbers.map(x => Math.abs(x));\n  return Math.sqrt(abs.reduce((a, b) => a + b) / abs.length);\n};\n\n/*\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  >>> meanAbsoluteDeviation([-1.0, 2.0, 3.0, 4.0])\n  2.0\n  >>> meanAbsoluteDeviation([0.0, 1.0, 2.0, 3.0, 4.0])\n  2.0\n  >>> meanAbsoluteDeviation([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0])\n  1.0\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0])\n  4.0\n  */\nconst meanAbsoluteDeviation2 = (numbers) => {\n  const abs = numbers.map(x => Math.abs(x));\n  const sum = numbers.reduce((a, b) => a + b);\n  return Math.sqrt(sum / numbers.length);\n};\n\n// console.log(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]));\n// console.log(meanAbsoluteDeviation2([1.0, 2.0, 3.0, 4.0]));\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers)) {\n    throw new Error(\"Argument 'numbers' must be an Array\");\n  }\n  if (typeof delimeter!== 'number') {\n    throw new Error(\"Argument 'delimeter' must be a Number\");\n  }\n\n  const n = numbers.length;\n  if (n === 0) {\n    return [];\n  }\n  if (n === 1) {\n    return numbers;\n  }\n  return numbers.reduce((acc, curr, i) => {\n    if (i === 0) {\n      acc.push(curr);\n    } else if (i === n - 1) {\n      acc.push(curr);\n      acc.push(delimeter);\n    } else {\n      acc.push(curr);\n      acc.push(delimeter);\n    }\n    return acc;\n  }, []);\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let stack = [paren_string];\n  let stack_length = stack.length;\n  let stack_index = 0;\n  let stack_char ='';\n  let paren_string_length = paren_string.length;\n  let paren_string_index = 0;\n  let nested_paren_strings = [];\n  let nested_paren_strings_length = nested_paren_strings.length;\n\n  while (paren_string_index < paren_string_length) {\n    let paren_string_char = paren_string[paren_string_index];\n\n    if (paren_string_char === '(') {\n      stack.push(paren_string[paren_string_index]);\n      stack_index++;\n      stack_char = '(';\n    } else if (paren_string_char === ')') {\n      let found = false;\n      let stack_item = stack[stack_index];\n      let stack_item_length = stack_item.length;\n      let stack_item_index = 0;\n      while (stack_item_index < stack_item_length) {\n        if (stack_item[stack_item_index] === '(') {\n          stack_index++;\n          stack_char = '(';\n          found = true;\n          break;\n        }\n        stack_item_index++;\n      }\n      if (!found) {\n        nested_paren_strings.push(paren_string[paren_string_index]);\n        stack_char ='';\n      }\n    } else if (paren_string_char === ')') {\n      stack_char = ')';\n      stack_index--;\n      if (stack_index < 0) {\n        stack_index = stack.length - 1;\n      }\n      if (stack_index >= 0) {\n        stack_char = stack[stack_index];\n      }\n    }\n    paren_string_index++;\n  }\n  return nested_paren_strings;\n};\n\nmodule.exports = parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const substr = substring.toLowerCase();\n  return strings.filter((s) => s.toLowerCase().indexOf(substr) === 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['bacd']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  const substr = substring.toLowerCase();\n  return strings.filter((s) => s.toLowerCase().indexOf(substr) >= 0);\n};\n\n/*\n  >>> filterBySubstring([], 'abc')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'cde', 'array']\n  >>> filterBySubstring([], 'cde')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc']\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  const substr = substring.toLowerCase();\n  return strings.filter((s) => s.toLowerCase().indexOf(substr) >= 0);\n};\n\n/*\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cd')\n  ['bacd']\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  const substr = substring.toLowerCase();\n  return strings.filter((s) => s.toLowerCase().indexOf(substr) === -1);\n};\n\n/*\n  >>> filterBySubstring([], 'abc')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  ['abc', 'cde', 'array']\n  >>> filterBySubstring([], 'cde')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc']\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  const substr = substring.toLowerCase();\n  return strings.filter((s) => s.toLowerCase().indexOf(substr) === -1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    if (numbers.length === 0) {\n        return (0, 1)\n    }\n\n    const product = (n, i) => {\n        if (n > 0) {\n            return (n * numbers[i - 1])\n        }\n    }\n\n    const sum = (n, i) => {\n        if (n > 0) {\n            return (n + numbers[i - 1])\n        }\n    }\n\n    const min = (n, i) => {\n        if (n > 0) {\n            return (n - numbers[i - 1])\n        }\n    }\n\n    const max = (n, i) => {\n        if (n > 0) {\n            return (n + numbers[i - 1])\n        }\n    }\n\n    const sumProduct = (n, i) => {\n        if (n > 0) {\n            return (sum(n, i) * product(n, i))\n        }\n    }\n\n    const sum = (n, i) => {\n        if (n > 0) {\n            return (sum(n, i) + product(n, i))\n        }\n    }\n\n    const min = (n, i) => {\n        if (n > 0) {\n            return (min(n, i) + product(n, i))\n        }\n    }\n\n    const max = (n, i) => {\n        if (n > 0) {\n            return (max(n, i) + product(n, i))\n        }\n    }\n\n    const result = (sumProduct(n, i), sum(n, i))\n\n    return result\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return numbers.splice(maxIndex);\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if(isPalindrome(string)) return string;\n\n  const str = string.split('').reverse();\n  const r = str.join('');\n  return r.substr(0, string.length - r.length) + 'c' + r.substr(string.length - r.length);\n}\n\nconsole.log(makePalindrome('cata'));\n\n/*\n  What is the shortest palindrome that contains the characters in the\n  given string. For example, if the input string is 'ab', then the\n  palindromic string is 'ab'\n*/\nconst makePalindrome = (string) => {\n  let str = string.split('');\n  let r = str.reverse();\n  for(let i = 0; i < str.length; i++) {\n    if(isPalindrome(str.join('')) == false) break;\n    r = r.concat(str.join(''));\n  }\n  return r.join('');\n}\n\nconsole.log(makePalindrome('ab'));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  // Using bitwise AND with two strings\n  let aStr = a.split('').map(Number.prototype.toString).join('');\n  let bStr = b.split('').map(Number.prototype.toString).join('');\n  let str = aStr + bStr;\n  let len = str.length;\n\n  // Convert to numbers\n  let nums = str.split('').map(Number.prototype.toString);\n\n  // Count the number of ones\n  let ones = 0;\n  for (let i = 0; i < len; i++) {\n    ones += nums[i] === '1'? 1 : 0;\n  }\n\n  // Convert back to strings\n  let str = '';\n  for (let i = 0; i < len; i++) {\n    str += nums[i] === '1'? '1' : '0';\n  }\n  return str;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n    const max = (str) => {\n        if (str.length > 0) {\n            return str;\n        }\n    };\n    return strings.reduce((str, string) => {\n        if (string.length > max(str)) {\n            return string;\n        }\n    }, \"\");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (b === 0) return a;\n    else return greatestCommonDivisor(b, a % b);\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return string.split(' ').reduce((pre, cur) => {\n    return [...pre,...cur.split('/').reverse().map(p => p.slice(0, -1))]\n  }, []);\n}\n\nconst main = () => {\n  let prefixes = allPrefixes('abc/def/ghi');\n  for (let p of prefixes) {\n    console.log(p);\n  }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '',\n    i = n;\n  while (i--) {\n    s += n;\n  }\n  return s;\n};\n\n/*\n  >>> stringSequence(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  >>> stringSequence(19)\n  '0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    return string.replace(/\\S{2,}/g, (match) => {\n        return match.charCodeAt(0)\n    })\n}\n\nconst countChars = (string) => {\n    return string.replace(/\\S{2,}/g, 'x')\n}\n\nconst countSubstrings = (string) => {\n    return string.replace(/(.)\\1{3,}/g, (match) => {\n        return match.charCodeAt(0)\n    })\n}\n\n/* GivEn a string, fInd ouT hoW many distinCT chars are used, return their length\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctChars = (string) => {\n    return string.replace(/\\S{2,}/g, 'x')\n}\n\nconst countSubstringsLength = (string) => {\n    return string.replace(/(.)\\1{3,}/g, 'x')\n}\n\nconst countWords = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countLines = (string) => {\n    return string.replace(/\\n/g,'')\n}\n\nconst countLinesLength = (string) => {\n    return string.replace(/\\n/g,'')\n}\n\nconst countWordsPerLine = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWhitespaces = (string) => {\n    return string.replace(/\\s+/g,'')\n}\n\nconst countWhitespacesLength = (string) => {\n    return string.replace(/\\s+/g,'')\n}\n\nconst countWhitespacesPerLine = (string) => {\n    return string.replace(/\\s+/g,'')\n}\n\nconst countWhitespacesPerLineLength = (string) => {\n    return string.replace(/\\s+/g,'')\n}\n\nconst countSubstringsPerLine = (string) => {\n    return string.replace(/(.)\\1{3,}/g,'')\n}\n\nconst countSubstringsPerLineLength = (string) => {\n    return string.replace(/(.)\\1{3,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countSubstringsLength = (string) => {\n    return string.replace(/(.)\\1{3,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countSubstringsPerLineLength = (string) => {\n    return string.replace(/(.)\\1{3,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countLinesLength = (string) => {\n    return string.replace(/\\n/g,'')\n}\n\nconst countLinesLength = (string) => {\n    return string.replace(/\\n/g,'')\n}\n\nconst countWordsLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countCharsLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countDistinctCharsLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countDistinctCharactersLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countSubstringsLength = (string) => {\n    return string.replace(/(.)\\1{3,}/g,'')\n}\n\nconst countSubstringsPerLineLength = (string) => {\n    return string.replace(/(.)\\1{3,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countCharsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLineLength = (string) => {\n    return string.replace(/\\S{2,}/g,'')\n}\n\nconst countWordsPerLine"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = [];\n  let previous_note = null;\n\n  // check if the string is empty\n  if (music_string === undefined) {\n    return music_list;\n  }\n\n  // check if the string is not empty\n  if (music_string!== undefined && music_string!== '') {\n\n    // get the number of beats\n    let beats = 0;\n\n    // if there are three or more dots\n    if (music_string.indexOf('.') > -1) {\n      beats = 1;\n    }\n\n    // if there are two or more dots\n    if (music_string.indexOf('|') > -1) {\n      beats = 2;\n    }\n\n    // if there is one or more dots\n    if (music_string.indexOf('o') > -1) {\n      beats = 3;\n    }\n\n    // if there are no dots\n    if (music_string.indexOf('o') < 0) {\n      beats = 4;\n    }\n\n    // loop over the music_string\n    for (let i = 0; i < music_string.length; i++) {\n\n      // if the current character is a note\n      if (music_string.charAt(i) === 'o') {\n\n        // if it's the first note\n        if (previous_note === null) {\n          previous_note = i;\n          music_list.push(beats);\n          continue;\n        }\n\n        // if the current character is a space\n        if (music_string.charAt(i + 1) ==='') {\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === 'o') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === 'o|') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === 'o') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === 'o|') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === 'o') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === 'o') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '|') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === 'o') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === '|') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === 'o') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === 'o') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is half note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }\n\n          // if the previous note is quarter note\n          if (music_string.charAt(previous_note + 1) === '.') {\n            music_list.push(beats);\n          }"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  return string.split(substring).length - 1;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let result = '',\n    newNumbers = numbers.replace(/ /g, '').toLowerCase().split(''),\n    num = newNumbers[0],\n    i = 0,\n    j = 1;\n\n  while (i < newNumbers.length) {\n    if (newNumbers[i + 1] === 'zero') {\n      while (newNumbers[i + 1] === 'zero') {\n        i += 1;\n      }\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'one') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'two') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'three') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'four') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'five') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] ==='six') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] ==='seven') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'eight') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'nine') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'ten') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'eleven') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'twelve') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'thirteen') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'fourteen') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'fifteen') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] ==='sixteen') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] ==='seventeen') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'eighteen') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'nineteen') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'twenty') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'thirty') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'forty') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'fifty') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] ==='sixty') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] ==='seventy') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'eighty') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'ninety') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'one hundred') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'two hundred') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'thirty one') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers[i + 1] === 'three hundred') {\n      result = `${result} ${newNumbers[i]}`;\n      i += 1;\n    } else if (newNumbers"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const closestNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    let closestNumber = null\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[i] === numbers[j]) {\n        closestNumber = j\n        break\n      }\n    }\n    if (!closestNumber) {\n      closestNumbers.push(numbers[i])\n    } else {\n      closestNumbers.push(closestNumber)\n    }\n  }\n  return closestNumbers\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [1.0, 2.0, 2.2]\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [1.0, 2.0, 2.0]\n  */\nconst findClosestElements2 = (numbers) => {\n  const closestNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    let closestNumber = null\n    let closestDifference = Number.MAX_VALUE\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[i] === numbers[j]) {\n        closestNumber = j\n        break\n      }\n      const difference = Math.abs(numbers[i] - numbers[j])\n      if (difference < closestDifference) {\n        closestDifference = difference\n        closestNumber = j\n      }\n    }\n    if (!closestNumber) {\n      closestNumbers.push(numbers[i])\n    } else {\n      closestNumbers.push(closestNumber)\n    }\n  }\n  return closestNumbers\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  [1.0, 2.0, 2.2]\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  [1.0, 2.0, 2.0]\n  */\nconst findClosestElements3 = (numbers) => {\n  const closestNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    let closestNumber = null\n    let closestDifference = Number.MAX_VALUE\n    for (let j = 0; j < numbers.length; j++) {\n      if (numbers[i] === numbers[j]) {\n        closestNumber = j\n        break\n      }\n      const difference = Math.abs(numbers[i] - numbers[j])\n      if (difference < closestDifference) {\n        closestDifference = difference\n        closestNumber = j\n      }\n    }\n    if (!closestNumber) {\n      closestNumbers.push(numbers[i])\n    } else {\n      closestNumbers.push(closestNumber)\n    }\n  }\n  return closestNumbers\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    const unit = 1 / Math.max(Math.abs(numbers[0]), Math.abs(numbers[1]));\n    return numbers.map(number => number * unit);\n}\n\n// From: https://stackoverflow.com/questions/15262798/finding-the-median-of-an-array\nconst findMedian = (numbers) => {\n    let left = 0, right = numbers.length - 1, leftIndex = Math.floor((left + right) / 2),\n        current = numbers[leftIndex],\n        next = numbers[leftIndex + 1];\n    while (left < right) {\n        if (next < current) {\n            right = leftIndex;\n            current = next;\n        } else {\n            left = leftIndex + 1;\n            next = numbers[leftIndex + 1];\n        }\n        leftIndex = Math.floor((left + right) / 2);\n    }\n    return current;\n}\n\n// From: https://stackoverflow.com/questions/103913/how-do-i-sort-an-array-in-javascript-such-that-it-is-in-ascending-order\nconst sortedArray = (array) => {\n    let length = array.length;\n    while (length--) {\n        let current = array[length],\n            next = array[Math.floor(length / 2)];\n        if (current > next) {\n            array[length] = next;\n            array[Math.floor(length / 2)] = current;\n        }\n    }\n    return array;\n}\n\nexport default {\n    /**\n     *\n     * @param {Array} numbers - GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n     *                           suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n     * @returns {Array} - List of numbers which are the result of A liNear tRanSFoRm To thAT list,\n     *                    suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n     */\n    rescaleToUnit: rescaleToUnit,\n\n    /**\n     *\n     * @param {Array} numbers - GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n     *                           suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n     * @returns {Array} - List of numbers which are the result of A liNear tRanSFoRm To thAT list,\n     *                    suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n     */\n    findMedian: findMedian,\n\n    /**\n     *\n     * @param {Array} numbers - GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n     *                           suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n     * @returns {Array} - List of numbers which are the result of A liNear tRanSFoRm To thAT list,\n     *                    suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n     */\n    sortedArray: sortedArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number');\n};\n\nexport default filterIntegers;<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (string === undefined || string === null) return 0;\n  return string.length;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint\nconst fromCodePoint = (codePoint) => {\n  codePoint = parseInt(codePoint, 10);\n\n  if (codePoint > 0x10FFFF || codePoint < 0) return \"\";\n  if (codePoint <= 0xFFFF) return String.fromCharCode(codePoint);\n  if (codePoint <= 0x1FFFFF) return String.fromCharCode(codePoint >> 0x06 | 0x01E000);\n  if (codePoint <= 0x3FFFFFF) return String.fromCharCode(codePoint >> 0x0C | 0x01800);\n  if (codePoint <= 0x7FFFFFFF) return String.fromCharCode(codePoint >> 0x1C | 0x01C0);\n  return String.fromCharCode(codePoint >> 0x24 | 0x02D0);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\nconst codePointAt = (string, index) => {\n  index = Number(index);\n  if (typeof index!== \"number\" || index < 0 || index > string.length) return undefined;\n  return string.charCodeAt(index);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\nconst split = (string, separator) => {\n  if (typeof separator!== \"string\" || separator.length === 0) return [];\n  const result = [];\n  const stringLength = string.length;\n  let index = 0;\n  let last = -1;\n  let i = 0;\n  while (i < stringLength) {\n    if (string.charCodeAt(i) === separator.charCodeAt(0)) {\n      result.push(string.slice(last + 1, i));\n      last = i;\n    }\n    i++;\n  }\n  result.push(string.slice(last + 1, i));\n  return result;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\nconst startsWith = (string, searchString) => {\n  const searchStringLength = searchString.length;\n  const stringLength = string.length;\n  if (searchStringLength > stringLength) return false;\n  return string.indexOf(searchString) === 0;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nconst endsWith = (string, searchString) => {\n  const searchStringLength = searchString.length;\n  const stringLength = string.length;\n  if (searchStringLength > stringLength) return false;\n  return string.indexOf(searchString, stringLength - searchStringLength)!== -1;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nconst includes = (string, searchString) => {\n  return string.indexOf(searchString)!== -1;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\nconst codePointAt = (string, index) => {\n  index = Number(index);\n  if (typeof index!== \"number\" || index < 0 || index > string.length) return undefined;\n  return string.charCodeAt(index);\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt\nconst isWordBoundary = (char, nextChar) => {\n  if (char === \" \") return true;\n  if (char === \"\\n\") return true;\n  if (char === \"\\r\") return true;\n  if (char === \"\\t\") return true;\n  if (char === \"\\f\") return true;\n  if (char === \"\\v\") return true;\n  if (nextChar === \" \") return true;\n  if (nextChar === \"\\n\") return true;\n  if (nextChar === \"\\r\") return true;\n  if (nextChar === \"\\t\") return true;\n  if (nextChar === \"\\f\") return true;\n  if (nextChar === \"\\v\") return true;\n  return false;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nconst endsWith = (string, searchString) => {\n  const searchStringLength = searchString.length;\n  const stringLength = string.length;\n  if (searchStringLength > stringLength) return false;\n  return string.indexOf(searchString, stringLength - searchStringLength)!== -1;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nconst includes = (string, searchString) => {\n  return string.indexOf(searchString)!== -1;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\nconst startsWith = (string, searchString) => {\n  const searchStringLength = searchString.length;\n  const stringLength = string.length;\n  if (searchStringLength > stringLength) return false;\n  return string.indexOf(searchString) === 0;\n};\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\nconst startsWith = (string, searchString) => {\n  const searchStringLength = searchString.length;\n  const stringLength = string.length;\n  if (searchStringLength > stringLength) return false;\n  return string.indexOf(searchString) === 0"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const sqrt = Math.sqrt(n)\n  let l = 1\n  let r = n\n  while (r - l > 0) {\n    const mid = (l + r) / 2\n    if (mid * mid <= n) {\n      l = mid\n    } else {\n      r = mid\n    }\n  }\n  return l\n}\n\n/*\n  >>> largestDivisor(3)\n  3\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(25)\n  5\n  >>> largestDivisor(30)\n  10\n  >>> largestDivisor(60)\n  15\n  >>> largestDivisor(105)\n  21\n  >>> largestDivisor(210)\n  42\n  >>> largestDivisor(900)\n  45\n  >>> largestDivisor(1000)\n  50\n  >>> largestDivisor(5000)\n  100\n  >>> largestDivisor(10000)\n  101\n  >>> largestDivisor(1000000)\n  10001\n  >>> largestDivisor(1000000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  10001\n  >>> largestDivisor(1500000)\n  "}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [1]\n  for (let i = 2; i <= n; i++) {\n    let f = 1\n    for (let j = 1; j < i; j++) {\n      if (i % j === 0) {\n        f *= j\n      }\n    }\n    if (f > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = factorize(n)\n  let primeFactors = []\n  for (let i = 0; i < factors.length; i++) {\n    if (factors[i] > 1) {\n      primeFactors.push(factors[i])\n    }\n  }\n  return primeFactors\n}\n\nconst getPrimeFactors = (n) => {\n  const factors ="}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n\n// BEGIN\n\n/*\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniq = {};\n  const result = [];\n  const i = 0;\n  for (const number of numbers) {\n    if (uniq[number]) {\n      continue;\n    }\n    uniq[number] = 1;\n    result.push(number);\n  }\n  return result;\n};\n\n// END\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let l = string.length\n  let out = []\n  for (let i = 0; i < l; i++) {\n    out.push(string[i].toLowerCase())\n  }\n  return out.join('')\n}\n\n// Test flipCase()\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  >>> flipCase('Hi')\n  'hI'\n  >>> flipCase('HeLLo')\n  'HELLO'\n  >>> flipCase('Hi')\n  'HI'\n  >>> flipCase('Hi')\n  'HI'\n  >>> flipCase('Hi')\n  'HI'\n  */\nconst flipCaseTest = () => {\n  const string = ['Hello', 'Hi']\n  string.forEach(s => {\n    console.log(flipCase(s))\n  })\n}\n\n// Test flipCase()\n/*\n  >>> flipCaseTest()\n  'hELLO'\n  'HII'\n  'hI'\n  'HI'\n  'HIL'\n  'HIE'\n  'HIH'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  'HIL'\n  'HIE'\n  '"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let string = ''\n  strings.forEach((s) => {\n    string += s\n  })\n  return string\n}\n\n//------------------------------------------------------------------------------\n// END CONCATENATE\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// START INPUT\n//------------------------------------------------------------------------------\n\nconst input = (prompt, strings) => {\n  let string = ''\n  prompt()\n  strings.forEach((s) => {\n    string += s\n  })\n  return string\n}\n\n//------------------------------------------------------------------------------\n// END INPUT\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// START EXIT\n//------------------------------------------------------------------------------\n\nconst exit = () => {\n  process.exit()\n}\n\n//------------------------------------------------------------------------------\n// END EXIT\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// START MAIN\n//------------------------------------------------------------------------------\n\nconst main = () => {\n  console.log(concatenate(['hello', 'world']))\n  console.log(input('What is your name?', ['Michael', 'John', 'Jack']))\n  console.log(input('What is your age?', [23, 30, 18]))\n  console.log(input('What is your favorite color?', ['red', 'blue', 'orange']))\n  exit()\n}\n\n//------------------------------------------------------------------------------\n// END MAIN\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// START PROGRAM\n//------------------------------------------------------------------------------\n\nconst program = (strings) => {\n  main()\n}\n\n//------------------------------------------------------------------------------\n// END PROGRAM\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// START RUN\n//------------------------------------------------------------------------------\n\nconst run = (strings) => {\n  program(strings)\n}\n\n//------------------------------------------------------------------------------\n// END RUN\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// START MAIN\n//------------------------------------------------------------------------------\n\nconst main = () => {\n  run(['hello', 'world'])\n}\n\n//------------------------------------------------------------------------------\n// END MAIN\n//------------------------------------------------------------------------------\n\n//------------------------------------------------------------------------------\n// START RUN\n//------------------------------------------------------------------------------\n\nconst run = (strings) => {\n  main()\n}\n\n//------------------------------------------------------------------------------\n// END RUN\n//------------------------------------------------------------------------------\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(string => string.startsWith(prefix))\n}\n\n/*\n  >>> filterByPrefix([], 'a')\n  "}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(num => num > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -6, -2, -3, -9, -123, -1, 9, 0]\n  */\nconst getNegative = (l) => {\n  return l.filter(num => num < 0);\n};\n\n/*\n  >>> getOdd([-1, 2, -4, 5, 6])\n  [-1, 3, -2, 5, 7]\n  >>> getOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-1, 3, -2, 5, 7, 9, 123, 1]\n  */\nconst getOdd = (l) => {\n  return l.filter(num => isOdd(num));\n};\n\n/*\n  >>> getEven([-1, 2, -4, 5, 6])\n  []\n  >>> getEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  >>> getEven([-1, 2, -4, 5, 6, 7, 8])\n  [-1, 2, -4, 5, 6]\n  */\nconst getEven = (l) => {\n  return l.filter(num => isEven(num));\n};\n\n/*\n  >>> getAll([-1, 2, -4, 5, 6])\n  [-1, 2, -4, 5, 6]\n  >>> getAll([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, -5, 2, -3, 3, 9, 0, 123, 1]\n  >>> getAll([-1, 2, -4, 5, 6, 7, 8])\n  [-1, 2, -4, 5, 6, 7, 8]\n  */\nconst getAll = (l) => {\n  return l.slice(0);\n};\n\n/*\n  >>> getLast([-1, 2, -4, 5, 6])\n  6\n  >>> getLast([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  >>> getLast([-1, 2, -4, 5, 6, 7, 8])\n  8\n  */\nconst getLast = (l) => {\n  return l.slice(-1)[0];\n};\n\n/*\n  >>> getFirst([-1, 2, -4, 5, 6])\n  -1\n  >>> getFirst([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  >>> getFirst([-1, 2, -4, 5, 6, 7, 8])\n  -1\n  */\nconst getFirst = (l) => {\n  return l.slice(0, 1)[0];\n};\n\n/*\n  >>> getLength([-1, 2, -4, 5, 6])\n  5\n  >>> getLength([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  7\n  >>> getLength([-1, 2, -4, 5, 6, 7, 8])\n  6\n  */\nconst getLength = (l) => {\n  return l.length;\n};\n\n/*\n  >>> getSum([-1, 2, -4, 5, 6])\n  -1 + 2 - 4 + 5 + 6 = 20\n  >>> getSum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -1 + 2 - 4 + 5 + 6 + 9 + 123 + 1 + -10 = 120\n  >>> getSum([-1, 2, -4, 5, 6, 7, 8])\n  -1 + 2 - 4 + 5 + 6 + 7 + 8 = 21\n  */\nconst getSum = (l) => {\n  return l.reduce((sum, num) => sum + num, 0);\n};\n\n/*\n  >>> getMax([-1, 2, -4, 5, 6])\n  6\n  >>> getMax([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  >>> getMax([-1, 2, -4, 5, 6, 7, 8])\n  8\n  */\nconst getMax = (l) => {\n  return l.slice(-1)[0];\n};\n\n/*\n  >>> getMin([-1, 2, -4, 5, 6])\n  -1\n  >>> getMin([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  >>> getMin([-1, 2, -4, 5, 6, 7, 8])\n  -1\n  */\nconst getMin = (l) => {\n  return l.slice(0, 1)[0];\n};\n\n/*\n  >>> getMedian([-1, 2, -4, 5, 6])\n  4\n  >>> getMedian([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  6\n  >>> getMedian([-1, 2, -4, 5, 6, 7, 8])\n  5\n  */\nconst getMedian = (l) => {\n  return l.slice(l.length / 2 - 1).sort()[l.length / 2];\n};\n\nmodule.exports = {\n  getPositive,\n  getNegative,\n  getOdd,\n  getEven,\n  getAll,\n  getLast,\n  getFirst,"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  else if (n === 2) return true\n  else if (n % 2 === 0) return false\n  else if (n < 19) return true\n  else {\n    let i = 3\n    while (i * i <= n) {\n      if (n % i === 0) return false\n      i += 2\n    }\n    return true\n  }\n}\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// _____________________________________________________________________________\n\n// ________________________________________________________________"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  // Finds the smallest NON zero number\n  let i = xs.length - 1;\n  let x = xs[i];\n  while (x === 0) {\n    i--;\n    x = xs[i];\n  }\n  // Finds the largest coeffiCient\n  let largest = xs[0];\n  for (let i = 1; i < xs.length; i++) {\n    if (largest < xs[i]) {\n      largest = xs[i];\n    }\n  }\n  let x_ = x;\n  while (x_!== largest) {\n    x_--;\n  }\n  // Returns the smallest NON zero number\n  return x_;\n}\n\n/*\n  Find the roots of the polynomial\n  poly(x) = (a, b, c, d)\n  a, b, c, d are CoEfIcIENTs\n  */\nconst findRoots = (poly) => {\n  // Finds the non zero coeffiCient\n  let a = poly[0];\n  let b = poly[1];\n  let c = poly[2];\n  let d = poly[3];\n  let x = findZero([a, b, c, d]);\n  // Finds the number of roots\n  let n = xs.length - 1;\n  let xs = [];\n  while (x!== 0) {\n    xs.push(x);\n    x--;\n  }\n  return xs;\n}\n\n// Finds the roots of the polynomial\nconst findRoots2 = (poly) => {\n  let n = poly.length - 1;\n  let coefs = poly.slice(0, n);\n  let x = findZero(coefs);\n  let xs = [];\n  while (x!== 0) {\n    xs.push(x);\n    x--;\n  }\n  return xs;\n}\n\n/*\n  Evaluates the polynomial on x.\n  poly(x) = (a, b, c, d)\n  a, b, c, d are CoEfIcIENTs\n  */\nconst evaluatePoly = (poly) => {\n  return poly[0] + poly[1] * x + poly[2] * x * x + poly[3] * x * x * x;\n}\n\n// Finds the roots of the polynomial\nconst evaluatePoly2 = (poly) => {\n  let n = poly.length - 1;\n  let coefs = poly.slice(0, n);\n  let x = findZero(coefs);\n  let xs = [];\n  while (x!== 0) {\n    xs.push(x);\n    x--;\n  }\n  return xs;\n}\n\nconst polyToStr = (poly) => {\n  return `(${poly[0]}, ${poly[1]}, ${poly[2]}, ${poly[3]})`;\n}\n\n/*\n  Evaluates the polynomial on x.\n  poly(x) = (a, b, c, d)\n  a, b, c, d are CoEfIcIENTs\n  */\nconst polyToStr2 = (poly) => {\n  let n = poly.length - 1;\n  let coefs = poly.slice(0, n);\n  let x = findZero(coefs);\n  return `(${x}, ${poly[1]}, ${poly[2]}, ${poly[3]})`;\n}\n\n/*\n  Polynomial is a list of CoEfIcIENTs.\n  Returns a list of all roots of the polynomial.\n  */\nconst findRoots3 = (poly) => {\n  let polyStr = polyToStr(poly);\n  let polyStr2 = polyToStr2(poly);\n  console.log(`Polynomial is: ${polyStr}`);\n  console.log(`Polynomial is: ${polyStr2}`);\n  let coefs = poly.slice(0, poly.length - 1);\n  let polyList = polyToStr2(poly);\n  let xs = [];\n  for (let i = 0; i < polyList.length; i++) {\n    let x = findRoots(coefs);\n    xs.push(x);\n  }\n  return xs;\n}\n\nconst polyToStr3 = (poly) => {\n  let polyStr = polyToStr(poly);\n  let polyStr2 = polyToStr2(poly);\n  console.log(`Polynomial is: ${polyStr}`);\n  console.log(`Polynomial is: ${polyStr2}`);\n  let coefs = poly.slice(0, poly.length - 1);\n  let polyList = polyToStr2(poly);\n  let xs = [];\n  for (let i = 0; i < polyList.length; i++) {\n    let x = findRoots2(coefs"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const sorted = [...l.slice(0, -1),...l.slice(-1)];\n    const sortedLength = sorted.length;\n\n    for (let i = 0; i < sortedLength; i++) {\n        let last = i + 1;\n        let last2 = i + 2;\n        while (last < sortedLength && last2 < sortedLength) {\n            if (sorted[last] % 3 === sorted[last2] % 3) {\n                const diff = sorted[last] - sorted[last2];\n                if (diff > 2) {\n                    sorted[i] = sorted[i] + diff;\n                    last = last + 1;\n                    last2 = last2 + 1;\n                }\n            } else {\n                break;\n            }\n        }\n    }\n    return sorted;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n    return new Set(l).values();\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n    const sorted = l.slice().sort();\n    let element = sorted[0];\n    for (let i = 1; i < sorted.length; i++) {\n        if (sorted[i] > element) {\n            element = sorted[i];\n        }\n    }\n    return element;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let fizzBuzzNumbers = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      fizzBuzzNumbers.push(`FizzBuzz`)\n    } else if (i % 3 === 0) {\n      fizzBuzzNumbers.push(`Fizz`)\n    } else if (i % 5 === 0) {\n      fizzBuzzNumbers.push(`Buzz`)\n    } else if (i % 3 === 0 || i % 5 === 0) {\n      fizzBuzzNumbers.push(i)\n    } else {\n      fizzBuzzNumbers.push(`${i}`)\n    }\n  }\n  return fizzBuzzNumbers\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let result = [];\n  let len = l.length;\n  let i = 0;\n  while (i < len) {\n    if (l[i] % 2 === 0) {\n      result.push(l[i]);\n    }\n    i++;\n  }\n  return result;\n};\n\nexport {\n  sortEven,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const nGroups = s.length / 3;\n  const groups = [];\n  for (let i = 0; i < nGroups; i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  retUns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclicU = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclicU = (s) => {\n  const nGroups = s.length / 3;\n  const groups = [];\n  for (let i = 0; i < nGroups; i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  retUns EncodEd sTring By cyclic groups of tHreE charActERs.\n  */\nCoNst encodeCyclicUR = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclicUR = (s) => {\n  const nGroups = s.length / 3;\n  const groups = [];\n  for (let i = 0; i < nGroups; i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Convenience method for making a string of a given length,\n  with a given number of charcters per group.\n  */\nsLit(l, n) {\n  return Array(l).fill().join('') + Array(n - l).fill('0').join('');\n}\n\n/*\n  Given a string of length N, and a number of characters per group,\n  returns a string of length N, with a given number of groups,\n  each with a given number of characters.\n  */\nrLit(n, l, nGroups, lGroups) {\n  return nGroups * lGroups + Array(n - nGroups * l).fill('0').join('') + Array(n - nGroups * l - 1).fill('0').join('');\n}\n\n/*\n  Given a string of length N, and a number of groups, and a number\n  of characters per group, returns a string of length N, with\n  a given number of characters in each group.\n  */\nnLit(n, lGroups, l) {\n  return n * lGroups + Array(n - 1).fill('0').join('');\n}\n\n/*\n  Given a string of length N, and a number of groups, and a number\n  of characters per group, returns a string of length N, with\n  a given number of groups, each with a given number of characters.\n  */\nlLit(n, nGroups, l) {\n  return nGroups * l + Array(n - nGroups).fill('0').join('');\n}\n\n/*\n  Given a string of length N, and a number of groups, and a number\n  of characters per group, returns a string of length N, with\n  a given number of groups, each with a given number of characters,\n  and a given number of characters per group.\n  */\nLLit(n, nGroups, lGroups, l) {\n  return nGroups * lGroups * l + Array(n - nGroups * lGroups - 1).fill('0').join('');\n}\n\n/*\n  Given a string of length N, and a number of groups, and a number\n  of characters per group, returns a string of length N, with\n  a given number of groups, each with a given number of characters,\n  and a given number of characters per group"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let fib = 2;\n    let fib2 = 3;\n    let fib3 = 5;\n    let prime = 2;\n\n    for (let i = 2; i < n; i++) {\n        if (fib2 % 2 === 0) {\n            fib2 = fib2 * 2 + fib;\n            prime = prime * fib2;\n        }\n        fib = fib * fib2;\n    }\n\n    return prime;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let i = 1\n  while (i <= l.length) {\n    let s = l[i - 1]\n    let j = i + 1\n    while (j <= l.length) {\n      if (s === 0) {\n        return true\n      }\n      s += l[j - 1]\n      if (s === 0) {\n        return true\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let i = 1\n  while (i <= l.length) {\n    let s = l[i - 1]\n    let j = i + 1\n    while (j <= l.length) {\n      if (s === 0) {\n        return true\n      }\n      s += l[j - 1]\n      if (s === 1) {\n        return true\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let i = 1\n  while (i <= l.length) {\n    let s = l[i - 1]\n    let j = i + 1\n    while (j <= l.length) {\n      if (s === 0) {\n        return true\n      }\n      s += l[j - 1]\n      if (s === 2) {\n        return true\n      }\n      j += 1\n    }\n    i += 1\n  }\n  return false\n}\n\nconst sumToZero = (l) => {\n  return (l.filter((x) => x === 0).length > 0)\n}\n\nconst sumToOne = (l) => {\n  return (l.filter((x) => x === 1).length > 0)\n}\n\nconst sumToTwo = (l) => {\n  return (l.filter((x) => x === 2).length > 0)\n}\n\nmodule.exports = {\n  triplesSumToZero,\n  sumToZero,\n  sumToOne,\n  sumToTwo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  let carRacing = carRace();\n  let cars = [];\n  let car1 = { x: 0, y: 0, speed: 1, color: 'green' };\n  let car2 = { x: 10, y: 0, speed: 1, color:'red' };\n  let car3 = { x: 0, y: 10, speed: 1, color: 'yellow' };\n  cars.push(car1);\n  cars.push(car2);\n  cars.push(car3);\n  let car = carRacing(cars);\n  return car;\n};\n\nlet carRace = () => {\n  let cars = [];\n  let car1 = { x: 0, y: 0, speed: 1, color: 'green' };\n  let car2 = { x: 10, y: 0, speed: 1, color:'red' };\n  let car3 = { x: 0, y: 10, speed: 1, color: 'yellow' };\n  cars.push(car1);\n  cars.push(car2);\n  cars.push(car3);\n  let car = cars.shift();\n  return car;\n};\n\nlet carRace = () => {\n  let cars = [];\n  let car1 = { x: 0, y: 0, speed: 1, color: 'green' };\n  let car2 = { x: 10, y: 0, speed: 1, color:'red' };\n  let car3 = { x: 0, y: 10, speed: 1, color: 'yellow' };\n  cars.push(car1);\n  cars.push(car2);\n  cars.push(car3);\n  let car = cars.shift();\n  return car;\n};\n\n// let carRace = () => {\n//   let cars = [];\n//   cars.push({ x: 0, y: 0, speed: 1, color: 'green' });\n//   cars.push({ x: 10, y: 0, speed: 1, color:'red' });\n//   cars.push({ x: 0, y: 10, speed: 1, color: 'yellow' });\n//   let car = cars.shift();\n//   return car;\n// };\n\n// let carRace = () => {\n//   let cars = [];\n//   cars.push({ x: 0, y: 0, speed: 1, color: 'green' });\n//   cars.push({ x: 10, y: 0, speed: 1, color:'red' });\n//   cars.push({ x: 0, y: 10, speed: 1, color: 'yellow' });\n//   let car = cars.shift();\n//   return car;\n// };\n\n// let carRace = () => {\n//   let cars = [];\n//   cars.push({ x: 0, y: 0, speed: 1, color: 'green' });\n//   cars.push({ x: 10, y: 0, speed: 1, color:'red' });\n//   cars.push({ x: 0, y: 10, speed: 1, color: 'yellow' });\n//   let car = cars.shift();\n//   return car;\n// };\n\n// let carRace = () => {\n//   let cars = [];\n//   cars.push({ x: 0, y: 0, speed: 1, color: 'green' });\n//   cars.push({ x: 10, y: 0, speed: 1, color:'red' });\n//   cars.push({ x: 0, y: 10, speed: 1, color: 'yellow' });\n//   cars.push({ x: 10, y: 10, speed: 1, color: 'blue' });\n//   cars.push({ x: 20, y: 0, speed: 1, color:'red' });\n//   cars.push({ x: 20, y: 10, speed: 1, color: 'blue' });\n//   cars.push({ x: 30, y: 10, speed: 1, color: 'yellow' });\n//   cars.push({ x: 30, y: 20, speed: 1, color: 'green' });\n//   cars.push({ x: 40, y: 10, speed: 1, color: 'yellow' });\n//   cars.push({ x: 40, y: 20, speed: 1, color:'red' });\n//   cars.push({ x: 50, y: 20, speed: 1, color: 'blue' });\n//   cars.push({ x: 60, y: 10, speed: 1, color: 'yellow' });\n//   cars.push({ x: 60, y: 20, speed: 1, color: 'green' });\n//   cars.push({ x: 70, y: 20, speed: 1, color: 'blue' });\n//   cars.push({ x: 80, y: 10, speed: 1, color: 'yellow' });\n//   cars.push({ x: 80, y: 20, speed: 1, color:'red' });\n//   cars.push({ x: 90, y: 20, speed: 1, color: 'green' });\n//   cars.push({ x: 100, y: 20, speed: 1, color: 'blue' });\n//   let car = cars.shift();\n//   return car;\n// };\n\n// let carRace = () => {\n//   let cars = [];\n//   cars.push({ x: 0, y"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const tailInc = (tail, idx) => tail[idx] = tail[idx] + 1\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(tailInc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n\n/*\n  # RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const [head,...tail] = l\n  const inc = (n, idx) => (n + 1) + idx\n  return [head,...tail.map(inc)]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    const result = [];\n    const numberOfPairs = l.length;\n    for (let i = 0; i < numberOfPairs; i += 2) {\n        const x = l[i];\n        const y = l[i + 1];\n        if (x + y === 0) {\n            result.push([x, y]);\n        }\n    }\n    return result.length === 0;\n};\n\nconsole.log(pairsSumToZero([1, 3, 5, 0]));\nconsole.log(pairsSumToZero([1, 3, -2, 1]));\nconsole.log(pairsSumToZero([1, 2, 3, 7]));\nconsole.log(pairsSumToZero([2, 4, -5, 3, 5, 7]));\nconsole.log(pairsSumToZero([1]));\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const xInt = x.toString(base).replace(/^0*(.*)$/, '$1').length;\n  const xN = xInt - (xInt % base);\n  return xN.toString(base);\n};\n\n/*\n  Change the number into a string, by dividing the number into a\n  sequence of digits, each one of the base.\n  >>> changeDigits(12345, 5)\n  '1200000'\n  >>> changeDigits(12345, 8)\n  '00012345'\n  >>> changeDigits(12345, 2)\n  '1111111'\n  >>> changeDigits(12345, 10)\n  '000000000000012345'\n  >>> changeDigits(12345, 16)\n  '50000000'\n  */\nconst changeDigits = (x, base) => {\n  const xInt = x.toString(base).replace(/^0*(.*)$/, '$1').length;\n  const xN = xInt - (xInt % base);\n  return xN.toString(base);\n};\n\nconst numberToBase = (x, base) => {\n  const xInt = x.toString(base).replace(/^0*(.*)$/, '$1').length;\n  const xN = xInt - (xInt % base);\n  return xN.toString(base);\n};\n\nconst convertBase = (x, base) => {\n  if (x === 0) {\n    return '0';\n  }\n  let xN = x;\n  const xInt = xN.toString(base).replace(/^0*(.*)$/, '$1').length;\n  xN = xN - (xN % base);\n  while (xN!== 0) {\n    xN = xN.toString(base);\n    xInt += 1;\n  }\n  return xInt.toString(base);\n};\n\nconst convertBaseToBase = (x, baseFrom, baseTo) => {\n  const xN = x.toString(baseFrom).replace(/^0*(.*)$/, '$1').length;\n  xN = xN - (xN % baseFrom);\n  return xN.toString(baseTo);\n};\n\nconst convertBaseToDigits = (x, base) => {\n  if (x === 0) {\n    return '0';\n  }\n  const xN = x.toString(base).replace(/^0*(.*)$/, '$1').length;\n  xN = xN - (xN % base);\n  while (xN!== 0) {\n    xN = xN.toString(base);\n    xN = xN.substring(1);\n  }\n  return xN;\n};\n\nconst convertDigitsToBase = (x, base) => {\n  if (x === 0) {\n    return '0';\n  }\n  const xN = x.toString(base).replace(/^0*(.*)$/, '$1').length;\n  xN = xN - (xN % base);\n  while (xN!== 0) {\n    xN = xN.toString(base);\n    xN = xN.substring(1);\n  }\n  return xN;\n};\n\nconst convertDigitsToBaseFromBase = (x, baseFrom, baseTo) => {\n  const xN = x.toString(baseFrom).replace(/^0*(.*)$/, '$1').length;\n  xN = xN - (xN % baseFrom);\n  while (xN!== 0) {\n    xN = xN.toString(baseTo);\n    xN = xN.substring(1);\n  }\n  return xN;\n};\n\nconst isNumber = (x) => typeof x === 'number' &&!isNaN(x);\n\nmodule.exports = {\n  changeBase,\n  changeDigits,\n  convertBase,\n  convertBaseToBase,\n  convertBaseToDigits,\n  convertDigitsToBase,\n  convertDigitsToBaseFromBase,\n  isNumber,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n};\n\n/* __________________________________________ */\n\nconst triangleArea = (a, h) => {\n  return a * h / 2;"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n <= 1) {\n        return n;\n    } else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n};\n\nexport { fib4 };\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let total = 0,\n    counter = 0,\n    i = 0,\n    j = 0,\n    k = 0;\n  let sum = 0;\n  if (!l) return undefined;\n  l.sort((a, b) => {\n    return a - b;\n  });\n  for (i = 0; i < l.length; i += 1) {\n    total += l[i];\n  }\n  if (l.length % 2) {\n    return (total + l[l.length / 2]) / 2;\n  }\n  for (i = 0; i < l.length / 2; i += 1) {\n    sum += l[i];\n  }\n  for (i = 0; i < l.length; i += 1) {\n    if (sum + l[i] > total) {\n      k = i;\n      break;\n    }\n  }\n  return (sum + l[k]) / 2;\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    text = text.toString().toLowerCase();\n    let s = new Set(text);\n    return (text.length % 2) === 0 && text.length === s.size;\n};\n\n/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('abc')\n  false\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcdefg')\n  true\n  */\nconst isPalindrome = (text) => {\n    let s = new Set(text);\n    let count = 0;\n    for (let i = 0; i < text.length / 2; i++) {\n        if (text[i]!== text[text.length - 1 - i]) {\n            count++;\n        }\n    }\n    return count === 0;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let t = n;\n  while (t % p!== 0) {\n    t = t / p;\n  }\n  return t;\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nexport const modp = (n, p) => {\n  let t = n;\n  while (t % p!== 0) {\n    t = t / p;\n  }\n  return t;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  const codes = s.split(\"\");\n  let returnString = \"\";\n  codes.forEach(code => {\n    returnString += String.fromCharCode(\n      (((code.charCodeAt(0) - 5) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  });\n  return returnString;\n}\n\nconst encode = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decode = (s) => {\n  const codes = s.split(\"\");\n  let returnString = \"\";\n  codes.forEach(code => {\n    returnString += String.fromCharCode(\n      (((code.charCodeAt(0) - \"a\".charCodeAt(0)) - 5) % 26) + \"a\".charCodeAt(0)\n    );\n  });\n  return returnString;\n}\n\n/*\n  takes inPut eNcODed stRiNG with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeEncode = (s) => {\n  const codes = s.split(\"\");\n  let returnString = \"\";\n  codes.forEach(code => {\n    returnString += String.fromCharCode(\n      (((code.charCodeAt(0) - \"a\".charCodeAt(0)) - 5) % 26) + \"a\".charCodeAt(0)\n    );\n  });\n  return returnString;\n}\n\n/*\n  Takes as inPut stRiNG eNcODed with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nconst decodeEncodeDecode = (s) => {\n  const codes = s.split(\"\");\n  let returnString = \"\";\n  codes.forEach(code => {\n    returnString += String.fromCharCode(\n      (((code.charCodeAt(0) - \"a\".charCodeAt(0)) - 5) % 26) + \"a\".charCodeAt(0)\n    );\n  });\n  return returnString;\n}\n\nconst main = () => {\n  let inp = encode(\"abcdefgABCDEFG\");\n  let out = decode(inp);\n  console.log(inp);\n  console.log(out);\n\n  inp = encode(\"abcdefgABCDEFG\");\n  out = decodeEncode(inp);\n  console.log(inp);\n  console.log(out);\n\n  inp = encode(\"abcdefgABCDEFG\");\n  out = decodeEncodeDecode(inp);\n  console.log(inp);\n  console.log(out);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(/[^a-zA-Z]+/g, '');\n};\n\n// test\n\nconst removeVowelsTest = removeVowels('');\nconsole.log(removeVowelsTest);\n\nconst removeVowelsTest2 = removeVowels(\"abcdef\\nghijklm\");\nconsole.log(removeVowelsTest2);\n\nconst removeVowelsTest3 = removeVowels('abcdef');\nconsole.log(removeVowelsTest3);\n\nconst removeVowelsTest4 = removeVowels('aaaaa');\nconsole.log(removeVowelsTest4);\n\nconst removeVowelsTest5 = removeVowels('aaBAA');\nconsole.log(removeVowelsTest5);\n\nconst removeVowelsTest6 = removeVowels('zbcd');\nconsole.log(removeVowelsTest6);\n\nconst removeVowelsTest7 = removeVowels('zmMz');\nconsole.log(removeVowelsTest7);\n\n// END\n\n// console.log(removeVowelsTest7);\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const len = l.length;\n  const threshold = t;\n  if (len <= threshold) return false;\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= threshold) return false;\n  }\n  return true;\n};\n\n/*\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nexport const belowThreshold2 = (l, t) => {\n  const len = l.length;\n  const threshold = t;\n  if (len <= threshold) return false;\n  for (let i = 0; i < len; i++) {\n    if (l[i] <= threshold) return false;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const result = x + y;\n  if (result === x) {\n    return y;\n  }\n  return result;\n};\n\n/*\n  Add tWo nuM"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0Arr = s0.split('')\n    const s1Arr = s1.split('')\n    return s0Arr.every((char, index) => {\n        return s1Arr.indexOf(char)!== -1\n    })\n}\n\nexport default {\n    getAll: getAll,\n    getNumber: getNumber,\n    getName: getName,\n    getLast: getLast,\n    getFirst: getFirst,\n    getChar: getChar,\n    getWord: getWord,\n    getLine: getLine,\n    getString: getString,\n    getNum: getNum,\n    getNumS: getNumS,\n    getWordS: getWordS,\n    getLineS: getLineS,\n    getStringS: getStringS,\n    getWordFirst: getWordFirst,\n    getLineFirst: getLineFirst,\n    getStringFirst: getStringFirst,\n    getWordLast: getWordLast,\n    getLineLast: getLineLast,\n    getStringLast: getStringLast,\n    getWordBetween: getWordBetween,\n    getLineBetween: getLineBetween,\n    getStringBetween: getStringBetween,\n    getWordBetweenN: getWordBetweenN,\n    getLineBetweenN: getLineBetweenN,\n    getStringBetweenN: getStringBetweenN,\n    getWordBetweenN2: getWordBetweenN2,\n    getLineBetweenN2: getLineBetweenN2,\n    getStringBetweenN2: getStringBetweenN2,\n    getWordsBetween: getWordsBetween,\n    getLinesBetween: getLinesBetween,\n    getStringsBetween: getStringsBetween,\n    getWordsBetweenN: getWordsBetweenN,\n    getLinesBetweenN: getLinesBetweenN,\n    getStringsBetweenN: getStringsBetweenN,\n    getWordsBetweenN2: getWordsBetweenN2,\n    getLinesBetweenN2: getLinesBetweenN2,\n    getStringsBetweenN2: getStringsBetweenN2,\n    getWordBetweenByWord: getWordBetweenByWord,\n    getLineBetweenByWord: getLineBetweenByWord,\n    getStringBetweenByWord: getStringBetweenByWord,\n    getWordsBetweenByWord: getWordsBetweenByWord,\n    getLinesBetweenByWord: getLinesBetweenByWord,\n    getStringsBetweenByWord: getStringsBetweenByWord,\n    getWordBetweenNByWord: getWordBetweenNByWord,\n    getLineBetweenNByWord: getLineBetweenNByWord,\n    getStringBetweenNByWord: getStringBetweenNByWord,\n    getWordsBetweenNByWord: getWordsBetweenNByWord,\n    getLinesBetweenNByWord: getLinesBetweenNByWord,\n    getStringsBetweenNByWord: getStringsBetweenNByWord,\n    getWordBetweenN2ByWord: getWordBetweenN2ByWord,\n    getLineBetweenN2ByWord: getLineBetweenN2ByWord,\n    getStringBetweenN2ByWord: getStringBetweenN2ByWord,\n    getWordsBetweenN2ByWord: getWordsBetweenN2ByWord,\n    getLinesBetweenN2ByWord: getLinesBetweenN2ByWord,\n    getStringsBetweenN2ByWord: getStringsBetweenN2ByWord,\n    getWordBetweenN3ByWord: getWordBetweenN3ByWord,\n    getLineBetweenN3ByWord: getLineBetweenN3ByWord,\n    getStringBetweenN3ByWord: getStringBetweenN3ByWord,\n    getWordsBetweenN3ByWord: getWordsBetweenN3ByWord,\n    getLinesBetweenN3ByWord: getLinesBetweenN3ByWord,\n    getStringsBetweenN3ByWord: getStringsBetweenN3ByWord,\n    getWordBetweenN4ByWord: getWordBetweenN4ByWord,\n    getLineBetweenN4ByWord: getLineBetweenN4ByWord,\n    getStringBetweenN4ByWord: getStringBetweenN4ByWord,\n    getWordsBetweenN4ByWord: getWordsBetweenN4ByWord,\n    getLinesBetweenN4ByWord: getLinesBetweenN4ByWord,\n    getStringsBetweenN4ByWord: getStringsBetweenN4ByWord,\n    getWordBetweenN5ByWord: getWordBetweenN5ByWord,\n    getLineBetweenN5ByWord: getLineBetweenN5ByWord,\n    getStringBetweenN5ByWord: getStringBetweenN5ByWord,\n    getWordsBetweenN5ByWord: getWordsBetweenN5ByWord,\n    getLinesBetweenN5ByWord: getLinesBetweenN5ByWord,\n    getStringsBetweenN5ByWord: getStringsBetweenN5ByWord,\n    getWordBetweenN6ByWord: getWordBetweenN6ByWord,\n    getLineBetweenN6ByWord: getLineBetweenN6ByWord,\n    getStringBetweenN6ByWord: getStringBetweenN6ByWord,\n    getWordsBetweenN6ByWord: getWordsBetweenN6ByWord,\n    getLinesBetweenN6ByWord: getLinesBetweenN6ByWord,\n    getStringsBetweenN6ByWord: getStringsBetweenN6ByWord,\n    getWordBetweenN7ByWord: getWordBetweenN7ByWord,\n    getLineBetweenN7ByWord: getLineBetweenN7ByWord,\n    getStringBetweenN7ByWord: getStringBetweenN7ByWord,\n    getWordsBetweenN7ByWord: getWordsBetweenN7ByWord,\n    getLinesBetweenN7ByWord: getLinesBetweenN7ByWord,\n    getStringsBetweenN7ByWord: getStringsBetweenN7ByWord,\n    getWordBetweenN8ByWord: getWordBetweenN8ByWord,\n    "}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const p = 0\n  const q = 1\n  const a = 1\n  const b = 1\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n  if (n === 3) {\n    return 2\n  }\n  if (n === 4) {\n    return 3\n  }\n  if (n === 5) {\n    return 5\n  }\n  if (n === 6) {\n    return 8\n  }\n  if (n === 7) {\n    return 13\n  }\n  if (n === 8) {\n    return 21\n  }\n  if (n === 9) {\n    return 34\n  }\n  if (n === 10) {\n    return 55\n  }\n  let sum = 0\n  let x = p\n  let y = q\n  while (n > 1) {\n    sum += x\n    x = (p + q)\n    y = x - y\n    p = q\n    q = x\n    n -= 1\n  }\n  return sum + y\n}\n\n/*\n  Let's try to understand the output of fibonacci in a more explicit way.\n  \n  >>> fib(1)\n  1\n  >>> fib(2)\n  1\n  >>> fib(3)\n  2\n  >>> fib(4)\n  3\n  >>> fib(5)\n  5\n  >>> fib(6)\n  8\n  >>> fib(7)\n  13\n  >>> fib(8)\n  21\n  >>> fib(9)\n  34\n  >>> fib(10)\n  55\n  \n  That's all.\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const isBracket = brackets.split(\"\").forEach(char => {\n    return char === \">\"? true : false;\n  });\n  return isBracket.every((isBracket) => {\n    return isBracket;\n  });\n}\n\nexport default {\n  correctBracketing\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const len = l.length\n  if (len <= 1) {\n    return true\n  }\n  for (let i = 1; i < len; i++) {\n    if (l[i - 1] >= l[i]) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let count = 0;\n  const min = l1[0];\n  const max = l2[0];\n  const len = Math.min(l1.length, l2.length);\n  for (let i = 0; i < len; i++) {\n    if (l1[i] === l2[i]) count++;\n  }\n  return count === 0? [] : [min, max];\n};\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 4])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2, 5, 4, 7])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 4])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8, 1, 5, 4, 7, 653], [3, 2, 5, 4, 7])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 4])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2, 5, 4, 7])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 4])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 4, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653, 7], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653, 7], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653, 7, 653], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653, 7, 653], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7, 653, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653, 7, 653], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7, 653, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653, 7, 653, 653], [5, 7, 1, 5, 9, 653, 121, 4, 653, 7, 653])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 4, 653, 7, 653, 653, 4"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n <= 1) {\n    return n\n  }\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      const max = Math.max(...factors)\n      if (max < n) {\n        factors.push(n / max)\n      }\n    }\n  }\n  return n === 1? factors[0] : factors.sort((a, b) => a - b)[0]\n}\n\n/*\n  # RetuRn the Least prime factor of n. AssuMe n > 1 and is not prime.\n  >>> leastPrimeFactor(13195)\n  29\n  >>> leastPrimeFactor(2048)\n  2\n  */\nconst leastPrimeFactor = (n) => {\n  if (n <= 1) {\n    return n\n  }\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      const min = Math.min(...factors)\n      if (min < n) {\n        factors.push(n / min)\n      }\n    }\n  }\n  return n === 1? factors[0] : factors.sort((a, b) => a - b)[0]\n}\n\n/*\n  # RetuRn the nth prime factor of n. AssuMe n > 1 and is not prime.\n  >>> primeFactor(13195)\n  29\n  >>> primeFactor(2048)\n  2\n  */\nconst primeFactor = (n) => {\n  if (n <= 1) {\n    return n\n  }\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      const max = Math.max(...factors)\n      if (max < n) {\n        factors.push(n / max)\n      }\n    }\n  }\n  return n === 1? factors[0] : factors.sort((a, b) => a - b)[0]\n}\n\n/*\n  # RetuRn the nth prime factor of n. AssuMe n > 1 and is not prime.\n  >>> primeFactor(13195)\n  29\n  >>> primeFactor(2048)\n  2\n  */\nconst factor = (n) => {\n  if (n <= 1) {\n    return n\n  }\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      const max = Math.max(...factors)\n      if (max < n) {\n        factors.push(n / max)\n      }\n    }\n  }\n  return n === 1? factors[0] : factors.sort((a, b) => a - b)[0]\n}\n\n/*\n  # RetuRn the prime factor of n. AssuMe n > 1 and is not prime.\n  >>> primeFactor(13195)\n  29\n  >>> primeFactor(2048)\n  2\n  */\nconst prime = (n) => {\n  if (n <= 1) {\n    return n\n  }\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return n === 1? factors[0] : factors.sort((a, b) => a - b)[0]\n}\n\n/*\n  # RetuRn the prime factor of n. AssuMe n > 1 and is not prime.\n  >>> primeFactor(13195)\n  29\n  >>> primeFactor(2048)\n  2\n  */\nconst factorPrime = (n) => {\n  if (n <= 1) {\n    return n\n  }\n  const factors = []\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n    }\n  }\n  return n === 1? factors[0] : factors.sort((a, b) => a - b)[0]\n}\n\nexport {\n  prime,\n  primeFactor,\n  factor,\n  factorPrime,\n  isPrime,\n  largestPrimeFactor,\n  leastPrimeFactor,\n  largestPrime,\n  leastPrime,\n  primeFactor\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\nconsole.log(sumToN(30)); //465\nconsole.log(sumToN(100)); //5050\nconsole.log(sumToN(5)); //15\nconsole.log(sumToN(10)); //55\nconsole.log(sumToN(1)); //1\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let stack = [];\n    for(let i=0; i<brackets.length; i++) {\n        if(brackets[i] === \"(\" ) {\n            stack.push(\"(\");\n        }\n        else if(brackets[i] === \")\") {\n            if(stack.length === 0) {\n                return false;\n            }\n            else if(stack[stack.length - 1] === \"(\" ) {\n                stack.pop();\n            }\n            else {\n                return false;\n            }\n        }\n    }\n    return stack.length === 0;\n};\n\nexport default correctBracketing;<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    if (xs.length === 1) {\n        return xs[0];\n    }\n    let acc = 0;\n    for (let i = 0; i < xs.length - 1; i++) {\n        acc += xs[i] * i;\n    }\n    return acc;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if(n === 0)\n    return 0\n  if(n === 1)\n    return 0\n  if(n === 2)\n    return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\n\nconst fibfib_iter = (n) => {\n  let i = 0, sum = 0\n  while(i < n) {\n    sum += fibfib(i)\n    i += 1\n  }\n  return sum\n}\n\nconsole.log(fibfib(5))\nconsole.log(fibfib_iter(5))\n\n// The fibonacci sequence is defined as the sequence of numbers which are multiples of fibonacci numbers.\n// The first few numbers are:\n// 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n// It's also called the golden sequence, as well as the phi sequence.\n// The phi sequence is the number of natural numbers (1 to n) whose square root exists.\n// The phi sequence is:\n// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n// If we take the square root of any number, it turns out that the number we get is always a perfect\n// square. For example, the square root of 16 is 4, because 4**2 = 16.\n// So, the square root of every number in the Fibonacci sequence is also a perfect square.\n// However, this is not true for all numbers in the Fibonacci sequence. For example,\n// the square root of 67 is 5.7, not a perfect square.\n// The smallest number that is not a perfect square, is 1776.\n// Let us write a function that takes an integer n and returns the largest integer x such that\n// x is a perfect square.\nconst find_largest_perfect_square = (n) => {\n  const sqrt = Math.sqrt(n)\n  const num = n - sqrt**2\n  if(num <= 1)\n    return n\n  const max_sqrt = sqrt + 1\n  return find_largest_perfect_square(num)\n}\n\nconsole.log(find_largest_perfect_square(1776))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowelCount = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      vowelCount++;\n    }\n  }\n  return vowelCount;\n};\n\nexport default vowelsCount;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let s = \"\"\n  while (x > 0) {\n    s = (x % 10).toString() + s\n    x = Math.floor(x / 10)\n  }\n  return (x > 0 && shift > x)? s.slice(1) : s\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c >= \"A\" && c <= \"Z\") {\n            sum += c.charCodeAt(0) - 65;\n        } else if (c >= \"a\" && c <= \"z\") {\n            sum += c.charCodeAt(0) - 97;\n        } else if (c >= \"0\" && c <= \"9\") {\n            sum += c.charCodeAt(0) - 48;\n        }\n    }\n    return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the length of the string\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 2\n      digitSum(\"abcCd\") => 5\n      digitSum(\"helloE\") => 4\n      digitSum(\"woArBld\") => 7\n      digitSum(\"aAaaaXa\") => 3\n  */\nconst length = (s) => {\n    return s.length;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the number of upper chaRACters only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 2\n      digitSum(\"woArBld\") => 3\n      digitSum(\"aAaaaXa\") => 2\n  */\nconst charCount = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c >= \"A\" && c <= \"Z\") {\n            sum += 1;\n        } else if (c >= \"a\" && c <= \"z\") {\n            sum += 1;\n        } else if (c >= \"0\" && c <= \"9\") {\n            sum += 1;\n        }\n    }\n    return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the number of lower chaRACters only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 2\n  */\nconst lowerCase = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c >= \"a\" && c <= \"z\") {\n            sum += 1;\n        }\n    }\n    return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the number of upper chaRACters only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 2\n      digitSum(\"woArBld\") => 3\n      digitSum(\"aAaaaXa\") => 2\n  */\nconst upperCase = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c >= \"A\" && c <= \"Z\") {\n            sum += 1;\n        }\n    }\n    return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the sum of the ASCII codes of all the\n  upper chaRACters.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst sum = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (c >= \"A\" && c <= \"Z\") {\n            sum += c.charCodeAt(0);\n        }\n    }\n    return sum;\n};\n\nconst testString = \"\";\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the number of lower chaRACters only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 1\n      digitSum(\"woArBld\") => 1\n      digitSum(\"aAaaaXa\") => 2\n  */\nconst testLength = (s) => {\n    return length(s);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the number of upper chaRACters only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 1\n      digitSum(\"abcCd\") => 1\n      digitSum(\"helloE\") => 2\n      digitSum(\"woArBld\") => 3\n      digitSum(\"aAaaaXa\") => 2\n  */\nconst testCharCount = (s) => {\n    return charCount(s);\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return the sum of the ASCII codes of all the\n  upper chaRACters.\n\n  Examples:\n      digitSum(\"\") => 0\n      digit"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  const oranges = n || 0\n  const apples = n - oranges\n  const total = n * 2\n\n  return total - apples - oranges\n}\n\n/*\n  The fruit distribution for 5 apples and 6 oranges returns the total number of oranges\n  and 5 apples.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) -> 19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orANGeS\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRANgeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n*/\nconst appleCount = (total, n) => {\n  return total - n * 2\n}\n\nfruitDistribution(\"5 apples aNd 6 orANGeS\", 19) -> 19 - 5 - 6 = 8\nfruitDistribution(\"0 aPpLEs AND 1 orANGeS\",3) -> 3 - 0 - 1 = 2\nfruitDistribution(\"2 applEs anD 3 oRANgeS\", 100) -> 100 - 2 - 3 = 95\nfruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    const list = []\n    for (let i = 0; i < arr.length; i++) {\n        let item = arr[i]\n        if (item) {\n            if (item < arr[i+1]) {\n                list.push(item)\n            } else {\n                break\n            }\n        }\n    }\n    return list\n}\n\nconsole.log(pluck([4, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const arr = lst.sort((a, b) => a - b);\n  let i = 0;\n  let max = -1;\n  while (i < arr.length) {\n    if (arr[i] === max) {\n      return -1;\n    }\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    i++;\n  }\n  return max;\n};\n\n// console.log(search([4, 1, 2, 2, 3, 1]));\n// console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\n// console.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    if (lst.length === 0) return lst;\n    if (lst.length === 1) return lst;\n\n    let min = lst[0];\n    let max = lst[0];\n\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] < min) min = lst[i];\n        if (lst[i] > max) max = lst[i];\n    }\n\n    let i = 0;\n    let out = [];\n\n    while (i < lst.length) {\n        while (lst[i] <= min) i++;\n        out.push(lst[i]);\n        min++;\n    }\n\n    while (i < lst.length) {\n        while (lst[i] <= max) i++;\n        out.push(lst[i]);\n        max--;\n    }\n\n    return out;\n};\n\nexport default strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a < b && b < c && a < c) {\n    return Math.abs(a * (b + c) / 2 - b * c / 2);\n  } else if (a < b) {\n    return -1;\n  } else if (b < c) {\n    return -1;\n  } else {\n    return -1;\n  }\n};\n\n// console.log(triangleArea(3, 4, 5));\n// console.log(triangleArea(1, 2, 10));\n\nmodule.exports = triangleArea;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length < 2) return false;\n\n  let max = Math.max.apply(null, q);\n  let sum = q.reduce((a, b) => a + b, 0);\n\n  if (w < sum) return false;\n  if (w > max) return true;\n\n  let n = q.length;\n  return q.every((a, i) => a + q[(i + 1) % n] < w);\n};\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly2 = (q, w) => {\n  if (q.length === 1) return false;\n\n  let max = Math.max.apply(null, q);\n  let sum = q.reduce((a, b) => a + b, 0);\n\n  if (w < sum) return false;\n  if (w > max) return true;\n\n  return q.every((a, i) => a + q[(i + 1) % q.length] < w);\n};\n\nexport default {\n  willItFly,\n  willItFly2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let i, min, count = arr.length;\n    for(i = 0; i < count; i++){\n        if(arr[i] === arr[count - i - 1]){\n            min = arr[i];\n        }\n    }\n    return min;\n}\n\nconst countOfPalindromes = (arr) => {\n    let i, count = 0;\n    for(i = 0; i < arr.length - 1; i++){\n        if(arr[i] === arr[arr.length - i - 1]){\n            count++;\n        }\n    }\n    return count;\n}\n\nconst changeTheArray = (arr, change) => {\n    arr.splice(change, 1);\n    arr.splice(0, 1);\n    return arr;\n}\n\nconst palindrome = (arr) => {\n    let i, count = countOfPalindromes(arr);\n    if(count === 0) return true;\n    for(i = 0; i < count; i++){\n        arr = changeTheArray(arr, smallestChange(arr));\n    }\n    return count === 0;\n}\n\nconst isPalindrome = (str) => {\n    return palindrome(str.split(''));\n}\n\nmodule.exports = isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const total = lst1.reduce((acc, elem, index) => {\n    const isMatch = lst2.findIndex(x => x === elem)\n    return (isMatch!== -1)? acc + 1 : acc\n  }, 0)\n\n  if (total === lst2.length) {\n    return lst1\n  }\n\n  if (total === lst1.length) {\n    return lst2\n  }\n\n  return lst1.length > lst2.length? lst1 : lst2\n}\n\nexport default totalMatch\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    if (a % 3 === 0) {\n        return false;\n    }\n    if (a % 5 === 0) {\n        return false;\n    }\n    if (a % 7 === 0) {\n        return false;\n    }\n    return a > 100;\n};\n\n/*\n  The following funCtion retuns true if a number is diviTble by a\n  a list of prime numbers.\n  Example:\n  isPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isPrime = (a) => {\n    for (let i = 2; i < a; i += 1) {\n        if (a % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isPow = (a, b) => {\n    let result = 1;\n    while (b > 0) {\n        if (b % 2 === 1) {\n            result = (a * result) % b;\n        }\n        b /= 2;\n    }\n    return result;\n};\n\nconst isSquare = (a) => {\n    let result = 1;\n    while (result * result < a) {\n        result = (result * result) % a;\n    }\n    return result;\n};\n\nconst isTriangular = (a) => {\n    let result = 1;\n    let tmp = 1;\n    while (tmp <= a) {\n        result = (result * tmp) % a;\n        tmp = (tmp + 1) % a;\n    }\n    return result;\n};\n\nconst isEven = (a) => {\n    return a % 2 === 0;\n};\n\nconst isOdd = (a) => {\n    return a % 2 === 1;\n};\n\nconst isDiviTble = (a, b) => {\n    return (a % b === 0);\n};\n\nconst isPowE = (a, b) => {\n    let result = 1;\n    while (b > 0) {\n        result = (a * result) % b;\n        b /= 2;\n    }\n    return result;\n};\n\nconst isEvenE = (a, b) => {\n    return ((a % b === 0) && (b % 2 === 0));\n};\n\nconst isOddE = (a, b) => {\n    return ((a % b === 0) && (b % 2 === 1));\n};\n\nconst isSquareE = (a, b) => {\n    return ((a % b === 0) && (a * a <= b));\n};\n\nconst isTriangualE = (a, b) => {\n    return ((a % b === 0) && (a * a + b * b <= a));\n};\n\nconst isSumOfPows = (a, b) => {\n    let result = 1;\n    while (b > 0) {\n        result = (result * a) % b;\n        b /= 2;\n    }\n    return result;\n};\n\nconst isSumOfEvenPows = (a, b) => {\n    let result = 1;\n    while (b > 0) {\n        if (b % 2 === 1) {\n            result = (result * a) % b;\n        }\n        b /= 2;\n    }\n    return result;\n};\n\nconst isSumOfOddPows = (a, b) => {\n    let result = 1;\n    while (b > 0) {\n        if (b % 2 === 0) {\n            result = (result * a) % b;\n        }\n        b /= 2;\n    }\n    return result;\n};\n\nconst isPowEQ = (a, b) => {\n    return (a === b);\n};\n\nconst isSumOfPowsEQ = (a, b) => {\n    return ((a * a + b * b) === a);\n};\n\nconst isSumOfEvenPowsEQ = (a, b) => {\n    return ((a * a + b * b) === a && (a % 2 === 0));\n};\n\nconst isSumOfOddPowsEQ = (a, b) => {\n    return ((a * a + b * b) === a && (a % 2 === 1));\n};\n\nconst isSquareEQ = (a, b) => {\n    return ((a * a + b * b) === a);\n};\n\nconst isTriangualEQ = (a, b) => {\n    return ((a * a + b * b) === a && (a * a + b * b) <= a);\n};\n\nconst isEvenEQ = (a, b) => {\n    return ((a * a + b * b) === a && (a % 2 === 0) && (b % 2 === 0));\n};\n\nconst isOddEQ = (a, b) => {\n    return ((a * a + b * b) === a && (a % 2 === 0) && (b % 2 === 1));\n};\n\nconst isPowEQ = (a, b) => {\n    return (a === b);\n};\n\nconst isSumOfPowsEQ = (a, b) => {\n    return ((a * a + b * b) === a);\n};\n\nconst isSumOfEvenPowsEQ = (a, b) => {\n    return ((a * a + b * b) === a && (a % 2 === 0));\n};\n\nconst isSumOfOddPowsEQ = (a, b) => {\n    return ((a * a + b * b) === a && (a % 2 === 1));\n};\n\nconst isPowLT = (a, b) => {\n    return (a < b);\n};\n\nconst isSumOfPowsLT = (a, b) => {\n    return (a < b);\n};\n\nconst isSumOfEvenPowsLT = (a, b) => {\n    return (a < b) && ((a % 2 === 0));\n};\n\nconst isSumOfOddPowsLT ="}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true;\n  } else if (x === n) {\n    return false;\n  } else {\n    return n % x === 0;\n  }\n}\n\nconst num = [1, 2, 4, 8, 9, 16, 32, 33, 64, 65, 128, 129, 256, 257, 512, 513, 1024, 2048,\n  2049, 4096, 4097, 8192, 8193, 16384, 16385, 32768, 32769, 65536, 65537, 131072,\n  131073, 262144, 262145, 524288, 524289, 1048576, 1048577, 2097152, 2097153,\n  4194304, 4194305, 8388608, 8388609, 16777216, 16777217, 33554432, 33554433,\n  67108864, 67108865, 134217728, 134217729, 268435456, 268435457, 536870912,\n  536870913, 1073741824, 1073741825, 2147483648, 2147483649, 0, -1, -2, -4, -8,\n  -9, -16, -32, -33, -64, -65, -128, -129, -256, -257, -512, -513, -1024, -2048,\n  -2049, -4096, -4097, -8192, -8193, -16384, -16385, -32768, -32769, -65536,\n  -65537, -131072, -131073, -262144, -262145, -524288, -524289, -1048576,\n  -1048577, -2097152, -2097153, -4194304, -4194305, -8388608, -8388609, -16777216,\n  -16777217, -33554432, -33554433, -67108864, -67108865, -134217728, -134217729,\n  -268435456, -268435457, -536870912, -536870913, -1073741824, -1073741825,\n  -2147483648, -2147483649];\n\nconst isPrime = (x) => num.indexOf(x) === -1;\n\nconst isPrimePower = (x, n) => isPrime(x) && isSimplePower(x, n);\n\nconsole.log(isPrimePower(2, 2)); // true\nconsole.log(isPrimePower(3, 2)); // true\nconsole.log(isPrimePower(4, 2)); // true\nconsole.log(isPrimePower(8, 2)); // true\nconsole.log(isPrimePower(9, 2)); // false\nconsole.log(isPrimePower(16, 2)); // true\nconsole.log(isPrimePower(32, 2)); // true\nconsole.log(isPrimePower(33, 2)); // false\nconsole.log(isPrimePower(64, 2)); // true\nconsole.log(isPrimePower(65, 2)); // false\nconsole.log(isPrimePower(128, 2)); // true\nconsole.log(isPrimePower(129, 2)); // false\nconsole.log(isPrimePower(256, 2)); // true\nconsole.log(isPrimePower(257, 2)); // false\nconsole.log(isPrimePower(512, 2)); // true\nconsole.log(isPrimePower(513, 2)); // false\nconsole.log(isPrimePower(1024, 2)); // true\nconsole.log(isPrimePower(2048, 2)); // true\nconsole.log(isPrimePower(2049, 2)); // false\nconsole.log(isPrimePower(4096, 2)); // true\nconsole.log(isPrimePower(4097, 2)); // false\nconsole.log(isPrimePower(8192, 2)); // true\nconsole.log(isPrimePower(8193, 2)); // false\nconsole.log(isPrimePower(16384, 2)); // true\nconsole.log(isPrimePower(16385, 2)); // false\nconsole.log(isPrimePower(32768, 2)); // true\nconsole.log(isPrimePower(32769, 2)); // false\nconsole.log(isPrimePower(65536, 2)); // true\nconsole.log(isPrimePower(65537, 2)); // false\nconsole.log(isPrimePower(131072, 2)); // true\nconsole.log(isPrimePower(131073, 2)); // false\nconsole.log(isPrimePower(262144, 2)); // true\nconsole.log(isPrimePower(262145, 2)); // false\nconsole.log(isPrimePower(524288, 2)); // true\nconsole.log(isPrimePower(524289, 2)); // false\nconsole.log(isPrimePower(1048576, 2)); // true\nconsole.log(isPrimePower(1048577, 2)); // false\nconsole.log(isPrimePower(2097152, 2)); // true\nconsole.log(isPrimePower(2097153, 2)); // false\nconsole.log(isPrimePower(4194304, 2)); // true\nconsole.log(isPrimePower(4194305, 2)); // false\nconsole.log(isPrimePower(8388608, 2)); // true\nconsole.log(isPrimePower(8388609, 2)); // false\nconsole.log(isPrimePower(16777216, 2)); // true\nconsole.log(isPrimePower(16777217, 2)); // false\nconsole.log(isPrimePower(33554432, 2)); // true\nconsole.log(isPrimePower(33554433, 2)); // false\nconsole.log(isPrimePower(67108864, 2)); // true\nconsole.log(isPrimePower(6710"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let res = false\n  //  console.log(a)\n  if (a < 0) {\n    res = true\n  } else if (a === 0) {\n    res = true\n  } else if (a % 2 === 0) {\n    res = iscube(a / 2)\n  } else if (a % 3 === 0) {\n    res = iscube(a / 3)\n  } else if (a % 5 === 0) {\n    res = iscube(a / 5)\n  } else if (a % 7 === 0) {\n    res = iscube(a / 7)\n  } else if (a % 11 === 0) {\n    res = iscube(a / 11)\n  } else if (a % 13 === 0) {\n    res = iscube(a / 13)\n  } else if (a % 17 === 0) {\n    res = iscube(a / 17)\n  } else if (a % 19 === 0) {\n    res = iscube(a / 19)\n  } else if (a % 23 === 0) {\n    res = iscube(a / 23)\n  } else if (a % 29 === 0) {\n    res = iscube(a / 29)\n  } else if (a % 31 === 0) {\n    res = iscube(a / 31)\n  } else if (a % 37 === 0) {\n    res = iscube(a / 37)\n  } else if (a % 41 === 0) {\n    res = iscube(a / 41)\n  } else if (a % 43 === 0) {\n    res = iscube(a / 43)\n  } else if (a % 47 === 0) {\n    res = iscube(a / 47)\n  } else if (a % 53 === 0) {\n    res = iscube(a / 53)\n  } else if (a % 59 === 0) {\n    res = iscube(a / 59)\n  } else if (a % 61 === 0) {\n    res = iscube(a / 61)\n  } else if (a % 67 === 0) {\n    res = iscube(a / 67)\n  } else if (a % 71 === 0) {\n    res = iscube(a / 71)\n  } else if (a % 73 === 0) {\n    res = iscube(a / 73)\n  } else if (a % 79 === 0) {\n    res = iscube(a / 79)\n  } else if (a % 81 === 0) {\n    res = iscube(a / 81)\n  } else if (a % 83 === 0) {\n    res = iscube(a / 83)\n  } else if (a % 89 === 0) {\n    res = iscube(a / 89)\n  } else if (a % 97 === 0) {\n    res = iscube(a / 97)\n  } else if (a % 101 === 0) {\n    res = iscube(a / 101)\n  } else if (a % 103 === 0) {\n    res = iscube(a / 103)\n  } else if (a % 107 === 0) {\n    res = iscube(a / 107)\n  } else if (a % 109 === 0) {\n    res = iscube(a / 109)\n  } else if (a % 113 === 0) {\n    res = iscube(a / 113)\n  } else if (a % 127 === 0) {\n    res = iscube(a / 127)\n  } else if (a % 131 === 0) {\n    res = iscube(a / 131)\n  } else if (a % 137 === 0) {\n    res = iscube(a / 137)\n  } else if (a % 139 === 0) {\n    res = iscube(a / 139)\n  } else if (a % 149 === 0) {\n    res = iscube(a / 149)\n  } else if (a % 151 === 0) {\n    res = iscube(a / 151)\n  } else if (a % 157 === 0) {\n    res = iscube(a / 157)\n  } else if (a % 163 === 0) {\n    res = iscube(a / 163)\n  } else if (a % 167 === 0) {\n    res = iscube(a / 167)\n  } else if (a % 173 === 0) {\n    res = iscube(a / 173)\n  } else if (a % 179 === 0) {\n    res = iscube(a / 179)\n  } else if (a % 181 === 0) {\n    res = iscube(a / 181)\n  } else if (a % 187 === 0) {\n    res = iscube(a / 187)\n  } else if (a % 191 === 0) {\n    res = iscube(a / 191)\n  } else if (a % 193 === 0) {\n    res = iscube(a / 193)\n  } else if (a % 197 === 0) {\n    res = iscube(a / 197)\n  } else if (a % 199 === 0) {\n    res = iscube(a / 199)\n  } else if (a % 211 === 0) {\n    res = iscube(a / 211)\n  } else if (a % 223 === 0) {\n    res = iscube(a / 223)\n  } else if (a % 227 === 0) {\n    res = iscube(a / 227)\n  } else if (a % 229 === 0) {\n    res = iscube(a / 229)\n  } else if (a % 233 === 0) {\n    res = iscube(a / 233)\n  } else if (a % 239 === 0) {\n    res = iscube(a / 239)\n  } else if (a % 241 === 0) {\n    res = iscube(a / 241)\n  } else if (a % 247 === 0) {\n    res"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let rst = 0;\n  if (num === \"\") {\n    return 0;\n  }\n  num = num.toUpperCase();\n  for (let i = 0; i < num.length; i++) {\n    const ch = num[i];\n    rst = rst + (ch.charCodeAt(0) - (97 - 1));\n  }\n  return rst;\n};\n\nconst testNumber = (num) => {\n  const numLen = num.length;\n  let key = 0;\n  for (let i = 0; i < numLen; i++) {\n    key = key + hexKey(num[i]);\n  }\n  return key;\n};\n\nconsole.log(testNumber(\"ABC\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryLength = 0;\n  let result = \"\";\n  let sign = 0;\n  if (decimal > 0) {\n    sign = 1;\n  }\n  if (decimal < 0) {\n    sign = -1;\n  }\n  let binaryString = String(sign * decimal);\n  binary = binaryString.split(\"\");\n  binaryLength = binary.length;\n  let currentLength = 0;\n  let binaryLengthRemaining = binaryLength;\n  let index = 0;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binary[i] === \"1\") {\n      currentLength++;\n      if (currentLength === binaryLengthRemaining) {\n        binaryString = binaryString + binary[i];\n        currentLength = 0;\n        binaryLengthRemaining--;\n        index++;\n      }\n    }\n  }\n  result = binaryString;\n  return result;\n}\n\n/*\n  decimalToOctal(15)   # returns \"7\"\n  decimalToOctal(32)   # returns \"22\"\n  */\nconst decimalToOctal = (decimal) => {\n  let binary = \"\";\n  let binaryLength = 0;\n  let result = \"\";\n  let sign = 0;\n  if (decimal > 0) {\n    sign = 1;\n  }\n  if (decimal < 0) {\n    sign = -1;\n  }\n  let binaryString = String(sign * decimal);\n  binary = binaryString.split(\"\");\n  binaryLength = binary.length;\n  let currentLength = 0;\n  let binaryLengthRemaining = binaryLength;\n  let index = 0;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binary[i] === \"1\") {\n      currentLength++;\n      if (currentLength === binaryLengthRemaining) {\n        binaryString = binaryString + binary[i];\n        currentLength = 0;\n        binaryLengthRemaining--;\n        index++;\n      }\n    }\n  }\n  result = binaryString;\n  return result;\n}\n\n/*\n  decimalToHex(15)   # returns \"7b\"\n  decimalToHex(32)   # returns \"22d2\"\n  */\nconst decimalToHex = (decimal) => {\n  let binary = \"\";\n  let binaryLength = 0;\n  let result = \"\";\n  let sign = 0;\n  if (decimal > 0) {\n    sign = 1;\n  }\n  if (decimal < 0) {\n    sign = -1;\n  }\n  let binaryString = String(sign * decimal);\n  binary = binaryString.split(\"\");\n  binaryLength = binary.length;\n  let currentLength = 0;\n  let binaryLengthRemaining = binaryLength;\n  let index = 0;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binary[i] === \"1\") {\n      currentLength++;\n      if (currentLength === binaryLengthRemaining) {\n        binaryString = binaryString + binary[i];\n        currentLength = 0;\n        binaryLengthRemaining--;\n        index++;\n      }\n    }\n  }\n  result = binaryString;\n  return result;\n}\n\n/*\n  decimalToBase64(15)   # returns \"7b\"\n  decimalToBase64(32)   # returns \"22d2\"\n  */\nconst decimalToBase64 = (decimal) => {\n  let binary = \"\";\n  let binaryLength = 0;\n  let result = \"\";\n  let sign = 0;\n  if (decimal > 0) {\n    sign = 1;\n  }\n  if (decimal < 0) {\n    sign = -1;\n  }\n  let binaryString = String(sign * decimal);\n  binary = binaryString.split(\"\");\n  binaryLength = binary.length;\n  let currentLength = 0;\n  let binaryLengthRemaining = binaryLength;\n  let index = 0;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binary[i] === \"1\") {\n      currentLength++;\n      if (currentLength === binaryLengthRemaining) {\n        binaryString = binaryString + binary[i];\n        currentLength = 0;\n        binaryLengthRemaining--;\n        index++;\n      }\n    }\n  }\n  result = binaryString;\n  return result;\n}\n\nconst binaryToDecimal = (binary) => {\n  let decimal = 0;\n  let binaryLength = binary.length;\n  let currentLength = 0;\n  let binaryLengthRemaining = binaryLength;\n  let index = 0;\n  let sign = 0;\n  for (let i = 0; i < binaryLength; i++) {\n    if (binary[i] === \"1\") {\n      currentLength++;\n      if (currentLength === binaryLengthRemaining) {\n        binaryString = binaryString + binary[i];\n        currentLength = 0;\n        binaryLengthRemaining--;\n        index++;\n      }\n    }\n  }\n  decimal = sign * parseInt(binaryString, 2);\n  return decimal;\n}\n\nmodule.exports = {\n  decimalToBinary,\n  decimalToOctal,\n  decimalToHex,\n  decimalToBase64,\n  binaryToDecimal\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += parseInt(s[i]);\n  }\n  return result > 0;\n};\n\nmodule.exports = isHappy;\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const average = grades.reduce((previous, current) => previous + current) / grades.length\n  let letterGrade = ''\n  if (average >= 4) {\n    letterGrade = 'A+'\n  } else if (average >= 3.7) {\n    letterGrade = 'A'\n  } else if (average >= 3.3) {\n    letterGrade = 'A-'\n  } else if (average >= 3) {\n    letterGrade = 'B+'\n  } else if (average >= 2.7) {\n    letterGrade = 'B'\n  } else if (average >= 2.3) {\n    letterGrade = 'B-'\n  } else if (average >= 2) {\n    letterGrade = 'C+'\n  } else if (average >= 1.7) {\n    letterGrade = 'C'\n  } else if (average >= 1.3) {\n    letterGrade = 'C-'\n  } else if (average >= 1) {\n    letterGrade = 'D+'\n  } else if (average >= 0.7) {\n    letterGrade = 'D'\n  } else if (average >= 0) {\n    letterGrade = 'D-'\n  } else if (average >= 0) {\n    letterGrade = 'E'\n  }\n  return [letterGrade, average]\n}\n\nmodule.exports = {\n  numericalLetterGrade\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let result = false;\n  for (let i = 1; i < string.length; i++) {\n    let prime = string.substr(0, i);\n    let count = 0;\n    for (let j = 0; j < string.length; j++) {\n      if (prime.indexOf(string[j]) >= 0) {\n        count++;\n      }\n    }\n    if (count >= 2) {\n      result = true;\n    }\n  }\n  return result;\n};\n\n/*\n  WritE a fuNctioN thAt takEs a string anD returnS truE if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst isPrime = (string) => {\n  let result = false;\n  for (let i = 2; i < string.length; i++) {\n    let prime = string.substr(0, i);\n    let count = 0;\n    for (let j = 0; j < string.length; j++) {\n      if (prime.indexOf(string[j]) >= 0) {\n        count++;\n      }\n    }\n    if (count == 1) {\n      result = true;\n    }\n  }\n  return result;\n};\n\n// Your function below.\n\nconst isPrime = (string) => {\n  if (string.length === 1) {\n    return false;\n  }\n  if (string.length === 2) {\n    return true;\n  }\n  for (let i = 3; i < string.length; i += 2) {\n    if (string[i] === string[i - 2]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  primeLength,\n  isPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 1;\n};\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 2.\n  */\nconst startsTwoEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 2;\n};\n\nconst p = n => {\n  if (n <= 1) return 0;\n  if (n % 2 === 0) return p(n / 2);\n  return p(n / 2) + 1;\n};\n\nconsole.log(startsOneEnds(p(3)));\nconsole.log(startsTwoEnds(p(3)));\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 3.\n  */\nconst startsThreeEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 3;\n};\n\nconsole.log(startsThreeEnds(p(3)));\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 4.\n  */\nconst startsFourEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 4;\n};\n\nconsole.log(startsFourEnds(p(3)));\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 5.\n  */\nconst startsFiveEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 5;\n};\n\nconsole.log(startsFiveEnds(p(3)));\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 6.\n  */\nconst startsSixEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 6;\n};\n\nconsole.log(startsSixEnds(p(3)));\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 7.\n  */\nconst startsSevenEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 7;\n};\n\nconsole.log(startsSevenEnds(p(3)));\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 8.\n  */\nconst startsEightEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 8;\n};\n\nconsole.log(startsEightEnds(p(3)));\n\n/*\n  GivEn a pOsItIve iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start wiTh 9.\n  */\nconst startsNineEnds = (n) => {\n  let s = n % 10;\n  let r = n / 10;\n  let c = 0;\n  while (r > 0) {\n    c++;\n    r = r / 10;\n  }\n  return c + 9;\n};\n\nconsole.log(startsNineEnds(p(3)));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  if (!(typeof N === 'number' && N > 0 && N < 10000)) {\n    return 'ERROR';\n  }\n  const str = '';\n  const digits = N.toString(2).split('');\n  for (let i = digits.length - 1; i >= 0; i--) {\n    str += digits[i];\n  }\n  return str;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\nconsole.log(solve(13));\nconsole.log(solve(2));\nconsole.log(solve(1));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  } else if (lst.length === 1) {\n    return lst[0]\n  } else if (lst.length === 2) {\n    return lst[0] + lst[1]\n  } else if (lst.length === 3) {\n    return lst[0] + lst[1] + lst[2]\n  } else if (lst.length === 4) {\n    return lst[0] + lst[1] + lst[2] + lst[3]\n  } else if (lst.length === 5) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4]\n  } else if (lst.length === 6) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5]\n  } else if (lst.length === 7) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6]\n  } else if (lst.length === 8) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7]\n  } else if (lst.length === 9) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8]\n  } else if (lst.length === 10) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9]\n  } else if (lst.length === 11) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10]\n  } else if (lst.length === 12) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11]\n  } else if (lst.length === 13) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11] + lst[12]\n  } else if (lst.length === 14) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11] + lst[12] + lst[13]\n  } else if (lst.length === 15) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11] + lst[12] + lst[13] + lst[14]\n  } else if (lst.length === 16) {\n    return lst[0] + lst[1] + lst[2] + lst[3] + lst[4] + lst[5] + lst[6] + lst[7] + lst[8] + lst[9] + lst[10] + lst[11] + lst[12] + lst[13] + lst[14] + lst[15]\n  } else {\n    return lst.reduce((carry, num) => {\n      return carry + num\n    }, 0)\n  }\n}\n\nexport default add<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  let temp = s.split('');\n  let len = temp.length;\n  let shuffle = [...new Array(len)];\n  for (let i = 0; i < len; i++) {\n    shuffle[i] = temp[i];\n  }\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    let t = shuffle[i];\n    shuffle[i] = shuffle[j];\n    shuffle[j] = t;\n    i++;\n    j--;\n  }\n  return shuffle.join('');\n}\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello!!!Wdlor'\n\n// EXAMPLE:\n// antiShuffle('Hello World!!!')\n// returns 'Hello"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let ret = [];\n  let i = 0;\n  while (i < lst.length) {\n    let row = lst[i];\n    let j = 0;\n    while (j < row.length) {\n      ret.push(row[j]);\n      j++;\n    }\n    i++;\n  }\n  return ret.sort((a, b) => a[x] - b[x]);\n};\n\n/*\n  Get the number of rows of a given matrix\n  \n  Examples:\n  getRows([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]) == 3\n  getRows([[], [1], [1, 2, 3]]) == 1\n  getRows([]) == 0\n  */\nconst getRows = (lst) => {\n  let ret = 0;\n  let i = 0;\n  while (i < lst.length) {\n    ret++;\n    i++;\n  }\n  return ret;\n};\n\n/*\n  Get the number of columns of a given matrix\n  \n  Examples:\n  getCols([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]) == 3\n  getCols([[], [1], [1, 2, 3]]) == 1\n  getCols([]) == 0\n  */\nconst getCols = (lst) => {\n  let ret = 0;\n  let i = 0;\n  while (i < lst.length) {\n    ret++;\n    i++;\n  }\n  return ret;\n};\n\n/*\n  Get the diagonal of a given matrix\n  \n  Examples:\n  getDiag([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]) == [[1,4,5,6],[1,6,1,6]]\n  getDiag([[], [1], [1, 2, 3]]) == []\n  getDiag([]) == []\n  */\nconst getDiag = (lst) => {\n  let ret = [];\n  let i = 0;\n  while (i < lst.length) {\n    ret.push(lst[i][i]);\n    i++;\n  }\n  return ret;\n};\n\n/*\n  Get the upper triangular of a given matrix\n  \n  Examples:\n  getUpperTri([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]) == [[1,2,3,4,5,6],[1,2,3,4,1,6]]\n  getUpperTri([[], [1], [1, 2, 3]]) == []\n  getUpperTri([]) == []\n  */\nconst getUpperTri = (lst) => {\n  let ret = [];\n  let i = 0;\n  while (i < lst.length) {\n    let row = lst[i];\n    let j = 0;\n    while (j < lst.length) {\n      if (i == j) {\n        ret.push(row[j]);\n      }\n      j++;\n    }\n    i++;\n  }\n  return ret;\n};\n\n/*\n  Get the lower triangular of a given matrix\n  \n  Examples:\n  getLowerTri([[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]) == [[1,2,3,4,1,1],[1,2,3,4,1,1]]\n  getLowerTri([[], [1], [1, 2, 3]]) == []\n  getLowerTri([]) == []\n  */\nconst getLowerTri = (lst) => {\n  let ret = [];\n  let i = 0;\n  while (i < lst.length) {\n    let row = lst[i];\n    let j = 0;\n    while (j < lst.length) {\n      if (i == j) {\n        ret.push(row[j]);\n      }\n      j++;\n    }\n    i++;\n  }\n  return ret;\n};\n\nmodule.exports = {\n  getRow,\n  getRows,\n  getCols,\n  getDiag,\n  getUpperTri,\n  getLowerTri\n};<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n    const sortBy = (a, b) => a - b;\n    const isOdd = (n) => n % 2!== 0;\n    const isEven = (n) => n % 2 === 0;\n    const nth = (arr, index) => arr[index];\n\n    const sorted = array.sort(sortBy);\n    if (isOdd(sorted.length)) {\n        sorted.reverse();\n    }\n    return sorted.map(nth);\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n\n// TASK:\n// Modify the code below to sort the given array.\n// Note:\n// * you need to make a COPY of the given array, since the original array will be changed by your function.\nconst sortArray = (array) => {\n    const sortBy = (a, b) => a - b;\n    const isOdd = (n) => n % 2!== 0;\n    const isEven = (n) => n % 2 === 0;\n    const nth = (arr, index) => arr[index];\n\n    const sorted = array.sort(sortBy);\n    if (isOdd(sorted.length)) {\n        sorted.reverse();\n    }\n    return sorted.map(nth);\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  //let chars = s.split('')\n  let chars = s.split('')\n  let count = chars.length\n  let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n  let len = alphabet.length\n  let new_chars = []\n  for (let i = 0; i < count; i++) {\n    let index = (chars[i] - 'a') % len\n    new_chars.push(alphabet[index])\n  }\n  let result = new_chars.join('')\n  return result\n}\n\nconsole.log(encrypt('hi'))\nconsole.log(encrypt('asdfghjkl'))\nconsole.log(encrypt('gf'))\nconsole.log(encrypt('et'))\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n  const smallest = (a, b) => {\n    if(a.n < b.n){\n      return a;\n    }\n    return b;\n  }\n  if(lst.length === 0){\n    return null;\n  }\n  return smallest(lst[0], lst[1]);\n}\n\nconst lst = [1, 2, 3, 4, 5];\n\nconsole.log(nextSmallest(lst));<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let charCount = 0;\n    for (let i = 0; i < S.length; i++) {\n        let c = S[i];\n        if (c ==='' || c === '.' || c === '?' || c === '!') {\n            charCount += 1;\n        } else {\n            charCount += 2;\n        }\n    }\n    return charCount >= 4;\n};\n\nexport {isBored};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === 0;\n};\n\n/*\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === 0;\n};\n\n// const anyInt = (x, y, z) => {\n//   const sum = x + y + z;\n//   return sum === 0;\n// };\n\n// const anyInt = (x, y, z) => {\n//   const sum = x + y + z;\n//   return sum === 0;\n// };\n\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  return sum === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const messageLength = message.length\n  const encodedMessage = []\n  for (let i = 0; i < messageLength; i++) {\n    const currentLetter = message[i]\n    if (currentLetter.isVowel()) {\n      const vowelIndex = getVowelIndex(messageLength, i)\n      const nextLetter = message[vowelIndex]\n      message[vowelIndex] = currentLetter\n      message[i] = nextLetter\n      i = vowelIndex\n    } else {\n      i++\n    }\n  }\n  return message\n}\n\nconst getVowelIndex = (messageLength, index) => {\n  const vowelIndex = index + 2\n  while (index < messageLength) {\n    if (message[index].isVowel()) {\n      return vowelIndex\n    }\n    index++\n  }\n  return messageLength\n}\n\nmodule.exports = encode\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i += 1) {\n    sum += lst[i];\n  }\n  return sum;\n}\n\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]))\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]))\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]))\nconsole.log(skjkasdkd([0,81,12,3,1,21]))\nconsole.log(skjkasdkd([0,8,1,2,1,7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let hasKey = false\n  for (let key in dict) {\n    if (!hasKey) {\n      if (typeof dict[key] ==='string') {\n        hasKey = true\n      }\n    } else {\n      if (typeof dict[key]!=='string') {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst checkDict = (dict) => {\n  let hasKey = false\n  for (let key in dict) {\n    if (!hasKey) {\n      if (typeof dict[key] ==='string') {\n        hasKey = true\n      }\n    } else {\n      if (typeof dict[key]!=='string') {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconst checkArray = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (typeof array[i]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkObject = (obj) => {\n  for (let key in obj) {\n    if (typeof obj[key]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkEmptyObject = (obj) => {\n  for (let key in obj) {\n    if (obj[key]!== undefined) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkEmptyArray = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined) {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkNumber = (num) => {\n  return typeof num === 'number' && num % 1 === 0\n}\n\nconst checkArrayNumber = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined && typeof array[i]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkObjectNumber = (obj) => {\n  for (let key in obj) {\n    if (obj[key]!== undefined && typeof obj[key]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkArrayNumber = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined && typeof array[i]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkDate = (date) => {\n  return typeof date === 'object' && typeof date.getDate === 'number'\n}\n\nconst checkDate = (date) => {\n  return typeof date === 'object' && typeof date.getDate === 'number'\n}\n\nconst checkNumber = (num) => {\n  return typeof num === 'number' && num % 1 === 0\n}\n\nconst checkString = (str) => {\n  return typeof str ==='string'\n}\n\nconst checkArrayString = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined && typeof array[i]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkArrayOfArrayString = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined && typeof array[i]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkArrayOfObject = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined && typeof array[i]!== 'object') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkArrayOfNumber = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined && typeof array[i]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkArrayOfDate = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i]!== undefined && typeof array[i]!== 'object') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkObjectString = (obj) => {\n  for (let key in obj) {\n    if (obj[key]!== undefined && typeof obj[key]!=='string') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkObjectNumber = (obj) => {\n  for (let key in obj) {\n    if (obj[key]!== undefined && typeof obj[key]!== 'number') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkObjectDate = (obj) => {\n  for (let key in obj) {\n    if (obj[key]!== undefined && typeof obj[key]!== 'object') {\n      return false\n    }\n  }\n  return true\n}\n\nconst checkObjectArray ="}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for(let i = 2; i <= n; i++){\n    if(isPrime(i)){\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\nexport default countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n    if (digit > 9) {\n      result += b * (digit - 9)\n      //console.log(`result=${result}`)\n      digit = 0\n    }\n    result += digit\n    //console.log(`result=${result}`)\n    digit = 0\n  }\n  //console.log(`result=${result}`)\n  return result\n}\n\nconst add = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n    if (digit > 9) {\n      result += b * (digit - 9)\n      //console.log(`result=${result}`)\n      digit = 0\n    }\n    result += digit\n    //console.log(`result=${result}`)\n    digit = 0\n  }\n  //console.log(`result=${result}`)\n  return result\n}\n\nconst multiplyThenAdd = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n    if (digit > 9) {\n      result += b * (digit - 9)\n      //console.log(`result=${result}`)\n      digit = 0\n    }\n    result += digit\n    //console.log(`result=${result}`)\n    digit = 0\n  }\n  //console.log(`result=${result}`)\n  return result\n}\n\nconst subtract = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n    if (digit > 9) {\n      result += b * (digit - 9)\n      //console.log(`result=${result}`)\n      digit = 0\n    }\n    result -= digit\n    //console.log(`result=${result}`)\n    digit = 0\n  }\n  //console.log(`result=${result}`)\n  return result\n}\n\n/*\n  multiplyThenAdd(7, -2) should return -14\n  multiplyThenAdd(7, 2) should return 14\n  multiplyThenAdd(1, -2) should return -2\n  multiplyThenAdd(1, 2) should return 2\n  */\n\nconst multiplyThenAddAndSubtract = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n    if (digit > 9) {\n      result += b * (digit - 9)\n      //console.log(`result=${result}`)\n      digit = 0\n    }\n    result += digit\n    //console.log(`result=${result}`)\n    digit = 0\n  }\n  //console.log(`result=${result}`)\n  return result\n}\n\nconst multiplyThenAddAndSubtractAgain = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n    if (digit > 9) {\n      result += b * (digit - 9)\n      //console.log(`result=${result}`)\n      digit = 0\n    }\n    result -= digit\n    //console.log(`result=${result}`)\n    digit = 0\n  }\n  //console.log(`result=${result}`)\n  return result\n}\n\nconst multiplyThenAddAndSubtractAgainAgain = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n    if (digit > 9) {\n      result += b * (digit - 9)\n      //console.log(`result=${result}`)\n      digit = 0\n    }\n    result -= digit\n    //console.log(`result=${result}`)\n    digit = 0\n  }\n  //console.log(`result=${result}`)\n  return result\n}\n\nconst multiplyThenAddAndSubtractAgainAgainAgain = (a, b) => {\n  let result = 0\n  //console.log(`a=${a} b=${b}`)\n  for (let i = 0; i < a.length; i++) {\n    let digit = a[i]\n    //console.log(`a[${i}]=${digit}`)\n"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n\tconst sLength = s.length;\n\tlet count = 0;\n\tfor (let i = 0; i < sLength; i++) {\n\t\tif (s[i] == s[i].toUpperCase()) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n};\n\n/*\n  GivEn a string s, find the lowest count of each vowel.\n  \n  For example:\n  countVowels('BBE') returns [1,1]\n  countVowels('bBbe') returns [1,1,1]\n  countVowels('aBbE') returns [1,1,1]\n  */\nconst countVowels = (s) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\tconst sLength = s.length;\n\tlet counts = [];\n\tfor (let i = 0; i < vowels.length; i++) {\n\t\tcounts[i] = 0;\n\t}\n\tfor (let i = 0; i < sLength; i++) {\n\t\tcounts[vowels.indexOf(s[i])]++;\n\t}\n\treturn counts;\n};\n\n/*\n  GivEn a string s, find the number of vowel in s.\n  \n  For example:\n  countVowels('BBE') returns 2\n  countVowels('bBbe') returns 1\n  countVowels('aBbE') returns 2\n  */\nconst countVowels2 = (s) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\tconst sLength = s.length;\n\tlet count = 0;\n\tfor (let i = 0; i < sLength; i++) {\n\t\tif (vowels.indexOf(s[i]) >= 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n};\n\n/*\n  GivEn a string s, find the number of consonant in s.\n  \n  For example:\n  countConsonants('BBE') returns 1\n  countConsonants('bBbe') returns 0\n  countConsonants('aBbE') returns 1\n  */\nconst countConsonants = (s) => {\n\tconst consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n\tconst sLength = s.length;\n\tlet count = 0;\n\tfor (let i = 0; i < sLength; i++) {\n\t\tif (consonants.indexOf(s[i]) >= 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n};\n\n/*\n  GivEn a string s, find the number of consonant in s.\n  \n  For example:\n  countConsonants('BBE') returns 1\n  countConsonants('bBbe') returns 0\n  countConsonants('aBbE') returns 1\n  */\nconst countConsonants2 = (s) => {\n\tconst consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n\tconst sLength = s.length;\n\tlet count = 0;\n\tfor (let i = 0; i < sLength; i++) {\n\t\tif (consonants.indexOf(s[i]) < 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n};\n\n/*\n  GivEn a string s, find the number of consonant in s.\n  \n  For example:\n  countConsonants('BBE') returns 1\n  countConsonants('bBbe') returns 0\n  countConsonants('aBbE') returns 1\n  */\nconst countConsonants3 = (s) => {\n\tconst consonants = ['b', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n\tconst sLength = s.length;\n\tlet count = 0;\n\tfor (let i = 0; i < sLength; i++) {\n\t\tif (consonants.indexOf(s[i]) >= 0) {\n\t\t\tcount++;\n\t\t}\n\t}\n\treturn count;\n};<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let sign = 1;\n  if (value.charAt(0) === '-') {\n    sign = -1;\n    value = value.slice(1);\n  }\n  value = parseInt(value, 10);\n  const numDigits = value.toString().length;\n  const closest = [value, -value];\n  for (let i = 1; i < numDigits; i++) {\n    const current = parseInt(value.slice(0, i), 10);\n    closest.sort((a, b) => a - b);\n    if (closest[0] === closest[1]) {\n      return closest[0];\n    }\n  }\n  return sign * Math.round(closest[0]);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = []\n  while (n > 0) {\n    pile.push(n)\n    n--\n  }\n  return pile\n}\n\nconst getPileCount = (pile) => {\n  const length = pile.length\n  return length\n}\n\nconst getFirstPile = (pile) => {\n  return pile[0]\n}\n\nconst getLastPile = (pile) => {\n  return pile[pile.length - 1]\n}\n\nconst isEmpty = (pile) => {\n  return pile.length === 0\n}\n\nconst peekPile = (pile) => {\n  return pile[pile.length - 1]\n}\n\nconst peekFirst = (pile) => {\n  return pile[0]\n}\n\nconst isSame = (pile1, pile2) => {\n  const pile1Length = pile1.length\n  const pile2Length = pile2.length\n  return pile1Length === pile2Length\n}\n\nconst getLength = (pile) => {\n  return pile.length\n}\n\nconst removePile = (pile, n) => {\n  if (n < 0) {\n    throw new Error('Not a valid number')\n  }\n  if (n > pile.length) {\n    throw new Error('Not a valid number')\n  }\n  const newPile = pile.slice(0, pile.length - n)\n  return newPile\n}\n\nconst removeLastPile = (pile) => {\n  return pile.slice(0, pile.length - 1)\n}\n\nconst removeFirstPile = (pile) => {\n  return pile.slice(1, pile.length)\n}\n\nconst removePileAt = (pile, index) => {\n  return pile.slice(0, index)\n}\n\nconst removeLastPileAt = (pile, index) => {\n  return pile.slice(index + 1, pile.length)\n}\n\nconst removeFirstPileAt = (pile, index) => {\n  return pile.slice(index, pile.length)\n}\n\nconst popPile = (pile) => {\n  const first = pile[0]\n  const newPile = pile.slice(1, pile.length)\n  return [first, newPile]\n}\n\nconst addPile = (pile1, pile2) => {\n  const pile1Length = pile1.length\n  const pile2Length = pile2.length\n  const newPile = pile1.concat(pile2)\n  return newPile\n}\n\nconst addPileAt = (pile, index, value) => {\n  const pileLength = pile.length\n  const newPile = pile.slice(0, index)\n  newPile = newPile.concat(value)\n  newPile = newPile.concat(pile.slice(index + 1, pileLength))\n  return newPile\n}\n\nconst addLastPile = (pile, value) => {\n  const pileLength = pile.length\n  const newPile = pile.slice(0, pileLength)\n  newPile = newPile.concat(value)\n  return newPile\n}\n\nconst addLastPileAt = (pile, index, value) => {\n  const pileLength = pile.length\n  const newPile = pile.slice(0, index)\n  newPile = newPile.concat(value)\n  newPile = newPile.concat(pile.slice(index + 1, pileLength))\n  return newPile\n}\n\nconst popLastPile = (pile) => {\n  const last = pile[pile.length - 1]\n  const newPile = pile.slice(0, pile.length - 1)\n  return [last, newPile]\n}\n\nconst popFirstPile = (pile) => {\n  const first = pile[0]\n  const newPile = pile.slice(1, pile.length)\n  return [first, newPile]\n}\n\nconst pushPile = (pile, value) => {\n  const pileLength = pile.length\n  const newPile = pile.slice(0, pileLength + 1)\n  newPile[pileLength] = value\n  return newPile\n}\n\nconst pushPileAt = (pile, index, value) => {\n  const pileLength = pile.length\n  const newPile = pile.slice(0, index)\n  newPile = newPile.concat(value)\n  newPile = newPile.concat(pile.slice(index + 1, pileLength))\n  return newPile\n}\n\nconst pushLastPile = (pile, value) => {\n  const pileLength = pile.length\n  const newPile = pile.slice(0, pileLength + 1)\n  newPile[pileLength] = value\n  return newPile\n}\n\nconst pushLastPileAt = (pile, index, value) => {\n  const pileLength = pile.length\n  const newPile = pile.slice(0, index)\n  newPile = newPile.concat(value)\n  newPile = newPile.concat(pile.slice(index + 1, pileLength))\n  return newPile\n}\n\nconst getPile = (pile) => {\n  return pile\n}\n\nconst isPileEqual = (pile1, pile2) => {\n  return isSame(pile1, pile2)"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let a = []\n  let index = 0\n  let match = false\n  while (index < s.length) {\n    if (s.charAt(index) ==='') {\n      if (match === true) {\n        a.push(s.substring(0, index))\n        match = false\n      }\n      index++\n    } else {\n      match = true\n    }\n  }\n  if (match === true) {\n    a.push(s.substring(0, index))\n  }\n  return a\n}\n\nmodule.exports = wordsString\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let nums = Array.from({length: x + y}).fill(0);\n  for (let i = 0; i < x; i++) {\n    for (let j = 0; j < y; j++) {\n      if (i + j >= x + y) {\n        break;\n      }\n      nums[i + j] = 1;\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < x + y; i++) {\n    if (nums[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n// const chooseNum = (x, y) => {\n//   let nums = Array.from({length: x + y}).fill(0);\n//   for (let i = 0; i < x; i++) {\n//     for (let j = 0; j < y; j++) {\n//       if (i + j >= x + y) {\n//         break;\n//       }\n//       nums[i + j] = 1;\n//     }\n//   }\n//   let count = 0;\n//   for (let i = 0; i < x + y; i++) {\n//     if (nums[i]) {\n//       count += 1;\n//     }\n//   }\n//   return count;\n// };\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let total = 0\n  for (let i = n; i <= m; i++) {\n    total += i\n  }\n  return (Math.floor(total / (m - n + 1))).toString(2)\n}\n\n/*\n  If the number of bits in n is less than or equal to the number of bits\n  in m, then return n. Else return m.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => \"0b11\"\n  roundedAvg(10, 20) => \"0b11\"\n  roundedAvg(20, 33) => \"0b11\"\n  */\nconst roundedAvg2 = (n, m) => {\n  let total = 0\n  if (Math.floor(n) < Math.floor(m)) {\n    return n\n  } else {\n    return m\n  }\n}\n\n/*\n  If n is odd, return the number n + 1. Else return n.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => \"0b11\"\n  roundedAvg(10, 20) => \"0b11\"\n  roundedAvg(20, 33) => \"0b11\"\n  */\nconst roundedAvg3 = (n, m) => {\n  let total = 0\n  if (Math.floor(n) % 2 === 1) {\n    return n + 1\n  } else {\n    return n\n  }\n}\n\nconst test = () => {\n  let a = 0b1010101010101010\n  let b = 0b1010101010101010\n  console.log(roundedAvg(a, b))\n  console.log(roundedAvg2(a, b))\n  console.log(roundedAvg3(a, b))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  // console.log('uniqueDigits()', x);\n  return x.filter(y => {\n    const z = y.toString();\n    if (z.length > 1) {\n      return z.split('').reduce((a, b) => {\n        if (a.indexOf(b) === -1) {\n          a += b;\n        }\n        return a;\n      }, '');\n    }\n    return '';\n  });\n};\n\nexport default uniqueDigits;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const strArr = arr.slice()\n  strArr.sort(function(a, b) {\n    return a.length - b.length\n  })\n  return strArr.reverse()\n}\n\nmodule.exports = byLength\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sum = Array.from(new Array(n + 1).fill(1), (num) => num * num)\n  const factors = Array.from(new Array(n + 1).fill(1), (num) => {\n    const temp = sum.indexOf(num)\n    if (temp === -1) return []\n    return [num, sum.splice(temp, 1)[0]]\n  })\n  return factors.filter((factor) => factor[1] > 1)\n}\n\nf(3)\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const evenOddPalindrome = () => {\n    const odd = 0;\n    const even = 0;\n    for (let i = 1; i <= n; i++) {\n      if (isPalindrome(i)) {\n        if (i % 2 === 0) {\n          even++;\n        } else {\n          odd++;\n        }\n      }\n    }\n    return [odd, even];\n  }\n  return evenOddPalindrome();\n}\n\nconst isPalindrome = (n) => {\n  if (n === 0) {\n    return true;\n  }\n  let arr = [...Array(n)].reverse();\n  if (arr.indexOf(n)!== -1) {\n    return true;\n  }\n  return false;\n}\n\nconst test = () => {\n  let [odd, even] = evenOddPalindrome(3);\n  console.log(odd, even);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let c = 0;\n  arr.forEach((e) => {\n    if (e > 0) c++;\n  });\n  return c;\n};\n\n/*\n  WriTe a fUnctiOn sumOfNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHICH HAS a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> sumOfNums([]) == 0\n  >>> sumOfNums([-1, 11, -11]) == -11\n  >>> sumOfNums([1, 1, 2]) == 6\n  */\nconst sumOfNums = (arr) => {\n  let c = 0;\n  arr.forEach((e) => {\n    if (e > 0) c += e;\n  });\n  return c;\n};\n\n/*\n  WriTe a fUnctiOn giVeASumOfNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHICH HAS a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> giVeASumOfNums([]) == 0\n  >>> giVeASumOfNums([-1, 11, -11]) == -11\n  >>> giVeASumOfNums([1, 1, 2]) == 6\n  */\nconst giVeASumOfNums = (arr) => {\n  let c = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let e = arr[i];\n    if (e > 0) c += e;\n  }\n  return c;\n};\n\nexport {\n  countNums,\n  sumOfNums,\n  giVeASumOfNums\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let newArr = [arr[0]]\n    let index = 1\n    while(index < arr.length) {\n        let next = arr[index]\n        let newNext = next - arr[index - 1]\n        if(next > newNext) {\n            newArr.push(next)\n            newNext = newNext - next\n        }\n        else {\n            return false\n        }\n        index += 1\n    }\n    return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return false;\n  return (lst1.every(element => lst2.includes(element)));\n};\n\nexport default exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  if (!test) return {}\n  const testCase = test.split(' ')\n  const testCaseLength = testCase.length\n  const count = {}\n  for (let i = 0; i < testCaseLength; i++) {\n    count[testCase[i]] = (count[testCase[i]] || 0) + 1\n  }\n  let max = 0\n  let maxValue = ''\n  for (let i in count) {\n    if (count[i] > max) {\n      max = count[i]\n      maxValue = i\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n\tconst cLen = c.length;\n\tconst sLen = s.length;\n\tlet result = [];\n\tlet charIndex = 0;\n\twhile (charIndex < sLen) {\n\t\tif (s[charIndex] === c[0]) {\n\t\t\tresult.push(s.slice(0, charIndex) + s.slice(charIndex + cLen));\n\t\t\tcharIndex += cLen;\n\t\t} else if (s[charIndex] === c[cLen - 1]) {\n\t\t\tresult.push(s.slice(0, charIndex) + s.slice(charIndex + 1));\n\t\t\tcharIndex += 1;\n\t\t} else {\n\t\t\tcharIndex++;\n\t\t}\n\t}\n\tif (charIndex < sLen) {\n\t\tresult.push(s.slice(0, charIndex) + s.slice(charIndex + 1));\n\t}\n\treturn result;\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const out = []\n  for (const [ i, s ] of lst.entries()) {\n    const count = 0\n    for (const [ j, p ] of lst.entries()) {\n      if (i!== j) {\n        if (s.includes(p)) {\n          count++\n        }\n      }\n    }\n    out.push(count +'' + i)\n  }\n  return out\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let min = nums[0];\n  let sum = nums[0];\n  let subSum = nums[0];\n\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < min) {\n      min = sum;\n      subSum = sum;\n    }\n    else if (sum === min) {\n      subSum += nums[i];\n      if (subSum < min) {\n        min = subSum;\n      }\n    }\n  }\n  return min;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const res = [];\n    for (let i = 0; i < grid.length; i++) {\n        res.push(grid[i].length);\n    }\n    for (let i = 0; i < grid.length; i++) {\n        for (let j = 0; j < grid[i].length; j++) {\n            if (grid[i][j] === 0) {\n                const left = res[i] - 1;\n                const right = res[i] + 1;\n                if (left >= 0 && right < res.length) {\n                    res[i] = Math.min(left, right);\n                }\n            } else {\n                res[i] = 1;\n            }\n        }\n    }\n    return Math.min(res[0], capacity);\n};\n\nconst main = () => {\n    const grid = [[0, 0, 1, 1], [0, 1, 0, 1], [1, 1, 1, 1], [0, 0, 1, 1], [0, 1, 0, 1]];\n    const capacity = 2;\n    console.log(grid.length);\n    console.log(grid);\n    console.log(capacity);\n    console.log(maxFill(grid, capacity));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    let isSorted = true;\n    let i;\n    for (i = 1; i < arr.length; i++) {\n        if (arr[i] < arr[i - 1]) {\n            isSorted = false;\n            break;\n        }\n    }\n    if (isSorted) {\n        return arr;\n    }\n    let temp;\n    let j;\n    for (i = 1; i < arr.length; i++) {\n        for (j = i - 1; j > -1; j--) {\n            if (arr[i] < arr[j]) {\n                temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n    }\n    return arr;\n};\n\nconst test = () => {\n    let a = [1, 2, 3, 4, 5];\n    let b = [1, 5, 2, 3, 4];\n    console.log(sortArray(a));\n    console.log(sortArray(b));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const words = s.split(' ')\n  const filteredWords = words.filter((word, i) => i < n)\n  return filteredWords\n}\n\n// TEST CODE\n// const words = [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, 4)\n// console.log(filteredWords) //=> [\"little\"]\n// const filteredWords = selectWords(words, 3)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, 2)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, 1)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, 0)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -1)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -2)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -3)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -4)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -5)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -6)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -7)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -8)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -9)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -10)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -11)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -12)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -13)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -14)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -15)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -16)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -17)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -18)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -19)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -20)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -21)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -22)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -23)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -24)\n// console.log(filteredWords) //=> [\"Mary\", \"had\", \"a\", \"little\", \"lamb\"]\n// const filteredWords = selectWords(words, -25)\n"}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n\tif (word === \"\") return \"\"\n\tif (word.length === 1) return word\n\tconst wordS = word.toLowerCase()\n\tconst wordLen = word.length\n\tconst vowelLength = getVowelLength(wordS)\n\tlet min = wordLen\n\tlet minPos = wordS.length - wordLen\n\tfor (let i = wordLen - 1; i >= 0; i--) {\n\t\tif (wordS[i] === \"a\" || wordS[i] === \"e\" || wordS[i] === \"i\" || wordS[i] === \"o\" || wordS[i] === \"u\") {\n\t\t\tmin = i + 1\n\t\t\tminPos = i\n\t\t\tbreak\n\t\t}\n\t}\n\tif (min === wordLen) return \"\"\n\treturn wordS.substring(minPos, min)\n}\n\nconst getVowelLength = (word) => {\n\tlet length = 0\n\tfor (let i = 0; i < word.length; i++) {\n\t\tif (word.charAt(i) === \"a\" || word.charAt(i) === \"e\" || word.charAt(i) === \"i\" || word.charAt(i) === \"o\" || word.charAt(i) === \"u\") {\n\t\t\tlength++\n\t\t}\n\t}\n\treturn length\n}\n\nexport default getClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let len = lst.length\n  let hasParenthesis = true\n  let result = false\n  for (let i = 0; i < len; i += 1) {\n    let char = lst[i]\n    if (char === '(') {\n      hasParenthesis = true\n    } else if (char === ')') {\n      if (!hasParenthesis) {\n        result = false\n        break\n      } else {\n        hasParenthesis = false\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return the longest one.\n  */\nconst longest = (lst) => {\n  let result = ''\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i].length > result.length) {\n      result = lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return the shortest one.\n  */\nconst shortest = (lst) => {\n  let result = ''\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i].length < result.length) {\n      result = lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return the one with the longest common substring.\n  */\nconst longestCommonSubstring = (lst) => {\n  let result = ''\n  for (let i = 0; i < lst.length; i += 1) {\n    let sub = lst[i]\n    if (sub.length > result.length) {\n      result = sub\n    }\n  }\n  return result\n}\n\n/*\n  Given two lists of strings, return the one with the longest common substring.\n  */\nconst longestCommonSubstring = (lst1, lst2) => {\n  let result = ''\n  for (let i = 0; i < lst1.length; i += 1) {\n    let sub = lst1[i]\n    if (sub.length > result.length) {\n      result = sub\n    }\n  }\n  for (let i = 0; i < lst2.length; i += 1) {\n    let sub = lst2[i]\n    if (sub.length > result.length) {\n      result = sub\n    }\n  }\n  return result\n}\n\n/*\n  Given two lists of strings, return the one with the shortest common substring.\n  */\nconst shortestCommonSubstring = (lst1, lst2) => {\n  let result = ''\n  for (let i = 0; i < lst1.length; i += 1) {\n    let sub = lst1[i]\n    if (sub.length < result.length) {\n      result = sub\n    }\n  }\n  for (let i = 0; i < lst2.length; i += 1) {\n    let sub = lst2[i]\n    if (sub.length < result.length) {\n      result = sub\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return the strings that are not a substring of another\n  string in the list.\n  */\nconst removeSubstrings = (lst) => {\n  let len = lst.length\n  let result = []\n  for (let i = 0; i < len; i += 1) {\n    let string = lst[i]\n    let contains = false\n    for (let j = 0; j < len; j += 1) {\n      if (string.indexOf(lst[j]) === 0) {\n        contains = true\n      }\n    }\n    if (!contains) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return the strings that are a substring of another\n  string in the list.\n  */\nconst containsSubstrings = (lst) => {\n  let len = lst.length\n  let result = []\n  for (let i = 0; i < len; i += 1) {\n    let string = lst[i]\n    for (let j = 0; j < len; j += 1) {\n      if (string.indexOf(lst[j]) > -1) {\n        result.push(string)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return the strings that are not a substring of another\n  string in the list.\n  */\nconst removeContains = (lst) => {\n  let len = lst.length\n  let result = []\n  for (let i = 0; i < len; i += 1) {\n    let string = lst[i]\n    let contains = false\n    for (let j = 0; j < len; j += 1) {\n      if (string.indexOf(lst[j]) > -1) {\n        contains = true\n      }\n    }\n    if (!contains) {\n      result.push(string)\n    }\n  }\n  return result\n}\n\n/*\n  Given a list of strings, return the strings that are not a substring of another\n  string in the list.\n  */\nconst containsContains = (lst) => {\n  let len = lst"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let index = k - 1;\n    let max = arr[0];\n\n    while (index >= 0 && index < k) {\n        if (arr[index] > max) {\n            max = arr[index];\n        }\n        index--;\n    }\n\n    return [...new Array(k).keys()].filter((elem, index) => index < k).map(() => max);\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(solution([3, 3, 3, 3, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const arrLength = arr.length\n  let sum = 0\n\n  for (let i = 0; i < arrLength; i++) {\n    sum += arr[i]\n    if (sum >= k) {\n      break\n    }\n  }\n\n  return sum\n}\n\nexport default addElements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = new Array(n)\n  collatz[0] = 1\n  for(let i = 1; i < n; i++) {\n    collatz[i] = collatz[collatz[i-1] + 1]\n  }\n  let list = []\n  for(let i = 0; i < n; i++) {\n    if(collatz[i] % 2 == 1) {\n      list.push(collatz[i])\n    }\n  }\n  return list\n}\n\n/*\n  getEvenCollatz(3) returns [4, 6, 8, 12, 18, 24, 32, 36, 48, 60, 72, 88, 96, 108, 132, 144, 168, 180, 192, 216, 240, 288, 336, 360, 384, 432, 480, 528, 576, 624, 672, 720, 768, 800, 864, 912, 976, 1008, 1040, 1088, 1144, 1200, 1272, 1328, 1384, 1440, 1536, 1600, 1664, 1728, 1792, 1920, 1984, 2048, 2112, 2176, 2240, 2304, 2368, 2432, 2496, 2560, 2624, 2688, 2752, 2816, 2880, 2944, 3008, 3072, 3136, 3200, 3264, 3328, 3392, 3456, 3520, 3584, 3640, 3712, 3776, 3840, 3808, 3968, 4032, 4096, 4096, 4352, 4416, 4480, 4544, 4608, 4672, 4736, 4800, 4864, 4928, 4992, 5056, 5120, 5184, 5248, 5312, 5376, 5440, 5504, 5568, 5632, 5696, 5760, 5824, 5888, 5952, 6016, 6072, 6136, 6200, 6264, 6328, 6392, 6464, 6528, 6592, 6656, 6720, 6784, 6848, 6912, 6976, 704, 7088, 7152, 7216, 7272, 7336, 7400, 7472, 7656, 7720, 7784, 7848, 7912, 7984, 8048, 8112, 8176, 8240, 8304, 8368, 8432, 8496, 8560, 8624, 8688, 8760, 8824, 8888, 8952, 9016, 9072, 9136, 9200, 9264, 9328, 9392, 9456, 9520, 9584, 9648, 9712, 9776, 9840, 9904, 9968, 10032, 10096, 10160, 10224, 10288, 10352, 10416, 10480, 10544, 10616, 10688, 10760, 10824, 10888, 10952, 11016, 11176, 11240, 11304, 11368, 11432, 11496, 11560, 11644, 11708, 11772, 11836, 11900, 11964, 12128, 12192, 12256, 12320, 12384, 12448, 12512, 12575, 12639, 12703, 12777, 12841, 12897, 12960, 13024, 13088, 13152, 13216, 13280, 13344, 13416, 13488, 13560, 13624, 13688, 13760, 13824, 13888, 13952, 14016, 14072, 14136, 14200, 14264, 14328, 14392, 14456, 14520, 14584, 14648, 14712, 14776, 14840, 14894, 14958, 15022, 15086, 15150, 15214, 15278, 15342, 15406, 15470, 15534, 15598, 15662, 15726, 15790, 15854, 15918, 15982, 16046, 16110, 16174, 16238, 16302, 16366, 16430, 16394, 16458, 16522, 16586, 16650, 16714, 16770, 16834, 16888, 16952, 17016, 17072, 17136, 17200, 17264, 17328, 17392, 17456, 17520, 17584, 17648, 17712, 17776, 17840, 17894, 17958, 18022, 18086, 18150, 18214, 18278, 18342, 18416, 18480, 18544, 18608, 18672, 18736, 18800, 18864, 18928, 18982, 19046, 19110, 19174, 19238, 19302, 19366, 19430, 19494, 19548, 19612, 19646, 19710, 19774, 19828, 19892, 19956, 20020, 20084, 20148, 20112, 20136, 20210, 20274, 20338, 20402, 20456, 20520, 20574, 20638, 20692, 20746, 20790, 20844, 20888, 20942, 20996, 21049, 21113, 21167, 21231, 21285, 21339, 21403, 21457, 21511, 21565, 21619, 21673, 21727,"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  //if (date.length!= 8 || date.length!= 10) return false;\n  if (date.length!= 8) return false;\n  let month = parseInt(date.slice(0, 2));\n  let day = parseInt(date.slice(2, 4));\n  let year = parseInt(date.slice(4, 8));\n  if (!(month >= 1 && month <= 12) ||!(day >= 1 && day <= 31) ||!(year >= 2000 && year <= 2200)) {\n    return false;\n  }\n  let date = new Date(year, month - 1, day);\n  if (date.getFullYear()!= year) return false;\n  if (date.getMonth() + 1!= month) return false;\n  if (date.getDate()!= day) return false;\n  return true;\n};\n\n/*\n  The function validDate(date) is used to check if a date is valid.\n  The date is valid if:\n  1. the date is an number;\n  2. the date is a string that is either a full date or is the beginning of a date.\n  for example:\n  validDate('03-11-2000') => true\n  validDate('15-01-2012') => true\n  validDate('04-0-2040') => true\n  validDate('06-04-2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06/04/2020') => true\n  validDate('06"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  return txt.split(/\\s+/).filter((word) => word.length > 0)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exIsTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords2 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords3 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords4 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\nconst splitWords5 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords6 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords7 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords8 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords9 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords10 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords11 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords12 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitWords13 = (txt) => {\n  return txt.split(/\\s+/)\n}\n\n/* GivEn a sTring Of wOrds, return a list Of woRs, If no words exISTS\n  Examples\n  splitWords(\"Hello world"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  var i,\n    j;\n  for (i = 1; i < lst.length; i++) {\n    if (lst[i - 1] > lst[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// # isSorted({1, 2, 3, 4, 5})\n// true\n// # isSorted([1, 2, 3, 4, 5])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n// true\n// # isSorted([1, 2, 3, 4, 5, 6,"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = interval1[0], end = interval1[1];\n  let s = interval2[0], e = interval2[1];\n  if (start > end || end < s || start < s) {\n    return \"NO\";\n  }\n  const {x, y} = {\n    x: start,\n    y: end\n  };\n  let {x1, y1} = {\n    x1: s,\n    y1: e\n  };\n  while (x1 <= x) {\n    if (y1 < y) {\n      break;\n    }\n    y1 = Math.ceil(y1 / 2);\n    x1 = Math.ceil(x1 / 2);\n  }\n  let {x2, y2} = {\n    x2: e,\n    y2: end\n  };\n  while (x2 >= x) {\n    if (y2 > y) {\n      break;\n    }\n    y2 = Math.floor(y2 / 2);\n    x2 = Math.floor(x2 / 2);\n  }\n  return (x1 <= x2) && (y1 <= y2)? \"YES\" : \"NO\";\n};\n\n// test cases\nconst cases = [\n  [{x: 1, y: 2}, {x: 2, y: 3}],\n  [{x: -1, y: 1}, {x: 0, y: 4}],\n  [{x: -3, y: -1}, {x: -5, y: 5}],\n  [{x: 1, y: 2}, {x: 0, y: 1}],\n  [{x: 2, y: 3}, {x: 1, y: 1}]\n];\n\n// answer\nconst answers = [\n  \"NO\",\n  \"NO\",\n  \"YES\",\n  \"YES\"\n];\n\n// output\nconst output = (intersection, intervals) => {\n  const {x, y} = {\n    x: interval[0],\n    y: interval[1]\n  };\n  const isIntersecting = [...intervals].filter(({x, y}) => x <= y);\n  if (isIntersecting.length) {\n    return `${answers[intersection]}`;\n  } else {\n    return \"NO\";\n  }\n};\n\n// test cases\nconst testCases = [\n  {\n    input: [{x: 1, y: 2}, {x: 2, y: 3}],\n    output: \"NO\"\n  },\n  {\n    input: [{x: -1, y: 1}, {x: 0, y: 4}],\n    output: \"YES\"\n  },\n  {\n    input: [{x: -3, y: -1}, {x: -5, y: 5}],\n    output: \"YES\"\n  },\n  {\n    input: [{x: 1, y: 2}, {x: 0, y: 1}],\n    output: \"YES\"\n  },\n  {\n    input: [{x: 2, y: 3}, {x: 1, y: 1}],\n    output: \"YES\"\n  }\n];\n\n// output\nconst outputTestCases = (intersection, intervals) => {\n  const {x, y} = {\n    x: interval[0],\n    y: interval[1]\n  };\n  const isIntersecting = [...intervals].filter(({x, y}) => x <= y);\n  if (isIntersecting.length) {\n    return `${answers[intersection]}`;\n  } else {\n    return \"NO\";\n  }\n};\n\n// main function\nconst main = () => {\n  const {intersection, intervals} = testCases[Math.floor(Math.random() * testCases.length)];\n  console.log(`input: ${intersection}, ${intervals}`);\n  console.log(`output: ${output(intersection, intervals)}`);\n  console.log(`output: ${outputTestCases(intersection, intervals)}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    } else if (x === 0) {\n      sign = 0\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns8 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns9 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns10 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns11 = (arr) => {\n  let sign = 0\n  for (let x of arr) {\n    if (x === 1) {\n      sign = 1\n    } else if (x === -1) {\n      sign = -1\n    }\n  }\n  return sign\n}\n\n/*\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prod"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  if (grid.length < 2) return [];\n  const [N, Ns] = grid.map(cell => cell.length)\n  const [min, max] = [1, Ns * Ns]\n  const [lsT_A, lsT_B] = grid.map(cell => cell.map(cell => cell.length))\n  const [delta, Deltas] = [1, Ns * Ns]\n  const path = []\n  for (let i = 1; i < k; i++) {\n    for (let j = 0; j < Ns * Ns; j++) {\n      if (lsT_A[j] < lsT_B[j]) {\n        path.push(j)\n        delta++\n      }\n    }\n  }\n  let ans = []\n  while (delta >= Ns * Ns) {\n    ans.push(path.shift())\n    delta--\n  }\n  return ans\n}\n\nexport default minPath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [1]\n  if (n === 1) return [3]\n  if (n === 2) return [1, 3, 2, 8]\n  const last = tri(n - 1)\n  const current = last[0] + last[1]\n  const next = current + last[2]\n  return [next, last[0], last[1], last[2]]\n}\n\nconsole.log(tri(5))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : 0;\n};\n\nconsole.log(digits(1));\nconsole.log(digits(4));\nconsole.log(digits(235));\n\n/*\n  GirE a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits2 = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : 0;\n};\n\nconsole.log(digits2(1));\nconsole.log(digits2(4));\nconsole.log(digits2(235));\n\n/*\n  GirE a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits3 = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : n % 10000? n + 5 : 0;\n};\n\nconsole.log(digits3(1));\nconsole.log(digits3(4));\nconsole.log(digits3(235));\n\n/*\n  GirE a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits4 = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : n % 10000? n + 5 : n % 100000? n + 6 : 0;\n};\n\nconsole.log(digits4(1));\nconsole.log(digits4(4));\nconsole.log(digits4(235));\n\n/*\n  GirE a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits5 = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : n % 10000? n + 5 : n % 100000? n + 6 : n % 1000000? n + 7 : 0;\n};\n\nconsole.log(digits5(1));\nconsole.log(digits5(4));\nconsole.log(digits5(235));\n\n/*\n  GirE a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits6 = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : n % 10000? n + 5 : n % 100000? n + 6 : n % 1000000? n + 7 : n % 10000000? n + 8 : n % 100000000? n + 9 : 0;\n};\n\nconsole.log(digits6(1));\nconsole.log(digits6(4));\nconsole.log(digits6(235));\n\n/*\n  GirE a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits7 = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : n % 10000? n + 5 : n % 100000? n + 6 : n % 1000000? n + 7 : n % 10000000? n + 8 : n % 100000000? n + 9 : n % 1000000000? n + 10 : 0;\n};\n\nconsole.log(digits7(1));\nconsole.log(digits7(4));\nconsole.log(digits7(235));\n\n/*\n  GirE a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits8 = (n) => {\n    return n > 0 && n % 2? n + 1 : n % 10? n + 2 : n % 100? n + 3 : n % 1000? n + 4 : n % 10000? n + 5 : n % 100000? n + 6 : n % 1000000? n + 7 : n % 10000000? n + 8 : n % 100000000? n + 9 : n % 1000000000? n + 10 : n % 10000000000? n + 11 : n % 100000000000? n + 12 : n % 1000000000000? n + 13 : n % 10000000000000? n + 14 : n % 100000000000000? n + 15 : 0;\n};\n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n    const chars = '[]';\n    const opening = 1;\n    const closing = 1;\n    const level = 0;\n    const stack = [];\n    const str = string;\n    const i = 0;\n    let index;\n    while (i < str.length) {\n        if (chars.indexOf(str[i])!== -1) {\n            if (level === opening) {\n                stack.push(str[i]);\n            } else if (level === closing) {\n                if (stack.length === opening) {\n                    level--;\n                } else {\n                    index = stack.pop();\n                    if (chars.indexOf(index)!== -1) {\n                        return false;\n                    }\n                }\n            }\n        }\n        i++;\n    }\n    return stack.length === opening;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const list = lst.slice().sort((a, b) => a - b);\n  const sum = list.reduce((a, b) => a + b, 0);\n  return Math.floor(sum);\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return txt.length > 0 && /^[a-zA-Z]$/.test(txt.charAt(txt.length - 1));\n};\n\n/*  Gets the char at a given positon\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  getCharAtPos(5, \"apple pie\") ➞ \"p\"\n  getCharAtPos(5, \"apple pie \") ➞ \"\"\n  getCharAtPos(5, \"apple pi e\") ➞ \"e\"\n  getCharAtPos(5, \"apple pi e \") ➞ \" \"\n  getCharAtPos(5, \"apple pi e \") ➞ \" \"\n  getCharAtPos(5, \"\") ➞ \"\"\n  */\nconst getCharAtPos = (pos, txt) => {\n  return txt.substring(pos, pos + 1);\n};\n\n/*  Finds the first occurence of a given string in a given string\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  findFirstOccurence(\"apple pie\", \"apple pie \") ➞ 1\n  findFirstOccurence(\"apple pie\", \"apple pie \") ➞ 1\n  findFirstOccurence(\"apple pie\", \"apple pi e \") ➞ 4\n  findFirstOccurence(\"apple pie\", \"apple pi e \") ➞ 4\n  findFirstOccurence(\"apple pie\", \"apple pie\") ➞ 0\n  */\nconst findFirstOccurence = (txt, toFind) => {\n  return txt.indexOf(toFind);\n};\n\n/*  Counts the number of occurrences of a given string in a given string\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  countOccurences(\"apple pie\", \"apple pie \") ➞ 1\n  countOccurences(\"apple pie\", \"apple pie \") ➞ 1\n  countOccurences(\"apple pie\", \"apple pi e \") ➞ 2\n  countOccurences(\"apple pie\", \"apple pie\") ➞ 1\n  */\nconst countOccurences = (txt, toCount) => {\n  let count = 0;\n  for (let i = 0; i < txt.length; i++) {\n    if (txt.substring(i, i + toCount.length) === toCount) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*  Counts the number of characters that are different in a given string\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  countDiffChars(\"apple pie\", \"apple pie \") ➞ 1\n  countDiffChars(\"apple pie\", \"apple pie \") ➞ 1\n  countDiffChars(\"apple pie\", \"apple pi e \") ➞ 0\n  countDiffChars(\"apple pie\", \"apple pie\") ➞ 0\n  */\nconst countDiffChars = (txt1, txt2) => {\n  let count = 0;\n  for (let i = 0; i < txt1.length; i++) {\n    if (txt1.charAt(i)!== txt2.charAt(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*  Gets a random number between 0 and 100\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  getRandomInt(0, 100) ➞ 0\n  getRandomInt(100, 0) ➞ 0\n  getRandomInt(0, 0) ➞ 0\n  */\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n/*  Gets a random number between 0 and a given number\n  nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  getRandomInt(0, 100) ➞ 0\n  getRandomInt(100, 0) ➞ 0\n  getRandomInt(0, 0) ➞ 0\n  */\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return -1;\n  }\n  let i = 0;\n  let j = arrLength - 1;\n  let result = arr[i];\n  while (i < j) {\n    const a = arr[i];\n    const b = arr[j];\n    if (a < b) {\n      j--;\n      result = a;\n    } else if (b < a) {\n      i++;\n    } else {\n      i++;\n      j--;\n    }\n  }\n  return result;\n};\n\nexport default canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = () => lst.reduce((a, b) => Math.max(a, b), -Infinity);\n  const smallest = () => lst.reduce((a, b) => Math.min(a, b), Infinity);\n  const nonEmpty = () => lst.find(x => x!= null && x!= 0);\n  if (!nonEmpty()) {\n    return (null, null);\n  } else {\n    return ([largest(lst), smallest(lst)]);\n  }\n};\n\nconst largestSmallestIntegersTest = () => {\n  const [L, S] = largestSmallestIntegers([2, 4, 1, 3, 5, 7]);\n  console.log('largestSmallestIntegers([2, 4, 1, 3, 5, 7]) ==', L, S);\n  const [L, S] = largestSmallestIntegers([0]);\n  console.log('largestSmallestIntegers([0]) ==', L, S);\n  const [L, S] = largestSmallestIntegers([1]);\n  console.log('largestSmallestIntegers([1]) ==', L, S);\n  const [L, S] = largestSmallestIntegers([2, 4, 1, 3, 5, 7, null, 0]);\n  console.log('largestSmallestIntegers([2, 4, 1, 3, 5, 7, null, 0]) ==', L, S);\n};\n\nlargestSmallestIntegersTest();\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  const retVal = a.toLocaleLowerCase() === b.toLocaleLowerCase();\n  if (retVal) {\n    console.log(`${a} EQUAL ${b}`);\n  } else {\n    console.log(`${a}!EQUAL ${b}`);\n  }\n  return retVal;\n};\n\nconSt compareOne = (a, b) => {\n  const retVal = a.toLocaleLowerCase() === b.toLocaleLowerCase();\n  if (retVal) {\n    console.log(`${a} EQUAL ${b}`);\n  } else {\n    console.log(`${a}!EQUAL ${b}`);\n  }\n  return retVal;\n};\n\n/*\n  The functions compareTo and compaRsE are used to compare two vAriables,\n  in the same way that compareOne does.  However, they take a single argument\n  that is the string that represents the variable to be compared.  For example,\n  compareTo(2, 3) ➞ \"2 is greater than 3\"\n  compareTo(2, \"3\") ➞ \"2 is greater than 3\"\n  compareTo(\"2\", 2) ➞ \"2 is greater than 3\"\n  compareTo(\"2\", \"2\") ➞ \"2 is equal to 2\"\n  compareTo(\"2\", \"3\") ➞ \"2 is greater than 3\"\n  compareTo(\"2\", 3) ➞ \"2 is greater than 3\"\n  */\n\nconSt compareTo = (a, b) => {\n  const retVal = a.toLocaleLowerCase() === b.toLocaleLowerCase();\n  if (retVal) {\n    console.log(`${a} EQUAL ${b}`);\n  } else {\n    console.log(`${a}!EQUAL ${b}`);\n  }\n  return retVal;\n};\n\nconSt compareTo = (a, b) => {\n  const retVal = a.toLocaleLowerCase() === b.toLocaleLowerCase();\n  if (retVal) {\n    console.log(`${a} EQUAL ${b}`);\n  } else {\n    console.log(`${a}!EQUAL ${b}`);\n  }\n  return retVal;\n};\n\nconSt compareTo = (a, b) => {\n  const retVal = a.toLocaleLowerCase() === b.toLocaleLowerCase();\n  if (retVal) {\n    console.log(`${a} EQUAL ${b}`);\n  } else {\n    console.log(`${a}!EQUAL ${b}`);\n  }\n  return retVal;\n};\n\nconSt compareTo = (a, b) => {\n  const retVal = a.toLocaleLowerCase() === b.toLocaleLowerCase();\n  if (retVal) {\n    console.log(`${a} EQUAL ${b}`);\n  } else {\n    console.log(`${a}!EQUAL ${b}`);\n  }\n  return retVal;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const num = parseInt(n)\n  return num % 2 === 0\n}\n\nmodule.exports = isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    return n < 2? 1 : n * specialFactorial(n - 1) + specialFactorial(n - 2);\n};\n\nconst specialFactorial2 = (n) => {\n    return n * specialFactorial(n - 1);\n};\n\nconsole.log(specialFactorial(3));\nconsole.log(specialFactorial(4));\nconsole.log(specialFactorial2(3));\nconsole.log(specialFactorial2(4));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  if(!text) return text\n  let arr = text.split(\" \")\n  let fixed = arr.map((item) => {\n    return item.replace(/-/g, \"_\")\n  })\n  return fixed.join(\" \")\n}\n\nconst main = () => {\n  let text = prompt(\"Please Enter some text\")\n  console.log(fixSpaces(text))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n\tif(typeof file_name!=='string'){\n\t\tthrow new Error('Please pass a string as the param of file_name');\n\t}\n\tconst regex = /^[a-zA-Z0-9_\\-]+$/;\n\tif(!regex.test(file_name)){\n\t\treturn 'No';\n\t}\n\treturn 'Yes';\n}\n\n/*\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A fiLe's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n\tif(typeof file_name!=='string'){\n\t\tthrow new Error('Please pass a string as the param of file_name');\n\t}\n\tconst regex = /^[a-zA-Z0-9_\\.\\-]+$/;\n\tif(!regex.test(file_name)){\n\t\treturn 'No';\n\t}\n\treturn 'Yes';\n}\n\nconst file_name_check = (file_name) => {\n\tconst regex = /^[a-zA-Z0-9_\\-]+$/;\n\tif(!regex.test(file_name)){\n\t\treturn 'No';\n\t}\n\treturn 'Yes';\n}\n\nmodule.exports = {\n\tfileNameCheck,\n\tfileNameCheck2\n}<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sumOfSquares = 0\n  lst.forEach((e) => {\n    let val = Math.pow(e, 2)\n    sumOfSquares += val\n  })\n  return sumOfSquares\n}\n\n/*\n  ThiS funCtion wilL return the Sum Of All the inTegers.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  let sum = 0\n  lst.forEach((e) => {\n    sum += e\n  })\n  return sum\n}\n\n/*\n  ThiS funCtion wilL take a List of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 And WiLl cubE the intEGeR ENtrY iF ITs a mulTipLe oF 4. tHe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst product = (lst) => {\n  let product = 1\n  lst.forEach((e) => {\n    product *= e\n  })\n  return product\n}\n\n/*\n  ThiS funCtion wilL take a List of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shaLl then return the sum of the squares of the inTegers. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumOfSquares = (lst) => {\n  let sumOfSquares = 0\n  lst.forEach((e) => {\n    sumOfSquares += Math.pow(e, 2)\n  })\n  return sumOfSquares\n}\n\nconst test = () => {\n  let lst = [1,2,3,4,5]\n  console.log(sum(lst))\n  console.log(sumSquares(lst))\n  console.log(sumOfSquares(lst))\n  console.log(product(lst))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const letterCount = {},\n    len = sentence.length;\n  let i = 0;\n\n  while (i < len) {\n    let char = sentence.charAt(i);\n    if (char in letterCount) {\n      letterCount[char]++;\n    } else {\n      letterCount[char] = 1;\n    }\n    i++;\n  }\n\n  const letterCountKeys = Object.keys(letterCount);\n\n  let result = [];\n  for (let key of letterCountKeys) {\n    if (letterCount[key] === 1) {\n      result.push(key);\n    }\n  }\n\n  return result;\n};\n\nconsole.log(wordsInSentence(\"This is a test\"));\nconsole.log(wordsInSentence(\"lets go for swimming\"));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n  const x_num = parseInt(x)\n  const x_den = parseInt(n)\n  return x_num / x_den === 1\n}\n\nexport default simplify\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let res = [];\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      let sum = nums[i] + nums[j];\n      if (sum > 0) {\n        if (nums[i] > 0 && nums[j] > 0) {\n          res.push(nums[i] + nums[j]);\n        } else if (nums[i] < 0 && nums[j] < 0) {\n          res.push(nums[i] + nums[j]);\n        }\n      }\n    }\n  }\n  return res;\n};\n\nmodule.exports = orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  if (!Array.isArray(nums)) {\n    throw new TypeError('The parameter must be an array.');\n  }\n\n  let res = 0;\n  let num = 0;\n  let n = nums.length;\n\n  for (let i = 0; i < n; i++) {\n    num = nums[i];\n    if (num > 10 && num < 100) {\n      res++;\n    }\n  }\n\n  return res;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); //1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); //2\nconsole.log(specialFilter([1, 3, 5, 7, 9])); //0\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let max = 0\n  let a = [1]\n  let b = [1]\n  for (let i = 2; i <= n; i++) {\n    a = a.concat(Array.from(Array(i).fill(i - 1).map(() => i * i - i + 1)))\n  }\n  for (let i = 1; i <= n; i++) {\n    b = b.concat(Array.from(Array(i).fill(i + 1).map(() => i * i + i)))\n  }\n  for (let i = 1; i <= n; i++) {\n    for (let j = i + 1; j <= n; j++) {\n      for (let k = j + 1; k <= n; k++) {\n        if (a[i] + a[j] + a[k] > max) {\n          max = a[i] + a[j] + a[k]\n          console.log(max)\n        }\n      }\n    }\n  }\n  return max\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let i = 1;\n  let x = (function() {\n    let t = 0;\n    while (i <= 0) {\n      t += (Math.random() * 2) - 1;\n      i += (Math.random() * 2) - 1;\n    }\n    return t;\n  })();\n  let x1 = 0;\n  let x2 = 0;\n  let x3 = 0;\n  let x4 = 0;\n  let x5 = 0;\n  let x6 = 0;\n  let x7 = 0;\n  let x8 = 0;\n  let x9 = 0;\n  let x10 = 0;\n  let x11 = 0;\n  let x12 = 0;\n  let x13 = 0;\n  let x14 = 0;\n  let x15 = 0;\n  let x16 = 0;\n  let x17 = 0;\n  let x18 = 0;\n  let x19 = 0;\n  let x20 = 0;\n  let x21 = 0;\n  let x22 = 0;\n  let x23 = 0;\n  let x24 = 0;\n  let x25 = 0;\n  let x26 = 0;\n  let x27 = 0;\n  let x28 = 0;\n  let x29 = 0;\n  let x30 = 0;\n  let x31 = 0;\n  let x32 = 0;\n  let x33 = 0;\n  let x34 = 0;\n  let x35 = 0;\n  let x36 = 0;\n  let x37 = 0;\n  let x38 = 0;\n  let x39 = 0;\n  let x40 = 0;\n  let x41 = 0;\n  let x42 = 0;\n  let x43 = 0;\n  let x44 = 0;\n  let x45 = 0;\n  let x46 = 0;\n  let x47 = 0;\n  let x48 = 0;\n  let x49 = 0;\n  let x50 = 0;\n  let x51 = 0;\n  let x52 = 0;\n  let x53 = 0;\n  let x54 = 0;\n  let x55 = 0;\n  let x56 = 0;\n  let x57 = 0;\n  let x58 = 0;\n  let x59 = 0;\n  let x60 = 0;\n  let x61 = 0;\n  let x62 = 0;\n  let x63 = 0;\n  let x64 = 0;\n  let x65 = 0;\n  let x66 = 0;\n  let x67 = 0;\n  let x68 = 0;\n  let x69 = 0;\n  let x70 = 0;\n  let x71 = 0;\n  let x72 = 0;\n  let x73 = 0;\n  let x74 = 0;\n  let x75 = 0;\n  let x76 = 0;\n  let x77 = 0;\n  let x78 = 0;\n  let x79 = 0;\n  let x80 = 0;\n  let x81 = 0;\n  let x82 = 0;\n  let x83 = 0;\n  let x84 = 0;\n  let x85 = 0;\n  let x86 = 0;\n  let x87 = 0;\n  let x88 = 0;\n  let x89 = 0;\n  let x90 = 0;\n  let x91 = 0;\n  let x92 = 0;\n  let x93 = 0;\n  let x94 = 0;\n  let x95 = 0;\n  let x96 = 0;\n  let x97 = 0;\n  let x98 = 0;\n  let x99 = 0;\n  let x100 = 0;\n  let x101 = 0;\n  let x102 = 0;\n  let x103 = 0;\n  let x104 = 0;\n  let x105 = 0;\n  let x106 = 0;\n  let x107 = 0;\n  let x108 = 0;\n  let x109 = 0;\n  let x110 = 0;\n  let x111 = 0;\n  let x112 = 0;\n  let x113 = 0;\n  let x114 = 0;\n  let x115 = 0;\n  let x116 = 0;\n  let x117 = 0;\n  let x118 = 0;\n  let x119 = 0;\n  let x120 = 0;\n  let x121 = 0;\n  let x122 = 0;\n  let x123 = 0;\n  let x124 = 0;\n  let x125 = 0;\n  let x126 = 0;\n  let x127 = 0;\n  let x128 = 0;\n  let x129 = 0;\n  let x130 = 0;\n  let x131 = 0;\n  let x132 = 0;\n  let x133 = 0;\n  let x134 = 0;\n  let x135 = 0;\n  let x136 = 0;\n  let x137 = 0;\n  let x138 = 0;\n  let x139 = 0;\n  let x140 = 0;\n  let x141 = 0;\n  let x142 = 0;\n  let x143 = 0;\n  let x144 ="}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let len = lst.length\n  if(len < 1) {\n    return []\n  }\n\n  let lenLst = lst.length\n\n  // sort the list alpahbetically\n  let list = lst.sort()\n\n  // create an array of strings of lenghts 1\n  let list2 = list.map(v => [v])\n\n  // create an array of strings of lenghts 2\n  let list3 = list.map((v, i) => [v, list[i + 1]])\n\n  // sum the elements of the lists and create a new list\n  let list4 = list.reduce((a, b) => [a, b])\n\n  // return the list\n  return list4\n}\n\n// Test Cases\n// ['a', 'b', 'c'] => ['a', 'b', 'c']\n// ['aa', 'a', 'aaa'] => ['aa', 'a', 'aaa']\n// ['aa', 'a', 'aaa', 'cd'] => ['aa', 'a', 'aaa', 'cd']\n// ['aa', 'a', 'aaa', 'cd', 'dd'] => ['aa', 'a', 'aaa', 'cd', 'dd']\n// ['aa', 'a', 'aaa', 'aa', 'a', 'aaa'] => ['aa', 'a', 'aaa', 'aa', 'a', 'aaa']\n// ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'] => ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd']\n// ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'] => ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd']\n// ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'] => ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd']\n// ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'] => ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd']\n// ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'] => ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd']\n// ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'] => ['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd']\n\nconst test = (list) => {\n  console.log(sortedListSum(list))\n}\n\ntest(['aa', 'a', 'aaa'])\ntest(['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'])\ntest(['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'])\ntest(['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'cd', 'dd'])\ntest(['aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a', 'aaa', 'aa', 'a',"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return xOrYRec(n, x, y, 0, 0);\n}\n\nconst xOrYRec = (n, x, y, xO, yO) => {\n  if(n === 0) {\n    return yO;\n  }\n  const xIsGreater = x > y;\n  const yIsGreater = y > x;\n  if(xIsGreater && yIsGreater) {\n    return xOrYRec(n-1, x, y, xO, yO+x);\n  } else if(!xIsGreater &&!yIsGreater) {\n    return xOrYRec(n-1, x, y, xO, yO);\n  } else {\n    return xOrYRec(n-1, x, y, xO, yO+y);\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  let result = 0\n  lst.forEach((item) => {\n    if (item > 0) {\n      result += item * item\n    }\n  })\n  return result\n}\n\nexport const isPrime = (number) => {\n  if (number > 1) {\n    let temp = Math.sqrt(number)\n    for (let i = 2; i < temp; i++) {\n      if (number % i === 0) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nexport const sumOfPrimes = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nexport const givEn = (list) => {\n  let result = 1\n  for (let i = 1; i < list.length; i++) {\n    if (isPrime(list[i])) {\n      result *= list[i]\n    }\n  }\n  return result\n}\n\nexport const factorial = (number) => {\n  let result = 1\n  for (let i = 1; i <= number; i++) {\n    result *= i\n  }\n  return result\n}\n\nexport const givEnFactorial = (number) => {\n  let result = 1\n  for (let i = 1; i <= number; i++) {\n    result *= factorial(i)\n  }\n  return result\n}\n\nexport const find_sum_of_primes = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*\n  GIVEn a list oF numbErs, return The sqUares of The NumbeRs\n  in tHe list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nexport const doubleTheDifference = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0) {\n      result += lst[i] * lst[i]\n    }\n  }\n  return result\n}\n\n/*\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nexport const sumOfSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\nexport const givEnSumOfSquares = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i]\n  }\n  return result\n}\n\n/*\n  GIVEn a list oF numbErs, return The numbeRs in tHe list tHaT\n  are ODD.\n  [1, 2, 3, 4, 5] == [1, 3, 5, 7, 9]\n  [-1, -2, -3, -4, -5] == [1, 3, 5, 7, 9]\n  [9, -2] == [9, 9]\n  [0] == [0]\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nexport const odds = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nexport const evens = (lst) => {\n  let result = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      result.push(lst[i])\n    }\n  }\n  return result\n}\n\n/*\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nexport const sumOfOdds = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let gameAsArray = game.split('').map(number => parseInt(number))\n  let guessAsArray = guess.split('').map(number => parseInt(number))\n\n  let result = gameAsArray.map(guessAsArray, (n1, n2) => {\n    if (n1 > n2) return 0\n    if (n1 < n2) return 1\n    return 0\n  })\n\n  result = result.filter(num => num === 0)\n\n  if (result.length === 0) return -1\n  if (result.length === 1) return result[0]\n\n  return 0\n}\n\n//export default compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  // check input\n  if (!class_name) {\n    throw new TypeError('class_name cannot be empty');\n  }\n  if (!extensions) {\n    throw new TypeError('extensions cannot be empty');\n  }\n  if (!Array.isArray(extensions)) {\n    throw new TypeError('extensions must be an array');\n  }\n\n  // sort the list\n  extensions.sort((a, b) => a.toLowerCase().localeCompare(b.toLowerCase()));\n\n  // find the strongest extension\n  let strongest = extensions[0].toLowerCase();\n  for (let i = 1; i < extensions.length; i++) {\n    if (extensions[i].localeCompare(extensions[i - 1]).toLowerCase() > 0) {\n      strongest = extensions[i].toLowerCase();\n    }\n  }\n\n  return class_name + '.' + strongest;\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  let a1 = a.split(' ');\n  let b1 = b.split(' ');\n\n  let b1length = b1.length;\n  let a1length = a1.length;\n\n  if (a1length!= b1length) {\n    return false;\n  }\n\n  for (let i = 0; i < a1length; i++) {\n    if (a1[i]!= b1[i]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = cycpatternCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let x = 0;\n  while (num > 0) {\n    if (num % 2 === 1) {\n      x += 1;\n    }\n    num = num / 2;\n  }\n  return (x, num);\n};\n\n/*\n  Take a tuple (n, d) return the nUmber of dIGiTs RespECtiVely.\n\n  Example:\n      (1, 1) ==> 1\n      (2, 1) ==> 1\n      (2, 2) ==> 2\n      (3, 2) ==> 2\n      (1, 3) ==> 3\n      (2, 3) ==> 3\n      (3, 3) ==> 3\n      (4, 3) ==> 3\n      (3, 4) ==> 3\n      (4, 4) ==> 4\n      (5, 4) ==> 4\n      (4, 5) ==> 4\n      (5, 5) ==> 5\n      (6, 5) ==> 5\n      (5, 6) ==> 5\n      (6, 6) ==> 6\n      (7, 6) ==> 6\n      (6, 7) ==> 6\n      (7, 7) ==> 7\n      (8, 7) ==> 7\n      (7, 8) ==> 7\n      (8, 8) ==> 8\n      (9, 8) ==> 8\n      (8, 9) ==> 8\n      (9, 9) ==> 9\n      (10, 9) ==> 9\n      (9, 10) ==> 9\n      (10, 10) ==> 10\n      (11, 10) ==> 10\n      (10, 11) ==> 10\n      (11, 11) ==> 11\n      (12, 11) ==> 11\n      (11, 12) ==> 11\n      (12, 12) ==> 12\n      (13, 12) ==> 12\n      (12, 13) ==> 12\n      (13, 13) ==> 13\n      (14, 13) ==> 13\n      (13, 14) ==> 13\n      (14, 14) ==> 14\n      (15, 14) ==> 14\n      (14, 15) ==> 14\n      (15, 15) ==> 15\n      (16, 15) ==> 15\n      (15, 16) ==> 15\n      (16, 16) ==> 16\n      (17, 16) ==> 16\n      (16, 17) ==> 16\n      (17, 17) ==> 17\n      (18, 17) ==> 17\n      (17, 18) ==> 17\n      (18, 18) ==> 18\n      (19, 18) ==> 18\n      (18, 19) ==> 18\n      (19, 19) ==> 19\n      (20, 19) ==> 19\n      (19, 20) ==> 19\n      (20, 20) ==> 20\n      (21, 20) ==> 20\n      (20, 21) ==> 20\n      (21, 21) ==> 21\n      (22, 21) ==> 21\n      (21, 22) ==> 21\n      (22, 22) ==> 22\n      (23, 22) ==> 22\n      (22, 23) ==> 22\n      (23, 23) ==> 23\n      (24, 23) ==> 23\n      (23, 24) ==> 23\n      (24, 24) ==> 24\n      (25, 24) ==> 24\n      (24, 25) ==> 24\n      (25, 25) ==> 25\n      (26, 25) ==> 25\n      (25, 26) ==> 25\n      (26, 26) ==> 26\n      (27, 26) ==> 26\n      (26, 27) ==> 26\n      (27, 27) ==> 27\n      (28, 27) ==> 27\n      (27, 28) ==> 27\n      (28, 28) ==> 28\n      (29, 28) ==> 28\n      (28, 29) ==> 28\n      (29, 29) ==> 29\n      (30, 29) ==> 29\n      (29, 30) ==> 29\n      (30, 30) ==> 30\n      (31, 30) ==> 30\n      (30, 31) ==> 30\n      (31, 31) ==> 31\n      (32, 31) ==> 31\n      (31, 32) ==> 31\n      (32, 32) ==> 32\n      (33, 32) ==> 32\n      (32, 33) ==> 32\n      (33, 33) ==> 33\n      (34, 33) ==> 33\n      (33, 34) ==> 33\n      (34, 34) ==> 34\n      (35, 34) ==> 34\n      (34, 35) ==> 34\n      (35, 35) ==> 35\n      (36, 35) ==> 35\n      (35, 36) ==> 35\n      (36, 36) ==> 36\n      (37, 36) ==> 36\n      (36, 37) ==> 36\n      (37, 37) ==> 37\n      (38, 37) ==> 37\n      (37, 38) ==> 37\n      (38, 38) ==> 38\n      (39, 38) ==> 38\n      (38, 39) ==> 38\n      (39, 39) ==> 39\n      (40, 39) ==> 39\n      (39, 40) ==> 39\n      (40, 40) ==> 40\n      (41, 40) ==> 40\n      (40, 41) ==> 40\n      (41, 41) ==> 41\n      (42, 41) ==> 41\n      (41, 42) ==> 41\n      (42, 42) ==> 42\n      (43, 42) ==> 42\n      (42, 43) ==> 42\n      (43, 43) ==> 43\n      (44, 43) ==> 43\n      (43, 44) ==> 43\n      (44, 44) ==> 44\n      (45, 44) ==> 44\n      (44, 45) ==> 44\n      (45, 45) ==> 45\n      (46, 45) ==> 45\n      (45, 46) ==> 45\n      (46, 46)"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if (number <= 1) {\n    return 'I'\n  }\n  if (number <= 3) {\n    return 'II'\n  }\n  if (number <= 6) {\n    return 'III'\n  }\n  if (number <= 9) {\n    return 'IV'\n  }\n  if (number <= 13) {\n    return 'V'\n  }\n  if (number <= 15) {\n    return 'VI'\n  }\n  if (number <= 17) {\n    return 'VII'\n  }\n  if (number <= 19) {\n    return 'VIII'\n  }\n  if (number <= 21) {\n    return 'IX'\n  }\n  if (number <= 23) {\n    return 'X'\n  }\n  if (number <= 25) {\n    return 'XI'\n  }\n  if (number <= 27) {\n    return 'XII'\n  }\n  if (number <= 29) {\n    return 'XIII'\n  }\n  if (number <= 31) {\n    return 'XIV'\n  }\n  if (number <= 33) {\n    return 'XV'\n  }\n  if (number <= 35) {\n    return 'XVI'\n  }\n  if (number <= 37) {\n    return 'XVII'\n  }\n  if (number <= 39) {\n    return 'XVIII'\n  }\n  if (number <= 41) {\n    return 'XIX'\n  }\n  if (number <= 43) {\n    return 'XX'\n  }\n  if (number <= 45) {\n    return 'XXI'\n  }\n  if (number <= 47) {\n    return 'XXII'\n  }\n  if (number <= 49) {\n    return 'XXIII'\n  }\n  if (number <= 51) {\n    return 'XXIV'\n  }\n  if (number <= 53) {\n    return 'XXV'\n  }\n  if (number <= 55) {\n    return 'XXVI'\n  }\n  if (number <= 57) {\n    return 'XXVII'\n  }\n  if (number <= 59) {\n    return 'XXVIII'\n  }\n  if (number <= 61) {\n    return 'XXIX'\n  }\n  if (number <= 63) {\n    return 'XXX'\n  }\n  if (number <= 65) {\n    return 'XXXI'\n  }\n  if (number <= 67) {\n    return 'XXXII'\n  }\n  if (number <= 69) {\n    return 'XXXIII'\n  }\n  if (number <= 71) {\n    return 'XXXIV'\n  }\n  if (number <= 73) {\n    return 'XXXV'\n  }\n  if (number <= 75) {\n    return 'XXXVI'\n  }\n  if (number <= 77) {\n    return 'XXXVII'\n  }\n  if (number <= 79) {\n    return 'XXXVIII'\n  }\n  if (number <= 81) {\n    return 'XXXIX'\n  }\n  if (number <= 83) {\n    return 'XXL'\n  }\n  if (number <= 85) {\n    return 'XXLI'\n  }\n  if (number <= 87) {\n    return 'XXLII'\n  }\n  if (number <= 89) {\n    return 'XXLIII'\n  }\n  if (number <= 91) {\n    return 'XXLIV'\n  }\n  if (number <= 93) {\n    return 'XXLV'\n  }\n  if (number <= 95) {\n    return 'XXLVI'\n  }\n  if (number <= 97) {\n    return 'XXLVII'\n  }\n  if (number <= 99) {\n    return 'XXLIX'\n  }\n  if (number <= 101) {\n    return 'XL'\n  }\n  if (number <= 103) {\n    return 'XLI'\n  }\n  if (number <= 105) {\n    return 'XLII'\n  }\n  if (number <= 107) {\n    return 'XLIII'\n  }\n  if (number <= 109) {\n    return 'XLIV'\n  }\n  if (number <= 111) {\n    return 'XLV'\n  }\n  if (number <= 113) {\n    return 'XLVI'\n  }\n  if (number <= 115) {\n    return 'XLVII'\n  }\n  if (number <= 117) {\n    return 'XLVIII'\n  }\n  if (number <= 119) {\n    return 'XLIX'\n  }\n  if (number <= 121) {\n    return 'L'\n  }\n  if (number <= 123) {\n    return 'LI'\n  }\n  if (number <= 125) {\n    return 'LII'\n  }\n  if (number <= 127) {\n    return 'LIII'\n  }\n  if (number <= 129) {\n    return 'LIV'\n  }\n  if (number <= 131) {\n    return 'LV'\n  }\n  if (number <= 133) {\n    return 'LVI'\n  }\n  if (number <= 135) {\n    return 'LVII'\n  }\n  if (number <= 137) {\n    return 'LVIII'\n  }\n  if (number <= 139) {\n    return 'LIX'\n  }\n  if (number <= 141) {\n    return 'LX'\n  }\n  if (number <= 143) {\n    return 'LXI'\n  }\n  if (number <= 145) {\n    return 'LXII'\n  }\n  if (number <= 147) {\n    return 'LXIII'\n  }\n  if (number <= 149) {\n    return 'LXIV'\n  }\n  if (number <= 151) {\n    return 'LXLV'\n  "}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    return (a + b <= c && b + c <= a && a + c <= b);\n};\n\n/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGLE in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n    return (a < b && b < c && c < a)\n};\n\nconst triangle = (a, b, c) => {\n    return {\n        isRightAngleTriangle: rightAngleTriangle(a, b, c),\n        isRightAngleTriangle2: rightAngleTriangle2(a, b, c)\n    };\n};\n\nexport default triangle;<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  const count = (x) => words.count(x)\n  const unique = (x) => {\n    const lst = words.filter(x)\n    return lst.length === 1? lst[0] : null\n  }\n  const list = words.filter(unique)\n  const max = list.reduce((a, b) => count(b) > count(a)? b : a, \"\")\n  return max\n}\n\n/*\n  CoNst isEmpty = (x) => x === null || x === \"\" || x === undefined\n  CoNst isEmpty = [\"\", {}, []]\n  */\nCoNst isEmpty = (x) => x === null || x === \"\" || x === undefined\n\n/*\n  CoNst isEmpty = ([], [1, 2, 3], \"\")\n  */\nCoNst isEmpty = ([], [1, 2, 3], \"\")\n\n/*\n  CoNst isEmpty = [\"\", [], []]\n  */\nCoNst isEmpty = (\"\", [], [])\n\n/*\n  CoNst isEmpty = [\"\", {}, []]\n  */\nCoNst isEmpty = (\"\", {}, [])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], \"\"]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], \"\")\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", [1, 2, 3], [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", [1, 2, 3], [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", {}, [1, 2, 3]]\n  */\nCoNst isEmpty = (\"\", {}, [1, 2, 3])\n\n/*\n  CoNst isEmpty = [\"\", ["}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let count = 0;\n  while (count < need) {\n    if (number >= remaining) {\n      result.push(remaining);\n      break;\n    }\n    result.push(number);\n    number -= remaining;\n    count += remaining;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const result = [];\n    const operatorLength = operator.length;\n    const operandLength = operand.length;\n    if(operatorLength > operandLength)\n        return operand;\n    let i = 0;\n    let j = 0;\n    while(i < operatorLength && j < operandLength) {\n        result.push(operator[i++] + operand[j++]);\n    }\n    return result;\n}\n\nconst print = (operator, operand) => {\n    const operatorLength = operator.length;\n    const operandLength = operand.length;\n    let i = 0;\n    let j = 0;\n    while(i < operatorLength && j < operandLength) {\n        console.log(operator[i++] +'' + operand[j++]);\n    }\n}\n\nconst solve = (operator, operand) => {\n    return operator.reduce((previous, current, index) => {\n        return previous + current * operand[index];\n    }, 0);\n}\n\nconst main = (operator, operand) => {\n    console.log('Solving for'+ operator +'and'+ operand);\n    const operatorLength = operator.length;\n    const operandLength = operand.length;\n    const result = doAlgebra(operator, operand);\n    const solution = solve(result, operand);\n    print(operator, result);\n    console.log(solution);\n}\n\nmain(['+', '*', '-'], [2, 3, 4, 5]);\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let len = s.length;\n    let st = s.split(\"\");\n    let ret = \"\";\n    let cnt = 0;\n    let i = 0;\n    for (i = 0; i < len; i++) {\n        if (st[i] === '#') {\n            cnt++;\n            ret += st[i];\n        } else if (cnt > 0) {\n            ret += st[i];\n            cnt--;\n        }\n    }\n    return ret;\n}\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex')\n}\n\nexport default stringToMd5\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  var i = a,\n    j = b,\n    list = [],\n    diff = b - a;\n\n  while (i < j) {\n    list.push(i);\n    i++;\n  }\n\n  return list;\n}\n\nexport default generateIntegers;\n<|endoftext|>"}
