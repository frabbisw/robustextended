{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || Math.abs(num - threshold) < 0.0001;\n  });\n  return isClose;\n};\n\n/*\n  Check if any two numbers from given list of numbers, clOser to eAch other ThaN\n  threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.5)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 3.0)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 3.0)\n  false\n  */\nconst hasCloseElementsInArray = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || Math.abs(num - threshold) < 0.0001;\n  });\n  return isClose;\n};\n\nconst isCloseTo = (a, b, threshold) => {\n  return Math.abs(a - b) < threshold;\n};\n\n/*\n  Check if any two numbers from given list of numbers, clOser to eAch other ThaN\n  threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.5)\n  true\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 3.0)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 3.0)\n  false\n  */\nconst hasCloseElementsInArray = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n  numbers.forEach(num => {\n    isClose = isClose || isCloseTo(num, numbers[0], threshold) || isCloseTo(num, 0, threshold);\n  });\n  return isClose;\n};\n\nconst hasCloseElementsInArrayIncludingZero = (numbers, threshold) => {\n  let isClose = false;\n"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const all_paren_strings = paren_string.split('');\n  const new_strings = [];\n  const paren_match_obj = new RegExp(/\\((.*?)\\)+/g);\n  const paren_string_match_obj = new RegExp(/\\((.*?)\\)/g);\n  const paren_match_strings = paren_string_match_obj.exec(paren_string);\n  const paren_match_strings_arr = paren_match_strings.filter(\n    (match_str) => match_str!== ''\n  );\n  const paren_match_strings_arr_new = paren_match_strings_arr.map(\n    (match_str) =>\n      paren_match_obj.exec(match_str)\n       ? `(${match_str})`\n        : match_str\n  );\n  paren_match_strings_arr_new.forEach((match_str, index) => {\n    const match_str_new = paren_match_strings_arr_new[index];\n    if (match_str_new!== undefined) {\n      new_strings.push(match_str_new);\n    }\n  });\n  return new_strings;\n};\n\nmodule.exports = separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number <= 0) {\n    return 0\n  }\n  const decimalPart = number - Math.floor(number)\n  const fractionPart = decimalPart * 10\n  const maxFractionPart = Math.pow(10, number.toString().length) - 1\n  const fractionPartInDigit = (fractionPart * 10) % maxFractionPart\n  const maxDecimalPart = maxFractionPart / 10\n  const integerPart = number - fractionPartInDigit\n  const maxIntegerPart = Math.pow(10, number.toString().length) - 1\n  const integerPartInDigit = (integerPart * 10) % maxIntegerPart\n  return Math.round(integerPartInDigit / 10)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0\n  for (let i = 0; i < operations.length; i++) {\n    sum += operations[i]\n  }\n  return sum === 0\n}\n\nmodule.exports = belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return (list) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.abs(numbers[i] - (Math.floor(numbers[i] / 2) + 1));\n    }\n    return sum / (numbers.length);\n  };\n};\n\n// ### Mean Squared Deviation\n// For A givEn list of iNpuT numbers, calcUlate mean Squared DevIatIOn\n// MEAN Square AbsOlute Deviation is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n// elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n// MAD² = aVerAgE | x - X_MEAn |²\n// >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\n// */\nconst meanSquaredDeviation = (numbers) => {\n  return (list) => {\n    let sum = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      sum += Math.pow(numbers[i] - (Math.floor(numbers[i] / 2) + 1), 2);\n    }\n    return sum / (numbers.length);\n  };\n};\n\nexport {\n  abs,\n  absAbsoluteDeviation,\n  absAbsoluteDeviation,\n  absMeanAbsoluteDeviation,\n  absMeanAbsoluteDeviation,\n  absMeanSquaredDeviation,\n  absMeanSquaredDeviation,\n  absSquaredDeviation,\n  absSquaredDeviation,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,\n  average,"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length\n\n  // `len - 1` if there is enough numbers\n  if (len >= 2) {\n    let arr = []\n\n    for (let i = 0; i < len - 1; i++) {\n      arr.push(numbers[i])\n      arr.push(delimeter)\n    }\n\n    arr.push(numbers[len - 1])\n\n    return arr\n  }\n\n  return numbers\n}\n\n/*\n  >>> intersperse([], '.')\n  []\n  >>> intersperse([1, 2, 3], '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], '.', 1)\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', 1)\n  [1, 2, 3]\n  */\nconst intersperseWith = (numbers, delimeter, delimiter) => {\n  const len = numbers.length\n\n  // `len - 1` if there is enough numbers\n  if (len >= 2) {\n    let arr = []\n\n    for (let i = 0; i < len - 1; i++) {\n      arr.push(numbers[i])\n      arr.push(delimeter)\n      arr.push(delimiter)\n    }\n\n    arr.push(numbers[len - 1])\n\n    return arr\n  }\n\n  return numbers\n}\n\n/*\n  >>> intersperse([], '.')\n  []\n  >>> intersperse([1, 2, 3], '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], '.', 1)\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', 1)\n  [1, 2, 3]\n  */\nconst intersperseWithFirst = (numbers, delimeter, delimiter) => {\n  const len = numbers.length\n\n  // `len - 1` if there is enough numbers\n  if (len >= 2) {\n    let arr = []\n\n    for (let i = 0; i < len - 1; i++) {\n      arr.push(numbers[i])\n      arr.push(delimeter)\n      arr.push(delimiter)\n    }\n\n    arr.push(numbers[len - 1])\n\n    return arr\n  }\n\n  return numbers\n}\n\n/*\n  >>> intersperse([], '.')\n  []\n  >>> intersperse([1, 2, 3], '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], '.', 1)\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', 1)\n  [1, 2, 3]\n  */\nconst intersperseWithLast = (numbers, delimeter, delimiter) => {\n  const len = numbers.length\n\n  // `len - 1` if there is enough numbers\n  if (len >= 2) {\n    let arr = []\n\n    for (let i = 0; i < len - 1; i++) {\n      arr.push(numbers[i])\n      arr.push(delimeter)\n      arr.push(delimiter)\n    }\n\n    arr.push(numbers[len - 1])\n\n    return arr\n  }\n\n  return numbers\n}\n\n/*\n  >>> intersperse([], '.')\n  []\n  >>> intersperse([1, 2, 3], '.')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], '.', 1)\n  [1, 2, 3]\n  >>> intersperse([1, 2, 3], 'x', 1)\n  [1, 2, 3]\n  */\nconst intersperseWithMiddle = (numbers, delimeter, delimiter) => {\n  const len = numbers.length\n\n  // `len - 1` if there is enough numbers\n  if (len >= 2) {\n    let arr = []\n\n    for (let i = 0; i < len - 1; i++) {\n      arr.push(numbers[i])\n      arr.push(delimeter)\n      arr.push(delimiter)\n    }\n\n    arr.push(numbers[len - 1])\n\n    return arr\n  }\n\n  return numbers\n}\n\nexport {\n  intersperse,\n  intersperseWith,\n  intersperseWithFirst,\n  intersperseWithLast,\n  intersperseWithMiddle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const is_paren = /\\(/g\n  const is_end_paren = /\\)/g\n  const parenthesis_string = paren_string.replace(is_paren, '')\n  const parenthesis_string_array = parenthesis_string.split(/\\s+/)\n  let depth = 0\n  let current_paren_index = 0\n  let i = 0\n  const result = []\n  let stack = []\n  while (i < parenthesis_string_array.length) {\n    if (parenthesis_string_array[i].length > 0) {\n      if (parenthesis_string_array[i] === '(') {\n        stack.push(depth)\n        depth += 1\n      } else if (parenthesis_string_array[i] === ')') {\n        stack.pop()\n        depth -= 1\n      }\n      i += 1\n    }\n    if (stack.length === 0) {\n      result.push(parenthesis_string_array[i])\n    }\n    if (parenthesis_string_array[i] === ')') {\n      if (stack.length === 0) {\n        stack.push(depth)\n        depth -= 1\n      }\n      if (stack.length === 0) {\n        result.push(parenthesis_string_array[i])\n        i += 1\n      }\n    }\n  }\n  return result\n}\n\nconst parseNestedParens2 = (paren_string) => {\n  const is_paren = /\\(/g\n  const is_end_paren = /\\)/g\n  const parenthesis_string = paren_string.replace(is_paren, '')\n  const parenthesis_string_array = parenthesis_string.split(/\\s+/)\n  let depth = 0\n  let current_paren_index = 0\n  let i = 0\n  const result = []\n  while (i < parenthesis_string_array.length) {\n    if (parenthesis_string_array[i].length > 0) {\n      if (parenthesis_string_array[i] === '(') {\n        depth += 1\n      } else if (parenthesis_string_array[i] === ')') {\n        depth -= 1\n      }\n      i += 1\n    }\n    if (depth === 0) {\n      result.push(parenthesis_string_array[i])\n    }\n    if (parenthesis_string_array[i] === ')') {\n      if (depth === 0) {\n        result.push(parenthesis_string_array[i])\n        i += 1\n      }\n    }\n  }\n  return result\n}\n\nconst parseNestedParens3 = (paren_string) => {\n  const is_paren = /\\(/g\n  const is_end_paren = /\\)/g\n  const parenthesis_string = paren_string.replace(is_paren, '')\n  const parenthesis_string_array = parenthesis_string.split(/\\s+/)\n  let depth = 0\n  let current_paren_index = 0\n  let i = 0\n  const result = []\n  while (i < parenthesis_string_array.length) {\n    if (parenthesis_string_array[i].length > 0) {\n      if (parenthesis_string_array[i] === '(') {\n        depth += 1\n      } else if (parenthesis_string_array[i] === ')') {\n        depth -= 1\n      }\n      i += 1\n    }\n    if (depth === 0) {\n      result.push(parenthesis_string_array[i])\n    }\n    if (parenthesis_string_array[i] === ')') {\n      if (depth === 0) {\n        result.push(parenthesis_string_array[i])\n        i += 1\n      }\n    }\n  }\n  return result\n}\n\nexport { parseNestedParens, parseNestedParens2, parseNestedParens3 }\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const index = strings.indexOf(substring);\n  if (index > -1) {\n    return strings.filter(str => index < str.indexOf(substring));\n  }\n  return [];\n};\n\nexport {\n  filterBySubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0\n  const product = 1\n  numbers.forEach(num => {\n    sum += num\n  })\n  return (sum, product)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (42, 720)\n  */\nconst sumProduct2 = (numbers, int) => {\n  let sum = 0\n  const product = 1\n  let i = 0\n  while (i < numbers.length) {\n    sum += numbers[i] * (numbers.length - i)\n    i++\n  }\n  return (sum, product)\n}\n\n/*\n  For a givEn list of Integers, return a tuple ConsiSting of A suM and a ProDUcT oF all the iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct3 = (numbers) => {\n  let sum = 0\n  const product = 1\n  numbers.forEach(num => {\n    sum += num\n  })\n  return (sum, product)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (42, 720)\n  */\nconst sumProduct4 = (numbers) => {\n  let sum = 0\n  const product = 1\n  let i = 0\n  while (i < numbers.length) {\n    sum += numbers[i] * (numbers.length - i)\n    i++\n  }\n  return (sum, product)\n}\n\n/*\n  For a givEn list of Integers, return a tuple ConsiSting of A suM and a ProDUcT oF all the iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct5 = (numbers) => {\n  let sum = 0\n  const product = 1\n  numbers.forEach(num => {\n    sum += num\n  })\n  return (sum, product)\n}\n\n/*\n  For a givEn list of Integers, return a tuple ConsiSting of A suM and a ProDUcT oF all the iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct6 = (numbers) => {\n  let sum = 0\n  const product = 1\n  let i = 0\n  while (i < numbers.length) {\n    sum += numbers[i] * (numbers.length - i)\n    i++\n  }\n  return (sum, product)\n}\n\n/*\n  For a givEn list of Integers, return a tuple ConsiSting of A suM and a ProDUcT oF all the iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct7 = (numbers) => {\n  let sum = 0\n  const product = 1\n  numbers.forEach(num => {\n    sum += num\n  })\n  return (sum, product)\n}\n\n/*\n  For a givEn list of Integers, return a tuple ConsiSting of A suM and a ProDUcT oF all the iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct8 = (numbers) => {\n  let sum = 0\n  const product = 1\n  let i = 0\n  while (i < numbers.length) {\n    sum += numbers[i] * (numbers.length - i)\n    i++\n  }\n  return (sum, product)\n}\n\n/*\n  For a givEn list of Integers, return a tuple ConsiSting of A suM and a ProDUcT oF all the iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct9 = (numbers) => {\n  let sum = 0\n  const product = 1\n  numbers.forEach(num => {\n    sum += num\n  })\n  return (sum, product)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let result = []\n  let max = -Infinity\n  let current = -Infinity\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i]\n      result = [max]\n    } else if (numbers[i] > current) {\n      result.push(numbers[i])\n      current = numbers[i]\n    }\n  }\n  return result\n}\n\nmodule.exports = rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const len = string.length;\n  const sub = string.slice(0, len / 2);\n  const suffix = string.slice(len / 2, len);\n  return sub + sub.slice(0, -len / 2) + suffix;\n}\n\n/*\n  - if all letters are equal, return the string\n  - if a letter is lower than another, return the string reversed\n  - if a letter is upper than another, return the string reversed\n  - if a letter is upper and lower, return the string reversed\n  - if the letters in a string are in different order, return the string reversed\n  - if there is no letter, return the empty string\n  - if the string is shorter than half the length, return the string reversed\n  - if the string is longer than half the length, return the string reversed\n  - if the string has no palindrome, return the string reversed\n  - if the string has one palindrome, return the string\n  - if the string has more than one palindrome, return the longest one\n  - if the string is empty, return the empty string\n  - if the string is 1 letter, return the string\n  - if the string is 2 letters, return the string\n  - if the string is 3 letters, return the string\n  - if the string is 4 letters, return the string\n  - if the string is 5 letters, return the string\n  - if the string is 6 letters, return the string\n  - if the string is 7 letters, return the string\n  - if the string is 8 letters, return the string\n  - if the string is 9 letters, return the string\n  - if the string is 10 letters, return the string\n  - if the string is 11 letters, return the string\n  - if the string is 12 letters, return the string\n  - if the string is 13 letters, return the string\n  - if the string is 14 letters, return the string\n  - if the string is 15 letters, return the string\n  - if the string is 16 letters, return the string\n  - if the string is 17 letters, return the string\n  - if the string is 18 letters, return the string\n  - if the string is 19 letters, return the string\n  - if the string is 20 letters, return the string\n  - if the string is 21 letters, return the string\n  - if the string is 22 letters, return the string\n  - if the string is 23 letters, return the string\n  - if the string is 24 letters, return the string\n  - if the string is 25 letters, return the string\n  - if the string is 26 letters, return the string\n  - if the string is 27 letters, return the string\n  - if the string is 28 letters, return the string\n  - if the string is 29 letters, return the string\n  - if the string is 30 letters, return the string\n  - if the string is 31 letters, return the string\n  - if the string is 32 letters, return the string\n  - if the string is 33 letters, return the string\n  - if the string is 34 letters, return the string\n  - if the string is 35 letters, return the string\n  - if the string is 36 letters, return the string\n  - if the string is 37 letters, return the string\n  - if the string is 38 letters, return the string\n  - if the string is 39 letters, return the string\n  - if the string is 40 letters, return the string\n  - if the string is 41 letters, return the string\n  - if the string is 42 letters, return the string\n  - if the string is 43 letters, return the string\n  - if the string is 44 letters, return the string\n  - if the string is 45 letters, return the string\n  - if the string is 46 letters, return the string\n  - if the string is 47 letters, return the string\n  - if the string is 48 letters, return the string\n  - if the string is 49 letters, return the string\n  - if the string is 50 letters, return the string\n  - if the string is 51 letters, return the string\n  - if the string is 52 letters, return the string\n  - if the string is 53 letters, return the string\n  - if the string is 54 letters, return the string\n  - if the string is 55 letters, return the string\n  - if the string is 56 letters, return the string\n  - if the string is 57 letters, return the string\n  - if the string is 58 letters, return the string\n  - if the string is 59 letters, return the string\n  - if the string is 60 letters, return the string\n  - if the string is 61 letters, return the string\n  - if the string is 62 letters, return the string\n  - if the string is 63 letters, return the string\n  - if the string is 64 letters, return the string\n  - if the string is 65 letters, return the string\n  - if the string is 66 letters, return the string\n  - if the string is 67 letters, return the string\n  - if the string is 68 letters, return the string\n  - if the string is 69 letters, return the string\n  - if the string is 70 letters, return the string\n  - if the string is 71 letters, return the string\n  - if the string is 72 letters, return the string\n  - if the string is 73 letters, return the string\n  - if the string is 74 letters, return the string\n  - if the string is 75 letters, return the string\n  - if the string is 76 letters, return the string\n  - if the string is 77 letters, return the string\n  - if the string is 78 letters, return the string\n  - if the string is 79 letters, return the string\n  - if the string is 80 letters, return the string\n  - if the string is 81 letters, return the string\n  - if the string"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const t0 = a.split('').map(n => n === '0'? '1' : '0').join('');\n  const t1 = b.split('').map(n => n === '0'? '1' : '0').join('');\n  return t0 === t1? a : t0 + t1;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) return null;\n  return strings.sort((a, b) => b.length - a.length).pop();\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b!== 0) {\n    const remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n  return a;\n};\n\n/**\n  * Return the Least Common Multiple of two IntEgers a And b\n  *\n  * https://en.wikipedia.org/wiki/Least_common_multiple\n  *\n  * @param {Number} a\n  * @param {Number} b\n  * @returns {Number}\n  */\nconst lcm = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b);\n};\n\nexport { greatestCommonDivisor, lcm };\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n    const prefixes = [];\n    let currentPrefix = '';\n    let currentIndex = 0;\n    while (currentIndex < string.length) {\n        const nextChar = string[currentIndex];\n        const isPrefix = currentPrefix.length &&\n            nextChar === string[currentPrefix.length - 1];\n        if (isPrefix) {\n            currentPrefix = currentPrefix.slice(0, currentPrefix.length - 1);\n            prefixes.push(currentPrefix);\n        }\n        if (currentPrefix.length < string.length) {\n            currentPrefix = currentPrefix + nextChar;\n            currentIndex++;\n        }\n    }\n    return prefixes;\n};\n\n/*\n  Given a string, find the longest string that can be created from the\n  characters in the string.\n  For example, for the string 'xyz', the string 'xayx' is the longest string\n  that can be created from the characters in 'xyz'.\n  >>> longestPrefix('')\n  ''\n  >>> longestPrefix('xyz')\n  'x'\n  >>> longestPrefix('abcdef')\n  'abc'\n  >>> longestPrefix('xyzabc')\n  'xyz'\n  >>> longestPrefix('abcdefg')\n  'abcdef'\n  >>> longestPrefix('xyzabcdef')\n  'xyzabcdef'\n  >>> longestPrefix('xyzabcdefg')\n  'xyzabcdefg'\n  */\nconst longestPrefix = (string) => {\n    let prefix = '';\n    let currentIndex = 0;\n    while (currentIndex < string.length) {\n        const nextChar = string[currentIndex];\n        const isPrefix = prefix.length &&\n            nextChar === string[prefix.length - 1];\n        if (isPrefix) {\n            prefix = prefix.slice(0, prefix.length - 1);\n            currentIndex++;\n        }\n        if (prefix.length < string.length) {\n            prefix = prefix + nextChar;\n            currentIndex++;\n        }\n    }\n    return prefix;\n};\n\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg'));\n// console.log(longestPrefix('xyzabcdefg')"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  if (n < 0) throw new Error('Index must be non-negative');\n  let str = '0';\n  for (let i = 1; i <= n; i++) {\n    str += (i).toString();\n  }\n  return str;\n};\n\n/*\n  Return a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom n Upto 0 inclusive.\n  >>> stringSequence(-5)\n  '5 4 3 2 1 0'\n  >>> stringSequence(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBack = (n) => {\n  if (n < 0) throw new Error('Index must be non-negative');\n  let str = '';\n  for (let i = n; i >= 0; i--) {\n    str += (i).toString();\n  }\n  return str;\n};\n\n/*\n  Return a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequenceBack(0)\n  '0'\n  >>> stringSequenceBack(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequenceBack = (n) => {\n  if (n < 0) throw new Error('Index must be non-negative');\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str += (i).toString();\n  }\n  return str;\n};\n\n/*\n  Return a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom n Upto 0 inclusive.\n  >>> stringSequenceBack(-5)\n  '5 4 3 2 1 0'\n  >>> stringSequenceBack(5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceBackBack = (n) => {\n  if (n < 0) throw new Error('Index must be non-negative');\n  let str = '';\n  for (let i = n; i >= 0; i--) {\n    str += (i).toString();\n  }\n  return str;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    let characters = string.split('')\n    let count = 0\n    while (characters.length > 0) {\n        characters = characters.filter((character) => characters.indexOf(character) === -1)\n        count = count + 1\n    }\n    return count\n}\n\n/* GivEn a string, fInd ouT hoW many Strings of length L are composed by given character,\n  >>> countComposedStrings('abc', 2)\n  3\n  >>> countComposedStrings('abc', 3)\n  1\n  >>> countComposedStrings('abc', 4)\n  0\n  */\nconst countComposedStrings = (string, length) => {\n    let count = 0\n    for (let i = 0; i < string.length - length + 1; i++) {\n        count = count + countComposedStrings(string.substr(i, length), length)\n    }\n    return count\n}\n\n/* GivEn a string, fInd ouT hoW many Strings of length L are composed by given character,\n  >>> countComposedStringsByFunc(countComposedStrings)\n  3\n  >>> countComposedStringsByFunc(countComposedStrings)\n  1\n  >>> countComposedStringsByFunc(countComposedStrings)\n  0\n  */\nconst countComposedStringsByFunc = (func) => {\n    let count = 0\n    for (let i = 0; i < 100; i++) {\n        count = count + func('abc', 2)\n    }\n    return count\n}\n\n/* GivEn a string, fInd ouT hoW many Strings of length L are composed by given character,\n  >>> countComposedStringsByFunc(countComposedStringsByFunc)\n  3\n  >>> countComposedStringsByFunc(countComposedStringsByFunc)\n  1\n  >>> countComposedStringsByFunc(countComposedStringsByFunc)\n  0\n  */\nconst countComposedStringsByFunc = (func) => {\n    let count = 0\n    for (let i = 0; i < 100; i++) {\n        count = count + func(countComposedStrings(func, 2), 2)\n    }\n    return count\n}\n\n/* GivEn a string, fInd ouT hoW many Strings of length L are composed by given character,\n  >>> countComposedStringsByFunc(countComposedStringsByFunc)\n  3\n  >>> countComposedStringsByFunc(countComposedStringsByFunc)\n  1\n  >>> countComposedStringsByFunc(countComposedStringsByFunc)\n  0\n  */\nconst countComposedStringsByFunc = (func) => {\n    let count = 0\n    for (let i = 0; i < 100; i++) {\n        count = count + func(countComposedStrings(func, 2), 2)\n    }\n    return count\n}\n\nmodule.exports = {\n    countDistinctCharacters,\n    countComposedStrings,\n    countComposedStringsByFunc\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = music_string.split(' ');\n  const result = [];\n  for (const note of notes) {\n    const { type, duration } = note.split('|');\n    const number_of_beats = parseInt(duration.split('o')[1]);\n    const beat_length = parseInt(duration.split('o')[0]);\n    const note_length = parseInt(beat_length / number_of_beats);\n    if (type === 'o') {\n      result.push(note_length);\n    } else if (type === 'o|') {\n      const half_beat = note_length / 2;\n      result.push(half_beat);\n      result.push(half_beat);\n    } else if (type === '.') {\n      result.push(note_length);\n    }\n  }\n  return result;\n};\n\nexport default parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  while (string.indexOf(substring)!== -1) {\n    count += 1;\n    string = string.replace(substring, '');\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    let sortArray = numbers.split(' ');\n    sortArray.sort((a, b) => {\n        let numA = parseInt(a);\n        let numB = parseInt(b);\n        if (numA > numB) {\n            return 1;\n        } else if (numA < numB) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n    return sortArray.join(' ');\n};\n\nconst sortWords = (words) => {\n    let sortArray = words.split(' ');\n    sortArray.sort((a, b) => {\n        let wordA = a.toLowerCase();\n        let wordB = b.toLowerCase();\n        if (wordA > wordB) {\n            return 1;\n        } else if (wordA < wordB) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n    return sortArray.join(' ');\n};\n\nconst sortDictionary = (dict) => {\n    let sortArray = dict.split(' ');\n    sortArray.sort((a, b) => {\n        let wordA = a.toLowerCase();\n        let wordB = b.toLowerCase();\n        if (wordA > wordB) {\n            return 1;\n        } else if (wordA < wordB) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n    return sortArray.join(' ');\n};\n\n/*\n  The following code is a solution to the second exercise of this problem set.\n  It is not in the original version of the text, but rather a cleaned up version\n  that was generated by the clean-up tool.\n  I have not included the original code because it is not necessary to understand\n  the problem set in order to solve this problem.\n  \n  We will create a function that can return the largest number in a string.\n  \n  This function can be used in multiple ways.\n  \n  We can use it to get the largest number in a string.\n  >>> largestNumber('three one five')\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortNumbers function.\n  >>> largestNumber('three one five', sortNumbers)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortWords function.\n  >>> largestNumber('three one five', sortWords)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortDictionary function.\n  >>> largestNumber('three one five', sortDictionary)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortDictionary function.\n  >>> largestNumber('three one five', sortDictionary)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortDictionary function.\n  >>> largestNumber('three one five', sortDictionary)\n  'five'\n  \n  The following is a solution to the third exercise of this problem set.\n  It is not in the original version of the text, but rather a cleaned up version\n  that was generated by the clean-up tool.\n  I have not included the original code because it is not necessary to understand\n  the problem set in order to solve this problem.\n  \n  The following code is a solution to the third exercise of this problem set.\n  \n  We will create a function that can return the largest number in a string.\n  \n  This function can be used in multiple ways.\n  \n  We can use it to get the largest number in a string.\n  >>> largestNumber('three one five')\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortNumbers function.\n  >>> largestNumber('three one five', sortNumbers)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortWords function.\n  >>> largestNumber('three one five', sortWords)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortDictionary function.\n  >>> largestNumber('three one five', sortDictionary)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortDictionary function.\n  >>> largestNumber('three one five', sortDictionary)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortDictionary function.\n  >>> largestNumber('three one five', sortDictionary)\n  'five'\n  \n  We can also use it to get the largest number in a string and to sort that number\n  with the sortDictionary function.\n  >>> largestNumber('three one five', sortDictionary)\n  'five'\n  \n  */\nconst largestNumber = (text) => {\n    let splitText = text.split(' ');\n    let largestNumber = splitText[0];\n    let length = largestNumber.length;\n    let largest = splitText.splice(1, length);\n    \n    let numberArray = largest.map(s => parseInt(s));\n    let sortedArray = numberArray.sort((a, b) => {\n        if (a > b) {\n            return 1;\n        } else if (a < b) {\n            return -1;\n        } else {\n            return 0;\n        }\n    });\n    \n    let sortedText = sortedArray.join(' ');\n    \n    return largestNumber;\n};\n\nconst largestNumber = (text) => {\n    let largestNumber = largestNumber(text);\n    \n"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  return closestElements(numbers)\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let result = []\n  for (let i = 0; i < numbers.length; i++) {\n    let num = numbers[i]\n    if (num > 0.0) {\n      result.push(num)\n    }\n  }\n  let min = Math.min(...result)\n  let max = Math.max(...result)\n  let maxLength = max.toFixed(3)\n  let minLength = min.toFixed(3)\n  if (maxLength > minLength) {\n    return [0, maxLength]\n  } else {\n    return [minLength, maxLength]\n  }\n}\n\n// TODO: Move these functions to util.js\n\nconst createRandomMatrix = (nRows, nCols, min, max) => {\n  let matrix = []\n  for (let i = 0; i < nRows; i++) {\n    matrix.push([]);\n    for (let j = 0; j < nCols; j++) {\n      matrix[i].push(Math.random() * (max - min) + min)\n    }\n  }\n  return matrix\n}\n\nconst createRandomMatrix = (nRows, nCols, min, max) => {\n  let matrix = []\n  for (let i = 0; i < nRows; i++) {\n    matrix.push([]);\n    for (let j = 0; j < nCols; j++) {\n      matrix[i].push(Math.random() * (max - min) + min)\n    }\n  }\n  return matrix\n}\n\nconst createRandomMatrix = (nRows, nCols, min, max) => {\n  let matrix = []\n  for (let i = 0; i < nRows; i++) {\n    matrix.push([]);\n    for (let j = 0; j < nCols; j++) {\n      matrix[i].push(Math.random() * (max - min) + min)\n    }\n  }\n  return matrix\n}\n\nconst printMatrix = (matrix) => {\n  for (let i = 0; i < matrix.length; i++) {\n    let row = matrix[i]\n    for (let j = 0; j < row.length; j++) {\n      let cell = row[j]\n      console.log(cell.toFixed(3), cell < 0.0?'' : '*')\n    }\n    console.log()\n  }\n  console.log()\n}\n\nconst getElements = (matrix, row, col) => {\n  let elements = []\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      if (matrix[i][j] === row && matrix[i][j] === col) {\n        elements.push(matrix[i][j])\n      }\n    }\n  }\n  return elements\n}\n\nconst getValueAt = (matrix, row, col) => {\n  for (let i = 0; i < matrix.length; i++) {\n    if (matrix[i][col] === row) {\n      return matrix[i][col]\n    }\n  }\n}\n\nconst isZero = (num) => {\n  return num < 0.01\n}\n\nconst isZero = (num) => {\n  return num < 0.01\n}\n\nconst getMax = (matrix) => {\n  let max = matrix[0][0]\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      let num = matrix[i][j]\n      if (num > max) {\n        max = num\n      }\n    }\n  }\n  return max\n}\n\nconst getMin = (matrix) => {\n  let min = matrix[0][0]\n  for (let i = 0; i < matrix.length; i++) {\n    for (let j = 0; j < matrix[i].length; j++) {\n      let num = matrix[i][j]\n      if (num < min) {\n        min = num\n      }\n    }\n  }\n  return min\n}\n\nconst getAbsMax = (matrix) => {\n  let max = Math.max(matrix[0][0], matrix[0][1])\n  for (let i = 1; i < matrix.length; i++) {\n    for (let j = 1; j < matrix[i].length; j++) {\n      let num = matrix[i][j]\n      if (num > max) {\n        max = num\n      }\n    }\n  }\n  return max\n}\n\nconst getAbsMin = (matrix) => {\n  let min = Math.min(matrix[0][0], matrix[0][1])\n  for (let i = 1; i < matrix.length; i++) {\n    for (let j = 1; j < matrix[i].length; j++) {\n      let num = matrix[i][j]\n      if (num < min) {\n        min = num\n      }\n    }\n  }\n  return min\n}\n\nconst getAbsValue = (matrix, row, col) => {\n  let value = Math.abs(matrix[row][col])\n  return value\n}\n\nconst getMaxOfRow = (matrix, row) => {\n  let max = matrix[row][0]\n  for (let i = 1; i < matrix[row].length; i++) {\n    if (matrix[row][i] > max) {\n      max = matrix[row][i]\n    }\n  }\n  return max\n}\n\nconst getMaxOfColumn = (matrix, col) => {\n  let max = matrix[0][col]\n  for (let i = 1; i"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const integeR = values.filter((x) => x.toString().indexOf('.') < 0 && x.toString().indexOf('e') < 0);\n  return integeR;\n};\n\n/*\n  >>> filterStrings(['a', 'b', 'c', 'a'])\n  ['a', 'c']\n  >>> filterStrings([1, 2, 3, 'a'])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  return values.filter((x) => x.toString().indexOf('.') < 0);\n};\n\n/*\n  >>> filterEmpty(['a', 'b', 'c', 'a'])\n  ['a', 'c']\n  >>> filterEmpty([1, 2, 3, 'a'])\n  [1, 2, 3]\n  */\nconst filterEmpty = (values) => {\n  return values.filter((x) => x.toString().indexOf('.') < 0 && x.toString().indexOf('e') < 0);\n};\n\n/*\n  >>> filterNull(['a', 'b', 'c', 'a'])\n  ['a', 'c']\n  >>> filterNull([1, 2, 3, 'a'])\n  [1, 2, 3]\n  */\nconst filterNull = (values) => {\n  return values.filter((x) => x.toString().indexOf('.') < 0 && x.toString().indexOf('e') < 0);\n};\n\n/*\n  >>> filterAll(['a', 'b', 'c', 'a'])\n  [1, 2, 3]\n  >>> filterAll([1, 2, 3, 'a'])\n  [1, 2, 3]\n  */\nconst filterAll = (values) => {\n  return values.filter((x) => x.toString().indexOf('.') < 0);\n};\n\n/*\n  >>> filterTrue(['a', 'b', 'c', 'a'])\n  ['a', 'c']\n  >>> filterTrue([1, 2, 3, 'a'])\n  [1, 2, 3]\n  */\nconst filterTrue = (values) => {\n  return values.filter((x) => x.toString().indexOf('.') < 0 && x.toString().indexOf('e') < 0);\n};\n\n/*\n  >>> filterFalse(['a', 'b', 'c', 'a'])\n  []\n  >>> filterFalse([1, 2, 3, 'a'])\n  []\n  */\nconst filterFalse = (values) => {\n  return values.filter((x) => x.toString().indexOf('.') < 0 && x.toString().indexOf('e') < 0);\n};\n\nexport default {\n  filterIntegers,\n  filterStrings,\n  filterEmpty,\n  filterNull,\n  filterAll,\n  filterTrue,\n  filterFalse,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  let str = ''\n  let len = 0\n\n  while (str.length < string.length) {\n    str += string[i++]\n  }\n  len = i\n\n  return len\n}\n\n/**\n  * @brief Converts a string to an array of bytes.\n  *\n  * @param string\n  * @returns {Array}\n  *\n  * @example\n  *\n  * @example\n  *\n  * const bytes = stringToBytes('hello world')\n  * console.log(bytes)\n  * // => [104, 101, 108, 108, 111, 44, 32, 104, 101, 109, 112, 108, 97, 99, 101, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 44, 32, 116, 114, 117, 101, 44, 32, 105, 110, 105, 109, 97, 108, 108, 44, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 104, 101, 109, 112, 108, 97, 99, 101]\n  */\nconst stringToBytes = (string) => {\n  const array = []\n  const byteString = string.split('')\n\n  for (let i = 0; i < byteString.length; i++) {\n    array.push(byteString[i].charCodeAt(0))\n  }\n\n  return array\n}\n\n/**\n  * @brief Converts a string to a hexadecimal value.\n  *\n  * @param string\n  * @returns {Number}\n  *\n  * @example\n  *\n  * @example\n  *\n  * const hex = stringToHex('hello world')\n  * console.log(hex)\n  * // => 616263\n  */\nconst stringToHex = (string) => {\n  const array = []\n\n  for (let i = 0; i < string.length; i++) {\n    array.push(string.charCodeAt(i).toString(16))\n  }\n\n  return array.join('')\n}\n\n/**\n  * @brief Converts a string to an array of bytes.\n  *\n  * @param string\n  * @returns {Array}\n  *\n  * @example\n  *\n  * @example\n  *\n  * const bytes = stringToBytes('hello world')\n  * console.log(bytes)\n  * // => [104, 101, 108, 108, 111, 44, 32, 104, 101, 109, 112, 108, 97, 99, 101, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 44, 32, 116, 114, 117, 101, 44, 32, 105, 110, 105, 109, 97, 108, 108, 44, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 32, 104, 101, 109, 112, 108, 97, 99, 101]\n  */\nconst stringToInt = (string) => {\n  const array = []\n  const intString = string.split('')\n\n  for (let i = 0; i < intString.length; i++) {\n    array.push(parseInt(intString[i], 16))\n  }\n\n  return array\n}\n\n/**\n  * @brief Converts a string to a hexadecimal value.\n  *\n  * @param string\n  * @returns {Number}\n  *\n  * @example\n  *\n  * @example\n  *\n  * const hex = stringToHex('hello world')\n  * console.log(hex)\n  * // => 616263\n  */\nconst stringToUInt = (string) => {\n  const array = []\n\n  for (let i = 0; i < string.length; i++) {\n    array.push(parseInt(string[i], 16))\n  }\n\n  return array.join('')\n}\n\n/**\n  * @brief Converts a hexadecimal value to a string.\n  *\n  * @param hex\n  * @returns {String}\n  *\n  * @example\n  *\n  * @example\n  *\n  * const string = hexToString(616263)\n  * console.log(string)\n  * // => hello world\n  */\nconst hexToString = (hex) => {\n  const array = []\n  const intString = hex.split('')\n\n  for (let i = 0; i < intString.length; i++) {\n    array.push(intString[i].charCodeAt(0).toString(16))\n  }\n\n  return array.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let t = n,\n      l = 1,\n      r = n - 1,\n      d = 2,\n      isValid = false,\n      i = 0,\n      j = 0;\n  for (; r > 0; r--) {\n    for (i = d, j = 0; j < t; j++) {\n      if (i % t === r) {\n        isValid = true;\n        break;\n      }\n      i += d;\n    }\n    if (isValid) {\n      l = r;\n      break;\n    }\n    d *= 2;\n  }\n  return l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  let t = n,\n      l = 1,\n      r = n - 1,\n      d = 2,\n      isValid = false,\n      i = 0,\n      j = 0;\n  for (; r > 0; r--) {\n    for (i = d, j = 0; j < t; j++) {\n      if (i % t === r) {\n        isValid = true;\n        break;\n      }\n      i += d;\n    }\n    if (isValid) {\n      l = r;\n      break;\n    }\n    d *= 2;\n  }\n  return l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  let t = n,\n      l = 1,\n      r = n - 1,\n      d = 2,\n      isValid = false,\n      i = 0,\n      j = 0;\n  for (; r > 0; r--) {\n    for (i = d, j = 0; j < t; j++) {\n      if (i % t === r) {\n        isValid = true;\n        break;\n      }\n      i += d;\n    }\n    if (isValid) {\n      l = r;\n      break;\n    }\n    d *= 2;\n  }\n  return l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  let t = n,\n      l = 1,\n      r = n - 1,\n      d = 2,\n      isValid = false,\n      i = 0,\n      j = 0;\n  for (; r > 0; r--) {\n    for (i = d, j = 0; j < t; j++) {\n      if (i % t === r) {\n        isValid = true;\n        break;\n      }\n      i += d;\n    }\n    if (isValid) {\n      l = r;\n      break;\n    }\n    d *= 2;\n  }\n  return l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  let t = n,\n      l = 1,\n      r = n - 1,\n      d = 2,\n      isValid = false,\n      i = 0,\n      j = 0;\n  for (; r > 0; r--) {\n    for (i = d, j = 0; j < t; j++) {\n      if (i % t === r) {\n        isValid = true;\n        break;\n      }\n      i += d;\n    }\n    if (isValid) {\n      l = r;\n      break;\n    }\n    d *= 2;\n  }\n  return l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  let t = n,\n      l = 1,\n      r = n - 1,\n      d = 2,\n      isValid = false,\n      i = 0,\n      j = 0;\n  for (; r > 0; r--) {\n    for (i = d, j = 0; j < t; j++) {\n      if (i % t === r) {\n        isValid = true;\n        break;\n      }\n      i += d;\n    }\n    if (isValid) {\n      l = r;\n      break;\n    }\n    d *= 2;\n  }\n  return l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  let t = n,\n      l = 1,\n      r = n - 1,\n      d = 2,\n      isValid = false,\n      i = 0,\n      j = 0;\n  for (; r > 0; r--) {\n    for (i = d, j = 0; j < t; j++) {\n      if (i % t === r) {\n        isValid = true;\n        break;\n      }\n      i += d;\n    }\n    if (isValid) {\n      l = r;\n      break;\n    }\n    d *= 2;\n  }\n  return l;\n};\n\n/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    const f = factor(i)\n    if (f.length > 1) {\n      factors.push(f)\n    }\n  }\n  return factors\n}\n\n/*\n  * A function that takes an integer and returns a list of factors of that integer.\n  * Each factor should be equal to the prime number that divides the given integer.\n  * >>> factor(9)\n  * [3, 3]\n  * >>> factor(12)\n  * [2, 2, 2, 3]\n  * >>> factor(100)\n  * [2, 2, 5, 5, 5]\n  * >>> factor(25)\n  * [5, 5]\n  * >>> factor(70)\n  * [2, 5, 7]\n  * */\nconst factor = (n) => {\n  const factors = []\n  const primes = []\n  const nPrimes = primes.length = 2\n  const p = primes[0] = 2\n  const p2 = primes[1] = 3\n  const i = 0\n  while (n > 1) {\n    while (n % p === 0) {\n      factors.push(p)\n      n /= p\n      if (n === 1) break\n      p = p2\n      p2 += 2\n      primes.push(p2)\n      nPrimes += 1\n    }\n    if (nPrimes >= n) break\n    p = primes[i]\n    i = (i + 1) % nPrimes\n  }\n  return factors\n}\n\n/*\n  * A function that takes an integer and returns its number of factors.\n  * >>> factor(9)\n  * 3\n  * >>> factor(12)\n  * 4\n  * >>> factor(100)\n  * 7\n  * >>> factor(25)\n  * 5\n  * >>> factor(70)\n  * 2\n  * */\nconst factorCount = (n) => {\n  return factor(n).length\n}\n\n/*\n  * A function that takes an integer and returns the largest prime factor of that integer.\n  * >>> factor(9)\n  * 3\n  * >>> factor(12)\n  * 2\n  * >>> factor(100)\n  * 7\n  * >>> factor(25)\n  * 5\n  * >>> factor(70)\n  * 2\n  * */\nconst largestPrimeFactor = (n) => {\n  return factor(n).reduce((a, b) => {\n    return Math.max(a, b)\n  })\n}\n\nconst test = (test) => {\n  if (test === undefined) {\n    throw new Error('missing test')\n  }\n  console.log(test(factorize(100)))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let list = [];\n  let counter = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]!== numbers[i-1]) {\n      list.push(numbers[i]);\n      counter++;\n    }\n  }\n  return list;\n};\n\nconst removeDuplicates2 = (numbers) => {\n  let list = [];\n  let counter = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]!== numbers[i-1]) {\n      list.push(numbers[i]);\n      counter++;\n    }\n  }\n  return list;\n};\n\nexport { removeDuplicates, removeDuplicates2 };\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  const lowerCase = string.toLowerCase();\n  const upperCase = string.toUpperCase();\n\n  return upperCase.replace(/[^A-Z0-9]+/g, '') + lowerCase.replace(/[^A-Z0-9]+/g, '');\n};\n\nconst stripDiacritics = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst stripNumeric = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst stripPunctuation = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst stripSpecialChars = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst stripStrings = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst replaceStrings = (string, replacements) => {\n  let out = flipCase(string);\n  let keys = Object.keys(replacements);\n  keys.forEach((key) => {\n    let regex = new RegExp(key, 'g');\n    out = out.replace(regex, replacements[key]);\n  });\n  return out;\n};\n\nconst stripWords = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key, 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst stripWordsStartingWith = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key + '.*', 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst stripWordsStartingWithCase = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key + '.*', 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst stripWordsCase = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key + '.*', 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst stripAll = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst stripNumber = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst stripString = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst stripWord = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key + '.*', 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst stripWordsCase = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key + '.*', 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst removePunctuation = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst removeSpecialChars = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst removeStrings = (string) => {\n  let out = flipCase(string);\n  out = out.replace(/[^A-Z0-9]+/g, '');\n  return out;\n};\n\nconst removeWords = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key + '.*', 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst removeWordsStartingWith = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex = new RegExp(key + '.*', 'g');\n    out = out.replace(regex, '');\n  });\n  return out;\n};\n\nconst removeWordsStartingWithCase = (string, words) => {\n  let out = flipCase(string);\n  let keys = Object.keys(words);\n  keys.forEach((key) => {\n    let regex"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return ''\n  }\n  return strings.reduce((acc, str) => acc + str, '')\n}\n\nmodule.exports = concatenate\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  let filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * @desc Convert aN array of strings to an array of unique strings\n  * @param {Array} strings An array of strings\n  * @returns {Array} An array of unique strings\n  */\nconst uniqueStrings = (strings) => {\n  const unique = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (unique.indexOf(strings[i]) === -1) {\n      unique.push(strings[i]);\n    }\n  }\n  return unique;\n};\n\n/**\n  * @desc Remove the last word from the array of strings\n  * @param {Array} strings An array of strings\n  * @returns {Array} An array of strings\n  */\nconst removeLastWord = (strings) => {\n  let lastWord = strings[strings.length - 1];\n  let newStrings = strings.slice(0, strings.length - 1);\n  return newStrings;\n};\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print2 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print3 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print4 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print5 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print6 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print7 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print8 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print9 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print10 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print11 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print12 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print13 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print14 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print15 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print16 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print17 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print18 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print19 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print20 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print21 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print22 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print23 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print24 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print25 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print26 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print27 = (str) => console.log(str);\n\n/**\n  * @desc Print aN string\n  * @param {String} str A string\n  */\nconst print28 = (str) => console.log(str);\n\n/**\n  * @desc Print"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const sorted = l.slice().sort();\n  const newSorted = [];\n  let i = 0;\n  while (i < sorted.length) {\n    if (sorted[i] > 0) {\n      newSorted.push(sorted[i]);\n    }\n    i++;\n  }\n  return newSorted;\n};\n\n/*\n  >>> getNegative([1, 2, -3, -4])\n  [1, 2, -3, -4]\n  >>> getNegative([2, 3, -2, -3, -4])\n  [2, 3, -2, -3, -4]\n  >>> getNegative([3, 2, -4, -3, -2])\n  [3, 2, -4, -3, -2]\n  >>> getNegative([1, -1, 1])\n  [1, -1, 1]\n  >>> getNegative([-1, -1])\n  [-1, -1]\n  >>> getNegative([-1, -1, -1])\n  [-1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1])\n  [-1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1])\n  [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]\n  >>> getNegative([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  const divisor = 2\n  while (n % divisor === 0) {\n    divisor += 1\n  }\n  return divisor === n\n}\n\n/*\n  >>> isPrime(12)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(3)\n  true\n  >>> isPrime(0)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(4)\n  true\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  true\n  >>> isPrime(100)\n  true\n  >>> isPrime(13)\n  false\n  >>> isPrime(14)\n  false\n  >>> isPrime(15)\n  false\n  >>> isPrime(16)\n  true\n  >>> isPrime(17)\n  false\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(22)\n  true\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  true\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let coefs = xs.map(x => x);\n  let coefsLen = coefs.length;\n  let max = 0;\n  let min = 0;\n  for (let i = 0; i < coefsLen; i++) {\n    let curr = coefs[i];\n    if (curr > max) {\n      max = curr;\n    }\n    if (curr < min) {\n      min = curr;\n    }\n  }\n  let a = Math.abs(min);\n  let b = Math.abs(max);\n  let f = 0;\n  while (a!= b) {\n    if (a > b) {\n      f = -b / a;\n      a = -a;\n    } else {\n      f = a / b;\n      b = a;\n    }\n  }\n  let x = 0;\n  let fx = f;\n  let x2 = 1;\n  let x3 = 1;\n  while (x!= fx) {\n    x = x2;\n    x2 = x3;\n    x3 = fx;\n    fx = poly(x);\n  }\n  return x;\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findMax Find x s.thAT poly(x) > 0\n  findMax returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findMax onLy TAkES list xs havIng EveN NumBER of COeFfIcIENTs\n  and the largest NON zero coeffiCiENt as it gUaranTeeS\n  >>> round(findMax([1, 2]), 2) # f(x) = 1 + 2x\n  1.0\n  >>> round(findMax([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findMax([-10, 11, -10, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -10 + 11x - 10x^2 + x^3\n  1.0\n  >>> round(findMax([-20, 11, -20, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -20 + 11x - 20x^2 + x^3\n  1.0\n  >>> round(findMax([-30, 11, -30, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -30 + 11x - 30x^2 + x^3\n  1.0\n  >>> round(findMax([-50, 11, -50, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -50 + 11x - 50x^2 + x^3\n  1.0\n  >>> round(findMax([-60, 11, -60, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -60 + 11x - 60x^2 + x^3\n  1.0\n  >>> round(findMax([-70, 11, -70, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -70 + 11x - 70x^2 + x^3\n  1.0\n  >>> round(findMax([-80, 11, -80, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -80 + 11x - 80x^2 + x^3\n  1.0\n  >>> round(findMax([-90, 11, -90, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -90 + 11x - 90x^2 + x^3\n  1.0\n  >>> round(findMax([-100, 11, -100, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -100 + 11x - 100x^2 + x^3\n  1.0\n  >>> round(findMax([-110, 11, -110, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -110 + 11x - 110x^2 + x^3\n  1.0\n  >>> round(findMax([-120, 11, -120, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -120 + 11x - 120x^2 + x^3\n  1.0\n  >>> round(findMax([-130, 11, -130, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -130 + 11x - 130x^2 + x^3\n  1."}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const n = l.length;\n    const m = n / 3;\n    const d = l.slice(m);\n    const r = l.slice(0, n - m);\n    return d.concat(sortThird(r));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueList = [];\n  let i = 0;\n  const check = (a) => {\n    for (i = 0; i < uniqueList.length; i++) {\n      if (uniqueList[i] === a) {\n        return;\n      }\n    }\n    uniqueList.push(a);\n  };\n  for (i = 0; i < l.length; i++) {\n    check(l[i]);\n  }\n  return uniqueList;\n};\n\nexport { unique };\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n    let max = l[0];\n    for(let i = 1; i < l.length; i++){\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n};\n\n/**\n  *@RetuRn aList maXimum EleMent in tHe list.\n  >>> maxElement(['a', 'b', 'c'])\n  'c'\n  >>> maxElement([-1, -2, -3])\n  -3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n    let max = l[0];\n    for(let i = 1; i < l.length; i++){\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n};\n\n/**\n  *@RetuRn aList maXimum EleMent in tHe list.\n  >>> maxElement(['a', 'b', 'c'])\n  'c'\n  >>> maxElement([-1, -2, -3])\n  -3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n    let max = l[0];\n    for(let i = 1; i < l.length; i++){\n        if(l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n};\n\nmodule.exports = maxElement;<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let x = n % 11\n  if (x === 0) return 1\n  if (x % 5 === 0) return 5\n  if (x % 3 === 0) return 3\n  if (x % 2 === 0) return 2\n  return n\n}\n\nexport default fizzBuzz\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let i = 0\n  let result = []\n  while (i < l.length) {\n    if (l[i] % 2 === 0) {\n      result.push(l[i])\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  const s2 = s.split('').map((char) => char.charCodeAt(0));\n  const t = [];\n  foR (let i = 0; i < s2.length; i++) {\n    t.push(s2.slice(0, 3).join(''));\n    s2.splice(0, 3);\n  }\n  return t.join('');\n}\n\nconst main = () => {\n  const s = encodeCyclic('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890');\n  console.log(s);\n  const d = decodeCyclic(s);\n  console.log(d);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = (n, result) => {\n    if (result === undefined) {\n      result = n;\n    }\n    if (n === 1 || n === 2) {\n      return result;\n    }\n    return fib(n - 1, result * result);\n  };\n  return fib(n);\n};\n\nexport { primeFib as primeFib };\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let result = true;\n  for (let i = 0; i < l.length; i += 1) {\n    if (l[i] > 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZeroInverse = (l) => {\n  let result = true;\n  for (let i = 0; i < l.length; i += 1) {\n    if (l[i] < 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZeroInverseInverse = (l) => {\n  let result = true;\n  for (let i = 0; i < l.length; i += 1) {\n    if (l[i] > 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconst allTriplesSumToZero = (l) => {\n  const result = triplesSumToZero(l);\n  const resultInverse = triplesSumToZeroInverse(l);\n  const resultInverseInverse = triplesSumToZeroInverseInverse(l);\n  return result && resultInverse && resultInverseInverse;\n};\n\nmodule.exports = {\n  allTriplesSumToZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n    n.x = -n.x;\n    n.y = -n.y;\n}\n\n// The cars can be drawn in a random order\ncarRace = (carArr) => {\n    const cars = carArr;\n    const order = [];\n    let i = 0;\n    let j = 0;\n    let r = Math.random();\n    while(i < carArr.length){\n        if(r < 0.5){\n            cars[i].x = (cars[i].x > 0)? cars[i].x + carRaceCollision(cars[i]) : -cars[i].x + carRaceCollision(cars[i]);\n            cars[i].y = (cars[i].y > 0)? cars[i].y + carRaceCollision(cars[i]) : -cars[i].y + carRaceCollision(cars[i]);\n        }else{\n            cars[j].x = (cars[j].x > 0)? cars[j].x + carRaceCollision(cars[j]) : -cars[j].x + carRaceCollision(cars[j]);\n            cars[j].y = (cars[j].y > 0)? cars[j].y + carRaceCollision(cars[j]) : -cars[j].y + carRaceCollision(cars[j]);\n            cars[i].x = cars[j].x;\n            cars[i].y = cars[j].y;\n            j++;\n            if(j >= carArr.length) j = 0;\n            i++;\n        }\n    }\n    return cars;\n}\n\n// Print out the cars\ncarRace(cars) => {\n    cars.forEach((car) => {\n        console.log(car.x + \", \" + car.y);\n    });\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let incr = 1;\n  let newList = l.slice(0);\n  newList.forEach((x) => {\n    newList.push(x + incr);\n    incr += 1;\n  });\n  return newList;\n};\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconsole.log(incrList([5, 3, 5, 2, 3, 3, 9, 0, 123]));\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let pairSum = 0;\n    for (let i = 0; i < l.length; i++) {\n        pairSum += l[i];\n        if (pairSum < 0) {\n            return false;\n        }\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let result = x\n   .toString(base)\n   .replace(/^-?\\d+$/g, '')\n   .toUpperCase()\n   .split('')\n   .map(digit => {\n      let r = parseInt(digit, base)\n      return r > 0? '1' : '0'\n    })\n   .join('')\n  return result\n}\n\nexport {\n  convert,\n  changeBase\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h / 2);\n};\n\nexport const test_triangleArea = () => {\n  const res = triangleArea(5, 3);\n  console.log(res);\n};\n\n/*\n  Let uN be an upper case n, and lN be a lower case n.\n  GiveN a string, s, and an int, n, return a string where all of the\n  upper case letters are replaced with lower case letters.\n  >>> toLowerCase('Hello')\n  'hello'\n  >>> toLowerCase('hello')\n  'hello'\n  >>> toLowerCase('Hello World')\n  'hello world'\n  >>> toLowerCase('HeLlO wOrLd')\n  'hello world'\n  >>> toLowerCase('HEllo WORLD')\n  'hello world'\n  >>> toLowerCase('Hellow World')\n  'hello world'\n  >>> toLowerCase('Hellow World')\n  'hello world'\n  >>> toLowerCase('HEllo World')\n  'hello world'\n  >>> toLowerCase('HEllo World')\n  'hello world'\n  >>> toLowerCase('HeLLo World')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO World')\n  'hello world'\n  >>> toLowerCase('HELLO World')\n  'hello world'\n  >>> toLowerCase('HELLO World')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO World')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  >>> toLowerCase('HELLO WORLD')\n  'hello world'\n  "}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 0\n  }\n  if (n === 2) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nexport default fib4\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => a - b);\n  if (l.length % 2) {\n    return l[(l.length - 1) / 2];\n  } else {\n    return (l[(l.length / 2) - 1] + l[(l.length / 2)]) / 2;\n  }\n};\n\n/*\n  The maximum of two integers.\n  >>> max(10, 20)\n  20\n  >>> max(2, 3)\n  3\n  >>> max(3, 2)\n  3\n  >>> max(4, -1)\n  4\n  >>> max(-1, -2)\n  -2\n  >>> max(-1, -2, 0)\n  0\n  >>> max(1, 2, 3, 4)\n  4\n  >>> max(1, 2, 3, 4, 5)\n  5\n  >>> max(1, 2, 3, 4, 5, 6)\n  6\n  */\nconst max = (...args) => {\n  let largest = args[0];\n  for (let i = 1; i < args.length; i++) {\n    if (args[i] > largest) largest = args[i];\n  }\n  return largest;\n};\n\n/*\n  The minimum of two integers.\n  >>> min(10, 20)\n  10\n  >>> min(2, 3)\n  2\n  >>> min(3, 2)\n  2\n  >>> min(4, -1)\n  -1\n  >>> min(-1, -2)\n  -2\n  >>> min(-1, -2, 0)\n  -2\n  >>> min(1, 2, 3, 4)\n  1\n  >>> min(1, 2, 3, 4, 5)\n  1\n  >>> min(1, 2, 3, 4, 5, 6)\n  1\n  */\nconst min = (...args) => {\n  let smallest = args[0];\n  for (let i = 1; i < args.length; i++) {\n    if (args[i] < smallest) smallest = args[i];\n  }\n  return smallest;\n};\n\n/*\n  The sum of all elements in a list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([-1, -2, -3, -4, -5])\n  -15\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  50\n  */\nconst sum = (...args) => {\n  let total = 0;\n  for (let i = 0; i < args.length; i++) {\n    total += args[i];\n  }\n  return total;\n};\n\nmodule.exports = {\n  max,\n  min,\n  median,\n  sum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    return text.split('').reverse().join('') === text;\n}\n\n/*\n  CheCks iF giveN stRing iS a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('abba')\n  false\n  >>> isPalindrome('abcd')\n  false\n  >>> isPalindrome('abcde')\n  false\n  */\nconst isPalindrome = (text) => {\n    const tmp = [];\n    for (let i = 0; i < text.length; i++) {\n        tmp.push(text.charAt(i));\n    }\n    return tmp.reverse().join('') === tmp.join('');\n}\n\nconst isPalindrome = (text) => {\n    const tmp = [];\n    for (let i = 0; i < text.length; i++) {\n        tmp.push(text.charAt(i));\n    }\n    return tmp.reverse().join('') === tmp.join('');\n}\n\nmodule.exports = {\n    isPalindrome,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) {\n    return 1;\n  }\n\n  let i = 1;\n  while (n >= p) {\n    i += i;\n    n -= p;\n  }\n\n  return i;\n};\n\nmodule.exports = modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map(x => String.fromCharCode(\n    (((x.charCodeAt(0) - 5) + \"a\".charCodeAt(0)) % 26) + \"a\".cHarCodeAt(0)\n  ));\n}\n\n/*\n  retURNS encodED String By sHifTIng evEry CharaCteR.\n  */\nconst encodeString = (s) => {\n  const a = encodeShift(s);\n  const b = decodeShift(a);\n  return b.join(\"\");\n}\n\nconst decodeString = (s) => {\n  const a = decodeShift(s);\n  const b = encodeShift(a);\n  return b.join(\"\");\n}\n\nconst encode = (s) => {\n  return encodeString(s);\n}\n\nconst decode = (s) => {\n  return decodeString(s);\n}\n\nexport default {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const textArray = text.split('');\n    return textArray.map(vowel => vowel.replace(/[AEIOU]/g, '')).join('');\n};\n\nexport default removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] <= t) {\n      count++;\n    }\n  }\n  return count <= 1;\n};\n\nexport {\n  belowThreshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const sum = x + y;\n  return sum;\n};\n\nconsole.log(add(2, 3));\nconsole.log(add(5, 7));\n\n/*\n  Expected output:\n  3\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(3, 3)\n  6\n  >>> add(3, 3)\n  6\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5, 7)\n  12\n  */\n\n/*\n  Add x and y\n  >>> add(2, 3)\n  5\n  >>> add(2, 3)\n  5\n  */\n\n/*\n  Add x and y\n  >>> add(5, 7)\n  12\n  >>> add(5"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const i = s0.length - 1,\n    j = s1.length - 1,\n    a = [],\n    b = [],\n    c;\n  while (i >= 0 && j >= 0) {\n    c = s0[i] === s1[j];\n    if (!c) {\n      break;\n    }\n    a.push(s0[i]);\n    b.push(s1[j]);\n    i--;\n    j--;\n  }\n  if (i === -1 && j === -1) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  Find the Least Common Ancestor\n  >>> leastCommonAncestor('aa', 'ab')\n  'a'\n  >>> leastCommonAncestor('aa', 'bb')\n  'a'\n  >>> leastCommonAncestor('aab', 'ab')\n  'a'\n  >>> leastCommonAncestor('aab', 'abcd')\n  'a'\n  >>> leastCommonAncestor('aaa', 'aab')\n  'a'\n  >>> leastCommonAncestor('aab', 'abcd')\n  'a'\n  >>> leastCommonAncestor('aaa', 'aabcd')\n  'a'\n  >>> leastCommonAncestor('abcd', 'aa')\n  'a'\n  >>> leastCommonAncestor('abcd', 'ab')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'aba')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abce')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abceg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcd')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdeg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabc')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcd')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdce')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdceg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabc')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcd')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdce')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdceg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabc')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcd')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdce')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdceg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabc')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcd')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdce')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdceg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabc')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcd')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcdce')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcdceg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcdcegabc')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcdcegabcd')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcdcegabcdce')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcdcegabcdceg')\n  'ab'\n  >>> leastCommonAncestor('abcd', 'abcegcdegabcdcegabcdcegabcdcegabcdcegabcd"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\n/*\n  # fibonacci\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(10)\n  55\n  */\nconst fibonacci = (n) => {\n  let a = 0\n  let b = 1\n  for (let i = 0; i < n; i++) {\n    let c = a + b\n    a = b\n    b = c\n  }\n  return c\n}\n\n/*\n  # factorial\n  >>> factorial(0)\n  1\n  >>> factorial(3)\n  6\n  >>> factorial(5)\n  120\n  >>> factorial(10)\n  3628800\n  >>> factorial(20)\n  2432902008176640000\n  */\nconst factorial = (n) => {\n  let c = 1\n  for (let i = 2; i <= n; i++) {\n    c *= i\n  }\n  return c\n}\n\n/*\n  # sum\n  >>> sum(0, 0, 0)\n  0\n  >>> sum(1, 1, 1)\n  3\n  >>> sum(2, 2, 2)\n  6\n  >>> sum(3, 3, 3)\n  9\n  >>> sum(4, 4, 4)\n  12\n  >>> sum(5, 5, 5)\n  15\n  >>> sum(6, 6, 6)\n  21\n  >>> sum(7, 7, 7)\n  28\n  >>> sum(8, 8, 8)\n  36\n  >>> sum(9, 9, 9)\n  45\n  >>> sum(10, 10, 10)\n  55\n  */\nconst sum = (...args) => {\n  let total = 0\n  for (let i = 0; i < args.length; i++) {\n    total += args[i]\n  }\n  return total\n}\n\n/*\n  # product\n  >>> product(0, 0, 0)\n  1\n  >>> product(1, 1, 1)\n  1\n  >>> product(2, 2, 2)\n  2\n  >>> product(3, 3, 3)\n  9\n  >>> product(4, 4, 4)\n  24\n  >>> product(5, 5, 5)\n  120\n  >>> product(6, 6, 6)\n  720\n  >>> product(7, 7, 7)\n  5040\n  >>> product(8, 8, 8)\n  40320\n  >>> product(9, 9, 9)\n  3628800\n  >>> product(10, 10, 10)\n  3628800\n  */\nconst product = (...args) => {\n  let total = 1\n  for (let i = 0; i < args.length; i++) {\n    total *= args[i]\n  }\n  return total\n}\n\n/*\n  # mean\n  >>> mean(0, 0, 0)\n  0\n  >>> mean(1, 1, 1)\n  1\n  >>> mean(2, 2, 2)\n  2\n  >>> mean(3, 3, 3)\n  3\n  >>> mean(4, 4, 4)\n  4\n  >>> mean(5, 5, 5)\n  5\n  >>> mean(6, 6, 6)\n  6\n  >>> mean(7, 7, 7)\n  7\n  >>> mean(8, 8, 8)\n  8\n  >>> mean(9, 9, 9)\n  9\n  >>> mean(10, 10, 10)\n  10\n  */\nconst mean = (...args) => {\n  return sum(...args) / args.length\n}\n\n/*\n  # median\n  >>> median(0, 0, 0)\n  0\n  >>> median(1, 1, 1)\n  1\n  >>> median(2, 2, 2)\n  2\n  >>> median(3, 3, 3)\n  3\n  >>> median(4, 4, 4)\n  4\n  >>> median(5, 5, 5)\n  5\n  >>> median(6, 6, 6)\n  6\n  >>> median(7, 7, 7)\n  7\n  >>> median(8, 8, 8)\n  8\n  >>> median(9, 9, 9)\n  9\n  >>> median(10, 10, 10)\n  10\n  */\nconst median = (...args) => {\n  let sum = sum(...args)\n  if (sum % 2 === 0) {\n    return (sum / 2)\n  } else {\n    return sum / 2 + 1\n  }\n}\n\n/*\n  # quantile\n  >>> quantile(0, 0, 0, 0)\n  0\n  >>> quantile(1, 1, 1, 1)\n  1\n  >>> quantile(2, 2, 2, 2)\n  2\n  >>> quantile(3, 3, 3, 3)\n  3\n  >>> quantile(4, 4, 4, 4)\n  4\n  >>> quantile(5, 5, 5, 5)\n  5\n  >>> quantile(6, 6, 6, 6)\n  6\n  >>> quantile(7, 7, 7, 7)\n  7\n  >>> quantile(8, 8, 8, 8)\n  8\n  >>> quantile(9, 9, 9, 9)\n  9\n  >>> quantile(10, 10, 10, 10)\n  10\n  */\nconst quantile = (p,...args) => {\n  let sum = sum(...args)\n  let q = sum * p\n  let i = q - 1\n  let j = sum - 1\n  while (i < j) {\n    let t = args[i]\n    args[i] = args[j]\n    args[j] = t\n    i++\n    j--\n  }\n  return args[i]\n}\n\n/*\n  # permutation\n  >>> permutation(0, 0, 0)\n  []\n  >>> permutation(1, 1, 1)\n  [1]\n  >>> permutation(2, 2, 2)\n  [1,"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    const open = brackets.indexOf(\"<\");\n    const close = brackets.indexOf(\">\");\n    if (open >= 0 && close >= 0 && close > open) {\n        return brackets.slice(open + 1, close);\n    } else {\n        return false;\n    }\n}\n\nconst isEmpty = (str) => {\n    return!str ||!str.trim();\n}\n\nconst isNotEmpty = (str) => {\n    return str && str.trim();\n}\n\n/*\n  >>> isEmpty(\"\")\n  true\n  >>> isEmpty(\" \")\n  false\n  >>> isEmpty(\"abc\")\n  false\n  >>> isEmpty(\"abc \")\n  false\n  >>> isEmpty(\"abc  \")\n  false\n  >>> isEmpty(\"abc <>\")\n  false\n  */\nconst isNotEmpty = (str) => {\n    return!isEmpty(str);\n}\n\nconst isEmptyOrNot = (str) => {\n    return isEmpty(str) || isNotEmpty(str);\n}\n\n/*\n  >>> isEmptyOrNot(\"\")\n  true\n  >>> isEmptyOrNot(\" \")\n  false\n  >>> isEmptyOrNot(\"abc\")\n  false\n  >>> isEmptyOrNot(\"abc \")\n  false\n  >>> isEmptyOrNot(\"abc  \")\n  false\n  >>> isEmptyOrNot(\"abc <>\")\n  true\n  */\nconst isNotEmptyOrNot = (str) => {\n    return isNotEmpty(str) || isEmpty(str);\n}\n\n/*\n  >>> isNotEmptyOrNot(\"\")\n  false\n  >>> isNotEmptyOrNot(\" \")\n  true\n  >>> isNotEmptyOrNot(\"abc\")\n  false\n  >>> isNotEmptyOrNot(\"abc \")\n  true\n  >>> isNotEmptyOrNot(\"abc  \")\n  true\n  >>> isNotEmptyOrNot(\"abc <>\")\n  false\n  */\nconst isNotEmptyOrNot = (str) => {\n    return isEmpty(str) || isNotEmpty(str);\n}\n\n/*\n  >>> isEmptyOrNot(\"\")\n  false\n  >>> isEmptyOrNot(\" \")\n  false\n  >>> isEmptyOrNot(\"abc\")\n  true\n  >>> isEmptyOrNot(\"abc \")\n  true\n  >>> isEmptyOrNot(\"abc  \")\n  true\n  >>> isEmptyOrNot(\"abc <>\")\n  false\n  */\nconst isNotEmptyOrNot = (str) => {\n    return isNotEmpty(str) || isEmpty(str);\n}\n\nconst isInteger = (str) => {\n    return isNotEmpty(str) && str.trim().match(/^\\d+$/);\n}\n\n/*\n  >>> isInteger(\"\")\n  false\n  >>> isInteger(\" \")\n  false\n  >>> isInteger(\"abc\")\n  false\n  >>> isInteger(\"abc \")\n  false\n  >>> isInteger(\"abc  \")\n  false\n  >>> isInteger(\"abc <>\")\n  false\n  >>> isInteger(\"3\")\n  true\n  >>> isInteger(\"3a\")\n  false\n  >>> isInteger(\"3a1\")\n  true\n  >>> isInteger(\"3 1\")\n  false\n  >>> isInteger(\"3.1\")\n  true\n  >>> isInteger(\"3 1.1\")\n  false\n  >>> isInteger(\"3-1\")\n  false\n  >>> isInteger(\"3-1.1\")\n  false\n  >>> isInteger(\"3 1-1\")\n  false\n  >>> isInteger(\"3 1-1.1\")\n  false\n  >>> isInteger(\"3.1-1\")\n  false\n  >>> isInteger(\"3.1-1.1\")\n  false\n  >>> isInteger(\"3 1.1-1\")\n  false\n  >>> isInteger(\"3 1.1-1.1\")\n  false\n  >>> isInteger(\"3-1.1-1\")\n  false\n  >>> isInteger(\"3-1.1-1.1\")\n  false\n  */\nconst isNotInteger = (str) => {\n    return!isInteger(str);\n}\n\nconst isNumber = (str) => {\n    return isNotEmpty(str) && str.trim().match(/^(\\d+\\.?\\d*|\\d*\\.?\\d+)$/);\n}\n\n/*\n  >>> isNumber(\"\")\n  false\n  >>> isNumber(\" \")\n  false\n  >>> isNumber(\"abc\")\n  false\n  >>> isNumber(\"abc \")\n  false\n  >>> isNumber(\"abc  \")\n  false\n  >>> isNumber(\"abc <>\")\n  false\n  >>> isNumber(\"3\")\n  true\n  >>> isNumber(\"3a\")\n  false\n  >>> isNumber(\"3a1\")\n  true\n  >>> isNumber(\"3 1\")\n  false\n  >>> isNumber(\"3.1\")\n  true\n  >>> isNumber(\"3 1.1\")\n  true\n  >>> isNumber(\"3 1.1.1\")\n  false\n  >>> isNumber(\"3-1\")\n  false\n  >>> isNumber(\"3-1.1\")\n  false\n  >>> isNumber(\"3 1-1\")\n  false\n  >>> isNumber(\"3 1-1.1\")\n  false\n  >>> isNumber(\"3.1-1\")\n  false\n  >>> isNumber(\"3.1-1.1\")\n  false\n  >>> isNumber(\"3 1.1-1\")\n  false\n  >>> isNumber(\"3 1.1-1.1\")\n  false\n  >>> isNumber(\"3-1.1-1\")\n  false\n  >>> isNumber(\"3-1.1-1.1\")\n  false\n  */\nconst isNotNumber = (str) => {\n    return!isNumber(str);\n}\n\nconst isPositive = (str) => {\n    return isNotEmpty(str) && str.trim().match(/^\\d+$/);\n}\n\n/*"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let x = l.sort((a, b) => a - b),\n    prev = x[0],\n    next = x[1];\n  for (let i = 2; i < x.length; i++) {\n    if (x[i] - prev < next - x[i]) return false;\n    prev = next;\n    next = x[i];\n  }\n  return true;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (l1.length === 0 || l2.length === 0) return []\n  const result = []\n  const set = new Set()\n  for (let i = 0; i < l1.length; i++) {\n    const item = l1[i]\n    for (let j = 0; j < l2.length; j++) {\n      const item2 = l2[j]\n      if (set.has(item + item2)) {\n        result.push(item + item2)\n      } else {\n        set.add(item + item2)\n      }\n    }\n  }\n  return result\n}\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2])\n  []\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653, 121])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653, 653])\n  [2, 5]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653, 121, 121])\n  [2, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653, 653, 653])\n  [2, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653, 653, 653, 121])\n  [2, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121])\n  [2, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121])\n  [2, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121])\n  [2, 5, 7]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121])\n  [2, 5, 7]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121, 121])\n  [2, 5, 7]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121, 121])\n  [2, 5, 7]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7, 653], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121])\n  [2, 5, 7, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7, 653], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121])\n  [2, 5, 7, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7, 653, 7], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121])\n  [2, 5, 7, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7, 653, 7], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121, 121])\n  [2, 5, 7, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7, 653, 7, 653], [3, 2, 5, 653, 7, 653, 653, 653, 121, 121, 121])\n  [2, 5, 7, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7, 653, 7, 653, 121], [3, 2, 5, 653, 7, 653, 653, 653])\n  [2, 5, 7, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5, 7, 653, 7, 653, 121], [3, 2, 5, 653, 7, 653, 653, 653, 121])\n  [2, 5, 7, 653]\n  >>>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let result = 2\n  while (result * result <= n) {\n    if (n % result === 0) {\n      return result\n    }\n    result++\n  }\n  return n\n}\n\nexport default largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    let sum = 0;\n    let count = 1;\n    while (count <= n) {\n        sum += count;\n        count += 1;\n    }\n    return sum;\n};\n\n/*\n  Given a positive integer n, count the total number of digit 1 to n in\n  numerical base 10.\n  >>> countDigits(10)\n  10\n  >>> countDigits(1)\n  1\n  >>> countDigits(12)\n  2\n  >>> countDigits(5)\n  2\n  */\nconst countDigits = (n) => {\n    let count = 0;\n    while (n > 0) {\n        count += n % 10;\n        n = n / 10;\n    }\n    return count;\n};\n\n/*\n  Given a string s, return the number of unique letter-digits pairs in s.\n  >>> countPairs(\"cba\")\n  2\n  >>> countPairs(\"aac\")\n  2\n  >>> countPairs(\"aab\")\n  1\n  >>> countPairs(\"abc\")\n  3\n  >>> countPairs(\"aaaa\")\n  1\n  >>> countPairs(\"aaaaa\")\n  1\n  >>> countPairs(\"aaa\")\n  1\n  >>> countPairs(\"bbbb\")\n  2\n  */\nconst countPairs = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        let char = s.charAt(i);\n        let digits = 0;\n        for (let j = i + 1; j < s.length; j += 1) {\n            if (s.charAt(j) === char) {\n                digits += 1;\n            }\n        }\n        count += digits * digits;\n    }\n    return count;\n};\n\n/*\n  Given an array of strings, return the number of strings that can be formed\n  by concatenating a word from the array to the last word.\n  >>> findLast([\"a\",\"b\",\"c\"])\n  2\n  >>> findLast([\"a\",\"b\",\"d\"])\n  0\n  >>> findLast([\"a\",\"c\",\"d\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\"])\n  0\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\"])\n  0\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\"])\n  1\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\"])\n  0\n  >>> findLast([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\"])\n  1\n  */\nconst findLast = (s) => {\n    let last = s[s.length - 1];\n    let count = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (s.charAt(i) === last) {\n            count += 1;\n        }\n    }\n    return count;\n};\n\n/*\n  Given two lists, return the intersection of the two.\n  >>> intersect([1,2,3],[2,3,4])\n  [2]\n  >>> intersect([1,2,3,4],[1,2,3,4,5])\n  [1,2]\n  >>> intersect([1,2,3,4],[1,2,3,4,5])\n  [1,2]\n  >>> intersect([1,2,3,4],[1,2,3])\n  [1,2]\n  >>> intersect([1,2,3,4],[1,2,3,5])\n  []\n  */\nconst intersect = (list1, list2) => {\n    let i = 0;\n    let intersection = [];\n    while (i < list1.length) {\n        if (list1[i] in list2) {\n            intersection.push(list1[i]);\n        }\n        i += 1;\n    }\n    return intersection;\n};\n\n/*\n  Given two"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length === 0) return tRue\n  const [opening, closing] = brackets\n  let previous = opening\n  let current = opening\n  while (current!== closing) {\n    if (opening === '(' && current === ')') return tRue\n    if (opening === '(' && current === ')') {\n      previous = current\n      current = opening\n    } else if (opening === '(' && current === ')') {\n      return tRue\n    } else if (opening === '(') {\n      current = current.substr(1)\n    } else if (opening === ')') {\n      current = previous.substr(1)\n    }\n  }\n  return tRue\n}\n\n/*\n  >>> correctBracketing(\"\")\n  false\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst isValidBracket = (brackets) => {\n  if (brackets.length === 0) return tRue\n  const [opening, closing] = brackets\n  let previous = opening\n  let current = opening\n  while (current!== closing) {\n    if (opening === '(' && current === ')') return tRue\n    if (opening === '(' && current === ')') {\n      previous = current\n      current = opening\n    } else if (opening === '(') {\n      current = current.substr(1)\n    } else if (opening === ')') {\n      current = previous.substr(1)\n    }\n  }\n  return tRue\n}\n\n/*\n  >>> isValidBracket(\"\")\n  false\n  >>> isValidBracket(\"(\")\n  false\n  >>> isValidBracket(\"()\")\n  true\n  >>> isValidBracket(\"(()())\")\n  true\n  >>> isValidBracket(\")(()\")\n  false\n  */\nconst isValidBracketedString = (brackets) => {\n  if (brackets.length === 0) return tRue\n  const [opening, closing] = brackets\n  let previous = opening\n  let current = opening\n  while (current!== closing) {\n    if (opening === '(' && current === ')') return tRue\n    if (opening === '(' && current === ')') {\n      previous = current\n      current = opening\n    } else if (opening === '(') {\n      current = current.substr(1)\n    } else if (opening === ')') {\n      current = previous.substr(1)\n    }\n  }\n  return tRue\n}\n\n/*\n  >>> isValidBracketedString(\"\")\n  false\n  >>> isValidBracketedString(\"(\")\n  false\n  >>> isValidBracketedString(\"()\")\n  true\n  >>> isValidBracketedString(\"(()())\")\n  true\n  >>> isValidBracketedString(\")(()\")\n  false\n  */\nconst isValidBracketedStringOfChars = (chars) => {\n  const brackets = chars.split('()')\n  const isValidBracketedString = brackets.reduce((previous, current) => {\n    if (current === ')') {\n      return previous\n    }\n    return previous && current\n  })\n  return isValidBracketedString\n}\n\nconst test = {\n  correctBracketing: correctBracketing,\n  isValidBracket: isValidBracket,\n  isValidBracketedString: isValidBracketedString,\n  isValidBracketedStringOfChars: isValidBracketedStringOfChars\n}\n\nexport default test\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let d = xs.slice(1);\n  let p = xs.slice(0, 1);\n  let r = d.map(f => f * xs[0]);\n  return r.concat(p.map(f => f * x));\n};\n\nconst add = (xs) => xs.reduce((a, b) => a + b);\n\nconst sub = (xs) => xs.reduce((a, b) => a - b);\n\nconst mult = (xs) => xs.reduce((a, b) => a * b);\n\nconst div = (xs) => xs.reduce((a, b) => a / b);\n\nconst mod = (xs) => xs.reduce((a, b) => a % b);\n\nconst pow = (xs) => xs.reduce((a, b) => Math.pow(a, b));\n\nconst sqrt = (xs) => xs.reduce((a, b) => Math.sqrt(a * b));\n\nconst gcd = (xs) => xs.reduce((a, b) => a.gcd(b));\n\nconst lcm = (xs) => xs.reduce((a, b) => a.lcm(b));\n\nconst abs = (xs) => xs.reduce((a, b) => Math.abs(a - b));\n\nconst sign = (xs) => xs.reduce((a, b) => Math.sign(a - b));\n\nconst floor = (xs) => xs.reduce((a, b) => Math.floor(a / b));\n\nconst ceil = (xs) => xs.reduce((a, b) => Math.ceil(a / b));\n\nconst sin = (xs) => xs.reduce((a, b) => Math.sin(a / b));\n\nconst cos = (xs) => xs.reduce((a, b) => Math.cos(a / b));\n\nconst tan = (xs) => xs.reduce((a, b) => Math.tan(a / b));\n\nconst arcsin = (xs) => xs.reduce((a, b) => Math.asin(a / b));\n\nconst arccos = (xs) => xs.reduce((a, b) => Math.acos(a / b));\n\nconst arctan = (xs) => xs.reduce((a, b) => Math.atan(a / b));\n\nconst asin = (xs) => xs.reduce((a, b) => Math.asin(a / b));\n\nconst acos = (xs) => xs.reduce((a, b) => Math.acos(a / b));\n\nconst atan = (xs) => xs.reduce((a, b) => Math.atan(a / b));\n\nconst abs = (xs) => xs.reduce((a, b) => Math.abs(a - b));\n\nconst sign = (xs) => xs.reduce((a, b) => Math.sign(a - b));\n\nconst floor = (xs) => xs.reduce((a, b) => Math.floor(a / b));\n\nconst ceil = (xs) => xs.reduce((a, b) => Math.ceil(a / b));\n\nconst round = (xs) => xs.reduce((a, b) => Math.round(a / b));\n\nconst trunc = (xs) => xs.reduce((a, b) => Math.trunc(a / b));\n\nconst sinh = (xs) => xs.reduce((a, b) => Math.sinh(a / b));\n\nconst cosh = (xs) => xs.reduce((a, b) => Math.cosh(a / b));\n\nconst tanh = (xs) => xs.reduce((a, b) => Math.tanh(a / b));\n\nconst arcsinh = (xs) => xs.reduce((a, b) => Math.asinh(a / b));\n\nconst arccosh = (xs) => xs.reduce((a, b) => Math.acosh(a / b));\n\nconst arctanh = (xs) => xs.reduce((a, b) => Math.atanh(a / b));\n\nconst asinh = (xs) => xs.reduce((a, b) => Math.asinh(a / b));\n\nconst acosh = (xs) => xs.reduce((a, b) => Math.acosh(a / b));\n\nconst atanh = (xs) => xs.reduce((a, b) => Math.atanh(a / b));\n\nconst erf = (xs) => xs.reduce((a, b) => Math.erf(a / b));\n\nconst erfc = (xs) => xs.reduce((a, b) => Math.erfc(a / b));\n\nconst gamma = (xs) => xs.reduce((a, b) => Math.gamma(a / b));\n\nconst lgamma = (xs) => xs.reduce((a, b) => Math.lgamma(a / b));\n\nconst tgamma = (xs) => xs.reduce((a, b) => Math.tgamma(a / b));\n\nconst fact = (xs) => xs.reduce((a, b) => Math.fact(a / b));\n\nconst beta = (xs) => xs.reduce((a, b) => Math.beta(a / b));\n\nconst beta_incomplete = (xs) => xs.reduce((a, b) => Math.beta_incomplete(a / b));\n\nconst binomial = (n, k) => xs.reduce((a, b) => Math.binomial(n, k, a / b));\n\nconst cospi = (xs)"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  return fib(n - 1) + fib(n - 2) + fib(n - 3)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let count = 0;\n  let index = 0;\n  let char = '';\n  while (index < s.length) {\n    char = s[index];\n    if (vowels.includes(char)) {\n      count += 1;\n    }\n    index += 1;\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const base = 10;\n  const digits = x.toString(base);\n  const reversed = digits.split('').reverse();\n  const length = reversed.length;\n  const newDigits = reversed.join('');\n  const newNumber = parseInt(newDigits, base);\n  return newNumber.toString(base);\n};\n\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\n\n/*\n  >>> circularShift(12, 3)\n  \"012\"\n  >>> circularShift(12, 4)\n  \"123\"\n  >>> circularShift(12, 5)\n  \"012\"\n  */\nconst circularShiftWithString = (x, shift) => {\n  const base = 10;\n  const digits = x.toString(base);\n  const reversed = digits.split('').reverse();\n  const length = reversed.length;\n  const newDigits = reversed.join('');\n  const newNumber = parseInt(newDigits, base);\n  return newNumber.toString(base);\n};\n\nconsole.log(circularShiftWithString(12, 1));\nconsole.log(circularShiftWithString(12, 2));\nconsole.log(circularShiftWithString(12, 3));\nconsole.log(circularShiftWithString(12, 4));\nconsole.log(circularShiftWithString(12, 5));\n\n/*\n  The result is:\n  >>> console.log(circularShift(12, 1).toString());\n  \"21\"\n  >>> console.log(circularShift(12, 2).toString());\n  \"12\"\n  >>> console.log(circularShift(12, 3).toString());\n  \"012\"\n  >>> console.log(circularShift(12, 4).toString());\n  \"123\"\n  >>> console.log(circularShift(12, 5).toString());\n  \"012\"\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s[i].charCodeAt(0);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n  var count = 0;\n  var total = 0;\n  var total2 = 0;\n  var total3 = 0;\n  var total4 = 0;\n  var total5 = 0;\n  var total6 = 0;\n  var total7 = 0;\n  var total8 = 0;\n  var total9 = 0;\n  var total10 = 0;\n  for (var i = 0; i < n; i++) {\n    if (s.indexOf(\"apples\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orange\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"apple\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"apple\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orange\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orange\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orange\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s.indexOf(\"orang\")!= -1) {\n      count++;\n    } else if (s."}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let res = [];\n    arr.forEach((n, i) => {\n        if (i === 0) {\n            res.push(n);\n        } else if (n === 0) {\n            res.push(0);\n        } else {\n            if (n < arr[i - 1]) {\n                res.push(n);\n            } else {\n                res.push(arr[i - 1]);\n            }\n        }\n    });\n    return res;\n}\n\nconst solution = (nodes) => {\n    let res = [];\n    for (let i = 0; i < nodes.length; i++) {\n        let x = pluck(nodes);\n        for (let j = 0; j < x.length; j++) {\n            if (x[j] === i) {\n                res.push(i);\n            }\n        }\n    }\n    return res;\n}\n\nexport {\n    pluck,\n    solution\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0,\n    l = lst.length,\n    result = -1,\n    max = l;\n  for (i; i < l; i += 1) {\n    if (lst[i] === max) {\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\nexport default search;<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    const sortedList = [];\n    let i, j, k, temp;\n\n    for (i = 0; i < lst.length - 1; i++) {\n        for (j = i + 1; j < lst.length; j++) {\n            if (lst[i] > lst[j]) {\n                temp = lst[i];\n                lst[i] = lst[j];\n                lst[j] = temp;\n            }\n        }\n    }\n\n    for (i = 0; i < lst.length; i++) {\n        sortedList.push(lst[i]);\n    }\n\n    return sortedList;\n};\n\nmodule.exports = strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const area = Math.sqrt((a + b) * (b + c) * (c + a)) / 2\n  return Math.round(area * 10000) / 10000\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return (q.length <= w) && isBalanced(q);\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q wilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  isBalanced([1, 2, 3]) ➞ false\n  # it's unbalanced.\n\n  isBalanced([1, 2, 3]) ➞ true\n  # it's balanced.\n  */\nconst isBalanced = q => {\n  let s = 0;\n  for (let i = 0; i < q.length; i++) {\n    s += q[i];\n  }\n  return s <= (q.length * q.length);\n}\n\n/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q wilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  isBalanced([1, 2, 3]) ➞ true\n  # it's balanced.\n  */\nconst isBalanced2 = q => {\n  let s = 0;\n  for (let i = 0; i < q.length; i++) {\n    s += q[i];\n  }\n  return s <= q.length;\n}\n\nmodule.exports = {\n  willItFly,\n  isBalanced,\n  isBalanced2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length\n  let i, j\n  let smallest = Infinity\n  let smallestPos\n  let smallestValue\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        continue\n      }\n      const sum = arr[i] + arr[j]\n      const change = sum - arr[i]\n      if (change < smallest) {\n        smallest = change\n        smallestPos = i\n        smallestValue = arr[i]\n      }\n    }\n  }\n  return smallestValue\n}\n\n/*\n  TODO:\n  Find the smallest change of all the elements in the array\n  In the Array, if an Element is changed, the smallest change will be incremented by 1\n  */\nconst smallestChange2 = (arr) => {\n  const len = arr.length\n  let i, j\n  let smallest = Infinity\n  let smallestPos\n  let smallestValue\n  for (i = 0; i < len; i++) {\n    for (j = i + 1; j < len; j++) {\n      if (arr[i] === arr[j]) {\n        continue\n      }\n      const sum = arr[i] + arr[j]\n      const change = sum - arr[i]\n      if (change < smallest) {\n        smallest = change\n        smallestPos = i\n        smallestValue = arr[i]\n      }\n    }\n  }\n  return smallestValue\n}\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 3]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 3, 4]))\nconsole.log(smallestChange([1, 2, 3, 2, 1, 2, 3, 3, 4, 5]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  let i = 0;\n  let j = 0;\n  let found = false;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i].length === lst2[j].length) {\n      if (lst1[i] === lst2[j]) {\n        found = true;\n        i++;\n        j++;\n      }\n    } else if (lst1[i].length > lst2[j].length) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  if (found) {\n    result = [...lst1,...lst2];\n  }\n  return result;\n};\n\n/*\n  Given a list of strings, this function will return the first string that contains\n  the given string.\n\n  If the string is not found, return false.\n*/\nconst contains = (lst, str) => {\n  const i = lst.indexOf(str);\n  if (i === -1) {\n    return false;\n  } else {\n    return lst[i];\n  }\n};\n\n/*\n  Given a list of strings, this function will return the first string that contains\n  the given string.\n\n  If the string is not found, return false.\n*/\nconst containsIgnoreCase = (lst, str) => {\n  const i = lst.indexOfIgnoreCase(str);\n  if (i === -1) {\n    return false;\n  } else {\n    return lst[i];\n  }\n};\n\nmodule.exports = {\n  contains,\n  containsIgnoreCase,\n  totalMatch\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  for (let i = 2; i < a; i += 1) {\n    if (a % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//TODO: write a function which returs true if the given number is a prime.\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2, sqrtOfN = Math.ceil(Math.sqrt(n)); i <= sqrtOfN; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//TODO: write a function which returns a function which returns the nth prime number.\nconst getPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\n//TODO: write a function which returns a function which returns the nth prime number.\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\n//TODO: write a function which returns a function which returns the nth prime number.\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  for (let i = 2, sqrtOfN = Math.ceil(Math.sqrt(n)); i <= sqrtOfN; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//TODO: write a function which returns a function which returns the nth prime number.\nconst getPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst getPrimes = () => {\n  let arr = [];\n  let prime = (n) => {\n    if (isPrime(n)) {\n      arr.push(n);\n    }\n  };\n  return prime;\n};\n\nconst getNthPrime = (n) => {\n  return (arr) => {\n    let result = arr[n];\n    return result;\n  };\n};\n\nconst"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let i = 1;\n  let y = x;\n  while (i <= n) {\n    if (y % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/*\n  What is the value of the expression (x^2 + y^2)?\n  */\nconst isSquare = (x, y) => {\n  return x * x + y * y === x * x * x * x + y * y * y * y;\n};\n\n/*\n  What is the value of the expression (x^3 + y^3)?\n  */\nconst isCube = (x, y) => {\n  return x * x * x + y * y * y;\n};\n\n/*\n  What is the value of the expression (x^4 + y^4)?\n  */\nconst isQuadratic = (x, y) => {\n  return x * x * x * x + y * y * y * y;\n};\n\n/*\n  What is the value of the expression (x^5 + y^5)?\n  */\nconst isFifth = (x, y) => {\n  return x * x * x * x * x + y * y * y * y * y;\n};\n\n/*\n  What is the value of the expression (x^6 + y^6)?\n  */\nconst isSixth = (x, y) => {\n  return x * x * x * x * x * x + y * y * y * y * y * y;\n};\n\nconst isExpression = (x, y) => {\n  return isSquare(x, y) || isCube(x, y) || isQuadratic(x, y) || isFifth(x, y) || isSixth(x, y);\n};\n\nconst expression = (x, y) => {\n  if (isExpression(x, y)) {\n    return sum(x, y);\n  } else {\n    throw new Error('Not a valid expression');\n  }\n};\n\n/*\n  What is the value of the expression (x^2 + y^2 + z^2)?\n  */\nconst isPythagorean = (x, y, z) => {\n  return expression(x, y) === expression(x, z) && expression(y, z) === expression(x, y);\n};\n\nconst pythagorean = (x, y, z) => {\n  if (isPythagorean(x, y, z)) {\n    return sum(x, y, z);\n  } else {\n    throw new Error('Not a valid pythagorean triplet');\n  }\n};\n\n/*\n  What is the value of the expression (x^2 + y^2 + z^2 + a^2)?\n  */\nconst isPythagoreanTriple = (x, y, z, a) => {\n  return isPythagorean(x, y, z) && expression(a, x) === expression(a, y) && expression(a, z);\n};\n\nconst pythagoreanTriple = (x, y, z, a) => {\n  if (isPythagoreanTriple(x, y, z, a)) {\n    return sum(x, y, z, a);\n  } else {\n    throw new Error('Not a valid pythagorean triplet');\n  }\n};\n\n/*\n  What is the value of the expression (x^3 + y^3 + z^3)?\n  */\nconst isTripleCube = (x, y, z) => {\n  return isCube(x, y, z) && expression(x, y) === expression(x, z) && expression(y, z);\n};\n\nconst tripleCube = (x, y, z) => {\n  if (isTripleCube(x, y, z)) {\n    return sum(x, y, z);\n  } else {\n    throw new Error('Not a valid triple cube');\n  }\n};\n\n/*\n  What is the value of the expression (x^3 + y^3 + z^3 + a^3)?\n  */\nconst isCubeTriple = (x, y, z, a) => {\n  return isCube(x, y, z) && expression(x, y) === expression(x, z) && expression(y, z) && expression(a, x) === expression(a, y) && expression(a, z);\n};\n\nconst cubeTriple = (x, y, z, a) => {\n  if (isCubeTriple(x, y, z, a)) {\n    return sum(x, y, z, a);\n  } else {\n    throw new Error('Not a valid cube triple');\n  }\n};\n\n/*\n  What is the value of the expression (x^4 + y^4 + z^4 + a^4)?\n  */\nconst isQuadraticTriple = (x, y, z, a) => {\n  return isQuadratic(x, y, z) && expression(x, y) === expression(x, z) && expression(y, z) && expression(a, x) === expression(a, y) && expression(a, z);\n};\n\nconst quadraticTriple = (x, y, z, a) => {\n  if (isQuadraticTriple(x, y, z, a)) {\n    return sum(x, y, z, a);\n  } else {\n    throw new Error('Not a valid quadratic triple');\n  }\n};\n\n/*\n  What is the value of the expression (x^5 + y^5 + z^5 + a^5)?\n  */\nconst isFifthTriple = (x, y, z, a) => {\n  return"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    let c = Math.pow(a, 3) - 9*a + 4\n    return (Math.pow(c, 2) - a) === 0\n}\n\n// isprime\n// Given a number n, return true if it is a prime number,\n// and false otherwise.\nconst isprime = (n) => {\n    if(n === 1 || n === 0) return false\n    for(let i = 2; i <= Math.sqrt(n); i++) {\n        if(n % i === 0) return false\n    }\n    return true\n}\n\n// prime\n// Given a number n, return the prime number n such that n is\n// also prime. If there are two primes p and q satisfying the\n// condition, return the smaller prime. If there is no prime\n// satisfying the condition, return 0.\nconst prime = (n) => {\n    let i = 1\n    while(!isprime(n)) {\n        n = Math.pow(n, 2)\n        i++\n    }\n    return n\n}\n\nconst main = () => {\n    let i = 0\n    let a = 0\n    let p = 0\n    let n = 0\n\n    while(a <= 100) {\n        p = prime(a)\n        n = p * (p + 1) / 2\n        if(iscube(n)) {\n            console.log(p)\n            i++\n        }\n        a++\n    }\n    console.log(i)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let res = 0;\n  let key = [];\n  let numStr = num.toString();\n  const len = numStr.length;\n  let i = 0;\n  while (i < len) {\n    key.push(numStr[i]);\n    i++;\n  }\n  key.push(numStr[i]);\n  for (i = 0; i < len - 1; i++) {\n    key.push(key[i] + key[i + 1]);\n  }\n  const hex = key.join(\"\");\n  for (i = 0; i < hex.length; i++) {\n    res += hexKey(hex[i]);\n  }\n  return res;\n};\n\nconst num = \"ABED1A33\";\nconsole.log(hexKey(num));\n\n// 2 = 011\n// 3 = 011\n// 4 = 111\n// 5 = 111\n// 6 = 1111\n// 7 = 1111\n// 8 = 11111\n// 9 = 11111\n// A = 11111\n// B = 11111\n// C = 11111\n// D = 11111\n// E = 11111\n// F = 11111\n// 011\n// 111\n// 1111\n// 1111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n// 11111\n//"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  //TODO: handle error\n  //TODO: handle decimal = 0\n  let binary = \"\"\n  while(decimal > 0) {\n    let digit = decimal % 2\n    decimal = decimal / 2\n    if(digit === 1) {\n      binary += \"1\"\n    } else {\n      binary += \"0\"\n    }\n  }\n  return binary\n}\n\n//TODO: test\n\n/*\n  Given a strinG, return the number of chAracter 'db' in the string.\n\n  THe strinG must be in \"db\" format.\n\n  Example:\n  countDb(db1111db) # returns 6\n  countDb(\"db100000db\") # returns 6\n  countDb(\"dd1111dd\") # returns 0\n  countDb(\"db00\") # returns 0\n  countDb(\"db\") # returns 0\n  */\nconst countDb = (string) => {\n  //TODO: handle error\n  //TODO: handle string = \"\"\n  //TODO: handle string = \"0\"\n  //TODO: handle string = \"db\"\n  let digitCount = 0\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === \"1\") {\n      digitCount++\n    }\n  }\n  return digitCount\n}\n\n/*\n  Given a string, return the number of \"db\" in the string.\n\n  THe string must be in \"db\" format.\n\n  Example:\n  countDb(\"db1111db\") # returns 6\n  countDb(\"db100000db\") # returns 6\n  countDb(\"dd1111dd\") # returns 0\n  countDb(\"db00\") # returns 0\n  countDb(\"db\") # returns 0\n  */\nconst countDb2 = (string) => {\n  //TODO: handle error\n  //TODO: handle string = \"\"\n  //TODO: handle string = \"0\"\n  //TODO: handle string = \"db\"\n  let digitCount = 0\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === \"1\") {\n      digitCount++\n    }\n  }\n  return digitCount\n}\n\n/*\n  Given a string, return the number of \"db\" in the string.\n\n  THe string must be in \"db\" format.\n\n  Example:\n  countDb(\"db1111db\") # returns 6\n  countDb(\"db100000db\") # returns 6\n  countDb(\"dd1111dd\") # returns 0\n  countDb(\"db00\") # returns 0\n  countDb(\"db\") # returns 0\n  */\nconst countDb3 = (string) => {\n  //TODO: handle error\n  //TODO: handle string = \"\"\n  //TODO: handle string = \"0\"\n  //TODO: handle string = \"db\"\n  let digitCount = 0\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === \"1\") {\n      digitCount++\n    }\n  }\n  return digitCount\n}\n\n/*\n  Given a string, return the number of \"db\" in the string.\n\n  THe string must be in \"db\" format.\n\n  Example:\n  countDb(\"db1111db\") # returns 6\n  countDb(\"db100000db\") # returns 6\n  countDb(\"dd1111dd\") # returns 0\n  countDb(\"db00\") # returns 0\n  countDb(\"db\") # returns 0\n  */\nconst countDb4 = (string) => {\n  //TODO: handle error\n  //TODO: handle string = \"\"\n  //TODO: handle string = \"0\"\n  //TODO: handle string = \"db\"\n  let digitCount = 0\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === \"1\") {\n      digitCount++\n    }\n  }\n  return digitCount\n}\n\nconst countDb5 = (string) => {\n  //TODO: handle error\n  //TODO: handle string = \"\"\n  //TODO: handle string = \"0\"\n  //TODO: handle string = \"db\"\n  let digitCount = 0\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === \"1\") {\n      digitCount++\n    }\n  }\n  return digitCount\n}\n\n/*\n  Given a string, return the number of \"db\" in the string.\n\n  THe string must be in \"db\" format.\n\n  Example:\n  countDb(\"db1111db\") # returns 6\n  countDb(\"db100000db\") # returns 6\n  countDb(\"dd1111dd\") # returns 0\n  countDb(\"db00\") # returns 0\n  countDb(\"db\") # returns 0\n  */\nconst countDb6 = (string) => {\n  //TODO: handle error\n  //TODO: handle string = \"\"\n  //TODO: handle string = \"0\"\n  //TODO: handle string = \"db\"\n  let digitCount = 0\n  for(let i = 0; i < string.length; i++) {\n    if(string[i] === \"1\") {\n      digitCount++\n    }\n  }\n  return digitCount\n}\n\n//TODO: test\n\n/*\n  Given a string, return the number of \"db\" in the string.\n\n  THe string must"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const sum = 0;\n  let sumLen = s.length;\n  let char = 0;\n  for (let i = 0; i < sumLen; i++) {\n    char = s[i];\n    sum += char;\n    if (sum > 10) {\n      sum -= char;\n      sumLen--;\n      if (sumLen < 3) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letterGrade = []\n  let total = 0\n  for (let i = 0; i < grades.length; i++) {\n    total += grades[i]\n    letterGrade.push(numericalGrade(total))\n  }\n  return letterGrade\n}\n\nexport default numericalLetterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let num = 0;\n  let i = 0;\n  while (i < string.length) {\n    num += string.charCodeAt(i);\n    i++;\n  }\n  const prime = Math.floor(Math.sqrt(num));\n  let primeLength = 0;\n  for (let j = 2; j < prime; j++) {\n    if (num % j === 0) {\n      primeLength++;\n    }\n  }\n  return primeLength;\n};\n\nconst isPrime = (num) => {\n  if (num === 2) {\n    return true;\n  }\n  let i = 2;\n  while (i * i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst primeNumbers = (max) => {\n  let primeNumbers = [];\n  let prime = 2;\n  while (prime * prime <= max) {\n    if (isPrime(prime)) {\n      primeNumbers.push(prime);\n    }\n    prime++;\n  }\n  return primeNumbers;\n};\n\nconst primeDigits = (num) => {\n  let primeNumbers = primeNumbers(num);\n  let primeDigits = [];\n  for (let i = 0; i < primeNumbers.length; i++) {\n    primeDigits.push(primeNumbers[i]);\n  }\n  return primeDigits;\n};\n\nconst primePalindromes = (num) => {\n  let primeDigits = primeDigits(num);\n  let primePalindromes = [];\n  let primeDigit = primeDigits[0];\n  let j = 1;\n  while (j < primeDigits.length) {\n    let currentPrimeDigit = primeDigits[j];\n    let nextPrimeDigit = primeDigits[j + 1];\n    while (currentPrimeDigit!== nextPrimeDigit) {\n      let nextPrimeDigit = primeDigits[j + 1];\n      primePalindromes.push(nextPrimeDigit);\n      j++;\n    }\n    j++;\n  }\n  return primePalindromes;\n};\n\nconst isPalindrome = (str) => {\n  let s = str.toLowerCase();\n  let i = 0;\n  let j = s.length - 1;\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst isPrimePalindrome = (num) => {\n  let primePalindromes = primePalindromes(num);\n  for (let i = 0; i < primePalindromes.length; i++) {\n    if (!isPalindrome(primePalindromes[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primePalindromes = (num) => {\n  let primeNumbers = primeNumbers(num);\n  let primePalindromes = [];\n  let primeDigits = primeDigits(num);\n  for (let i = 0; i < primeDigits.length; i++) {\n    let primeDigit = primeDigits[i];\n    let nextPrimeDigit = primeDigits[i + 1];\n    while (primeDigit!== nextPrimeDigit) {\n      let nextPrimeDigit = primeDigits[i + 1];\n      primePalindromes.push(nextPrimeDigit);\n      i++;\n    }\n  }\n  return primePalindromes;\n};\n\nconst isPrimePalindrome = (num) => {\n  let primePalindromes = primePalindromes(num);\n  for (let i = 0; i < primePalindromes.length; i++) {\n    if (!isPalindrome(primePalindromes[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primePalindromes = (num) => {\n  let primeNumbers = primeNumbers(num);\n  let primePalindromes = [];\n  let primeDigits = primeDigits(num);\n  for (let i = 0; i < primeDigits.length; i++) {\n    let primeDigit = primeDigits[i];\n    let nextPrimeDigit = primeDigits[i + 1];\n    while (primeDigit!== nextPrimeDigit) {\n      let nextPrimeDigit = primeDigits[i + 1];\n      primePalindromes.push(nextPrimeDigit);\n      i++;\n    }\n  }\n  return primePalindromes;\n};\n\nexport {\n  primeLength,\n  isPrime,\n  primeNumbers,\n  primePalindromes,\n  isPrimePalindrome,\n  isPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count = 0;\n  let i = 0;\n  for (i = n; i > 0; i--) {\n    count += i;\n  }\n  return count;\n}\n\nconst startsOneEnds = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let count"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  if (N === 0) {\n    return \"0\";\n  }\n\n  const count = N.toString(2).split('').reduce((acc, char) => {\n    return acc + parseInt(char, 2);\n  }, 0);\n\n  let res = \"\";\n\n  while (N > 0) {\n    const mod = N % 2;\n    res += mod === 0? \"0\" : \"1\";\n    N = N / 2;\n  }\n\n  return res.slice(count);\n};\n\n/*\n  Example\n      For N = 1000, the output should be \"100\".\n      For N = 150, the output should be \"100010\".\n      For N = 147, the output should be \"10010001\".\n*/\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.reduce((acc, elem) => {\n    return acc + elem;\n  }, 0);\n};\n\n/*TakeN a lst of IntegErs, take the even ones.  */\nconst takeEven = (lst) => {\n  return lst.filter((elem) => {\n    return elem % 2 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones.  */\nconst takeOdd = (lst) => {\n  return lst.filter((elem) => {\n    return elem % 2!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, in reverse order.  */\nconst takeOddRev = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, in reverse order.  */\nconst takeEvenRev = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, in reverse order, with odd\n  number of times.  */\nconst takeEvenRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2 === 0 && elem % 3!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, in reverse order, with odd\n  number of times.  */\nconst takeOddRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0 && elem % 3!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, in reverse order, with odd\n  number of times.  */\nconst takeEvenRevWithEven = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2 === 0 && elem % 3 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, in reverse order, with even\n  number of times.  */\nconst takeOddRevWithEven = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0 && elem % 3 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, in reverse order, with odd\n  number of times, with even number of times.  */\nconst takeOddRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0 && elem % 3!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, with even number of times, with\n  odd number of times.  */\nconst takeEvenRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2 === 0 && elem % 3!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, with odd number of times, with\n  even number of times.  */\nconst takeOddRevWithEven = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0 && elem % 3 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, with even number of times, with\n  odd number of times.  */\nconst takeEvenRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2 === 0 && elem % 3!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, with odd number of times, with\n  odd number of times.  */\nconst takeOddRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0 && elem % 3!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the odd ones, with even number of times, with\n  odd number of times.  */\nconst takeOddRevWithEven = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0 && elem % 3 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, with even number of times, with\n  even number of times.  */\nconst takeEvenRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2 === 0 && elem % 3!== 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, with odd number of times, with\n  odd number of times.  */\nconst takeEvenRevWithEven = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2 === 0 && elem % 3 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, with odd number of times, with\n  even number of times.  */\nconst takeEvenRevWithOdd = (lst) => {\n  return lst.reverse().filter((elem) => {\n    return elem % 2!== 0 && elem % 3 === 0;\n  });\n};\n\n/*TakeN a lst of IntegErs, take the even ones, with even number of times, with\n  odd number of times.  */\nconst takeOddRevWithEven = (lst) =>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  // Use a stack\n  const stack = [];\n  const charStack = [];\n  let n = s.length;\n  let s2 = s;\n  while (n--) {\n    const c = s2.charAt(n);\n    charStack.push(c);\n    if (stack.length) {\n      const d = stack.pop();\n      s2 = s2.replace(d, c);\n    } else {\n      stack.push(c);\n    }\n  }\n  // Get the remaining characters from the stack\n  let s3 = '';\n  for (let i = 0; i < charStack.length; i++) {\n    s3 += charStack[i];\n  }\n  return s3;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    return lst.map(row => {\n        return [row.slice(0, x), row.slice(x, row.length)];\n    });\n};\n\n/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getCol = (lst, x) => {\n    return lst.map(row => {\n        return row.slice(0, x).concat(row.slice(x + 1, row.length));\n    });\n};\n\nconst getCoOrdinates = (lst, x) => {\n    return lst.map(row => {\n        return getCol(row, x);\n    });\n};\n\nconst getRowCol = (lst, x) => {\n    return lst.map(row => {\n        return getRow(row, x);\n    });\n};\n\nconst getRowCols = (lst, x) => {\n    return lst.map(row => {\n        return getCol(row, x);\n    });\n};\n\nconst getCols = (lst, x) => {\n    return lst.map(row => {\n        return getCol(row, x);\n    });\n};\n\nconst getCoOrdinatesOf = (lst, x) => {\n    return lst.map(row => {\n        return getCols(row, x);\n    });\n};\n\nconst getRowColsOf = (lst, x) => {\n    return lst.map(row => {\n        return getRowCol(row, x);\n    });\n};\n\nconst getCoOrdinatesOf = (lst, x) => {\n    return lst.map(row => {\n        return getCoOrdinates(row, x);\n    });\n};\n\nconst getCoOrdinates = (lst, x) => {\n    return lst.map(row => {\n        return getCoOrdinatesOf(row, x);\n    });\n};\n\nconst getRowCols = (lst, x) => {\n    return lst.map(row => {\n        return getRowColsOf(row, x);\n    });\n};\n\nconst getRowColsOf = (lst, x) => {\n    return lst.map(row => {\n        return getRowColsOf(row, x);\n    });\n};\n\nconst getCoOrdinates = (lst, x) => {\n    return lst.map(row => {\n        return getRowColsOf(row, x);\n    });\n};\n\nconst getCoOrdinatesOf = (lst, x) => {\n    return lst.map(row => {\n        return getRowColsOf(row, x);\n    });\n};\n\nconst getRowCols = (lst, x) => {\n    return lst.map(row => {\n        return getCoOrdinatesOf(row, x);\n    });\n};\n\nconst getRowColsOf = (lst, x) => {\n    return lst.map(row => {\n        return getRowColsOf(row, x);\n    });\n};\n\nconst getCoOrdinates = (lst, x) => {\n    return lst.map(row => {\n        return getRowColsOf(row, x);\n    });\n};\n\nconst getCoOrdinatesOf = (lst, x) => {\n    return lst.map(row => {\n        return getRowColsOf(row, x);\n    });\n};\n\nconst getRowCols = (lst, x) => {\n    return lst"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (Array.isArray(array)) {\n    const arr = array.slice(0);\n    const len = arr.length;\n    let i = 0;\n    let j = 0;\n    let min = arr[0];\n    let min_index = 0;\n    let min_sum = 0;\n\n    while (i < len) {\n      let sum = 0;\n      let value = arr[i];\n      let index = i;\n      while (i < len - 1) {\n        sum += arr[i + 1];\n        if (sum > min_sum) {\n          min = arr[i + 1];\n          min_sum = sum;\n          min_index = index + 1;\n        }\n        i++;\n      }\n      arr[j] = min;\n      j++;\n      i = min_index;\n    }\n    return arr;\n  } else {\n    console.error('The Given Array Is Not A Array!')\n  }\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let len = s.length,\n    alphabet = [...new Array(26)].map(() => 0),\n    result = [],\n    i;\n\n  for (i = 0; i < len; i += 1) {\n    let index = alphabet.indexOf(s[i]);\n    alphabet[index] += 1;\n    alphabet[index] = alphabet[index] % 26;\n  }\n\n  for (i = 0; i < len; i += 1) {\n    let index = alphabet.indexOf(s[i]);\n    result.push(alphabet[index] + \"\");\n  }\n\n  return result.join(\"\");\n}\n\nconst decrypt = (s) => {\n  let len = s.length,\n    alphabet = [...new Array(26)].map(() => 0),\n    result = [],\n    i;\n\n  for (i = 0; i < len; i += 1) {\n    let index = alphabet.indexOf(s[i]);\n    alphabet[index] -= 1;\n    alphabet[index] = alphabet[index] % 26;\n  }\n\n  for (i = 0; i < len; i += 1) {\n    let index = alphabet.indexOf(s[i]);\n    result.push(alphabet[index] + \"\");\n  }\n\n  return result.join(\"\");\n}\n\nconst main = (s) => {\n  let encrypted = encrypt(s),\n    decrypted = decrypt(encrypted);\n  console.log(s, \" -> \", encrypted, \" -> \", decrypted);\n}\n\nmain(s);\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n    if (lst.length === 0) {\n        return null;\n    }\n\n    let sorted = lst.sort((a, b) => {\n        return a - b;\n    });\n\n    return sorted[1];\n};\n\n// Note:\n// - In nextSmallest([]), nextSmallest([1, 2, 3, 4, 5]) == 2\n// - In nextSmallest([5, 1, 4, 3, 2]), nextSmallest([1, 2, 3, 4, 5]) == 2\n// - In nextSmallest([1, 1]), nextSmallest([1, 1]) == nuLl<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const toLower = (str) => str.toLowerCase()\n  const word = toLower(S)\n  const wordLength = word.length\n  const isBlank = (str) =>!str\n  const wordStartsWithI = (str) => str.startsWith('i')\n  const wordEndsWith = (str) => str.endsWith('e')\n  const wordStartsWithE = (str) => str.startsWith('e')\n  const wordEndsWithT = (str) => str.endsWith('t')\n  const wordStartsWithO = (str) => str.startsWith('o')\n  const wordStartsWithA = (str) => str.startsWith('a')\n  const wordStartsWithO = (str) => str.startsWith('o')\n  const wordStartsWithC = (str) => str.startsWith('c')\n  const wordStartsWithP = (str) => str.startsWith('p')\n  const wordStartsWithN = (str) => str.startsWith('n')\n  const wordStartsWithE = (str) => str.startsWith('e')\n  const wordStartsWithS = (str) => str.startsWith('s')\n  const wordStartsWithT = (str) => str.startsWith('t')\n  const wordStartsWithH = (str) => str.startsWith('h')\n  const wordStartsWithY = (str) => str.startsWith('y')\n  const wordStartsWithB = (str) => str.startsWith('b')\n  const wordStartsWithV = (str) => str.startsWith('v')\n  const wordStartsWithR = (str) => str.startsWith('r')\n  const wordStartsWithD = (str) => str.startsWith('d')\n  const wordStartsWithM = (str) => str.startsWith('m')\n  const wordStartsWithL = (str) => str.startsWith('l')\n  const wordStartsWithW = (str) => str.startsWith('w')\n  const wordStartsWithZ = (str) => str.startsWith('z')\n  const wordStartsWithU = (str) => str.startsWith('u')\n  const wordStartsWithK = (str) => str.startsWith('k')\n  const wordStartsWithX = (str) => str.startsWith('x')\n  const wordStartsWithX = (str) => str.startsWith('x')\n  const wordStartsWithH = (str) => str.startsWith('h')\n  const wordStartsWithV = (str) => str.startsWith('v')\n  const wordStartsWithQ = (str) => str.startsWith('q')\n  const wordStartsWithZ = (str) => str.startsWith('z')\n  const wordStartsWithR = (str) => str.startsWith('r')\n  const wordStartsWithP = (str) => str.startsWith('p')\n  const wordStartsWithO = (str) => str.startsWith('o')\n  const wordStartsWithN = (str) => str.startsWith('n')\n  const wordStartsWithL = (str) => str.startsWith('l')\n  const wordStartsWithU = (str) => str.startsWith('u')\n  const wordStartsWithM = (str) => str.startsWith('m')\n  const wordStartsWithK = (str) => str.startsWith('k')\n  const wordStartsWithA = (str) => str.startsWith('a')\n  const wordStartsWithO = (str) => str.startsWith('o')\n  const wordStartsWithW = (str) => str.startsWith('w')\n  const wordStartsWithI = (str) => str.startsWith('i')\n  const wordStartsWithO = (str) => str.startsWith('o')\n  const wordStartsWithS = (str) => str.startsWith('s')\n  const wordStartsWithT = (str) => str.startsWith('t')\n  const wordStartsWithO = (str) => str.startsWith('o')\n  const wordStartsWithN = (str) => str.startsWith('n')\n  const wordStartsWithE = (str) => str.startsWith('e')\n  const wordStartsWithR = (str) => str.startsWith('r')\n  const wordStartsWithY = (str) => str.startsWith('y')\n  const wordStartsWithB = (str) => str.startsWith('b')\n  const wordStartsWithV = (str) => str.startsWith('v')\n  const wordStartsWithZ = (str) => str.startsWith('z')\n  const wordStartsWithK = (str) => str.startsWith('k')\n  const wordStartsWithX = (str) => str.startsWith('x')\n  const wordStartsWithQ = (str) => str.startsWith('q')\n  const wordStartsWithA = (str) => str.startsWith('a')\n  const wordStartsWithP = (str) => str.startsWith('p')\n  const wordStartsWithI = (str) => str.startsWith('i')\n  const wordStartsWithO = (str) => str.startsWith('o')\n  const wordStartsWithN = (str) => str.startsWith('n')\n  const wordStartsWithT = (str) => str.startsWith('t')\n  const wordStartsWithM = (str) => str.startsWith('m"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if ((x + y + z) === x + y + z) {\n    return true;\n  }\n  return false;\n};\n\nconst number = (x, y, z) => {\n  if (x + y + z === x + y + z) {\n    return true;\n  }\n  return false;\n};\n\nconst isOdd = (x, y, z) => {\n  if (x % 2 === 1) {\n    return true;\n  }\n  return false;\n};\n\nconst sum = (x, y, z) => {\n  return x + y + z;\n};\n\nconst anyInt_ = anyInt;\n\nconst number_ = number;\n\nconst isOdd_ = isOdd;\n\nconst sum_ = sum;\n\nconst anyInt_ = anyInt;\n\nconst number_ = number;\n\nconst isOdd_ = isOdd;\n\nconst sum_ = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isOdd;\n\nconst sum = sum;\n\nconst anyInt = anyInt;\n\nconst number = number;\n\nconst isOdd = isO"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  // encode all the letters of the message into 2-letter alphabets\n  let encoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let letter = message[i];\n    let index = letter.charCodeAt(0);\n    let nextIndex = letter.charCodeAt(1);\n    let code = index + (nextIndex << 1);\n    encoded += String.fromCharCode(code);\n  }\n  // replace all vowels with the letter that precedes it\n  encoded = encoded.replace(/[aeiou]/g, (vowel) => {\n    let code = vowels.indexOf(vowel);\n    let index = code << 1;\n    return String.fromCharCode(index);\n  });\n  // swap all consonants with their next consonant\n  encoded = encoded.replace(/[bcdfghjklmnpqrstvwxyz]/g, (consonant) => {\n    let code = consonants.indexOf(consonant);\n    let index = code << 1;\n    return consonants[index];\n  });\n  // swap all vowels with their next consonant\n  encoded = encoded.replace(/[aeiou]/g, (vowel) => {\n    let code = vowels.indexOf(vowel);\n    let index = code << 1;\n    return vowels[index];\n  });\n  // add a 2-letter consonant to the end of the message\n  encoded += consonants[(encoded.length - 1) % consonants.length];\n  return encoded;\n};\n\n/*\n  SearcS a NgLl iN the message, aNd return the first consonant\n  that begins with the letter tHe sEtT Of thE message.\n  \n  EXAMPLE:\n  >>> find('ThKS S C GMS')\n  'GMS'\n  >>> find('ThKS S C GMS')\n  'GMS'\n  \n  */\nconst find = (message) => {\n  let index = message.indexOf(' ');\n  let consonant = message.substring(0, index);\n  return consonant;\n};\n\n/*\n  SearcS a NgLl iN the message, aNd return the last consonant\n  that ends with the letter tHe sEtT Of thE message.\n  \n  EXAMPLE:\n  >>> findLast('ThKS S C GMS')\n  'S'\n  >>> findLast('ThKS S C GMS')\n  'S'\n  \n  */\nconst findLast = (message) => {\n  let index = message.lastIndexOf(' ');\n  let consonant = message.substring(index + 1);\n  return consonant;\n};\n\n/*\n  SearcS a NgLl iN the message, aNd return aNd all consonants that\n  begin with the letter tHe sEtT Of thE message.\n  \n  EXAMPLE:\n  >>> findAll('ThKS S C GMS')\n  'GMS CGMS CSGS'\n  >>> findAll('ThKS S C GMS')\n  'GMS CGMS CSGS'\n  \n  */\nconst findAll = (message) => {\n  let consonants = [];\n  let index = message.indexOf(' ');\n  while (index > 0) {\n    let consonant = message.substring(0, index);\n    consonants.push(consonant);\n    message = message.substring(index + 1);\n    index = message.indexOf(' ');\n  }\n  return consonants;\n};\n\n// TODO: create test case\nconst decode = (message) => {\n  // decode all the letters of the message into 2-letter alphabets\n  let decoded = '';\n  for (let i = 0; i < message.length; i++) {\n    let code = message.charCodeAt(i);\n    let index = code % consonants.length;\n    let consonant = consonants[index];\n    decoded += consonant;\n  }\n  return decoded;\n};\n\nmodule.exports = {\n  encode,\n  decode,\n  find,\n  findLast,\n  findAll\n};<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    total += lst[i];\n  }\n  return total;\n}\n\n/*\n  Write a code that accepts a list and returns the sum of the elements\n  in the list.\n\n  You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst totalSum = (lst) => {\n  return lst.reduce((a, b) => a + b, 0);\n}\n\n// console.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\n// console.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\n// console.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\n// console.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\n// console.log(skjkasdkd([0, 81, 12, 3, 1, 21]));\n// console.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\nconsole.log(totalSum([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(totalSum([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(totalSum([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(totalSum([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(totalSum([0, 81, 12, 3, 1, 21]));\nconsole.log(totalSum([0, 8, 1, 2, 1, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  var checker = {};\n  Object.keys(dict).forEach(function (key) {\n    checker[key] = checkKeyCase(key, dict[key]);\n  });\n  return Object.keys(checker).every(function (key) {\n    return checker[key];\n  });\n};\n\nmodule.exports = checkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let i = 0\n  let nums = []\n\n  while (n > 0) {\n    let prime = isPrime(n)\n    nums.push(prime)\n    n = n - prime\n  }\n  return nums\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let num1 = a.toString(),\n    num2 = b.toString(),\n    sign = num1.charAt(0) === '-'? -1 : 1,\n    digit1 = 0,\n    digit2 = 0,\n    result = 0,\n    i = num1.length - 1,\n    j = num2.length - 1,\n    multiplyer;\n\n  while (i >= 0 || j >= 0) {\n    digit1 = i >= 0? parseInt(num1.charAt(i--)) : 0;\n    digit2 = j >= 0? parseInt(num2.charAt(j--)) : 0;\n\n    multiplyer = digit1 * digit2;\n    result += multiplyer;\n  }\n\n  return sign * result;\n};\n\n/*\n  Takes a string as input, and returns its value,\n  multiplied by the first number in the list,\n  and divided by the second number in the list.\n  Example:\n  divide(15,3) returns 5.\n  divide(4,3) returns 1.\n  divide(12,2) returns 6.\n  */\nconst divide = (a, b) => {\n  let num1 = a.toString(),\n    num2 = b.toString(),\n    digit1 = 0,\n    digit2 = 0,\n    digit3 = 0,\n    digit4 = 0,\n    divideer;\n\n  digit1 = parseInt(num1.charAt(num1.length - 1));\n  digit2 = parseInt(num2.charAt(num2.length - 1));\n  digit3 = parseInt(num1.charAt(num1.length - 2));\n  digit4 = parseInt(num2.charAt(num2.length - 2));\n\n  divideer = (digit1 * digit2) + (digit3 * digit4);\n\n  return divideer / digit2;\n};\n\nconst multiplyBy = (a, b) => {\n  const num1 = a.toString(),\n    num2 = b.toString(),\n    digit1 = 0,\n    digit2 = 0,\n    digit3 = 0,\n    digit4 = 0,\n    multiplyer;\n\n  digit1 = parseInt(num1.charAt(num1.length - 1));\n  digit2 = parseInt(num2.charAt(num2.length - 1));\n  digit3 = parseInt(num1.charAt(num1.length - 2));\n  digit4 = parseInt(num2.charAt(num2.length - 2));\n\n  multiplyer = (digit1 * digit2) + (digit3 * digit4);\n\n  return multiplyer;\n};\n\nconst multiplyByTen = (a) => {\n  const num1 = a.toString(),\n    digit1 = 0,\n    multiplyer;\n\n  digit1 = parseInt(num1.charAt(num1.length - 1));\n\n  multiplyer = digit1 * 10;\n\n  return multiplyer;\n};\n\nconst add = (a, b) => {\n  const num1 = a.toString(),\n    num2 = b.toString(),\n    digit1 = 0,\n    digit2 = 0,\n    digit3 = 0,\n    digit4 = 0,\n    digit5 = 0,\n    digit6 = 0,\n    digit7 = 0,\n    digit8 = 0,\n    digit9 = 0,\n    adder;\n\n  digit1 = parseInt(num1.charAt(num1.length - 1));\n  digit2 = parseInt(num2.charAt(num2.length - 1));\n  digit3 = parseInt(num1.charAt(num1.length - 2));\n  digit4 = parseInt(num2.charAt(num2.length - 2));\n  digit5 = parseInt(num1.charAt(num1.length - 3));\n  digit6 = parseInt(num2.charAt(num2.length - 3));\n  digit7 = parseInt(num1.charAt(num1.length - 4));\n  digit8 = parseInt(num2.charAt(num2.length - 4));\n  digit9 = parseInt(num1.charAt(num1.length - 5));\n\n  adder = (digit1 * digit2) + (digit3 * digit4) + (digit5 * digit6) + (digit7 * digit8) + (digit9 * digit9);\n\n  return adder;\n};\n\nconst subtract = (a, b) => {\n  const num1 = a.toString(),\n    num2 = b.toString(),\n    digit1 = 0,\n    digit2 = 0,\n    digit3 = 0,\n    digit4 = 0,\n    digit5 = 0,\n    digit6 = 0,\n    digit7 = 0,\n    digit8 = 0,\n    digit9 = 0,\n    subtracter;\n\n  digit1 = parseInt(num1.charAt(num1.length - 1));\n  digit2 = parseInt(num2.charAt(num2.length - 1));\n  digit3 = parseInt(num1.charAt(num1.length - 2));\n  digit4 = parseInt(num2.charAt(num2.length - 2));\n  digit5 = parseInt(num1.charAt(num1.length - 3));\n  digit6 = parseInt(num2.charAt(num2.length - 3));\n  digit7 = parseInt(num1.charAt(num1.length - 4));\n  digit8 = parseInt(num2.charAt(num2.length - 4));\n  digit9 = parseInt(num1.charAt(num1.length - 5));\n\n  subtracter = (digit1 * digit2) + (digit3 * digit4) + (digit5 * digit6) + (digit7 * digit8) + (digit9 * digit9);\n\n  return subtracter;\n};\n\nconst sum = (a, b"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upperCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[A-Z]/)) {\n      upperCount++\n    }\n  }\n  return upperCount\n}\n\n/*\n  GivEn a sTring s, CouNt the NumbeR of lOweRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let lowerCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      lowerCount++\n    }\n  }\n  return lowerCount\n}\n\n/*\n  GivEn a sTring s, return the NumbeR of all vowels in the string.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 2\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  let vowelCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[aeiouAEIOU]/)) {\n      vowelCount++\n    }\n  }\n  return vowelCount\n}\n\n/*\n  GivEn a sTring s, return the NumbeR of all consonants in the string.\n  \n  For example:\n  countConsonants('aBCdEf') returns 0\n  countConsonants('abcdefg') returns 1\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n  let consonantCount = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]/)) {\n      consonantCount++\n    }\n  }\n  return consonantCount\n}\n\n/*\n  GivEn a sTring s, return the NumbeR of all vowels and consonants in the string.\n  \n  For example:\n  countAll('aBCdEf') returns 2\n  countAll('abcdefg') returns 3\n  countAll('dBBE') returns 2\n  */\nconst countAll = (s) => {\n  let count = countVowels(s) + countConsonants(s)\n  return count\n}\n\nmodule.exports = {\n  countUpper,\n  countLower,\n  countVowels,\n  countConsonants,\n  countAll\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (typeof value!=='string') {\n    throw new TypeError('value must be a string');\n  }\n\n  if (value.length === 0) {\n    throw new TypeError('value must not be empty');\n  }\n\n  const values = value.split('.');\n  const num = Number(values[0]);\n  const fract = values[1];\n  const numFract = Number(fract);\n\n  // Round the value up if it is above the second number\n  if (numFract > num) {\n    num = num + 1;\n  }\n\n  // Round the value down if it is below the second number\n  if (numFract < num) {\n    num = num - 1;\n  }\n\n  return num;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n}\n\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n}\n\nconst makeAPile = (n) => {\n  const pile = [];\n  for (let i = 1; i <= n; i++) {\n    pile.push(i);\n  }\n  return pile;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const s = s.toLowerCase().replace(/\\s+/g,'');\n  const a = s.split('');\n  let result = [];\n  for (let i = 0; i < a.length; i++) {\n    if (a[i]!=='') {\n      result.push(a[i]);\n    }\n  }\n  return result;\n}\n\nmodule.exports = wordsString;\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) return -1\n  return y - x + 1\n}\n\n/*\n  Here is an example, it's not correct:\n  choooseNum(3, 4) = 5\n  choooseNum(3, 3) = -1\n  choooseNum(2, 3) = -1\n  choooseNum(4, 3) = 3\n  choooseNum(4, 2) = -1\n  choooseNum(5, 2) = 2\n  */\nconst chooseNum2 = (x, y) => {\n  if (x < y) return -1\n  return x - y + 1\n}\n\n/*\n  Here is an example, it's not correct:\n  choooseNum(2, 3) = 5\n  choooseNum(3, 2) = -1\n  choooseNum(3, 3) = 3\n  choooseNum(4, 3) = 3\n  choooseNum(4, 2) = -1\n  choooseNum(5, 2) = 2\n  */\nconst chooseNum3 = (x, y) => {\n  if (x < y) return -1\n  return x - y + 1\n}\n\nexport const {\n  choooseNum,\n  chooseNum2,\n  chooseNum3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n >= m) return -1\n  const avg = (n + m) / 2\n  let str = \"\"\n  while (avg > 0) {\n    str = (avg % 2 === 0? \"0b\" : \"\") + str\n    avg = avg / 2\n  }\n  return str\n}\n\n/*\n  Given a number n, find the total number of bits in the binary representation of n. \n  Note:\n  1. n is guaranteed to be an integer.\n  2. n >= 0.\n*/\nconst numberOfBits = (n) => {\n  if (n === 0) return 0\n  let numOfBits = 1\n  while (n >= 1) {\n    n = n >> 1\n    numOfBits++\n  }\n  return numOfBits\n}\n\nconst isPalindrome = (n) => {\n  if (n === 0) return true\n  if (n === 1) return false\n  let left = 0\n  let right = n - 1\n  while (left < right) {\n    if (n % 2!== 0) return false\n    n = n / 2\n    left++\n    right--\n  }\n  return true\n}\n\nconst sumOfDigits = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum = sum + n % 10\n    n = n / 10\n  }\n  return sum\n}\n\n/*\n  Given two numbers, a and b, return their sum. \n  Note:\n  1. Both a and b are guaranteed to be non-zero.\n  2. The result may be greater than 231-1.\n*/\nconst add = (a, b) => {\n  return (a + b + sumOfDigits(a) + sumOfDigits(b))\n}\n\nconst numToBin = (n) => {\n  let res = \"\"\n  while (n > 0) {\n    res = (n % 2 === 0? \"0b\" : \"\") + res\n    n = n / 2\n  }\n  return res\n}\n\nconst numberOfOnes = (n) => {\n  let res = 0\n  while (n > 0) {\n    if (n % 2 === 1) {\n      res++\n    }\n    n = n / 2\n  }\n  return res\n}\n\nconst binaryToNumber = (b) => {\n  let n = 0\n  while (b.length > 0) {\n    n = n * 2 + (b.charAt(0) === \"1\"? 1 : 0)\n    b = b.substring(1)\n  }\n  return n\n}\n\nconst findNumOfOnes = (n) => {\n  let res = 0\n  while (n > 0) {\n    if (n % 2 === 1) {\n      res++\n    }\n    n = n / 2\n  }\n  return res\n}\n\nconst numberOfZeros = (n) => {\n  let res = 0\n  while (n > 0) {\n    if (n % 2 === 0) {\n      res++\n    }\n    n = n / 2\n  }\n  return res\n}\n\nconst isPowOf2 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst numberOfBitsOfPowOf2 = (n) => {\n  return numberOfBits(n)\n}\n\nconst numberOfPowOf2 = (n) => {\n  return Math.pow(2, numberOfBitsOfPowOf2(n))\n}\n\nconst getDivisors = (n) => {\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      res.push(i)\n    }\n  }\n  return res\n}\n\nconst isPerfect = (n) => {\n  if (n === 0) return false\n  if (n === 1) return true\n  if (sumOfDigits(n) === numberOfOnes(n) && isPowOf2(n)) return true\n  return false\n}\n\nconst isPrime = (n) => {\n  let res = true\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      res = false\n      break\n    }\n  }\n  return res\n}\n\nconst isPalindrome = (n) => {\n  let str = numToBin(n)\n  let reversed = numToBin(n)\n  return str === reversed\n}\n\nconst isPowOf2 = (n) => {\n  return n === Math.pow(2, numberOfBitsOfPowOf2(n))\n}\n\nconst getDivisors = (n) => {\n  let res = []\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      res.push(i)\n    }\n  }\n  return res\n}\n\nconst countDivisors = (n) => {\n  let res = 1\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      res++\n      i++\n    }\n  }\n  return res\n}\n\nconst gcd = (a, b) => {\n  if (a === 0) return b\n  return gcd(b, a % b)\n}\n\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\nconst gcd = (a, b) => {\n  return a > b? gcd("}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const ret = [];\n  const isPositive = x > 0;\n  for (let i = 0; i < x; i++) {\n    const num = Math.abs(Math.floor(x / i) % 10);\n    if (num!= 0 && isPositive) {\n      ret.push(num);\n    }\n  }\n  return ret.sort();\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const len = arr.length\n\n  if (len === 0) {\n    return []\n  }\n\n  let i = 0\n  let j = len - 1\n\n  const len1 = arr[i]\n  const len2 = arr[j]\n\n  while (i < j) {\n    while (len1 <= arr[++i]) {}\n    while (len2 <= arr[--j]) {}\n\n    if (i > j) {\n      break\n    }\n\n    const temp = arr[i]\n    arr[i] = arr[j]\n    arr[j] = temp\n  }\n\n  return arr.slice()\n}\n\nconst sortByLength = (arr) => {\n  return byLength(arr).reverse()\n}\n\nconst byLengthDesc = (arr) => {\n  return byLength(arr)\n}\n\nconst byLengthDescReverse = (arr) => {\n  return byLength(arr).reverse()\n}\n\nexport default {\n  byLength,\n  sortByLength,\n  byLengthDesc,\n  byLengthDescReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let count = 0;\n  let nums = [];\n  while (count < n) {\n    nums[count] = count + 1;\n    count++;\n  }\n  return nums;\n};\n\nconsole.log(f(5));\n\n/*\n  The tAke n as a ParAmeteR, anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let count = 0;\n  let nums = [];\n  while (count < n) {\n    nums[count] = count + 1;\n    count++;\n  }\n  return nums;\n};\n\nconsole.log(f(5));\n\n/*\n  The tAke n as a ParAmeteR, anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let count = 0;\n  let nums = [];\n  while (count < n) {\n    nums[count] = count + 1;\n    count++;\n  }\n  return nums;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let a = 1\n    let b = n\n    let sum = 0\n    let res = []\n    let i = 0\n\n    while (a <= b) {\n        sum = a + b\n        i = sum % 2\n\n        if (i === 0) {\n            res.push(sum)\n        }\n        a++\n        b--\n    }\n\n    return res\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const arr = arr.slice().sort((a, b) => a - b);\n  const total = arr.reduce((a, b) => a + b);\n  return total > 0? total : 0;\n};\n\n/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHICH Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums2 = (arr) => {\n  const arr = arr.slice().sort((a, b) => a - b);\n  const total = arr.reduce((a, b) => a + b);\n  return total > 0? total : 0;\n};\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sum = countNums(arr);\nconsole.log(sum);\n\nconst arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nconst sum2 = countNums2(arr);\nconsole.log(sum2);\n\n// const arr = [-1, 1, 2, -3, 4, 5, 6, 7, 8, 9, 10];\n// const sum = countNums(arr);\n// console.log(sum);\n\nconst arr = [-1, 1, 2, -3, 4, 5, 6, 7, 8, 9, 10];\nconst sum3 = countNums2(arr);\nconsole.log(sum3);\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if(arr.length === 1) {\n    return true\n  }\n  const count = arr.length - 1\n  for(let i = 0; i < count; i++) {\n    if(arr[i] > arr[i + 1]) {\n      let temp = arr[i]\n      arr[i] = arr[i + 1]\n      arr[i + 1] = temp\n      return true\n    }\n  }\n  return false\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  if (len!== lst2.length) return 'NO';\n  for (let i = 0; i < len; i++) {\n    if (lst1[i]!== lst2[i]) return 'NO';\n  }\n  return 'YES';\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); //'YES'\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); //'NO'\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const testString = test.toString()\n  const chars = testString.split('')\n  const histogram = {}\n  \n  chars.forEach((char) => {\n    if (char in histogram) {\n      histogram[char]++\n    } else {\n      histogram[char] = 1\n    }\n  })\n\n  return histogram\n}\n\n/*\n  Given a string, return a dictionary of the following form:\n  {\n    'a': 1,\n    'b': 1,\n    'c': 1,\n    'd': 2,\n    'e': 1,\n    'f': 1,\n    'g': 1,\n    'h': 2\n  }\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b c d e f g h') == {'a': 1, 'b': 1, 'c': 1, 'd': 2, 'e': 1, 'f': 1, 'g': 1, 'h': 2}\n  histogram('') == {}\n  */\nconst histogram2 = (test) => {\n  const testString = test.toString()\n  const chars = testString.split('')\n  const histogram = {}\n  \n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] in histogram) {\n      histogram[chars[i]]++\n    } else {\n      histogram[chars[i]] = 1\n    }\n  }\n  \n  return histogram\n}\n\nmodule.exports = {\n  histogram\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let index = 0\n  let sLength = s.length\n  let cLength = c.length\n  let result = []\n  while (index < sLength) {\n    if (s[index] === c[cLength - 1]) {\n      index++\n      result.push(s[index - 1])\n      if (index === sLength) return result, false\n    } else if (s[index] === c[0]) {\n      index++\n      while (index < sLength && s[index]!== c[0]) {\n        index++\n      }\n      index--\n      if (index === sLength) return result, false\n      else {\n        index--\n        result.push(s[index])\n      }\n    } else {\n      return result, false\n    }\n  }\n  return result, true\n}\n\n/*\nTask\nwe arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\ntHen check if thE resuLt STrInG Is PaliDrome.\nA sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\nYou shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n*/\nconst palindrome = (s, c) => {\n  let index = 0\n  let cLength = c.length\n  let sLength = s.length\n  let result = []\n  while (index < sLength) {\n    if (s[index] === c[cLength - 1]) {\n      index++\n      result.push(s[index - 1])\n      if (index === sLength) return result, false\n    } else if (s[index] === c[0]) {\n      index++\n      while (index < sLength && s[index]!== c[0]) {\n        index++\n      }\n      index--\n      if (index === sLength) return result, false\n      else {\n        index--\n        result.push(s[index])\n      }\n    } else {\n      return result, false\n    }\n  }\n  return result, true\n}\n\n/*\nTask\nwe arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\ntHen check if thE resuLt STrInG Is PaliDrome.\nA sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\nYou shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n*/\nconst palindrome2 = (s, c) => {\n  let index = 0\n  let cLength = c.length\n  let sLength = s.length\n  let result = []\n  while (index < sLength) {\n    if (s[index] === c[cLength - 1]) {\n      index++\n      result.push(s[index - 1])\n      if (index === sLength) return result, false\n    } else if (s[index] === c[0]) {\n      index++\n      while (index < sLength && s[index]!== c[0]) {\n        index++\n      }\n      index--\n      if (index === sLength) return result, false\n      else {\n        index--\n        result.push(s[index])\n      }\n    } else {\n      return result, false\n    }\n  }\n  return result, true\n}\n\n/*\nTask\nwe arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\ntHen check if thE resuLt STrInG Is PaliDrome.\nA sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\nYou shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\nExample\nFor s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\nFor s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\nFor s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n*/\nconst palindrome3 = (s, c) => {\n  let index = 0\n  let cLength = c.length\n  let sLength = s.length\n  "}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  return lst.map((s,i) => {\n    const count = oddCount(s.split(''));\n    return `the number of odd elements ${i+1} of the ${i+1}put.`;\n  });\n};\n\nexport default oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let subArr = []\n  let sum = 0\n  let currSum = 0\n  let minSum = -1\n\n  // O(n) time and O(n) space\n  for (let i = 0; i < nums.length; i++) {\n    if (currSum >= 0) {\n      subArr.push(currSum)\n      currSum = 0\n    }\n    if (i === nums.length - 1) {\n      sum += nums[i]\n      subArr.push(sum)\n    } else {\n      currSum += nums[i]\n    }\n  }\n  if (currSum > 0) {\n    subArr.push(currSum)\n  }\n  // console.log(subArr)\n  for (let i = 0; i < subArr.length; i++) {\n    if (minSum < subArr[i]) {\n      minSum = subArr[i]\n    }\n  }\n  return minSum\n}\n\n// console.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\n// console.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let fill = 0;\n  for (let i = 0; i < grid.length; i++) {\n    fill += grid[i][0];\n    if (fill > capacity) {\n      fill = 0;\n      for (let j = 0; j < grid[i].length; j++) {\n        if (grid[i][j]) {\n          fill += grid[i][j];\n          grid[i][j] = 0;\n        }\n      }\n    }\n  }\n  return fill;\n};\n\nconst maxFill_dp = (grid, capacity) => {\n  let dp = [0, 0, 0, 0];\n  for (let i = 0; i < grid.length; i++) {\n    dp[0] = dp[1] = dp[2] = dp[3] = 0;\n    dp[0] = 1;\n    dp[1] = 1;\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]) {\n        dp[j] = 1;\n      } else {\n        dp[j] = 0;\n        dp[j + 1] = dp[j + 2] = dp[j + 3] = 0;\n      }\n    }\n    if (dp[grid[i].length] > capacity) {\n      break;\n    }\n  }\n  return dp[grid[0].length];\n};\n\nconst maxFill_dp2 = (grid, capacity) => {\n  let dp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  for (let i = 0; i < grid.length; i++) {\n    dp[0] = dp[1] = dp[2] = dp[3] = 0;\n    dp[0] = 1;\n    dp[1] = 1;\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]) {\n        dp[j] = 1;\n      } else {\n        dp[j] = 0;\n        dp[j + 1] = dp[j + 2] = dp[j + 3] = 0;\n      }\n    }\n    if (dp[grid[i].length] > capacity) {\n      break;\n    }\n  }\n  return dp[grid[0].length];\n};\n\nconst maxFill_dp3 = (grid, capacity) => {\n  let dp = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  for (let i = 0; i < grid.length; i++) {\n    dp[0] = dp[1] = dp[2] = dp[3] = 0;\n    dp[0] = 1;\n    dp[1] = 1;\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j]) {\n        dp[j] = 1;\n      } else {\n        dp[j] = 0;\n        dp[j + 1] = dp[j + 2] = dp[j + 3] = 0;\n      }\n    }\n    if (dp[grid[i].length] > capacity) {\n      break;\n    }\n  }\n  return dp[grid[0].length];\n};\n\n// TEST\nconst grid = [[0, 0, 1, 1], [0, 1, 0, 0], [1, 1, 1, 1]];\nconst capacity = 1;\nconsole.log(maxFill(grid, capacity));\nconsole.log(maxFill_dp(grid, capacity));\nconsole.log(maxFill_dp2(grid, capacity));\nconsole.log(maxFill_dp3(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    const tmp = [];\n    let a;\n    let b;\n\n    for (let i = 0; i < arr.length; i += 1) {\n        tmp.push([arr[i], i]);\n    }\n\n    tmp.sort(function (a, b) {\n        return a[0] - b[0];\n    });\n\n    for (let i = 0; i < tmp.length; i += 1) {\n        arr[i] = tmp[i][1];\n    }\n};\n\nconst array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\nconst sortedArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n\n/*\n  We have a \"solution\" (sImple) to this problem, which we can try out.\n  */\n\nconst getRandomInt = (max) => {\n    let n = Math.floor(Math.random() * max);\n    return n;\n};\n\n/*\n  This is our test code.\n  */\n\nconst getRandomBool = () => {\n    return getRandomInt(2) === 1;\n};\n\nconst getRandomArray = (length) => {\n    const arr = [];\n    while (arr.length < length) {\n        arr.push(getRandomInt(20));\n    }\n    return arr;\n};\n\nconst getRandomArrayLength = (length) => {\n    return getRandomInt(length);\n};\n\nconst getRandomString = (length) => {\n    let str = \"\";\n    while (str.length < length) {\n        str += Math.floor(Math.random() * 10);\n    }\n    return str;\n};\n\nconst getRandomStringLength = (length) => {\n    return getRandomInt(length);\n};\n\nconst getRandomBool = () => {\n    return getRandomInt(2) === 1;\n};\n\nconst getRandomInt = (max) => {\n    let n = Math.floor(Math.random() * max);\n    return n;\n};\n\nconst getRandomIntLength = (length) => {\n    return getRandomInt(length);\n};\n\nconst getRandomIntLengthWithBool = (length, bool) => {\n    if (bool) {\n        return getRandomInt(length);\n    } else {\n        return getRandomIntLength(length);\n    }\n};\n\nconst getRandomIntLengthWithArray = (length, array) => {\n    if (array.length === 0) {\n        return getRandomIntLength(length);\n    } else {\n        return getRandomIntLength(length);\n    }\n};\n\nconst getRandomIntLengthWithArrayBool = (length, array, bool) => {\n    if (array.length === 0) {\n        if (bool) {\n            return getRandomIntLength(length);\n        } else {\n            return getRandomIntLength(length);\n        }\n    } else {\n        if (bool) {\n            return getRandomIntLength(length);\n        } else {\n            return getRandomIntLength(length);\n        }\n    }\n};\n\nconst getRandomIntLengthWithString = (length, string) => {\n    if (string.length === 0) {\n        return getRandomIntLength(length);\n    } else {\n        return getRandomIntLength(length);\n    }\n};\n\nconst getRandomIntLengthWithStringBool = (length, string, bool) => {\n    if (string.length === 0) {\n        if (bool) {\n            return getRandomIntLength(length);\n        } else {\n            return getRandomIntLength(length);\n        }\n    } else {\n        if (bool) {\n            return getRandomIntLength(length);\n        } else {\n            return getRandomIntLength(length);\n        }\n    }\n};\n\nconst getRandomStringLengthWithArray = (length, array) => {\n    if (array.length === 0) {\n        return getRandomStringLength(length);\n    } else {\n        return getRandomStringLength(length);\n    }\n};\n\nconst getRandomStringLengthWithArrayBool = (length, array, bool) => {\n    if (array.length === 0) {\n        if (bool) {\n            return getRandomStringLength(length);\n        } else {\n            return getRandomStringLength(length);\n        }\n    } else {\n        if (bool) {\n            return getRandomStringLength(length);\n        } else {\n            return getRandomStringLength(length);\n        }\n    }\n};\n\nconst getRandomStringLengthWithString = (length, string) => {\n    if (string.length === 0) {\n        return getRandomStringLength(length);\n    } else {\n        return getRandomStringLength(length);\n    }\n};\n\nconst getRandomStringLengthWithStringBool = (length, string, bool) => {\n    if (string.length === 0) {\n        if (bool) {\n            return getRandomStringLength(length);\n        } else {\n            return getRandomStringLength(length);\n        }\n    } else {\n        if (bool) {\n            return getRandomStringLength(length);\n        } else {\n            return getRandomStringLength(length);\n        }\n    }\n};\n\nconst getRandomStringLengthWithArrayAndBool = (length, array, bool) => {\n    if (array.length === 0) {\n        if (bool"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  var arr = []\n  for (var i = 0; i < s.length; i++) {\n    for (var j = 0; j < n; j++) {\n      if (s[i + j]!== \" \") {\n        arr.push(s.substring(i, i + j + 1))\n      }\n    }\n  }\n  return arr\n}\n\n/*\n  Given a list of strings, return a list of all strings that are a substring of any other string in the list.\n  This problem has the following test cases:\n  nOte: You mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  subStrings(\"Mary had a little lamb\", \"a little\") ==> [\"Mary had a little lamb\", \"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"little\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"Mary\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"little lamb\") ==> [\"Mary had a little lamb\", \"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"had\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"Mary\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\"Mary had a little lamb\", \"\") ==> [\"Mary had a little lamb\"]\n  subStrings(\""}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let word = word.toLowerCase();\n  let vowel = '';\n  for (let i = 0; i < word.length; i++) {\n    if (isVowel(word[i])) {\n      vowel += word[i];\n    }\n  }\n  if (vowel.length === 0) {\n    return '';\n  }\n  let index = vowels.indexOf(vowel);\n  if (index < 0) {\n    return '';\n  }\n  return vowels[index];\n};\n\nconst isVowel = (letter) => {\n  return vowels.includes(letter);\n};\n\n// test\nconsole.log(getClosestVowel('ab')); // ''\nconsole.log(getClosestVowel('quick')); // ''\nconsole.log(getClosestVowel('yogurt')); // 'y'\nconsole.log(getClosestVowel('FULL')); // 'U'\n\nmodule.exports = getClosestVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    const last = lst.pop()\n    if (s === last) return 'Yes'\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return 'No'\n    if (s === ')') return 'No'\n    return match(lst.shift())\n  }\n  return match(lst.shift())\n}\n\n/*\n  Let me know the string I want to check for goodness.\n  */\nconst matchParens = (lst) => {\n  const match = (s) => {\n    const len = s.length\n    if (s === '(') return"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    const newArr = arr.slice()\n    const result = newArr.slice(0, k)\n    const max = result[result.length - 1]\n\n    for (let i = result.length - 2; i >= 0; i--) {\n        if (newArr[i] > max) {\n            result.splice(i + 1, 0, newArr[i])\n        }\n    }\n\n    return result\n}\n\nconst maximumTest = [\n    [-3, -4, 5],\n    [4, -4, 4],\n    [-3, 2, 1, 2, -1, -2, 1],\n    [-3, 2, 1, 2, -1, -2, 1, 2, -1, -2, 1]\n]\n\nmaximumTest.forEach(({ arr, k }) => {\n    const res = maximum(arr, k)\n    console.log(`${k} th maximum number is ${res}`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const list = lst.slice(0);\n  return list.reduce((acc, elem, index) => {\n    return acc + list[index + 1] * elem;\n  }, 0);\n}\n\nconst solution = (lst) => {\n  const list = lst.slice(0);\n  return list.reduce((acc, elem, index) => {\n    return acc + list[index + 1] * elem;\n  }, 0);\n}\n\nmodule.exports = solution;<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  let elem = 0\n  for (let i = 0; i < k; i++) {\n    elem = arr[i]\n    sum += elem\n  }\n  return sum\n}\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  if (n <= 0) return [];\n  const list = [];\n  const collatz = (n) => {\n    if (n <= 1) return [n];\n    if (n % 2 === 1) list.push(n);\n    const half = n / 2;\n    const [a, b] = collatz(half);\n    const [c, d] = collatz(half * 3);\n    return [a, b, c, d];\n  };\n  return collatz(n);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    const dateStr = date.toString();\n    const dateObj = new Date(dateStr);\n    const day = dateObj.getDate();\n    const month = dateObj.getMonth();\n    const year = dateObj.getFullYear();\n    const dayOfMonth = dateObj.getDay();\n    const dayOfWeek = dateObj.getDay();\n    const dayOfYear = dateObj.getDayOfYear();\n\n    const isValid =\n        (day > 0 && month > 0 && year > 0) &&\n        (day <= 31 && month <= 12 && year <= 2020) &&\n        (dayOfMonth <= dayOfWeek && dayOfMonth <= dayOfYear);\n\n    return isValid;\n}\n\nconst getDateStr = (date) => {\n    const dateStr = date.toString();\n    return dateStr;\n}\n\nconst getMonthStr = (date) => {\n    const dateStr = date.toString();\n    const monthStr = dateStr.slice(4, 6);\n    return monthStr;\n}\n\nconst getDayStr = (date) => {\n    const dateStr = date.toString();\n    const dayStr = dateStr.slice(6, 8);\n    return dayStr;\n}\n\nconst getYearStr = (date) => {\n    const dateStr = date.toString();\n    const yearStr = dateStr.slice(0, 4);\n    return yearStr;\n}\n\nmodule.exports = {\n    validDate,\n    getDateStr,\n    getMonthStr,\n    getDayStr,\n    getYearStr\n}<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    const wordList = txt.trim().split(/\\s+/g);\n    const wordListReverse = wordList.reverse();\n    const wordListLength = wordList.length;\n\n    const isPunctuation = (str) => {\n        return str.match(/[!@#$%^&*()_+=\\[\\]{}|`~\\\\?/;:'\"<>|]/g);\n    };\n\n    const splitWordsByPunctuation = (str) => {\n        let wordListSplit = str.split(/[!,;]+/g);\n        let wordListLength = wordListSplit.length;\n        for (let i = 0; i < wordListLength; i++) {\n            if (isPunctuation(wordListSplit[i])) {\n                wordListSplit[i] = wordListSplit[i].replace(/[!,;]/g,'');\n            }\n        }\n        return wordListSplit;\n    };\n\n    const getNextWord = (str, currentWordIndex) => {\n        if (currentWordIndex >= wordListLength) {\n            return null;\n        } else {\n            return wordListReverse[currentWordIndex];\n        }\n    };\n\n    const getPrevWord = (str, currentWordIndex) => {\n        if (currentWordIndex <= 0) {\n            return null;\n        } else {\n            return wordList[currentWordIndex - 1];\n        }\n    };\n\n    const getNextWordByPunctuation = (str, currentWordIndex) => {\n        const currentWord = wordList[currentWordIndex];\n        const words = splitWordsByPunctuation(currentWord);\n        const nextWordIndex = currentWordIndex + 1;\n        const nextWord = getNextWord(str, nextWordIndex);\n        const nextWordWords = splitWordsByPunctuation(nextWord);\n        const nextWordWordsLength = nextWordWords.length;\n        let nextWordWordsIndex = 0;\n        let nextWordWordsNext = null;\n        let nextWordWordsPrev = null;\n\n        for (let i = 0; i < nextWordWordsLength; i++) {\n            if (nextWordWords[i].toUpperCase() === nextWord.toUpperCase()) {\n                nextWordWordsPrev = getPrevWord(str, nextWordWordsIndex);\n                nextWordWordsNext = getNextWord(str, nextWordWordsIndex + 1);\n                if (nextWordWordsPrev!== null && nextWordWordsNext!== null) {\n                    return [nextWord, nextWordWordsPrev, nextWordWordsNext];\n                } else {\n                    return [nextWord, nextWordWordsNext];\n                }\n            }\n            nextWordWordsIndex++;\n        }\n        return [nextWord, nextWordWordsNext];\n    };\n\n    const getPrevWordByPunctuation = (str, currentWordIndex) => {\n        const currentWord = wordList[currentWordIndex];\n        const words = splitWordsByPunctuation(currentWord);\n        const prevWordIndex = currentWordIndex - 1;\n        const prevWord = getPrevWord(str, prevWordIndex);\n        const prevWordWords = splitWordsByPunctuation(prevWord);\n        const prevWordWordsLength = prevWordWords.length;\n        let prevWordWordsIndex = prevWordWordsLength - 1;\n        let prevWordWordsPrev = null;\n        let prevWordWordsNext = null;\n\n        for (let i = 0; i < prevWordWordsLength; i++) {\n            if (prevWordWords[i].toUpperCase() === prevWord.toUpperCase()) {\n                prevWordWordsPrev = getPrevWord(str, prevWordWordsIndex);\n                prevWordWordsNext = getNextWord(str, prevWordWordsIndex - 1);\n                if (prevWordWordsPrev!== null && prevWordWordsNext!== null) {\n                    return [prevWord, prevWordWordsPrev, prevWordWordsNext];\n                } else {\n                    return [prevWord, prevWordWordsPrev];\n                }\n            }\n            prevWordWordsIndex--;\n        }\n        return [prevWord, prevWordWordsPrev];\n    };\n\n    return wordList.map((str, i) => {\n        return getNextWordByPunctuation(str, i);\n    });\n};\n\nmodule.exports = splitWords;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const len = lst.length\n  let prev = 0\n  let count = 0\n  let i = 1\n  let isSorted = true\n  while (i < len) {\n    if (lst[prev] > lst[i]) {\n      isSorted = false\n      break\n    }\n    count++\n    prev = i\n    i++\n  }\n  if (count === 1) {\n    return isSorted\n  }\n  return false\n}\n\n/* GivEn a list oF numbErs, return whethEr or nOt they aRe sOrted\n  in DescENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSortedDesc([5]) ➞ false\n  isSortedDesc([1, 2, 3, 4, 5]) ➞ false\n  isSortedDesc([1, 3, 2, 4, 5]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSortedDesc([1, 2, 3, 4, 5, 6, 7, 8]) ➞ false\n  isSortedDesc([1, 2, 2, 3, 3, 4]) ➞ true\n  isSortedDesc([1, 2, 2, 2, 3, 4]) ➞ false\n  isSortedDesc([1, 2, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const len = lst.length\n  let prev = len - 1\n  let count = 0\n  let i = len - 1\n  let isSorted = true\n  while (i >= 0) {\n    if (lst[prev] > lst[i]) {\n      isSorted = false\n      break\n    }\n    count++\n    prev = i\n    i--\n  }\n  if (count === 1) {\n    return isSorted\n  }\n  return false\n}\n\nexport { isSorted, isSortedDesc }\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let interval1_start = interval1[0];\n  let interval1_end = interval1[1];\n  let interval2_start = interval2[0];\n  let interval2_end = interval2[1];\n\n  if (interval1_start > interval1_end) {\n    interval1_start = interval1[1];\n    interval1_end = interval1[0];\n  }\n  if (interval2_start > interval2_end) {\n    interval2_start = interval2[1];\n    interval2_end = interval2[0];\n  }\n\n  if (interval1_end <= interval2_start) {\n    return \"NO\";\n  }\n\n  if (interval2_end <= interval1_start) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 3), (2, 4)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst isPrime = n => {\n  const arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      arr.push(i);\n    }\n  }\n\n  return arr.length === 1;\n};\n\nconst isPrime2 = n => {\n  let i = 1;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n\n  return true;\n};\n\nconst isPrime3 = n => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n\n  return true;\n};\n\nconst isPrime4 = n => {\n  return n > 1 && n % 2 === 0;\n};\n\nconst isPrime5 = n => {\n  let i = 3;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime6 = n => {\n  let i = 3;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime7 = n => {\n  let i = 3;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 4;\n  }\n\n  return true;\n};\n\nconst isPrime8 = n => {\n  let i = 5;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime9 = n => {\n  let i = 5;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 4;\n  }\n\n  return true;\n};\n\nconst isPrime10 = n => {\n  let i = 7;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime11 = n => {\n  let i = 11;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime12 = n => {\n  let i = 13;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime13 = n => {\n  let i = 17;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime14 = n => {\n  let i = 19;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime15 = n => {\n  let i = 23;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime16 = n => {\n  let i = 29;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i += 2;\n  }\n\n  return true;\n};\n\nconst isPrime17 = n => {\n  let i = 31;\n  while (i <= n) {\n    if (n"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signArray = arr.map(Number.sign)\n  let maxIndex = 0\n  let maxSign = -1\n\n  for (let i = 0; i < arr.length; i++) {\n    if (maxSign < signArray[i]) {\n      maxIndex = i\n      maxSign = signArray[i]\n    }\n  }\n  return maxSign * arr[maxIndex]\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let visited = [...new Array(grid.length).fill(0)]\n  let dp = new Array(grid.length).fill(0)\n  let path = []\n  for (let i = 0; i < grid.length; i++) {\n    let l = grid[i].length\n    dp[i] = l\n    for (let j = 0; j < l; j++) {\n      if (visited[i] === 1) {\n        break\n      }\n      let next = grid[i][j]\n      if (dp[i] > 1) {\n        dp[i + 1] = dp[i]\n      }\n      if (next!== 0) {\n        if (visited[next] === 0) {\n          dp[next] = dp[i] + 1\n          path.push(next)\n          visited[next] = 1\n        } else {\n          dp[next] = Math.min(dp[next], dp[i] + 1)\n        }\n      }\n    }\n  }\n  let result = path\n  if (k > 1) {\n    result = path.slice(0, k - 1)\n  }\n  return result\n}\n\nconst solve = (grid, k) => {\n  let path = minPath(grid, k)\n  return path.join('')\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconst k = 3\n\nconst test = [\n  [5, 9, 3],\n  [4, 1, 6],\n  [7, 8, 2]\n]\n\nconsole.log(solve(grid, k))\nconsole.log(solve(test, k))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let [num, n] = [0, n];\n  let [prev, next] = [0, 1];\n  for (let i = 0; i < n; ++i) {\n    [next, prev] = [prev + next, prev];\n  }\n  return [num, next];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let a = Math.abs(n);\n  if (a > 10) {\n    return digits(Math.floor(a / 10));\n  }\n  return n;\n};\n\n/*Given a prOduct, find the Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(0)  == 0\n  digits(1)  == 1\n  digits(4)  == 3\n  digits(235) == 2\n  */\nconst oddDigits = (n) => {\n  let a = Math.abs(n);\n  if (a > 10) {\n    return oddDigits(Math.floor(a / 10));\n  }\n  return n;\n};\n\nconst nums = [\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  0,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n  22,\n  23,\n  24,\n  25,\n  26,\n  27,\n  28,\n  29,\n  30,\n  31,\n  32,\n  33,\n  34,\n  35,\n  36,\n  37,\n  38,\n  39,\n  40,\n  41,\n  42,\n  43,\n  44,\n  45,\n  46,\n  47,\n  48,\n  49,\n  50,\n  51,\n  52,\n  53,\n  54,\n  55,\n  56,\n  57,\n  58,\n  59,\n  60,\n  61,\n  62,\n  63,\n  64,\n  65,\n  66,\n  67,\n  68,\n  69,\n  70,\n  71,\n  72,\n  73,\n  74,\n  75,\n  76,\n  77,\n  78,\n  79,\n  80,\n  81,\n  82,\n  83,\n  84,\n  85,\n  86,\n  87,\n  88,\n  89,\n  90,\n  91,\n  92,\n  93,\n  94,\n  95,\n  96,\n  97,\n  98,\n  99,\n  100,\n  101,\n  102,\n  103,\n  104,\n  105,\n  106,\n  107,\n  108,\n  109,\n  110,\n  111,\n  112,\n  113,\n  114,\n  115,\n  116,\n  117,\n  118,\n  119,\n  120,\n  121,\n  122,\n  123,\n  124,\n  125,\n  126,\n  127,\n  128,\n  129,\n  130,\n  131,\n  132,\n  133,\n  134,\n  135,\n  136,\n  137,\n  138,\n  139,\n  140,\n  141,\n  142,\n  143,\n  144,\n  145,\n  146,\n  147,\n  148,\n  149,\n  150,\n  151,\n  152,\n  153,\n  154,\n  155,\n  156,\n  157,\n  158,\n  159,\n  160,\n  161,\n  162,\n  163,\n  164,\n  165,\n  166,\n  167,\n  168,\n  169,\n  170,\n  171,\n  172,\n  173,\n  174,\n  175,\n  176,\n  177,\n  178,\n  179,\n  180,\n  181,\n  182,\n  183,\n  184,\n  185,\n  186,\n  187,\n  188,\n  189,\n  190,\n  191,\n  192,\n  193,\n  194,\n  195,\n  196,\n  197,\n  198,\n  199,\n  200,\n  201,\n  202,\n  203,\n  204,\n  205,\n  206,\n  207,\n  208,\n  209,\n  210,\n  211,\n  212,\n  213,\n  214,\n  215,\n  216,\n  217,\n  218,\n  219,\n  220,\n  221,\n  222,\n  223,\n  224,\n  225,\n  226,\n  227,\n  228,\n  229,\n  230,\n  231,\n  232,\n  233,\n  234,\n  235,\n  236,\n  237,\n  238,\n  239,\n  240,\n  241,\n  242,\n  243,\n  244,\n  245,\n  246,\n  247,\n  248,\n  249,\n  250,\n  251,\n  252,\n  253,\n  254,\n  255,\n  256,\n  257,\n  258,\n  259,\n  260,\n  261,\n  262,\n  263,\n  264,\n  265,\n  266,\n  267,\n  268,\n  269,\n  270,\n  271,\n  272,\n  273,\n  274,\n  275,\n  276,\n  277,\n  278,\n  279,\n  280,\n  281,\n  282,\n  283,\n  284,\n  285,\n  286,\n  287,\n  288,\n  289,\n  290,\n  291,\n  292,\n  293,\n  294,\n  295,\n  296,\n  297,\n  298,\n  299,\n  300,\n  301,\n  302,\n  303,\n  304,\n  305,\n  306,\n  307,\n  308,\n  309,\n  310,\n  311,\n  312,\n  313,\n  314,\n  315,\n  316,\n  317,\n  318,"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n\tconst [str, i, b] = [string, 0, false]\n\tlet [last, lastIndex] = [str[0], 0]\n\tfor (let j = 0; j < str.length; j++) {\n\t\tif (str[j] === last) {\n\t\t\tif (str[j + 1] === last) {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t} else if (str[j + 1] === ']') {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t}\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t}\n\t\tlastIndex = j + 1\n\t\tlast = str[j]\n\t}\n\treturn b\n}\n\nconst isNested_2 = (string) => {\n\tconst [str, i, b] = [string, 0, false]\n\tlet [last, lastIndex] = [str[0], 0]\n\tfor (let j = 0; j < str.length; j++) {\n\t\tif (str[j] === last) {\n\t\t\tif (str[j + 1] === last) {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t} else if (str[j + 1] === ']') {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t}\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t}\n\t\tlastIndex = j + 1\n\t\tlast = str[j]\n\t}\n\treturn b\n}\n\nconst isNested_3 = (string) => {\n\tconst [str, i, b] = [string, 0, false]\n\tlet [last, lastIndex] = [str[0], 0]\n\tfor (let j = 0; j < str.length; j++) {\n\t\tif (str[j] === last) {\n\t\t\tif (str[j + 1] === last) {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t} else if (str[j + 1] === ']') {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t}\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t}\n\t\tlastIndex = j + 1\n\t\tlast = str[j]\n\t}\n\treturn b\n}\n\nconst isNested_4 = (string) => {\n\tconst [str, i, b] = [string, 0, false]\n\tlet [last, lastIndex] = [str[0], 0]\n\tfor (let j = 0; j < str.length; j++) {\n\t\tif (str[j] === last) {\n\t\t\tif (str[j + 1] === last) {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t} else if (str[j + 1] === ']') {\n\t\t\t\tstr = str.substring(lastIndex)\n\t\t\t\ti = j + 2\n\t\t\t\tb = true\n\t\t\t}\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t} else if (str[j] === '[' && str[j + 1] === ']') {\n\t\t\tstr = str.substring(lastIndex)\n\t\t\ti = j + 2\n\t\t\tb = true\n\t\t}\n\t\tlastIndex = j + 1\n\t\tlast = str[j]\n\t}\n\t"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let output = 0;\n  lst.forEach( (num, i) => {\n    let currentNum = num.toPrecision(2);\n    let currNum = parseInt(currentNum);\n    let square = Math.pow(currNum, 2);\n    output += parseInt(square);\n  });\n  return output;\n};\n\n/*\n  Find the giVe List which has the most number of numbers\n  that are the Sqaure of a number in the list\n  Example:\n  lst = [1,2,3,4,5]\n  the output should be 2.\n  lst = [1,4,9,16,25]\n  the output should be 2.\n  lst = [1,3,5,7,9]\n  the output should be 2.\n  lst = [1.4,4.2,0]\n  the output should be 1.\n  lst = [-2.4,1,1]\n  the output should be 2.\n*/\nconst maxNumOfSquares = (lst) => {\n  let output = 0;\n  let maxSquares = 0;\n  lst.forEach( (num, i) => {\n    let currentNum = num.toPrecision(2);\n    let currNum = parseInt(currentNum);\n    let square = Math.pow(currNum, 2);\n    if (square > maxSquares) {\n      output = i + 1;\n      maxSquares = square;\n    }\n  });\n  return output;\n};\n\nconst maxSum = (lst) => {\n  let output = 0;\n  let maxSum = 0;\n  lst.forEach( (num, i) => {\n    let currentNum = num.toPrecision(2);\n    let currNum = parseInt(currentNum);\n    let sum = parseInt(currNum) + parseInt(num.toPrecision(2));\n    if (sum > maxSum) {\n      output = i + 1;\n      maxSum = sum;\n    }\n  });\n  return output;\n};\n\n/*\n  Find the giVe List which has the largest Sum\n  Example:\n  lst = [1,2,3,4,5]\n  the output should be 5.\n  lst = [1,4,9,16,25]\n  the output should be 25.\n  lst = [1,3,5,7,9]\n  the output should be 9.\n  lst = [1.4,4.2,0]\n  the output should be 12.\n  lst = [-2.4,1,1]\n  the output should be 8.\n*/\nconst maxSumOfSquares = (lst) => {\n  let output = 0;\n  let maxSumSquares = 0;\n  lst.forEach( (num, i) => {\n    let currentNum = num.toPrecision(2);\n    let currNum = parseInt(currentNum);\n    let sum = parseInt(currNum) + parseInt(num.toPrecision(2));\n    if (sum > maxSumSquares) {\n      output = i + 1;\n      maxSumSquares = sum;\n    }\n  });\n  return output;\n};\n\n/*\n  Find the giVe List which has the least number of numbers\n  that are the Sqaure of a number in the list\n  Example:\n  lst = [1,2,3,4,5]\n  the output should be 1.\n  lst = [1,4,9,16,25]\n  the output should be 4.\n  lst = [1,3,5,7,9]\n  the output should be 4.\n  lst = [1.4,4.2,0]\n  the output should be 1.\n  lst = [-2.4,1,1]\n  the output should be 4.\n*/\nconst minNumOfSquares = (lst) => {\n  let output = 0;\n  let minSquares = 9999;\n  lst.forEach( (num, i) => {\n    let currentNum = num.toPrecision(2);\n    let currNum = parseInt(currentNum);\n    let square = Math.pow(currNum, 2);\n    if (square < minSquares) {\n      output = i + 1;\n      minSquares = square;\n    }\n  });\n  return output;\n};\n\n/*\n  Find the giVe List which has the least Sum\n  Example:\n  lst = [1,2,3,4,5]\n  the output should be 1.\n  lst = [1,4,9,16,25]\n  the output should be 1.\n  lst = [1,3,5,7,9]\n  the output should be 1.\n  lst = [1.4,4.2,0]\n  the output should be 1.\n  lst = [-2.4,1,1]\n  the output should be 1.\n*/\nconst minSum = (lst) => {\n  let output = 0;\n  let minSum = 9999;\n  lst.forEach( (num, i) => {\n    let currentNum = num.toPrecision(2);\n    let currNum = parseInt(currentNum);\n    let sum = parseInt(currNum) + parseInt(num.toPrecision(2));\n    if (sum < minSum) {\n      output = i + 1;\n      minSum = sum;\n    }\n  });\n  return output;\n};\n\n/*\n  Find the giVe List which has the least Sum of Squares\n  "}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n  const chars = txt.split(\" \");\n  const lastChar = chars[chars.length - 1];\n  const isALetter = lastChar.match(/[A-Za-z]/);\n  return isALetter;\n};\n\nconst checkIfLastCharIsALetter = (txt)"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let index = -1;\n  let temp = 0;\n  let i = 0;\n  let n = arr.length;\n  while (i < n) {\n    if (arr[i] >= arr[i + 1]) {\n      temp = arr[i];\n      arr[i] = arr[i + 1];\n      arr[i + 1] = temp;\n      index = i;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  if (index!== -1) {\n    return index;\n  }\n  return -1;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null\n  let min = null\n  for (let a of lst) {\n    let b = largestSmallestIntegers([a])\n    if (b == null) {\n      return (null, null)\n    }\n    if (b.length == 2) {\n      let bMax = b[0]\n      let bMin = b[1]\n      if (bMax > max) {\n        max = bMax\n      }\n      if (bMin < min) {\n        min = bMin\n      }\n    }\n  }\n  return (max, min)\n}\n\n/*\n  This function returns a tuple (a, b) Where 'a' is the\n  largest in the list, and 'b' is the smallest in the list.\n  If the list is empty, return null.\n  Examples:\n  largestSmallestIntegers([1, 3, 2, 4]) == (3, 1)\n  largestSmallestIntegers([]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let max = null\n  let min = null\n  for (let a of lst) {\n    let b = largestSmallestIntegers([a])\n    if (b == null) {\n      return (null, null)\n    }\n    if (b.length == 2) {\n      let bMax = b[0]\n      let bMin = b[1]\n      if (bMax > max) {\n        max = bMax\n      }\n      if (bMin < min) {\n        min = bMin\n      }\n    }\n  }\n  return (max, min)\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n    if (isNaN(a) && isNaN(b)) {\n        return a + b;\n    } else if (isNaN(a)) {\n        return b;\n    } else if (isNaN(b)) {\n        return a;\n    } else if (typeof a === \"string\" && typeof b === \"string\") {\n        if (a.toLowerCase() === b.toLowerCase()) {\n            return a;\n        } else {\n            return b;\n        }\n    } else if (a === b) {\n        return a;\n    } else {\n        return b;\n    }\n};\n\n/*\n  Convert a string to lower case.\n\n  compareOne(\"Foo\", \"foo\") ➞ \"foo\"\n  compareOne(\"Foo\", \"Foo\") ➞ \"foo\"\n  compareOne(\"Foo\", \"FOO\") ➞ \"foo\"\n  */\nconSt toLowerCase = (str) => {\n    return str.toLowerCase();\n};\n\n/*\n  compareOne(1, 2) ➞ 2\n  compareOne(1, \"2\") ➞ 2\n  compareOne(\"5\", 6) ➞ 6\n  compareOne(\"1\", 1) ➞ 1\n  compareOne(\"1\", \"1\") ➞ 1\n  */\nconSt compareTwo = (a, b) => {\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        if (toLowerCase(a) === toLowerCase(b)) {\n            return a;\n        } else {\n            return b;\n        }\n    } else {\n        return b;\n    }\n};\n\nconSt compareAll = (a, b) => {\n    return compareTwo(a, b);\n};\n\n/*\n  Compare two arrays of numbers.\n\n  compareTwo([\"1\", \"2\"], [\"1\", \"2\"]) ➞ true\n  compareTwo([\"1\", \"2\"], [\"1\", \"3\"]) ➞ false\n  */\nconSt compareTwoArrays = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i]!== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Compare two objects.\n\n  compareTwo({\"a\": \"1\", \"b\": \"2\"}, {\"a\": \"1\", \"b\": \"2\"}) ➞ true\n  compareTwo({\"a\": \"1\", \"b\": \"2\"}, {\"a\": \"1\", \"b\": \"3\"}) ➞ false\n  */\nconSt compareTwoObjects = (a, b) => {\n    for (let prop in a) {\n        if (a[prop]!== b[prop]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Compare two objects.\n\n  compareTwo({\"a\": \"1\", \"b\": \"2\"}, {\"a\": \"1\"}) ➞ false\n  */\nconSt compareTwoNull = (a, b) => {\n    if (a === b) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\n/*\n  Compare two objects.\n\n  compareTwo({\"a\": \"1\", \"b\": \"2\"}, {\"a\": \"1\", \"b\": \"2\"}) ➞ true\n  */\nconSt compareTwoArraysAndObjects = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    for (let i = 0; i < a.length; i++) {\n        if (a[i]!== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Compare two objects.\n\n  compareTwo({\"a\": \"1\", \"b\": \"2\"}, {\"a\": \"1\", \"b\": \"2\"}) ➞ true\n  compareTwo({\"a\": \"1\", \"b\": \"2\"}, {\"a\": \"1\", \"b\": \"3\"}) ➞ false\n  */\nconSt compareTwoArraysAndObjects2 = (a, b) => {\n    if (a.length!== b.length) {\n        return false;\n    }\n    for (let prop in a) {\n        if (a[prop]!== b[prop]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Create a function that will return a random number from 0 to 100.\n\n  createRandomNumber(5) ➞ 45\n  createRandomNumber(3) ➞ 33\n  createRandomNumber(7) ➞ 57\n  */\nconSt createRandomNumber = (num) => {\n    return Math.floor(Math.random() * 100) + num;\n};\n\n/*\n  Return a random number from 0 to 100.\n\n  createRandomNumber(5) ➞ 45\n  createRandomNumber(3) ➞ 33\n  createRandomNumber(7) ➞ 57\n  */\nconSt createRandomNumber2 = () => {\n    return Math.floor(Math.random() * 100);\n};\n\n/*\n  Return a random number from 0 to 100.\n\n  createRandomNumber(5) ➞ 45\n  createRandomNumber(3) ➞ 33\n  createRandomNumber"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  if (n < 1) {\n    return false;\n  }\n\n  const sum = n * (n + 1) / 2;\n\n  return sum % 2 === 0;\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const specialFactorial = 1;\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    }\n    return n * specialFactorial(n - 1);\n  };\n  return factorial(n);\n};\n\nconsole.log(specialFactorial(4));\n/*\n  The above function is a function, which means that it can be called from\n  within other functions.\n  Here are some examples of how to use it:\n\n  >>> specialFactorial(4)\n  288\n  >>> specialFactorial(3)\n  3\n\n  Notice that we can use the function on both sides of the equals sign.\n  >>> specialFactorial(5) === specialFactorial(5)\n  true\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/\\s+/g, '-');\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  changeLabel(\"Example\") == \"Example\"\n  changeLabel(\"Example 1\") == \"Example_1\"\n  changeLabel(\" Example 2\") == \"Example_2\"\n  changeLabel(\" Example   3\") == \"Example_3\"\n  */\nconst changeLabel = (text) => {\n  return text.replace(/\\s+/g, '_');\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabel = (text) => {\n  return text.replace(/\\s+/g, '');\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabelWithLabel = (text, label) => {\n  return text.replace(/\\s+/g, label);\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabelWithLabel2 = (text, label) => {\n  return text.replace(/\\s+/g, label.toUpperCase());\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabelWithLabel3 = (text, label) => {\n  return text.replace(/\\s+/g, label.toLowerCase());\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabelWithLabel4 = (text, label) => {\n  return text.replace(/\\s+/g, label.replace(/[^a-zA-Z ]/g, ''));\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabelWithLabel5 = (text, label) => {\n  return text.replace(/\\s+/g, label.replace(/[^A-Z ]/g, ''));\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabelWithLabel6 = (text, label) => {\n  return text.replace(/\\s+/g, label.replace(/[^A-Za-z ]/g, ''));\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\") == \"Example_3\"\n  */\nconst replaceLabelWithLabel7 = (text, label) => {\n  return text.replace(/\\s+/g, label.replace(/[^A-Za-z0-9 ]/g, ''));\n}\n\n/*\n  GivEn a sTring text, and a LABEL, \n  Find aLl spaces wiThouGht aNd replace with the LABEL\n  \n  replaceLabel(\"Example\") == \"Example\"\n  replaceLabel(\"Example 1\") == \"Example_1\"\n  replaceLabel(\" Example 2\") == \"Example_2\"\n  replaceLabel(\" Example   3\")"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    let re = /\\w{3,}\\.\\w{3,}$/;\n    return re.test(file_name)\n}\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Example:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck_2 = (file_name) => {\n    let re = /\\w{3,}\\.\\w{3,}/;\n    return re.test(file_name)\n}\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfORE ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Example:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck_3 = (file_name) => {\n    let re = /\\w{3,}\\.\\w{3,}/;\n    return re.test(file_name)\n}\n\n/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfORE ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Example:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck_4 = (file_name) => {\n    let re = /\\w{3,}\\.\\w{3,}/;\n    return re.test(file_name)\n}\n\nexport { fileNameCheck, fileNameCheck_2, fileNameCheck_3, fileNameCheck_4 }\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i\n  }\n  return ret\n}\n\nconst squareSum = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i\n  }\n  return ret\n}\n\nconst sum = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i\n  }\n  return ret\n}\n\nconst squareSum2 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i\n  }\n  return ret\n}\n\nconst sum2 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i\n  }\n  return ret\n}\n\nconst sum3 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i\n  }\n  return ret\n}\n\nconst sum4 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i\n  }\n  return ret\n}\n\nconst sum5 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum6 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum7 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum8 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum9 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum10 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum11 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum12 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum13 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum14 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum15 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum16 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum17 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum18 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum19 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return ret\n}\n\nconst sum20 = (lst) => {\n  let ret = 0\n  for (let i of lst) {\n    ret += i"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  // create a map of words to indices\n  const words = {};\n  sentence.split(\" \").forEach((word, index) => {\n    if (!words[word]) {\n      words[word] = index;\n    }\n  });\n\n  // find all the words in the sentence\n  const wordsInSentence = sentence.split(\" \").filter((word) => {\n    return words[word]!== undefined;\n  });\n\n  return wordsInSentence;\n};\n\nexport default wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n    let [numerator, denominator] = n.split(\"/\");\n    let isValid = parseInt(numerator) && parseInt(denominator);\n    if (!isValid) return false;\n    let num = parseInt(numerator);\n    let den = parseInt(denominator);\n    if (num > den) {\n        num = num / den;\n        den = 1;\n    }\n    return num;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sum = sumOf(nums);\n  return sorted(nums, (a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return a - b === sum? 1 : -1;\n  });\n};\n\n/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGITS,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByDigits([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByDigits([]) == []\n  */\nconst orderByDigits = (nums) => {\n  const sum = sumOfDigits(nums);\n  return sorted(nums, (a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return a - b === sum? 1 : -1;\n  });\n};\n\n/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGITS,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderBySum([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderBySum([]) == []\n  */\nconst orderBySum = (nums) => {\n  return sorted(nums, (a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return a - b;\n  });\n};\n\n/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGITS,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByReverse([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByReverse([]) == []\n  */\nconst orderByReverse = (nums) => {\n  return sorted(nums, (a, b) => {\n    if (a === b) {\n      return 0;\n    }\n    return b - a;\n  });\n};\n\nmodule.exports = {\n  orderByPoints,\n  orderByDigits,\n  orderBySum,\n  orderByReverse\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    let numberOfDigits = nums.length,\n        result = 0;\n\n    for (let i = 0; i < numberOfDigits; i++) {\n        if (nums[i] > 10) {\n            result += nums[i] > 9? 1 : 2;\n        }\n    }\n\n    return result;\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = new Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] === 3 * (n - 1) * (n - 1)) {\n                    result++;\n                }\n            }\n        }\n    }\n    return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\" && typeof planet2 === \"string\"))\n    return undefined;\n  let planet1S = planet1.split(\" \"), planet2S = planet2.split(\" \");\n  let s1 = planet1S.length, s2 = planet2S.length;\n  if (s1!== s2)\n    return undefined;\n  let i = 0, a = 0, b = 0, c = 0;\n  while (i < s1) {\n    if (planet1S[i].charAt(0)!== planet2S[i].charAt(0)) {\n      a = i;\n      break;\n    }\n    i++;\n  }\n  while (i < s1) {\n    if (planet1S[i].charAt(0) === planet2S[i].charAt(0)) {\n      b = i;\n      break;\n    }\n    i++;\n  }\n  while (i < s1) {\n    if (planet1S[i].charAt(0)!== planet2S[i].charAt(0)) {\n      c = i;\n      break;\n    }\n    i++;\n  }\n  return [...planet1S.slice(a + 1, b),...planet2S.slice(b + 1, c)];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    let ret = []\n    for (let i = 0; i < lst.length; i++) {\n        let cur = lst[i]\n        let j = i + 1\n        while (j < lst.length && lst[j] === cur) {\n            j++\n        }\n        ret.push(cur)\n        i = j\n    }\n    return ret\n}\nconst stringIsOddLength = (str) => {\n    if (!str) return false\n    if (str.length % 2 === 0) return false\n    return true\n}\n\nfunction stringSorter(a, b) {\n    let aStr = a.toLowerCase()\n    let bStr = b.toLowerCase()\n    if (aStr < bStr) return -1\n    if (aStr > bStr) return 1\n    return 0\n}\n\nconst wordLength = (word) => {\n    return word.length\n}\n\nconst wordsToLines = (words) => {\n    return words.reduce((prev, curr) => {\n        let last = prev.length === 0? '' : prev[prev.length - 1]\n        return prev + curr +'' + last\n    }, '')\n}\n\nconst linesToWords = (lines) => {\n    return lines.split(' ')\n}\n\nconst stringIsNotAllLengTheSame = (str) => {\n    if (str.length === 1) return false\n    let last = str.substr(str.length - 1)\n    for (let i = 0; i < str.length - 1; i++) {\n        if (str[i]!== last) return true\n    }\n    return false\n}\n\nconst stringIsNotAllSame = (str) => {\n    if (str.length === 1) return false\n    let last = str.substr(str.length - 1)\n    for (let i = 0; i < str.length - 1; i++) {\n        if (str[i]!== last) return true\n    }\n    return false\n}\n\nconst stringIsNotDuplicate = (str) => {\n    let ret = []\n    for (let i = 0; i < str.length - 1; i++) {\n        let last = str[i]\n        for (let j = i + 1; j < str.length; j++) {\n            if (str[j] === last) return false\n        }\n        ret.push(last)\n    }\n    return true\n}\n\nconst sortedList = (lst) => {\n    let ret = []\n    for (let i = 0; i < lst.length; i++) {\n        ret.push(lst[i])\n    }\n    return sortedListSum(ret)\n}\n\nconst sortedListByLength = (lst) => {\n    let ret = []\n    for (let i = 0; i < lst.length; i++) {\n        let cur = lst[i]\n        let j = i + 1\n        while (j < lst.length && lst[j] === cur) {\n            j++\n        }\n        ret.push(cur)\n        i = j\n    }\n    return sortedListSum(ret)\n}\n\nconst listIsSorted = (lst) => {\n    let i = 0\n    while (i < lst.length - 1) {\n        if (lst[i] > lst[i + 1]) return false\n        i++\n    }\n    return true\n}\n\nconst listIsUnsorted = (lst) => {\n    let i = 0\n    while (i < lst.length - 1) {\n        if (lst[i] < lst[i + 1]) return false\n        i++\n    }\n    return true\n}\n\nconst listIsNotOrdered = (lst) => {\n    let i = 0\n    while (i < lst.length - 1) {\n        if (lst[i] < lst[i + 1]) return true\n        i++\n    }\n    return false\n}\n\nconst listIsNotUnique = (lst) => {\n    let ret = []\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] === lst[i + 1]) return false\n        ret.push(lst[i])\n    }\n    return true\n}\n\nconst listIsNotDuplicate = (lst) => {\n    let ret = []\n    for (let i = 0; i < lst.length - 1; i++) {\n        if (lst[i] === lst[i + 1]) return false\n        ret.push(lst[i])\n    }\n    return true\n}\n\nconst listIsNotEmpty = (lst) => {\n    return lst.length > 0\n}\n\nconst listIsNotEmpty = (lst) => {\n    return lst.length > 0\n}\n\nconst stringIsNotEmpty = (str) => {\n    return str.length > 0\n}\n\nconst stringIsNotEmpty = (str) => {\n    return str.length > 0\n}\n\nconst listIsNotEmpty = (lst) => {\n"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return x || y;\n}\n\nconst test = () => {\n  console.log(xOrY(15, 8, 5));\n  console.log(xOrY(7, 34, 12));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n    const numbers = lst.map(x => x)\n    let max = 0\n    let min = 0\n    for(let i = 0; i < numbers.length; i++) {\n        if(numbers[i] < 0) {\n            min += Math.abs(numbers[i])\n        }\n        else {\n            max += numbers[i]\n        }\n    }\n    const diff = max - min\n    if(diff > 0) {\n        return diff * diff\n    }\n    else {\n        return 0\n    }\n}\n\ndoubleTheDifference([1, 3, 2, 0])\ndoubleTheDifference([-1, -2, 0])\ndoubleTheDifference([9, -2])\ndoubleTheDifference([0])\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  var scores = [];\n  var gameLength = game.length;\n  var guessLength = guess.length;\n\n  for (var i = 0; i < gameLength; i++) {\n    var guessIndex = 0;\n    var gameIndex = 0;\n    var score = 0;\n    var maxScore = 0;\n    \n    for (var j = 0; j < gameLength; j++) {\n      if (game[i][j] === guess[guessIndex]) {\n        score++;\n        guessIndex++;\n      } else if (game[i][j] === -1) {\n        score--;\n        guessIndex++;\n      } else {\n        guessIndex++;\n        if (guessIndex >= guessLength) {\n          break;\n        }\n      }\n      \n      if (score > maxScore) {\n        maxScore = score;\n      }\n    }\n    scores.push(maxScore);\n  }\n  \n  return scores;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const ext_names = extensions.map(extension => extension.toLowerCase());\n    const strongest_extension =\n        extensions.find(extension => ext_names.indexOf(extension) === 0);\n    return class_name + '.' + strongest_extension;\n};\n\nexport default strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  let pattern = a.replace(/\\s/g, '').split('')\n  let patternSize = pattern.length\n  let bSize = b.replace(/\\s/g, '').split('').length\n  let i = 0\n  let j = 0\n  let t = 0\n  while (i < patternSize) {\n    if (pattern[i] === b[j]) {\n      i++\n      j++\n    } else {\n      if (j === bSize) {\n        return false\n      } else {\n        t = j\n        j = 0\n        i++\n      }\n    }\n  }\n  return true\n}\n\n/*\n  const s = 'abcd'\n  const t = 'abcde'\n  const check = s.indexOf(t)\n  // check === -1 because of t is longer\n  console.log(check)\n  // check === 2 because of t starts at index 2 and a char is at index 0\n  console.log(check)\n*/\nconst indexOf = (string, substring) => {\n  let index = -1\n  let i = 0\n  let size = string.length\n  let s = substring.length\n  while (i < size) {\n    if (string[i] === substring[0]) {\n      let j = 1\n      while (j < s) {\n        if (string[i + j]!== substring[j]) {\n          break\n        }\n        j++\n      }\n      if (j === s) {\n        index = i\n        break\n      }\n    }\n    i++\n  }\n  return index\n}\n\n// const c = \"abcd\"\n// const d = \"efg\"\n// const cSize = c.length\n// const dSize = d.length\n// const size = cSize + dSize\n// const ci = c.indexOf(d)\n// const ci2 = c.indexOf(d, 1)\n// const ci3 = c.indexOf(d, 2)\n// const ci4 = c.indexOf(d, 3)\n// const ci5 = c.indexOf(d, 4)\n// const ci6 = c.indexOf(d, 5)\n// const ci7 = c.indexOf(d, 6)\n// const ci8 = c.indexOf(d, 7)\n// const ci9 = c.indexOf(d, 8)\n// const ci10 = c.indexOf(d, 9)\n// const ci11 = c.indexOf(d, 10)\n// const ci12 = c.indexOf(d, 11)\n// const ci13 = c.indexOf(d, 12)\n// const ci14 = c.indexOf(d, 13)\n// const ci15 = c.indexOf(d, 14)\n// const ci16 = c.indexOf(d, 15)\n// const ci17 = c.indexOf(d, 16)\n// const ci18 = c.indexOf(d, 17)\n// const ci19 = c.indexOf(d, 18)\n// const ci20 = c.indexOf(d, 19)\n// const ci21 = c.indexOf(d, 20)\n// const ci22 = c.indexOf(d, 21)\n// const ci23 = c.indexOf(d, 22)\n// const ci24 = c.indexOf(d, 23)\n// const ci25 = c.indexOf(d, 24)\n// const ci26 = c.indexOf(d, 25)\n// const ci27 = c.indexOf(d, 26)\n// const ci28 = c.indexOf(d, 27)\n// const ci29 = c.indexOf(d, 28)\n// const ci30 = c.indexOf(d, 29)\n// const ci31 = c.indexOf(d, 30)\n// const ci32 = c.indexOf(d, 31)\n// const ci33 = c.indexOf(d, 32)\n// const ci34 = c.indexOf(d, 33)\n// const ci35 = c.indexOf(d, 34)\n// const ci36 = c.indexOf(d, 35)\n// const ci37 = c.indexOf(d, 36)\n// const ci38 = c.indexOf(d, 37)\n// const ci39 = c.indexOf(d, 38)\n// const ci40 = c.indexOf(d, 39)\n// const ci41 = c.indexOf(d, 40)\n// const ci42 = c.indexOf(d, 41)\n// const ci43 = c.indexOf(d, 42)\n// const ci44 = c.indexOf(d, 43)\n// const ci45 = c.indexOf(d, 44)\n// const ci46 = c.indexOf(d, 45)\n// const ci47 = c.indexOf(d, 46)\n// const ci48 = c.indexOf(d, 47)\n// const ci49 = c.indexOf(d, 48)\n// const ci50 = c.indexOf(d, 49)\n// const ci51 = c.indexOf(d, 50)\n// const ci52 = c.indexOf(d, 51)\n// const ci53 = c.indexOf(d, 52)\n// const ci54 = c.indexOf(d, 53)\n// const ci55 = c.indexOf(d, 54)\n// const ci56 = c.indexOf(d, 55)\n// const ci57 = c.indexOf(d, 56)\n// const ci58 = c.indexOf(d, 57)\n// const ci59 = c.indexOf(d"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    const even = num % 2 === 0;\n    const odd =!even;\n    return (odd, even);\n};\n\nexport default evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let res = '';\n  let num = number;\n  while (num >= 1000) {\n    res = `${res}M`;\n    num -= 1000;\n  }\n  let mod = num % 10;\n  let num = num % 100;\n  if (num > 20) {\n    res = `${res}CM`;\n    num -= 20;\n  }\n  if (num > 20) {\n    res = `${res}CD`;\n    num -= 20;\n  }\n  if (num > 10) {\n    res = `${res}XC`;\n    num -= 10;\n  }\n  if (num > 10) {\n    res = `${res}L`;\n    num -= 10;\n  }\n  if (num > 5) {\n    res = `${res}IX`;\n    num -= 5;\n  }\n  if (num > 5) {\n    res = `${res}V`;\n    num -= 5;\n  }\n  if (num > 0) {\n    res = `${res}I`;\n    num -= 1;\n  }\n  if (num > 0) {\n    res = `${res}`;\n    num -= 1;\n  }\n  return res;\n};\n\nexport default intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    let a = parseInt(a, 10);\n    let b = parseInt(b, 10);\n    let c = parseInt(c, 10);\n    let ab = a + b;\n    let bc = b + c;\n    let ac = a + c;\n    if (a === b) {\n        if (b === c) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (b === c) {\n        if (a === c) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (a === c) {\n        if (b === ab) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (b === ab) {\n        if (c === bc) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (c === bc) {\n        if (a === ac) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (a === ac) {\n        if (b === bc) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (b === bc) {\n        if (c === ac) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    return false;\n}\n\n/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGLE in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle1 = (a, b, c) => {\n    let a = parseInt(a, 10);\n    let b = parseInt(b, 10);\n    let c = parseInt(c, 10);\n    let ab = a + b;\n    let bc = b + c;\n    let ac = a + c;\n    if (a === b) {\n        if (b === c) {\n            return false;\n        } else {\n            return false;\n        }\n    }\n    if (b === c) {\n        if (a === c) {\n            return false;\n        } else {\n            return false;\n        }\n    }\n    if (a === c) {\n        if (b === ab) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (b === ab) {\n        if (c === bc) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (c === bc) {\n        if (a === ac) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (a === ac) {\n        if (b === bc) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (b === bc) {\n        if (c === ac) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    return false;\n}\n\n/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGLE in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle2 = (a, b, c) => {\n    let a = parseInt(a, 10);\n    let b = parseInt(b, 10);\n    let c = parseInt(c, 10);\n    let ab = a + b;\n    let bc = b + c;\n    let ac = a + c;\n    if (a === b) {\n        if (b === c) {\n            return false;\n        } else {\n            return false;\n        }\n    }\n    if (b === c) {\n        if (a === c) {\n            return false;\n        } else {\n            return false;\n        }\n    }\n    if (a === c) {\n        if (b === ab) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (b === ab) {\n        if (c === bc) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (c === bc) {\n        if (a === ac) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (a === ac) {\n        if (b === bc) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    if (b === bc) {\n        if (c === ac) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    return false;\n}\n\nconst test = rightAngleTriangle(1, 2, 3);\nconsole.log(test);"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  //\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | Words   |  | Words   |  | Words   |  | Words   |  | Words   |  | Words   |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | \"name\"   |  | \"name\"   |  | \"name\"   |  | \"name\"   |  | \"name\"   |  | \"name\"   |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | \"of\"      |  | \"of\"      |  | \"of\"      |  | \"of\"      |  | \"of\"      |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | \"stRiNG\"  |  | \"stRiNG\"  |  | \"stRiNG\"  |  | \"stRiNG\"  |  | \"stRiNG\"  |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //\n  //   \"Words\" is a list\n  //\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | Words   |  | Words   |  | Words   |  | Words   |  | Words   |  | Words   |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | \"name\"   |  | \"name\"   |  | \"name\"   |  | \"name\"   |  | \"name\"   |  | \"name\"   |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | \"of\"      |  | \"of\"      |  | \"of\"      |  | \"of\"      |  | \"of\"      |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n  //   | \"stRiNG\"  |  | \"stRiNG\"  |  | \"stRiNG\"  |  | \"stRiNG\"  |  | \"stRiNG\"  |\n  //   +---------+  +---------+  +---------+  +---------+  +---------+  +---------+\n\n  const wordsWithMax = words.filter((word) => {\n    return word.length > 0\n  })\n\n  const maxCount = wordsWithMax.length\n\n  const wordWithMax = wordsWithMax.sort((wordA, wordB) => {\n    return wordA.length - wordB.length\n  })\n\n  const maxWord = wordWithMax[0]\n\n  return maxWord\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // console.log(`eat(${number}, ${need}, ${remaining})`)\n  return [remaining - number, number - need]\n}\n\n/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                   The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // console.log(`eat(${number}, ${need}, ${remaining})`)\n  return [remaining - number, number - need]\n}\n\n/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                   The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // console.log(`eat(${number}, ${need}, ${remaining})`)\n  return [remaining - number, number - need]\n}\n\n/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                   The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // console.log(`eat(${number}, ${need}, ${remaining})`)\n  return [remaining - number, number - need"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const length = operator.length\n    let result = 0\n    for (let i = 0; i < length - 1; i++) {\n        result += operator[i][0] * operand[i][0]\n    }\n    result += operator[length - 1][0] * operand[length - 1][0]\n    return result\n}\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const length = operator.length\n    let result = 0\n    for (let i = 0; i < length - 1; i++) {\n        result += operator[i][0] * operand[i][0]\n    }\n    result += operator[length - 1][0] * operand[length - 1][0]\n    return result\n}\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const length = operator.length\n    let result = 0\n    for (let i = 0; i < length - 1; i++) {\n        result += operator[i][0] * operand[i][0]\n    }\n    result += operator[length - 1][0] * operand[length - 1][0]\n    return result\n}\n\n/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    const length = operator.length\n    let result = 0\n    for (let i = 0; i < length - 1; i++) {\n        result += operator[i][0] * operand[i][0]\n    }\n    result += operator[length - 1][0] * operand[length - 1][0]\n    return result\n}\n\n"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = \"\"\n  for (let i = 0; i < s.length; i++) {\n    let currentChar = s[i]\n    if (str.indexOf(currentChar) === -1) {\n      str += currentChar\n    }\n  }\n  return str\n}\n\nexport { solve }<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  // Check if the given text is a valid string.\n  if (typeof text!=='string') {\n    return null;\n  }\n\n  // Initialize the MD5 hash.\n  let hash = new Md5();\n\n  // Update the hash with the given string.\n  hash.update(text);\n\n  // Return the hash.\n  return hash.digest('hex');\n}\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n    var xs = [];\n    for (var i = a; i <= b; i++) {\n        xs.push(i);\n    }\n    return xs;\n};\n\nvar numbers = generateIntegers(2, 8);\n\nconsole.log(numbers);\n<|endoftext|>"}
