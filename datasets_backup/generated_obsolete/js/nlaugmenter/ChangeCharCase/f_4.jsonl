{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  return (numbers.filter((n) => {\n    return Math.abs(n - numbers[numbers.length - 1]) < threshold;\n  }).length === numbers.length - 1);\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const regex = /\\(([^\\(\\)]*)\\)\\s?(?:[^\\(\\)]*\\))\\s?(([^\\(\\)]*)\\))\\s?(?:[^\\(\\)]*\\))\\s?(.*)/;\n  const match = regex.exec(paren_string);\n  if (!match) {\n    return [];\n  }\n  const strGroups = match.slice(1).map((str) => {\n    return str.trim();\n  });\n  return strGroups;\n};\n\nexport default separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    const aNumber = parseFloat(number);\n    if (isNaN(aNumber)) {\n        return number;\n    }\n    const bNumber = Math.floor(aNumber);\n    if (bNumber === aNumber) {\n        return bNumber;\n    }\n    const cNumber = Math.ceil(aNumber);\n    if (cNumber === aNumber) {\n        return cNumber;\n    }\n    return aNumber;\n};\n\nexport default truncateNumber;<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    let total = 0;\n    for (let i = 0; i < operations.length; i++) {\n        total += operations[i];\n    }\n    return total < 0;\n};\n\nconst belowZero = (operations) => {\n    let total = 0;\n    for (let i = 0; i < operations.length; i++) {\n        total += operations[i];\n    }\n    return total < 0;\n};\n\nconst belowZero = (operations) => {\n    let total = 0;\n    for (let i = 0; i < operations.length; i++) {\n        total += operations[i];\n    }\n    return total < 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const x = numbers.sort();\n  const mean = x.reduce((a, b) => a + b) / x.length;\n  const mad = numbers.map((x) => Math.abs(x - mean)).reduce((a, b) => a + b) / numbers.length;\n  return mad;\n};\n\n/**\n  * Mean Absolute Deviation (MAE) = mean(abs(error))\n  * For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteError = (numbers) => {\n  const x = numbers.sort();\n  const mean = x.reduce((a, b) => a + b) / x.length;\n  const mad = numbers.map((x) => Math.abs(x - mean)).reduce((a, b) => a + b) / numbers.length;\n  return mad;\n};\n\n/**\n  * Mean Squared Error (MSE) = E(x^2) - E(x)^2\n  * For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanSquaredError([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredError = (numbers) => {\n  const x = numbers.sort();\n  const mean = x.reduce((a, b) => a + b) / x.length;\n  const mad = numbers.map((x) => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / numbers.length;\n  return mad;\n};\n\n/**\n  * Median Absolute Deviation (MAD) = median(abs(error))\n  * For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const x = numbers.sort();\n  const median = x.reduce((a, b) => a + b) / x.length;\n  const mad = numbers.map((x) => Math.abs(x - median)).reduce((a, b) => a + b) / numbers.length;\n  return mad;\n};\n\n/**\n  * Mean Squared Error (MSE) = E(x^2) - E(x)^2\n  * For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> medianSquaredError([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst medianSquaredError = (numbers) => {\n  const x = numbers.sort();\n  const median = x.reduce((a, b) => a + b) / x.length;\n  const mad = numbers.map((x) => Math.pow(x - median, 2)).reduce((a, b) => a + b) / numbers.length;\n  return mad;\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  meanAbsoluteError,\n  meanSquaredError,\n  medianAbsoluteDeviation,\n  medianSquaredError\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let i = 0\n  let j = 0\n  while (i < numbers.length) {\n    result.push(numbers[i])\n    if (j + 1 < numbers.length) {\n      result.push(delimeter)\n    }\n    j++\n    i++\n  }\n  return result\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const parens = [];\n  const current_paren = 0;\n  const current_substring = 0;\n  const current_string = paren_string;\n  const new_string = paren_string;\n  const current_char = current_string[current_substring];\n  while (current_substring < current_string.length) {\n    if (current_char === '(') {\n      parens.push(parseNestedParens(new_string));\n      new_string = new_string.substring(new_string.indexOf(')') + 1);\n      current_paren++;\n    } else if (current_char === ')') {\n      current_paren--;\n      if (current_paren === 0) {\n        parens.push(new_string);\n      }\n      new_string = new_string.substring(new_string.indexOf('(') + 1);\n    } else {\n      new_string = new_string.substring(new_string.indexOf(current_char) + 1);\n    }\n    current_char = new_string[current_substring];\n    current_substring++;\n  }\n  return parens;\n};\n\n/* ------------------------- */\n/* END OF NESTED PARENTHESES */\n/* ------------------------- */\n\n/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const parens = [];\n  const current_paren = 0;\n  const current_substring = 0;\n  const current_string = paren_string;\n  const new_string = paren_string;\n  const current_char = current_string[current_substring];\n  while (current_substring < current_string.length) {\n    if (current_char === '(') {\n      parens.push(parseNestedParens2(new_string));\n      new_string = new_string.substring(new_string.indexOf(')') + 1);\n      current_paren++;\n    } else if (current_char === ')') {\n      current_paren--;\n      if (current_paren === 0) {\n        parens.push(new_string);\n      }\n      new_string = new_string.substring(new_string.indexOf('(') + 1);\n    } else {\n      new_string = new_string.substring(new_string.indexOf(current_char) + 1);\n    }\n    current_char = new_string[current_substring];\n    current_substring++;\n  }\n  return parens;\n};\n\n/* ------------------------- */\n/* END OF NESTED PARENTHESES */\n/* ------------------------- */\n\nconst parseNestedParens3 = (paren_string) => {\n  const parens = [];\n  const current_paren = 0;\n  const current_substring = 0;\n  const current_string = paren_string;\n  const new_string = paren_string;\n  const current_char = current_string[current_substring];\n  while (current_substring < current_string.length) {\n    if (current_char === '(') {\n      parens.push(parseNestedParens3(new_string));\n      new_string = new_string.substring(new_string.indexOf(')') + 1);\n      current_paren++;\n    } else if (current_char === ')') {\n      current_paren--;\n      if (current_paren === 0) {\n        parens.push(new_string);\n      }\n      new_string = new_string.substring(new_string.indexOf('(') + 1);\n    } else {\n      new_string = new_string.substring(new_string.indexOf(current_char) + 1);\n    }\n    current_char = new_string[current_substring];\n    current_substring++;\n  }\n  return parens;\n};\n\n/* ------------------------- */\n/* END OF NESTED PARENTHESES */\n/* ------------------------- */\n\n/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const parens = [];\n  const current_paren = 0;\n  const current_substring = 0;\n  const current_string = paren_string;\n  const new_string = paren_string;\n  const current_char = current_string[current_substring];\n  while (current_substring < current_string.length) {\n    "}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filtered = [];\n  strings.forEach(string => {\n    const substrings = string.split('').filter(substring);\n    if (substrings.length === 1) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\nmodule.exports = filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = [];\n  const product = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const currentNumber = numbers[i];\n    if (typeof currentNumber === 'number') {\n      sum.push(currentNumber);\n      product.push(1);\n    } else if (typeof currentNumber ==='string') {\n      const [n, d] = currentNumber.split('/');\n      if (n!== '') {\n        sum.push(parseInt(n, 10));\n      }\n      if (d!== '') {\n        product.push(parseInt(d, 10));\n      }\n    } else if (typeof currentNumber === 'object') {\n      const [n, d] = currentNumber;\n      if (n!== '') {\n        sum.push(parseInt(n, 10));\n      }\n      if (d!== '') {\n        product.push(parseInt(d, 10));\n      }\n    }\n  }\n  const productSum = product.reduce((a, b) => a * b, 1);\n  const sumProduct = sum.reduce((a, b) => a + b, 0);\n  return [sumProduct, productSum];\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const currentMax = numbers[0];\n  let i = 0;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = currentMax;\n      currentMax = numbers[i];\n    }\n    i += 1;\n  }\n  return currentMax;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const lastIndex = string.length - 1;\n  const reverse = string.split('').reverse().join('');\n  if (string === reverse) return string;\n  const suffix = makePalindrome(reverse);\n  if (isPalindrome(suffix)) return string + suffix;\n  return string + reverse;\n}\n\n/* TesT if sEtStrIs a palindrome */\ncoNst isPalindrome = (string) => {\n  return string === string.split('').reverse().join('');\n}\n\n// console.log(makePalindrome('abc'));\n// console.log(makePalindrome('cba'));\n// console.log(makePalindrome('ab'));\n// console.log(makePalindrome('bac'));\n// console.log(makePalindrome('bacd'));\n// console.log(makePalindrome('cab'));\n// console.log(makePalindrome('aa'));\n// console.log(makePalindrome('a'));\n// console.log(makePalindrome('aaa'));\n// console.log(makePalindrome('cc'));\n// console.log(makePalindrome('c'));\n// console.log(makePalindrome('ccc'));\n// console.log(makePalindrome('aa'));\n// console.log(makePalindrome('a'));\n// console.log(makePalindrome('aac'));\n// console.log(makePalindrome('aacd'));\n// console.log(makePalindrome('cab'));\n// console.log(makePalindrome('cabd'));\n// console.log(makePalindrome('bb'));\n// console.log(makePalindrome('bbc'));\n// console.log(makePalindrome('bbcd'));\n// console.log(makePalindrome('bba'));\n// console.log(makePalindrome('bbaa'));\n// console.log(makePalindrome('bbb'));\n// console.log(makePalindrome('bbbb'));\n// console.log(makePalindrome('aaaa'));\n// console.log(makePalindrome('aaaaa'));\n// console.log(makePalindrome('aaaaaa'));\n// console.log(makePalindrome('aaaaaac'));\n// console.log(makePalindrome('aaaaaacd'));\n// console.log(makePalindrome('aaaaaacdee'));\n// console.log(makePalindrome('aaaaaacdeee'));\n// console.log(makePalindrome('aaaaaacdeeee'));\n// console.log(makePalindrome('aaaaaacdeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecdd'));\n// console.log(makePalindrome('aaaaaacdeeeecddee'));\n// console.log(makePalindrome('aaaaaacdeeeecddeee'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddee'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeecddeeeec'));\n// console.log(makePalindrome('aaaaaacdee"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const lena = a.length\n  const lenb = b.length\n  const xor = []\n  for (let i = 0; i < lena; i++) {\n    xor.push(a[i] ^ b[i])\n  }\n  for (let j = lena; j < lenb; j++) {\n    xor.push(b[j] ^ a[j])\n  }\n  return xor.join('')\n}\n\nmodule.exports = stringXor\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  return (strings[0] === '')? longest(strings.slice(1)) : strings[0];\n}\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b === 0) return a;\n  return greatestCommonDivisor(b, a % b);\n}\n\nconst gcd = greatestCommonDivisor;\n\nconst greatestCommonDivisor = (a, b) => {\n  if (b ==="}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const str = string.toLowerCase();\n  const words = str.split('');\n  const prefixes = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] ==='') {\n      continue;\n    }\n    const prefix = words.slice(0, i + 1).join('');\n    prefixes.push(prefix);\n  }\n  return prefixes;\n};\n\n// RetUnr list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n// AND add the word with the prefixes to the final result\n// return a new array of the results\nconst prefixes = (string) => {\n  const str = string.toLowerCase();\n  const words = str.split('');\n  const prefixes = allPrefixes(str);\n  const results = [];\n  for (let i = 0; i < words.length; i++) {\n    if (words[i] ==='') {\n      continue;\n    }\n    const prefix = words.slice(0, i + 1).join('');\n    const result = prefix + words[i];\n    results.push(result);\n  }\n  return results;\n};\n\n// RetUnr list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n// AND add the word with the prefixes to the final result\n// return a new array of the results\nconst allSuffixes = (string) => {\n  const str = string.toLowerCase();\n  const words = str.split('');\n  const suffixes = [];\n  for (let i = 0; i < words.length - 1; i++) {\n    if (words[i] ==='') {\n      continue;\n    }\n    const suffix = words.slice(i + 1).join('');\n    suffixes.push(suffix);\n  }\n  return suffixes;\n};\n\n// RetUnr list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n// AND add the word with the prefixes to the final result\n// return a new array of the results\nconst suffixes = (string) => {\n  const str = string.toLowerCase();\n  const words = str.split('');\n  const suffixes = allSuffixes(str);\n  const results = [];\n  for (let i = 0; i < words.length - 1; i++) {\n    if (words[i] ==='') {\n      continue;\n    }\n    const suffix = words.slice(i + 1).join('');\n    const result = words[i] + suffix;\n    results.push(result);\n  }\n  return results;\n};\n\n// RetUnr list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n// AND add the word with the prefixes to the final result\n// return a new array of the results\nconst allPostfixes = (string) => {\n  const str = string.toLowerCase();\n  const words = str.split('');\n  const postfixes = [];\n  for (let i = 0; i < words.length - 1; i++) {\n    if (words[i] ==='') {\n      continue;\n    }\n    const postfix = words.slice(i + 1).join('');\n    postfixes.push(postfix);\n  }\n  return postfixes;\n};\n\n// RetUnr list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n// AND add the word with the prefixes to the final result\n// return a new array of the results\nconst postfixes = (string) => {\n  const str = string.toLowerCase();\n  const words = str.split('');\n  const postfixes = allPostfixes(str);\n  const results = [];\n  for (let i = 0; i < words.length - 1; i++) {\n    if (words[i] ==='') {\n      continue;\n    }\n    const postfix = words.slice(i + 1).join('');\n    const result = words[i] + postfix;\n    results.push(result);\n  }\n  return results;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes,\n  allPostfixes,\n  prefixes,\n  suffixes,\n  postfixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i + 1}`;\n  }\n  return s;\n};\n\nconsole.log(stringSequence(5));\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return new Promise((resolve, reject) => {\n    const buffer = [];\n    let i = 0;\n    let str = string;\n    while (i < str.length) {\n      let chr = str.charCodeAt(i);\n      if (buffer.indexOf(chr) === -1) {\n        buffer.push(chr);\n      }\n      i += 1;\n    }\n    resolve(buffer.length);\n  });\n};\n\n/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharactersV2 = (string) => {\n  return new Promise((resolve, reject) => {\n    let buffer = [];\n    let str = string;\n    let i = 0;\n    while (i < str.length) {\n      let chr = str.charCodeAt(i);\n      if (buffer.indexOf(chr) === -1) {\n        buffer.push(chr);\n      }\n      i += 1;\n    }\n    resolve(buffer.length);\n  });\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  countDistinctCharactersV2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const char_list = []\n  for (let i = 0; i < music_string.length; i++) {\n    const char = music_string[i]\n    if (char === 'o' || char === 'o|' || char === '.') {\n      char_list.push(char)\n    } else if (char === '|') {\n      const num_notes = parseInt(char_list.join(''), 10)\n      char_list = []\n      char_list.push(num_notes)\n    }\n  }\n  const num_notes = parseInt(char_list.join(''), 10)\n  char_list = []\n  char_list.push(num_notes)\n  return char_list\n}\n\n//\n// END OF FILE\n//\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let index = string.indexOf(substring);\n    while (index!== -1) {\n        index = string.indexOf(substring, index + 1);\n    }\n    return index + 1;\n};\n\n/**\n  * @desc Determines the number of letters in the string\n  * @param string: The string whose length is being measured\n  * @returns: The number of letters in the string\n  */\nconst getLength = (string) => {\n    return string.length;\n};\n\n/**\n  * @desc Finds the maximum length of any substring in the string\n  * @param string: The string whose longest substring is being measured\n  * @returns: The longest substring of the string\n  */\nconst getLongestSubstring = (string) => {\n    let length = 0;\n    let index = 0;\n    let start = 0;\n    let end = 0;\n    let previousEnd = 0;\n    while (index < string.length) {\n        end = index;\n        while (end < string.length && string[end]!== string[end - 1]) {\n            end++;\n        }\n        if (end - previousEnd > length) {\n            length = end - previousEnd;\n            start = previousEnd;\n        }\n        previousEnd = end + 1;\n        index++;\n    }\n    return string.substring(start, start + length);\n};\n\n/**\n  * @desc Finds the longest substring in the string\n  * @param string: The string whose longest substring is being measured\n  * @returns: The longest substring of the string\n  */\nconst getLongestSubstringInTheString = (string) => {\n    let index = 0;\n    let length = 0;\n    let previousEnd = 0;\n    while (index < string.length) {\n        length = index + 1;\n        while (length < string.length && string[length]!== string[length - 1]) {\n            length++;\n        }\n        if (length - previousEnd > previousEnd) {\n            previousEnd = length;\n        }\n        index++;\n    }\n    return string.substring(0, previousEnd);\n};\n\n/**\n  * @desc Finds the longest substring in the string that is of a given length\n  * @param string: The string whose longest substring is being measured\n  * @param length: The length of the substring to be found\n  * @returns: The longest substring of the string\n  */\nconst getLongestSubstringWithLength = (string, length) => {\n    let index = 0;\n    let lengthDifference = 0;\n    let previousEnd = 0;\n    let lengthSoFar = 0;\n    while (index < string.length) {\n        lengthSoFar = index + 1;\n        while (lengthSoFar < string.length && string[lengthSoFar]!== string[lengthSoFar - 1]) {\n            lengthSoFar++;\n        }\n        if (lengthSoFar - previousEnd > previousEnd) {\n            previousEnd = lengthSoFar;\n            lengthDifference = previousEnd - previousEnd;\n        }\n        index++;\n    }\n    return string.substring(0, previousEnd + lengthDifference);\n};\n\n/**\n  * @desc Finds the longest substring in the string that is of a given length\n  * @param string: The string whose longest substring is being measured\n  * @param length: The length of the substring to be found\n  * @returns: The longest substring of the string\n  */\nconst getLongestSubstringWithLengthInTheString = (string, length) => {\n    let index = 0;\n    let lengthDifference = 0;\n    let previousEnd = 0;\n    while (index < string.length) {\n        lengthDifference = index + 1;\n        while (lengthDifference < string.length && string[lengthDifference]!== string[lengthDifference - 1]) {\n            lengthDifference++;\n        }\n        if (lengthDifference - previousEnd > previousEnd) {\n            previousEnd = lengthDifference;\n        }\n        index++;\n    }\n    return string.substring(0, previousEnd + lengthDifference);\n};\n\n/**\n  * @desc Returns the string without the first nth letter\n  * @param string: The string whose first nth letter is being replaced\n  * @param n: The number of letters to be removed from the string\n  * @returns: The string without the first nth letter\n  */\nconst removeFirstNthLetter = (string, n) => {\n    let start = 0;\n    let end = 0;\n    while (start < string.length) {\n        end = start + 1;\n        while (end < string.length && string[end]!== string[end - 1]) {\n            end++;\n        }\n        if (n <= end) {\n            break;\n        }\n        start = end + 1;\n    }\n    return string.substring(start);\n};\n\n/**\n  * @desc Replaces a substring in the string with another\n  * @param string: The string whose substring is being replaced\n  * @param substring: The substring to be replaced\n  * @param replace: The string with which to replace the substring\n  * @returns: The string with the replaced substring\n  */\nconst replaceSubstring = (string, substring, replace) => {\n    let index = string.indexOf(substring);\n    while (index!== -1) {\n        string = string.replace(substring, replace);\n        index = string.indexOf(substring);\n    }\n    return string;\n};\n\n/**\n  * @desc Replaces a substring in the string with another\n  * @param string: The string whose substring is being replaced\n  * @param substring: The substring to be replaced\n  * @param replace: The string with which to replace the substring\n  * @returns: The string with the replaced substring\n  */\nconst replaceSubstringInTheString = (string, substring, replace) => {\n    let index ="}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let sorted = numbers\n   .split(' ')\n   .sort((a, b) => {\n      let numA = a.replace(/\\d+/g, '')\n      let numB = b.replace(/\\d+/g, '')\n      return (numA > numB)? 1 : ((numA < numB)? -1 : 0)\n    })\n   .join(' ')\n  return sorted\n}\n\nmodule.exports = sortNumbers\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = sorted(numbers);\n  const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n  const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n  const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n  return [closestNumber, closestNumberInList];\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsWithFunction = (numbers) => {\n  const sortedNumbers = sorted(numbers, (a, b) => a - b);\n  const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n  const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n  const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n  return [closestNumber, closestNumberInList];\n}\n\n// test\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = sorted(numbers);\n//   const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n//   const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n//   const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n//   return [closestNumber, closestNumberInList];\n// }\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = sorted(numbers);\n//   const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n//   const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n//   const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n//   return [closestNumber, closestNumberInList];\n// }\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = sorted(numbers);\n//   const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n//   const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n//   const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n//   return [closestNumber, closestNumberInList];\n// }\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = sorted(numbers);\n//   const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n//   const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n//   const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n//   return [closestNumber, closestNumberInList];\n// }\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = sorted(numbers);\n//   const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n//   const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n//   const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n//   return [closestNumber, closestNumberInList];\n// }\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = sorted(numbers);\n//   const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n//   const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n//   const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n//   return [closestNumber, closestNumberInList];\n// }\n\n// const findClosestElements = (numbers) => {\n//   const sortedNumbers = sorted(numbers);\n//   const closestNumber = sortedNumbers[sortedNumbers.length - 1];\n//   const minDistance = sortedNumbers.reduce((prev, current) => Math.abs(closestNumber - current), 0);\n//   const closestNumberInList = sortedNumbers.find((current) => Math.abs(closestNumber - current) === minDistance);\n//   return [closestNumber, closestNumberInList];\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const newNumbers = [];\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.round((numbers[i] - min) / (max - min) * 2 - 1));\n  }\n  return newNumbers;\n};\n\nconst getNumberOfLememts = (numbers) => {\n  const numberOfLememts = 1;\n  const firstNumber = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]!== firstNumber) {\n      numberOfLememts++;\n    }\n  }\n  return numberOfLememts;\n};\n\nconst getLememtsToPrint = (numbers, maxLememts) => {\n  const numberOfLememts = getNumberOfLememts(numbers);\n  const lememtsToPrint = [];\n  for (let i = 0; i < numberOfLememts; i++) {\n    if (i === numberOfLememts - 1) {\n      lememtsToPrint.push(numbers[i]);\n    } else {\n      lememtsToPrint.push(numbers[i] + 1);\n    }\n  }\n  return lememtsToPrint;\n};\n\nconst printNumbers = (numbers, maxLememts) => {\n  const lememtsToPrint = getLememtsToPrint(numbers, maxLememts);\n  const result = [];\n  for (let i = 0; i < lememtsToPrint.length; i++) {\n    result.push(lememtsToPrint[i]);\n    if (i < lememtsToPrint.length - 1) {\n      result.push(\" \");\n    }\n  }\n  return result.join(\"\");\n};\n\nconst getMinMax = (numbers) => {\n  const max = Math.max(...numbers);\n  const min = Math.min(...numbers);\n  return [min, max];\n};\n\nconst printMinMax = (minMax) => {\n  const max = minMax[1];\n  const min = minMax[0];\n  return [min, max];\n};\n\nconst getMaxLememts = (numbers) => {\n  const maxLememts = getMaxMax(numbers);\n  return maxLememts[1];\n};\n\nconst getMinLememts = (numbers) => {\n  const minLememts = getMinMax(numbers);\n  return minLememts[0];\n};\n\nconst getLememts = (numbers, maxLememts, minLememts) => {\n  const numberOfLememts = getNumberOfLememts(numbers);\n  const lememts = [];\n  for (let i = 0; i < numberOfLememts; i++) {\n    lememts.push(numbers[i]);\n    if (i < numberOfLememts - 1) {\n      lememts.push(minLememts + i);\n    }\n  }\n  return lememts;\n};\n\nconst printLememts = (numbers, maxLememts, minLememts) => {\n  const lememts = getLememts(numbers, maxLememts, minLememts);\n  const result = [];\n  for (let i = 0; i < lememts.length; i++) {\n    result.push(lememts[i]);\n    if (i < lememts.length - 1) {\n      result.push(\" \");\n    }\n  }\n  return result.join(\"\");\n};\n\nconst printNumbers = (numbers, maxLememts, minLememts) => {\n  const lememts = getLememts(numbers, maxLememts, minLememts);\n  const result = [];\n  for (let i = 0; i < lememts.length; i++) {\n    result.push(lememts[i]);\n    if (i < lememts.length - 1) {\n      result.push(\" \");\n    }\n  }\n  return result.join(\"\");\n};\n\nconst printNumbersToMaxLememts = (numbers, maxLememts) => {\n  const lememts = getLememts(numbers, maxLememts);\n  const result = [];\n  for (let i = 0; i < lememts.length; i++) {\n    result.push(lememts[i]);\n    if (i < lememts.length - 1) {\n      result.push(\" \");\n    }\n  }\n  return result.join(\"\");\n};\n\nconst printNumbersToMinLememts = (numbers, minLememts) => {\n  const lememts = getLememts(numbers, minLememts);\n  const result = [];\n  for (let i = 0; i < lememts.length; i++) {\n    result.push(lememts[i]);\n    if (i < lememts.length - 1) {\n      result.push(\" \");\n    }\n  }\n  return result.join(\"\");\n};\n\nconst printNumbersToLememts = (numbers, maxLememts, minLememts) => {\n  const lememts = getLememts(numbers, maxLememts, minLememts);\n  const result = [];\n  for (let i = 0; i < lememts.length; i++) {\n    result.push(lememts[i]);\n    if (i < lememts.length - 1) {\n      result."}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((x) => {\n    return typeof x === 'number'\n  })\n}\n\nconst filterString = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string'\n  })\n}\n\nconst filterBools = (values) => {\n  return values.filter((x) => {\n    return typeof x === 'boolean'\n  })\n}\n\nconst filterNonStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x!=='string'\n  })\n}\n\nconst filterStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string'\n  })\n}\n\nconst filterNonInts = (values) => {\n  return values.filter((x) => {\n    return typeof x!== 'number'\n  })\n}\n\nconst filterNonStringsNonInts = (values) => {\n  return values.filter((x) => {\n    return typeof x!=='string' && typeof x!== 'number'\n  })\n}\n\nconst filterNonStringsInts = (values) => {\n  return values.filter((x) => {\n    return typeof x!=='string' && typeof x === 'number'\n  })\n}\n\nconst filterInts = (values) => {\n  return values.filter((x) => {\n    return typeof x === 'number'\n  })\n}\n\nconst filterFloat = (values) => {\n  return values.filter((x) => {\n    return typeof x === 'number' && typeof x.toFixed() ==='string'\n  })\n}\n\nconst filterStringsFloat = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string'\n  })\n}\n\nconst filterStringsFloatInts = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number'\n  })\n}\n\nconst filterFloatInts = (values) => {\n  return values.filter((x) => {\n    return typeof x === 'number' && typeof x.toFixed() ==='string'\n  })\n}\n\nconst filterStringsFloatInts = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number'\n  })\n}\n\nconst filterStringsFloatIntsStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string'\n  })\n}\n\nconst filterStringsFloatIntsStringsBools = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string' && typeof x === 'boolean'\n  })\n}\n\nconst filterStringsFloatIntsStringsBools = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string' && typeof x === 'boolean'\n  })\n}\n\nconst filterStringsFloatIntsStringsBoolsStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string' && typeof x === 'boolean' && typeof x ==='string'\n  })\n}\n\nconst filterStringsFloatIntsStringsBoolsStringsStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string' && typeof x === 'boolean' && typeof x ==='string'\n  })\n}\n\nconst filterStringsFloatIntsStringsBoolsStringsStringsStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string' && typeof x === 'boolean' && typeof x ==='string'\n  })\n}\n\nconst filterStringsFloatIntsStringsBoolsStringsStringsStringsStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string' && typeof x === 'boolean' && typeof x ==='string'\n  })\n}\n\nconst filterStringsFloatIntsStringsBoolsStringsStringsStringsStringsStrings = (values) => {\n  return values.filter((x) => {\n    return typeof x ==='string' && typeof x.toFixed() ==='string' && typeof x === 'number' && typeof x ==='string' && typeof x === 'boolean' && typeof x ==='string'\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  >>> strlen('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen2 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen2('abc')\n  3\n  >>> strlen2('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen2('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen3 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen3('abc')\n  3\n  >>> strlen3('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen3('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen4 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen4('abc')\n  3\n  >>> strlen4('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen4('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen5 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen5('abc')\n  3\n  >>> strlen5('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen5('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen6 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen6('abc')\n  3\n  >>> strlen6('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen6('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen7 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen7('abc')\n  3\n  >>> strlen7('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen7('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen8 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen8('abc')\n  3\n  >>> strlen8('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen8('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen9 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen9('abc')\n  3\n  >>> strlen9('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen9('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen10 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen10('abc')\n  3\n  >>> strlen10('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen10('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen11 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen11('abc')\n  3\n  >>> strlen11('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> strlen11('abcdefghijklmnopqrstuvwxyz0123456789')\n  52\n  */\nconst strlen12 = (string) => {\n  let length = 0;\n  for (let i = 0; i < string.length; i++) {\n    length = length + string.charCodeAt(i);\n  }\n  return length;\n};\n\n/*\n  >>> strlen12"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = largestDivisors(n);\n  return Math.max(...divisors);\n};\n\nconst largestDivisors = (n) => {\n  let divisors = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return divisors;\n};\n\nconsole.log(largestDivisor(15));\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let isPrime = (n) => n > 1 && (n % 1 === 0);\n  let numOfFactors = n;\n  while (numOfFactors > 1) {\n    let i = 1;\n    let j = n;\n    while (i < j) {\n      let iPrime = Math.pow(i, numOfFactors);\n      let jPrime = Math.pow(j, numOfFactors);\n      if (iPrime > jPrime) {\n        jPrime = iPrime;\n      }\n      while (isPrime(jPrime)) {\n        jPrime = jPrime * j;\n      }\n      j = jPrime;\n      i++;\n    }\n    factors.push(j);\n    numOfFactors = numOfFactors - 1;\n  }\n  return factors;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const arr = [];\n  let last = -1;\n  let i = 0;\n  while (i < numbers.length) {\n    if (last === numbers[i]) {\n      last = -1;\n    } else {\n      arr.push(numbers[i]);\n      last = i;\n    }\n    i++;\n  }\n  return arr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let a = string.toLowerCase();\n  return a.replace(/[A-Z]/g, a => a.toUpperCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase('hello')\n  'HELLO'\n  */\nconst flipCase2 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[a-z]/g, a => a.toLowerCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase2('hello')\n  'HELLO'\n  */\nconst flipCase3 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[a-z]/g, a => a.toUpperCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase3('hello')\n  'HELLO'\n  */\nconst flipCase4 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[A-Z]/g, a => a.toLowerCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase4('hello')\n  'HELLO'\n  */\nconst flipCase5 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[a-z]/g, a => a.toUpperCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase5('hello')\n  'HELLO'\n  */\nconst flipCase6 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[a-z]/g, a => a.toLowerCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase6('hello')\n  'HELLO'\n  */\nconst flipCase7 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[A-Z]/g, a => a.toUpperCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase7('hello')\n  'HELLO'\n  */\nconst flipCase8 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[A-Z]/g, a => a.toLowerCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase8('hello')\n  'HELLO'\n  */\nconst flipCase9 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[A-Z]/g, a => a.toUpperCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase9('hello')\n  'HELLO'\n  */\nconst flipCase10 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[a-z]/g, a => a.toLowerCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase10('hello')\n  'HELLO'\n  */\nconst flipCase11 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[a-z]/g, a => a.toUpperCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase11('hello')\n  'HELLO'\n  */\nconst flipCase12 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[A-Z]/g, a => a.toLowerCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase12('hello')\n  'HELLO'\n  */\nconst flipCase13 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[A-Z]/g, a => a.toUpperCase());\n};\n\n/*\n  For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO uppercase.\n  >>> flipCase13('hello')\n  'HELLO'\n  */\nconst flipCase14 = (string) => {\n  let a = string.toUpperCase();\n  return a.replace(/[A"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate('abc')\n  'abc'\n  */\nconst concatenate2 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate('abc', 'def')\n  'abcdef'\n  */\nconst concatenate3 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc')\n  'abc'\n  */\nconst concatenate4 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def')\n  'abcdef'\n  */\nconst concatenate5 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi')\n  'abcdefghi'\n  */\nconst concatenate6 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl')\n  'abcdefghijkl'\n  */\nconst concatenate7 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno')\n  'abcdefghijklmnom'\n  */\nconst concatenate8 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno', 'pqr')\n  'abcdefghijklmnopqr'\n  */\nconst concatenate9 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu')\n  'abcdefghijklmnopqrstu'\n  */\nconst concatenate10 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx')\n  'abcdefghijklmnopqrstuvwx'\n  */\nconst concatenate11 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz')\n  'abcdefghijklmnopqrstuvwxyz'\n  */\nconst concatenate12 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz', 'xyz')\n  'abcdefghijklmnopqrstuvwxyzxyz'\n  */\nconst concatenate13 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz', 'xyz', 'pqr')\n  'abcdefghijklmnopqrstuvwxyzxyzpqr'\n  */\nconst concatenate14 = (strings) => {\n  let result = '';\n  strings.forEach((item) => {\n    result += item;\n  });\n  return result;\n};\n\n/* ConCateNate a string sTring\n  >>> concatenate([], 'abc', 'def', 'ghi', 'jkl','mno', 'pqr','stu', 'vwx', 'yz', 'xyz', 'pqr','stu')\n  'abcdefghijklmnopqrstuvwxyzxyzpqrstu'\n  */\nconst concatenate15 = (strings) => {\n  let result = '';\n  strings.forEach(("}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/*\n  filterByPrefix aN inpuT list of strings Only fOr one"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] > 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getNegative takes a list and returns a list of the negative numbers.\nconst getNegative = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] < 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getEven takes a list and returns a list of the even numbers.\nconst getEven = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getOdd takes a list and returns a list of the odd numbers.\nconst getOdd = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 1) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getPositive takes a list and returns a list of the positive numbers.\nconst getPositiveEven = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 0 && a[i] > 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getNegativeEven takes a list and returns a list of the negative numbers.\nconst getNegativeEven = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 0 && a[i] < 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getPositiveOdd takes a list and returns a list of the positive numbers.\nconst getPositiveOdd = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 1 && a[i] > 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getNegativeOdd takes a list and returns a list of the negative numbers.\nconst getNegativeOdd = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 1 && a[i] < 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getEvenOdd takes a list and returns a list of the even and odd numbers.\nconst getEvenOdd = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n// getList takes a list and returns a list of all the numbers.\nconst getList = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    n.push(a[i])\n  }\n  return n\n}\n\n// getList takes a list and returns a list of all the numbers.\nconst getListNegative = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    n.push(a[i])\n  }\n  return n\n}\n\n//getPositive takes a list and returns a list of the positive numbers.\nconst getPositiveOddNegative = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 1 && a[i] < 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n//getNegative takes a list and returns a list of the negative numbers.\nconst getNegativeOddNegative = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 1 && a[i] > 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n//getPositiveOdd takes a list and returns a list of the positive numbers.\nconst getPositiveOddNegative = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 === 1 && a[i] > 0) {\n      n.push(a[i])\n    }\n  }\n  return n\n}\n\n//getNegative takes a list and returns a list of the negative numbers.\nconst getNegativeOddPositive = (l) => {\n  let a = [...l]\n  let i = a.length\n  let n = []\n  while(i--) {\n    if(a[i] % 2 ==="}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  >>> isPrime(2)\n  true\n  >>> isPrime(4)\n  true\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(11)\n  true\n  >>> isPrime(12)\n  false\n  >>> isPrime(13)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  false\n  >>> isPrime(19)\n  false\n  >>> isPrime(20)\n  false\n  >>> isPrime(21)\n  false\n  >>> isPrime(23)\n  false\n  >>> isPrime(24)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(26)\n  false\n  >>> isPrime(27)\n  false\n  >>> isPrime(28)\n  false\n  >>> isPrime(29)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(34)\n  false\n  >>> isPrime(35)\n  false\n  >>> isPrime(36)\n  false\n  >>> isPrime(37)\n  false\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  false\n  >>> isPrime(42)\n  false\n  >>> isPrime(43)\n  false\n  >>> isPrime(44)\n  false\n  >>> isPrime(45)\n  false\n  >>> isPrime(46)\n  false\n  >>> isPrime(47)\n  false\n  >>> isPrime(48)\n  false\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  false\n  >>> isPrime(51)\n  false\n  >>> isPrime(52)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  false\n  >>> isPrime(56)\n  false\n  >>> isPrime(57)\n  false\n  >>> isPrime(58)\n  false\n  >>> isPrime(59)\n  false\n  >>> isPrime(60)\n  false\n  >>> isPrime(61)\n  false\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  false\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  false\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  false\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  false\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  false\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  false\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  false\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = xs[i] + xs[j] * xs[k];\n        if (sum === 0) {\n          const max = xs[i];\n          const min = xs[i];\n          for (let l = i + 1; l < n; l++) {\n            if (xs[l] > max) {\n              max = xs[l];\n            }\n            if (xs[l] < min) {\n              min = xs[l];\n            }\n          }\n          return {\n            x: (min + max) / 2,\n            max: max,\n            min: min\n          }\n        }\n      }\n    }\n  }\n}\n\n/*\n  findZero(xs) anFoRT to a solUTiOn\n  >>> round(findZero([1, 2, 1]), 2) # f(x) = 1 + 2x + 1x^2\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) *"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const arr = l.slice()\n  const result = []\n  let count = 0\n  let index = 0\n  let i = 0\n  while (i < arr.length) {\n    const val = arr[i]\n    const newArr = []\n    if (count === 0) {\n      while (index < arr.length && val < arr[index]) {\n        newArr.push(arr[index])\n        index++\n      }\n      if (newArr.length > 0) {\n        result.push(newArr)\n      }\n      count++\n      i++\n    } else if (count === 1) {\n      while (index < arr.length && val < arr[index]) {\n        newArr.push(arr[index])\n        index++\n      }\n      if (newArr.length > 0) {\n        result.push(newArr)\n      }\n      count++\n      i++\n    } else if (count === 2) {\n      while (index < arr.length && val < arr[index]) {\n        newArr.push(arr[index])\n        index++\n      }\n      if (newArr.length > 0) {\n        result.push(newArr)\n      }\n      count++\n      i++\n    } else {\n      while (index < arr.length && val < arr[index]) {\n        newArr.push(arr[index])\n        index++\n      }\n      if (newArr.length > 0) {\n        result.push(newArr)\n      }\n      count++\n      i++\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const unique_list = []\n  for (let i = 0; i < l.length; i++) {\n    if (unique_list.indexOf(l[i]) === -1) {\n      unique_list.push(l[i])\n    }\n  }\n  return unique_list\n}\n\n/*\n  >>> let x = [3, 3, 3, 3, 3, 3]\n  >>> unique(x)\n  [3, 3, 3, 3, 3, 3]\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  >>> unique([3, 3, 3, 3, 3, 3, 3, 3])\n  [3, 3, 3, 3, 3, 3, 3]\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  >>> unique([3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n  [3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> unique([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> unique([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3])\n  [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n  >>> unique([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n// __________________________________________\n// Test Suites:\n\n// Basic tests\nconst tests = [\n  [[[], [1], [2]], 0],\n  [[[1, 2], [2, 3], [3, 4]], 3],\n  [[[1, 2, 3], [2, 3, 4], [3, 4, 5]], 5],\n  [[[2, 4], [3, 6], [5, 8]], 4],\n  [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]], 6],\n  [[[2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8]], 8],\n  [[[1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]], 8],\n  [[[1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9]], 9],\n];\ntests.forEach(t => {\n  console.log(`Test Suite: ${t}`);\n  console.log(`The max element is ${maxElement(t[0])}`);\n});\n\n// Complex tests\nconst tests2 = [\n  [[[2, 3, 4], [1, 2, 3], [2, 3, 4]], 3],\n  [[[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]], 5],\n  [[[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]], 7],\n  [[[1, 2, 3, 4, 5, 6], [2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8]], 8],\n  [[[1, 2, 3, 4, 5, 6, 7], [2, 3, 4, 5, 6, 7, 8], [3, 4, 5, 6, 7, 8, 9]], 9],\n  [[[1, 2, 3, 4, 5, 6, 7, 8], [2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9, 10]], 10],\n];\ntests2.forEach(t => {\n  console.log(`Test Suite: ${t}`);\n  console.log(`The max element is ${maxElement(t[0])}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i = 1;\n  let div = 2;\n  let result = 0;\n  while (i <= n) {\n    if (i % div === 0) {\n      result += \"fizz\";\n    } else if (i % div === 1) {\n      result += \"buzz\";\n    } else {\n      result += i.toString();\n    }\n    i++;\n  }\n  return result;\n};\n\nexport default fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const result = []\n  let p = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      result.push(l[i])\n    } else if (l[i] > p) {\n      result.push(l[i])\n      p = l[i]\n    }\n  }\n  return result\n}\n\n/*\n  This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the odd indicIes are equal\n  tO the vAlUEs Of THe odd IndicIes of l, buT SoRTEd.\n  >>> sortOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sortOdd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  const result = []\n  let p = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 1) {\n      result.push(l[i])\n    } else if (l[i] > p) {\n      result.push(l[i])\n      p = l[i]\n    }\n  }\n  return result\n}\n\n/*\n  This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALUES ARE NOT equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  []\n  >>> sortEven([5, 6, 3, 4])\n  []\n  */\nconst sortNotEqual = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] % 2 === 0) {\n      result.push(l[i])\n    }\n  }\n  return result\n}\n\nexport { sortEven, sortOdd, sortNotEqual }\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  let oF = '';\n  foR (let i = 0; i < s.length; i++) {\n    oF += s[i];\n  }\n  return oF;\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FUNCTION. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  let oF = '';\n  foR (let i = 0; i < s.length; i++) {\n    oF += s[i];\n  }\n  return oF;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  return fib(n-1) + fib(n-2);\n}\n\nexport { primeFib }\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i += 1) {\n    sum += l[i];\n    if (sum < 0) {\n      return false;\n    }\n  }\n  return sum === 0;\n};\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i += 1) {\n    sum += l[i];\n    if (sum > 1) {\n      return false;\n    }\n  }\n  return sum === 1;\n};\n\n/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n  let sum = 0;\n  for (let i = 0; i < l.length - 1; i += 1) {\n    sum += l[i];\n    if (sum > 2) {\n      return false;\n    }\n  }\n  return sum === 2;\n};\n\nexport default {\n  triplesSumToZero,\n  triplesSumToOne,\n  triplesSumToTwo\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  let car1 = carRace[0];\n  let car2 = carRace[1];\n  let car3 = carRace[2];\n  let car4 = carRace[3];\n  let car5 = carRace[4];\n\n  //car1.carS.carS.collision();\n  //car2.carS.carS.collision();\n  //car3.carS.carS.collision();\n  //car4.carS.carS.collision();\n  //car5.carS.carS.collision();\n\n  car1.carS.collision();\n  car2.carS.collision();\n  car3.carS.collision();\n  car4.carS.collision();\n  car5.carS.collision();\n\n  carRace[0].carS.carS.collision();\n  carRace[1].carS.carS.collision();\n  carRace[2].carS.carS.collision();\n  carRace[3].carS.carS.collision();\n  carRace[4].carS.carS.collision();\n  return carRace;\n}\n\ncOnst carRace = (cars) => {\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach(car => car.carS.collision());\n  cars.forEach(car => car.carS.move());\n  cars.forEach("}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let result = [...l];\n  return result.concat(l.slice(1));\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n    let res = true;\n    for(let i = 0; i < l.length; i++){\n        let sum = l[i] + l[i + 1];\n        if(sum === 0){\n            res = false;\n        }\n    }\n    return res;\n}\n\n/*\n  sumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  false\n  >>> sumToZero([1, 2, 3, 7])\n  false\n  >>> sumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n    let res = true;\n    let sum = 0;\n    for(let i = 0; i < l.length; i++){\n        sum += l[i];\n        if(sum === 0){\n            res = false;\n        }\n    }\n    return res;\n}\n\n/*\n  sumOfAllPairs takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> sumOfAllPairs([1, 3, 5, 0])\n  false\n  >>> sumOfAllPairs([1, 3, -2, 1])\n  false\n  >>> sumOfAllPairs([1, 2, 3, 7])\n  false\n  >>> sumOfAllPairs([2, 4, -5, 3, 5, 7])\n  true\n  >>> sumOfAllPairs([1])\n  false\n  */\nconst sumOfAllPairs = (l) => {\n    let res = true;\n    let sum = 0;\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            sum += l[i] + l[j];\n            if(sum === 0){\n                res = false;\n            }\n        }\n    }\n    return res;\n}\n\n/*\n  sumOfPairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> sumOfPairsSumToZero([1, 3, 5, 0])\n  false\n  >>> sumOfPairsSumToZero([1, 3, -2, 1])\n  false\n  >>> sumOfPairsSumToZero([1, 2, 3, 7])\n  false\n  >>> sumOfPairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> sumOfPairsSumToZero([1])\n  false\n  */\nconst sumOfPairsSumToZero = (l) => {\n    let res = true;\n    let sum = 0;\n    for(let i = 0; i < l.length; i++){\n        for(let j = i + 1; j < l.length; j++){\n            sum += l[i] + l[j];\n            if(sum === 0){\n                res = false;\n            }\n        }\n    }\n    return res;\n}\n\nmodule.exports = {\n    pairsSumToZero,\n    sumToZero,\n    sumOfAllPairs,\n    sumOfPairsSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 0) {\n    return 0\n  }\n  let str = '' + x\n  let p = 0\n  let m = x\n  while (m!== 0) {\n    str = str.substr(Math.floor(p / base), base)\n    m = m % base\n    p = m\n  }\n  return str\n}\n\nconst reverseStr = (s) => {\n  let ret = ''\n  s.split('').reverse().forEach((c) => {\n    ret += c\n  })\n  return ret\n}\n\nconst reverseStrArray = (arr) => {\n  let ret = []\n  arr.forEach((s) => {\n    ret.unshift(reverseStr(s))\n  })\n  return ret\n}\n\nconst multiply = (a, b) => {\n  let ret = 0\n  for (let i = 0; i < b; i++) {\n    ret += a\n  }\n  return ret\n}\n\nconst multiplyStr = (s) => {\n  let ret = ''\n  for (let i = 0; i < s.length; i++) {\n    ret += s[i]\n  }\n  return ret\n}\n\nconst numStr = (x) => {\n  let str = '' + x\n  let p = 0\n  let m = x\n  while (m!== 0) {\n    str = str.substr(Math.floor(p / 10), 10)\n    m = m % 10\n    p = m\n  }\n  return str\n}\n\nconst reverseInt = (x) => {\n  let str = '' + x\n  let p = 0\n  let m = x\n  while (m!== 0) {\n    str = str.substr(Math.floor(p / 10), 10)\n    m = m % 10\n    p = m\n  }\n  return parseInt(reverseStr(str), 10)\n}\n\nconst reverseIntArray = (arr) => {\n  let ret = []\n  for (let i = 0; i < arr.length; i++) {\n    ret.unshift(reverseInt(arr[i]))\n  }\n  return ret\n}\n\nconst reverse = (x) => {\n  return reverseStr(reverseStrArray(x))\n}\n\nconst reverseArray = (arr) => {\n  let ret = []\n  for (let i = 0; i < arr.length; i++) {\n    ret.unshift(reverse(arr[i]))\n  }\n  return ret\n}\n\nconst add = (a, b) => {\n  let ret = 0\n  for (let i = 0; i < a.length; i++) {\n    ret += a[i]\n  }\n  for (let i = 0; i < b.length; i++) {\n    ret += b[i]\n  }\n  return ret\n}\n\nconst addStr = (s) => {\n  let ret = ''\n  for (let i = 0; i < s.length; i++) {\n    ret += s[i]\n  }\n  return ret\n}\n\nconst sub = (a, b) => {\n  let ret = 0\n  for (let i = 0; i < a.length; i++) {\n    ret -= a[i]\n  }\n  for (let i = 0; i < b.length; i++) {\n    ret -= b[i]\n  }\n  return ret\n}\n\nconst subStr = (s) => {\n  let ret = ''\n  for (let i = 0; i < s.length; i++) {\n    ret += s[i]\n  }\n  return ret\n}\n\nconst mul = (a, b) => {\n  let ret = 1\n  for (let i = 0; i < a.length; i++) {\n    ret *= a[i]\n  }\n  for (let i = 0; i < b.length; i++) {\n    ret *= b[i]\n  }\n  return ret\n}\n\nconst mulStr = (s) => {\n  let ret = ''\n  for (let i = 0; i < s.length; i++) {\n    ret += s[i]\n  }\n  return ret\n}\n\nconst div = (a, b) => {\n  let ret = 1\n  for (let i = 0; i < a.length; i++) {\n    ret *= a[i]\n  }\n  for (let i = 0; i < b.length; i++) {\n    ret /= b[i]\n  }\n  return ret\n}\n\nconst divStr = (s) => {\n  let ret = ''\n  for (let i = 0; i < s.length; i++) {\n    ret += s[i]\n  }\n  return ret\n}\n\nconst mod = (a, b) => {\n  let ret = 0\n  for (let i = 0; i < a.length; i++) {\n    ret += a[i]\n  }\n  for (let i = 0; i < b.length; i++) {\n    ret %= b[i]\n  }\n  return ret\n}\n\nconst modStr = (s) => {\n  let ret = ''\n  for (let i = 0; i < s.length; i++) {\n    ret += s[i]\n  }\n  return ret\n}\n\nconst main = () => {\n  let a = [1, 2, 3]\n  let b = [4, 5, 6]\n  let c = a.concat(b)\n\n  let ret = 0\n  ret += mul(a, b)\n  ret += mul(c, b)\n  ret += mul(a, c)\n  ret += mul(b, c)\n  ret += mul(c, a)\n\n  ret += mulStr(a)\n  ret += mulStr(b)\n  ret += mulStr(c)\n\n  ret += sub(a, b)\n  ret += sub(c, b)\n  ret += sub("}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;\n};\n\n/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  let sideA = a * h / 2;\n  return sideA;"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\n/*\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 1\n  fib5(3) -> 1\n  fib5(4) -> 2\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib5 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  9\n  >>> fib5(7)\n  15\n  >>> fib5(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n <= 2) {\n    return n;\n  }\n\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n}\n\n/*\n  fib6(0) -> 0\n  fib6(1) -> 0\n  fib6(2) -> 1\n  fib6(3) -> 1\n  fib6(4) -> 2\n  fib6(5) -> 2\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib6 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  10\n  >>> fib6(7)\n  16\n  >>> fib6(8)\n  22\n  >>> fib6(9)\n  28\n  */\nconst fib6 = (n) => {\n  if (n <= 3) {\n    return n;\n  }\n\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n}\n\nconst fib = fib4;\n\nconst fibo = (n) => {\n  if (n <= 2) {\n    return 1;\n  }\n\n  return fibo(n - 1) + fibo(n - 2);\n}\n\nconst fibo2 = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n\n  return fibo2(n - 1) + fibo2(n - 2);\n}\n\nconst fibo3 = (n) => {\n  if (n <= 2) {\n    return 2;\n  }\n\n  return fibo3(n - 1) + fibo3(n - 2);\n}\n\nconst fibo4 = (n) => {\n  if (n <= 3) {\n    return 3;\n  }\n\n  return fibo4(n - 1) + fibo4(n - 2);\n}\n\nconst fibo5 = (n) => {\n  if (n <= 4) {\n    return 4;\n  }\n\n  return fibo5(n - 1) + fibo5(n - 2);\n}\n\nconst fibo6 = (n) => {\n  if (n <= 5) {\n    return 5;\n  }\n\n  return fibo6(n - 1) + fibo6(n - 2);\n}\n\nconst fibo7 = (n) => {\n  if (n <= 6) {\n    return 6;\n  }\n\n  return fibo7(n - 1) + fibo7(n - 2);\n}\n\nconst fibo8 = (n) => {\n  if (n <= 7) {\n    return 7;\n  }\n\n  return fibo8(n - 1) + fibo8(n - 2);\n}\n\nconst fibo9 = (n) => {\n  if (n <= 8) {\n    return 8;\n  }\n\n  return fibo9(n - 1) + fibo9(n - 2);\n}\n\nconst fibo10 = (n) => {\n  if (n <= 9) {\n    return 9;\n  }\n\n  return fibo10(n - 1) + fibo10(n - 2);\n}\n\nconst fibo11 = (n) => {\n  if (n <= 10) {\n    return 10;\n  }\n\n  return fibo11(n - 1) + fibo11(n - 2);\n}\n\nconst fibo12 = (n) => {\n  if (n <= 11) {\n    return 11;\n  }\n\n  return fibo12(n - 1) + fibo12(n - 2);\n}\n\nconst fibo13 = (n) => {\n  if (n <= 12) {\n    return 12;\n  }\n\n  return fibo13(n - 1) + fibo13(n - 2"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let mid = l.length / 2;\n  let min = l[0];\n  let max = l[l.length - 1];\n  let p;\n  for (let i = 0; i < l.length; i++) {\n    if (i < mid) {\n      if (l[i] < min) min = l[i];\n      if (l[i] > max) max = l[i];\n    } else {\n      if (l[i] < max) max = l[i];\n      if (l[i] > min) min = l[i];\n    }\n  }\n  p = Math.floor((max - min) / 2 + min);\n  return p;\n};\n\nexport default median;<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let i, j;\n    for(i = 0, j = text.length - 1; i < j; i++, j--){\n        if(text[i]!== text[j]){\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Find longest common prefix in a string\n  >>> findLongestCommonPrefix('test', 'test')\n  'test'\n  >>> findLongestCommonPrefix('test', 't')\n  't'\n  >>> findLongestCommonPrefix('test', 'te')\n  't'\n  >>> findLongestCommonPrefix('test', 'tse')\n  ''\n  */\nconst findLongestCommonPrefix = (str1, str2) => {\n    const maxLen = str1.length < str2.length? str1.length : str2.length;\n    let i;\n    for(i = 0; i < maxLen; i++){\n        if(str1[i]!== str2[i]){\n            break;\n        }\n    }\n    return str1.substring(0, i);\n};\n\n/*\n  Find longest common suffix in a string\n  >>> findLongestCommonSuffix('test', 'test')\n  'test'\n  >>> findLongestCommonSuffix('test', 't')\n  't'\n  >>> findLongestCommonSuffix('test', 'te')\n  'te'\n  >>> findLongestCommonSuffix('test', 'tse')\n  ''\n  */\nconst findLongestCommonSuffix = (str1, str2) => {\n    const maxLen = str1.length < str2.length? str1.length : str2.length;\n    let i;\n    for(i = maxLen - 1; i >= 0; i--){\n        if(str1[i]!== str2[i]){\n            break;\n        }\n    }\n    return str1.substring(i + 1, str1.length);\n};\n\n/*\n  Check if a string is a permutation of another\n  >>> checkIfPermutation('aab', 'aab')\n  true\n  >>> checkIfPermutation('aab', 'aba')\n  false\n  >>> checkIfPermutation('ab', 'aa')\n  true\n  */\nconst checkIfPermutation = (str1, str2) => {\n    let i, j, n1, n2, perm;\n    perm = '';\n    for(i = 0, n1 = str1.length; i < n1; i++){\n        perm += str1[i];\n    }\n    for(j = 0, n2 = str2.length; j < n2; j++){\n        if(perm === str2[j]){\n            return true;\n        }\n    }\n    return false;\n};\n\n/*\n  Check if a string is a palindrome\n  >>> checkIfPalindrome('aba')\n  true\n  >>> checkIfPalindrome('ab')\n  false\n  */\nconst checkIfPalindrome = (str) => {\n    let i;\n    for(i = 0; i < str.length / 2; i++){\n        if(str[i]!== str[str.length - 1 - i]){\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Find the longest palindrome in a string\n  >>> findLongestPalindrome('abacdefg')\n  'defg'\n  >>> findLongestPalindrome('abbcdefg')\n  'efg'\n  >>> findLongestPalindrome('abd')\n  'abd'\n  */\nconst findLongestPalindrome = (str) => {\n    let maxLen = 1;\n    let i, j, currStr = str;\n    for(i = 0, j = str.length - 1; i < j; i++, j--){\n        if(str[i]!== str[j]){\n            break;\n        }\n        currStr = str.substring(i, j + 1);\n        maxLen = maxLen > currStr.length? maxLen : currStr.length;\n    }\n    return str.substring(i, i + maxLen);\n};\n\n/*\n  Find the number of repeating characters in a string\n  >>> findRepeatingCharacters('abacdefg')\n  2\n  >>> findRepeatingCharacters('abacdef')\n  1\n  >>> findRepeatingCharacters('abac')\n  3\n  */\nconst findRepeatingCharacters = (str) => {\n    let i, j, currStr = str;\n    let repeatLen = 0;\n    for(i = 0, j = str.length - 1; i < j; i++, j--){\n        if(currStr[i] === currStr[j]){\n            repeatLen++;\n        }\n    }\n    return repeatLen;\n};\n\n/*\n  Check if a string has all unique characters\n  >>> checkIfUnique('abcdefg')\n  true\n  >>> checkIfUnique('abcc')\n  false\n  */\nconst checkIfUnique = (str) => {\n    let i;\n    for(i = 0; i < str.length - 1; i++){\n        if(str[i] === str[i + 1]){\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Count the number of 'a' characters in a string\n  >>> countA('abcdefg')\n  1\n  >>> countA('abcc')\n  0\n  >>> countA('a')\n  2\n  */\nconst countA = (str) => {\n    let i;\n    let count = 0;\n    for(i = 0; i < str.length; i++){\n        if(str[i] === 'a'){\n            count++;\n        }\n    }\n    return count;\n};\n\n/*\n  Check if a string contains all numbers\n  >>> checkIfAllNums('abc')\n  true\n  >>> checkIfAllNums('ab"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let x = n % p;\n  if (x < 0) x += p;\n  return x;\n};\n\n// Exercicio 3\n/*\n  >>> a = modp(2, 3)\n  >>> a\n  2\n  >>> modp(2, 3)\n  2\n  >>> modp(2, 5)\n  2\n  >>> modp(5, 3)\n  2\n  >>> modp(4, 3)\n  0\n  >>> modp(4, 5)\n  0\n  >>> modp(8, 3)\n  0\n  >>> modp(8, 5)\n  4\n  >>> modp(11, 3)\n  3\n  >>> modp(11, 5)\n  3\n  >>> modp(20, 3)\n  2\n  >>> modp(20, 5)\n  10\n  >>> modp(4, 11)\n  4\n  >>> modp(4, 13)\n  8\n  >>> modp(8, 11)\n  4\n  >>> modp(8, 13)\n  8\n  >>> modp(11, 13)\n  8\n  >>> modp(13, 11)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)\n  8\n  >>> modp(13, 13)"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift2 = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift3 = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift4 = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift5 = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift6 = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift7 = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift8 = (s) => {\n  let s2 = \"\";\n  for (let i = 0; i < s.length; i++) {\n    let n = parseInt(s.charAt(i), 36);\n    s2 += String.fromCharCode((n - 5) % 26 + \"a\".charCodeAt(0));\n  }\n  return s2;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/[aeiouyAEIOUY]/g, '');\n};\n\n/*\n  removeDiacritics is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT diacritics.\n  >>> removeDiacritics('')\n  ''\n  >>> removeDiacritics('abcdef\\nghijklm')\n  'bcdf\\nghjklm'\n  >>> removeDiacritics('abcdef')\n  'bcdf'\n  >>> removeDiacritics('aaaaa')\n  ''\n  >>> removeDiacritics('aaBAA')\n  'B'\n  >>> removeDiacritics('zbcd')\n  'zbcd'\n  */\nconst removeDiacritics = (text) => {\n  text = text.toLowerCase();\n  const diacritics = [\n    {'base':'a', 'letters':/[\\u0041\\u24D0\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F]/g},\n    {'base':'b', 'letters':/[\\u0042\\u24D1\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0182\\u0181]/g},\n    {'base':'c', 'letters':/[\\u0043\\u24D2\\uFF23\\u0106\\u0108\\u010A\\u010C\\u00C7\\u1E08\\u0187\\u023B\\uA73F\\u2184]/g},\n    {'base':'d', 'letters':/[\\u0044\\u24D3\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018B\\u018A\\u0189\\uA779]/g},\n    {'base':'e', 'letters':/[\\u0045\\u24D4\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E]/g},\n    {'base':'f', 'letters':/[\\u0046\\u24D5\\uFF26\\u1E1E\\u0191\\uA77B]/g},\n    {'base':'g', 'letters':/[\\u0047\\u24D6\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E]/g},\n    {'base':'h', 'letters':/[\\u0048\\u24D7\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D]/g},\n    {'base':'i', 'letters':/[\\u0049\\u24D8\\uFF29\\u00CC\\u00CD\\u00CE\\u0128\\u012A\\u012C\\u0130\\u00CF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197]/g},\n    {'base':'j', 'letters':/[\\u004A\\u24D9\\uFF2A\\u0134\\u0248]/g},\n    {'base':'k', 'letters':/[\\u004B\\u24DA\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2]/g},\n    {'base':'l', 'letters':/[\\u004C\\u24DB\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780]/g},\n    {'base':'m', 'letters':/[\\u004D\\u24DC\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C]/g},\n    {'base':'n', 'letters':/[\\"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.some(x => x < t)\n}\n\nexport default belowThreshold\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\n/*Add two numbers\n  >>> add3(5, 7)\n  12\n  */\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x, y) => {\n  return x + y;\n};\n\nconst add61 = (x, y) => {\n  return x + y;\n};\n\nconst add62 = (x, y) => {\n  return x + y;\n};\n\nconst add63 = (x, y) => {\n  return x + y;\n};\n\nconst add64 = (x, y) => {\n  return x + y;\n};\n\nconst add65 = (x, y) => {\n  return x + y;\n};\n\nconst add66 = (x, y) => {\n  return x + y;\n};\n\nconst add67 = (x"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  return s0.split('').every((c, i) => s1.includes(c));\n};\n\nconst isValid = (s) => {\n  return sameChars(s, s.toUpperCase());\n};\n\n/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst isValid = (s) => {\n  return sameChars(s, s.toUpperCase());\n};\n\n/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst isValid = (s) => {\n  return sameChars(s, s.toUpperCase());\n};\n\nmodule.exports = {\n  isValid,\n  isSame,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n === 1 || n === 2) return 1\n    else return fib(n-1) + fib(n-2)\n}\n\n/*\n  Calculate the sum of all the even numbers less than or equal to a given number.\n  >>> sumEven(10)\n  26\n  >>> sumEven(5)\n  10\n  >>> sumEven(1)\n  0\n  >>> sumEven(1000000)\n  499999\n  >>> sumEven(0)\n  0\n  >>> sumEven(2)\n  2\n  */\nconst sumEven = (n) => {\n    let sum = 0\n    while (n > 0) {\n        if (n % 2 === 0) sum += n\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  Calculate the sum of all the numbers that can be written as the sum of a square and a cube.\n  >>> sumSquareCube(10)\n  16\n  >>> sumSquareCube(5)\n  10\n  >>> sumSquareCube(1)\n  1\n  >>> sumSquareCube(1000000)\n  912984\n  >>> sumSquareCube(0)\n  0\n  >>> sumSquareCube(2)\n  2\n  */\nconst sumSquareCube = (n) => {\n    let sum = 0\n    while (n > 0) {\n        let sumSquare = n * n\n        if (sumSquare % 3 === 0) sum += sumSquare\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  Calculate the sum of all the numbers that can be written as the sum of a perfect square and a perfect cube.\n  >>> sumPerfectSquare(10)\n  8\n  >>> sumPerfectSquare(5)\n  5\n  >>> sumPerfectSquare(1)\n  1\n  >>> sumPerfectSquare(1000000)\n  980198\n  >>> sumPerfectSquare(0)\n  0\n  >>> sumPerfectSquare(2)\n  2\n  */\nconst sumPerfectSquare = (n) => {\n    let sum = 0\n    while (n > 0) {\n        let sumPerfectSquare = n * n\n        if (sumPerfectSquare % 3 === 0) sum += sumPerfectSquare\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  Calculate the sum of all the numbers that can be written as the sum of a perfect square and a perfect cube.\n  >>> sumPerfectSquareCube(10)\n  8\n  >>> sumPerfectSquareCube(5)\n  5\n  >>> sumPerfectSquareCube(1)\n  1\n  >>> sumPerfectSquareCube(1000000)\n  980198\n  >>> sumPerfectSquareCube(0)\n  0\n  >>> sumPerfectSquareCube(2)\n  2\n  */\nconst sumPerfectSquareCube = (n) => {\n    let sum = 0\n    while (n > 0) {\n        let sumPerfectSquareCube = n * n * n\n        if (sumPerfectSquareCube % 3 === 0) sum += sumPerfectSquareCube\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  Calculate the sum of all the odd numbers less than or equal to a given number.\n  >>> sumOdd(10)\n  9\n  >>> sumOdd(5)\n  5\n  >>> sumOdd(1)\n  1\n  >>> sumOdd(1000000)\n  9900001\n  >>> sumOdd(0)\n  0\n  >>> sumOdd(2)\n  3\n  */\nconst sumOdd = (n) => {\n    let sum = 0\n    while (n > 0) {\n        if (n % 2!== 0) sum += n\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  Calculate the sum of all the numbers that can be written as the sum of a perfect square and a perfect cube.\n  >>> sumPerfectSquareCube(10)\n  8\n  >>> sumPerfectSquareCube(5)\n  5\n  >>> sumPerfectSquareCube(1)\n  1\n  >>> sumPerfectSquareCube(1000000)\n  980198\n  >>> sumPerfectSquareCube(0)\n  0\n  >>> sumPerfectSquareCube(2)\n  2\n  */\nconst sumPerfectSquareCube = (n) => {\n    let sum = 0\n    while (n > 0) {\n        let sumPerfectSquareCube = n * n * n\n        if (sumPerfectSquareCube % 3!== 0) sum += sumPerfectSquareCube\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  Calculate the sum of all the odd numbers less than or equal to a given number.\n  >>> sumOdd(10)\n  9\n  >>> sumOdd(5)\n  5\n  >>> sumOdd(1)\n  1\n  >>> sumOdd(1000000)\n  9900001\n  >>> sumOdd(0)\n  0\n  >>> sumOdd(2)\n  3\n  */\nconst sumOdd = (n) => {\n    let sum = 0\n    while (n > 0) {\n        if (n % 2!== 0) sum += n\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  >>> sumOdd(10)\n  9\n  >>> sumOdd(5)\n  5\n  >>> sumOdd(1)\n  1\n  >>> sumOdd(1000000)\n  9900001\n  >>> sumOdd(0)\n  0\n  >>> sumOdd(2)\n  3\n  */\nconst sumOdd = (n) => {\n    let sum = 0\n    while (n > 0) {\n        if (n % 2!== 0) sum += n\n        n -= 1\n    }\n    return sum\n}\n\n/*\n  Calculate the sum of all the numbers that can be written as the sum of a perfect square and a perfect cube.\n  >>> sumPerfectSquareCube(10)\n  8\n  >>> sumPerfectSquareCube(5)\n  5\n  >>> sumPerfectSquareCube(1)\n  1\n  >>> sumPerfectSquareCube(1000000)\n  980198\n  >>> sumPerfectSquareCube(0)\n  0\n  >>> sumPerfectSquareCube(2)\n  2\n  */\nconst sumPerfectSquareCube = (n) => {\n    let"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let open = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      if (open === 0) {\n        return false\n      } else {\n        open--\n      }\n    } else if (brackets[i] === \">\") {\n      if (open === 1) {\n        return false\n      } else {\n        open++\n      }\n    }\n  }\n\n  return true\n}\n\n/*\n  Given a string, return a string that is the string with every char after\n  every closing bracket removed.\n\n  >>> removeAllAfterClosingBracket(\"<<><>>\")\n  '<<><'\n  >>> removeAllAfterClosingBracket(\"<<><><>\")\n  '<<><'\n  >>> removeAllAfterClosingBracket(\"<<><>\")\n  '<<><'\n  >>> removeAllAfterClosingBracket(\"<<><>\")\n  '<<><'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<><>\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<><\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<>\")\n  '<>'\n  >>> removeAllAfterClosingBracket(\"<\")\n  '<'\n  >>> removeAllAfterClosingBracket(\"\")\n  ''\n  >>> removeAllAfterClosingBracket(\"<>\")\n  '<>'\n  >>> removeAllAfterClosingBracket(\"<>\")\n  '<>'\n  >>> removeAllAfterClosingBracket(\"<>\")\n  '<>'\n  >>> removeAllAfterClosingBracket(\"<><\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<><>\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<><>\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<><>\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<><>\")\n  '<><'\n  >>> removeAllAfterClosingBracket(\"<><><\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<><><>\")\n  '<><>'\n  >>> removeAllAfterClosingBracket(\"<"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const isMonotonic = (l) => {\n    const x = l[0];\n    const y = l[l.length - 1];\n    const i = sorted.indexOf(x);\n    const j = sorted.indexOf(y);\n    const x_isBefore_y = i < j;\n    return x_isBefore_y;\n  };\n  return isMonotonic(l);\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const map = new Map();\n  const intersection = (l1, l2) => {\n    const set1 = l1.reduce((acc, x, i) => {\n      acc.add(x);\n      return acc;\n    }, new Set());\n    const set2 = l2.reduce((acc, x, i) => {\n      acc.add(x);\n      return acc;\n    }, new Set());\n    const intersection = new Set(set1.intersection(set2));\n    return intersection.size > 0? intersection : null;\n  };\n  const union = (l1, l2) => {\n    const set1 = l1.reduce((acc, x, i) => {\n      acc.add(x);\n      return acc;\n    }, new Set());\n    const set2 = l2.reduce((acc, x, i) => {\n      acc.add(x);\n      return acc;\n    }, new Set());\n    return set1.union(set2);\n  };\n  const l1Sorted = l1.sort();\n  const l2Sorted = l2.sort();\n  const intersectionSorted = intersection(l1Sorted, l2Sorted);\n  const unionSorted = union(l1Sorted, l2Sorted);\n  return intersectionSorted.length === unionSorted.length? intersectionSorted : null;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const isPrime = (n) => {\n    let p = 2, pDiv = 1, count = 0;\n    while (p < n) {\n      if (n % p === 0) {\n        pDiv = p;\n        count += 1;\n      }\n      p += 1;\n    }\n    return count === 2;\n  };\n  for (let i = 2; i < n; i += 1) {\n    if (isPrime(n) === false) {\n      return i;\n    }\n  }\n  return n;\n};\n\n/*\n  Let tE sEtS thE primE oF n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  >>> largestPrimeFactor(2)\n  1\n  >>> largestPrimeFactor(10)\n  2\n  */\n\nconst largestPrimeFactor = (n) => {\n  const isPrime = (n) => {\n    let p = 2, pDiv = 1, count = 0;\n    while (p < n) {\n      if (n % p === 0) {\n        pDiv = p;\n        count += 1;\n      }\n      p += 1;\n    }\n    return count === 2;\n  };\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 17) {\n    return 17;\n  }\n  if (n === 19) {\n    return 19;\n  }\n  if (n === 23) {\n    return 23;\n  }\n  if (n === 29) {\n    return 29;\n  }\n  if (n === 31) {\n    return 31;\n  }\n  if (n === 37) {\n    return 37;\n  }\n  if (n === 41) {\n    return 41;\n  }\n  if (n === 43) {\n    return 43;\n  }\n  if (n === 47) {\n    return 47;\n  }\n  if (n === 59) {\n    return 59;\n  }\n  if (n === 61) {\n    return 61;\n  }\n  if (n === 67) {\n    return 67;\n  }\n  if (n === 71) {\n    return 71;\n  }\n  if (n === 73) {\n    return 73;\n  }\n  if (n === 79) {\n    return 79;\n  }\n  if (n === 83) {\n    return 83;\n  }\n  if (n === 89) {\n    return 89;\n  }\n  if (n === 97) {\n    return 97;\n  }\n  if (n === 101) {\n    return 101;\n  }\n  if (n === 103) {\n    return 103;\n  }\n  if (n === 107) {\n    return 107;\n  }\n  if (n === 109) {\n    return 109;\n  }\n  if (n === 113) {\n    return 113;\n  }\n  if (n === 127) {\n    return 127;\n  }\n  if (n === 131) {\n    return 131;\n  }\n  if (n === 137) {\n    return 137;\n  }\n  if (n === 139) {\n    return 139;\n  }\n  if (n === 149) {\n    return 149;\n  }\n  if (n === 151) {\n    return 151;\n  }\n  if (n === 157) {\n    return 157;\n  }\n  if (n === 163) {\n    return 163;\n  }\n  if (n === 167) {\n    return 167;\n  }\n  if (n === 173) {\n    return 173;\n  }\n  if (n === 179) {\n    return 179;\n  }\n  if (n === 181) {\n    return 181;\n  }\n  if (n === 191) {\n    return 191;\n  }\n  if (n === 193) {\n    return 193;\n  }\n  if (n === 197) {\n    return 197;\n  }\n  if (n === 199) {\n    return 199;\n  }\n  if (n === 211) {\n    return 211;\n  }\n  if (n === 227) {\n    return 227;\n  }\n  if (n === 229) {\n    return 229;\n  }\n  if (n === 233) {\n    return 233;\n  }\n  if (n === 239) {\n    return 239;\n  }\n  if (n === 241) {\n    return 241;\n  }\n  if (n === 251) {\n    return 251;\n  }\n  if (n === 257) {\n    return 257;\n  }\n  if (n === 263) {\n    return 263;\n  }\n  if (n === 271) {\n    return 271;\n  }\n  if (n === 277) {\n    return 277;\n  }\n  if (n === 281) {\n    return 281;\n  }\n  if (n === 283) {\n    return 283;\n  }\n  if (n === 293) {\n    return 293;\n  }\n  if (n === 307) {\n    return 307;\n  }\n  if (n === 311) {\n    return 311;\n  }\n  if (n === 313) {\n    return 313;\n  }\n  if (n === 317) {\n    return 317;\n  }\n  if (n === 331) {\n    return 331;\n  }\n  if (n === 337) {\n    return 337;\n  }\n  if (n === 347) {\n    return 347;\n  }\n  if (n === 349) {\n    return 349;\n  }\n  if (n === 353) {\n    return"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    const num = 1;\n    const total = 1;\n    let sum = 1;\n\n    while (num < n) {\n        sum += num;\n        num *= 2;\n    }\n\n    return sum;\n};\n\nmodule.exports = sumToN;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsToCheck = brackets.split(/[()]/g);\n  return bracketsToCheck.every(char => {\n    if (char === \"(\" || char === \")\") {\n      return true;\n    }\n    return bracketsToCheck.indexOf(char) === bracketsToCheck.lastIndexOf(char);\n  });\n};\n\n/*\n  returns true if the input string contains a letter that is not a digit.\n  otherwise, returns false.\n  e.g. \"1a2b3c4d\" is an invalid string.\n  e.g. \"1a2b3c\" is a valid string.\n  */\nconst stringContainsLetters = (str) => {\n  let letters = [];\n  str.split(\"\").forEach(letter => {\n    if (letter!== \"\") {\n      letters.push(letter);\n    }\n  });\n  return letters.every(letter => {\n    return!isNumeric(letter);\n  });\n};\n\n/*\n  returns true if the input string contains a digit.\n  otherwise, returns false.\n  e.g. \"1a2b3c4d\" is an invalid string.\n  e.g. \"1a2b3c\" is a valid string.\n  */\nconst stringContainsDigits = (str) => {\n  let digits = [];\n  str.split(\"\").forEach(digit => {\n    if (digit!== \"\") {\n      digits.push(digit);\n    }\n  });\n  return digits.every(digit => {\n    return isNumeric(digit);\n  });\n};\n\n/*\n  returns true if the input string contains an alphabetic character.\n  otherwise, returns false.\n  e.g. \"1a2b3c4d\" is an invalid string.\n  e.g. \"1a2b3c\" is a valid string.\n  */\nconst stringContainsAlphabetic = (str) => {\n  let alphabetic = [];\n  str.split(\"\").forEach(letter => {\n    if (letter!== \"\") {\n      alphabetic.push(letter);\n    }\n  });\n  return alphabetic.every(letter => {\n    return isAlphabetic(letter);\n  });\n};\n\n/*\n  returns true if the input string contains a numeric character.\n  otherwise, returns false.\n  e.g. \"1a2b3c4d\" is an invalid string.\n  e.g. \"1a2b3c\" is a valid string.\n  */\nconst stringContainsNumeric = (str) => {\n  let numeric = [];\n  str.split(\"\").forEach(digit => {\n    if (digit!== \"\") {\n      numeric.push(digit);\n    }\n  });\n  return numeric.every(digit => {\n    return isNumeric(digit);\n  });\n};\n\n/*\n  returns true if the input string contains an alphabetic character and a numeric\n  character.\n  otherwise, returns false.\n  e.g. \"1a2b3c4d\" is an invalid string.\n  e.g. \"1a2b3c\" is a valid string.\n  */\nconst stringContainsAlphanumeric = (str) => {\n  let alphanumeric = [];\n  str.split(\"\").forEach(letter => {\n    if (letter!== \"\") {\n      alphanumeric.push(letter);\n    }\n  });\n  return alphanumeric.every(letter => {\n    return isAlphabetic(letter) && isNumeric(letter);\n  });\n};\n\n/*\n  returns true if the input string contains a digit, an alphabetic character, or\n  a numeric character.\n  otherwise, returns false.\n  e.g. \"1a2b3c4d\" is an invalid string.\n  e.g. \"1a2b3c\" is a valid string.\n  */\nconst stringContainsAll = (str) => {\n  return stringContainsDigits(str) && stringContainsAlphabetic(str) &&\n    stringContainsNumeric(str);\n};\n\nconst isNumeric = (str) => {\n  return str.search(/^[0-9]*$/)!== -1;\n};\n\nconst isAlphabetic = (str) => {\n  return str.search(/^[a-zA-Z]*$/)!== -1;\n};\n\n/*\n  returns true if the input string contains a letter, and a number.\n  otherwise, returns false.\n  e.g. \"1a2b3c4d\" is an invalid string.\n  e.g. \"1a2b3c\" is a valid string.\n  */\nconst stringContainsLetterAndNumber = (str) => {\n  return stringContainsLetters(str) && stringContainsNumeric(str);\n};\n\nmodule.exports = {\n  correctBracketing,\n  stringContainsLetters,\n  stringContainsDigits,\n  stringContainsAlphabetic,\n  stringContainsNumeric,\n  stringContainsAlphanumeric,\n  stringContainsAll,\n  stringContainsLetterAndNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if(xs.length === 0) {\n    return 0;\n  }\n  const res = xs.slice(1);\n  return res;\n};\n\nconst polyDerivative = (polynomi) => {\n  const xs = polynomi.map(x => 1);\n  const derivative = derivative(xs);\n  const polynomiDerivative = [];\n  for(let i = 0; i < xs.length; i++) {\n    polynomialDerivative = [derivative[i] * xs[i]];\n  }\n  return polynomiDerivative;\n};\n\nconst isPolynomial = (polynomi) => {\n  const xs = polynomi.map(x => 1);\n  if(xs.length === 0) {\n    return true;\n  }\n  return false;\n};\n\nconst roots = (polynomial) => {\n  if(isPolynomial(polynomial) === false) {\n    return [];\n  }\n  const derivative = polyDerivative(polynomial);\n  const numerator = derivative.map(x => x * x);\n  const denominator = derivative.map(x => x);\n  const roots = [];\n  for(let i = 0; i < numerator.length; i++) {\n    if(numerator[i] === 0) {\n      roots.push(-denominator[i] / 2);\n    }\n  }\n  return roots;\n};\n\nconst isPossibleRoot = (polynomial, root) => {\n  const polynomialDerivative = polyDerivative(polynomial);\n  const numerator = polynomialDerivative.map(x => x * root);\n  const denominator = polynomialDerivative.map(x => x);\n  return numerator.every(x => denominator[i] === 0)\n};\n\nconst findRoot = (polynomial, root) => {\n  const possibleRoots = roots(polynomial);\n  const possibleRootsArray = possibleRoots.map(x => x);\n  return possibleRootsArray.filter(x => isPossibleRoot(polynomial, x))[0];\n};\n\nconst getDerivative = (polynomial, root) => {\n  const possibleRoots = roots(polynomial);\n  const possibleRootsArray = possibleRoots.map(x => x);\n  return possibleRootsArray.filter(x => isPossibleRoot(polynomial, x))[0];\n};\n\nconst getDerivative = (polynomial, root) => {\n  return {\n    'value': getDerivative(polynomial, root),\n    'root': getDerivative(polynomial, root)\n  };\n};\n\nconst getDerivative = (polynomial, root) => {\n  return {\n    'value': getDerivative(polynomial, root),\n    'root': getDerivative(polynomial, root)\n  };\n};\n\nconst rootsToPolynomial = (polynomi) => {\n  const xs = polynomi.map(x => 1);\n  const xsDerivative = polyDerivative(xs);\n  const polynomial = [];\n  for(let i = 0; i < xsDerivative.length; i++) {\n    polynomial.push(xsDerivative[i]);\n  }\n  return polynomial;\n};\n\nconst getPolynomial = (roots) => {\n  const xs = roots.map(x => 1);\n  const xsDerivative = polyDerivative(xs);\n  const polynomial = [];\n  for(let i = 0; i < xsDerivative.length; i++) {\n    polynomial.push(xsDerivative[i]);\n  }\n  return polynomial;\n};\n\nconst rootsToDerivative = (polynomi) => {\n  const roots = roots(polynomi);\n  const derivative = rootsToPolynomial(roots);\n  const derivativePolynomial = [];\n  for(let i = 0; i < derivative.length; i++) {\n    derivativePolynomial.push(derivative[i]);\n  }\n  return derivativePolynomial;\n};\n\nconst derivativeToRoots = (polynomial) => {\n  const possibleRoots = roots(polynomial);\n  const possibleRootsArray = possibleRoots.map(x => x);\n  return possibleRootsArray;\n};\n\nconst derivativeToRoots = (polynomial) => {\n  return possibleRoots(polynomial);\n};\n\nconst polynomialToDerivative = (polynomial) => {\n  const xs = polynomial.map(x => 1);\n  const xsDerivative = polyDerivative(xs);\n  const derivative = [];\n  for(let i = 0; i < xsDerivative.length; i++) {\n    derivative.push(xsDerivative[i]);\n  }\n  return derivative;\n};\n\nconst derivativeToRoots = (derivative) => {\n  const roots = [];\n  for(let i = 0; i < derivative.length; i++) {\n    roots.push(findRoot(derivativeToPolynomial(derivative), derivative[i]));\n  }\n  return roots;\n};\n\nconst derivativeToRoots = (derivative) => {\n  return possibleRoots(derivativeToPolynomial(derivative));\n};\n\nconst derivativeToRoots = (derivative) => {\n  return possibleRoots(derivativeToPolynomial(derivative));\n};\n\nconst polynomialToDerivative = (polynomial) => {\n  const derivative = polynomialToRoots(polynomial);\n  return derivativeToDerivative(derivative);\n};\n\nconst derivativeToDerivative = (derivative) =>"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 1\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n}\nconsole.log(fibfib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let counter = 0;\n  let string = s;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a' || string[i] == 'E' || string[i] == 'i' || string[i] == 'O' || string[i] == 'U') {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Function:\n    getVowelCount\n    Returns the number of vowels in the string.\n\n    Example:\n      >>> getVowelCount(\"abcde\")\n      2\n      >>> getVowelCount(\"ACEDY\")\n      3\n  */\nconst getVowelCount = (s) => {\n  let string = s;\n  let counter = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a' || string[i] == 'E' || string[i] == 'i' || string[i] == 'O' || string[i] == 'U') {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Function:\n    countVowels\n    Counts the number of vowels in the string.\n\n    Example:\n      >>> countVowels(\"abcde\")\n      2\n      >>> countVowels(\"ACEDY\")\n      3\n  */\nconst countVowels = (s) => {\n  let string = s;\n  let counter = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a' || string[i] == 'E' || string[i] == 'i' || string[i] == 'O' || string[i] == 'U') {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Function:\n    countConsonants\n    Counts the number of consonants in the string.\n\n    Example:\n      >>> countConsonants(\"abcde\")\n      2\n      >>> countConsonants(\"ACEDY\")\n      1\n  */\nconst countConsonants = (s) => {\n  let string = s;\n  let counter = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a' || string[i] == 'E' || string[i] == 'i' || string[i] == 'O' || string[i] == 'U' || string[i] == 'y') {\n      counter++;\n    }\n  }\n  return counter;\n};\n\n/*\n  Function:\n    getVowelIndex\n    Returns the index of the first vowel in the string.\n\n    Example:\n      >>> getVowelIndex(\"abcde\")\n      1\n      >>> getVowelIndex(\"ACEDY\")\n      3\n  */\nconst getVowelIndex = (s) => {\n  let string = s;\n  let index = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a' || string[i] == 'E' || string[i] == 'i' || string[i] == 'O' || string[i] == 'U') {\n      return index;\n    }\n    index++;\n  }\n};\n\n/*\n  Function:\n    getFirstVowelIndex\n    Returns the index of the first vowel in the string.\n\n    Example:\n      >>> getFirstVowelIndex(\"abcde\")\n      1\n      >>> getFirstVowelIndex(\"ACEDY\")\n      3\n  */\nconst getFirstVowelIndex = (s) => {\n  let string = s;\n  let index = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a' || string[i] == 'E' || string[i] == 'i' || string[i] == 'O' || string[i] == 'U') {\n      return index;\n    }\n    index++;\n  }\n};\n\n/*\n  Function:\n    getLastVowelIndex\n    Returns the index of the last vowel in the string.\n\n    Example:\n      >>> getLastVowelIndex(\"abcde\")\n      5\n      >>> getLastVowelIndex(\"ACEDY\")\n      7\n  */\nconst getLastVowelIndex = (s) => {\n  let string = s;\n  let index = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == 'a' || string[i] == 'E' || string[i] == 'i' || string[i] == 'O' || string[i] == 'U') {\n      return index;\n    }\n    index++;\n  }\n};\n\nmodule.exports = {\n  vowelsCount: vowelsCount,\n  getVowelCount: getVowelCount,\n  countVowels: countVowels,\n  countConsonants: countConsonants,\n  getVowelIndex: getVowelIndex,\n  getFirstVowelIndex: getFirstVowelIndex,\n  getLastVowelIndex: getLastVowelIndex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let digits = x.toString();\n    let result = '';\n\n    //if shift > digits, reverse\n    if (shift > digits.length) {\n        for (let i = 0; i < shift; i++) {\n            result += digits[digits.length - 1 - i];\n        }\n        return result;\n    }\n\n    for (let i = 0; i < shift; i++) {\n        result += digits[i];\n    }\n    return result;\n};\n\nexport {\n    circularShift\n};<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    sum += char;\n  }\n  return sum;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And RETurn a strinG with all 'A's removed.\n\n  Examples:\n      alphaRemover(\"abcABC\") => \"BC\"\n      alphaRemover(\"123\") => \"123\"\n      alphaRemover(\"Hello\") => \"ello\"\n  */\nconst alphaRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 65 || char > 90) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return a strinG with all 'e' characters removed.\n\n  Examples:\n      eRemover(\"helloE\") => \"helo\"\n      eRemover(\"ABCe\") => \"ABC\"\n      eRemover(\"aBc\") => \"ABC\"\n  */\nconst eRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 97 || char > 122) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And RETurn a strinG with all 'x' characters removed.\n\n  Examples:\n      xRemover(\"helloX\") => \"hello\"\n      xRemover(\"ABCx\") => \"ABC\"\n      xRemover(\"aBc\") => \"ABC\"\n  */\nconst xRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 65 || char > 90) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And return a strinG with all 'c' characters removed.\n\n  Examples:\n      cRemover(\"helloC\") => \"hello\"\n      cRemover(\"ABCc\") => \"ABC\"\n      cRemover(\"aBc\") => \"ABC\"\n  */\nconst cRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 97 || char > 122) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And RETurn a strinG with all 'h' characters removed.\n\n  Examples:\n      hRemover(\"helloH\") => \"hello\"\n      hRemover(\"ABCh\") => \"ABC\"\n      hRemover(\"aBc\") => \"ABC\"\n  */\nconst hRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 97 || char > 122) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And RETurn a strinG with all 'o' characters removed.\n\n  Examples:\n      oRemover(\"helloO\") => \"hello\"\n      oRemover(\"ABCo\") => \"ABC\"\n      oRemover(\"aBc\") => \"ABC\"\n  */\nconst oRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 97 || char > 122) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And RETurn a strinG with all 'y' characters removed.\n\n  Examples:\n      yRemover(\"helloY\") => \"hello\"\n      yRemover(\"ABCy\") => \"ABC\"\n      yRemover(\"aBc\") => \"ABC\"\n  */\nconst yRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 97 || char > 122) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And RETurn a strinG with all 'u' characters removed.\n\n  Examples:\n      uRemover(\"helloU\") => \"hello\"\n      uRemover(\"ABCu\") => \"ABC\"\n      uRemover(\"aBc\") => \"ABC\"\n  */\nconst uRemover = (s) => {\n  let newString = '';\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i);\n    if (char < 97 || char > 122) {\n      newString += char;\n    }\n  }\n  return newString;\n};\n\n/*Task\n  writE a"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n    let result = 0;\n    let a = n;\n    let b = s;\n    while (a--) {\n        if (b-- === 0) {\n            result += 1;\n            b = 0;\n        }\n    }\n    return result;\n};\n\n/*\n  For a given number of fruit, return a dictionary of fruit names and their numbers.\n  input: (3 apples AND 1 orange)\n  output: {apple: 3, orange: 1}\n*/\nCOnst fruitDistribution = (s, n) => {\n    let result = {};\n    let a = n;\n    let b = s;\n    while (a--) {\n        if (b-- === 0) {\n            result[s] = a;\n            b = 0;\n        }\n    }\n    return result;\n};\n\n/*\n  input: (3 apples AND 3 oranges)\n  output: {apple: 3, oranges: 3}\n*/\nfruitDistribution(\"3 apples AND 3 oranges\", 15)\n//=> {apple: 3, oranges: 3}\n\n/*\n  input: (3 apples AND 4 oranges)\n  output: {apple: 3, oranges: 4}\n*/\nfruitDistribution(\"3 apples AND 4 oranges\", 5)\n//=> {apple: 3, oranges: 4}\n\n/*\n  input: (3 apples AND 3 oranges)\n  output: {apple: 3, oranges: 3}\n*/\nfruitDistribution(\"3 apples AND 3 oranges\", 3)\n//=> {apple: 3, oranges: 3}\n\n/*\n  input: (3 apples AND 2 oranges)\n  output: {apple: 3, oranges: 2}\n*/\nfruitDistribution(\"3 apples AND 2 oranges\", 5)\n//=> {apple: 3, oranges: 2}\n\n/*\n  input: (3 apples AND 4 oranges)\n  output: {apple: 3, oranges: 4}\n*/\nfruitDistribution(\"3 apples AND 4 oranges\", 6)\n//=> {apple: 3, oranges: 4}\n\n/*\n  input: (2 apples AND 1 oranges)\n  output: {apple: 2, oranges: 1}\n*/\nfruitDistribution(\"2 apples AND 1 oranges\", 4)\n//=> {apple: 2, oranges: 1}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 3)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 2)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 3 oranges)\n  output: {apple: 2, oranges: 3}\n*/\nfruitDistribution(\"2 apples AND 3 oranges\", 4)\n//=> {apple: 2, oranges: 3}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 1)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 3 oranges)\n  output: {apple: 2, oranges: 3}\n*/\nfruitDistribution(\"2 apples AND 3 oranges\", 5)\n//=> {apple: 2, oranges: 3}\n\n/*\n  input: (2 apples AND 3 oranges)\n  output: {apple: 2, oranges: 3}\n*/\nfruitDistribution(\"2 apples AND 3 oranges\", 6)\n//=> {apple: 2, oranges: 3}\n\n/*\n  input: (2 apples AND 3 oranges)\n  output: {apple: 2, oranges: 3}\n*/\nfruitDistribution(\"2 apples AND 3 oranges\", 7)\n//=> {apple: 2, oranges: 3}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 8)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 9)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 10)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 11)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 12)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples AND 2 oranges)\n  output: {apple: 2, oranges: 2}\n*/\nfruitDistribution(\"2 apples AND 2 oranges\", 13)\n//=> {apple: 2, oranges: 2}\n\n/*\n  input: (2 apples"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let ans = []\n    let smallest = Number.MAX_SAFE_INTEGER\n\n    arr.forEach((node) => {\n        if (node.value % 2 === 0 && node.value < smallest) {\n            smallest = node.value\n            ans = [smallest, node.id]\n        }\n    })\n\n    return ans\n}\n\nconsole.log(pluck([4,2,3]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return lst.indexOf(max);\n}\n\n// console.log(search([4, 1, 2, 2, 3, 1]))\n// console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\n// console.log(search([5, 5, 4, 4, 4]))\n\n/*\n  Given a list of n-tuples, return the list of the 2-tuples in which the last item is greater than the\n  second-to-last item.\n  Examples:\n      (5, 3) -> [2, 4]\n      (2, 4, 5) -> [2, 3]\n      (2, 2, 2, 2, 2, 2) -> []\n*/\nconst search2 = (lst) => {\n  let max = 0;\n  for (let i = 1; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return [i, i + 1];\n    }\n  }\n  return [];\n}\n\n// console.log(search2([5, 3]))\n// console.log(search2([2, 4, 5]))\n// console.log(search2([2, 2, 2, 2, 2, 2]))\n\n/*\n  Given a list of n-tuples, return the list of the n-tuples in which the last item is greater than the\n  second-to-last item.\n  Examples:\n      (5, 3) -> [2, 4]\n      (2, 4, 5) -> [2, 3]\n      (2, 2, 2, 2, 2, 2) -> []\n*/\nconst search3 = (lst) => {\n  let max = 0;\n  for (let i = 2; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return [i, i + 1];\n    }\n  }\n  return [];\n}\n\n// console.log(search3([5, 3]))\n// console.log(search3([2, 4, 5]))\n// console.log(search3([2, 2, 2, 2, 2, 2]))\n\n/*\n  Given a list of n-tuples, return the list of the n-tuples in which the last item is greater than the\n  second-to-last item.\n  Examples:\n      (5, 3) -> [2, 4]\n      (2, 4, 5) -> [2, 3]\n      (2, 2, 2, 2, 2, 2) -> []\n*/\nconst search4 = (lst) => {\n  let max = 0;\n  for (let i = 1; i < lst.length - 2; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return [i, i + 1];\n    }\n  }\n  return [];\n}\n\n// console.log(search4([5, 3]))\n// console.log(search4([2, 4, 5]))\n// console.log(search4([2, 2, 2, 2, 2, 2]))\n\n/*\n  Given a list of n-tuples, return the list of the n-tuples in which the last item is greater than the\n  second-to-last item.\n  Examples:\n      (5, 3) -> [2, 4]\n      (2, 4, 5) -> [2, 3]\n      (2, 2, 2, 2, 2, 2) -> []\n*/\nconst search5 = (lst) => {\n  let max = 0;\n  for (let i = 1; i < lst.length - 3; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return [i, i + 1];\n    }\n  }\n  return [];\n}\n\n// console.log(search5([5, 3]))\n// console.log(search5([2, 4, 5]))\n// console.log(search5([2, 2, 2, 2, 2, 2]))\n\n/*\n  Given a list of n-tuples, return the list of the n-tuples in which the last item is greater than the\n  second-to-last item.\n  Examples:\n      (5, 3) -> [2, 4]\n      (2, 4, 5) -> [2, 3]\n      (2, 2, 2, 2, 2, 2) -> []\n*/\nconst search6 = (lst) => {\n  let max = 0;\n  for (let i = 1; i < lst.length - 4; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return [i, i + 1];\n    }\n  }\n  return [];\n}\n\n// console.log(search6([5, 3]))\n// console.log(search6([2, 4, 5]))\n// console.log(search6([2, 2, 2, 2, 2, 2]))\n\n/*\n  Given a list of n-tuples, return the list of the n-tuples in which the last item is greater than the\n  second-to-last item.\n  Examples:\n      (5, 3) -> [2, 4]\n      (2, 4, 5) -> [2,"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const sorted = lst.slice().sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  const start = 0\n  const end = sorted.length - 1\n  const min = sorted[start]\n  const max = sorted[end]\n  const middle = Math.floor((end - start) / 2) + start\n  let result = [min, max]\n  while (result[0]!= min) {\n    result = [sorted[middle], sorted[middle + 1]]\n    middle = Math.floor((end - start) / 2) + start\n  }\n  return result\n}\n\n/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortListDesc = (lst) => {\n  const sorted = lst.slice().sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  const start = 0\n  const end = sorted.length - 1\n  const min = sorted[start]\n  const max = sorted[end]\n  const middle = Math.floor((end - start) / 2) + start\n  let result = [min, max]\n  while (result[0]!= min) {\n    result = [sorted[middle], sorted[middle + 1]]\n    middle = Math.floor((end - start) / 2) + start\n  }\n  return result\n}\n\nexport {\n  strangeSortList,\n  strangeSortListDesc\n}\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(s, 2));\n}\n\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea3 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea5 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea6 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea8 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea9 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea10 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea11 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea12 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea13 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea14 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea15 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea16 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea17 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b * c + c * a) / 2;\n}\n\nconst triangleArea18 = (a, b, c) => {\n  if (b < 0 || c < 0 || a <= b || a <= c) {\n    return -1;\n  }\n  const s = (a + b + c) / 2;\n  return (a * b + b *"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const x = q.length;\n  const max = w - x;\n  const y = q[x - 1];\n  let curr = q.slice(0, x - 1);\n  let prev = q.slice(0, x - 1);\n  let count = 0;\n  while (curr.length < x && count < max) {\n    prev = curr;\n    curr = curr.concat(y);\n    count++;\n  }\n  if (curr.length === x) {\n    return false;\n  }\n  return true;\n};\n\nconst test = (a, b) => {\n  console.log(a +'<'+ b +'->'+ willItFly(a, b));\n};\n\nconst main = () => {\n  test([1, 2, 3, 4], 5);\n  test([1, 2, 3], 5);\n  test([3], 5);\n  test([3], 9);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let i = 0\n  let j = 0\n  let min = arr[0]\n  for (let n of arr) {\n    if (n > min) {\n      min = n\n      i = n\n    }\n  }\n  for (let n of arr) {\n    if (n < min) {\n      min = n\n      j = n\n    }\n  }\n  return Math.min(i, j)\n}\n\n/*\n  Eliminate all Element whICH Are not In A Palindromic Array.\n  */\nconst eliminate = (arr) => {\n  let i = 0\n  let j = 0\n  let tmp = []\n  let min = arr[0]\n  for (let n of arr) {\n    if (n > min) {\n      min = n\n      i = n\n    }\n  }\n  for (let n of arr) {\n    if (n < min) {\n      min = n\n      j = n\n    }\n  }\n  if (i > j) {\n    return arr\n  } else {\n    for (let n of arr) {\n      if (n === i) {\n        tmp.push(j)\n      }\n      if (n === j) {\n        tmp.push(i)\n      }\n    }\n    return tmp\n  }\n}\n\n/*\n  PALINDOMIC ANALYZY.\n\n  Eliminate all Element whICH Are not In A Palindromic Array.\n  */\nconst palindrome = (arr) => {\n  let i = 0\n  let j = 0\n  let tmp = []\n  let min = arr[0]\n  for (let n of arr) {\n    if (n > min) {\n      min = n\n      i = n\n    }\n  }\n  for (let n of arr) {\n    if (n < min) {\n      min = n\n      j = n\n    }\n  }\n  if (i > j) {\n    return arr\n  } else {\n    for (let n of arr) {\n      if (n === i) {\n        tmp.push(j)\n      }\n      if (n === j) {\n        tmp.push(i)\n      }\n    }\n    return tmp\n  }\n}\n\n/*\n  Find the smallest Element whICH Are Not In A Palindromic Array.\n\n  For example:\n  smallestNotPalindrome([1,2,3,5,4,7,9,6]) == 4\n  smallestNotPalindrome([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestNotPalindrome([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestNotPalindrome = (arr) => {\n  let i = 0\n  let j = 0\n  let min = arr[0]\n  for (let n of arr) {\n    if (n > min) {\n      min = n\n      i = n\n    }\n  }\n  for (let n of arr) {\n    if (n < min) {\n      min = n\n      j = n\n    }\n  }\n  return Math.min(i, j)\n}\n\n/*\n  Find the largest Element whICH Are Not In A Palindromic Array.\n\n  For example:\n  largestNotPalindrome([1,2,3,5,4,7,9,6]) == 6\n  largestNotPalindrome([1, 2, 3, 4, 3, 2, 2]) == 3\n  largestNotPalindrome([1, 2, 3, 2, 1]) == 2\n  */\nconst largestNotPalindrome = (arr) => {\n  let i = 0\n  let j = 0\n  let max = arr[0]\n  for (let n of arr) {\n    if (n > max) {\n      max = n\n      i = n\n    }\n  }\n  for (let n of arr) {\n    if (n < max) {\n      max = n\n      j = n\n    }\n  }\n  return Math.max(i, j)\n}\n\nconst printArray = (arr) => {\n  for (let n of arr) {\n    console.log(n)\n  }\n}\n\nconst main = () => {\n  const arr = [1, 2, 3, 4, 3, 2, 2]\n  printArray(arr)\n  let res = smallestChange(arr)\n  printArray(eliminate(arr))\n  printArray(palindrome(arr))\n  printArray(smallestNotPalindrome(arr))\n  printArray(largestNotPalindrome(arr))\n  return res\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (!lst1 ||!lst2) {\n    return lst1 || lst2;\n  }\n\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n\n  if (lst1Length!== lst2Length) {\n    return lst1;\n  }\n\n  const total = [];\n  for (let i = 0; i < lst1Length; i += 1) {\n    if (lst1[i] === lst2[i]) {\n      total.push(lst1[i]);\n    }\n  }\n  return total;\n};\n\n/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n*/\nconst totalMatch2 = (lst1, lst2) => {\n  if (!lst1 ||!lst2) {\n    return lst1 || lst2;\n  }\n\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n\n  if (lst1Length!== lst2Length) {\n    return lst1;\n  }\n\n  const total = [];\n  for (let i = 0; i < lst1Length; i += 1) {\n    if (lst1[i] === lst2[i]) {\n      total.push(lst1[i]);\n    }\n  }\n  return total;\n};\n\nmodule.exports = {\n  totalMatch,\n  totalMatch2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a < 100) {\n    console.log(\"It is impossible to have a %s number.\");\n    return false;\n  }\n  for (let i = 3; i <= Math.sqrt(a); i += 2) {\n    if (a % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  if (n < 2) return false;\n  if (n === 2 || n === 3) return true;\n  for (let i = 2; i <= Math.sqrt(n); i += 1) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrimeSqrt = (n) => {\n  if (n < 2) return false;\n  if (n === 2) return true;\n  for (let i = 2; i <= Math.sqrt(n); i += 1) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrimeNumber = (n) => {\n  if (isPrime(n) === false) return false;\n  for (let i = 2; i <= Math.sqrt(n); i += 1) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrimeNumberSqrt = (n) => {\n  if (isPrimeSqrt(n) === false) return false;\n  for (let i = 2; i <= Math.sqrt(n); i += 1) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\nconst isPrimeNumberEx = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx2 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx3 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  if (isPrimeNumberEx2(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx4 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  if (isPrimeNumberEx2(n) === false) return false;\n  if (isPrimeNumberEx3(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx5 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  if (isPrimeNumberEx2(n) === false) return false;\n  if (isPrimeNumberEx3(n) === false) return false;\n  if (isPrimeNumberEx4(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx6 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  if (isPrimeNumberEx2(n) === false) return false;\n  if (isPrimeNumberEx3(n) === false) return false;\n  if (isPrimeNumberEx4(n) === false) return false;\n  if (isPrimeNumberEx5(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx7 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  if (isPrimeNumberEx2(n) === false) return false;\n  if (isPrimeNumberEx3(n) === false) return false;\n  if (isPrimeNumberEx4(n) === false) return false;\n  if (isPrimeNumberEx5(n) === false) return false;\n  if (isPrimeNumberEx6(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx8 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  if (isPrimeNumberEx2(n) === false) return false;\n  if (isPrimeNumberEx3(n) === false) return false;\n  if (isPrimeNumberEx4(n) === false) return false;\n  if (isPrimeNumberEx5(n) === false) return false;\n  if (isPrimeNumberEx6(n) === false) return false;\n  if (isPrimeNumberEx7(n) === false) return false;\n  return true;\n};\n\nconst isPrimeNumberEx9 = (n) => {\n  if (isPrimeNumber(n) === false) return false;\n  if (isPrimeNumberSqrt(n) === false) return false;\n  if (isPrimeNumberEx(n) === false) return false;\n  if (isPrimeNumberEx2(n) === false) return false;\n  if (isPrime"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let result = 1\n  while (x!== 1) {\n    if (x % n === 0) {\n      x = x / n\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\nconst isSimplePower2 = (x, n) => {\n  let result = 1\n  while (x!== 1) {\n    if (Math.pow(x, n) === x) {\n      return true\n    } else {\n      x = x / n\n    }\n  }\n  return false\n}\n\n/*\n\nYour task is to write a function that will find the maximal product of subArray of an array.\n\nThe function will get an array of numbers, an integer and a starting index as parameters and will return the maximal product of subArray.\n\nFor example:\n\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 1) => 120\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 2) => 60\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 3) => 40\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 4) => 30\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 5) => 20\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 6) => 12\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 7) => 10\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 8) => 8\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 9) => 6\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 10) => 4\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 11) => 2\nfindMaximalProductOfSubArray(1, [2, 3, 4, 5], 12) => 1\n\n*/\nconst findMaximalProductOfSubArray = (x, array, start) => {\n  let max = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    max *= array[i]\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray2 = (x, array, start) => {\n  let max = 1\n  for (let i = start; i < array.length; i++) {\n    max *= array[i]\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray3 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    max *= temp\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray4 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    if (max < temp) {\n      max = temp\n    }\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray5 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    if (max < temp) {\n      max = temp\n    }\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray6 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    if (max < temp) {\n      max = temp\n    }\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray7 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    if (max < temp) {\n      max = temp\n    }\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray8 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    if (max < temp) {\n      max = temp\n    }\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray9 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    if (max < temp) {\n      max = temp\n    }\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray10 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length; i++) {\n    temp *= array[i]\n    if (max < temp) {\n      max = temp\n    }\n  }\n  return max\n}\n\nconst findMaximalProductOfSubArray11 = (x, array, start) => {\n  let max = 1\n  let temp = array[start]\n  for (let i = start + 1; i < array.length"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  a = a % 8;\n  if(a === 0) return true;\n  const b = Math.pow(2,a);\n  let c = b - 1;\n  return c%b === 0;\n};\n\nexport const test = () => {\n  let i = 0;\n  for(let a = 1; i < 4; ++i) {\n    for(let b = 1; i < 4; ++i) {\n      for(let c = 1; i < 4; ++i) {\n        if(iscube(i*a*b*c)) {\n          console.log(i*a*b*c);\n          break;\n        }\n      }\n    }\n  }\n};\n\nexport const main = () => {\n  let i = 0;\n  for(let a = 1; i < 4; ++i) {\n    for(let b = 1; i < 4; ++i) {\n      for(let c = 1; i < 4; ++i) {\n        if(iscube(i*a*b*c)) {\n          console.log(i*a*b*c);\n          break;\n        }\n      }\n    }\n  }\n};\n\ntest();\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let len = num.length,\n    n = parseInt(num, 16);\n  let result = 0;\n  let i = 0;\n  for (; i < len; i++) {\n    n = (n * 16) + (num.charCodeAt(i) - (num.charCodeAt(i) >= 97? 97 : 65));\n  }\n  return n;\n};\n\n/*\n  You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRECT or EmptY sTRING===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n*/\nconst getNum = (num) => {\n  let result = 0;\n  let hex = 0;\n  let i = 0;\n  for (; i < num.length; i++) {\n    hex = num.charCodeAt(i);\n    if (hex >= 97) {\n      hex = hex - 97;\n    } else {\n      hex = hex - 65;\n    }\n    result = result * 16 + hex;\n  }\n  return result;\n};\n\n// test\nconsole.log(getNum(\"123456789ABCDEF0\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  let num = 0\n  while(decimal > 0) {\n    num = decimal % 2\n    decimal = (decimal - num) / 2\n    if (num === 1) {\n      binary = '1' + binary\n    }\n    else {\n      binary = '0' + binary\n    }\n  }\n  return binary\n}\n\nmodule.exports = decimalToBinary\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    if(s.length < 3) return false;\n    let prev = s.charAt(0);\n    let isHappy = false;\n    for(let i = 1; i < s.length; i++){\n        if(s.charAt(i) == prev) continue;\n        else if(s.charAt(i) > prev)\n            isHappy = false;\n        else{\n            isHappy = true;\n            prev = s.charAt(i);\n        }\n    }\n    return isHappy;\n};\n\n/*\n  1. Find the nth number in the given array.\n  2. Find the nth number in the given array.\n  3. Find the nth number in the given array.\n  4. Find the nth number in the given array.\n  5. Find the nth number in the given array.\n  6. Find the nth number in the given array.\n  7. Find the nth number in the given array.\n  8. Find the nth number in the given array.\n  9. Find the nth number in the given array.\n  10. Find the nth number in the given array.\n  11. Find the nth number in the given array.\n  12. Find the nth number in the given array.\n  13. Find the nth number in the given array.\n  14. Find the nth number in the given array.\n  15. Find the nth number in the given array.\n  16. Find the nth number in the given array.\n  17. Find the nth number in the given array.\n  18. Find the nth number in the given array.\n  19. Find the nth number in the given array.\n  20. Find the nth number in the given array.\n  21. Find the nth number in the given array.\n  22. Find the nth number in the given array.\n  23. Find the nth number in the given array.\n  24. Find the nth number in the given array.\n  25. Find the nth number in the given array.\n  26. Find the nth number in the given array.\n  27. Find the nth number in the given array.\n  28. Find the nth number in the given array.\n  29. Find the nth number in the given array.\n  30. Find the nth number in the given array.\n  31. Find the nth number in the given array.\n  32. Find the nth number in the given array.\n  33. Find the nth number in the given array.\n  34. Find the nth number in the given array.\n  35. Find the nth number in the given array.\n  36. Find the nth number in the given array.\n  37. Find the nth number in the given array.\n  38. Find the nth number in the given array.\n  39. Find the nth number in the given array.\n  40. Find the nth number in the given array.\n  41. Find the nth number in the given array.\n  42. Find the nth number in the given array.\n  43. Find the nth number in the given array.\n  44. Find the nth number in the given array.\n  45. Find the nth number in the given array.\n  46. Find the nth number in the given array.\n  47. Find the nth number in the given array.\n  48. Find the nth number in the given array.\n  49. Find the nth number in the given array.\n  50. Find the nth number in the given array.\n  51. Find the nth number in the given array.\n  52. Find the nth number in the given array.\n  53. Find the nth number in the given array.\n  54. Find the nth number in the given array.\n  55. Find the nth number in the given array.\n  56. Find the nth number in the given array.\n  57. Find the nth number in the given array.\n  58. Find the nth number in the given array.\n  59. Find the nth number in the given array.\n  60. Find the nth number in the given array.\n  61. Find the nth number in the given array.\n  62. Find the nth number in the given array.\n  63. Find the nth number in the given array.\n  64. Find the nth number in the given array.\n  65. Find the nth number in the given array.\n  66. Find the nth number in the given array.\n  67. Find the nth number in the given array.\n  68. Find the nth number in the given array.\n  69. Find the nth number in the given array.\n  70. Find the nth number in the given array.\n  71. Find the nth number in the given array.\n  72. Find the nth number in the given array.\n  73. Find the nth number in the given array.\n  74. Find the nth number in the given array.\n  75. Find the nth number in the given array.\n  76. Find the nth number in the given array.\n  77. Find the nth number in the given array.\n  78. Find the nth number in the given array.\n  79. Find the nth number in the given array.\n  80. Find the nth number in the given array.\n  81. Find the nth number in the given array.\n  82. Find the nth number in the given array.\n  83. Find the nth number in the given array.\n  84. Find the nth number in the given array.\n  85. Find the nth number in the given array.\n  86. Find the nth number in the given array.\n  87. Find the nth number in the given array.\n  88. Find the nth number in the given array.\n  89. Find the nth number in the given array.\n  90. Find the nth number in the"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrade = []\n  const total = grades.reduce((total, grade) => total + grade)\n  const denominator = 4\n  const i = 0\n  while (i <= 5) {\n    let grade = total / denominator\n    if (grade >= 3.7) {\n      grade = 'A+'\n    } else if (grade >= 3.3) {\n      grade = 'A-'\n    } else if (grade >= 3.0) {\n      grade = 'B+'\n    } else if (grade >= 2.7) {\n      grade = 'B-'\n    } else if (grade >= 2.3) {\n      grade = 'C-'\n    } else if (grade >= 2.0) {\n      grade = 'C+'\n    } else if (grade >= 1.7) {\n      grade = 'c'\n    } else if (grade >= 1.3) {\n      grade = 'c-'\n    } else if (grade >= 1.0) {\n      grade = 'd+'\n    } else if (grade >= 0.7) {\n      grade = 'D'\n    } else if (grade >= 0.0) {\n      grade = 'D-'\n    } else {\n      grade = 'E'\n    }\n    letterGrade.push(grade)\n    total -= grade\n    i++\n  }\n  return letterGrade\n}\n\nmodule.exports = numericalLetterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let num = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] < string.length) {\n      num += 1\n    }\n  }\n  if (num >= 2) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/*\n  Write a function that takes a string and returns the first non-prime number\n  that the string contains.\n  Examples\n  primeNumber('abc') == 'bc'\n  primeNumber('bcd') == 'bc'\n  primeNumber('abcdc') == 'abcd'\n  primeNumber('abcabc') == 'abc'\n  primeNumber('abcabcabc') == 'abcabc'\n  primeNumber('abcabcabcabc') == 'abcabcabc'\n  primeNumber('abcabcabcabcabc') == 'abcabcabcabc'\n*/\nconst primeNumber = (string) => {\n  let num = 0\n  for (let i = 0; i < string.length; i++) {\n    if (primeLength(string.substr(0, i + 1))) {\n      num = i + 1\n      break\n    }\n  }\n  return num\n}\n\n/*\n  Write a function that takes a string and returns a string with each char\n  swapped.\n  Examples\n  swapChars('abc') == 'cba'\n  swapChars('abcdcba') == 'cbda'\n  swapChars('abcabcabc') == 'abcabcabc'\n  swapChars('abcabcabcabc') == 'abcabcabca'\n  swapChars('abcabcabcabcabc') == 'abcabcabca'\n  swapChars('abcabcabcabcabc') == 'abcabcabca'\n*/\nconst swapChars = (string) => {\n  let result = ''\n  for (let i = 0; i < string.length; i++) {\n    result += string.charAt(string.length - 1 - i)\n  }\n  return result\n}\n\n/*\n  Write a function that takes a string and returns a string with each char\n  reversed.\n  Examples\n  reverseChars('abc') == 'cba'\n  reverseChars('abcdcba') == 'acbda'\n  reverseChars('abcabcabc') == 'abcabcabc'\n  reverseChars('abcabcabcabc') == 'abcabcabca'\n  reverseChars('abcabcabcabcabc') == 'abcabcabca'\n*/\nconst reverseChars = (string) => {\n  let result = ''\n  for (let i = 0; i < string.length; i++) {\n    result += string.charAt(string.length - 1 - i)\n  }\n  return result\n}\n\n/*\n  Write a function that takes a string and returns a string with each char\n  transformed.\n  Examples\n  transformChars('abc') == 'bca'\n  transformChars('abcdcba') == 'dbca'\n  transformChars('abcabcabc') == 'cabcab'\n  transformChars('abcabcabcabc') == 'cabcbab'\n  transformChars('abcabcabcabcabc') == 'abccbbbab'\n*/\nconst transformChars = (string) => {\n  let result = ''\n  for (let i = 0; i < string.length; i++) {\n    result += string.charAt(i + 1)\n  }\n  return result\n}\n\nexport { primeNumber, swapChars, reverseChars, transformChars }\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n    let s = 0;\n    while(n > 0){\n        s += (n%10) * ((n/10) % 10);\n        n = n/10;\n    }\n    return s;\n}\n\nconst test = () => {\n    console.log(\"The number of n-digit POsItIve with 1. starts at:\", startsOneEnds(1));\n    console.log(\"The number of n-digit POsItIve with 2. starts at:\", startsOneEnds(2));\n    console.log(\"The number of n-digit POsItIve with 3. starts at:\", startsOneEnds(3));\n    console.log(\"The number of n-digit POsItIve with 4. starts at:\", startsOneEnds(4));\n    console.log(\"The number of n-digit POsItIve with 5. starts at:\", startsOneEnds(5));\n    console.log(\"The number of n-digit POsItIve with 6. starts at:\", startsOneEnds(6));\n    console.log(\"The number of n-digit POsItIve with 7. starts at:\", startsOneEnds(7));\n    console.log(\"The number of n-digit POsItIve with 8. starts at:\", startsOneEnds(8));\n    console.log(\"The number of n-digit POsItIve with 9. starts at:\", startsOneEnds(9));\n    console.log(\"The number of n-digit POsItIve with 10. starts at:\", startsOneEnds(10));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = (x) => {\n    let sum = 0\n    while (x) {\n      sum += (x % 2)\n      x = Math.floor(x / 2)\n    }\n    return sum\n  }\n  const number = N.toString(2)\n  return sum(number)\n}\n\nconsole.log(solve(1000))\nconsole.log(solve(1500))\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.reduce((acc, item) => acc + item, 0);\n};\n\nconst find = (lst, item) => {\n  return lst.find(element => element === item);\n};\n\nconst findIndex = (lst, item) => {\n  return lst.findIndex(element => element === item);\n};\n\nconst contains = (lst, item) => {\n  return find(lst, item)!== undefined;\n};\n\nconst containsAll = (lst, items) => {\n  return items.every(item => contains(lst, item));\n};\n\nconst containsAny = (lst, items) => {\n  return items.some(item => contains(lst, item));\n};\n\nconst findFirst = (lst, predicate) => {\n  return lst.find(predicate);\n};\n\nconst first = (lst) => {\n  return lst[0];\n};\n\nconst last = (lst) => {\n  return lst[lst.length - 1];\n};\n\nconst head = (lst) => {\n  return lst.slice(0, 1);\n};\n\nconst tail = (lst) => {\n  return lst.slice(1);\n};\n\nconst isEmpty = (lst) => {\n  return lst.length === 0;\n};\n\nconst empty = () => {\n  return [];\n};\n\nconst isNotEmpty = (lst) => {\n  return!isEmpty(lst);\n};\n\nconst length = (lst) => {\n  return lst.length;\n};\n\nconst concat = (lst1, lst2) => {\n  return lst1.concat(lst2);\n};\n\nconst filter = (lst, predicate) => {\n  return lst.filter(predicate);\n};\n\nconst flatten = (lst) => {\n  return lst.reduce((acc, item) => [...acc, item], []);\n};\n\nconst map = (lst, mapper) => {\n  return lst.map(mapper);\n};\n\nconst reduce = (lst, reducer, initial) => {\n  return lst.reduce(reducer, initial);\n};\n\nconst sortBy = (lst, key) => {\n  return lst.sort((a, b) => {\n    if (a[key] > b[key]) {\n      return 1;\n    }\n    if (a[key] < b[key]) {\n      return -1;\n    }\n    return 0;\n  });\n};\n\nconst sort = (lst, cmp) => {\n  return lst.sort((a, b) => {\n    return cmp(a, b);\n  });\n};\n\nconst zip = (lst1, lst2) => {\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    result.push([lst1[i], lst2[j]]);\n    i++;\n    j++;\n  }\n  return result;\n};\n\nconst zipWith = (f, lst1, lst2) => {\n  return zip(lst1, lst2).map(pair => f(pair[0], pair[1]));\n};\n\nconst zipAll = (lst1, lst2) => {\n  return zip(lst1, lst2);\n};\n\nconst zipWithIndex = (lst) => {\n  return zip(lst, range(0, lst.length));\n};\n\nconst zipWithIndexWith = (f, lst) => {\n  return zipWithIndex(lst).map(pair => f(pair[0], pair[1]));\n};\n\nconst zipWithIndexs = (lst1, lst2) => {\n  return zipWithIndex(lst1).map(pair => pair[0]);\n};\n\nconst zipWithIndexsWith = (f, lst1, lst2) => {\n  return zipWithIndex(lst1).map(pair => f(pair[0], pair[1]));\n};\n\nconst zipWithIndexsWithOrder = (f, lst1, lst2, keyFunc) => {\n  return zipWithIndexsWith(f, lst1, lst2).sort((a, b) => keyFunc(a, b));\n};\n\nconst zipWithIndexsWithOrderBy = (f, lst1, lst2, keyFunc) => {\n  return zipWithIndexsWith(f, lst1, lst2).sort((a, b) => keyFunc(a, b));\n};\n\nconst zipWithIndexsWithOrderByKey = (f, lst1, lst2, keyFunc) => {\n  return zipWithIndexsWith(f, lst1, lst2).sort((a, b) => keyFunc(a, b));\n};\n\nconst zipWithIndexsWithOrderByKeyDesc = (f, lst1, lst2, keyFunc) => {\n  return zipWithIndexsWith(f, lst1, lst2).sort((a, b) => keyFunc(b, a));\n};\n\nconst zipWithIndexsWithOrderByKeyDescAndIndex = (f, lst1, lst2, keyFunc) => {\n  return zipWithIndexsWith(f, lst1, lst2).sort((a, b) => keyFunc(b, a));\n};\n\nconst zipWithIndexsWithOrderByKeyDescAndIndexWith = (f, lst1, lst2, keyFunc) => {\n  return zipWithIndexsWith(f, lst1, lst2).sort((a, b) => keyFunc(b, a));\n};\n\nconst zipWithIndexsWithOrderByKeyDescAndIndexWithKey = (f, lst1, lst2, keyFunc) => {\n  return zipWithIndexsWith(f, lst1, lst2).sort((a, b) => keyFunc(b,"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const a = s.split('')\n  let b = a.slice()\n  let counter = 0\n  let i = 0\n  while (i < b.length) {\n    let j = i + 1\n    while (j < b.length) {\n      if (b[i] > b[j]) {\n        b[i]--\n        b[j]++\n      } else if (b[i] < b[j]) {\n        b[i]++\n        b[j]--\n      } else {\n        counter++\n        j++\n      }\n    }\n    i++\n  }\n  return a.join('') +'' + counter\n}\n\nmodule.exports = antiShuffle\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[x])\n      col.push(lstCol)\n    }\n  }\n  return [row, col]\n}\n\nconst getCol = (lst, y) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[y])\n      col.push(lstCol)\n    }\n  }\n  return [row, col]\n}\n\nconst getCells = (lst) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol)\n      col.push(lstCol)\n    }\n  }\n  return [row, col]\n}\n\nconst getCellsWithIndex = (lst, x, y) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[x])\n      col.push(lstCol[y])\n    }\n  }\n  return [row, col]\n}\n\nconst getRowWithIndex = (lst, x) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[x])\n      col.push(lstCol)\n    }\n  }\n  return [row, col]\n}\n\nconst getColWithIndex = (lst, y) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[y])\n      col.push(lstCol)\n    }\n  }\n  return [row, col]\n}\n\nconst getRowWithIndexes = (lst, x, y) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[x])\n      col.push(lstCol[y])\n    }\n  }\n  return [row, col]\n}\n\nconst getColWithIndexes = (lst, y) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[y])\n      col.push(lstCol)\n    }\n  }\n  return [row, col]\n}\n\nconst getCellsWithIndexes = (lst, x, y) => {\n  const row = []\n  const col = []\n  for (let i = 0; i < lst.length; i++) {\n    const lstRow = lst[i]\n    for (let j = 0; j < lstRow.length; j++) {\n      const lstCol = lstRow[j]\n      row.push(lstCol[x])\n      col.push(lstCol[y])\n    }\n  }\n  return [row, col]\n}\n\nmodule.exports = {\n  "}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const arraySorted = array.slice(0);\n  let currentSum = 0;\n  for (let index = 0; index < array.length - 1; index++) {\n    currentSum += array[index];\n    if (currentSum % 2 === 1) {\n      arraySorted.push(array[index]);\n      currentSum -= array[index];\n    }\n  }\n  arraySorted.push(array[array.length - 1]);\n  return arraySorted;\n};\n\nexport default sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  if (!s) {\n    return '';\n  }\n  let l = s.length,\n    d = l,\n    i = 0,\n    k = 0,\n    x = 0,\n    r = '',\n    rv = '';\n  while (i < l) {\n    x = (s.charCodeAt(i) - k) % d;\n    if (x < 0) {\n      x += d;\n    }\n    rv += s.charAt(i);\n    rv += s.charAt(x);\n    i++;\n    k++;\n  }\n  return rv;\n};\n\nmodule.exports = encrypt;\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n    if(lst.length === 0) return null;\n    let smallest = lst[0];\n    let index = 0;\n    for(let i = 1; i < lst.length; i++) {\n        if(lst[i] < smallest) {\n            smallest = lst[i];\n            index = i;\n        }\n    }\n    return index;\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]) === 2);\nconsole.log(nextSmallest([5, 1, 4, 3, 2]) === 2);\nconsole.log(nextSmallest([]) === null);\nconsole.log(nextSmallest([1, 1]) === null);\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const words = S.split(\" \")\n  return words.find((w) => w.includes(\"i\"))\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return (x + y + z) === x + y + z;\n}\n\nconsole.log(anyInt(5, 2, 7)); //true\nconsole.log(anyInt(3, 2, 2)); //false\nconsole.log(anyInt(3, -2, 1)); //true\nconsole.log(anyInt(3.6, -2.2, 2)); //false\n\n/*  AnyString\n  The AnyString Function takes a string as an argument, and returns\n  true if the string contains ANY of the provided strings.\n  Examples\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\", \"brown\") ➞ true\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\") ➞ true\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\", \"brown\", \"fox\") ➞ true\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\", \"brown\", \"fox\", \"jumps\") ➞ true\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\") ➞ true\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\") ➞ true\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\") ➞ true\n  anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\") ➞ true\n  */\nconst anyString = (s, ss) => {\n  return s.includes(ss);\n}\n\nconsole.log(anyString(\"the quick brown fox jumps over the lazy dog\", \"quick\")); //true\nconsole.log(anyString(\"the quick brown fox jumps over the lazy dog\", \"fox\")); //true\nconsole.log(anyString(\"the quick brown fox jumps over the lazy dog\", \"fox\", \"jumps\")); //true\nconsole.log(anyString(\"the quick brown fox jumps over the lazy dog\", \"fox\", \"jumps\", \"over\")); //true\nconsole.log(anyString(\"the quick brown fox jumps over the lazy dog\", \"fox\", \"jumps\", \"over\", \"the\")); //true\nconsole.log(anyString(\"the quick brown fox jumps over the lazy dog\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\")); //true\nconsole.log(anyString(\"the quick brown fox jumps over the lazy dog\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\")); //true\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const vowels = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']\n    const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Z']\n\n    const consonantCount = {\n        A: 0,\n        E: 0,\n        I: 0,\n        O: 0,\n        U: 0,\n        a: 0,\n        e: 0,\n        i: 0,\n        o: 0,\n        u: 0,\n        B: 0,\n        C: 0,\n        D: 0,\n        F: 0,\n        G: 0,\n        H: 0,\n        J: 0,\n        K: 0,\n        L: 0,\n        M: 0,\n        N: 0,\n        P: 0,\n        Q: 0,\n        R: 0,\n        S: 0,\n        T: 0,\n        V: 0,\n        W: 0,\n        X: 0,\n        Z: 0\n    }\n\n    const vowelCount = {\n        A: 0,\n        E: 0,\n        I: 0,\n        O: 0,\n        U: 0,\n        a: 0,\n        e: 0,\n        i: 0,\n        o: 0,\n        u: 0,\n        B: 0,\n        C: 0,\n        D: 0,\n        F: 0,\n        G: 0,\n        H: 0,\n        J: 0,\n        K: 0,\n        L: 0,\n        M: 0,\n        N: 0,\n        P: 0,\n        Q: 0,\n        R: 0,\n        S: 0,\n        T: 0,\n        V: 0,\n        W: 0,\n        X: 0,\n        Z: 0\n    }\n\n    for (const letter of message) {\n        if (vowels.includes(letter)) {\n            vowelCount[letter] += 1\n        } else if (consonants.includes(letter)) {\n            consonantCount[letter] += 1\n        }\n    }\n\n    for (const letter of vowels) {\n        if (consonantCount[letter] % 2 === 0) {\n            consonantCount[letter] -= consonantCount[letter]\n        }\n    }\n\n    for (const letter of consonants) {\n        if (vowelCount[letter] % 2 === 0) {\n            vowelCount[letter] -= vowelCount[letter]\n        }\n    }\n\n    const result = ''\n    for (const vowel of vowels) {\n        result += vowelCount[vowel] > consonantCount[vowel]? consonantCount[vowel] : vowelCount[vowel]\n    }\n    for (const consonant of consonants) {\n        result += vowelCount[consonant] > consonantCount[consonant]? consonantCount[consonant] : vowelCount[consonant]\n    }\n\n    return result\n}\n\n// TESTING\nconst test = () => {\n    const result = encode('This is a message')\n    console.log(`${result}`)\n}\n\n// MAIN\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let total = 0\n  lst.forEach((e) => {\n    total += e\n  })\n  return total\n}\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]))\n\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]))\n\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]))\n\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]))\n\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]))\n\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const checker = (value) => {\n    return (typeof value ==='string')\n  }\n  const checker2 = (value) => {\n    return (typeof value ==='string' || typeof value === 'number')\n  }\n  const checker3 = (value) => {\n    return (typeof value ==='string' || value instanceof String)\n  }\n  const checker4 = (value) => {\n    return (typeof value === 'object')\n  }\n  return Object.keys(dict).every(key => {\n    return checker(dict[key]) && checker2(dict[key]) && checker3(dict[key]) && checker4(dict[key])\n  })\n}\n\nmodule.exports = checkDictCase\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const result = [];\n  for (let i = 2; i <= n; i++) {\n    const prime = true;\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        prime = false;\n      }\n    }\n    if (prime) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\n// Counting Primes in an Array\n/*\n  CountingPrimes(array) takes an array and returns the number of primes\n  in the array.\n  For example:\n  CountingPrimes([2,3,5,7,11,13,17,19]) => 6\n  CountingPrimes([]) => 0\n  CountingPrimes([1,2,3]) => 0\n  CountingPrimes([2,3,5,7,11,13,17,19,21]) => 6\n  CountingPrimes([0,1,2]) => 0\n  */\nconst CountingPrimes = (array) => {\n  let count = 0;\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 2; j < array[i]; j++) {\n      if (array[i] % j === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n// Counting Primes in a Range\n/*\n  CountingPrimesInRange(min, max) takes a min and max value, and\n  returns the number of primes in the range [min, max].\n  For example:\n  CountingPrimesInRange(2, 4) => 2\n  CountingPrimesInRange(2, 3) => 0\n  CountingPrimesInRange(2, 5) => 2\n  CountingPrimesInRange(2, 7) => 3\n  CountingPrimesInRange(2, 11) => 5\n  CountingPrimesInRange(2, 13) => 5\n  CountingPrimesInRange(2, 17) => 7\n  CountingPrimesInRange(2, 19) => 7\n  CountingPrimesInRange(2, 21) => 9\n  CountingPrimesInRange(2, 23) => 11\n  */\nconst CountingPrimesInRange = (min, max) => {\n  let count = 0;\n  for (let i = min; i < max; i++) {\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n// Sum\n/*\n  Sum(array) takes an array and returns the sum of all values in the\n  array.\n  For example:\n  Sum([2,3,5,7,11,13,17,19]) => 30\n  Sum([]) => 0\n  Sum([1,2,3]) => 6\n  Sum([2,3,5,7,11,13,17,19,21]) => 37\n  Sum([0,1,2]) => 0\n  */\nconst Sum = (array) => {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    sum += array[i];\n  }\n  return sum;\n};\n\n// IsPrime\n/*\n  IsPrime(n) takes a number and returns true if n is prime,\n  false if n is not prime.\n  For example:\n  IsPrime(2) => true\n  IsPrime(5) => true\n  IsPrime(6) => false\n  IsPrime(0) => false\n  IsPrime(1) => false\n  IsPrime(12) => false\n  */\nconst IsPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// Factorial\n/*\n  Factorial(n) takes a number n and returns the factorial of n.\n  For example:\n  Factorial(0) => 1\n  Factorial(1) => 1\n  Factorial(5) => 120\n  Factorial(10) => 3628800\n  Factorial(30) => 7779339900\n  Factorial(40) => 12056339906000\n  Factorial(45) => 1404193500062500\n  Factorial(50) => 12441904604314400\n  Factorial(60) => 6710886103515900000\n  Factorial(70) => 7233149439079175500\n  Factorial(80) => 60783941209863420000\n  Factorial(90) => 5798057186466262500000\n  Factorial(100) => 5050307069631552000\n  Factorial(105) => 4779526576828996500000\n  Factorial(110) => 44976376028286594000000\n  Factorial(120) => 371589120064681554000000\n  Factorial(130) => 362859402054996955000000\n  Factorial(140) => 358543648769455616000000\n  Factorial(150) => 344597651285553230000000\n  Factorial(160) => 339914792735085888000000\n  Factorial(170) => 3317079954847491600000000\n  Factorial(180) => 328152925643466682000000000\n  Factorial(190) => 3211308864881687240000000000\n  Factorial(200) => 320007221305686550000000000000\n  Factorial(210) => 3200529"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  // 1)\n  if (a === 0) {\n    return 0;\n  }\n\n  // 2)\n  if (b === 0) {\n    return 0;\n  }\n\n  // 3)\n  if (a < 0 && b < 0) {\n    return -multiply(-a, -b);\n  }\n\n  // 4)\n  if (a < 0) {\n    return multiply(b, a);\n  }\n\n  // 5)\n  if (b < 0) {\n    return multiply(a, -b);\n  }\n\n  // 6)\n  if (a === b) {\n    return 1;\n  }\n\n  // 7)\n  return a * b;\n};\n\nconst add = (a, b) => {\n  return multiply(a, b) + multiply(b, a);\n};\n\nconst subtract = (a, b) => {\n  return multiply(a, b) - multiply(b, a);\n};\n\nconst divide = (a, b) => {\n  return multiply(a, b) / multiply(b, b);\n};\n\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n\n  if (n === 2) {\n    return true;\n  }\n\n  if (n % 2 === 0) {\n    return false;\n  }\n\n  const sqrt = Math.sqrt(n);\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconst findPrimeFactor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\nconst getPrimeFactors = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i <= n) {\n    if (isPrime(i)) {\n      factors.push(i);\n      n = n - i;\n    }\n\n    i++;\n  }\n\n  return factors;\n};\n\n// 1)\nconst p1 = add(12, 20);\nconsole.log(p1); // 50\n\n// 2)\nconst p2 = subtract(14, 15);\nconsole.log(p2); // -5\n\n// 3)\nconst p3 = subtract(1, 2);\nconsole.log(p3); // -1\n\n// 4)\nconst p4 = multiply(2, 3);\nconsole.log(p4); // 6\n\n// 5)\nconst p5 = multiply(4, 5);\nconsole.log(p5); // 20\n\n// 6)\nconst p6 = divide(1, 3);\nconsole.log(p6); // 1\n\n// 7)\nconst p7 = findPrimeFactor(100);\nconsole.log(p7); // 100\n\n// 8)\nconst p8 = getPrimeFactors(1000);\nconsole.log(p8); // [2, 3, 5, 7]\n\n// 9)\nconst p9 = add(1, 1);\nconsole.log(p9); // 2\n\n// 10)\nconst p10 = subtract(1, 1);\nconsole.log(p10); // 0\n\n// 11)\nconst p11 = multiply(2, 2);\nconsole.log(p11); // 4\n\n// 12)\nconst p12 = divide(2, 2);\nconsole.log(p12); // 1\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let upper = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n  }\n  return upper;\n};\n\nconst countLower = (s) => {\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase()!== s[i]) lower++;\n  }\n  return lower;\n};\n\nconst countUpperAndLower = (s) => {\n  let upper = 0;\n  let lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n  }\n  return upper + lower;\n};\n\nconst countUpperAndLowerAndSymbols = (s) => {\n  let upper = 0;\n  let lower = 0;\n  let symbols = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n    if (s[i]!=='') symbols++;\n  }\n  return upper + lower + symbols;\n};\n\nconst countUpperAndLowerAndSymbolsAndSpecialChars = (s) => {\n  let upper = 0;\n  let lower = 0;\n  let symbols = 0;\n  let specialChars = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n    if (s[i]!=='') symbols++;\n    if (s[i]!== '*') specialChars++;\n  }\n  return upper + lower + symbols + specialChars;\n};\n\nconst countUpperAndLowerAndSymbolsAndSpecialCharsAndNumbers = (s) => {\n  let upper = 0;\n  let lower = 0;\n  let symbols = 0;\n  let specialChars = 0;\n  let numbers = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n    if (s[i]!=='') symbols++;\n    if (s[i]!== '*') specialChars++;\n    if (isNaN(s[i])) numbers++;\n  }\n  return upper + lower + symbols + specialChars + numbers;\n};\n\nconst countUpperAndLowerAndSymbolsAndNumbersAndSpecialChars = (s) => {\n  let upper = 0;\n  let lower = 0;\n  let symbols = 0;\n  let specialChars = 0;\n  let numbers = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n    if (s[i]!=='') symbols++;\n    if (s[i]!== '*') specialChars++;\n    if (isNaN(s[i])) numbers++;\n  }\n  return upper + lower + symbols + specialChars + numbers;\n};\n\nconst countUpperAndLowerAndSymbolsAndNumbersAndSpecialCharsAndNumbers = (s) => {\n  let upper = 0;\n  let lower = 0;\n  let symbols = 0;\n  let specialChars = 0;\n  let numbers = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n    if (s[i]!=='') symbols++;\n    if (s[i]!== '*') specialChars++;\n    if (isNaN(s[i])) numbers++;\n  }\n  return upper + lower + symbols + specialChars + numbers;\n};\n\nconst countUpperAndLowerAndSymbolsAndNumbersAndSpecialCharsAndNumbersAndNumbers = (s) => {\n  let upper = 0;\n  let lower = 0;\n  let symbols = 0;\n  let specialChars = 0;\n  let numbers = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n    if (s[i]!=='') symbols++;\n    if (s[i]!== '*') specialChars++;\n    if (isNaN(s[i])) numbers++;\n  }\n  return upper + lower + symbols + specialChars + numbers;\n};\n\nconst countUpperAndLowerAndSymbolsAndNumbersAndSpecialCharsAndNumbersAndNumbers = (s) => {\n  let upper = 0;\n  let lower = 0;\n  let symbols = 0;\n  let specialChars = 0;\n  let numbers = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase()!== s[i]) upper++;\n    if (s[i].toLowerCase()!== s[i]) lower++;\n    if (s[i]!=='') symbols++;\n    if (s[i]!== '*') specialChars++;\n    if (isNaN(s[i])) numbers++;\n  }\n  return upper"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const int = Math.floor(value);\n  const frac = value - int;\n  if (Math.abs(frac) < 0.0000000001) {\n    return int;\n  } else {\n    const lower = int - frac;\n    const upper = int + frac;\n    const smaller = Math.min(lower, upper);\n    const larger = Math.max(lower, upper);\n    return smaller + (larger - smaller) / 2;\n  }\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    let pile = []\n    for (let i = 1; i <= n; i++) {\n        pile.push(i)\n    }\n    return pile\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst pileOfStones = (n) => {\n    let pile = []\n    for (let i = 1; i <= n; i++) {\n        pile.push(makeAPile(i))\n    }\n    return pile\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst pileOfStones = (n) => {\n    let pile = []\n    for (let i = 1; i <= n; i++) {\n        pile.push(makeAPile(i))\n    }\n    return pile\n}\n\nconst getNextLevel = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1])\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevelS = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevelS = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevelS = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevel = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevel = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevel = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevel = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevel = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    let i = n + 1\n    while (i <= pile.length) {\n        nextLevel.push(pile[i - 1].slice())\n        i = i + 1\n    }\n    return nextLevel\n}\n\nconst getNextLevel = (n) => {\n    let pile = pileOfStones(n)\n    let nextLevel = []\n    "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = [];\n  let word = '';\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      words.push(word);\n      word = '';\n    } else {\n      word += s[i];\n    }\n  }\n  if (word!== '') {\n    words.push(word);\n  }\n  return words;\n}\n\n/*\n  Split the string into words, ignoring whitespace and commas, and return the\n  word array\n  \n  For example:\n  wordsString(\" Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words = (s) => {\n  let words = s.split(/[\\s,]/);\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].toLowerCase();\n  }\n  return words;\n}\n\n/*\n  Return the array of words from the given string, ignoring case\n  \n  For example:\n  words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsCaseInsensitive = (s) => {\n  let words = s.toLowerCase().split(/[\\s,]/);\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].toLowerCase();\n  }\n  return words;\n}\n\n/*\n  Returns the string of the first word in the array of words\n  \n  For example:\n  words(\"Hi, my name is John\") == \"Hi\"\n  words(\"One, two, three, four, five, six\") == \"One\"\n  words(\"One, two, three, four, five, six\") == \"One\"\n  */\nconst firstWord = (s) => {\n  let words = s.split(/[\\s,]/);\n  return words[0];\n}\n\n/*\n  Returns the string of the last word in the array of words\n  \n  For example:\n  words(\"Hi, my name is John\") == \"John\"\n  words(\"One, two, three, four, five, six\") == \"six\"\n  words(\"One, two, three, four, five, six\") == \"six\"\n  */\nconst lastWord = (s) => {\n  let words = s.split(/[\\s,]/);\n  return words[words.length - 1];\n}\n\n/*\n  Returns the string of the middle word in the array of words\n  \n  For example:\n  words(\"Hi, my name is John\") == \"my\"\n  words(\"One, two, three, four, five, six\") == \"four\"\n  words(\"One, two, three, four, five, six\") == \"four\"\n  */\nconst middleWord = (s) => {\n  let words = s.split(/[\\s,]/);\n  return words[1];\n}\n\n/*\n  Return an array of the given string, with all the words in lowercase\n  \n  For example:\n  words(\"Hi, my name is John\") == [\"hi\", \"my\", \"name\", \"is\", \"john\"]\n  words(\"One, two, three, four, five, six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words(\"One, two, three, four, five, six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words(\"One, two, three, four, five, six\") == [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst lowerCaseWords = (s) => {\n  let words = s.split(/[\\s,]/);\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].toLowerCase();\n  }\n  return words;\n}\n\n/*\n  Return an array of the given string, with all the words in uppercase\n  \n  For example:\n  words(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  words(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst upperCaseWords = (s) => {\n  let words = s.split(/[\\s,]/);\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words["}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  const evenNum = x + y;\n  const evenLength = Math.min(x, y);\n  return evenNum <= evenLength? evenNum : -1;\n};\n\nconst _chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  const evenNum = x + y;\n  const evenLength = Math.min(x, y);\n  return evenNum <= evenLength? evenNum : -1;\n};\n\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return _chooseNum(x, y);\n  }\n  return _chooseNum(x, y);\n};\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n < m) {\n    return -1;\n  }\n\n  const num = n - 1;\n  const den = m - 1;\n  let avg = Math.round(num / den);\n\n  // if avg is less than 0, round up\n  if (avg < 0) {\n    avg = 1;\n  }\n\n  return avg;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = [...x].filter(x => x.toString().length > 1);\n  return digits.reduce((acc, x) => {\n    let y = x.toString();\n    return [...acc, y].sort().join('');\n  }, []);\n}\n\nconst uniqueDigits = (x) => {\n  const digits = [...x].filter(x => x.toString().length > 1);\n  return digits.reduce((acc, x) => {\n    let y = x.toString();\n    return [...acc, y].sort().join('');\n  }, []);\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\nconsole.log(uniqueDigits([152, 323, 1422, 10]));<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  arr.sort((a, b) => {\n    return a.length > b.length;\n  });\n  arr.reverse();\n  let output = [];\n  for (let i = 0; i < arr.length; i++) {\n    output.push(arr[i]);\n  }\n  return output;\n};\n\nexport default byLength;\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    const a = [];\n    for (let i = 1; i <= n; i += 2) {\n        a.push(i);\n    }\n    return a;\n};\n\nconsole.log(f(5));\n\n/* impLeMeNt the funCTion fThatTakesAProperlyPaddedListOfNumbersAsParametR\n  And ReTuRs a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    const a = [];\n    for (let i = 1; i <= n; i += 2) {\n        a.push(i);\n    }\n    return a;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    let s = \"\" + i\n    while (s.length > 0) {\n      let rev = \"\" + s.slice(s.length - 1, 0, 1)\n      if (s === rev) {\n        count += 1\n      }\n      s = s.slice(0, s.length - 1, 1)\n    }\n  }\n  return (count % 2 === 0? count / 2 : count)\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  return arr.filter(e => e > 0).length\n}\n\n/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  return arr.filter(e => e > 0).length\n}\n\nconst sumNums = (arr) => {\n  return arr.reduce((prev, cur) => prev + cur)\n}\n\nconst averageNums = (arr) => {\n  return sumNums(arr) / arr.length\n}\n\nexport { countNums, sumNums, averageNums }\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const size = arr.length;\n  const max = arr[0];\n  let i = 1;\n  while (i < size) {\n    if (arr[i] > max) {\n      const tmp = arr[i];\n      arr[i] = arr[i - 1];\n      arr[i - 1] = tmp;\n      i++;\n      return true;\n    }\n    i++;\n  }\n  return false;\n};\n\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return \"No\"\n  }\n  const num1 = lst1[0]\n  const num2 = lst2[0]\n  if (num1 === num2) {\n    return \"Yes\"\n  }\n  if (num1 > num2) {\n    return \"No\"\n  }\n  const nums = [num1, num2]\n  for (let i = 1; i < lst1.length; i++) {\n    if (lst1[i] === lst2[i]) {\n      continue\n    }\n    if (nums.indexOf(lst1[i]) === -1) {\n      return \"No\"\n    }\n    if (nums.indexOf(lst2[i]) === -1) {\n      return \"No\"\n    }\n  }\n  return \"Yes\"\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const test = test.split(' ');\n  const frequency = {};\n  for (let i = 0; i < test.length; i++) {\n    if (frequency.hasOwnProperty(test[i])) {\n      frequency[test[i]]++;\n    } else {\n      frequency[test[i]] = 1;\n    }\n  }\n  return frequency;\n}\n\n// histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n// histogram('a b b a') == {'a': 2, 'b': 2}\n// histogram('a b c a b') == {'a': 2, 'b': 2}\n// histogram('b b b b a') == {'b': 4}\n// histogram('') == {}\n\nconsole.log(histogram('a b c'));\n// {'a': 1, 'b': 1, 'c': 1}\nconsole.log(histogram('a b b a'));\n// {'a': 2, 'b': 2}\nconsole.log(histogram('a b c a b'));\n// {'a': 2, 'b': 2}\nconsole.log(histogram('b b b b a'));\n// {'b': 4}\nconsole.log(histogram(''));\n// {}<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const cLen = c.length;\n    let r = [];\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== c[cLen - 1 - i]) {\n            r.push(s[i]);\n        }\n    }\n    if (r.length === 0) {\n        return [s, false];\n    }\n    return [r.reverse().join(''), true];\n}\n\nconst isPalindrome = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    while (i < j) {\n        if (s[i]!== s[j]) {\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\nconst main = () => {\n    const s = readLine();\n    const c = readLine();\n    const [res, isPal] = reverseDelete(s, c);\n    print(`${res}`);\n    if (isPal) {\n        print(`The result is a palindrome.`);\n    } else {\n        print(`The result is not a palindrome.`);\n    }\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const out = [];\n  const result = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    let temp = 0;\n    let number = lst[i];\n\n    for (let j = 0; j < number.length; j++) {\n      if (number.charAt(j) % 2 === 1) {\n        temp = temp + 1;\n      }\n    }\n    result.push(temp);\n  }\n  out.push(result.length);\n  return out;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const max = nums[0];\n  let minSum = nums[0];\n  for (let i = 1; i < nums.length; i++) {\n    if (nums[i] < 0) {\n      return -1;\n    }\n    if (minSum > nums[i]) {\n      minSum = nums[i];\n    }\n    if (minSum < max) {\n      minSum += nums[i];\n    }\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  let cnt = 0;\n  for (let i = 0; i < grid.length; i++) {\n    let sum = 0;\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j]) sum += 1;\n    }\n    if (sum >= capacity) {\n      cnt++;\n    }\n  }\n  return cnt;\n};\n\nconst main = async () => {\n  let res = await maxFill(\n    [\n      [0, 0, 1, 0],\n      [0, 1, 0, 0],\n      [1, 1, 1, 1]\n    ],\n    1\n  );\n  console.log(res);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let isPositive = false\n  let tempValue = 0\n  let tempValue2 = 0\n\n  let sortedArray = []\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      isPositive = true\n    }\n    tempValue = arr[i]\n    if (isPositive) {\n      tempValue2 = tempValue * -1\n      if (tempValue2 > 0) {\n        sortedArray.unshift(tempValue2)\n      } else {\n        sortedArray.push(tempValue2)\n      }\n    } else {\n      sortedArray.push(tempValue)\n    }\n  }\n  return sortedArray\n}\n\n/*\n  INtErminal NUmber oF ONes In THeir Binary RepresentatiOn\n\n  >>> binaryNumberOfOnes(5)\n  [0, 0, 0, 0, 1]\n  >>> binaryNumberOfOnes(15)\n  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(10)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(16)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(15)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(5)\n  [0, 0, 0, 0, 1]\n  >>> binaryNumberOfOnes(0)\n  [0, 0, 0, 0, 0]\n  >>> binaryNumberOfOnes(4)\n  [0, 0, 0, 0]\n  >>> binaryNumberOfOnes(5)\n  [0, 0, 0, 0, 1]\n  >>> binaryNumberOfOnes(10)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(16)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(15)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(16)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(10)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(0)\n  [0, 0, 0, 0, 0]\n  >>> binaryNumberOfOnes(5)\n  [0, 0, 0, 0, 1]\n  >>> binaryNumberOfOnes(0)\n  [0, 0, 0, 0, 0]\n  >>> binaryNumberOfOnes(4)\n  [0, 0, 0, 0]\n  >>> binaryNumberOfOnes(5)\n  [0, 0, 0, 0, 1]\n  >>> binaryNumberOfOnes(10)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(16)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(15)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(16)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(10)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(0)\n  [0, 0, 0, 0, 0]\n  >>> binaryNumberOfOnes(5)\n  [0, 0, 0, 0, 1]\n  >>> binaryNumberOfOnes(0)\n  [0, 0, 0, 0, 0]\n  >>> binaryNumberOfOnes(4)\n  [0, 0, 0, 0]\n  >>> binaryNumberOfOnes(5)\n  [0, 0, 0, 0, 1]\n  >>> binaryNumberOfOnes(10)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(16)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(15)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(16)\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n  >>> binaryNumberOfOnes(10)\n  [1"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    var r = [];\n    var s = s.toLowerCase();\n    var l = s.length;\n    var i = 0;\n    var j = 0;\n    var k = 0;\n    var word = \"\";\n    while (i < l) {\n        var w = s.charCodeAt(i);\n        if (w >= 97 && w <= 122) { // a-z\n            while (j < n) {\n                var w2 = s.charCodeAt(j);\n                if (w2 >= 97 && w2 <= 122) { // a-z\n                    if (w2 < w) {\n                        break;\n                    }\n                    word += s.charAt(j);\n                    j++;\n                }\n            }\n            r.push(word);\n            word = \"\";\n            j = 0;\n        } else if (w >= 65 && w <= 90) { // A-Z\n            while (j < n) {\n                var w2 = s.charCodeAt(j);\n                if (w2 >= 97 && w2 <= 122) { // a-z\n                    if (w2 > w) {\n                        break;\n                    }\n                    word += s.charAt(j);\n                    j++;\n                }\n            }\n            r.push(word);\n            word = \"\";\n            j = 0;\n        } else if (w == 32) { // Space\n            if (j!= 0) {\n                word += s.charAt(j);\n                j++;\n            }\n        } else if (w == 13) { // Newline\n            if (word!= \"\") {\n                r.push(word);\n            }\n            word = \"\";\n            j = 0;\n        }\n        i++;\n    }\n    if (word!= \"\") {\n        r.push(word);\n    }\n    return r;\n};\n\n/*Given a stRing s, return the number of lines in that string.\n  You mAy tAIlLE tHe number nOt tO be NUmeric.\n  Examples:\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==> 3\n  lines(\"Hello world\") ==>"}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u'];\n\tconst vowelCount = word.split('').reduce((v, char) => {\n\t\tif(vowels.indexOf(char) > -1) {\n\t\t\tv++;\n\t\t}\n\t\treturn v;\n\t}, 0);\n\tif(vowelCount > 1) {\n\t\treturn word.slice(word.length - 1);\n\t} else {\n\t\treturn word;\n\t}\n}\n\nconst isVowel = (char) => {\n\tif(char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nconst isVowelNot = (char) => {\n\tif(char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u') {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\nconst isVowelOr = (char) => {\n\tif(char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char == 'A' || char == 'E' || char == 'I' || char == 'O' || char == 'U') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nconst getAllVowels = (word) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\treturn vowels.filter(isVowel);\n}\n\nconst getAllNonVowels = (word) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\treturn vowels.filter(isVowelNot);\n}\n\nconst getAllVowelsAndNonVowels = (word) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tconst nonVowels = [' ','','','','','','','','',''];\n\treturn vowels.concat(nonVowels);\n}\n\nconst isVowelAndNonVowel = (char) => {\n\tif(char == 'a' || char == 'e' || char == 'i' || char == 'o' || char == 'u' || char == 'A' || char == 'E' || char == 'I' || char == 'O' || char == 'U') {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\nconst getAllVowelsAndNonVowelsThatAreNotInTheFirstWord = (word) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tconst nonVowels = [' ','','','','','','','','',''];\n\tconst nonVowelsInFirstWord = [...word.split('').reverse()].reverse();\n\tconst nonVowelsAndVowels = vowels.concat(nonVowels);\n\treturn vowelsAndNonVowels.filter((char) => {\n\t\tif(nonVowels.indexOf(char) > -1) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\nconst getAllVowelsThatAreNotInTheFirstWord = (word) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tconst nonVowels = [' ','','','','','','','','',''];\n\tconst nonVowelsInFirstWord = [...word.split('').reverse()].reverse();\n\tconst vowelsAndNonVowels = vowels.concat(nonVowels);\n\treturn vowels.filter((char) => {\n\t\tif(nonVowels.indexOf(char) > -1) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\nconst getAllVowelsThatAreNotInTheFirstWordAndThatAreNotInTheLastWord = (word) => {\n\tconst vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n\tconst nonVowels = [' ','','','','','','','','',''];\n\tconst nonVowelsInFirstWord = [...word.split('').reverse()].reverse();\n\tconst nonVowelsInLastWord = [...word.split('')].reverse();\n\tconst vowelsAndNonVowels = vowels.concat(nonVowels);\n\treturn vowels.filter((char) => {\n\t\tif(nonVowels.indexOf(char) > -1) {\n\t\t\treturn false;\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t});\n}\n\nconst getAll"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if(!lst) {\n    return 'No'\n  }\n  if(lst.length === 1) {\n    return 'Yes'\n  }\n\n  const len = lst.length\n  const last = lst[len-1]\n  if(last === ')') {\n    return 'Yes'\n  }\n  if(last === '(') {\n    return 'No'\n  }\n  if(last === ')') {\n    return matchParens(lst.slice(0,len-1))\n  }\n\n  const left = matchParens(lst.slice(0,len-1))\n  if(left === 'Yes') {\n    return 'Yes'\n  }\n  if(left === 'No') {\n    return 'No'\n  }\n  return 'No'\n}\n\n// Match parens\nconst matchParens2 = (lst) => {\n  if(!lst) {\n    return 'No'\n  }\n  if(lst.length === 1) {\n    return 'Yes'\n  }\n\n  const len = lst.length\n  const last = lst[len-1]\n  if(last === ')') {\n    return 'Yes'\n  }\n  if(last === '(') {\n    return 'No'\n  }\n  if(last === ')') {\n    return matchParens2(lst.slice(0,len-1))\n  }\n\n  const left = matchParens2(lst.slice(0,len-1))\n  if(left === 'Yes') {\n    return 'Yes'\n  }\n  if(left === 'No') {\n    return 'No'\n  }\n  return 'No'\n}\n\n// Match parens\nconst matchParens3 = (lst) => {\n  if(!lst) {\n    return 'No'\n  }\n  if(lst.length === 1) {\n    return 'Yes'\n  }\n\n  const len = lst.length\n  const last = lst[len-1]\n  if(last === ')') {\n    return 'Yes'\n  }\n  if(last === '(') {\n    return 'No'\n  }\n  if(last === ')') {\n    return matchParens3(lst.slice(0,len-1))\n  }\n\n  const left = matchParens3(lst.slice(0,len-1))\n  if(left === 'Yes') {\n    return 'Yes'\n  }\n  if(left === 'No') {\n    return 'No'\n  }\n  return 'No'\n}\n\nconst isValid = (s) => {\n  if(s === null) {\n    return false\n  }\n  const len = s.length\n  if(len === 0) {\n    return false\n  }\n  const last = s[len-1]\n  if(last === '(' || last === ')') {\n    return false\n  }\n  return isValid(s.slice(0,len-1))\n}\n\nconst isValid2 = (s) => {\n  if(s === null) {\n    return false\n  }\n  const len = s.length\n  if(len === 0) {\n    return false\n  }\n  const last = s[len-1]\n  if(last === '(' || last === ')') {\n    return false\n  }\n  return isValid2(s.slice(0,len-1))\n}\n\nconst isValid3 = (s) => {\n  if(s === null) {\n    return false\n  }\n  const len = s.length\n  if(len === 0) {\n    return false\n  }\n  const last = s[len-1]\n  if(last === '(' || last === ')') {\n    return false\n  }\n  return isValid3(s.slice(0,len-1))\n}\n\nconst matchParens = (lst) => {\n  if(!lst) {\n    return 'No'\n  }\n  if(lst.length === 1) {\n    return 'Yes'\n  }\n\n  const len = lst.length\n  const last = lst[len-1]\n  if(last === ')') {\n    return 'Yes'\n  }\n  if(last === '(') {\n    return 'No'\n  }\n  if(last === ')') {\n    return matchParens(lst.slice(0,len-1))\n  }\n\n  const left = matchParens(lst.slice(0,len-1))\n  if(left === 'Yes') {\n    return 'Yes'\n  }\n  if(left === 'No') {\n    return 'No'\n  }\n  return 'No'\n}\n\nconst matchParens2 = (lst) => {\n  if(!lst) {\n    return 'No'\n  }\n  if(lst.length === 1) {\n    return 'Yes'\n  }\n\n  const len = lst.length\n  const last = lst[len-1]\n  if(last === ')') {\n    return 'Yes'\n  }\n  if(last === '(') {\n    return 'No'\n  }\n  if(last === ')') {\n    return matchP"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [...arr];\n  const sort = (arr, k) => {\n    if (k <= 1) {\n      return arr;\n    }\n    let start = 0;\n    let end = arr.length - 1;\n    const length = end - start + 1;\n    while (length > k) {\n      const max = arr[end];\n      let index = start;\n      while (arr[index] < max) {\n        index++;\n      }\n      arr[end] = arr[index];\n      arr[index] = max;\n      end--;\n      length--;\n    }\n    return arr;\n  };\n  return sort(result, k);\n};\n\nmodule.exports = maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const arr = lst.slice();\n  let sum = 0;\n  while (arr.length > 0) {\n    sum += arr.pop();\n  }\n  return sum;\n};\n\nconst solution = (lst) => {\n  const arr = lst.slice();\n  let sum = 0;\n  while (arr.length > 0) {\n    sum += arr.pop();\n  }\n  return sum;\n};\n\n// console.log(solution([5, 8, 7, 1]));\n// console.log(solution([3, 3, 3, 3, 3]));\n// console.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const ret = 0\n  for (let i = 0; i < k; i++) {\n    ret += arr[i]\n  }\n  return ret\n}\n\nconst sumOfNumbers = (arr, k) => {\n  let ret = 0\n  for (let i = 0; i < k; i++) {\n    ret += arr[i]\n  }\n  return ret\n}\n\nconst findSum = (arr, k) => {\n  let ret = 0\n  let l = 0\n  let r = 0\n  while (l < k && r < arr.length) {\n    const mid = (l + r) >> 1\n    const midSum = addElements(arr, mid)\n    if (midSum < sumOfNumbers(arr, k)) {\n      l = mid + 1\n    } else {\n      r = mid\n    }\n  }\n  return sumOfNumbers(arr, k) - addElements(arr, r)\n}\n\nmodule.exports = findSum\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  return getOddCollatzRec(n, [n]);\n}\n\nconst getOddCollatzRec = (n, c) => {\n  if (n === 1) return c;\n  const p = getOddCollatz(n / 2);\n  return p.concat(c);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const daysInYear = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const day = date.substr(0, 2);\n  const month = months.indexOf(date.substr(3, 3));\n  const year = parseInt(date.substr(6, 4));\n  const dayNumber = parseInt(date.substr(8, 2));\n  const monthNumber = parseInt(date.substr(0, 2));\n  const yearNumber = parseInt(date.substr(6, 4));\n  const dateNumber = parseInt(date.substr(8, 2));\n  if (dayNumber > daysInMonth[month]) {\n    return false;\n  } else if (dayNumber < 1) {\n    return false;\n  } else if (monthNumber > 12 || monthNumber < 1) {\n    return false;\n  } else if (yearNumber < 1000 || yearNumber > 3000) {\n    return false;\n  } else if (yearNumber % 4 === 0 && yearNumber % 100!== 0 || yearNumber % 400 === 0) {\n    if (dateNumber > daysInYear[month]) {\n      return false;\n    }\n  } else if (dateNumber > daysInYear[month]) {\n    return false;\n  }\n  return true;\n};\n\nconst isDate = (date) => {\n  return validDate(date) && typeof date ==='string';\n};\n\nmodule.exports = {\n  isDate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    const words = txt.split(/\\s+/).filter((x) => x.length > 0);\n    const splits = [];\n    let prev = \"\";\n    for (let i = 0; i < words.length; i++) {\n        if (words[i].length > prev.length) {\n            splits.push(words[i]);\n            prev = words[i];\n        }\n    }\n    return splits;\n}\n\nconst getSplit = (txt) => {\n    const split = splitWords(txt);\n    return split;\n}\n\n/*\n  GivEn a sTring Of wOrds, return a list Of wOrds, If No Whitespace exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst getWords = (txt) => {\n    const split = splitWords(txt);\n    return split;\n}\n\nconst countLetters = (txt) => {\n    const words = txt.split(/\\s+/).filter((x) => x.length > 0);\n    return words.reduce((a, b) => {\n        return a + b.length;\n    });\n}\n\nconst getWordsLength = (txt) => {\n    const split = splitWords(txt);\n    return split.length;\n}\n\n/*\n  GivEn a sTring Of wOrds, return a list Of wOrds, If No Whitespace exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst getWordsLength = (txt) => {\n    const split = splitWords(txt);\n    return split.length;\n}\n\nconst getWordCount = (txt) => {\n    const split = splitWords(txt);\n    return split.length;\n}\n\nconst getFirst = (txt) => {\n    const split = splitWords(txt);\n    return split[0];\n}\n\nconst getLast = (txt) => {\n    const split = splitWords(txt);\n    return split[split.length - 1];\n}\n\nconst getLast2 = (txt) => {\n    const split = splitWords(txt);\n    return split[split.length - 2];\n}\n\nconst getWord = (txt, index) => {\n    const split = splitWords(txt);\n    return split[index];\n}\n\nconst getWordAt = (txt, index) => {\n    const split = splitWords(txt);\n    return split[index];\n}\n\nconst getFirstWord = (txt) => {\n    const split = splitWords(txt);\n    return split[0];\n}\n\nconst getLastWord = (txt) => {\n    const split = splitWords(txt);\n    return split[split.length - 1];\n}\n\nconst getWordByLetter = (txt, letter) => {\n    const split = splitWords(txt);\n    return split.find((w) => w.toUpperCase() === letter.toUpperCase());\n}\n\nconst getWordsByLetter = (txt, letter) => {\n    const split = splitWords(txt);\n    return split.filter((w) => w.toUpperCase() === letter.toUpperCase());\n}\n\nconst getWordsWithLetter = (txt, letter) => {\n    const split = splitWords(txt);\n    return split.filter((w) => w.toUpperCase() === letter.toUpperCase());\n}\n\nconst getWordCount = (txt) => {\n    const split = splitWords(txt);\n    return split.length;\n}\n\nconst getWordAt = (txt, index) => {\n    const split = splitWords(txt);\n    return split[index];\n}\n\nconst getWordByIndex = (txt, index) => {\n    const split = splitWords(txt);\n    return split[index];\n}\n\nconst getWordByLetter = (txt, letter) => {\n    const split = splitWords(txt);\n    return split.find((w) => w.toUpperCase() === letter.toUpperCase());\n}\n\nconst getWordByIndex = (txt, index) => {\n    const split = splitWords(txt);\n    return split[index];\n}\n\nconst getWordByLetter = (txt, letter) => {\n    const split = splitWords(txt);\n    return split.find((w) => w.toUpperCase() === letter.toUpperCase());\n}\n\nconst getWordByLetter = (txt, letter) => {\n    const split = splitWords(txt);\n    return split.find((w) => w.toUpperCase() === letter.toUpperCase());\n}\n\nconst"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  let lastNumber = lst[0]\n  let isSorted = true\n  lst.forEach((x) => {\n    if (x!== lastNumber) {\n      isSorted = false\n      lastNumber = x\n    }\n  })\n  return isSorted\n}\n\n/*\n  GivEn a list of words, return aDict of all the words.\n  Examples\n  wordsToDict([ 'foo', 'bar', 'baz' ]) ➞ { foo: 1, bar: 1, baz: 1 }\n  wordsToDict(['foo', 'bar', 'baz', 'foobar']) ➞ { foobar: 1 }\n  */\nconst wordsToDict = (words) => {\n  const dict = {}\n  words.forEach((word) => {\n    dict[word] = dict[word]? dict[word] + 1 : 1\n  })\n  return dict\n}\n\n/*\n  Given a list of words, return a list of all the words in ascending\n  order.\n  Examples\n  wordsToAscending([ 'foo', 'bar', 'baz' ]) ➞ [ 'foo', 'bar', 'baz' ]\n  wordsToAscending(['foo', 'bar', 'baz', 'foobar']) ➞ [ 'foo', 'bar', 'baz', 'foobar' ]\n  */\nconst wordsToAscending = (words) => {\n  let sorted = words.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of words, return a list of all the words in descending\n  order.\n  Examples\n  wordsToDescending([ 'foo', 'bar', 'baz' ]) ➞ [ 'baz', 'bar', 'foo' ]\n  wordsToDescending(['foo', 'bar', 'baz', 'foobar']) ➞ [ 'foobar', 'baz', 'bar', 'foo' ]\n  */\nconst wordsToDescending = (words) => {\n  let sorted = words.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    }\n    return 0\n  })\n  return sorted\n}\n\n/*\n  Given a list of words, return the list of all the words with the\n  highest count.\n  Examples\n  wordsToHighest([ 'foo', 'bar', 'baz', 'foobar' ]) ➞ [ 'foobar' ]\n  */\nconst wordsToHighest = (words) => {\n  return words.reduce((highest, word) => {\n    if (highest.length < word.length) {\n      return [word]\n    }\n    const current = highest.find((x) => {\n      return x.length === word.length\n    })\n    if (current) {\n      if (word > current) {\n        return [word]\n      }\n    }\n    return [...highest, word]\n  })\n}\n\n/*\n  Given a list of words, return the list of all the words with the\n  lowest count.\n  Examples\n  wordsToLowest([ 'foo', 'bar', 'baz', 'foobar' ]) ➞ [ 'foo', 'bar' ]\n  */\nconst wordsToLowest = (words) => {\n  return words.reduce((lowest, word) => {\n    if (lowest.length > word.length) {\n      return [word]\n    }\n    const current = lowest.find((x) => {\n      return x.length === word.length\n    })\n    if (current) {\n      if (word < current) {\n        return [word]\n      }\n    }\n    return [...lowest, word]\n  })\n}\n\n/*\n  Given a list of words, return the list of all the words with the\n  highest count.\n  Examples\n  wordsToHighest([ 'foo', 'bar', 'baz', 'foobar' ]) ➞ [ 'foobar' ]\n  */\nconst wordsToAll = (words) => {\n  return words.reduce((highest, word) => {\n    if (highest.length < word.length) {\n      return [word]\n    }\n    const current = highest.find((x) => {\n      return x.length === word.length\n    })\n    if (current) {\n      if (word > current) {\n        return [word]\n      }\n    }\n    return [...highest, word]\n  })\n}\n\n/*\n  Given a list of words, return a list of all the words in descending\n  order, sorted by the number of times they appear in the list.\n  Examples\n  wordsToCount([ 'foo', 'bar', 'baz', 'foobar' ]) ➞ [ 'foobar', 'bar', 'baz', 'foo' ]\n  */\nconst wordsToCount = (words) => {\n  const sorted = words.sort((a, b) => {\n    if (a < b) {\n      return 1\n    } else if (a > b) {\n      return -1\n    "}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > start2 || start2 > end1) {\n    return 'NO';\n  }\n\n  let i = start1;\n  let j = start2;\n  while (i <= end1 && j <= end2) {\n    if (i === j) {\n      return 'YES';\n    }\n    i++;\n    j++;\n  }\n\n  return 'NO';\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let result = 0\n  for (let i = 0; i < arr.length; i++) {\n    result = result + arr[i]\n  }\n  return result\n}\n\n// This method will return the product of two given numbers.\nconst product = (a, b) => a * b\n\n// This method will return the product of two given arrays.\nconst productArr = (arrA, arrB) => arrA.reduce((acc, num, index) => acc * arrB[index], 1)\n\n// This method will return the product of two given arrays.\nconst productArr2 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr3 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr4 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr5 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr6 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr7 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr8 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr9 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr10 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr11 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr12 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr13 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr14 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr15 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr16 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr17 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr18 = (arrA, arrB) => {\n  let arr = arrA.slice(0)\n  arr.push(arrB)\n  return arr.reduce((acc, num) => acc * num, 1)\n}\n\n// This method will return the product of two given arrays.\nconst productArr19 = (arrA, arrB) => {\n  let arr ="}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const [n, m] = [grid.length, grid[0].length]\n  const [n2, m2] = [Math.floor(n / 2), Math.floor(m / 2)]\n  const minPath = []\n  let c = [n2, m2]\n  for (let i = 1; i <= n; i++) {\n    let x = []\n    for (let j = 1; j <= m; j++) {\n      if (i === 1 || j === 1) {\n        x.push(grid[i - 1][j - 1])\n      } else if (i < n2 || j < m2) {\n        x.push(Math.min(grid[i - 1][j - 1], grid[i - 1][j], grid[i][j - 1], grid[i - 1][j]))\n      } else {\n        x.push(grid[i - 1][j - 1])\n      }\n    }\n    minPath.push(x)\n  }\n  return minPath\n}\n\nexport default minPath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let i = 1, j = 2, k = 3;\n  if (n === 0) {\n    return [1];\n  }\n  if (n === 1) {\n    return [3];\n  }\n  if (n === 2) {\n    return [1, 3, 2];\n  }\n  for (let i = 3; i <= n; i++) {\n    let a = 1, b = 0, c = 1, d = 0;\n    let d1 = k, d2 = k + j, d3 = k + j + i;\n    for (let j = 0; j < i - 2; j++) {\n      a = a + b;\n      c = c + d;\n      d = b;\n      b = d1;\n      d1 = d2;\n      d2 = d3;\n      d3 = a + c;\n    }\n    j = i - 2;\n    a = a + b;\n    c = c + d;\n    d = b;\n    b = d1;\n    d1 = d2;\n    d2 = d3;\n    d3 = a + c;\n    let list = [k, j, i, b, a, c, d, d1, d2, d3];\n    k = d3;\n    j = d2;\n    i = d1;\n    b = d;\n    return list;\n  }\n};\n\ntri(5);\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 0;\n  return ((n * (n + 1)) / 2).toString(2).slice(-2);\n};\n\n//TODO: Add test\nexport default function sum(a, b) {\n  // console.log(\"Hello World\");\n  const x = a.length > b.length? a : b;\n  const y = a.length > b.length? b : a;\n  const sum = x.reduce((p, n) => p + n, 0);\n  const diff = sum - y.reduce((p, n) => p + n, 0);\n  // console.log(\"The sum of \" + x + \" and \" + y + \" is \" + sum);\n  // console.log(\"The diff of \" + x + \" and \" + y + \" is \" + diff);\n  return diff;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n    // console.log(string);\n    const bracketCount = string.split(']').length - 1;\n    // console.log(bracketCount);\n    if (bracketCount === 0) {\n        return true;\n    } else if (bracketCount === 1) {\n        return false;\n    } else {\n        const nestedBrackets = string.split(']')[1].split('[')[0];\n        return isNested(nestedBrackets);\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const squares = lst.map((elem) => Math.pow(elem, 2))\n  return squares.reduce((a, b) => a + b)\n}\n\nmodule.exports = sumSquares\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length > 0) {\n    if (/[a-zA-Z]$/.test(txt[txt.length - 1])) {\n      return true;\n    }\n  }\n  return false;\n};\n\n// ##\n// Creates an Array of Strings that are the words\n// In The given String.\nconst getWords = (txt) => {\n  const words = txt.split(\" \");\n  return words.map(x => x.trim());\n};\n\nconst hasOnlyOneChar = (txt) => {\n  return txt.length === 1;\n};\n\nconst hasAWhitespace = (txt) => {\n  return /\\s/.test(txt);\n};\n\nconst hasALetter = (txt) => {\n  return /[a-zA-Z]/.test(txt);\n};\n\nconst hasALetterOrNumber = (txt) => {\n  return /[a-zA-Z0-9]/.test(txt);\n};\n\nconst hasALetterOrNumberOrSpace = (txt) => {\n  return /[a-zA-Z0-9\\s]/.test(txt);\n};\n\n// ##\n// Creates an Array of Strings that are the words\n// In The given String, except for the one Last Char\n// That is a Letter or a Number or a Space.\nconst getWordsExceptLastChar = (txt) => {\n  const words = getWords(txt);\n  if (words.length > 0) {\n    const lastChar = words[words.length - 1];\n    if (!hasOnlyOneChar(lastChar)) {\n      const chars = lastChar.split(\"\");\n      chars.pop();\n      const newWord = chars.join(\"\");\n      words.splice(words.length - 1, 1, newWord);\n    }\n  }\n  return words;\n};\n\n// ##\n// Creates an Array of Strings that are the words\n// In The given String, except for the one Last Char\n// That is a Letter or a Number or a Space, that is not a\n// pArt of A wORd.\nconst getWordsExceptLastCharAndNotAPartOfAWord = (txt) => {\n  const words = getWords(txt);\n  if (words.length > 0) {\n    const lastChar = words[words.length - 1];\n    if (!hasOnlyOneChar(lastChar)) {\n      const chars = lastChar.split(\"\");\n      chars.pop();\n      const newWord = chars.join(\"\");\n      if (checkIfLastCharIsALetter(newWord)) {\n        words.splice(words.length - 1, 1, newWord);\n      }\n    }\n  }\n  return words;\n};\n\n// ##\n// Gets all the Words In A given String.\nconst getAllWords = (txt) => {\n  const words = getWords(txt);\n  return words;\n};\n\n// ##\n// Gets all the Words In A given String.\n// that are not a pArt of A wORd.\nconst getAllWordsNotAPartOfAWord = (txt) => {\n  const words = getWords(txt);\n  if (words.length > 0) {\n    const lastChar = words[words.length - 1];\n    if (!hasOnlyOneChar(lastChar)) {\n      const chars = lastChar.split(\"\");\n      chars.pop();\n      const newWord = chars.join(\"\");\n      if (checkIfLastCharIsALetter(newWord)) {\n        words.splice(words.length - 1, 1, newWord);\n      }\n    }\n  }\n  return words;\n};\n\n// ##\n// Gets all the Words In A given String, except for the last\n// Charater that is a Letter or a Number or a Space.\nconst getAllWordsExceptLastChar = (txt) => {\n  const words = getWordsExceptLastChar(txt);\n  return words;\n};\n\n// ##\n// Gets all the Words In A given String, except for the last\n// Charater that is a Letter or a Number or a Space, that is not a\n// pArt of A wORd.\nconst getAllWordsExceptLastCharAndNotAPartOfAWord = (txt) => {\n  const words = getWordsExceptLastCharAndNotAPartOfAWord(txt);\n  return words;\n};\n\n// ##\n// Gets all the Words in A given String that are not\n// a pArt of A wORd.\nconst getAllWordsNotAPartOfAWord = (txt) => {\n  const words = getWordsExceptLastCharAndNotAPartOfAWord(txt);\n  return words;\n};\n\n// ##\n// Gets all the Words in A given String that are not\n// a pArt of A wORd, except for the last\n// Charater that is a Letter or a Number or a Space.\nconst getAllWordsExceptLastCharAndNotAPartOfAWord = (txt) => {\n  const words = getWordsExceptLastCharAndNotAPartOfAWord(txt);\n  return words;\n};\n\n// ##\n// Gets all the Words in A given String that are not\n// a pArt of A wORd, except for the last\n// Charater that is a Letter or a Number or a Space,\n// that is not a pArt of A wORd.\nconst getAllWordsExceptLastCharAndNotAPartOfAWord = (txt) => {\n  const words = getWordsExceptLastCharAndNotAPartOfAWord(txt);\n  return words;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    let result = -1;\n    let min = arr[0];\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            index = i;\n        }\n    }\n    if (arr[index] >= min) {\n        result = index;\n    }\n    return result;\n}\n\nconst moveToFront = (arr) => {\n    let result = [];\n    let front = arr.splice(0, 1)[0];\n    arr.unshift(front);\n    return arr;\n}\n\nconst moveToBack = (arr) => {\n    let result = [];\n    let back = arr.splice(-1, 1)[0];\n    arr.push(back);\n    return arr;\n}\n\nconst sort = (arr) => {\n    let result = [];\n    arr.sort((a, b) => {\n        return a - b;\n    });\n    return arr;\n}\n\nconst removeDuplicates = (arr) => {\n    let result = [];\n    let index = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i]!== arr[index]) {\n            result.push(arr[i]);\n            index = i;\n        }\n    }\n    return result;\n}\n\nconst arrayToStr = (arr) => {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        result.push(arr[i].toString());\n    }\n    return result.join(' ');\n}\n\nconst arrayToChar = (arr) => {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        result.push(arr[i].toString());\n    }\n    return result.join('\\'');\n}\n\nconst countDuplicates = (arr) => {\n    let result = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === arr[i - 1]) {\n            result++;\n        }\n    }\n    return result;\n}\n\nconst isUnique = (arr) => {\n    let result = true;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === arr[i - 1]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\nconst getArrayLength = (arr) => {\n    let result = arr.length;\n    return result;\n}\n\nconst findKthElement = (arr, k) => {\n    let result = -1;\n    let i = 0;\n    let j = 0;\n    while (i < arr.length && j < k) {\n        if (arr[j] < arr[i]) {\n            i++;\n        } else {\n            result = arr[j];\n            j++;\n        }\n    }\n    return result;\n}\n\nconst arrayUnique = (arr) => {\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        let temp = arr[i];\n        let found = false;\n        for (let j = 0; j < result.length; j++) {\n            if (result[j] === temp) {\n                found = true;\n                break;\n            }\n        }\n        if (!found) {\n            result.push(temp);\n        }\n    }\n    return result;\n}\n\nconst arraySum = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n\nconst getRandomNumber = (min, max) => {\n    let result = Math.floor(Math.random() * (max - min + 1)) + min;\n    return result;\n}\n\nconst getRandomString = (length) => {\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += getRandomNumber(0, 9);\n    }\n    return result;\n}\n\nconst generateRandomArray = (length) => {\n    let result = [];\n    for (let i = 0; i < length; i++) {\n        let arr = getRandomString(10);\n        result.push(arr);\n    }\n    return result;\n}\n\nmodule.exports = {\n    canArrange,\n    moveToFront,\n    moveToBack,\n    sort,\n    removeDuplicates,\n    arrayToStr,\n    arrayToChar,\n    countDuplicates,\n    isUnique,\n    getArrayLength,\n    findKthElement,\n    arrayUnique,\n    arraySum,\n    generateRandomArray,\n    getRandomNumber,\n    getRandomString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (lst.length === 0) {\n    return (null, null)\n  }\n\n  const lstLength = lst.length\n  let currentLargest = lst[0]\n  let currentSmallest = lst[0]\n  for (let i = 1; i < lstLength; i++) {\n    if (lst[i] > currentLargest) {\n      currentLargest = lst[i]\n    } else if (lst[i] < currentSmallest) {\n      currentSmallest = lst[i]\n    }\n  }\n\n  return ([currentLargest, currentSmallest])\n}\n\nmodule.exports = largestSmallestIntegers\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n    var res = a === b;\n    if (res) {\n        return res;\n    }\n\n    if (typeof a === \"string\" && typeof b === \"string\") {\n        return a === b;\n    }\n\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return a === b;\n    }\n\n    if (a === b) {\n        return a;\n    }\n\n    if (a > b) {\n        return a;\n    }\n\n    if (a < b) {\n        return b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the max of the two\n*/\nconSt max = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return Math.max(a, b);\n    }\n\n    if (a > b) {\n        return a;\n    }\n\n    if (b > a) {\n        return b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the min of the two\n*/\nconSt min = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return Math.min(a, b);\n    }\n\n    if (a > b) {\n        return b;\n    }\n\n    if (b > a) {\n        return a;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the sum of the two\n*/\nconSt sum = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return a + b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the product of the two\n*/\nconSt prod = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return a * b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the quotient of the two\n*/\nconSt quo = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return a / b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the modulus of the two\n*/\nconSt mod = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return a % b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the difference of the two\n*/\nconSt diff = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return a - b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the product of the two\n*/\nconSt times = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return a * b;\n    }\n\n    return undefined;\n};\n\n/*\n  Create a function that takes two arguments, and returns\n  the average of the two\n*/\nconSt avg = (a, b) => {\n    if (typeof a === \"number\" && typeof b === \"number\") {\n        return (a + b) / 2;\n    }\n\n    return undefined;\n};\n\nconSt gt = (a, b) => {\n    return a > b;\n};\n\nconSt gte = (a, b) => {\n    return a >= b;\n};\n\nconSt lt = (a, b) => {\n    return a < b;\n};\n\nconSt lte = (a, b) => {\n    return a <= b;\n};\n\nconSt cmp = (a, b) => {\n    return compareOne(a, b);\n};\n\nconSt max_ = (a, b) => {\n    return max(a, b);\n};\n\nconSt min_ = (a, b) => {\n    return min(a, b);\n};\n\nconSt sum_ = (a, b) => {\n    return sum(a, b);\n};\n\nconSt prod_ = (a, b) => {\n    return prod(a, b);\n};\n\nconSt quo_ = (a, b) => {\n    return quo(a, b);\n};\n\nconSt mod_ = (a, b) => {\n    return mod(a, b);\n};\n\nconSt diff_ = (a, b) => {\n    return diff(a, b);\n};\n\nconSt times_ = (a, b) => {\n    return times(a, b);\n};\n\nconSt avg_ = (a, b) => {\n    return avg(a, b);\n};\n\n/*\n  Create a function that returns the value of the argument\n  if it is a real number, and NaN if it is not\n*/\nconSt number = (a) => {\n    if (typeof a === \"number\") {\n        return a;\n    }\n\n    return NaN;\n};\n\n/*\n  Create a function that returns the value of the argument\n  if it is a string, and null if"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n % 2 === 0)\n}\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMBERS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenWithMath = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMBERS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenWithMath2 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath3 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath4 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath5 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath6 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath7 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath8 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath9 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath10 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath11 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath12 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath13 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath14 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath15 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath16 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath17 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath18 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath19 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath20 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath21 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath22 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath23 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath24 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath25 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath26 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath27 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath28 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath29 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath30 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath31 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath32 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath33 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath34 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath35 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath36 = (n) => {\n  return (n % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath37 = (n) => {\n  return (Math.floor(n / 2) % 2 === 0)\n}\n\nconst isEqualToSumEvenWithMath38 = (n) =>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    const factorial = (n) => {\n        if (n === 1) {\n            return 1;\n        }\n        else {\n            return n * factorial(n - 1);\n        }\n    };\n    return factorial(n);\n};\n\n/*\n  The function should return the factorial of the given integer n.\n  The function has to be written in a way so that the given integer n is not\n  less than zero.\n  */\nconst factorial = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial(n - 1);\n};\n\n/*\n  The function should return the factorial of the given integer n.\n  The function has to be written in a way so that the given integer n is not\n  less than zero.\n  */\nconst factorial2 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial2(n - 1);\n};\n\nconst factorial3 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial3(n - 1);\n};\n\nconst factorial4 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial4(n - 1);\n};\n\nconst factorial5 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial5(n - 1);\n};\n\nconst factorial6 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial6(n - 1);\n};\n\nconst factorial7 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial7(n - 1);\n};\n\nconst factorial8 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial8(n - 1);\n};\n\nconst factorial9 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial9(n - 1);\n};\n\nconst factorial10 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial10(n - 1);\n};\n\nconst factorial11 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial11(n - 1);\n};\n\nconst factorial12 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial12(n - 1);\n};\n\nconst factorial13 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial13(n - 1);\n};\n\nconst factorial14 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial14(n - 1);\n};\n\nconst factorial15 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial15(n - 1);\n};\n\nconst factorial16 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial16(n - 1);\n};\n\nconst factorial17 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial17(n - 1);\n};\n\nconst factorial18 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial18(n - 1);\n};\n\nconst factorial19 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial19(n - 1);\n};\n\nconst factorial20 = (n) => {\n    if (n === 0) {\n        return 1;\n    }\n    return n * factorial20(n - 1);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  fixedText = fixedText.replace(spaces, '-')\n  fixedText = fixedText.replace(spaces, '_')\n  fixedText = fixedText.replace(/\\s/g, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a sTRinG has more than maxLenght, \n  Then trim the aLl aREST of spaces from the end of aLl sTRinG\n  \n  fixSpaces(\"Example   longer than 5 chars\", 5) == \"Example\"\n  */\nconst fixSpaces = (text, maxLength) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  if (fixedText.length > maxLength) {\n    fixedText = fixedText.substring(0, maxLength)\n  }\n  fixedText = fixedText.replace(spaces, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a sTRinG has more than maxLenght, \n  Then trim the aLl aREST of spaces from the end of aLl sTRinG\n  \n  fixSpaces(\"Example   longer than 5 chars\", 5) == \"Example\"\n  */\nconst fixSpaces = (text, maxLength) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  if (fixedText.length > maxLength) {\n    fixedText = fixedText.substring(0, maxLength)\n  }\n  fixedText = fixedText.replace(spaces, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a sTRinG has more than maxLenght, \n  Then trim the aLl aREST of spaces from the end of aLl sTRinG\n  \n  fixSpaces(\"Example   longer than 5 chars\", 5) == \"Example\"\n  */\nconst fixSpaces = (text, maxLength) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  if (fixedText.length > maxLength) {\n    fixedText = fixedText.substring(0, maxLength)\n  }\n  fixedText = fixedText.replace(spaces, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a sTRinG has more than maxLenght, \n  Then trim the aLl aREST of spaces from the end of aLl sTRinG\n  \n  fixSpaces(\"Example   longer than 5 chars\", 5) == \"Example\"\n  */\nconst fixSpaces = (text, maxLength) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  if (fixedText.length > maxLength) {\n    fixedText = fixedText.substring(0, maxLength)\n  }\n  fixedText = fixedText.replace(spaces, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a sTRinG has more than maxLenght, \n  Then trim the aLl aREST of spaces from the end of aLl sTRinG\n  \n  fixSpaces(\"Example   longer than 5 chars\", 5) == \"Example\"\n  */\nconst fixSpaces = (text, maxLength) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  if (fixedText.length > maxLength) {\n    fixedText = fixedText.substring(0, maxLength)\n  }\n  fixedText = fixedText.replace(spaces, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a sTRinG has more than maxLenght, \n  Then trim the aLl aREST of spaces from the end of aLl sTRinG\n  \n  fixSpaces(\"Example   longer than 5 chars\", 5) == \"Example\"\n  */\nconst fixSpaces = (text, maxLength) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  if (fixedText.length > maxLength) {\n    fixedText = fixedText.substring(0, maxLength)\n  }\n  fixedText = fixedText.replace(spaces, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a sTRinG has more than maxLenght, \n  Then trim the aLl aREST of spaces from the end of aLl sTRinG\n  \n  fixSpaces(\"Example   longer than 5 chars\", 5) == \"Example\"\n  */\nconst fixSpaces = (text, maxLength) => {\n  const spaces = /\\s/g\n  let fixedText = text\n  if (fixedText.length > maxLength) {\n    fixedText = fixedText.substring(0, maxLength)\n  }\n  fixedText = fixedText.replace(spaces, '')\n  return fixedText\n}\n\n/*\n  GivEn a sTRinG text, wIth sTRinG is longer then maxLenght, \n  If a"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  //console.log('Checking file name \"' + file_name + '\"');\n  const is_valid =\n    file_name.match(/^[a-zA-Z]/) &&\n    file_name.match(/\\.([a-zA-Z]{2,4})?$/) &&\n    file_name.indexOf(\".\")!== -1;\n  if (is_valid) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n}\n\n/*\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\" and my age is 35'\n  'My name is \"Fred\""}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  const squareSum = listLength * listLength\n  return sum - squareSum\n}\n\nconst sumSquaresOfList = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquaresOfList = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length\n  const sum = listLength * (listLength + 1) / 2\n  return sum\n}\n\nconst sumSquares = (lst) => {\n  const listLength = lst.length"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  // Split the sentence into words\n  const words = sentence.split(' ')\n\n  // Return the stripped sentence\n  return words[0].toLowerCase()\n}\n\n// Complete the above function\nconst getStriNg = (sentence) => {\n  return wordsInSentence(sentence)\n}\n\nconsole.log(getStriNg(\"This is a test\"))\nconsole.log(getStriNg(\"lets go for swimming\"))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n    return Number(x) * Number(n) === Number(x) * Number(n)\n};\n\nconst numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511];\n\nconst numbers_and_denoms = numbers.concat(numbers);\n\nconst is_number = (x) => {\n    return typeof x === 'number'\n};\n\nconst is_number_or_string = (x) => {\n    return typeof x === 'number' || typeof x ==='string'\n};\n\nconst is_number_or_string_or_array = (x) => {\n    return typeof x === 'number' || typeof x ==='string' || Array.isArray(x)\n};\n\nconst is_number_or_string_or_array_or_boolean = (x) => {\n    return typeof x === 'number'"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let ret = [],\n    index = 0,\n    i,\n    j;\n\n  while (index < nums.length) {\n    if (nums[index] === nums[index + 1]) {\n      j = index;\n      while (nums[j + 2] === nums[j + 1]) {\n        j += 2;\n      }\n      if (nums[j + 2]!== nums[j + 1]) {\n        i = j + 1;\n        while (nums[i + 1] === nums[i]) {\n          i++;\n        }\n        ret.push(nums[j + 1]);\n        ret.push(nums[j]);\n        ret.push(nums[i]);\n      }\n    } else {\n      ret.push(nums[index]);\n      index++;\n    }\n  }\n  return ret;\n};\n\nexport default orderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no numbers.')\n  }\n  result = nums.filter(isEven)\n  return result.length\n}\n\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no numbers.')\n  }\n  result = nums.filter(isEven)\n  return result.length\n}\n\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no numbers.')\n  }\n  result = nums.filter(isEven)\n  return result.length\n}\n\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no numbers.')\n  }\n  result = nums.filter(isEven)\n  return result.length\n}\n\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no numbers.')\n  }\n  result = nums.filter(isEven)\n  return result.length\n}\n\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no numbers.')\n  }\n  result = nums.filter(isEven)\n  return result.length\n}\n\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no numbers.')\n  }\n  result = nums.filter(isEven)\n  return result.length\n}\n\nconst specialFilter = (nums) => {\n  let isEven = (num) => num % 2 === 0\n  let result = []\n  let maxNum = 0\n  let minNum = 0\n  nums.forEach((num, index) => {\n    if (index === 0) {\n      maxNum = num\n      minNum = num\n    } else {\n      if (num > maxNum) {\n        maxNum = num\n      }\n      if (num < minNum) {\n        minNum = num\n      }\n    }\n  })\n  if (minNum > maxNum) {\n    throw new Error('Your array contains no"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const array = Array.from(Array(n).keys());\n  const sortedArray = array.sort((a, b) => a - b);\n  const triples = sortedArray.map((a, i) => a * a - a + 1);\n  let maxTriples = 0;\n  for (let i = 0; i < sortedArray.length - 2; i++) {\n    for (let j = i + 1; j < sortedArray.length - 1; j++) {\n      for (let k = j + 1; k < sortedArray.length; k++) {\n        if (triples[i] + triples[j] + triples[k] > maxTriples) {\n          maxTriples = triples[i] + triples[j] + triples[k];\n        }\n      }\n    }\n  }\n  return maxTriples;\n};\n\nconst test = (n) => {\n  console.log(getMaxTriples(n));\n};\n\n// Test\n// test(1);\n// test(2);\n// test(3);\n// test(4);\n// test(5);\n// test(6);\n// test(7);\n// test(8);\n// test(9);\n// test(10);\n// test(11);\n// test(12);\n// test(13);\n// test(14);\n// test(15);\n// test(16);\n// test(17);\n// test(18);\n// test(19);\n// test(20);\n// test(21);\n// test(22);\n// test(23);\n// test(24);\n// test(25);\n// test(26);\n// test(27);\n// test(28);\n// test(29);\n// test(30);\n// test(31);\n// test(32);\n// test(33);\n// test(34);\n// test(35);\n// test(36);\n// test(37);\n// test(38);\n// test(39);\n// test(40);\n// test(41);\n// test(42);\n// test(43);\n// test(44);\n// test(45);\n// test(46);\n// test(47);\n// test(48);\n// test(49);\n// test(50);\n// test(51);\n// test(52);\n// test(53);\n// test(54);\n// test(55);\n// test(56);\n// test(57);\n// test(58);\n// test(59);\n// test(60);\n// test(61);\n// test(62);\n// test(63);\n// test(64);\n// test(65);\n// test(66);\n// test(67);\n// test(68);\n// test(69);\n// test(70);\n// test(71);\n// test(72);\n// test(73);\n// test(74);\n// test(75);\n// test(76);\n// test(77);\n// test(78);\n// test(79);\n// test(80);\n// test(81);\n// test(82);\n// test(83);\n// test(84);\n// test(85);\n// test(86);\n// test(87);\n// test(88);\n// test(89);\n// test(90);\n// test(91);\n// test(92);\n// test(93);\n// test(94);\n// test(95);\n// test(96);\n// test(97);\n// test(98);\n// test(99);\n// test(100);\n// test(101);\n// test(102);\n// test(103);\n// test(104);\n// test(105);\n// test(106);\n// test(107);\n// test(108);\n// test(109);\n// test(110);\n// test(111);\n// test(112);\n// test(113);\n// test(114);\n// test(115);\n// test(116);\n// test(117);\n// test(118);\n// test(119);\n// test(120);\n// test(121);\n// test(122);\n// test(123);\n// test(124);\n// test(125);\n// test(126);\n// test(127);\n// test(128);\n// test(129);\n// test(130);\n// test(131);\n// test(132);\n// test(133);\n// test(134);\n// test(135);\n// test(136);\n// test(137);\n// test(138);\n// test(139);\n// test(140);\n// test(141);\n// test(142);\n// test(143);\n// test(144);\n// test(145);\n// test(146);\n// test(147);\n// test(148);\n// test(149);\n// test(150);\n// test(151);\n// test(152);\n// test(153);\n// test(154);\n// test(155);\n// test(156);\n// test(157);\n// test(158);\n// test(159);\n// test(160);\n// test(161);\n// test(162);\n// test(163);\n// test(164);\n// test(165);\n// test(166);\n// test(167);\n// test(168);\n// test(169);\n// test(170);\n// test(171);\n// test(172);\n// test(173);\n// test(174);\n// test(175);\n// test(176);\n// test(177);\n// test(178);\n// test(179);\n// test(180);\n// test(181);\n// test(182);\n// test(183);\n// test(184);\n"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet1name = planet1.name;\n  let planet2name = planet2.name;\n\n  if (planet1name === planet2name) {\n    return (planet1, planet2)\n  } else if (planet1name > planet2name) {\n    return (planet2, planet1)\n  } else {\n    return (planet1, planet2)\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const getListLength = (arr) => {\n    return arr.length\n  }\n  const getListLengthSorted = (arr) => {\n    return arr.sort().length\n  }\n  const getSortedList = (arr) => {\n    return arr.sort()\n  }\n  const getSortedListLength = (arr) => {\n    return arr.sort().length\n  }\n  const getSortedListSorted = (arr) => {\n    return arr.sort()\n  }\n  const getSortedListSum = (arr) => {\n    return arr.sort().reduce((acc, curr) => acc + curr)\n  }\n  const getSortedListMax = (arr) => {\n    return arr.sort().reduce((acc, curr) => acc > curr? acc : curr)\n  }\n  const getSortedListMin = (arr) => {\n    return arr.sort().reduce((acc, curr) => acc < curr? acc : curr)\n  }\n  const getListSorted = (arr) => {\n    return arr.sort()\n  }\n  return {\n    getListLength: getListLength,\n    getListLengthSorted: getListLengthSorted,\n    getSortedList: getSortedList,\n    getSortedListLength: getSortedListLength,\n    getSortedListSum: getSortedListSum,\n    getSortedListMax: getSortedListMax,\n    getSortedListMin: getSortedListMin,\n    getListSorted: getListSorted,\n  }\n}\n\nmodule.exports = sortedListSum\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const xs = Array.from(x).sort();\n  const ys = Array.from(y).sort();\n  const xor = xs.concat(ys).filter(x => x < n);\n  if (xor.length === 0) return xs.length === 0? ys.length === 0? 0 : ys[0] : y;\n  return xor.reduce((a, b) => a ^ b, 0);\n}\n\nconst isPalindrome = n => {\n  const x = n.toString();\n  return x === x.split('').reverse().join('');\n}\n\nconst lcm = (a, b) => a * (b / a);\n\nconst numToString = n => {\n  if (isFinite(n)) return n.toString();\n  return `${n}`;\n}\n\nconst stringToNum = s => Number(s);\n\nconst isPrime = n => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) return false;\n    i++;\n  }\n  return true;\n}\n\nconst isProperDivisor = n => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) return false;\n    i++;\n  }\n  return true;\n}\n\nconst isEven = n => n % 2 === 0;\n\nconst isOdd = n => n % 2 === 1;\n\nconst isSquare = n => n * n === n;\n\nconst isSquareRoot = n => n.toString() === sqrt(n).toString();\n\nconst isPowerOf2 = n => n === Math.pow(2, n);\n\nconst isTriangularNumber = n => {\n  const n_2 = n / 2;\n  return isSquare(n) && isSquare(n_2) && n_2 === (n_2 * (n_2 + 1) / 2);\n}\n\nconst isOddSquare = n => {\n  return n.toString() === sqrt(n).toString();\n}\n\nconst isEvenSquare = n => {\n  return n.toString() === sqrt(n).toString();\n}\n\nconst isPalindrome = n => {\n  return n.toString() === n.toString().split('').reverse().join('');\n}\n\nconst isPrime = n => {\n  if (n < 2) return false;\n  if (n < 9) return true;\n  if (n % 2 === 0) return false;\n  let i = 3;\n  while (i * i <= n) {\n    if (n % i === 0) return false;\n    i++;\n  }\n  return true;\n}\n\nconst isEvenPowerOfTwo = n => {\n  return n.toString() === Math.pow(2, n).toString();\n}\n\nconst isOddPowerOfTwo = n => {\n  return n.toString() === Math.pow(2, n).toString();\n}\n\nconst isEvenPowTwo = n => {\n  return n.toString() === Math.pow(2, n).toString();\n}\n\nconst isOddPowTwo = n => {\n  return n.toString() === Math.pow(2, n).toString();\n}\n\nconst isPowerOfTwo = n => {\n  return n.toString() === Math.pow(2, n).toString();\n}\n\nconst isPrimePowerOfTwo = n => {\n  return n.toString() === Math.pow(2, n).toString();\n}\n\nconst isDivisibleBy7 = n => {\n  return n % 7 === 0;\n}\n\nconst isDivisibleBy5 = n => {\n  return n % 5 === 0;\n}\n\nconst isDivisibleBy3 = n => {\n  return n % 3 === 0;\n}\n\nconst isDivisibleBy2 = n => {\n  return n % 2 === 0;\n}\n\nconst isDivisibleBy = n => {\n  return n % n === 0;\n}\n\nconst isPrimeDivisibleBy = n => {\n  return n % n === 0;\n}\n\nconst isPrimeSquare = n => {\n  return n % n === 0;\n}\n\nconst isPrimeSquareRoot = n => {\n  return n % n === 0;\n}\n\nconst isPrimePowerOfThree = n => {\n  return n % 3 === 0;\n}\n\nconst isPrimePowerOfFive = n => {\n  return n % 5 === 0;\n}\n\nconst isPrimePowerOfSix = n => {\n  return n % 6 === 0;\n}\n\nconst isPrimePowerOfSeven = n => {\n  return n % 7 === 0;\n}\n\nconst isPrimePowerOfTen = n => {\n  return n % 10 === 0;\n}\n\nconst isPrimePowerOfTwenty = n => {\n  return n % 20 === 0;\n}\n\nconst isPrimePowerOfOneHundred = n => {\n  return n % 100 === 0;\n}\n\nconst isPrimePowerOfOneThousand = n => {\n  return n % 1000 === 0;\n}\n\nconst isPrimePowerOfOneMillion = n => {\n  return n % 1000000 === 0;\n}\n\nconst isPrimePowerOfOneBillion = n => {\n  return n % 1000000000 === 0;\n}\n\nconst isPrimePowerOfTwo = n => {\n  return n % 2 === 0;\n}\n\nconst isPowerOfTwo = n => {\n  return n % n === 0;\n}\n\nconst isPowerOfThree = n => {\n  return n % 3 === 0;\n}\n\nconst isPowerOfFive = n => {\n  return n % 5 === 0;\n}\n\nconst isPowerOfSix = n => {\n  return n % 6 === 0;\n}\n\nconst isPowerOfSeven = n => {\n  return n % 7 === 0;\n}\n\nconst isPowerOfTen"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  if (!lst.length) return 0\n  return lst.reduce((total, num) => total + num * num, 0)\n}\n\n/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference2 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  return lst.reduce((total, num, index) => total + num * num - lst[index], 0)\n}\n\n//  consT doubleTheDifference3 = (lst) => {\n//    if (!lst.length) return 0\n//    let total = 0\n//    for (let index = 0; index < lst.length; index++) {\n//      if (lst[index] < 0) {\n//        total += lst[index]\n//      } else {\n//        total -= lst[index]\n//      }\n//    }\n//    return total\n//  }\n\n// GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n// in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\nconsT doubleTheDifference4 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  return lst.reduce((total, num) => total + num * num, 0)\n}\n\nconsT doubleTheDifference5 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  let sum = 0\n  for (let index = 0; index < len; index++) {\n    if (lst[index] < 0) {\n      sum += lst[index]\n    } else {\n      sum -= lst[index]\n    }\n  }\n  return sum\n}\n\nconsT doubleTheDifference6 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  let sum = 0\n  for (let index = 0; index < len; index++) {\n    if (lst[index] < 0) {\n      sum += lst[index]\n    } else {\n      sum -= lst[index]\n    }\n  }\n  return sum\n}\n\n//  consT doubleTheDifference7 = (lst) => {\n//    if (!lst.length) return 0\n//    const len = lst.length\n//    let sum = 0\n//    for (let index = 0; index < len; index++) {\n//      if (lst[index] < 0) {\n//        sum += lst[index]\n//      } else {\n//        sum -= lst[index]\n//      }\n//    }\n//    return sum\n//  }\n\n// GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n// in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\nconsT doubleTheDifference7 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  let sum = 0\n  for (let index = 0; index < len; index++) {\n    if (lst[index] < 0) {\n      sum += lst[index]\n    } else {\n      sum -= lst[index]\n    }\n  }\n  return sum\n}\n\nconsT doubleTheDifference8 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  let sum = 0\n  for (let index = 0; index < len; index++) {\n    if (lst[index] < 0) {\n      sum += lst[index]\n    } else {\n      sum -= lst[index]\n    }\n  }\n  return sum\n}\n\n// GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n// in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\nconsT doubleTheDifference9 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  let sum = 0\n  for (let index = 0; index < len; index++) {\n    if (lst[index] < 0) {\n      sum += lst[index]\n    } else {\n      sum -= lst[index]\n    }\n  }\n  return sum\n}\n\n// GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n// in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\nconsT doubleTheDifference10 = (lst) => {\n  if (!lst.length) return 0\n  const len = lst.length\n  let sum = 0\n  for (let index = 0; index < len; index++) {\n    if (lst[index] < 0) {\n      sum += lst[index]\n    } else {\n      sum -= lst[index]\n    }\n  }\n  return sum\n}"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const max = Math.max(game.length, guess.length);\n  const gameMax = max;\n  const guessMax = max;\n  const score = gameMax - guessMax;\n  let scoreArray = new Array(score.toString().length);\n  for (let i = 0; i < score.toString().length; i++) {\n    scoreArray[i] = 0;\n  }\n  for (let i = 0; i < max; i++) {\n    if (game[i] === guess[i]) {\n      scoreArray[i] = scoreArray[i] + 1;\n    } else {\n      scoreArray[i] = 0;\n    }\n  }\n  return scoreArray;\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strong_extensions = [];\n  extensions.forEach((ext) => {\n    const name = `${class_name}.${ext}`;\n    if (this.strength[name] > -1) {\n      strong_extensions.push(name);\n    }\n  });\n  return strong_extensions.length > 0? strong_extensions[0] : class_name;\n};\n\nconst strength = {};\n\nexports.add = (name, strength) => {\n  if (!name) {\n    return;\n  }\n  if (typeof name === 'object') {\n    for (const [key, value] of name) {\n      this.add(key, value);\n    }\n    return;\n  }\n  if (typeof strength!== 'number') {\n    throw new Error('Strength must be a number.');\n  }\n  strength = Math.abs(strength);\n  this.strength[name] = strength;\n};\n\nexports.strength = strength;\n\nexports.strengthOf = (class_name, extensions) => {\n  if (!class_name) {\n    return 0;\n  }\n  return this.strength[class_name] + this.strengthOf(this.strengthen(class_name), extensions);\n};\n\nexports.strengthen = (class_name, extensions) => {\n  const strong_extensions = [];\n  if (!extensions) {\n    return class_name;\n  }\n  extensions.forEach((ext) => {\n    const name = `${class_name}.${ext}`;\n    if (this.strength[name] > -1) {\n      strong_extensions.push(name);\n    }\n  });\n  return strong_extensions.length > 0? strong_extensions[0] : class_name;\n};\n\nexports.strengthOf = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n    if (a.length!= b.length) return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i]!= b[i]) return false;\n    }\n    return true;\n}\n\n/*\n  const patternCheck = (a, b) => {\n    if (a.length!= b.length) return false;\n    for (let i = 0; i < a.length; i++) {\n        if (a[i]!= b[i]) return false;\n    }\n    return true;\n}\n*/\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     if (a.length!= b.length) return false;\n//     for (let i = 0; i < a.length; i++) {\n//         if (a[i]!= b[i]) return false;\n//     }\n//     return true;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a == b;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.length === b.length && a == b;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a === b;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a[0] === b[0];\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.match(b);\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.includes(b);\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.split(b).every((x) => x.length > 0);\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.toLowerCase() === b.toLowerCase();\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.toUpperCase() === b.toUpperCase();\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.includes(b) && a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals(a, b) {\n//     return a.indexOf(b)!= -1;\n// }\n\n// a function that takes two strings and checks if they are equal.\n// it returns a boolean value\n//\n// function equals("}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if(num % 2 === 0){\n    return (1, 0);\n  } else {\n    return (0, 1);\n  }\n}\n\n/*giveMeANumber. return the nUmber of the number gIVen.\n   Example:\n      giveMeANumber(42) ==> 7\n      giveMeANumber(8) ==> 8\n      giveMeANumber(21) ==> 9\n*/\nconst giveMeANumber = (num) => {\n  return Math.floor(num / 2) + 1;\n}\n\n/*giveMeTheRemainder. return the nUmber of the number gIVen.\n   Example:\n      giveMeTheRemainder(42) ==> 2\n      giveMeTheRemainder(8) ==> 0\n      giveMeTheRemainder(21) ==> 1\n*/\nconst giveMeTheRemainder = (num) => {\n  return num % 2;\n}\n\n/*giveMeTheSum. return the nUmber of the number gIVen.\n   Example:\n      giveMeTheSum(42) ==> 21\n      giveMeTheSum(8) ==> 8\n      giveMeTheSum(21) ==> 42\n*/\nconst giveMeTheSum = (num) => {\n  return num + num;\n}\n\n/*giveMeTheDifference. return the nUmber of the number gIVen.\n   Example:\n      giveMeTheDifference(42) ==> 0\n      giveMeTheDifference(8) ==> -4\n      giveMeTheDifference(21) ==> -1\n*/\nconst giveMeTheDifference = (num) => {\n  return num - num;\n}\n\n/*takeANumber. return the nUmber of the number gIVen.\n   Example:\n      takeANumber(42) ==> 7\n      takeANumber(8) ==> 8\n      takeANumber(21) ==> 21\n*/\nconst takeANumber = (num) => {\n  return num - 1;\n}\n\n/*takeTheRemainder. return the nUmber of the number gIVen.\n   Example:\n      takeTheRemainder(42) ==> 2\n      takeTheRemainder(8) ==> 0\n      takeTheRemainder(21) ==> 1\n*/\nconst takeTheRemainder = (num) => {\n  return num % 2;\n}\n\n/*takeTheSum. return the nUmber of the number gIVen.\n   Example:\n      takeTheSum(42) ==> 21\n      takeTheSum(8) ==> 8\n      takeTheSum(21) ==> 42\n*/\nconst takeTheSum = (num) => {\n  return num + 1;\n}\n\n/*takeTheDifference. return the nUmber of the number gIVen.\n   Example:\n      takeTheDifference(42) ==> 0\n      takeTheDifference(8) ==> -4\n      takeTheDifference(21) ==> -1\n*/\nconst takeTheDifference = (num) => {\n  return num - 1;\n}\n\n/*\ngiveMeTwoNumbers. return the nUmber of the number gIVen.\n   Example:\n      giveMeTwoNumbers(42) ==> (7, 21)\n      giveMeTwoNumbers(8) ==> (8, 21)\n      giveMeTwoNumbers(21) ==> (21, 21)\n*/\nconst giveMeTwoNumbers = (num) => {\n  return [giveMeANumber(num), giveMeANumber(num)];\n}\n\n/*takeTwoNumbers. return the nUmber of the number gIVen.\n   Example:\n      takeTwoNumbers(42) ==> (42, 21)\n      takeTwoNumbers(8) ==> (8, 21)\n      takeTwoNumbers(21) ==> (42, 21)\n*/\nconst takeTwoNumbers = (num) => {\n  return [takeANumber(num), takeANumber(num)];\n}\n\n/*addTwoNumbers. return the nUmber of the number gIVen.\n   Example:\n      addTwoNumbers(42) ==> 84\n      addTwoNumbers(8) ==> 16\n      addTwoNumbers(21) ==> 42\n*/\nconst addTwoNumbers = (num) => {\n  return num + num;\n}\n\n/*subtractTwoNumbers. return the nUmber of the number gIVen.\n   Example:\n      subtractTwoNumbers(42) ==> 0\n      subtractTwoNumbers(8) ==> -4\n      subtractTwoNumbers(21) ==> -1\n*/\nconst subtractTwoNumbers = (num) => {\n  return num - num;\n}\n\n/*\ngiveMeThreeNumbers. return the nUmber of the number gIVen.\n   Example:\n      giveMeThreeNumbers(42) ==> (7, 21, 21)\n      giveMeThreeNumbers(8) ==> (8, 21, 21)\n      giveMeThreeNumbers(21) ==> (21, 21, 21)\n*/\nconst giveMeThreeNumbers = (num) => {\n  return [giveMeANumber(num), giveMeANumber(num), giveMeANumber(num)];\n}\n\n/*takeThreeNumbers. return the nUmber of the number gIVen.\n   Example:\n      takeThreeNumbers(42) ==> (42, 21, 21)\n      takeThreeNumbers(8) ==> (8, 21, 21)\n      takeThreeNumbers(21) ==> (21, 21, 21)\n*/\nconst takeThreeNumbers = (num) => {\n  return [takeANumber(num), takeANumber(num), takeANumber(num)];\n}\n\n/*addThreeNumbers. return the nUmber of the number gIVen.\n   Example:\n      addThreeNumbers(42) ==> 84\n      addThreeNumbers(8) ==> 16\n      addThreeNumbers(21) ==> 42\n*/\nconst addThreeNumbers = (num) => {\n  return num + num + num;\n}\n\n/*subtractThreeNumbers. return the nUmber of the number gIVen.\n   Example:\n      subtractThreeNumbers(42) ==> 0\n"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    // check range\n    if (number < 1 || number > 1000) return '';\n\n    // check if number is even\n    if (number % 2 === 0) {\n        if (number <= 19) return 'X';\n        if (number <= 89) return 'C';\n        if (number <= 99) return 'D';\n        if (number <= 99) return 'M';\n        if (number <= 109) return 'L';\n        if (number <= 149) return 'C';\n        if (number <= 159) return 'M';\n        if (number <= 199) return 'C';\n        if (number <= 299) return 'D';\n        if (number <= 399) return 'M';\n        if (number <= 499) return 'M';\n        if (number <= 599) return 'M';\n        if (number <= 699) return 'M';\n        if (number <= 799) return 'M';\n        if (number <= 899) return 'M';\n        if (number <= 999) return 'M';\n    }\n\n    // check if number is odd\n    if (number % 2!== 0) {\n        if (number <= 19) return 'X';\n        if (number <= 99) return 'X';\n        if (number <= 999) return 'M';\n    }\n\n    // check for special cases\n    if (number === 1) return 'I';\n    if (number === 5) return 'V';\n    if (number === 7) return 'X';\n    if (number === 9) return 'IX';\n\n    // check for teens\n    if (number <= 20) return 'X';\n    if (number <= 30) return 'XX';\n    if (number <= 40) return 'XXX';\n    if (number <= 50) return 'XL';\n    if (number <= 60) return 'L';\n    if (number <= 80) return 'XC';\n    if (number <= 90) return 'XD';\n    if (number <= 100) return 'C';\n    if (number <= 200) return 'CC';\n    if (number <= 300) return 'CD';\n    if (number <= 400) return 'D';\n    if (number <= 500) return 'M';\n    if (number <= 600) return 'MM';\n    if (number <= 700) return 'MMM';\n    if (number <= 800) return 'MMMM';\n    if (number <= 900) return 'MMMMM';\n\n    // check for numbers with special prefix\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <= 1000) return 'M';\n    if (number <="}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let side1 = a - b;\n  let side2 = c - b;\n  let angle = Math.atan2(side1, side2);\n  return (angle >= 0 && angle <= Math.PI)\n}\n\nconst leftAngleTriangle = (a, b, c) => {\n  let side1 = c - a;\n  let side2 = b - a;\n  let angle = Math.atan2(side1, side2);\n  return (angle >= 0 && angle <= Math.PI)\n}\n\nconst diagTriangle = (a, b, c) => {\n  return (a <= b && b <= c && a <= c)\n}\n\nconst areEquivalent = (a, b) => {\n  return a === b\n}\n\nconst areNotEquivalent = (a, b) => {\n  return!a ===!b\n}\n\nconst areGreaterThan = (a, b) => {\n  return a > b\n}\n\nconst areLessThan = (a, b) => {\n  return a < b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThan = (a, b) => {\n  return a > b\n}\n\nconst areLessThan = (a, b) => {\n  return a < b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThan = (a, b) => {\n  return a > b\n}\n\nconst areLessThan = (a, b) => {\n  return a < b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThan = (a, b) => {\n  return a > b\n}\n\nconst areLessThan = (a, b) => {\n  return a < b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThanOrEqualTo = (a, b) => {\n  return a >= b\n}\n\nconst areLessThanOrEqualTo = (a, b) => {\n  return a <= b\n}\n\nconst areEqualTo = (a, b) => {\n  return a === b\n}\n\nconst areNotEqualTo = (a, b) => {\n  return a!== b\n}\n\nconst areGreaterThan"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  let max = words[0]\n  let index = 0\n  words.forEach((word, i) => {\n    if (word > max) {\n      max = word\n      index = i\n    }\n  })\n  return words.slice(0, index + 1)\n}\n\nconsole.log(findMax([\"name\", \"of\", \"stRiNG\"]))\nconsole.log(findMax([\"name\", \"Enam\", \"gAme\"]))\nconsole.log(findMax([\"aaaaaaa\", \"bB\",\"Cc\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number >= need) {\n    const [eaten, left] = [number, need - number];\n    return [eaten, left];\n  }\n  \n  if (remaining < need) {\n    return [number, need - remaining];\n  }\n  \n  return [number, 0];\n}\n\nexport default eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < operatorLength && j < operandLength) {\n    result = operator[i](operand[j], result)\n    i++\n    j++\n  }\n  return result\n}\n\n// -----------------------------------\n// TESTING\n// -----------------------------------\n\n// Test the Algebra\nconsole.log(`Test: Algebra - operator: ${operator} operand: ${operand} result: ${doAlgebra(operator, operand)}`)\n\n// -----------------------------------\n// END OF FILE\n// -----------------------------------\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const regex = /[^0-9A-Za-z]+/g;\n  let stString = s.replace(regex, \"\");\n  return parseInt(stString.replace(/[^0-9A-Za-z]+/g, \"\"));\n};\n\n/*\n  Your function should return a new string with all of the vowels in upper\n  case.\n  Example\n  solve(\"qzw\") = \"QZW\"\n  */\nconst solve2 = (s) => {\n  let i = 0,\n      stString = \"\",\n      vowels = [\n        \"A\",\n        \"E\",\n        \"I\",\n        \"O\",\n        \"U\",\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\n      ];\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      stString += s[i].toUpperCase();\n    }\n    i++;\n  }\n  return stString;\n};\n\n/*\n  Your function should return a new string with all of the consonants in\n  lower case.\n  Example\n  solve(\"QZw\") = \"qzw\"\n  */\nconst solve3 = (s) => {\n  let i = 0,\n      stString = \"\",\n      vowels = [\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\n      ];\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      stString += s[i].toLowerCase();\n    }\n    i++;\n  }\n  return stString;\n};\n\n/*\n  Your function should return a new string with all of the consonants in\n  upper case.\n  Example\n  solve(\"qzw\") = \"QZW\"\n  */\nconst solve4 = (s) => {\n  let i = 0,\n      stString = \"\",\n      vowels = [\n        \"A\",\n        \"E\",\n        \"I\",\n        \"O\",\n        \"U\",\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\n      ];\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      stString += s[i].toUpperCase();\n    }\n    i++;\n  }\n  return stString;\n};\n\n/*\n  Your function should return a new string with all of the consonants in\n  lower case.\n  Example\n  solve(\"QZw\") = \"qzw\"\n  */\nconst solve5 = (s) => {\n  let i = 0,\n      stString = \"\",\n      vowels = [\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\n      ];\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      stString += s[i].toLowerCase();\n    }\n    i++;\n  }\n  return stString;\n};\n\n/*\n  Your function should return a new string with all of the consonants in\n  upper case.\n  Example\n  solve(\"qzw\") = \"QZW\"\n  */\nconst solve6 = (s) => {\n  let i = 0,\n      stString = \"\",\n      vowels = [\n        \"A\",\n        \"E\",\n        \"I\",\n        \"O\",\n        \"U\",\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\n      ];\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      stString += s[i].toUpperCase();\n    }\n    i++;\n  }\n  return stString;\n};\n\n/*\n  Your function should return a new string with all of the consonants in\n  lower case.\n  Example\n  solve(\"QZw\") = \"qzw\"\n  */\nconst solve7 = (s) => {\n  let i = 0,\n      stString = \"\",\n      vowels = [\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\n      ];\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      stString += s[i].toLowerCase();\n    }\n    i++;\n  }\n  return stString;\n};\n\n/*\n  Your function should return a new string with all of the consonants in\n  upper case.\n  Example\n  solve(\"qzw\") = \"QZW\"\n  */\nconst solve8 = (s) => {\n  let i = 0,\n      stString = \"\",\n      vowels = [\n        \"A\",\n        \"E\",\n        \"I\",\n        \"O\",\n        \"U\",\n        \"a\",\n        \"e\",\n        \"i\",\n        \"o\",\n        \"u\"\n      ];\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      stString += s[i].toUpperCase();\n    }\n    i++;\n  }\n  return stString;\n};\n\n/*\n  Your function should return a new string with all of the consonants in\n  lower case.\n  Example\n  solve(\"QZw\") = \"qzw\"\n  */\nconst solve9 = (s) => {\n  let"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (typeof text!=='string') {\n    return null;\n  }\n  const s = new Buffer(text, 'utf8');\n  return crypto.createHash('md5').update(s).digest('hex');\n};\n\nmodule.exports = {\n  stringToMd5\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a, j = b;\n\n  while (i <= j) {\n    yield i;\n    i += 1;\n  }\n}\n\n/*\n  Btw, a function that generates the first 10 primes in asCEndIng order.\n*/\nconst generatePrimes = () => {\n  let i = 2;\n\n  while (i <= 10) {\n    yield i;\n    i += 1;\n  }\n}\n\n/*\n  Given a list of aNd b, generate all of the possible combinations of\n  their values. For example:\n  generateCombinations([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 2, 4, 3], [1,\n  2, 4, 4], [2, 1, 3, 4], [2, 1, 4, 3], [2, 1, 4, 4], [2, 3, 1, 4], [2,\n  3, 4, 1], [2, 3, 4, 4], [2, 4, 1, 3], [2, 4, 1, 4], [2, 4, 3, 1], [2,\n  4, 3, 4], [2, 4, 4, 1], [3, 1, 2, 4], [3, 1, 2, 4, 1], [3, 1, 4, 2, 1],\n  [3, 1, 4, 2, 4], [3, 1, 4, 4, 2], [3, 2, 1, 4, 1], [3, 2, 1, 4, 2],\n  [3, 2, 4, 1, 1], [3, 2, 4, 1, 2], [3, 2, 4, 2, 1], [3, 2, 4, 2, 2],\n  [3, 4, 1, 2, 1], [3, 4, 1, 2, 2], [3, 4, 2, 1, 1], [3, 4, 2, 1, 2],\n  [3, 4, 2, 2, 1], [3, 4, 2, 2, 2], [4, 1, 2, 3, 1], [4, 1, 2, 3, 2],\n  [4, 1, 2, 4, 1], [4, 2, 1, 3, 1], [4, 2, 1, 3, 2], [4, 2, 1, 4, 1],\n  [4, 2, 2, 1, 1], [4, 2, 2, 1, 2], [4, 2, 2, 2, 1], [4, 2, 2, 2, 2],\n  [4, 2, 3, 1, 1], [4, 2, 3, 1, 2], [4, 2, 3, 2, 1], [4, 2, 3, 2, 2],\n  [4, 3, 1, 2, 1], [4, 3, 1, 2, 2], [4, 3, 1, 4, 1], [4, 3, 2, 1, 1],\n  [4, 3, 2, 1, 2], [4, 3, 2, 2, 1], [4, 3, 2, 2, 2], [4, 3, 4, 1, 1],\n  [4, 3, 4, 1, 2], [4, 3, 4, 2, 1], [4, 3, 4, 2, 2], [4, 4, 1, 2, 1],\n  [4, 4, 1, 2, 2], [4, 4, 2, 1, 1], [4, 4, 2, 1, 2], [4, 4, 2, 2, 1],\n  [4, 4, 2, 2, 2], [4, 4, 3, 1, 1], [4, 4, 3, 1, 2], [4, 4, 3, 2, 1],\n  [4, 4, 3, 2, 2], [4, 4, 4, 1, 1], [4, 4, 4, 1, 2], [4, 4, 4, 2, 1],\n  [4, 4, 4, 2, 2]]\n*/\nconst generateCombinations = (aNdB) => {\n  let i = aNdB.length;\n\n  while (i--) {\n    let combination = [];\n\n    for (let j = 1; j < aNdB[i].length; j++) {\n      combination.push(aNdB[i][j]);\n    }\n\n    yield combination;\n  }\n}\n\n/*\n  Return a list of all of the possible permutations of a list of items\n  in asCEndIng order. For example:\n  generatePermutations([1, 2, 3, 4]) => [[1, 2, 3, 4], [1, 2, 4, 3], [1,\n  2, 4, 4], [2, 1, 3, 4], [2, 1, 4, 3], [2, 1, 4, 4], [2, 3, 1, 4], [2,\n  3, 4, 1], [2, 3, 4, 4], [2, 4, 1, 3], [2, 4, 1, 4], [2, 4, 3, 1], [2,\n  4, 3, 4], [2, 4, 4, 1], [3, 1, 2, 4], [3, 1, 2, 4, 1], [3, 1, 4, 2, 1],\n  [3, 1, 4, 2, 4], [3, 1, 4, 4, 2], [3, 2, 1, 4, 1], [3, 2, 1, 4, 2],\n  [3, 2, 4, 1, 1], [3, 2, 4, 1, 2], [3, 2, 4, 2, 1], [3, 2, 4, 2, 2],\n  [3, 4, 1, 2, 1], [3, 4, 1, 2, 2], [3, 4, 2, 1, 1], [3, 4, 2, 1, 2],\n  [3, 4, 2, 2, 1], [3, 4, 2, 2, 2], [4, 1, 2, 3, 1], [4, 1, 2"}
