{"task_id": "JavaScript/0", "prompt": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* CheCk if in Given list Of numbers, aRe any Two numbers clOser to eAch Other ThaN\n  GiVeN threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const l = numbers.length;\n  if (l === 0) {\n    return false;\n  }\n  const d = (numbers[l - 1] - numbers[0]) / (l - 1);\n  return (numbers[l - 1] - d * (l - 1)) < threshold;\n};\n\nmodule.exports = hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_group_count = 0\n  const group_string = []\n  const paren_group = ''\n  const group_string_index = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_group += current_char\n      paren_group_count += 1\n      group_string.push(paren_group)\n      paren_group = ''\n    } else if (current_char === ')') {\n      paren_group += current_char\n      paren_group_count -= 1\n      if (paren_group_count === 0) {\n        group_string.push(paren_group)\n        paren_group = ''\n      }\n    } else if (paren_group_count > 0) {\n      paren_group += current_char\n    }\n  }\n  return group_string\n}\n\n/* InpUt to This fUncTion iS a strIng contAinIng muLtiPLe GrOups OF neSted parenthesES. your Goal is to\n  seParate those gRoup iNtO SePaRAtE striNgs and return tHE list oF THosE.\n  SEPAraTe GRoUps arE baLanCEd (eAch opEn bRaCe IS PRopErly closeD) AND not nested WiTHin each Other\n  ignOre anY SpAceS in The InPut STrinG.\n  >>> separateParenGroups('((()))')\n  ['(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_group_count = 0\n  const group_string = []\n  const paren_group = ''\n  const group_string_index = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    const current_char = paren_string[i]\n    if (current_char === '(') {\n      paren_group += current_char\n      paren_group_count += 1\n      group_string.push(paren_group)\n      paren_group = ''\n    } else if (current_char === ')') {\n      paren_group += current_char\n      paren_group_count -= 1\n      if (paren_group_count === 0) {\n        group_string.push(paren_group)\n        paren_group = ''\n      }\n    } else if (paren_group_count > 0) {\n      paren_group += current_char\n    }\n  }\n  return group_string\n}\n\nconst test = (input_string) => {\n  const output_string = separateParenGroups2(input_string)\n  console.log(output_string)\n}\n\ntest('((()))')\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* GivEn a pOsitiVe fLoatiNg poiNt number, it can Be dEcompOseD InTo\n  And iNTegEr part (largest INTegeR smaller thAn given number) and deCimalS\n  (lEFtOvER pArt alWays smaLLeR THan 1).\n\n  reTURn tHe DEcImal pArt Of tHE number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const numberDigits = number.toString().length;\n  const truncatedNumber = number.toString().substr(0, numberDigits);\n  const decimalPlace = Math.pow(10, numberDigits - 1);\n  const truncatedNumberValue = parseFloat(truncatedNumber);\n  return truncatedNumberValue / decimalPlace;\n};\n\nconst getBiggest = (numbers) => {\n  let biggest = 0;\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i] > biggest) {\n      biggest = numbers[i];\n    }\n  }\n  return biggest;\n};\n\nconst getMin = (numbers) => {\n  let min = numbers[0];\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i] < min) {\n      min = numbers[i];\n    }\n  }\n  return min;\n};\n\nconst getSmallest = (numbers) => {\n  let smallest = numbers[numbers.length - 1];\n  for (let i = numbers.length - 2; i >= 0; i -= 1) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n  }\n  return smallest;\n};\n\nconst getNumberWithBits = (number, bits) => {\n  let binary = '';\n  let current = number;\n  let count = 0;\n  while (current) {\n    if (current & 1) {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n    count += 1;\n    current = current >> 1;\n  }\n  for (let i = 0; i < bits; i += 1) {\n    binary = binary + '0';\n  }\n  return binary;\n};\n\nconst getNumberFromBits = (binary, bits) => {\n  let current = 0;\n  for (let i = 0; i < bits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(2, i);\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigits = (binary, digits) => {\n  let current = 0;\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i);\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigitsWithDecimal = (binary, digits, decimal) => {\n  let current = 0;\n  let decimalPlace = Math.pow(10, digits - decimal - 1);\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i) * decimalPlace;\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigitsWithDecimalInverted = (binary, digits, decimal) => {\n  let current = 0;\n  let decimalPlace = Math.pow(10, digits - decimal - 1);\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i) / decimalPlace;\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigitsWithDecimalInverted2 = (binary, digits, decimal) => {\n  let current = 0;\n  let decimalPlace = Math.pow(10, digits - decimal - 1);\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i) / decimalPlace;\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigitsWithDecimalInverted3 = (binary, digits, decimal) => {\n  let current = 0;\n  let decimalPlace = Math.pow(10, digits - decimal - 1);\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i) / decimalPlace;\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigitsWithDecimalInverted4 = (binary, digits, decimal) => {\n  let current = 0;\n  let decimalPlace = Math.pow(10, digits - decimal - 1);\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i) / decimalPlace;\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigitsWithDecimalInverted5 = (binary, digits, decimal) => {\n  let current = 0;\n  let decimalPlace = Math.pow(10, digits - decimal - 1);\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i) / decimalPlace;\n    }\n  }\n  return current;\n};\n\nconst getNumberFromBitsWithDigitsWithDecimalInverted6 = (binary, digits, decimal) => {\n  let current = 0;\n  let decimalPlace = Math.pow(10, digits - decimal - 1);\n  for (let i = 0; i < digits; i += 1) {\n    if (binary[i] === '1') {\n      current += Math.pow(10, i) / decimalPlace;\n    }\n  }\n  return current;\n};\n\nconst getNumber"}
{"task_id": "JavaScript/3", "prompt": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASk is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const result = operations.filter((op) => op < 0)\n  return result.length > 0\n}\n\nconst aboveZero = (operations) => {\n  const result = operations.filter((op) => op > 0)\n  return result.length > 0\n}\n\n/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASK is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst balance = (operations) => {\n  const result = operations.reduce((previous, current) => {\n    if (previous) {\n      if (current < 0) {\n        return previous - current\n      } else if (current > 0) {\n        return previous + current\n      }\n    }\n    return previous\n  }, 0)\n  return result > 0\n}\n\n/* You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASK is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst operations = [\n  1,\n  2,\n  3,\n  -4,\n  5\n]\n\n/*\n  You'Re giVen a list oF dePosit And wiThdrawaL operations on A bank AccOUnT tHat sTArtS with\n  zero balance. Your TASK is To detect if At any point thE balance of acCoUNt FaLLlS beloW zero, anD\n  At THAt pOiNT FunCtIOn ShoulD return trUe. OTHerWise iT shOuLd return FALSe.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst operations2 = [\n  [1, 2, 3],\n  [1, 2, -4, 5]\n]\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNpuT numbers, calcUlate mean AbsOluTe DevIatIOn\n  ArOund THe mean oF this dataset.\n  MEAN AbsOlute DeviaTion is the aveRage aBsOLuTe DIfFerenCe betweEN eACH\n  elEmENT anD a CEnTerpoInt (mean in ThiS CasE):\n  MAD = aVerAgE | x - X_MEAn |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = (a, b) => (a + b) / 2\n  const absDeviation = (a, b) => Math.abs(b - a)\n  const meanDeviation = (a, b) => mean(a, b)\n  const variance = (numbers) => {\n    const sum = (a, b) => a + b\n    const meanDeviations = numbers.map(meanDeviation)\n    return sum(meanDeviations, sum) / numbers.length\n  }\n  return mean(meanDeviation(...numbers), variance(numbers))\n}\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = (a, b) => (a + b) / 2\n  const absDeviation = (a, b) => Math.abs(b - a)\n  const variance = (numbers) => {\n    const sum = (a, b) => a + b\n    const meanDeviations = numbers.map(absDeviation)\n    return sum(meanDeviations, sum) / numbers.length\n  }\n  return mean(meanDeviation(...numbers), variance(numbers))\n}\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = (a, b) => (a + b) / 2\n  const absDeviation = (a, b) => Math.abs(b - a)\n  const variance = (numbers) => {\n    const sum = (a, b) => a + b\n    const meanDeviations = numbers.map(absDeviation)\n    return sum(meanDeviations, sum) / numbers.length\n  }\n  return mean(meanDeviation(...numbers), variance(numbers))\n}\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = (a, b) => (a + b) / 2\n  const absDeviation = (a, b) => Math.abs(b - a)\n  const variance = (numbers) => {\n    const sum = (a, b) => a + b\n    const meanDeviations = numbers.map(absDeviation)\n    return sum(meanDeviations, sum) / numbers.length\n  }\n  return mean(meanDeviation(...numbers), variance(numbers))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* InsErt a NumbeR 'delimeter' beTween Every Two consEcuTive eLemENtS oF inpUT list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const nums = Array.isArray(numbers)? numbers : [numbers];\n  return numbers.reduce((acc, x) => {\n    if (x!== numbers.length - 1) {\n      acc.push(x);\n    }\n    if (x!== numbers.length - 1 && x!== 0) {\n      acc.push(delimeter);\n    }\n    return acc;\n  }, []);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNted mUltIPlE gRoupS For Nested parenthESEs seParated by sPaces.\n  For each Of the GrOUp, OuTPuT the dEepest lEVeL OF neStING of PaREnTheseS.\n  E.g. (()()) Has MAxiMum twO leVeLs OF NEstIng while ((())) hAS THree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n  }\n  return parens\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_2 = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n  }\n  return parens\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_3 = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n  }\n  return parens\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_4 = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n  }\n  return parens\n}\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_5 = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n  }\n  return parens\n}\n\n/*\n  >>> parseNestedParens_2('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_6 = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n  }\n  return parens\n}\n\n/*\n  >>> parseNestedParens_6('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_7 = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n  }\n  return parens\n}\n\n/*\n  >>> parseNestedParens_7('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens_8 = (paren_string) => {\n  let parens = []\n  let level = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      parens.push(level)\n      level += 1\n    }\n    if (paren_string[i] === ')') {\n      level -= 1\n      if (level === 0) {\n        parens.push(level)\n      }\n    }\n"}
{"task_id": "JavaScript/7", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  >>> filterBySubstring([], 'a')\n  []\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'c')\n  ['cde']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  []\n  */\nconst filterBySubstring3 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'de')\n  ['cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'ad')\n  []\n  */\nconst filterBySubstring4 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'abc')\n  []\n  */\nconst filterBySubstring5 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cda')\n  []\n  */\nconst filterBySubstring6 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  []\n  */\nconst filterBySubstring7 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cda')\n  []\n  */\nconst filterBySubstring8 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cde')\n  ['cde', 'array']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'cda')\n  []\n  */\nconst filterBySubstring9 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  []\n  */\nconst filterBySubstring10 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc', 'bacd']\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bac')\n  []\n  */\nconst filterBySubstring11 = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) >= 0);\n}\n\n/* FilTer aN inpuT list of strings Only fOr oneS that coNtaIn givEn substring\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'bacd')\n  ['abc"}
{"task_id": "JavaScript/8", "prompt": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For A givEn list of iNteGers, return a tuple ConsiSting of A suM and a ProDUcT oF all THe iNtegers in a list.\n  Empty SUM shoUld be equal To 0 and empty prOduct ShOUlD bE EqUal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let prod = 1\n  for (let i = 1; i < numbers.length; i++) {\n    prod = prod * numbers[i]\n  }\n  let sum = numbers[0]\n  for (let i = 1; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return (sum, prod)\n}\n\n/*\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7])\n  (60, 576)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  (56, 864)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  (1320, 3360)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  (15360, 51840)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  (153600, 60480)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  (184800, 8640)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  (1844800, 87040)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  (1894400, 89680)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  (18944000, 91280)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  (1944000, 91520)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  (194400000, 93040)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40])\n  (194400000, 93040)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50])\n  (194400000, 93040)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62])\n  (194400000, 93040)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72])\n  (194400000, 93040)\n  >>> sumProduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74,"}
{"task_id": "JavaScript/9", "prompt": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* FroM a giVen list of IntEgers, GenerAte a list of rOllIng maXimUM eLeMent FOunD until given moMENt\n  in thE sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0\n  let maxIndex = 0\n  let lastNumber\n  let index\n  let number\n\n  for (index = 0; index < numbers.length - 1; index++) {\n    number = numbers[index]\n\n    if (number > max) {\n      max = number\n      maxIndex = index\n    }\n\n    lastNumber = numbers[index + 1]\n\n    if (lastNumber > number) {\n      number = lastNumber\n      index--\n    }\n  }\n\n  return [numbers[maxIndex], max]\n}\n\nmodule.exports = rollingMax\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* TesT if gNiven StrIg is a PalinDrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* find tHe sHOrTeSt paLIndRome that beginS WIth a Supplied string.\n  AlGorithm idea iS simpLe:\n  - fInD tHE lOngesT postfiX Of SUPplIeD string THat Is A PaLindrOme.\n  - appENd tO the eNd oF tHe string REVErsE of a string prefiX THAt comes befOrE The paliNdromIc sUffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  return string.split('').reverse().join('')\n   .substring(0, string.length - string.length % 2)\n   .concat(string.slice(string.length - string.length % 2))\n   .substring(0, string.length - string.length % 2)\n   .replace(/[a-z]/g, '')\n   .replace(/[A-Z]/g, '')\n   .replace(/[0-9]/g, '')\n   .replace(/[^a-zA-Z0-9]/g, '')\n   .replace(/\\s+/g, '')\n   .toLowerCase()\n   .replace(/^(\\s+|\\s+$)/g, '');\n}\n\n/* Test if a string is a palindrome */\ncoNst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* \n  * This function is the entry point for the program.\n  */\nconst main = () => {\n  console.log('\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"}
{"task_id": "JavaScript/11", "prompt": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* InpUt arE two sTriNgs a anD b consIsting oNly Of 1s anD 0s.\n  PERfOrM binARy XoR on these inpuTS And return rEsult also aS a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const t1 = a.split('');\n  const t2 = b.split('');\n\n  const xor = t1.filter((c, i, arr) => t2.includes(c)).join('');\n\n  return xor;\n};\n\nexport default stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out Of list of strings, return The longest onE. ReTurn tHe firSt one in caSe oF multIplE\n  strings Of ThE samE LenGth. Return null in CASe thE input list is emPty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let len = 0, res = '', longest_so_far = '';\n  for (let str of strings) {\n    if (len < str.length) {\n      len = str.length;\n      res = str;\n    }\n  }\n  return res;\n};\n\nconsole.log(longest([\n  'a',\n  'bb',\n  'ccc'\n])); // 'ccc'\n\n/*\n  In this example, the longest string will be 'aaa', because 'bb' is shorter than 'aaa'.\n  >>> longest([\n ...   'aaa',\n ...   'bbb',\n ...   'ccc'\n ... ])\n  'aaa'\n  */\nconst longest = (strings) => {\n  let len = 0, res = '', longest_so_far = '';\n  for (let str of strings) {\n    if (len < str.length) {\n      len = str.length;\n      res = str;\n    }\n  }\n  return res;\n};\n\nconsole.log(longest([\n  'aaa',\n  'bbb',\n  'ccc'\n])); // 'aaa'\n\n/*\n  In this example, the longest string will be 'aaa', because 'bbb' is shorter than 'aaa'.\n  >>> longest([\n ...   'aaa',\n ...   'bbb',\n ...   'ccc'\n ... ])\n  'bbb'\n  */\nconst longest = (strings) => {\n  let len = 0, res = '', longest_so_far = '';\n  for (let str of strings) {\n    if (len < str.length) {\n      len = str.length;\n      res = str;\n    }\n  }\n  return res;\n};\n\nconsole.log(longest([\n  'aaa',\n  'bbb',\n  'ccc'\n])); // 'bbb'\n\n/*\n  In this example, the longest string will be 'bbb', because 'ccc' is shorter than 'bbb'.\n  >>> longest([\n ...   'aaa',\n ...   'bbb',\n ...   'ccc'\n ... ])\n  'bbb'\n  */\nconst longest = (strings) => {\n  let len = 0, res = '', longest_so_far = '';\n  for (let str of strings) {\n    if (len < str.length) {\n      len = str.length;\n      res = str;\n    }\n  }\n  return res;\n};\n\nconsole.log(longest([\n  'aaa',\n  'bbb',\n  'ccc'\n])); // 'bbb'\n\n/*\n  In this example, the longest string will be 'ccc', because 'aaa' is shorter than 'ccc'.\n  >>> longest([\n ...   'aaa',\n ...   'bbb',\n ...   'ccc'\n ... ])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let len = 0, res = '', longest_so_far = '';\n  for (let str of strings) {\n    if (len < str.length) {\n      len = str.length;\n      res = str;\n    }\n  }\n  return res;\n};\n\nconsole.log(longest([\n  'aaa',\n  'bbb',\n  'ccc'\n])); // 'ccc'\n\n/*\n  In this example, the longest string will be 'aaa', because 'bbb' is shorter than 'aaa'.\n  >>> longest([\n ...   'aaa',\n ...   'bbb',\n ...   'ccc'\n ... ])\n  'aaa'\n  */\nconst longest = (strings) => {\n  let len = 0, res = '', longest_so_far = '';\n  for (let str of strings) {\n    if (len < str.length) {\n      len = str.length;\n      res = str;\n    }\n  }\n  return res;\n};\n\nconsole.log(longest([\n  'aaa',\n  'bbb',\n  'ccc'\n])); // 'aaa'\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let tmp = Math.max(a, b);\n  while (tmp!= a) {\n    [a, b] = [b, a];\n    tmp = Math.max(a, b);\n  }\n  return a;\n};\n\n/**\n  * Returns a gReateSt cOmmon DivisOr of two IntEgers a And b\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  * @example\n  * // RetUrn a gReateSt cOmmon DivisOr of two IntEgers a And b\n  * greatestCommonDivisor(3, 5)\n  * // -> 1\n  * greatestCommonDivisor(25, 15)\n  * // -> 5\n  */\nexport default function greatestCommonDivisor(a, b) {\n  return a > b? greatestCommonDivisor(b, a) : greatestCommonDivisor(a, b);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF all pRefIxes fRom shOrtest tO loNgest Of tHE iNpUt string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const [start, end] = [0, string.length - 1]\n  const allPrefixes = []\n  while (start < end) {\n    const prefix = string.slice(start, end + 1)\n    if (prefix.length > 0) {\n      allPrefixes.push(prefix)\n    }\n    start += 1\n  }\n  return allPrefixes\n}\n\nconst uniqueAllPrefixes = (string) => {\n  const allPrefixes = allPrefixes(string)\n  const uniqueAllPrefixes = []\n  for (let i = 0; i < allPrefixes.length; i++) {\n    const prefix = allPrefixes[i]\n    if (allPrefixes.indexOf(prefix) === i) {\n      uniqueAllPrefixes.push(prefix)\n    }\n  }\n  return uniqueAllPrefixes\n}\n\nexport default {\n  uniqueAllPrefixes,\n  allPrefixes,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* RetUrn a StrinG coNtainIng spAce-deliMitEd numBerS StArTing FRom 0 Upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join('');\n};\n\nconst stringSequence = (n) => {\n  if (n === 0) return '';\n  const result = [];\n  for (let i = 1; i < n; i++) {"}
{"task_id": "JavaScript/16", "prompt": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* GivEn a string, fInd ouT hoW many DistiNct charActErs (reGarDLeSs Of caSE) doEs it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let character = string.charAt(0);\n  let characters = string.split('');\n\n  for (let i = 0; i < characters.length; i++) {\n    if (characters[i]!== character) {\n      count++;\n      character = characters[i];\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* InpUt to This fUncTion iS a strIng reprEseNting MusICaL nOtes in A SpeCial ASCII formAT.\n  your Task is to paRse this strinG and return list oF iNTeGeRS cOrresPonding TO hOW ManY bEATs dOeS EaCh\n  not LasT.\n\n  HeRE is A legeNd:\n  'o' - WhOlE NOTe, lAsts four bEATS\n  'o|' - half note, LaSTs two beAts\n  '.|' - quAteR note, LAsTs oNE beAt\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_array = music_string.split(' ');\n  const notes_and_lengths = [];\n  const index = 0;\n  const note_array = [];\n  const length_array = [];\n  while (index < music_string_array.length) {\n    if (music_string_array[index].charAt(0) === 'o' && music_string_array[index].charAt(1) === '|') {\n      const note_length = music_string_array[index].slice(2);\n      note_array.push(parseNote(note_length));\n      length_array.push(parseLength(note_length));\n    } else if (music_string_array[index].charAt(0) === 'o' && music_string_array[index].charAt(1) === '.') {\n      const note_length = music_string_array[index].slice(2);\n      note_array.push(parseNote(note_length));\n      length_array.push(parseLength(note_length));\n    } else if (music_string_array[index].charAt(0) === '.') {\n      const note_length = music_string_array[index].slice(1);\n      note_array.push(parseNote(note_length));\n      length_array.push(parseLength(note_length));\n    }\n    index++;\n  }\n  const length = length_array.reduce((prev, current, index) => (prev + current), 0);\n  const note_array_flat = note_array.reduce((prev, current, index) => (prev.concat(current)), []);\n  return {\n    length,\n    notes_and_lengths: note_array_flat,\n  };\n};\n\nconst parseNote = (note_string) => {\n  const note_array = note_string.split(' ');\n  const octave = note_array[0];\n  const note = note_array[1];\n  const accidental = note_array[2];\n  const accidental_number = accidental.charAt(0);\n  const accidental_note = accidental.slice(1);\n  const note_number = note.charAt(0);\n  const note_name = note.slice(1);\n  const accidental_note_number = accidental_note.charAt(0);\n  const accidental_note_name = accidental_note.slice(1);\n  return {\n    octave,\n    note,\n    accidental,\n    accidental_number,\n    accidental_note,\n    note_number,\n    note_name,\n    accidental_note_number,\n    accidental_note_name,\n  };\n};\n\nconst parseLength = (length_string) => {\n  const length_array = length_string.split(' ');\n  const length = length_array[0];\n  const length_unit = length_array[1];\n  return {\n    length,\n    length_unit,\n  };\n};\n\nconst getNote = (note) => {\n  if (note.note === 'C') {\n    return {\n      value: 0,\n    };\n  } else if (note.note === 'D') {\n    return {\n      value: 2,\n    };\n  } else if (note.note === 'E') {\n    return {\n      value: 4,\n    };\n  } else if (note.note === 'F') {\n    return {\n      value: 5,\n    };\n  } else if (note.note === 'G') {\n    return {\n      value: 7,\n    };\n  } else if (note.note === 'A') {\n    return {\n      value: 9,\n    };\n  } else if (note.note === 'B') {\n    return {\n      value: 11,\n    };\n  }\n};\n\nconst getAccidental = (accidental) => {\n  if (accidental ==='sharp') {\n    return {\n      value: 1,\n    };\n  } else if (accidental === 'flat') {\n    return {\n      value: -1,\n    };\n  }\n};\n\nconst getLength = (length) => {\n  if (length === 'Whole') {\n    return {\n      value: 4,\n    };\n  } else if (length === 'Half') {\n    return {\n      value: 2,\n    };\n  } else if (length === 'Quarter') {\n    return {\n      value: 1,\n    };\n  }\n};\n\nconst getAccidentalNumber = (accidental) => {\n  if (accidental === '1') {\n    return 1;\n  } else if (accidental === '2') {\n    return 2;\n  } else if (accidental === '3') {\n    return 3;\n  } else if (accidental === '4') {\n    return 4;\n  }\n};\n\nconst getAccidentalNote = (accidental_note) => {\n  if (accidental_note === 'C') {\n    return 0;\n  } else if (accidental_note === 'D') {\n    return 2;\n  } else if (accidental_note === 'E') {\n    return 4;\n  } else if (accidental_note === 'F') {\n    return 5;\n  } else if (accidental_note === 'G') {\n    return 7;\n  } else if (accidental_note === 'A') {\n    return 9;\n  } else if (accidental_note === 'B') {\n    return 11;\n  }\n};\n"}
{"task_id": "JavaScript/18", "prompt": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i\n      while (j < string.length - 1 && string.charAt(j + 1) === substring.charAt(0)) {\n        j += 1\n      }\n      if (j === i) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aa', 'a')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i\n      while (j < string.length - 1 && string.charAt(j + 1) === substring.charAt(0)) {\n        j += 1\n      }\n      if (j === i) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aa', 'a')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i\n      while (j < string.length - 1 && string.charAt(j + 1) === substring.charAt(0)) {\n        j += 1\n      }\n      if (j === i) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aa', 'a')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i\n      while (j < string.length - 1 && string.charAt(j + 1) === substring.charAt(0)) {\n        j += 1\n      }\n      if (j === i) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aa', 'a')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i\n      while (j < string.length - 1 && string.charAt(j + 1) === substring.charAt(0)) {\n        j += 1\n      }\n      if (j === i) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n\n/* FinD how Many times a GivEn substring can Be fouNd in the orIgiNal string. CoUnt OVeRlApinG CasEs.\n  >>> howManyTimes('a', 'a')\n  0\n  >>> howManyTimes('aa', 'a')\n  1\n  >>> howManyTimes('aaa', 'a')\n  2\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      let j = i\n      while (j < string.length - 1 && string.charAt(j + 1) === substring.charAt(0)) {\n        j += 1\n      }\n      if (j === i) {\n        count += 1\n      }\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five', 'six', 'seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numberArray = numbers.split(\" \")\n  const sortedArray = numberArray.sort(sortArray)\n  return sortedArray.join(\" \")\n}\n\n/*\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('one three five')\n  'one three five'\n  >>> sortNumbers('one one two')\n  'one two'\n  >>> sortNumbers('two three')\n  'two three'\n  >>> sortNumbers('two three two')\n  'two three two'\n  */\nconst sortArray = (a, b) => {\n  const x = parseInt(a)\n  const y = parseInt(b)\n  if (x < y) {\n    return -1\n  } else if (x > y) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\n/*\n  InpUt is a Space-DelImiteD striNg of numBerAls frOm 'zERo' To 'Nine'.\n  vAliD choices are 'zeRO', 'One', 'tWo', 'three', 'fouR', 'five','six','seveN', 'eighT' aND 'nInE'.\n  reTurn tHe strinG WiTH numbers SorTeD FRom SmALlEst to LarGesT\n  >>> sortNumbers('three one five')\n  'one three five'\n  >>> sortNumbers('one one two')\n  'one two'\n  >>> sortNumbers('two three')\n  'two three'\n  >>> sortNumbers('two three two')\n  'two three two'\n  */\nconst sort = (a, b) => {\n  const x = a.charAt(0)\n  const y = b.charAt(0)\n  if (x < y) {\n    return -1\n  } else if (x > y) {\n    return 1\n  } else {\n    return 0\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* FroM a supPlied list Of numbers (oF lengTh at lEast two) SelEct anD return twO ThAt Are tHE clOsest to each\n  otHER and return Them in order (sMaller number, LargeR nUMbEr).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min = Number.MAX_SAFE_INTEGER;\n  let closestNumber = Number.MAX_SAFE_INTEGER;\n  numbers.forEach(number => {\n    if (Math.abs(number - closestNumber) < min) {\n      closestNumber = number;\n    }\n  });\n  return closestNumber;\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* GivEn list of numbers (Of at lEasT two eLemenTs), apply A liNear tRanSFoRm To thAT list,\n  suCh that the smalLESt nuMber will beCome 0 and the laRgest WiLL bEcOMe 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let largest = 0\n  let smallest = 1\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > largest) largest = numbers[i]\n    if (numbers[i] < smallest) smallest = numbers[i]\n  }\n  let scale = 1 / (largest - smallest)\n  let newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] * scale)\n  }\n  return newNumbers\n}\n\nconst getNearest = (numbers, number) => {\n  let index = -1\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > number) {\n      index = i\n    } else if (numbers[i] == number) {\n      return number\n    }\n  }\n  return numbers[Math.floor(index / 2)]\n}\n\nconst getFirst = (numbers) => {\n  return numbers[0]\n}\n\nconst getLast = (numbers) => {\n  return numbers[numbers.length - 1]\n}\n\nconst getMedian = (numbers) => {\n  let mid = Math.floor(numbers.length / 2)\n  return (numbers[mid - 1] + numbers[mid]) / 2\n}\n\nconst getMode = (numbers) => {\n  let modes = {}\n  let max = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (modes[numbers[i]] == undefined) {\n      modes[numbers[i]] = 1\n      if (modes[numbers[i]] > max) max = modes[numbers[i]]\n    } else {\n      modes[numbers[i]]++\n    }\n  }\n  let mode = 0\n  for (let i in modes) {\n    if (modes[i] == max) {\n      mode = i\n    }\n  }\n  return mode\n}\n\nconst getRange = (numbers) => {\n  return getLast(numbers) - getFirst(numbers)\n}\n\nconst getStandardDeviation = (numbers) => {\n  let mean = getMean(numbers)\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2)\n  }\n  return Math.sqrt(sum / numbers.length)\n}\n\nconst getVariance = (numbers) => {\n  let mean = getMean(numbers)\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2)\n  }\n  return sum / numbers.length\n}\n\nconst getMean = (numbers) => {\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n  }\n  return sum / numbers.length\n}\n\nconst getVariance = (numbers) => {\n  let mean = getMean(numbers)\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2)\n  }\n  return sum / numbers.length\n}\n\nconst getRange = (numbers) => {\n  return getLast(numbers) - getFirst(numbers)\n}\n\nconst getStandardDeviation = (numbers) => {\n  let mean = getMean(numbers)\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean, 2)\n  }\n  return Math.sqrt(sum / numbers.length)\n}\n\nconst getMedian = (numbers) => {\n  let mid = Math.floor(numbers.length / 2)\n  return (numbers[mid - 1] + numbers[mid]) / 2\n}\n\nconst getMode = (numbers) => {\n  let modes = {}\n  let max = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (modes[numbers[i]] == undefined) {\n      modes[numbers[i]] = 1\n      if (modes[numbers[i]] > max) max = modes[numbers[i]]\n    } else {\n      modes[numbers[i]]++\n    }\n  }\n  let mode = 0\n  for (let i in modes) {\n    if (modes[i] == max) {\n      mode = i\n    }\n  }\n  return mode\n}\n\nconst getMode = (numbers) => {\n  let max = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) max = numbers[i]\n  }\n  return max\n}\n\nconst getMode = (numbers) => {\n  let max = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) max = numbers[i]\n  }\n  return max\n}\n\nmodule.exports = {\n  getNearest,\n  getFirst,\n  getLast,\n  getMedian,\n  getMode,\n  getRange,\n  getStandardDeviation,\n  getVariance,\n  rescaleToUnit,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* FilTer gIven list oF anY pythOn values onlY for intEgeRs\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const filtered = values.filter(x => typeof x === 'number');\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for floatRtEs\n  >>> filterFloats(['a', 3.14, 5])\n  []\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  const filtered = values.filter(x => typeof x === 'number');\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for stringRts\n  >>> filterStrings(['a', 3.14, 5])\n  [5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterStrings = (values) => {\n  const filtered = values.filter(x => typeof x ==='string');\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for booleanRts\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  const filtered = values.filter(x => typeof x === 'boolean');\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for objectRts\n  >>> filterObjects(['a', 3.14, 5])\n  [5]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  const filtered = values.filter(x => typeof x === 'object');\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for listRts\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  const filtered = values.filter(x => Array.isArray(x));\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for tupleRts\n  >>> filterTuples(['a', 3.14, 5])\n  [5]\n  >>> filterTuples([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterTuples = (values) => {\n  const filtered = values.filter(x => Array.isArray(x));\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for dictRts\n  >>> filterDicts(['a', 3.14, 5])\n  [5]\n  >>> filterDicts([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterDicts = (values) => {\n  const filtered = values.filter(x => typeof x === 'object');\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for functionRts\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFunctions = (values) => {\n  const filtered = values.filter(x => typeof x === 'function');\n  return filtered.length === 0? [] : filtered;\n};\n\n/*\n  #> FilTer gIven list oF anY pythOn values onlY for allRts\n  >>> filterAll(['a', 3.14, 5])\n  []\n  >>> filterAll([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterAll = (values) => {\n  const filtered = values.filter(x => x === undefined);\n  return filtered.length === 0? [] : filtered;\n};\n\nexport default {\n  filterIntegers,\n  filterFloats,\n  filterStrings,\n  filterBooleans,\n  filterObjects,\n  filterLists,\n  filterTuples,\n  filterDicts,\n  filterFunctions,\n  filterAll\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* RetUrn lEngth Of gIven string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  >>> strlen(1)\n  TypeError: expects a value of type string\n  >>> strlen(true)\n  TypeError: expects a value of type string\n  >>> strlen({})\n  TypeError: expects a value of type string\n  >>> strlen([]);\n  TypeError: expects a value of type string\n  >>> strlen(function(){});\n  TypeError: expects a value of type string\n  >>> strlen(null);\n  TypeError: expects a value of type string\n  >>> strlen(undefined);\n  TypeError: expects a value of type string\n  >>> strlen(true);\n  TypeError: expects a value of type string\n  >>> strlen('hello world');\n  12\n  >>> strlen('hello world world');\n  26\n  >>> strlen('hello world world world');\n  46\n  >>> strlen('hello world world world world');\n  66\n  >>> strlen('hello world world world world world');\n  86\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError(`Expects a value of type string, not ${typeof string}`);\n  }\n  return string.length;\n};\n\nexport default strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  return n - largestDivisor(n - 1)\n}\n\nconst findLargest = (a, b) => {\n  return largestDivisor(a) > largestDivisor(b)? a : b\n}\n\n/*\n  For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst findLargest = (a, b) => {\n  return largestDivisor(a) > largestDivisor(b)? a : b\n}\n\nconst smallestPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return i\n    }\n  }\n}\n\n/*\n  For A givEn numBer n, Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst smallestPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return i\n    }\n  }\n}\n\n/*\n  Find tHe larGest numBer That dIviDEs n EvEnly, SMalLer than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisorPrime = (n) => {\n  return smallestPrime(n)\n}\n\nconst findLargestPrime = (a, b) => {\n  return largestDivisorPrime(a) > largestDivisorPrime(b)? a : b\n}\n\nconst findLargestPrime = (a, b) => {\n  return largestDivisorPrime(a) > largestDivisorPrime(b)? a : b\n}\n\nconst smallestPrime = (n) => {\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return i\n    }\n  }\n}\n\nconst findLargestPrime = (a, b) => {\n  return largestPrime(a) > largestPrime(b)? a : b\n}\n\nconst findLargestPrime = (a, b) => {\n  return largestPrime(a) > largestPrime(b)? a : b\n}\n\n/*\n  >>> findLargestPrime(2, 5)\n  2\n  >>> findLargestPrime(2, 3)\n  3\n  >>> findLargestPrime(2, 1)\n  2\n  >>> findLargestPrime(3, 2)\n  3\n  >>> findLargestPrime(4, 5)\n  5\n  >>> findLargestPrime(2, 6)\n  2\n  >>> findLargestPrime(6, 4)\n  4\n  >>> findLargestPrime(4, 4)\n  4\n  >>> findLargestPrime(1, 7)\n  7\n  >>> findLargestPrime(8, 9)\n  9\n  >>> findLargestPrime(9, 9)\n  9\n  >>> findLargestPrime(1, 2)\n  2\n  >>> findLargestPrime(2, 2)\n  2\n  >>> findLargestPrime(1, 3)\n  3\n  >>> findLargestPrime(4, 3)\n  3\n  >>> findLargestPrime(4, 2)\n  2\n  >>> findLargestPrime(2, 4)\n  4\n  >>> findLargestPrime(2, 1)\n  2\n  >>> findLargestPrime(2, 0)\n  0\n  >>> findLargestPrime(1, 0)\n  0\n  >>> findLargestPrime(0, 1)\n  0\n  >>> findLargestPrime(2, -1)\n  -1\n  >>> findLargestPrime(2, -2)\n  -2\n  >>> findLargestPrime(-1, -2)\n  -2\n  >>> findLargestPrime(-1, -1)\n  -1\n  >>> findLargestPrime(-1, 0)\n  0\n  >>> findLargestPrime(-2, -1)\n  -1\n  >>> findLargestPrime(-2, 0)\n  0\n  >>> findLargestPrime(-2, 1)\n  1\n  >>> findLargestPrime(-2, 2)\n  2\n  >>> findLargestPrime(-2, 3)\n  3\n  >>> findLargestPrime(-4, 3)\n  3\n  >>> findLargestPrime(-4, 2)\n  2\n  >>> findLargestPrime(-4, 1)\n  1\n  >>> findLargestPrime(-4, 0)\n  0\n  >>> findLargestPrime(-3, 0)\n  0\n  >>> findLargestPrime(-2, 0)\n  0\n  >>> findLargestPrime(-1, 0)\n  0\n  >>> findLargestPrime(0, 0)\n  0\n  >>> findLargestPrime(0, -1)\n  -1\n  >>> findLargestPrime(0, -2)\n  -2\n  >>> findLargestPrime(0, -3)\n  -3\n  >>> findLargestPrime(0, -4)\n  -4\n  >>> findLargestPrime(0, -5)\n  -5\n  >>> findLargestPrime(0, -6)\n  -6\n  >>> findLargestPrime(0, -7)\n  -7\n  >>> findLargestPrime(0, -8)\n  -8\n  >>> findLargestPrime(0, -9)\n  -9\n  >>> findLargestPrime(0, -10)\n  -10\n  >>> findLargestPrime(0, -11)\n  -11\n  >>> findLargestPrime(0, -12)\n  -12\n  >>> findLargestPrime(0, -13)\n  -13\n  >>> findLargestPrime("}
{"task_id": "JavaScript/25", "prompt": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* RetUrn list oF primE faCtors Of givEn integEr in tHe ordEr fROm SmAlleST to Largest.\n  Each of THE facTors should Be listed numbEr of tImES cOrREsPondiNg to how MAnY TImeS iT APpeArES in fActorIzaTioN.\n  inpUt numBer ShOuLD BE eqUal to the pRODUct of all faCtORs\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const l = (n | 0)\n  let f = 1\n  let fx = 1\n  let nx = 1\n  while (n > 1) {\n    if (n & 1) {\n      f *= fx\n      nx = (nx << 1) | 1\n    }\n    if ((n >>= 1) & 1) {\n      fx *= fx\n      nx <<= 1\n    }\n  }\n  return [f, nx]\n}\n\n/*\n  factorize(0) => []\n  factorize(1) => []\n  factorize(7) => []\n  factorize(9) => []\n  factorize(10) => []\n  factorize(20) => []\n  factorize(25) => []\n  factorize(26) => []\n  factorize(70) => [2, 5, 7]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* FroM a list of IntegErs, RemovE all eLements ThaT occuR moRE tHaN oncE.\n  keeP order of elemeNTS lefT the same as in The input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter(n => seen.add(n));\n};\n\nmodule.exports = removeDuplicates;<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For A givEn string, fliP loWercaSe chaRacters To uPpercAse ANd UpPercASe tO lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let s = string;\n  let len = s.length;\n  let result = '';\n  let i;\n\n  for (i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i];\n    }\n  }\n  return result;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst upperCase = (string) => {\n  let s = string;\n  let len = s.length;\n  let result = '';\n  let i;\n\n  for (i = 0; i < len; i++) {\n    result += s[i].toUpperCase();\n  }\n  return result;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst lowerCase = (string) => {\n  let s = string;\n  let len = s.length;\n  let result = '';\n  let i;\n\n  for (i = 0; i < len; i++) {\n    result += s[i].toLowerCase();\n  }\n  return result;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst swapCase = (string) => {\n  let s = string;\n  let len = s.length;\n  let result = '';\n  let i;\n\n  for (i = 0; i < len; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result += s[i].toLowerCase();\n    } else {\n      result += s[i].toUpperCase();\n    }\n  }\n  return result;\n};\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst repeat = (string, count) => {\n  let s = string;\n  let len = s.length;\n  let result = '';\n  let i;\n\n  for (i = 0; i < count; i++) {\n    result += s;\n  }\n  return result;\n};\n\nmodule.exports = {\n  upperCase,\n  lowerCase,\n  swapCase,\n  repeat\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* ConCateNate list oF strings inTo a siNgle sTring\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n    return strings.join('')\n}\n\n/**\n  * @summary Returns a new sTring made by replacing all the\n  * occurences of the first arg with the second arg\n  * @locus Server\n  * @param {string} search\n  * @param {string} replace\n  * @returns {string}\n  * @type String\n  * @example\n  * ConCateNateReplace('xyz', 'w') // returns 'w'\n  * ConCateNateReplace('xyz', 'w', 'z') // returns 'zzz'\n  */\nconst ConCateNateReplace = (search, replace, subject) => {\n    return subject.replace(new RegExp(search, 'g'), replace)\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string}...strings\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNate = (...strings) => {\n    return concatenate(strings)\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string} string\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNateConcat = (string) => {\n    return ConCateNate(...string)\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string} string\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNatePrepend = (string) => {\n    return ConCateNate(string,...strings)\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string} string\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNateAppend = (string) => {\n    return ConCateNate(...strings, string)\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string} string\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNateSubStr = (string, start, length) => {\n    return ConCateNate(...strings, string.substr(start, length))\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string} string\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNateRemove = (string) => {\n    return ConCateNate(...strings, string.slice(1))\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string} string\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNateRemoveLast = (string) => {\n    return ConCateNate(...strings, string.slice(0, -1))\n}\n\n/**\n  * @summary Concatenates a sTring made by concatenating all the\n  * arg sTring togheter\n  * @locus Server\n  * @param {string} string\n  * @type String\n  * @example\n  * ConCateNate('a', 'b', 'c') // returns 'abc'\n  */\nconst ConCateNateRemoveFirst = (string) => {\n    return ConCateNate(...strings, string.slice(1))\n}\n\nmodule.exports = {\n    ConCateNate,\n    ConCateNateConcat,\n    ConCateNatePrepend,\n    ConCateNateAppend,\n    ConCateNateSubStr,\n    ConCateNateRemove,\n    ConCateNateRemoveLast,\n    ConCateNateRemoveFirst,\n    ConCateNateReplace\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* FilTer aN inpuT list of strings Only fOr oneS that stArt With a GivEN prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((string) => string.startsWith(prefix));\n}\n\n/*\n  Return all items in a list that have a name that starts with a given string.\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByName = (strings, name) => {\n  return strings.filter((string) => string.startsWith(name));\n}\n\n/*\n  Return the last item in a list that has a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  'array'\n  */\nconst filterByNameLast = (strings, name) => {\n  const result = filterByName(strings, name);\n  return result.length > 0? result[result.length - 1] : '';\n}\n\n/*\n  Return the first item in a list that has a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  'abc'\n  */\nconst filterByNameFirst = (strings, name) => {\n  const result = filterByName(strings, name);\n  return result.length > 0? result[0] : '';\n}\n\n/*\n  Return the first item in a list that has a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  'abc'\n  */\nconst filterByNameFirstIgnoreCase = (strings, name) => {\n  const result = filterByName(strings, name.toLowerCase());\n  return result.length > 0? result[0] : '';\n}\n\n/*\n  Return the first item in a list that has a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  'abc'\n  */\nconst filterByNameFirstIgnoreCaseCase = (strings, name) => {\n  const result = filterByName(strings, name.toLowerCase());\n  return result.length > 0? result[0] : '';\n}\n\n/*\n  Return a list of the items in a list that have a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNameStartsWith = (strings, name) => {\n  return strings.filter((string) => string.startsWith(name));\n}\n\n/*\n  Return a list of the items in a list that have a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNameStartsWithIgnoreCase = (strings, name) => {\n  return strings.filter((string) => string.toLowerCase().startsWith(name.toLowerCase()));\n}\n\n/*\n  Return a list of the items in a list that have a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNameStartsWithIgnoreCase = (strings, name) => {\n  return strings.filter((string) => string.toLowerCase().startsWith(name.toLowerCase()));\n}\n\n/*\n  Return a list of the items in a list that have a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNameEndsWith = (strings, name) => {\n  return strings.filter((string) => string.endsWith(name));\n}\n\n/*\n  Return a list of the items in a list that have a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNameEndsWithIgnoreCase = (strings, name) => {\n  return strings.filter((string) => string.toLowerCase().endsWith(name.toLowerCase()));\n}\n\n/*\n  Return a list of the items in a list that have a name that starts with a given string.\n  >>> filterByName([], 'a')\n  []\n  >>> filterByName(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filterByNameEndsWithIgnoreCase = (strings, name) => {\n  return strings.filter((string) => string.toLowerCase().endsWith(name.toLowerCase()));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*RetuRn onLy posItiVe numBers in tHe list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n    let result = [];\n    for (let i = 0; i < l.length; i++) {\n        let num = l[i];\n        if (num > 0) {\n            result.push(num);\n        }\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if a GivEn numBer is Prime, anD faLse otHerWIsE.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  //base case\n  if (n === 1) return false\n  if (n === 2) return true\n  //recur\n  if (n % 2 === 0) return false\n  //iteration\n  let i = 3\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 2\n  }\n  return true\n}\n\n/*\n  >>> isPrime(9)\n  true\n  >>> isPrime(16)\n  false\n  >>> isPrime(16)\n  true\n  >>> isPrime(16)\n  false\n  >>> isPrime(17)\n  true\n  >>> isPrime(19)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(29)\n  true\n  >>> isPrime(30)\n  true\n  >>> isPrime(31)\n  false\n  >>> isPrime(32)\n  true\n  >>> isPrime(33)\n  false\n  >>> isPrime(37)\n  true\n  >>> isPrime(38)\n  false\n  >>> isPrime(39)\n  false\n  >>> isPrime(40)\n  false\n  >>> isPrime(41)\n  true\n  >>> isPrime(43)\n  true\n  >>> isPrime(44)\n  true\n  >>> isPrime(45)\n  false\n  >>> isPrime(47)\n  true\n  >>> isPrime(48)\n  true\n  >>> isPrime(49)\n  false\n  >>> isPrime(50)\n  true\n  >>> isPrime(51)\n  false\n  >>> isPrime(53)\n  false\n  >>> isPrime(54)\n  false\n  >>> isPrime(55)\n  true\n  >>> isPrime(56)\n  true\n  >>> isPrime(57)\n  true\n  >>> isPrime(59)\n  true\n  >>> isPrime(60)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(62)\n  false\n  >>> isPrime(63)\n  false\n  >>> isPrime(64)\n  true\n  >>> isPrime(65)\n  false\n  >>> isPrime(66)\n  false\n  >>> isPrime(67)\n  true\n  >>> isPrime(68)\n  false\n  >>> isPrime(69)\n  false\n  >>> isPrime(70)\n  false\n  >>> isPrime(71)\n  false\n  >>> isPrime(72)\n  true\n  >>> isPrime(73)\n  false\n  >>> isPrime(74)\n  true\n  >>> isPrime(75)\n  false\n  >>> isPrime(76)\n  false\n  >>> isPrime(77)\n  false\n  >>> isPrime(78)\n  true\n  >>> isPrime(79)\n  false\n  >>> isPrime(80)\n  false\n  >>> isPrime(81)\n  false\n  >>> isPrime(82)\n  true\n  >>> isPrime(83)\n  false\n  >>> isPrime(84)\n  true\n  >>> isPrime(85)\n  false\n  >>> isPrime(86)\n  false\n  >>> isPrime(87)\n  false\n  >>> isPrime(88)\n  false\n  >>> isPrime(89)\n  false\n  >>> isPrime(90)\n  false\n  >>> isPrime(91)\n  false\n  >>> isPrime(92)\n  false\n  >>> isPrime(93)\n  false\n  >>> isPrime(94)\n  false\n  >>> isPrime(95)\n  false\n  >>> isPrime(96)\n  false\n  >>> isPrime(97)\n  false\n  >>> isPrime(98)\n  false\n  >>> isPrime(99)\n  false\n  >>> isPrime(100)\n  false\n  >>> isPrime(101)\n  false\n  >>> isPrime(102)\n  false\n  >>> isPrime(103)\n  false\n  >>> isPrime(104)\n  false\n  >>> isPrime(105)\n  false\n  >>> isPrime(106)\n  false\n  >>> isPrime(107)\n  false\n  >>> isPrime(108)\n  false\n  >>> isPrime(109)\n  false\n  >>> isPrime(110)\n  false\n  >>> isPrime(111)\n  false\n  >>> isPrime(112)\n  false\n  >>> isPrime(113)\n  false\n  >>> isPrime(114)\n  false\n  >>> isPrime(115)\n  false\n  >>> isPrime(116)\n  false\n  >>> isPrime(117)\n  false\n  >>> isPrime(118)\n  false\n  >>> isPrime(119)\n  false\n  >>> isPrime(120)\n  false\n  >>> isPrime(121)\n  false\n  >>> isPrime(122)\n  false\n  >>> isPrime(123)\n  false\n  >>> isPrime(124)\n  false\n  >>> isPrime(125)\n  false\n  >>> isPrime(126)\n  false\n  >>> isPrime(127)\n  false\n  >>> isPrime(128)\n  false\n  >>> isPrime(129)\n  false\n  >>> isPrime(130)\n  false\n  >>> isPrime(131)\n  false\n  >>> isPrime(132)\n  false\n  >>> isPrime(133)\n  false\n  >>> isPrime(134)\n  false\n  >>> isPrime(135)\n  false\n  >>> isPrime(136)\n  false\n  >>> isPrime(137)\n  false\n  >>> isPrime(138)\n  false\n  >>> isPrime(139)\n  false\n  >>> isPrime(140)\n  false\n  >>> isPrime(141)\n  false\n  >>> isPrime(142)\n  false\n  >>> isPrime(143)\n  false\n  >>> isPrime(144)\n  false\n  >>> isPrime(145)\n  false\n  >>> isPrime(146)\n  false\n  >>> isPrime(147)\n  false\n  >>> isPrime(148)\n  false\n  >>>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  EvaLuatEs polYnoMial wIth coEfficieNts xs At poiNt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\ncONsT poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs aRe coEFfiCients of a polyNOMial.\n  findZero Find x such thAt poly(x) = 0.\n  findZero returns onlY only ZeRO pOiNT, eVen if There arE MaNY.\n  morEoVER, findZero onLy TAkEs list xs havIng EveN NumBer of CoeFfIcIENTs\n  aNd largest NON Zero coeffiCiENt as it gUaranTeeS\n  a solUTiOn.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let {\n    max = 0,\n    index = 0\n  } = _.maxBy(xs, (item) => {\n    return poly(item);\n  });\n  return index;\n}\n\nconst coefs = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst x = 0.5;\nconst xs = [0, 1, -2, 3, -4, 5, -6, 7, -8, 9, -10, 11, -12, 13, -14, 15, -16, 17, -18, 19, -20, 21, -22, 23, -24, 25, -26, 27, -28, 29, -30, 31, -32, 33, -34, 35, -36, 37, -38, 39, -40, 41, -42, 43, -44, 45, -46, 47, -48, 49, -50, 51, -52, 53, -54, 55, -56, 57, -58, 59, -60, 61, -62, 63, -64, 65, -66, 67, -68, 69, -70, 71, -72, 73, -74, 75, -76, 77, -78, 79, -80, 81, -82, 83, -84, 85, -86, 87, -88, 89, -90, 91, -92, 93, -94, 95, -96, 97, -98, 99, -100, 101, -102, 103, -104, 105, -106, 107, -108, 109, -110, 111, -112, 113, -114, 115, -116, 117, -118, 119, -120, 121, -122, 123, -124, 125, -126, 127, -128, 129, -130, 131, -132, 133, -134, 135, -136, 137, -138, 139, -140, 141, -142, 143, -144, 145, -146, 147, -148, 149, -150, 151, -152, 153, -154, 155, -156, 157, -158, 159, -160, 161, -162, 163, -164, 165, -166, 167, -168, 169, -170, 171, -172, 173, -174, 175, -176, 177, -178, 179, -180, 181, -182, 183, -184, 185, -186, 187, -188, 189, -190, 191, -192, 193, -194, 195, -196, 197, -198, 199, -200, 201, -202, 203, -204, 205, -206, 207, -208, 209, -210, 211, -212, 213, -214, 215, -216, 217, -218, 219, -220, 221, -222, 223, -224, 225, -226, 227, -228, 229, -230, 231, -232, 233, -234, 235, -236, 237, -238, 239, -240, 241, -242, 243, -244, 245, -246, 247, -248, 249, -250, 251, -252, 253, -254, 255, -256, 257, -258, 259, -260, 261, -262, 263, -264, 265, -266, 267, -268, 269, -270, 271, -272, 273, -274, 275, -276, 277, -278, 279, -280, 281, -282, 283, -284, 285, -286, 287, -288, 289, -290, 291, -292, 293, -294, 295, -296, 297, -298, 299, -300, 301, -302, 303, -304, 305, -306, 307, -308, 309, -310, 311, -312, 313, -314, 315, -316, 317, -318, 319, -320, 321, -322, 323, -324, 325, -326, 327, -328, 329, -330, 331, -332, 333, -334, 335, -336, 337, -338, 339, -340, 341, -342, 343, -344, 345, -346, 347, -348, 349, -350, 351, -352, 353, -354, 355, -356, 357, -358, 359, -360, 361, -362, 363, -364, 365, -366, 367, -368, 369, -370, 371, -372, 373, -374, 375, -376, 377, -378, 379, -380, 381, -382, 383, -384, 385, -386, 387, -388, 389, -390, 391, -392, 393, -394, 395, -396, 397, -398, 399, -400, 401, -402, 403, -404, 405, -406, 407, -408, 409, -410, 411, -412, 413, -414, 415, -416, 417, -418, 419, -420, 421, -422, 423, -424, 425, -"}
{"task_id": "JavaScript/33", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe inDIciEs that are not dIVIsibLe by three, while iTs values at thE indiCiES tHaT ArE diviSible by three ARe EQUal\n  To THE vaLuES oF the cOrrEspONdiNg indIciEs Of l, BUT SorTed.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lst = [];\n  for (let i = 0; i < l.length; i++) {\n    const l1 = l[i];\n    const r = [];\n    for (let j = i + 1; j < l.length; j++) {\n      const r1 = l[j];\n      if (l1!== r1) {\n        r.push(l1);\n        r.push(r1);\n      }\n    }\n    lst.push(r);\n  }\n  return lst;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted unique eLemEnts in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n    if (!Array.isArray(l)) {\n        return null\n    }\n    let i = 1, l1 = l.slice(0), l2 = []\n    while (l1.length) {\n        for (let j = 0; j < l1.length; j++) {\n            let v = l1[j]\n            if (l2.indexOf(v) === -1) {\n                l2.push(v)\n            }\n        }\n        l1 = l2.slice()\n        l2 = []\n    }\n    return l2\n}\n\nexport default unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*RetuRn maXimum EleMent in tHe list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  return l.reduce((a, b) => (b > a? b : a), 0);\n};\n\nexport default maxElement;<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE numbEr oF timeS the dIgit 7 appEarS in inteGerS LeSs Than n WHicH are divisible BY 11 Or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let i, num, result;\n  for (i = 1; i <= n; i++) {\n    num = i;\n    if (num % 3 === 0) {\n      num = num / 3;\n      result = 'Fizz';\n    } else if (num % 5 === 0) {\n      num = num / 5;\n      result = 'Buzz';\n    } else {\n      result = num;\n    }\n    console.log(result);\n  }\n};\n\nfizzBuzz(79);\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS a list l and rEturnS a list l' such thAt\n  l' iS idenTicAL tO l in tHe odD IndIcies, while its VALues At the even indicIes are equal\n  tO the vAlUEs Of THe even IndicIes of l, buT SoRTEd.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let result = []\n  for (let i = 0; i < l.length; i += 2) {\n    result.push(l[i])\n  }\n  return result\n}\n\nexport default sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By cycLing groups of tHreE charActERs.\n  */\nCoNst encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  foR (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group oF groups) {\n    IF (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    elsE\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string encOded wItH EnCoDE_cYclic FunctioN. reTURns DeCODed StRInG.\n  */\nconsT decodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    groups.push(group);\n  }\n  for (const group of groups) {\n    groups2.push(groups[0] + groups[1] + group[0]);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as inPut string EncOded by cyclic. reTURns deCODed.\n  */\nconsT encodeCyclic = (s) => {\n  vAR groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    groups.push(group);\n  }\n  for (const group of groups) {\n    groups2.push(groups[0] + group[0] + groups[1]);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  encodeCyclic,\n  decodeCyclic,\n  en"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib retUrns n-th NumbeR thAt is a fibonAcci numBer And it'S alSO pRiMe.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = (n) => {\n    if (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);\n  };\n  return fib(n);\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe ThreE DisTinct elements in THE list thaT\n  sum to zero, And false otheRwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const result = l.filter(t => t > 0).reduce((a, b) => a + b, 0);\n  return result === 0;\n};\n\nconst triplesSumToZero = (l) => {\n  const result = l.filter(t => t > 0).reduce((a, b) => a + b, 0);\n  return result === 0;\n};\n\nexport {\n  triplesSumToZero,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  ImaGine A road ThaT's a peRfectLy straiGht InfinIteLY lOnG linE.\n  n CarS are driving leFT To riGht;  simultaNeously, a diffErent SeT Of n CaRS\n  aRe driVing rigHT tO LEft.   thE TWo sEtS Of Cars sTarT ouT BeiNg verY faR fRoM\n  EACh oTher.  All caRS MOve in the same SpEEd.  Two caRs are SaiD to coLLiDe\n  wHEn a CaR thAT's moVinG lEFT to rigHt hits a caR tHAT's mOvINg RigHt TO LeFt.\n  hoWever, The cArs are inFInITely sturdy And sTrong; aS a REsULT, thEy cOntinuE movInG\n  in TheiR TRajectORy AS IF tHEY did not collidE.\n\n  This functiON oUTpuTs tHe NUmBEr of suCh colLiSIonS.\n  */\ncOnst carRaceCollision = (n) => {\n  let posX = 0;\n  let posY = 0;\n  let collision = 0;\n  for (let i = 0; i < carCount; i++) {\n    for (let j = 0; j < carCount; j++) {\n      if (carPositions[i].y === carPositions[j].y && carPositions[i].x === carPositions[j].x) {\n        collision++;\n        posX = carPositions[i].x;\n        posY = carPositions[i].y;\n      }\n    }\n  }\n  return {\n    carCount,\n    collision,\n    posX,\n    posY\n  };\n};\n\n// Returns all cars that are currently driving to the left\nconst leftCollisions = (cars) => {\n  let collisions = 0;\n  for (let i = 0; i < carCount; i++) {\n    for (let j = i + 1; j < carCount; j++) {\n      if (cars[i].posX === cars[j].posX && cars[i].posY === cars[j].posY) {\n        collisions++;\n      }\n    }\n  }\n  return {\n    collisions,\n    cars\n  };\n};\n\nconst rightCollisions = (cars) => {\n  let collisions = 0;\n  for (let i = 0; i < carCount; i++) {\n    for (let j = i - 1; j >= 0; j--) {\n      if (cars[i].posX === cars[j].posX && cars[i].posY === cars[j].posY) {\n        collisions++;\n      }\n    }\n  }\n  return {\n    collisions,\n    cars\n  };\n};\n\nconst carRace = (cars) => {\n  let left = leftCollisions(cars);\n  let right = rightCollisions(cars);\n  let collisions = left.collisions + right.collisions;\n  let carPosition = {\n    cars,\n    collisions\n  };\n  return carPosition;\n};\n\n// Returns the car that collided the most times\nconst maxCollisions = (carPosition) => {\n  let max = 0;\n  for (let i = 0; i < carPosition.collisions; i++) {\n    if (carPosition.cars[i].collisions > max) {\n      max = carPosition.cars[i].collisions;\n    }\n  }\n  return carPosition.cars[max];\n};\n\nconst allCollisions = (cars) => {\n  let carPosition = carRace(cars);\n  return {\n    cars: carPosition.cars,\n    collisions: carPosition.collisions\n  };\n};\n\nconst checkCollisions = (cars) => {\n  let allCollisions = allCollisions(cars);\n  return allCollisions;\n};\n\nconst checkCollisionsCount = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return carPosition.collisions;\n};\n\n// Returns the cars that collided the most times\nconst mostCollisions = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return maxCollisions(carPosition);\n};\n\n// Returns the car that collided the least times\nconst leastCollisions = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return minCollisions(carPosition);\n};\n\nconst minCollisions = (carPosition) => {\n  let min = carCount;\n  for (let i = 0; i < carPosition.cars.length; i++) {\n    if (carPosition.cars[i].collisions < min) {\n      min = carPosition.cars[i].collisions;\n    }\n  }\n  return carPosition.cars[min];\n};\n\nconst allCollisionsCount = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return carPosition.collisions;\n};\n\nconst carRaceCount = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return carPosition.collisions;\n};\n\n// Returns the car that collided the least times\nconst leastCollisionsCount = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return carPosition.collisions;\n};\n\n// Returns the car that collided the most times\nconst mostCollisionsCount = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return carPosition.collisions;\n};\n\nconst timeToRace = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return carPosition.collisions;\n};\n\nconst race = (cars) => {\n  let carPosition = carRace(cars);\n  return carPosition;\n};\n\nconst timeToRaceCount = (cars) => {\n  let carPosition = checkCollisions(cars);\n  return carPosition.collisions;\n};\n\nmodule.exports = {\n  checkCollisionsCount,\n  allCollisionsCount,\n  mostCollisionsCount,\n  leastCollisionsCount,\n  timeToRaceCount,\n  race,\n  timeToRace,\n  raceCount,\n  carRaceCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*RetuRn list wiTh eleMenTs incRemenTed by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const len = l.length;\n  const ret = [];\n  for (let i = 0; i < len; i++) {\n    ret[i] = l[i] + 1;\n  }\n  return ret;\n};\n\n// [1, 2, 3]\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  */\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  */\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\n/*\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takEs a list oF inteGerS as an Input.\n  It returNs tRue if TheRE aRe Two dIStiNct elements in thE list THat\n  sUm to zero, anD false otherwIse.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const sum = sumOfPairs(l)\n  return sum === 0\n}\n\nexport { pairsSumToZero }\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*ChanGe nuMericAl base oF inpuT numbEr x to base.\n  return strIng RepreSenTAtIoN aftER thE conversion.\n  base nuMBErs aRe less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let x_ = x.toString(),\n    base_ = base.toString();\n\n  if (base_ === '10') {\n    return x_.toString();\n  } else if (base_ === '2') {\n    return x_ = x_ * x_;\n  } else if (base_ === '8') {\n    if (x_ >= 2) {\n      return x_ % 2 === 0? x_ / 2 : 3 * x_ + 1;\n    } else {\n      return x_;\n    }\n  } else if (base_ === '3') {\n    return x_ * x_ * x_;\n  } else if (base_ === '4') {\n    return x_ * x_ * x_ * x_;\n  } else if (base_ === '5') {\n    return x_ * x_ * x_ * x_ * x_;\n  } else if (base_ === '6') {\n    return x_ * x_ * x_ * x_ * x_ * x_;\n  } else if (base_ === '7') {\n    return x_ * x_ * x_ * x_ * x_ * x_ * x_;\n  } else if (base_ === '9') {\n    return x_ * x_ * x_ * x_ * x_ * x_ * x_ * x_;\n  } else {\n    throw new Error('Invalid base:'+ base);\n  }\n}\n\n// ----------\n// Tests\n// ----------\n\nconst tests = [\n  { input: 8, base: 10, expected: '2' },\n  { input: 8, base: 2, expected: '1000' },\n  { input: 7, base: 2, expected: '111' },\n];\n\ntests.forEach(({ input, base, expected }) => {\n  const actual = changeBase(input, base);\n  const message = `Expected: ${expected}, actual: ${actual}`;\n  assert(expected === actual, message);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*GiveN lenGth of a SidE and hIgh return arEa for a trIanGle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const b = a * h / 2;\n  return Math.sqrt(a * a + b * b);\n};\n\n/*\n  >>> triangleArea(3, 5)\n  7.5\n  >>> triangleArea(2, 1)\n  0\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea2(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea2(2, 1)\n  true\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea3(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea3(2, 1)\n  true\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea4(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea4(2, 1)\n  true\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea5(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea5(2, 1)\n  true\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea6(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea6(2, 1)\n  true\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea7(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea7(2, 1)\n  true\n  */\nconst triangleArea8 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea8(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea8(2, 1)\n  true\n  */\nconst triangleArea9 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea9(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea9(2, 1)\n  true\n  */\nconst triangleArea10 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea10(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea10(2, 1)\n  true\n  */\nconst triangleArea11 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea11(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea11(2, 1)\n  true\n  */\nconst triangleArea12 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea12(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea12(2, 1)\n  true\n  */\nconst triangleArea13 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea13(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea13(2, 1)\n  true\n  */\nconst triangleArea14 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea14(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea14(2, 1)\n  true\n  */\nconst triangleArea15 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea15(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea15(2, 1)\n  true\n  */\nconst triangleArea16 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea16(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea16(2, 1)\n  true\n  */\nconst triangleArea17 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea17(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea17(2, 1)\n  true\n  */\nconst triangleArea18 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea18(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea18(2, 1)\n  true\n  */\nconst triangleArea19 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea19(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea19(2, 1)\n  true\n  */\nconst triangleArea20 = (a, h) => {\n  return a * h / 2;\n};\n\n/*\n  >>> triangleArea(3, 5) === triangleArea20(3, 5)\n  true\n  >>> triangleArea(2, 1) === triangleArea20(2, 1)\n  true\n  */\nconst triangleArea21 = (a, h) =>"}
{"task_id": "JavaScript/46", "prompt": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The FIb4 nuMber sEquEnce iS a seqUence siMilAr to tHe FIBbOnAcci SEquNece that's defiNED as fOllows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  PleaSe write a funcTion tO eFFiCiENtLy comPute the n-th ELeMENt oF tHE fib4 NumBeR SeQuencE.  Do Not USe rEcursIon.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n <= 2) {\n        return 1;\n    }\n    else {\n        return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*RetuRn median of ElemeNts in The list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sorted = sort(l);\n  if (sorted.length === 0) return 0;\n  if (sorted.length % 2) return sorted[(sorted.length - 1) / 2];\n  return (sorted[(sorted.length - 1) / 2] + sorted[(sorted.length - 1) / 2 - 1]) / 2;\n};\n\n/*RetuRn quantile of ElemeNts in The list l.\n  >>> quantile([3, 1, 2, 4, 5])\n  2.0\n  >>> quantile([-10, 4, 6, 1000, 10, 20])\n  7.5\n  */\nconst quantile = (l) => {\n  let sorted = sort(l);\n  if (sorted.length === 0) return 0;\n  if (sorted.length % 2) return sorted[(sorted.length - 1) / 2];\n  if (sorted.length === 1) return sorted[0];\n  let half = sorted.length / 2;\n  let left = half - 1;\n  let right = half;\n  let compare = (x, y) => x - y;\n  while (left <= right) {\n    if (compare(sorted[left], sorted[right]) > 0) {\n      return sorted[left];\n    }\n    if (compare(sorted[left], sorted[right]) < 0) {\n      right -= 1;\n    }\n    if (compare(sorted[left], sorted[right]) > 0) {\n      return sorted[right];\n    }\n    left += 1;\n  }\n  return sorted[left];\n};\n\n/*RetuRn mode of ElemeNts in The list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst mode = (l) => {\n  let set = [];\n  for (let i = 0; i < l.length; i++) {\n    if (set.indexOf(l[i]) === -1) {\n      set.push(l[i]);\n    }\n  }\n  let max = 0;\n  let maxIndex = 0;\n  for (let i = 0; i < set.length; i++) {\n    if (set[i] > max) {\n      max = set[i];\n      maxIndex = i;\n    }\n  }\n  return set[maxIndex];\n};\n\n/*RetuRn mode of ElemeNts in The list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  6\n  */\nconst median2 = (l) => {\n  let sorted = sort(l);\n  if (sorted.length === 0) return 0;\n  if (sorted.length % 2) return sorted[(sorted.length - 1) / 2];\n  return (sorted[(sorted.length - 1) / 2] + sorted[(sorted.length - 1) / 2 - 1]) / 2;\n};\n\nmodule.exports = {\n  median,\n  quantile,\n  mode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  CheCks iF giveN stRing iS a palIndrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let n = text.length\n  for (let i = 0; i < n/2; i++) {\n    if (text[i]!== text[n - 1 - i]) {\n      return false\n    }\n  }\n  return true\n}\n\nconst getPalindrome = (text) => {\n  let s = text.toString()\n  return (new RegExp(s.split(\"\").reverse().join(\"\"), \"i\")).test(s)\n}\n\nconsole.log(isPalindrome('abba'))\nconsole.log(isPalindrome('abcd'))\nconsole.log(isPalindrome('abcc'))\nconsole.log(isPalindrome('aaab'))\nconsole.log(isPalindrome('aaaaa'))\nconsole.log(isPalindrome('aabaa'))\nconsole.log(isPalindrome('zabcd'))\nconsole.log(isPalindrome('zbcd'))\nconsole.log(isPalindrome('zbcc'))\nconsole.log(isPalindrome('zzcc'))\nconsole.log(isPalindrome('zzc'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('abcda'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome('zccd'))\nconsole.log(isPalindrome('zcc'))\nconsole.log(isPalindrome"}
{"task_id": "JavaScript/49", "prompt": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*RetuRn 2^n mOdulo p (Be aWare oF numeRics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    if (n === 0) return 0;\n    if (p === 0) return 1;\n    if (n === 1) return 0;\n\n    let d = n % p;\n    let m = modp(d, p);\n    return n - d + m;\n};\n\n//Exercice\nconst numero = Math.floor(Math.random() * 10) + 1;\nconsole.log(modp(numero, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retUrns EncodEd sTring By shiFting evEry CharaCteR By 5 in ThE alpHAbeT.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCoDEat(0)) % 26) + \"a\".cHarCodeAt(0)\n  )).jOin(\"\");\n}\n\n/*\n  takes as inPut stRiNG eNcODeD with Encode_sHIfT FUncTiON. retUrNS dEcodeD stRinG.\n  */\nConSt decodeShift = (s) => {\n  return s.split(\"\").map(v => ((v.charCodeAt(0) - 5 - \"a\".charCoDEat(0)) % 26) + \"a\").join(\"\");\n}\n\nconst decode = (s) => {\n  return s.split(\"\").map(v => v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").join(\"\");\n}\n\nconst encode = (s) => {\n  return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n}\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) - \"a\".charCoDEat(0) % 26 + \"a\").charCodeAt(0)).join(\"\");\n// }\n\n// const encode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt(0) + \"a\".charCoDEat(0)) % 26 + \"a\").join(\"\");\n// }\n\n// const decode = (s) => {\n//   return s.split(\"\").map(v => (v.charCodeAt"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a FuncTion tHat Takes StrinG and retUrnS striNg wIThOuT vowELs.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  return text.replace(/[AEIOUaeiou]/g, vowel => {\n    if (vowels.indexOf(vowel) > -1) {\n      return vowel;\n    }\n    return '';\n  });\n};\n\nmodule.exports = removeVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe if aLl nUmberS in the list l aRe below ThrEsholD t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const { length } = l;\n  const threshold = t;\n  let i = 0;\n  let j = length - 1;\n  let thresholdHit = false;\n  while (i < j) {\n    const mid = i + (j - i) / 2;\n    if (l[mid] >= threshold) {\n      thresholdHit = true;\n      i = mid;\n    } else {\n      j = mid;\n    }\n  }\n  return thresholdHit;\n};\n\n//# sourceMappingURL=belowThreshold.js.map<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add tWo nuMbers x And y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n// Add tWo nuMbers x And y\n// add(2, 3)\n// 5\n// add(5, 7)\n// 12\n\n// Add tWo nuMbers x And y\n// add(2, 3)\n// 5\n// add(5, 7)\n// 12\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  CheCk if Two woRds Have tHe samE characTerS.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  const s0Map = new Map();\n  for (const c of s0) s0Map.set(c, 1);\n  for (const c of s1) if (s0Map.has(c) && s0Map.get(c) === 1) return true;\n  return false;\n};\n\n/*\n  CheCk if Two woRds Have the same content.\n  >>> sameContent('eabcd', 'dddddddabc')\n  true\n  >>> sameContent('abcd', 'dddddddabc')\n  true\n  >>> sameContent('eabcd', 'dddddddabce')\n  false\n  >>> sameContent('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContent = (s0, s1) => {\n  const s0Map = new Map();\n  for (const c of s0) s0Map.set(c, 1);\n  for (const c of s1) if (s0Map.has(c) && s0Map.get(c) === 1) return true;\n  return false;\n};\n\n/*\n  CheCk if Two woRds Have the same content.\n  >>> sameContent('eabcd', 'dddddddabc')\n  true\n  >>> sameContent('abcd', 'dddddddabc')\n  true\n  >>> sameContent('eabcd', 'dddddddabce')\n  false\n  >>> sameContent('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameContent2 = (s0, s1) => {\n  const s0Map = new Map();\n  for (const c of s0) s0Map.set(c, 1);\n  for (const c of s1) if (s0Map.has(c) && s0Map.get(c) === 1) return true;\n  return false;\n};\n\nmodule.exports = {\n  sameChars, sameContent, sameContent2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*RetuRn n-th FiBonacCi nUmber.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1, c = 0;\n  while (n) {\n    c = a + b;\n    a = b;\n    b = c;\n    n--;\n  }\n  return c;\n};\n\n/*\n  1.1.4\n  https://en.wikipedia.org/wiki/Fibonacci_number#Recurrence_formula\n\n  Let f(x) be the nth fibonacci number.\n  Let a(x) be the number of the terms of the sequence f(x) that are smaller than x.\n  Let b(x) be the number of the terms of the sequence f(x) that are larger than x.\n  Let f(x) = a(x) + b(x).\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n\n  Let a(x) be the smallest integer such that a(x) + b(x) <= x.\n  Let b(x) be the largest integer such that a(x) + b(x) >= x.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n  Let a(x) = b(x) = 0 when x = 3.\n  Let a(x) = 1 when x = 4.\n  Let b(x) = 1 when x = 5.\n  Let a(x) = b(x) = 0 when x = 6.\n  Let a(x) = 1 when x = 7.\n  Let b(x) = 1 when x = 8.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n  Let a(x) = b(x) = 0 when x = 3.\n  Let a(x) = 1 when x = 4.\n  Let b(x) = 1 when x = 5.\n  Let a(x) = b(x) = 0 when x = 6.\n  Let a(x) = 1 when x = 7.\n  Let b(x) = 1 when x = 8.\n  Let a(x) = b(x) = 0 when x = 9.\n  Let a(x) = 1 when x = 10.\n  Let b(x) = 1 when x = 11.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n  Let a(x) = b(x) = 0 when x = 3.\n  Let a(x) = 1 when x = 4.\n  Let b(x) = 1 when x = 5.\n  Let a(x) = b(x) = 0 when x = 6.\n  Let a(x) = 1 when x = 7.\n  Let b(x) = 1 when x = 8.\n  Let a(x) = b(x) = 0 when x = 9.\n  Let a(x) = 1 when x = 10.\n  Let b(x) = 1 when x = 11.\n  Let a(x) = b(x) = 0 when x = 12.\n  Let a(x) = 1 when x = 13.\n  Let b(x) = 1 when x = 14.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x = 0.\n  Let a(x) = 1 when x = 1.\n  Let b(x) = 1 when x = 2.\n  Let a(x) = b(x) = 0 when x = 3.\n  Let a(x) = 1 when x = 4.\n  Let b(x) = 1 when x = 5.\n  Let a(x) = b(x) = 0 when x = 6.\n  Let a(x) = 1 when x = 7.\n  Let b(x) = 1 when x = 8.\n  Let a(x) = b(x) = 0 when x = 9.\n  Let a(x) = 1 when x = 10.\n  Let b(x) = 1 when x = 11.\n  Let a(x) = b(x) = 0 when x = 12.\n  Let a(x) = 1 when x = 13.\n  Let b(x) = 1 when x = 14.\n  Let a(x) = b(x) = 0 when x = 15.\n  Let a(x) = 1 when x = 16.\n  Let b(x) = 1 when x = 17.\n\n  Let f(x) = a(x) + b(x)\n  Let a(x) = b(x) = 0 when x ="}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"<\" aNd \">\".\n  return fAlse iF everY openinG brAcket Has A CoRrEspoNDinG closing brackET.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = brackets.split('');\n  stack.reverse();\n  let stackIndex = 0;\n  let result = false;\n  while (stackIndex < stack.length) {\n    if (stack[stackIndex] === '<') {\n      stackIndex++;\n      let isOpen = stackIndex < stack.length;\n      let isClosing = stackIndex < stack.length - 1;\n      if (isOpen && isClosing) {\n        if (stack[stackIndex + 1] === '<') {\n          stackIndex++;\n          result = true;\n        }\n      }\n    } else if (stack[stackIndex] === '>') {\n      stackIndex++;\n      let isOpen = stackIndex < stack.length;\n      let isClosing = stackIndex < stack.length - 1;\n      if (isOpen && isClosing) {\n        if (stack[stackIndex + 1] === '>') {\n          stackIndex++;\n          result = true;\n        }\n      }\n    } else {\n      stackIndex++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*RetuRn trUe is list eLemEnts aRe monOtonicaLly IncreAsiNG oR dEcreASinG.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (l.length === 0) return false\n  const sorted = l.slice().sort((a, b) => a - b)\n  let previous = sorted[0]\n  for (let i = 1; i < sorted.length; i++) {\n    if (previous - sorted[i]!== 0) return false\n    previous = sorted[i]\n  }\n  return true\n}\n\n/**\n  >>> monotonic([1, 2, 4, 20])\n  false\n  >>> monotonic([1, 20, 4, 10])\n  true\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nexport const isMonotonic = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*RetuRn soRted uNiqUe common eleMents For two lIstS.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const l1 = [].concat(l1);\n    const l2 = [].concat(l2);\n    let common = [];\n    let commonIndex = -1;\n    let index = -1;\n    while ((index = l1.indexOf(l2[commonIndex]))!== -1) {\n        common.push(l1[index]);\n        commonIndex++;\n    }\n    return common;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*RetuRn thE largest primE faCtor oF n. AssuMe n > 1 and is Not A primE.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const factorize = primeFactorize(n)\n  const factor = factorize.pop()\n  if (factor <= 1) return n\n  const factors = largestPrimeFactor(factor)\n  const factorsProduct = factors.reduce((a, b) => a * b, 1)\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor2 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  return largestPrimeFactor(n / factors)\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor3 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor4 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factors3 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2 * factors3\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor5 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factors3 = largestPrimeFactor(factorize.pop())\n  const factors4 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2 * factors3 * factors4\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor6 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factors3 = largestPrimeFactor(factorize.pop())\n  const factors4 = largestPrimeFactor(factorize.pop())\n  const factors5 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2 * factors3 * factors4 * factors5\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor7 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factors3 = largestPrimeFactor(factorize.pop())\n  const factors4 = largestPrimeFactor(factorize.pop())\n  const factors5 = largestPrimeFactor(factorize.pop())\n  const factors6 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2 * factors3 * factors4 * factors5 * factors6\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor8 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factors3 = largestPrimeFactor(factorize.pop())\n  const factors4 = largestPrimeFactor(factorize.pop())\n  const factors5 = largestPrimeFactor(factorize.pop())\n  const factors6 = largestPrimeFactor(factorize.pop())\n  const factors7 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2 * factors3 * factors4 * factors5 * factors6 * factors7\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor9 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factors3 = largestPrimeFactor(factorize.pop())\n  const factors4 = largestPrimeFactor(factorize.pop())\n  const factors5 = largestPrimeFactor(factorize.pop())\n  const factors6 = largestPrimeFactor(factorize.pop())\n  const factors7 = largestPrimeFactor(factorize.pop())\n  const factors8 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2 * factors3 * factors4 * factors5 * factors6 * factors7 * factors8\n  return n / factorsProduct\n}\n\n/*\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor10 = (n) => {\n  const factorize = primeFactorize(n)\n  const factors = largestPrimeFactor(factorize.pop())\n  const factors2 = largestPrimeFactor(factorize.pop())\n  const factors3 = largestPrimeFactor(factorize.pop())\n  const factors4 = largestPrimeFactor(factorize.pop())\n  const factors5 = largestPrimeFactor(factorize.pop())\n  const factors6 = largestPrimeFactor(factorize.pop())\n  const factors7 = largestPrimeFactor(factorize.pop())\n  const factors8 = largestPrimeFactor(factorize.pop())\n  const factors9 = largestPrimeFactor(factorize.pop())\n  const factorsProduct = factors * factors2 * factors3"}
{"task_id": "JavaScript/60", "prompt": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTON is A funcTioN that Sums nUmbers fRom 1 To n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let s = 0\n  for (let i = 1; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum2ToN is A funcTioN that Sums 2 To n.\n  >>> sum2ToN(30)\n  465\n  >>> sum2ToN(100)\n  5050\n  >>> sum2ToN(5)\n  6\n  >>> sum2ToN(10)\n  55\n  >>> sum2ToN(1)\n  2\n  */\nconst sum2ToN = (n) => {\n  let s = 0\n  for (let i = 2; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum3ToN is A funcTioN that Sums 3 To n.\n  >>> sum3ToN(30)\n  465\n  >>> sum3ToN(100)\n  5050\n  >>> sum3ToN(5)\n  7\n  >>> sum3ToN(10)\n  55\n  >>> sum3ToN(1)\n  3\n  */\nconst sum3ToN = (n) => {\n  let s = 0\n  for (let i = 3; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum4ToN is A funcTioN that Sums 4 To n.\n  >>> sum4ToN(30)\n  465\n  >>> sum4ToN(100)\n  5050\n  >>> sum4ToN(5)\n  9\n  >>> sum4ToN(10)\n  55\n  >>> sum4ToN(1)\n  4\n  */\nconst sum4ToN = (n) => {\n  let s = 0\n  for (let i = 4; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum5ToN is A funcTioN that Sums 5 To n.\n  >>> sum5ToN(30)\n  465\n  >>> sum5ToN(100)\n  5050\n  >>> sum5ToN(5)\n  10\n  >>> sum5ToN(10)\n  55\n  >>> sum5ToN(1)\n  5\n  */\nconst sum5ToN = (n) => {\n  let s = 0\n  for (let i = 5; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum6ToN is A funcTioN that Sums 6 To n.\n  >>> sum6ToN(30)\n  465\n  >>> sum6ToN(100)\n  5050\n  >>> sum6ToN(5)\n  12\n  >>> sum6ToN(10)\n  55\n  >>> sum6ToN(1)\n  6\n  */\nconst sum6ToN = (n) => {\n  let s = 0\n  for (let i = 6; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum7ToN is A funcTioN that Sums 7 To n.\n  >>> sum7ToN(30)\n  465\n  >>> sum7ToN(100)\n  5050\n  >>> sum7ToN(5)\n  14\n  >>> sum7ToN(10)\n  55\n  >>> sum7ToN(1)\n  7\n  */\nconst sum7ToN = (n) => {\n  let s = 0\n  for (let i = 7; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum8ToN is A funcTioN that Sums 8 To n.\n  >>> sum8ToN(30)\n  465\n  >>> sum8ToN(100)\n  5050\n  >>> sum8ToN(5)\n  16\n  >>> sum8ToN(10)\n  55\n  >>> sum8ToN(1)\n  8\n  */\nconst sum8ToN = (n) => {\n  let s = 0\n  for (let i = 8; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum9ToN is A funcTioN that Sums 9 To n.\n  >>> sum9ToN(30)\n  465\n  >>> sum9ToN(100)\n  5050\n  >>> sum9ToN(5)\n  17\n  >>> sum9ToN(10)\n  55\n  >>> sum9ToN(1)\n  9\n  */\nconst sum9ToN = (n) => {\n  let s = 0\n  for (let i = 9; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum10ToN is A funcTioN that Sums 10 To n.\n  >>> sum10ToN(30)\n  465\n  >>> sum10ToN(100)\n  5050\n  >>> sum10ToN(5)\n  20\n  >>> sum10ToN(10)\n  55\n  >>> sum10ToN(1)\n  10\n  */\nconst sum10ToN = (n) => {\n  let s = 0\n  for (let i = 10; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n  # sum11ToN is A funcTioN that Sums 11 To n.\n  >>> sum11ToN(30)\n  465\n  >>> sum11ToN(100)\n  5050\n  >>> sum11ToN(5)\n  22\n  >>> sum11ToN(10)\n  55\n  >>> sum11ToN(1)\n  11\n  */\nconst sum11ToN = (n) => {\n  let s = 0\n  for (let i = 11; i <= n; i++) {\n    s += i\n  }\n  return s\n}\n\n/*\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a StriNg of \"(\" aNd \")\".\n  return tRue if Every Opening BraCket hAs a COrReSponDIng Closing brackeT.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let stack = [];\n    let isOpen = false;\n    for (let char of brackets) {\n        if (char === \")\") {\n            if (isOpen === false) {\n                return false;\n            }\n            isOpen = false;\n        } else if (char === \"(\") {\n            if (isOpen === true) {\n                return false;\n            }\n            isOpen = true;\n        } else {\n            stack.push(char);\n        }\n    }\n    return stack.every((char) => {\n        return isOpen === false;\n    });\n};\n\n/*\n  Given an input string, returns the string after removing the\n  first and last occurrences of a given character.\n  If the character is not in the string, returns the string unchanged.\n\n  >>> remove(\",)\")\n  \",\n  >>> remove(\"(,)\")\n  \"\",\n  >>> remove(\"()\")\n  \"\",\n  >>> remove(\"()()\")\n  \"\",\n  >>> remove(\"(()())\")\n  \"(()())\",\n  >>> remove(\"(()()(())(\")\n  \"(()()()())(\",\n  >>> remove(\"(()()()())\")\n  \"(()()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()()()))\",\n  >>> remove(\"(()()()))\")\n  \"(()()()()))\",\n  >>> remove(\"(()()()))\")\n  \"(()()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()()))\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()())\",\n  >>> remove(\"(()()()))\")\n  \"(()()"}
{"task_id": "JavaScript/62", "prompt": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs repReseNt coeFfiCientS of a pOlynomiAl.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   REturn derivative Of tHIs PoLynoMIal in The same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let res = [0];\n  for (let i = 1; i < xs.length; i++) {\n    res.push(res[i - 1] + (xs[i] - xs[i - 1]));\n  }\n  return res;\n};\n\nexport default {\n  derivative,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FIbFiB numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const fib = [0, 0, 1, 1];\n\n  if (n <= 2) return fib[n];\n  else {\n    const fib2 = fibfib(n - 2);\n    return fib[n] = fib[n - 1] + fib2;\n  }\n};\n\n/*\n  // The fiBfib(n) numbEr sEquenCe is a SequencE siMilar To tHE FIbBonaCCi sEqunece that's dEFIned As follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  PLease write a fUnctiOn TO eFfICiEntly Compute THe n-th ELEmeNt OF The fibfib NuMBeR sequEncE.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fib = (n) => {\n  const fib = [0, 0, 1, 1];\n\n  if (n <= 2) return fib[n];\n  else {\n    const fib2 = fib(n - 2);\n    return fib[n] = fib2 + fib[n - 1];\n  }\n};\n\nexport { fibfib, fib };\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN vowelsCount whIch taKes a sTring rePreSentiNg\n  a WOrD aS inpUT anD returns the nuMBEr of vowels in The string.\n  VOwels in this casE are 'a', 'E', 'i', 'O', 'U'. HErE, 'Y' iS also A\n  vowel, bUT oNLY whEn IT Is aT tHE eNd of tHe gIveN WorD.\n\n  ExamPle:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  return count\n}\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------\n\n// ---------------------------------------------------"}
{"task_id": "JavaScript/65", "prompt": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*CircUlar shift The diGitS of thE inteGer x, shift the dIgiTs rigHt bY shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return digiTs reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  if (shift === 0) {\n    return x\n  }\n  if (shift > x.length) {\n    return x.split('').reverse().join('')\n  }\n  let carry = 0\n  const digiTs = x.split('')\n  const sz = x.length\n  const r = []\n  for (let i = 0; i < sz; i++) {\n    const d = parseInt(digiTs[i], 10)\n    const n = d + shift\n    carry = n > 9? 1 : 0\n    r.push(carry + n)\n  }\n  return r.join('')\n}\n\n/*\n  Given a string x and an int shift, return a new string containing x shifted left by shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return \"0\" + digiTs reversed.\n  >>> circularShift(\"abc\", 1)\n  \"bca\"\n  >>> circularShift(\"abc\", 2)\n  \"ac\"\n  >>> circularShift(\"abc\", 3)\n  \"0abc\"\n  */\nconst circularShiftStr = (x, shift) => {\n  if (shift === 0) {\n    return x\n  }\n  if (shift > x.length) {\n    return \"0\" + x.split('').reverse().join('')\n  }\n  const shiftStr = String.fromCharCode(shift)\n  const digiTs = x.split('')\n  const r = []\n  for (let i = 0; i < x.length; i++) {\n    const d = parseInt(digiTs[i], 10)\n    const n = d + shift\n    const s = \"\" + shiftStr + n\n    carry = n > 9? 1 : 0\n    r.push(carry + s)\n  }\n  return r.join('')\n}\n\n/*\n  Given a string x and an int shift, return a new string containing x shifted left by shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return \"0\" + digiTs reversed.\n  >>> circularShiftStr(\"abc\", 1)\n  \"bca\"\n  >>> circularShiftStr(\"abc\", 2)\n  \"ac\"\n  >>> circularShiftStr(\"abc\", 3)\n  \"0abc\"\n  */\nconst circularShiftStr = (x, shift) => {\n  if (shift === 0) {\n    return x\n  }\n  if (shift > x.length) {\n    return \"0\" + x.split('').reverse().join('')\n  }\n  const shiftStr = String.fromCharCode(shift)\n  const digiTs = x.split('')\n  const r = []\n  for (let i = 0; i < x.length; i++) {\n    const d = parseInt(digiTs[i], 10)\n    const n = d + shift\n    const s = \"\" + shiftStr + n\n    carry = n > 9? 1 : 0\n    r.push(carry + s)\n  }\n  return r.join('')\n}\n\n/*\n  Given a string x and an int shift, return a new string containing x shifted left by shift\n  AnD return tHe reSUlt As a string.\n  If shift > nuMBEr of Digits, return \"0\" + digiTs reversed.\n  >>> circularShiftStr(\"abc\", 1)\n  \"bca\"\n  >>> circularShiftStr(\"abc\", 2)\n  \"ac\"\n  >>> circularShiftStr(\"abc\", 3)\n  \"0abc\"\n  */\nconst circularShiftStr = (x, shift) => {\n  if (shift === 0) {\n    return x\n  }\n  if (shift > x.length) {\n    return \"0\" + x.split('').reverse().join('')\n  }\n  const shiftStr = String.fromCharCode(shift)\n  const digiTs = x.split('')\n  const r = []\n  for (let i = 0; i < x.length; i++) {\n    const d = parseInt(digiTs[i], 10)\n    const n = d + shift\n    const s = \"\" + shiftStr + n\n    carry = n > 9? 1 : 0\n    r.push(carry + s)\n  }\n  return r.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  writE a funCtiOn thaT takeS a strinG as Input And REtUrNs thE Sum Of the upper chaRACterS only'\n  ASCII Codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  return s.toString().split('').reduce((sum, char) => sum + parseInt(char), 0);\n};\n\nmodule.exports = digitSum;\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis tAsk, yoU wiLl be gIven a String tHat RepreSenTS a NuMber OF apPles and orangeS\n  THat aRe distribuTed in a basket of Fruit ThIS bAsKEt ContaIns\n  applES, oRANgeS, aND ManGo FRuIts. GiVen The STriNg thaT rePrEsENTS thE total numBER Of\n  the orangEs ANd appleS and aN inTeger THaT rePResEnT thE TotaL nuMbER Of the fRuits\n  in the bAsKET return thE nUMbEr oF tHE MaNgO fRuits in The bAsket.\n  for EXaMBle:\n  fruitDistribution(\"5 apples aNd 6 orAnges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 aPpLEs AND 1 orAngEs\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 applEs anD 3 oRAngeS\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 APples aND 1 oRANGeS\",120) -> 120 - 100 - 1 = 19\n  */\nCOnst fruitDistribution = (s, n) => {\n    if (s.length === 0) {\n        return 0;\n    }\n\n    let sum = 0;\n    let num = n;\n    let fruit = 0;\n    let numOfFruit = 0;\n    let fruitLength = 0;\n    let fruitLength = 0;\n\n    s.split('').forEach(elem => {\n        fruit = elem;\n        sum += num;\n        numOfFruit += 1;\n        if (fruit === 'a') {\n            fruitLength += 1;\n        } else if (fruit === 'o') {\n            fruitLength += 1;\n        } else if (fruit === 'p') {\n            fruitLength += 1;\n        }\n    });\n\n    return sum - numOfFruit * fruitLength;\n}\n\nfruitDistribution(\"5 apples aNd 6 orangEES\", 19)\nfruitDistribution(\"2 applEes anD 3 oranges\", 100)\nfruitDistribution(\"100 APpleS aNd 1 orange\", 120)\n\nconsole.log(fruitDistribution(\"0 aPpLEs AND 1 orangEeS\", 3))\nconsole.log(fruitDistribution(\"2 applEes anD 3 oranges\", 100))\nconsole.log(fruitDistribution(\"100 APpleS aNd 1 orange\", 120))\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"GivEn an Array RepResenTing a Branch oF a tRee thAt hAS nOn-NegaTIve Integer nodes\n  yOUR tasK is to pluck one of The nodes and return iT.\n  The pLuCKeD nODe ShoulD be the nODe WITh tHe SMAllEsT EvEn valUe.\n  IF muLTipLe nodEs wItH tHE SAme Smallest eVEN Value are foUnD return The node That hAs sMalleST iNdeX.\n\n  the PlUckED nodE shOuLD Be retuRned in a list, [ smalEsT_VAluE, iTS iNdeX ],\n  IF THeRe ArE no evEn vaLues or thE GiVEn array is eMpty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const list = []\n  for (let i = 0; i < arr.length; i++) {\n    const node = arr[i]\n    const nodeValue = node.value\n    if (nodeValue > 0) {\n      const value = nodeValue\n      if (nodeValue % 2 === 1) {\n        list.push([node, value])\n      }\n    } else {\n      const value = -nodeValue\n      if (nodeValue % 2 === 1) {\n        list.push([node, value])\n      }\n    }\n  }\n  list.sort((a, b) => b[1] - a[1])\n  return list[0]\n}\n\nconsole.log(pluck([4, 2, 3]))\nconsole.log(pluck([1, 2, 3]))\nconsole.log(pluck([]))\nconsole.log(pluck([5, 0, 3, 0, 4, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a Non-Empty list Of posItive inTegErs. ReTurN ThE gReatESt iNteger that is gREAter Than\n  zero, anD has a frequenCy greAtER tHaN Or Equal To the vaLUe OF The InTEGer ItSElF.\n  The fReqUenCY of An intEgeR iS tHE NUmbEr of times IT APpears in the list.\n  IF nO Such a vaLue exIst, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let counter = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let v = lst[i];\n    if (v > 0) {\n      counter += v;\n    }\n  }\n  return counter;\n};\n\n// @param {Array} lst\n// @return {Number}\nexport default search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn list of IntegErs, return list in StranGe ordEr.\n  StranGe sOrtinG, is WHeN yOu stARt wIth the minimum VALue,\n  tHen maximum Of the remainiNg intEgERs, ThEN mInimuM and so oN.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let res = []\n  for (let i = 0; i < lst.length; i++) {\n    let current = lst[i]\n    let index = 0\n    while (index < res.length && res[index].value > current) {\n      index += 1\n    }\n    res.splice(index, 0, current)\n  }\n  return res\n}\n\nexport default {\n  strangeSortList,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn thE lengThs Of the Three Sides of a TriAngle. retURn ThE area of\n  tHE trIangle rounded TO 2 DeciMal points iF the three sidEs forM a vALiD tRIaNgle.\n  OTherwisE return -1\n  thREE siDeS MAke a VaLId TrianGle WheN The Sum of Any TwO sIDES is Greater\n  thAN THe third sidE.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let sides = [a, b, c];\n  let sum = 0;\n  for (let i = 0; i < sides.length; i++) {\n    sum += sides[i];\n  }\n  if (sum > 2 * Math.pow(10, -6)) {\n    let a = sides[0];\n    let b = sides[1];\n    let c = sides[2];\n    let s = sum;\n    let r = Math.pow(10, -6);\n    let area = (((a * c) - (b * b)) / (2 * s)) * r;\n    return area;\n  } else {\n    return -1;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat reTurns True if tHe oBject q WilL FlY, aNd faLSe oTherwise.\n  The obJECt q wiLl fly if it's Balanced (it is A paliNdROmIc list) ANd The suM of its eLEmENTs iS lESS thAn OR eQual tHe mAxiMUm pOssibLe wEiGhT w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    const weights = q.reduce((a, b) => a + b, 0);\n    return w <= weights;\n}\n\nconst findMin = (q) => q.reduce((a, b) => a < b? a : b, Infinity);\n\n/*\n  Given a weighted list, willItFly will return true if the list can be balanced.\n  We assume that the list has been sorted and that there are no duplicates in the list.\n\n  Example:\n  willItFly([3, 2, 3, 5, 3, 2, 1, 7, 9, 4, 3, 2, 1]) ➞ true\n*/\nconst willItFly2 = (q) => {\n    let curMax = findMin(q);\n    let curMin = Infinity;\n    while (curMax >= curMin) {\n        let curNextMax = findMin(q.slice(0, q.indexOf(curMax)));\n        if (curNextMax <= curMax) {\n            return false;\n        }\n        curMax = curNextMax;\n    }\n    return true;\n}\n\n/*\n  Given a list, willItFly will return true if the list can be balanced.\n  We assume that the list has been sorted and that there are no duplicates in the list.\n\n  Example:\n  willItFly([3, 2, 3, 5, 3, 2, 1, 7, 9, 4, 3, 2, 1]) ➞ true\n*/\nconst willItFly3 = (q) => {\n    let curMax = Infinity;\n    let curMin = Infinity;\n    let curNextMax = Infinity;\n    while (curMax >= curMin) {\n        curNextMax = findMin(q.slice(0, q.indexOf(curMax)));\n        if (curNextMax <= curMax) {\n            return false;\n        }\n        curMax = curNextMax;\n    }\n    return true;\n}\n\nconst willItFly4 = (q) => {\n    let curMax = Infinity;\n    let curMin = Infinity;\n    let curNextMax = Infinity;\n    let curNextMin = Infinity;\n    while (curMax >= curMin) {\n        curNextMax = findMin(q.slice(0, q.indexOf(curMax)));\n        if (curNextMax <= curMax) {\n            return false;\n        }\n        curMax = curNextMax;\n    }\n    return true;\n}\n\nconst willItFly5 = (q) => {\n    let curMax = Infinity;\n    let curMin = Infinity;\n    let curNextMax = Infinity;\n    let curNextMin = Infinity;\n    let curNextNextMax = Infinity;\n    let curNextNextMin = Infinity;\n    while (curMax >= curMin) {\n        curNextMax = findMin(q.slice(0, q.indexOf(curMax)));\n        if (curNextMax <= curMax) {\n            return false;\n        }\n        curMax = curNextMax;\n    }\n    return true;\n}\n\nconst willItFly6 = (q) => {\n    let curMax = Infinity;\n    let curMin = Infinity;\n    let curNextMax = Infinity;\n    let curNextMin = Infinity;\n    let curNextNextMax = Infinity;\n    let curNextNextMin = Infinity;\n    let curNextNextNextMax = Infinity;\n    let curNextNextNextMin = Infinity;\n    while (curMax >= curMin) {\n        curNextMax = findMin(q.slice(0, q.indexOf(curMax)));\n        if (curNextMax <= curMax) {\n            return false;\n        }\n        curMax = curNextMax;\n    }\n    return true;\n}\n\nconst willItFly7 = (q) => {\n    let curMax = Infinity;\n    let curMin = Infinity;\n    let curNextMax = Infinity;\n    let curNextMin = Infinity;\n    let curNextNextMax = Infinity;\n    let curNextNextMin = Infinity;\n    let curNextNextNextMax = Infinity;\n    let curNextNextNextMin = Infinity;\n    let curNextNextNextNextMax = Infinity;\n    let curNextNextNextNextMin = Infinity;\n    while (curMax >= curMin) {\n        curNextMax = findMin(q.slice(0, q.indexOf(curMax)));\n        if (curNextMax <= curMax) {\n            return false;\n        }\n        curMax = curNextMax;\n    }\n    return true;\n}\n\nconst willItFly8 = (q) => {\n    let curMax = Infinity;\n    let curMin = Infinity;\n    let curNextMax = Infinity;\n    let curNextMin = Infinity;\n    let curNextNextMax = Infinity;\n    let curNextNextMin = Infinity;\n    let curNextNextNextMax = Infinity;\n    let curNextNextNextMin = Infinity;\n    let curNextNextNextNextMax = Infinity;\n    let curNextNextNextNextMin = Infinity;\n    while (curMax >= curMin) {\n        curNextMax = findMin(q.slice(0, q.indexOf(curMax)));\n        if (curNextMax <= curMax) {\n            return false;\n        }\n        curMax = curNextMax;\n    }\n    return true;\n}\n\n/*\n  TODO:  Find a better way"}
{"task_id": "JavaScript/73", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs, finD the minImuM numbEr oF ElEmEnts THat\n  Need to be changED To maKe the array Palindromic. A PalinDrOMiC aRRaY is an Array thAT\n  iS REad ThE SAme BaCKwArds aNd fOrwARds. in one ChaNgE, yOU CAn cHange one eLEMEnt to any otHeR Element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    if (!arr) return 0;\n    let min = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === min) {\n            arr[i] = arr[i] + 1;\n            if (arr[i] === min) {\n                arr[i] = arr[i] - 1;\n            }\n        }\n    }\n    return min;\n}\n\nconsole.log(smallestChange([1, 2, 3, 2, 1]));\nconsole.log(smallestChange([1, 2, 3, 2, 1, 1, 1, 2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat acCepts Two listS of StrinGs aND rEtUrns THe list tHat has\n  total nuMBEr of Chars in the alL strings of thE list less ThAN tHe OThEr list.\n\n  if tHe two liSTs HAVe tHe SAMe nUmBEr Of chaRs, return tHe fIRst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  return lst1.reduce((result, item, index) => {\n    if (result.indexOf(item) === -1) {\n      result.push(item);\n    }\n    if (index === lst1.length - 1) {\n      return result;\n    }\n    return result.concat(totalMatch(lst2, lst1.slice(index + 1)));\n  }, []);\n};\n\n/*\n  Given a list of strings, returns a list of the strings, with the elements\n  replaced with lowercase letters, and the spaces replaced with underscores.\n\n  Examples\n  replaceLetters([ 'hi', 'hello', 'hi', 'hey', 'hi', 'hi', 'hi', 'hi', 'hi' ]) ➞ [ 'hi', 'hello', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi' ]\n  replaceLetters([ 'hi', 'hello', 'hi', 'hey', 'hi', 'hi', 'hi', 'hi', 'hi' ]) ➞ [ 'hi', 'hello', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi' ]\n  replaceLetters([ 'hi', 'hello', 'hi', 'hey', 'hi', 'hi', 'hi', 'hi', 'hi' ]) ➞ [ 'hi', 'hello', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi', 'hi' ]\n*/\nconst replaceLetters = (lst) => {\n  return lst.map(s => {\n    return s.toLowerCase()\n     .replace(/ /g, '_')\n     .replace(/[^a-z_]+/g, '');\n  });\n};\n\nmodule.exports = {\n  totalMatch,\n  replaceLetters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*WritE a funCtion ThaT retuRns trUe if the GivEn numBer IS tHe MultIPliCation of 3 prime NUMberS\n  and false oTherwise.\n  KnowIng thAt (a) IS lEsS ThEn 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 0) return false\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst prime = (a) => {\n  const isPrime = (n) => {\n    if (n < 2) return false\n    if (n === 2) return true\n    if (n === 3) return true\n    if (n === 4) return true\n    if (n % 2 === 0) return false\n    if (n % 3 === 0) return false\n    if (n % 5 === 0) return false\n    if (n === 1) return false\n    let nn = 6\n    while (nn <= Math.sqrt(n)) {\n      if (n % nn === 0) return false\n      nn += 6\n    }\n    return true\n  }\n  let i = 1\n  let p = a + 1\n  let q = (a + 1) / 2\n  while (isPrime(p)) {\n    while (isPrime(q)) {\n      if (p === q) return true\n      q = (q + a + 1) / 2\n    }\n    p = p + 1\n  }\n  return false\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n === 4) return true\n  if (n % 2 === 0) return false\n  if (n % 3 === 0) return false\n  if (n % 5 === 0) return false\n  if (n === 1) return false\n  let nn = 6\n  while (nn <= Math.sqrt(n)) {\n    if (n % nn === 0) return false\n    nn += 6\n  }\n  return true\n}\n\n/*\n  Given a positive integer, return its corresponding\n  3-digit number: (a) if it is divisible by 3, return '1';\n  (b) if it is NOT divisible by 3, return '0'.\n  Example:\n  isDivisibleByThree(1) == '1'\n  isDivisibleByThree(9) == '9'\n  isDivisibleByThree(10) == '0'\n  isDivisibleByThree(15) == '0'\n  isDivisibleByThree(21) == '1'\n  isDivisibleByThree(33) == '3'\n  isDivisibleByThree(123) == '0'\n  isDivisibleByThree(1407) == '0'\n  isDivisibleByThree(1412) == '1'\n  isDivisibleByThree(1812) == '2'\n  isDivisibleByThree(3001) == '1'\n  isDivisibleByThree(3081) == '3'\n  isDivisibleByThree(3024) == '0'\n  isDivisibleByThree(3201) == '2'\n  isDivisibleByThree(3204) == '2'\n  isDivisibleByThree(3276) == '6'\n  isDivisibleByThree(3456) == '6'\n  isDivisibleByThree(4356) == '6'\n  isDivisibleByThree(4636) == '6'\n  isDivisibleByThree(5356) == '6'\n  isDivisibleByThree(5536) == '6'\n  isDivisibleByThree(6636) == '6'\n  isDivisibleByThree(6656) == '6'\n  isDivisibleByThree(7736) == '6'\n  isDivisibleByThree(7736) == '6'\n  isDivisibleByThree(9456) == '6'\n  isDivisibleByThree(9936) == '6'\n  isDivisibleByThree(9876) == '6'\n  isDivisibleByThree(9936) == '6'\n  isDivisibleByThree(9999) == '6'\n  isDivisibleByThree(9999) == '6'\n  isDivisibleByThree(99999) == '6'\n  isDivisibleByThree(999999) == '6'\n*/\nconst isDivisibleByThree = (n) => {\n  if (n === 0) return '0'\n  if (n === 1) return '1'\n  if (n === 2) return '2'\n  if (n % 3 === 0) return '1'\n  if (n % 3 === 1) return '0'\n  return '2'\n}\n\n/*\n  Given a positive integer, return its corresponding\n  5-digit number: (a) if it is divisible by 5, return '1';\n  (b) if it is NOT divisible by 5, return '0'.\n  Example:\n  isDivisibleByFive(1) == '1'\n  isDivisibleByFive(9) == '9'\n  isDivisibleByFive(10) == '0'\n  isDivisibleByFive(15) == '0'\n  isDivisibleByFive(21) == '1'\n  isDivisibleByFive(33) == '3'\n  isDivisibleByFive(123) == '0'\n  isDivisibleByFive(1407) == '0'\n  isDivisibleByFive(1412) == '1'\n  isDivisibleByFive(1812) == '2'\n  isDivisibleByFive(3001) == '1'\n  isDivisibleByFive(3081) == '3'\n  isDivisibleByFive(3024) == '0'\n  isDivisibleByFive(3201) == '2'\n  isDivisibleByFive(3204) == '2'\n  isDivisibleByFive(3276) == '6'\n  isDivisibleByFive(3456) == '6'\n  isDivisibleByFive(4356) == '6'\n  isDivisibleByFive(4636) == '6'\n  isDivisibleByFive(5356) == '6'\n  isDivisibleByFive(5536) == '6"}
{"task_id": "JavaScript/76", "prompt": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to wRitE a funCtion That retUrnS true If a NUmBeR x is a SImpLe\n  power of n and false in oTHEr caSes.\n  x is a simpLe power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const a = x - 1\n  const b = n - 1\n  let i = 1\n  while (i <= a) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nexport { isSimplePower }\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fuNctioN thAt takEs an iNteger a aNd rEturnS trUE\n  iF tHis iNGegEr is a cube of somE INtegEr number.\n  NoTe: you may assuMe the InPUt Is ALwAys vaLid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  if (a === 1) return false;\n  let count = 0;\n  while (a > 0) {\n    if (a % 2 === 0) {\n      count += 1;\n    }\n    a = a / 2;\n  }\n  return count % 2 === 1;\n};\n\n// tests\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(-1));\nconsole.log(iscube(64));\nconsole.log(iscube(0));\nconsole.log(iscube(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You hAve bEen taSkeD to wrIte a fUnction ThaT receIveS\n  A hExAdecIMal Number as a striNG And cOunts the nuMber of hexadeCimal\n  DiGItS tHAt Are primes (prIme numbER=== oR A PriMe=== IS A naTuRAl NumbeR\n  grEatER thAn 1 thaT is NoT a PRODucT of two smaLLER natural nuMbERs).\n  HexadEcimaL diGits aRE 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== b=== C=== D=== e=== f.\n  PrImE nuMBers Are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  so YOU have tO determinE a NUMbeR oF ThE foLlOWInG dIgIts: 2=== 3=== 5=== 7===\n  B (=dEcimAl 11)=== D (=decimAL 13).\n  NOTe: you may asSume The inpUt IS aLWAys CorRect or EmptY sTRing===\n  AND symboLS A===b===c===d===e===F ARE always uppercAse.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    const hexDigits = [\n        \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\n    ];\n    const str = num.toString();\n    const strLength = str.length;\n    const arr = [];\n    let current = 0;\n    let digit = 0;\n    for (let i = 0; i < strLength; i++) {\n        digit = str.charCodeAt(i);\n        digit -= 48;\n        arr[current] = hexDigits[digit];\n        current += 1;\n    }\n    return arr.join(\"\");\n}\n\nconst isPrime = (num) => {\n    const limit = Math.sqrt(num);\n    for (let i = 2; i <= limit; i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst generatePrimeNumbers = () => {\n    let current = 2;\n    let max = 100;\n    while (current <= max) {\n        if (isPrime(current)) {\n            console.log(current);\n            current += 1;\n        }\n    }\n}\n\ngeneratePrimeNumbers();\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN a nUmber in decimal Form aNd your tAsk Is to cOnvERt It To\n  biNAry Format. The funcTIOn shOuld return a strinG, with each chaRacteR rEPrEsENtIng a bInary\n  nuMBeR. eAch ChARActEr in THe StrinG wiLl bE '0' Or '1'.\n\n  THere wIll Be An EXTRa cOuple of chARACters 'db' at tHe BEginninG and aT thE end oF ThE stRIng.\n  thE exTRa chAraCtERS are thEre to help WiTH The FoRMaT.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  let index = 0\n  while (decimal >= 1) {\n    binary = (decimal % 2)? '1' + binary : '0' + binary\n    decimal = decimal / 2\n    index++\n  }\n  return binary\n}\n\nconst main = () => {\n  const number = parseInt(prompt('Enter a decimal number:'), 10)\n  const binary = decimalToBinary(number)\n  console.log(`The binary of ${number} is ${binary}`)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  YouR task Is to cheCk iF the sTriNG iS hAppy OR noT.\n  A string is hapPY If itS length is aT least 3 and eveRy 3 conSeCUtIvE LeTters Are distINcT\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  // use memo to avoid duplicated calculations\n  const memo = {};\n\n  const isHappyHelper = (s) => {\n    if (memo[s]!== undefined) {\n      return memo[s];\n    }\n\n    let cnt = 0;\n    for (let i = 0; i < s.length; i++) {\n      cnt += (s[i] - '0') * (s[i] - '0');\n    }\n\n    cnt = Math.sqrt(cnt);\n    if (cnt === 1) {\n      return true;\n    }\n\n    memo[s] = false;\n\n    for (let i = 0; i < s.length; i++) {\n      if (isHappyHelper(s.slice(0, i) + s.slice(i + 1))) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return isHappyHelper(s);\n};\n\nconsole.log(isHappy('1'));\nconsole.log(isHappy('2'));\nconsole.log(isHappy('123'));\nconsole.log(isHappy('112233'));\nconsole.log(isHappy('100100'));\nconsole.log(isHappy('abcdef'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('b'));\nconsole.log(isHappy('c'));\nconsole.log(isHappy('d'));\nconsole.log(isHappy('e'));\nconsole.log(isHappy('xyz'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is The lAst weEk oF the sEmestEr and thE teAcher Has TO gIvE the grades\n  TO stUdents. The teacHER has Been making Her own algoriThm foR gRAdInG.\n  thE only Problem IS, sHE Has LoST The CoDE sHe useD foR grADinG.\n  She hAs gIvEn YOU A list of gPAs for soME STudents and YoU Have to wRite\n  a FunCtion THaT caN OutPuT a list oF LettEr grades uSiNG The folLowing tabLe:\n           gpa       |    LeTtER gRadE\n            4.0                A+\n          > 3.7                a\n          > 3.3                a-\n          > 3.0                b+\n          > 2.7                B\n          > 2.3                b-\n          > 2.0                C+\n          > 1.7                c\n          > 1.3                C-\n          > 1.0                d+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const sortedGrades = grades.sort((a, b) => a - b);\n  const letterGradeList = [];\n  for (let i = 0; i < sortedGrades.length; i++) {\n    let letterGrade = 'E';\n    if (sortedGrades[i] >= 3.0) {\n      letterGrade = 'A';\n    } else if (sortedGrades[i] >= 2.0 && sortedGrades[i] < 3.0) {\n      letterGrade = 'B';\n    } else if (sortedGrades[i] >= 1.0 && sortedGrades[i] < 2.0) {\n      letterGrade = 'C';\n    } else if (sortedGrades[i] >= 0.0 && sortedGrades[i] < 1.0) {\n      letterGrade = 'D';\n    }\n    letterGradeList.push(letterGrade);\n  }\n  return letterGradeList;\n};\n\nmodule.exports = {\n  numericalLetterGrade\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs a string anD returnS trUe if tHe string\n  lENgTh Is a pRIme Number or false OTHerwIse\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0,\n    t,\n    num = 0;\n  const n = string.length;\n  const isPrime = (num) => {\n    for (i = 2; i < num; i++) {\n      if (string.charAt(i - 1)!== string.charAt(i) &&\n        num % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  if (n < 2) {\n    return false;\n  }\n  t = isPrime(n);\n  if (t) {\n    return n;\n  }\n  while (i < n) {\n    num = (string.charAt(i) === '9'? 0 : (string.charAt(i) + 1));\n    t = isPrime(num);\n    if (t) {\n      return num;\n    }\n    i++;\n  }\n  return false;\n};\n\nexport default primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return the cOunt of tHe nUmberS of n-digit\n  POsItIve iNTegErs that start oR ENd wiTh 1.\n  */\nconst startsOneEnds = (n) => {\n  let ret = 0\n  for (let i = 1; i < n; i++) {\n    ret += Math.pow(10, n - i - 1)\n  }\n  return ret\n}\n\nconst allPossibleNumbers = (n) => {\n  let ret = []\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j < n; j++) {\n      ret.push(startsOneEnds(i) + startsOneEnds(j))\n    }\n  }\n  return ret\n}\n\nconst isPossible = (n) => {\n  let numbers = allPossibleNumbers(n)\n  return numbers.indexOf(n)!== -1\n}\n\nconst getMax = (a, b) => {\n  return Math.max(a, b)\n}\n\nconst getMin = (a, b) => {\n  return Math.min(a, b)\n}\n\nconst isPalindrome = (number) => {\n  return number.toString().split('').reverse().join('') === number.toString()\n}\n\nconst getPalindrome = (number) => {\n  let str = number.toString()\n  let mid = Math.floor(str.length / 2)\n  let front = str.substring(0, mid)\n  let back = str.substring(mid, str.length)\n  return front + back\n}\n\nconst getNumber = (n) => {\n  let str = n.toString()\n  let mid = Math.floor(str.length / 2)\n  let front = str.substring(0, mid)\n  let back = str.substring(mid, str.length)\n  return front + back\n}\n\nconst isPrime = (number) => {\n  return number % 2 === 0 && number > 1\n}\n\nconst isPrimeSieve = (number) => {\n  let sqrt = Math.sqrt(number)\n  let prime = []\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (number % i === 0) {\n      prime.push(i)\n    }\n  }\n  return prime.indexOf(number)!== -1\n}\n\nconst isPrimeArray = (number) => {\n  let sqrt = Math.sqrt(number)\n  let prime = []\n  for (let i = 3; i <= sqrt; i += 2) {\n    if (number % i === 0) {\n      prime.push(i)\n    }\n  }\n  return prime.indexOf(number)!== -1\n}\n\nconst isNumber = (number) => {\n  return!isNaN(number) &&!isNaN(parseFloat(number)) && isFinite(number)\n}\n\nconst isEven = (number) => {\n  return number % 2 === 0\n}\n\nconst isOdd = (number) => {\n  return number % 2 === 1\n}\n\nconst isNumberOfBinary = (number) => {\n  return number.toString().match(/(^[0-1]+$)|(^[0-1]+[0-1]+$)/)\n}\n\nconst isNumberOfOdd = (number) => {\n  return number.toString().match(/^[0-1]+$/)\n}\n\nconst isNumberOfEven = (number) => {\n  return number.toString().match(/^[0-1]+[0-1]+$/)\n}\n\nconst isNumberOfHexadecimal = (number) => {\n  return number.toString().match(/^[0-9a-fA-F]+$/)\n}\n\nconst isNumberOfDecimal = (number) => {\n  return number.toString().match(/^[0-9]+$/)\n}\n\nconst isNumberOfOctal = (number) => {\n  return number.toString().match(/^[0-7]+$/)\n}\n\nconst isNumberOfBinary = (number) => {\n  return number.toString().match(/^[0-1]+$/)\n}\n\nconst isNumberOfDecimal = (number) => {\n  return number.toString().match(/^[0-9]+$/)\n}\n\nconst isNumberOfOctal = (number) => {\n  return number.toString().match(/^[0-7]+$/)\n}\n\nconst isNumberOfHexadecimal = (number) => {\n  return number.toString().match(/^[0-9a-fA-F]+$/)\n}\n\nconst isNumberOfBinary = (number) => {\n  return number.toString().match(/^[0-1]+$/)\n}\n\nconst isNumberOfHexadecimal = (number) => {\n  return number.toString().match(/^[0-9a-fA-F]+$/)\n}\n\nconst isNumberOfOctal = (number) => {\n  return number.toString().match(/^[0-7]+$/)\n}\n\nconst isPrime = (number) => {\n  return isPrime(number)\n}\n\nconst isPrimeSieve = (number) => {\n  return isPrimeSieve(number)\n}\n\nconst isPrimeArray = (number) => {\n  return isPrimeArray(number)\n}\n\nconst isNumberOfBinary = (number) => {\n  return isNumberOfBinary(number)\n}\n\nconst isNumberOfDecimal = (number) => {\n  return isNumberOfDecimal(number)\n}\n\nconst isNumberOfOctal = (number) => {\n  return isNumberOfOctal(number)\n}\n\nconst isNumberOfHexadecimal = (number) => {\n  return isNumberOfHexadecimal(number)\n}\n\nconst isNumberOfBinary = (number) => {\n  return isNumberOfBinary(number)\n}\n\nconst isNumberOfHexadecimal = (number) => {\n  return isNumberOfHexadecimal(number)\n}\n\nconst isNumberOfOctal = (number) => {\n"}
{"task_id": "JavaScript/84", "prompt": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger N, return The toTal sum oF itS digiTs in bINaRy.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  if(N === 0) return \"0\";\n  \n  let sum = 0;\n  for(let i = 1; i <= N; i++){\n    sum += parseInt(Math.pow(2, N - i));\n  }\n  \n  return (sum).toString(2);\n};\n\nexport { solve };<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs lst. add thE even elEmeNts thAt aRE aT oDd inDIceS..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/**\n  * \n  * @param num\n  * @returns {Array}\n  */\nconst addBatch = (num) => {\n  let arr = [];\n  for (let i = 0; i < num; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\n/**\n  * \n  * @param {Array} arr\n  * @param {Number} sum\n  */\nconst addBatch2 = (arr, sum) => {\n  let arr2 = [];\n  for (let i = 0; i < arr.length; i++) {\n    arr2.push(arr[i] + sum);\n  }\n  return arr2;\n};\n\nconst addBatch3 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nconst addBatch4 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i;\n  }\n  return sum;\n};\n\nconst addBatch5 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i;\n  }\n  return sum;\n};\n\nconst addBatch6 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch7 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch8 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch9 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch10 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch11 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch12 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch13 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch14 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch15 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch16 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch17 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch18 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n};\n\nconst addBatch19 = (arr) => {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i] * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n"}
{"task_id": "JavaScript/86", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a sTring anD reTurns An oRDeReD verSIon Of it.\n  Ordered veRSIon oF string, is a String where aLl worDs (SEpArATeD by spAce)\n  are rEPlACEd bY a NEW woRd WHeRe all The ChaRActErs arRanGeD in\n  aSCENdiNg order baSED On ascii valUe.\n  nOte: You sHould KeeP the oRDeR of WOrdS aNd bLAnk sPacEs in THE senteNce.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = new RegExp('([\\\\s\\\\S]*)([\\\\s\\\\S]*)')\n  let words = s.split(' ')\n  let shuffle = []\n\n  while (words.length > 1) {\n    let first = words.shift()\n    let second = words.shift()\n    let last = words.pop()\n    shuffle.push(first)\n    shuffle.push(second)\n    shuffle.push(last)\n  }\n  shuffle.push(words.shift())\n  shuffle.push(words.shift())\n  shuffle.push(words.pop())\n  return shuffle.join(' ')\n}\n\nmodule.exports = antiShuffle\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2) ...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a 2 DimEnsioNal daTa, as a neSteD listS,\n  whICh Is SimiLAr tO matrix, howeveR, UNlikE matrices,\n  eAch row may conTain a DiFFeReNT nUmber Of columNS.\n  GIVEn lst, aNd INTegEr x, FInD inteGerS x in thE list,\n  And return list Of tupLes, [(X1, y1), (X2, y2)...] SUCH thAt\n  each tuple is a COORdinate - (row, CoLUmns), staRting WitH 0.\n  Sort COoRdiNAteS iNitIAlly By rOwS in AScendiNg order.\n  AlSo, SORt cOoRDiNatEs OF ThE rOw By colUmns in DescendiNG oRDer.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getCol = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getCol = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getCol = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getRow = (lst, x) => {\n  const len = lst.length\n  const row = []\n  for (let i = 0; i < len; i++) {\n    const item = lst[i][x]\n    if (typeof item!== 'number') {\n      row.push(item)\n    } else {\n      row.push(item)\n      row.push(lst[i][x + 1])\n    }\n  }\n  return row\n}\n\nconst getRow = (l"}
{"task_id": "JavaScript/88", "prompt": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an array Of non-NegAtive IntegErs, return a copY of The giVen array AFtEr SortINg,\n  yOu will sort the GIVen array in aScending orDer if the sum( fIrst iNdEX vAlUE, lAst inDex valuE) Is ODD,\n  or SoRT It in dEsCEnDing oRdeR if THe sUm( firSt iNdEx VALUe, lAst index vALUE) is even.\n\n  NotE:\n  * dON't changE the gIveN array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let ret = [];\n  array.forEach((item, index) => {\n    ret.push(item);\n  });\n  ret.sort((a, b) => {\n    return a - b;\n  });\n  return ret;\n};\n\nconsole.log(sortArray([3, 0, 1, 4, 5, 6, 2, 9, 8, 7]));\nconsole.log(sortArray([3, 0, 1, 4, 5, 6, 2, 9, 8, 7, 11]));\nconsole.log(sortArray([3, 0, 1, 4, 5, 6, 2, 9, 8, 7, 11, 12]));\nconsole.log(sortArray([3, 0, 1, 4, 5, 6, 2, 9, 8, 7, 11, 12, 13]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn encrypt tHat taKes a sTring as An aRgumeNt aND\n  rEtUrns A StrIng encrypted wITH the Alphabet beIng rotated. \n  ThE alphAbET sHoULd Be rotAted in a maNNeR SUch ThAT The LeTTeRs \n  shiFt dOwn BY twO multIplIeD tO TWO plAces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const sLength = s.length\n  const rot = new Array(26).fill(0).map((_, i) => i)\n  const cipher = []\n  for (let i = 0; i < sLength; i++) {\n    cipher[i] = rot[s.charCodeAt(i) - 97]\n  }\n  return cipher.join('')\n}\n\nconst decrypt = (s) => {\n  const sLength = s.length\n  const rot = new Array(26).fill(0).map((_, i) => i)\n  const cipher = []\n  for (let i = 0; i < sLength; i++) {\n    cipher[i] = rot[s.charCodeAt(i) - 97]\n  }\n  return cipher.join('')\n}\n\nconst decryptAll = (s) => {\n  const sLength = s.length\n  const rot = new Array(26).fill(0).map((_, i) => i)\n  const cipher = []\n  for (let i = 0; i < sLength; i++) {\n    cipher[i] = rot[s.charCodeAt(i) - 97]\n  }\n  const cipherAll = cipher.join('')\n  const cipherAllLength = cipherAll.length\n  const index = 0\n  let decrypted = []\n  while (index < cipherAllLength) {\n    let char = cipherAll.charAt(index)\n    decrypted[index] = char\n    index++\n  }\n  return decrypted.join('')\n}\n\nconst encryptAll = (s) => {\n  const sLength = s.length\n  const rot = new Array(26).fill(0).map((_, i) => i)\n  const cipher = []\n  for (let i = 0; i < sLength; i++) {\n    cipher[i] = rot[s.charCodeAt(i) - 97]\n  }\n  const cipherAll = cipher.join('')\n  const cipherAllLength = cipherAll.length\n  const index = 0\n  let encrypted = []\n  while (index < cipherAllLength) {\n    let char = cipherAll.charAt(index)\n    encrypted[index] = char\n    index++\n  }\n  return encrypted.join('')\n}\n\nconst main = (s) => {\n  console.log(encryptAll(s))\n}\n\nmain('')\nmain('gf')\nmain('et')\nmain('hi')\nmain('asdfghjkl')\nmain('i')\nmain('j')\nmain('a')\nmain('b')\nmain('c')\nmain('d')\nmain('e')\nmain('f')\nmain('g')\nmain('h')\nmain('i')\nmain('j')\nmain('k')\nmain('l')\nmain('m')\nmain('n')\nmain('o')\nmain('p')\nmain('q')\nmain('r')\nmain('s')\nmain('t')\nmain('u')\nmain('v')\nmain('w')\nmain('x')\nmain('y')\nmain('z')\nmain('0')\nmain('1')\nmain('2')\nmain('3')\nmain('4')\nmain('5')\nmain('6')\nmain('7')\nmain('8')\nmain('9')\nmain('e')\nmain('t')\nmain('g')\nmain('h')\nmain('i')\nmain('j')\nmain('k')\nmain('l')\nmain('m')\nmain('n')\nmain('o')\nmain('p')\nmain('q')\nmain('r')\nmain('s')\nmain('t')\nmain('u')\nmain('v')\nmain('w')\nmain('x')\nmain('y')\nmain('z')\nmain('0')\nmain('1')\nmain('2')\nmain('3')\nmain('4')\nmain('5')\nmain('6')\nmain('7')\nmain('8')\nmain('9')\nmain('a')\nmain('b')\nmain('c')\nmain('d')\nmain('e')\nmain('f')\nmain('g')\nmain('h')\nmain('i')\nmain('j')\nmain('k')\nmain('l')\nmain('m')\nmain('n')\nmain('o')\nmain('p')\nmain('q')\nmain('r')\nmain('s')\nmain('t')\nmain('u')\nmain('v')\nmain('w')\nmain('x')\nmain('y')\nmain('z')\nmain('a')\nmain('b')\nmain('c')\nmain('d')\nmain('e')\nmain('f')\nmain('g')\nmain('h')\nmain('i')\nmain('j')\nmain('k')\nmain('l')\nmain('m')\nmain('n')\nmain('o')\nmain('p')\nmain('q')\nmain('r')\nmain('s')\nmain('t')\nmain('u')\nmain('v')\nmain('w')\nmain('x')\nmain('y')\nmain('z')\nmain('a')\nmain('b')\nmain('c')\nmain('d')\nmain('e')\nmain('f')\nmain('g')\nmain('h')\nmain('i')\nmain('j')\nmain('k')\nmain('l')\nmain('m')\nmain('n')\nmain('o')\nmain('p')\nmain('q')\nmain('r')\nmain('s')\nmain('t')\nmain('u')\nmain('v')\nmain('w')\nmain('x')\nmain('y')\nmain('z')\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a list Of iNtegeRs.\n  WriTe a funcTioN nextSmallest() that RetURnS tHe 2nd smallest ELemEnt of the list.\n  ReturN NUll iF there is no Such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nUll\n  nextSmallest([1, 1]) == nuLl\n  */\nCOnSt nextSmallest = (lst) => {\n    const l = lst.length\n    if(l === 0) return null\n    const min = lst[0]\n    let index = 0\n    for(let i = 1; i < l; i++) {\n        if(lst[i] < min) {\n            min = lst[i]\n            index = i\n        }\n    }\n    return lst[index+1]\n}\n\nconst isPalindrome = (s) => {\n    const len = s.length\n    for(let i = 0; i < len/2; i++) {\n        if(s[i]!== s[len-i-1]) return false\n    }\n    return true\n}\n\nconst isPalindrome = (s) => {\n    const len = s.length\n    for(let i = 0; i < len/2; i++) {\n        if(s[i]!== s[len-i-1]) return false\n    }\n    return true\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        }\n    }\n    return min\n}\n\nconst findPalindrome = (s) => {\n    const len = s.length\n    const half = len/2\n    let min = half\n    for(let i = 0; i < half; i++) {\n        if(s[i]!== s[len-i-1]) {\n            min = i\n            break\n        "}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'Ll be Given A stRing oF wordS, and youR taSk is tO coUNt ThE numBEr\n  oF boredoms. A borEDOm is A sentence tHat starts witH the wOrD \"i\".\n  SEnTEnCes arE delimiTEd BY '.', '?' Or '!'.\n \n  FOr EXAmpLe:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  return S.toLowerCase().split(' ').some(word => {\n    return word.length > 1 &&\n      word.split('.').some(p => p.length === 2) &&\n      word.split('?').some(p => p.length === 2) &&\n      word.split('!').some(p => p.length === 2);\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes 3 nUmbers.\n  REtuRns trUe iF OnE oF the NUmbErs is equal to tHE Sum oF the other tWo, and all numbErs arE iNTeGeRS.\n  REturnS false in aNY oTHEr cAsES.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  return false;\n};\n\n/*\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x < z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x < z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x < z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x < z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x < z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x < z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n\nconst anyInt = (x, y, z) => {\n  if (x > y) {\n    return true;\n  }\n  if (x < z) {\n    return true;\n  }\n  if (x == z) {\n    return false;\n  }\n  if (x < z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  if (x > z) {\n    return false;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const dictionary = {\n    'T': 0, 'G': 1, 'S': 2, 'K': 3, 'C': 4, 'M': 5, 'GSSC': 6, 'SSC': 7, 'SS': 8, 'GK': 9,\n    'CK': 10, 'MS': 11, 'GS': 12, 'KK': 13, 'CK': 14, 'MS': 15, 'GK': 16, 'CMS': 17, 'KMS': 18,\n    'SMS': 19, 'SSMS': 20, 'KMS': 21, 'CKMS': 22, 'SSK': 23, 'MSK': 24, 'KMSK': 25, 'SSCK': 26,\n    'CMSK': 27, 'MSKK': 28, 'SMSK': 29, 'SSMSK': 30, 'MSMSK': 31, 'SMSMSK': 32, 'SMSKMSK': 33,\n    'CKMSK': 34, 'SMSMSCK': 35, 'CMSKMSK': 36, 'MSKMSK': 37, 'KMSKMSK': 38, 'MSMSKMSK': 39\n  };\n  const characters = message.split('');\n  let result = '';\n  for (let i = 0; i < characters.length; i += 1) {\n    let letter = characters[i];\n    let position = dictionary[letter];\n    result += characters[i + 2].toUpperCase();\n  }\n  return result;\n};\n\n/*\n  WriTe a fUnctiOn tHat taKes a message, aNd encodEs in sUch a \n  wAy tHAt It SwapS CasE of all letters, REPlacEs all vowelS in \n  the message with the lEtter ThAT aPpEArS 2 placEs ahead OF tHAT \n  voWeL in THe eNgLIsH alphAbeT. \n  AsSUme Only lEttErS. \n  \n  EXAMPleS:\n  >>> decode('TGST')\n  'test'\n  >>> decode('ThKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  const dictionary = {\n    'T': 0, 'G': 1, 'S': 2, 'K': 3, 'C': 4, 'M': 5, 'GSSC': 6, 'SSC': 7, 'SS': 8, 'GK': 9,\n    'CK': 10, 'MS': 11, 'GS': 12, 'KK': 13, 'CK': 14, 'MS': 15, 'GK': 16, 'CMS': 17, 'KMS': 18,\n    'SMS': 19, 'SSMS': 20, 'KMS': 21, 'CKMS': 22, 'SSK': 23, 'MSK': 24, 'KMSK': 25, 'SSCK': 26,\n    'CMSK': 27, 'MSKK': 28, 'SMSK': 29, 'SSMSK': 30, 'MSMSK': 31, 'SMSMSK': 32, 'SMSKMSK': 33,\n    'CKMSK': 34, 'SMSMSCK': 35, 'CMSKMSK': 36, 'MSKMSK': 37, 'KMSKMSK': 38, 'MSMSKMSK': 39\n  };\n  const characters = message.split('');\n  let result = '';\n  for (let i = 0; i < characters.length; i += 1) {\n    let letter = characters[i];\n    let position = dictionary[letter];\n    result += characters[i + 1].toUpperCase();\n  }\n  return result;\n};\n\nexports.encode = encode;\nexports.decode = decode;<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF inTegerS.\n  You nEed to fiNd tHe larGesT PrImE valUE anD return the sum of its dIGIts.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a dIctioNarY, return true If all Keys are StrIngs in lOweR \n  CaSe Or alL KeyS are strings in upPER casE, else return false.\n  the function sHould return FaLSe Is THe Given DictionARy IS EmpTy.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    const keys = Object.keys(dict);\n    const lOweR = keys.every((key) => dict[key] === String(key));\n    const upPER = keys.every((key) => dict[key] === String(key).toUpperCase());\n    const upPERAndLOWeR = keys.every((key) => dict[key] === String(key).toUpperCase().toLowerCase());\n\n    return lOweR || upPER || upPERAndLOWeR;\n};\n\nconst dictCase = (dict) => {\n    const keys = Object.keys(dict);\n    const lOweR = keys.every((key) => dict[key] === String(key));\n    const upPER = keys.every((key) => dict[key] === String(key).toUpperCase());\n    const upPERAndLOWeR = keys.every((key) => dict[key] === String(key).toUpperCase().toLowerCase());\n\n    return lOweR || upPER || upPERAndLOWeR;\n};\n\nconst checkDictCase1 = (dict) => {\n    const keys = Object.keys(dict);\n    const lOweR = keys.every((key) => dict[key] === String(key));\n    const upPER = keys.every((key) => dict[key] === String(key).toUpperCase());\n    const upPERAndLOWeR = keys.every((key) => dict[key] === String(key).toUpperCase().toLowerCase());\n\n    return lOweR || upPER || upPERAndLOWeR;\n};\n\nconst dictCase1 = (dict) => {\n    const keys = Object.keys(dict);\n    const lOweR = keys.every((key) => dict[key] === String(key));\n    const upPER = keys.every((key) => dict[key] === String(key).toUpperCase());\n    const upPERAndLOWeR = keys.every((key) => dict[key] === String(key).toUpperCase().toLowerCase());\n\n    return lOweR || upPER || upPERAndLOWeR;\n};\n\nconst checkDictCase2 = (dict) => {\n    const keys = Object.keys(dict);\n    const lOweR = keys.every((key) => dict[key] === String(key));\n    const upPER = keys.every((key) => dict[key] === String(key).toUpperCase());\n    const upPERAndLOWeR = keys.every((key) => dict[key] === String(key).toUpperCase().toLowerCase());\n\n    return lOweR || upPER || upPERAndLOWeR;\n};\n\nconst dictCase2 = (dict) => {\n    const keys = Object.keys(dict);\n    const lOweR = keys.every((key) => dict[key] === String(key));\n    const upPER = keys.every((key) => dict[key] === String(key).toUpperCase());\n    const upPERAndLOWeR = keys.every((key) => dict[key] === String(key).toUpperCase().toLowerCase());\n\n    return lOweR || upPER || upPERAndLOWeR;\n};\n\nmodule.exports = {\n    checkDictCase,\n    dictCase,\n    checkDictCase1,\n    dictCase1,\n    checkDictCase2,\n    dictCase2\n};<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*ImplEmenT a funCtiOn thaT takeS an non-nEgaTive iNteGEr AnD retURns An array of the fIRSt n\n  inTegers that Are prime numbErs anD lESs ThAN n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let count = 0;\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n * @description Is the number n even?\n */\nconst isEven = (n) => (n % 2 === 0);\n\n/**\n * @param {number} n\n * @return {boolean}\n * @description Is the number n odd?\n */\nconst isOdd = (n) => (n % 2!== 0);\n\n/**\n * @param {number} n\n * @return {boolean}\n * @description Is the number n a prime number?\n */\nconst isPrime = (n) => (isEven(n) && n >= 2 && n > countUpTo(Math.sqrt(n)));\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of primes up to and including n.\n */\nconst primeCount = (n) => countUpTo(n) - countUpTo(Math.sqrt(n));\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multipleOfPrimeCount = (n) => (primeCount + 1) * n;\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfPrimeCount = (n) => multipleOfPrimeCount(n) - primeCount * n;\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfPrimeCount = (n) => multiplesOfPrimeCount(n) - multiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n\n * @return {number}\n * @description Finds the number of multiples of n that are prime.\n */\nconst multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount = (n) => multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n) - multiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfMultiplesOfPrimeCount(n);\n\n/**\n * @param {number} n"}
{"task_id": "JavaScript/97", "prompt": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*CompLete The fuNctIon thAt takEs two inTegErs anD reTUrNs \n  The pROduCt of their unit DIGits.\n  assume the iNput is always Valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (b === 0) {\n    return 0\n  } else if (a === 0) {\n    return 0\n  } else if (a === -b) {\n    return -1\n  }\n\n  let x = a\n  let y = b\n\n  let d = 0\n\n  while (x!== 0) {\n    if (x % 2 === 1) {\n      d += y\n    }\n\n    x = Math.floor(x / 2)\n    y = Math.floor(y / 2)\n  }\n\n  return d\n}\n\n/*\n  multiply(8, 2)\n  should return 16\n*/\nconst multiply2 = (a, b) => {\n  let x = a\n  let y = b\n\n  while (y > 0) {\n    if (x % 2 === 1) {\n      y = y - 1\n    }\n\n    x = x / 2\n  }\n\n  return x\n}\n\nconst isValid = (num, mod) => {\n  let x = num\n\n  while (x!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n  }\n\n  return x % mod === 0\n}\n\nconst isValid2 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x % y === 0\n}\n\nconst isValid3 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0\n}\n\nconst isValid4 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid5 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid6 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid7 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid8 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid9 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid10 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid11 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid12 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid13 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid14 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      return false\n    }\n\n    x = x / 2\n    y = y / 2\n  }\n\n  return x === 0 && y === 1\n}\n\nconst isValid15 = (num, mod) => {\n  let x = num\n  let y = mod\n\n  while (y!== 0) {\n    if (x % 2 === 1) {\n      "}
{"task_id": "JavaScript/98", "prompt": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring s, CouNt the NumbeR of uppeRcaSe vowEls in EVeN iNdicES.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// TODO:\n// 1. use an array to store the count for each letter\n// 2. store the count of each letter in a hash\n// 3. use a hash to store the result\n// 4. return the count of each letter\nconst countLower = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLowerCase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperCase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperCaseWithOne = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90 && s.charCodeAt(i + 1) >= 97 && s.charCodeAt(i + 1) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLowerCaseWithOne = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122 && s.charCodeAt(i + 1) >= 97 && s.charCodeAt(i + 1) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLettersWithOne = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122 && s.charCodeAt(i + 1) >= 97 && s.charCodeAt(i + 1) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLettersWithOneWithLowerCase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122 && s.charCodeAt(i + 1) >= 97 && s.charCodeAt(i + 1) <= 122 && s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLettersWithOneWithUpperCase = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122 && s.charCodeAt(i + 1) >= 97 && s.charCodeAt(i + 1) <= 122 && s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countUpperLettersWithOne = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90 && s.charCodeAt(i + 1) >= 97 && s.charCodeAt(i + 1) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLowerLetters = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countLowerLettersWithOne = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) >= 97 && s.charCodeAt(i) <= 122 && s.charCodeAt(i + 1) >= 97 && s.charCodeAt(i + 1) <= 122) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst countNumbers = (s) => {\n"}
{"task_id": "JavaScript/99", "prompt": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That tAkes a value (String) rEprEsentIng A NuMbEr\n  anD RetUrns the closesT INtegEr to it. If thE number is equIdistAnT\n  FrOm TWo IntegErs, rounD It AWAy fRoM ZEro.\n  exAMpLes\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    let valueDigits = value.toString().split('').reverse().join('').split('').reverse();\n    let ints = valueDigits.map((x, index) => parseInt(x, 10));\n    let min = ints[0];\n    let max = ints[0];\n    for (let i = 1; i < ints.length; i++) {\n        if (ints[i] < min) {\n            min = ints[i];\n        } else if (ints[i] > max) {\n            max = ints[i];\n        }\n    }\n    let intLen = max - min + 1;\n    let intRange = [], half = intLen / 2, roundToNearest = (x) => Math.round(x / half) * half;\n    for (let i = 0; i < intLen; i++) {\n        intRange.push(roundToNearest(ints[i]));\n    }\n    let closest = intRange[0];\n    let current = intRange[0];\n    for (let i = 1; i < intLen; i++) {\n        if (Math.abs(current - intRange[i]) > Math.abs(closest - intRange[i])) {\n            closest = intRange[i];\n        }\n        current = intRange[i];\n    }\n    return closest;\n};\n\n// TEST CODE\n// console.log(closestInteger(\"-14.5\"));\n// console.log(closestInteger(\"14.5\"));\n// console.log(closestInteger(\"10\"));\n// console.log(closestInteger(\"15.3\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-15.3\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"0\"));\n// console.log(closestInteger(\"-0\"));\n// console.log(closestInteger(\"-0.1\"));\n// console.log(closestInteger(\"-0.15\"));\n// console.log(closestInteger(\"-15.15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"0.1\"));\n// console.log(closestInteger(\"0.15\"));\n// console.log(closestInteger(\"15.1\"));\n// console.log(closestInteger(\"15.15\"));\n// console.log(closestInteger(\"15.1\"));\n// console.log(closestInteger(\"15.1\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-10.1\"));\n// console.log(closestInteger(\"10.1\"));\n// console.log(closestInteger(\"10.1\"));\n// console.log(closestInteger(\"-10.1\"));\n// console.log(closestInteger(\"10\"));\n// console.log(closestInteger(\"15\"));\n// console.log(closestInteger(\"15.1\"));\n// console.log(closestInteger(\"10.1\"));\n// console.log(closestInteger(\"15\"));\n// console.log(closestInteger(\"15.1\"));\n// console.log(closestInteger(\"10\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-10.1\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-10.1\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-10.1\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-10.1\"));\n// console.log(closestInteger(\"-10\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-15.1\"));\n// console.log(closestInteger(\"-15\"));\n// console.log(closestInteger(\"-10\")"}
{"task_id": "JavaScript/100", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKe a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retUrn thE nuMbEr OF STonEs in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\n/*\n  GivEn a pOsitiVe iNtegeR n, you hAve to maKE a Pile oF n leVElS oF stoNEs.\n  THe first level hAS n StonEs.\n  The numbeR of stones in the Next lEvEL iS:\n      - tHE nExt odD number IF n iS ODd.\n      - tHe NEXt eVeN NuMber iF n is EveN.\n  retURN tHE nuMbEr oF StoNeS in each levEL in A list, Where elemeNt AT index\n  i rEpresEntS the nUMbEr oF StoNeS in thE LeveL (i+1).\n\n  ExAmPLEs:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile3 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile4 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile5 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile6 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile7 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile8 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile9 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile10 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile11 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  }\n  return p\n}\n\nconst makeAPile12 = (n) => {\n  const p = []\n  const i = 0\n  while (i < n) {\n    const next = i + 1\n    const num = next\n    while (next < n && num > 0) {\n      p.push(num)\n      next += 1\n      num -= 1\n    }\n    i += 1\n  "}
{"task_id": "JavaScript/101", "prompt": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(' ');\n  return words;\n};\n\n/*\n  You Will Be givEn a StrinG of woRds sepaRatEd by cOmmAS oR sPaceS. youR task is\n  to spliT THe stRing into woRds and return an arraY of thE wORdS.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst splitWords = (s) => {\n  const words = s.split(',');\n  return words;\n};\n\n/*\n  Return a String of the words of the string s.\n  */\nconst words = (s) => {\n  return s.split(' ');\n};\n\n/*\n  Return a String of the words of the string s.\n  */\nconst splitWords = (s) => {\n  return s.split(',');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This FuncTion tAkeS two pOsitiVe numbeRs x aNd y and RetURnS tHe\n  biGGesT even integer nUMBer tHat is in the raNge [x, y] inclusive. if \n  theRe'S No SuCH nUmber, Then the FUnCTIon ShOULd return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) return -1\n  let a = x\n  let b = y\n  let nums = []\n  while (a <= b) {\n    nums.push(a)\n    a += 1\n  }\n  let n = nums.length\n  let ans = 0\n  for (let i = 0; i < n; i++) {\n    let tmp = Math.pow(x, n - i - 1) * Math.pow(y, i)\n    if (tmp > ans) ans = tmp\n  }\n  return ans\n}\n\nmodule.exports = chooseNum\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO poSitivE inteGers n and m, And Your tAsk IS tO cOmpuTE thE\n  average of the INTegeRs from n throUgh m (including n And m). \n  RoUnD ThE aNSwEr to tHe neareST iNTEgeR aND ConVeRT tHat to BinAry.\n  iF n is GreatEr tHaN m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2) + rounded) / Math.pow(2, m);\n  return roundedAvg;\n};\n\nconst roundedAvg = (n, m) => {\n  const result = n / m;\n  const avg = Math.floor(result);\n  const mod = result % 1;\n  const rounded = Math.floor(mod * Math.pow(2, m));\n  const roundedAvg = (Math.floor(avg / 2"}
{"task_id": "JavaScript/104", "prompt": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of PositIve IntegErs x. return a sOrted list of All \n  ElemeNts THaT hAsn't ANy eVen digit.\n\n  Note: RETUrneD list should be sOrted in increasIng orDeR.\n  \n  foR eXAmPle:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let unique = [];\n  for(let i = 0; i < x; i++){\n    let digit = parseInt(x % 10);\n    if(unique.indexOf(digit) === -1){\n      unique.push(digit);\n    }\n    x = x / 10;\n  }\n  return unique;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs, sorT the intEgeRs thaT arE BeTwEen 1 aND 9 inClusive,\n  reversE THe reSulting arrAy, and then repLace eAcH DiGiT By Its coRresponDInG NAme FrOM\n  \"one\", \"twO\", \"thRee\", \"FoUr\", \"FIve\", \"sIx\", \"SEven\", \"EIghT\", \"NInE\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.length - b.length\n  })\n  return sorted.reverse()\n}\n\nconst byLast = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a[a.length - 1] - b[b.length - 1]\n  })\n  return sorted.reverse()\n}\n\nconst byName = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.charAt(0) - b.charAt(0)\n  })\n  return sorted.reverse()\n}\n\nconst byNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  return sorted.reverse()\n}\n\nconst bySymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.charAt(0) - b.charAt(0)\n  })\n  return sorted.reverse()\n}\n\nconst byLengthNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.length - b.length\n  })\n  return sorted.reverse()\n}\n\nconst byLastNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a[a.length - 1] - b[b.length - 1]\n  })\n  return sorted.reverse()\n}\n\nconst bySymbolNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  return sorted.reverse()\n}\n\nconst byLengthSymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.length - b.length\n  })\n  return sorted.reverse()\n}\n\nconst byLastSymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a[a.length - 1] - b[b.length - 1]\n  })\n  return sorted.reverse()\n}\n\nconst byNumberSymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  return sorted.reverse()\n}\n\nconst bySymbolSymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.charAt(0) - b.charAt(0)\n  })\n  return sorted.reverse()\n}\n\nconst byLengthSymbolSymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.length - b.length\n  })\n  return sorted.reverse()\n}\n\nconst byLastSymbolSymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a[a.length - 1] - b[b.length - 1]\n  })\n  return sorted.reverse()\n}\n\nconst byLengthSymbolNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.length - b.length\n  })\n  return sorted.reverse()\n}\n\nconst byLastSymbolNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a[a.length - 1] - b[b.length - 1]\n  })\n  return sorted.reverse()\n}\n\nconst bySymbolSymbolNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  return sorted.reverse()\n}\n\nconst bySymbolNumberSymbol = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a - b\n  })\n  return sorted.reverse()\n}\n\nconst byLengthSymbolNumber = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.sort((a, b) => {\n    return a.length - b.length\n  })\n  return sorted."}
{"task_id": "JavaScript/106", "prompt": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* ImpLemeNt the FunCtion f That tAkes n as a ParAmeteR,\n  anD ReTuRns a list OF siZe n, such that the VALue oF the elemenT at index i is thE factOrIAl Of i IF i iS even\n  Or the suM Of NUMbeRs FROm 1 tO i oTHeRwise.\n  i StaRts FRom 1.\n  The faCtoRiAl OF i IS thE multipliCATIon of the nuMbERs from 1 tO i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst numeroFactores = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst factorial = (n) => {\n  return fib(n)\n}\n\nconst p = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1) + fib(n - 2)\n  }\n  return fib(n)\n}\n\nconst fact = (n) => {\n  const list = [1]\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    }\n    return fib(n - 1"}
{"task_id": "JavaScript/107", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a tuple thaT has the NumBer of EveN AnD oDd\n  inTEgeR palindromes tHAT falL within the Range(1, n), inclusiVe.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    const count = new Map()\n    for (let i = 1; i <= n; i++) {\n        let p = i\n        while (p) {\n            const c = p % 10\n            p = p / 10\n            if (c === p) {\n                count.set(c, count.get(c) + 1)\n            }\n        }\n    }\n    const countOdd = new Map()\n    for (let i = 1; i <= n; i++) {\n        let p = i\n        while (p) {\n            const c = p % 10\n            p = p / 10\n            if (c === p) {\n                countOdd.set(c, countOdd.get(c) + 1)\n            }\n        }\n    }\n    return [...count.values(),...countOdd.values()]\n}\n\nmodule.exports = evenOddPalindrome<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn countNums wHich tAkes aN array oF inTegerS anD ReTuRns\n  tHE nuMber of elementS WHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIgnED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, x) => acc + x, 0);\n  return arr.reduce((acc, x) => (sum > 0 && sum - x > 0)? acc + 1 : acc, 0);\n}\n\n/*\n  THeN tHe sum of eLEMENTS in the array hAs sIGNED digits, tAKES\n  aN array of inTegerS anD RETURNS the numbEr of the sINs\n  eLEMENTS wHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIGNED diGits -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, x) => acc + x, 0);\n  return arr.reduce((acc, x) => (sum > 0 && sum - x > 0)? acc + 1 : acc, 0);\n}\n\n/*\n  THeN tHe sum of eLEMENTS in the array hAs sIGNED digits, tAKES\n  aN array of inTegerS anD RETURNS the numbEr of the sINs\n  eLEMENTS wHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIGNED diGITS -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, x) => acc + x, 0);\n  return arr.reduce((acc, x) => (sum > 0 && sum - x > 0)? acc + 1 : acc, 0);\n}\n\n/*\n  THeN tHe sum of eLEMENTS in the array hAs sIGNED digits, tAKES\n  aN array of inTegerS anD RETURNS the numbEr of the sINs\n  eLEMENTS wHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIGNED diGITS -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, x) => acc + x, 0);\n  return arr.reduce((acc, x) => (sum > 0 && sum - x > 0)? acc + 1 : acc, 0);\n}\n\n/*\n  THeN tHe sum of eLEMENTS in the array hAs sIGNED digits, tAKES\n  aN array of inTegerS anD RETURNS the numbEr of the sINs\n  eLEMENTS wHich Has a sum of dIgits > 0.\n  If a numbEr is nEgATiVe, THeN its fIrst sigNEd DIGit WiLL Be nEgATiVe:\n  e.g. -123 hAs sIGNED diGITS -1, 2, aNd 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const sum = arr.reduce((acc, x) => acc + x, 0);\n  return arr.reduce((acc, x) => (sum > 0 && sum - x > 0)? acc + 1 : acc, 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2], ..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We haVe an Array 'arr' Of N IntegErs arr[1], arr[2],..., arr[N].The\n  nuMbers in thE arRay wiLl bE RaNdOmly ORdeRed. Your task is TO DeteRmine if\n  it iS possible to gEt an aRrAY sOrTEd in Non-deCreasinG OrDER by PeRFOrmInG \n  ThE follOwiNg oPEraTion oN thE gIvEN ARraY:\n      You are alLOWEd to perforM rIGht shifT operAtiOn any NUmBer OF tiMeS.\n  \n  OnE RighT shIfT OPeratiOn means shIfTINg aLl ELeMenTs OF ThE aRrAy by oNe\n  poSition in thE RiGHt directioN. The Last elEmENt OF The ArrAy will Be moVeD To\n  thE STartinG PoSITIoN in THe array i.e. 0th indeX. \n\n  If it is possIBlE To oBtaIn THe SOrted aRray bY pERfoRmIng the abOVe opEration\n  thEn return true ELse return falsE.\n  if the gIVen arrAy iS emPty tHEn return TRUe.\n\n  NOtE: the GIvEn list iS GUaRantEed tO hAvE uniQUe ElEMENTs.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  arr.reverse()\n  const l = arr.length\n  const max = arr[0]\n  let sum = 0\n  for (let i = 0; i < l; i++) {\n    sum += arr[i]\n    if (sum > max) {\n      sum = 0\n      i++\n    }\n  }\n  return i === l\n}\n\nconst moveOneBall2 = (arr) => {\n  let i = 0\n  let sum = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall3 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === arr.length\n}\n\nconst moveOneBall4 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall5 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall6 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall7 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall8 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall9 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall10 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall11 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall12 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len; i++) {\n    sum += arr[i]\n    if (sum > arr[i]) {\n      sum = 0\n      i++\n    }\n  }\n  return i === len\n}\n\nconst moveOneBall13 = (arr) => {\n  let sum = 0\n  let i = 0\n  for (let len = arr.length; i < len"}
{"task_id": "JavaScript/110", "prompt": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In thIs prOblem, You Will iMplemEnt a funCtiOn thaT taKEs TwO lisTS of Numbers,\n  and detERMineS whether it Is possible to PerfoRm AN exchange oF eLEmEnts\n  bEtween tHEm TO MakE lst1 a list OF OnlY eVEn NumbeRs.\n  THerE Is nO limiT on ThE nUMBEr oF exchangeD ELEments betwEeN lst1 And lst2.\n  If it Is posSibLe to exchange eLEmEntS BetWeEn tHE lst1 and lst2 To mAkE\n  ALl the eLements of lst1 To BE EveN, return \"Yes\".\n  OTheRwISE, return \"No\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = Math.min(lst1.length, lst2.length);\n  const lenDiff = Math.abs(lst1.length - lst2.length);\n  if (lenDiff === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n\n//examples\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4])); //\"YES\"\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4])); //\"NO\"\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*GiveN a strIng rePreSentiNg a spaCe separAteD loweRcaSE lEtTers, return a DIctIonary\n  of the leTTEr wiTh the most rEpetition and ContaInINg ThE CoRrespOnding cOUnT.\n  iF seVeRAL leTtERs Have tHe sAme OCcuRrencE, return alL oF tHEM.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const max = (test.length) - 1;\n  const sortedTest = test.split('');\n  const sortedHistogram = {};\n  \n  for (let i = 0; i <= max; i++) {\n    sortedHistogram[sortedTest[i]] = (sortedHistogram[sortedTest[i]])? sortedHistogram[sortedTest[i]] + 1 : 1;\n  }\n  \n  return sortedHistogram;\n};\n\nconst test = histogram('a b c');\nconsole.log(test);\n\nconst test2 = histogram('a b b a');\nconsole.log(test2);\n\nconst test3 = histogram('a b c a b');\nconsole.log(test3);\n\nconst test4 = histogram('b b b b a');\nconsole.log(test4);\n\nconst test5 = histogram('a b c a b');\nconsole.log(test5);\n\nconst test6 = histogram('a b c b a b c a b b a');\nconsole.log(test6);\n\nconst test7 = histogram('a b b a b b b b a b b a b b b a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b a a a a b b a b b a a a b a a b a b a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a b b a a a a a a a a a a a a a a a a a a a a a a a a a a> b a a a a a a a a a a a a a a a a a a a a b b a a a a a a a a a a a a a a\na a a a a a a a a a a a a a a a a a a a aa a a a\na a a a a a"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  we arE giveN twO striNgs s anD c, you havE to DeletEd aLL tHe CharACteRs in s that are equaL TO any Character in c\n  tHen check if thE resuLt STrInG Is PalinDrome.\n  A sTRiNG Is cAlLED paLiNDrOme if It rEadS The Same bAckWaRd AS FOrwArd.\n  You shoULD return A tuple containinG tHE result StrinG anD true/FAlSe fOR thE cHecK.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  if (!s) {\n    return false;\n  }\n  let i = 0, j = 0;\n  while (i < s.length) {\n    if (s[i] === c[j]) {\n      j++;\n      if (j === c.length) {\n        j = 0;\n        i++;\n      }\n    } else if (j > 0) {\n      j = 0;\n      i++;\n    } else {\n      i++;\n    }\n  }\n  return [s.substr(0, i), s.substr(i), j === c.length];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN a list of StrinGs, wHere eAch stRing conSisTs of oNly DIgItS, return a list.\n  EaCH elEment i of the outPUT shoUld be \"the nuMber of odd eleMents in ThE\n  StRiNG i oF the iNput.\" wheRE aLL The i's ShOULd bE rEPlAced bY thE nuMBer\n  Of odd DigItS in tHE i'th STriNg of the inPUT.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = [];\n  const even = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 === 1) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n  odd = odd.join(\" \");\n  even = even.join(\" \");\n  return [odd, even];\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array Of iNtegeRs nums, finD the minImuM sum oF anY NoN-eMpty SUb-aRray\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    if(nums.length === 0) return -1;\n    let minSum = nums[0];\n    let minIndex = 0;\n    for(let i = 0; i < nums.length; i++){\n        let sum = 0;\n        for(let j = 0; j < nums.length; j++){\n            if(i!= j){\n                sum += nums[j];\n                if(sum < minSum){\n                    minSum = sum;\n                    minIndex = j;\n                }\n            }\n        }\n    }\n    return minSum;\n};\n\n//Test\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//1\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//2\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//3\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//4\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//5\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//6\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//7\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//8\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//9\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//10\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//11\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//12\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//13\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//14\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//15\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//16\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//17\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//18\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//19\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//20\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//21\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//22\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//23\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//24\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log(minSubArraySum(testArr));\n\n//25\nlet testArr = [1, 2, 3, 4, 5, -1, -2, -3, -4, -5];\nconsole.log("}
{"task_id": "JavaScript/115", "prompt": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a RecTanguLar grid of Wells. EaCh rOw repResENtS a SingLE weLl,\n  and each 1 in a row REPresEnts a singlE unit of water.\n  each wElL HaS a COrRespoNding buCKeT THat CaN BE usEd TO eXtracT waTer FRom It, \n  and All BuCkETS HavE the same capacity.\n  YOUR Task is to usE tHE bucketS to emPty The weLLs.\n  outPUt tHe NumBEr of TimEs YOU need tO lower the BuCKEts.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [gridLen, gridRowLen] = grid.length;\n  const [bucketRowLen, bucketColLen] = grid[0].length;\n\n  let [count, rowCount] = [0, 0];\n  let [row, col] = [0, 0];\n  for (let i = 0; i < gridLen; i++) {\n    for (let j = 0; j < gridRowLen; j++) {\n      if (grid[i][j] === 1) {\n        row = i;\n        col = j;\n        count = 1;\n        rowCount++;\n      }\n    }\n  }\n  let [bucketCap, totalCap] = [1, 1];\n  while (totalCap < capacity) {\n    const [rowCount, colCount] = [rowCount, colCount];\n    for (let i = 0; i < gridLen; i++) {\n      for (let j = 0; j < gridRowLen; j++) {\n        if (grid[i][j] === 1 && count < bucketCap) {\n          row = i;\n          col = j;\n          count++;\n          rowCount++;\n        }\n      }\n    }\n    if (rowCount === bucketRowLen) {\n      bucketCap++;\n      totalCap += bucketCap;\n    }\n  }\n  return totalCap;\n};\n\nconst [grid, bucketCapacity] = [\n  [0,0,1,0],\n  [0,1,0,0],\n  [1,1,1,1]\n];\nconsole.log(grid, bucketCapacity);\nconsole.log(maxFill(grid, bucketCapacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In tHis KAta, yoU haVe to sOrt an Array of Non-NegatIve INtEgErs aCCorDing to\n  number oF ONes in tHeir binary RepresentatiOn in ascEnDInG oRDeR.\n  For sImilar nUMbER Of oNeS, SOrt BaSEd On decImaL vaLUe.\n\n  IT must Be iMpLeMENTed Like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let result = []\n  let tmp = []\n  let i = 0\n  let j = 0\n  let n = arr.length\n  for (i; i < n; i++) {\n    let value = arr[i]\n    if (value < 0) {\n      let tmpValue = Math.abs(value)\n      let k = 0\n      for (k; k < tmp.length; k++) {\n        if (tmp[k] > tmpValue) {\n          tmp.splice(k, 0, tmpValue)\n          break\n        }\n      }\n      tmp.splice(k, 0, value)\n    } else {\n      result.push(value)\n    }\n  }\n  for (i = 0; i < n; i++) {\n    if (tmp[i]!== undefined) {\n      result.splice(i, 0, tmp[i])\n    }\n  }\n  return result\n}\n\nconst main = () => {\n  let result = sortArray([-2, -3, -4, -5, -6])\n  console.log(result)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*GiveN a stRing s aNd a NaturAl numBer n, you hAve Been tAskED tO iMpleMEnt \n  A function that RETurnS a list of all worDs from string s That cOnTAiN eXAcTly \n  n coNsonantS, in OrDER thEsE WOrdS aPPeAr in the StrIng s.\n  iF thE striNg s iS eMpTY THen The functiON SHould return an empTy list.\n  nOte: you mAy assUme The inPUt StrINg cOnTaiNS onlY leTtERS and spAces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const charArr = s.split('')\n  const i = n - 1\n  const j = charArr.length - 1\n  const wordList = []\n  const stack = []\n  const lastChar = charArr[j]\n  while (i >= 0) {\n    if (charArr[i] === lastChar) {\n      stack.push(charArr[i])\n    } else if (stack.length === n) {\n      wordList.push(stack)\n      stack = []\n    } else {\n      stack.push(charArr[i])\n    }\n    i--\n  }\n  return wordList\n}\n\n//Test\n//console.log(selectWords(\"Uncle sam\", 3))\n//console.log(selectWords(\"Uncle sam\", 2))\n//console.log(selectWords(\"Uncle sam\", 1))\n//console.log(selectWords(\"Uncle sam\", 0))\n//console.log(selectWords(\"Uncle sam\", -1))\n//console.log(selectWords(\"Uncle sam\", -2))\n//console.log(selectWords(\"Uncle sam\", -3))\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a word. YOur Task iS to fiNd the clOseSt vowEl tHAt StAnds BEtwEen \n  two consonaNTS froM the right sIde of the word (case SensiTiVE).\n  \n  VOwELs in The beGinning ANd ENDinG dOESn't CoUNt. returN emPty STriNg if yOu dIdN't\n  FIND anY vowel met THE Above condiTiON. \n\n  You may AssumE thAt the GIvEn sTRinG cOntAIns ENglIsH LEtter oNly.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"];\n    let closestVowel = \"\";\n    for (let vowel of vowels) {\n        if (word.startsWith(vowel)) {\n            closestVowel = vowel;\n        }\n    }\n    return closestVowel;\n}\n\nconst getVowelLength = (word) => {\n    let vowelLength = 0;\n    let currentVowel = \"\";\n    for (let vowel of word) {\n        if (currentVowel!== vowel) {\n            currentVowel = vowel;\n            vowelLength++;\n        }\n    }\n    return vowelLength;\n}\n\nconst getVowelLengthExclude = (word) => {\n    let vowelLength = 0;\n    let currentVowel = \"\";\n    for (let vowel of word) {\n        if (currentVowel!== vowel) {\n            currentVowel = vowel;\n            vowelLength++;\n        }\n    }\n    return vowelLength + 1;\n}\n\nconst isLastVowel = (word) => {\n    let vowelLength = 0;\n    let currentVowel = \"\";\n    for (let vowel of word) {\n        if (currentVowel!== vowel) {\n            currentVowel = vowel;\n            vowelLength++;\n        }\n    }\n    return vowelLength === 1;\n}\n\nconst getFirstLetter = (word) => {\n    return word[0].toUpperCase();\n}\n\nconst getLastLetter = (word) => {\n    return word[word.length - 1].toUpperCase();\n}\n\nconst getLastTwoLetters = (word) => {\n    return word[word.length - 2].toUpperCase() + word[word.length - 1].toUpperCase();\n}\n\nconst getWordLength = (word) => {\n    return word.length;\n}\n\nconst isVowel = (vowel) => {\n    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"];\n    return vowels.indexOf(vowel) > -1;\n}\n\nconst isLastVowel = (word) => {\n    let vowelLength = 0;\n    let currentVowel = \"\";\n    for (let vowel of word) {\n        if (currentVowel!== vowel) {\n            currentVowel = vowel;\n            vowelLength++;\n        }\n    }\n    return vowelLength === 1;\n}\n\nconst hasConsonant = (word) => {\n    let consonants = [\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n    return consonants.indexOf(word[0]) > -1;\n}\n\nconst hasVowel = (word) => {\n    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"];\n    return vowels.indexOf(word[0]) > -1;\n}\n\nconst isVowelOrConsonant = (word) => {\n    let vowels = [\"A\", \"E\", \"I\", \"O\", \"U\", \"a\", \"e\", \"i\", \"o\", \"u\"];\n    let consonants = [\"B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n    for (let vowel of vowels) {\n        if (word.startsWith(vowel)) {\n            return true;\n        }\n    }\n    for (let consonant of consonants) {\n        if (word.startsWith(consonant)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst getLastWord = (word) => {\n    let lastWord = \"\";\n    for (let letter of word) {\n        lastWord = lastWord + letter;\n    }\n    return lastWord;\n}\n\nconst getFirstWord = (word) => {\n    let firstWord = \"\";\n    for (let letter of word) {\n        firstWord = firstWord + letter;\n    }\n    return firstWord;\n}\n\nconst isAllLowerCase = (word) => {\n    let lowerCaseLetters = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    for (let letter of word) {\n        if (lowerCaseLetters.indexOf(letter) === -1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isAllUpperCase = (word) => {\n    let upperCaseLetters = [\"A\", \"E\", \"I\", \"O\", \"U\"];\n    for (let letter of word) {\n        if (upperCaseLetters.indexOf(letter) === -1) {\n            return false;\n        }\n    }\n    return true;\n}\n\nconst is"}
{"task_id": "JavaScript/119", "prompt": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You Are gIven a list Of tWo strIngs, bOth striNgs ConsiSt oF OpEn\n  PareNTheSes '(' or close parENThesEs ')' only.\n  Your Job is to check If it iS pOSsIbLE tO concAtenate THe TWO stRiNGS in\n  soMe ORdEr, thaT thE reSUltIng stRinG wIlL BE GooD.\n  A string S IS COnsidered tO bE Good if aNd onlY if All paREnTheSEs in S\n  ArE baLAnceD. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const hasMore = lst.length > 1\n  const hasOpen = lst[0] === '('\n  const hasClose = lst[lst.length - 1] === ')'\n\n  if (hasOpen && hasClose) {\n    return 'Yes'\n  } else if (hasOpen) {\n    return 'No'\n  } else if (hasClose) {\n    return 'No'\n  } else {\n    return 'No'\n  }\n}\n\n/*\n  Match strings in two ways.\n  If they are all the same, return 'Yes', else return 'No'.\n  Examples:\n  matchString(['a', 'b', 'c', 'd']) == 'Yes'\n  matchString(['a', 'b', 'c', 'd', 'e']) == 'No'\n  */\nconst matchString = (lst) => {\n  let same = true\n\n  lst.forEach((str) => {\n    if (str!== lst[lst.length - 1]) {\n      same = false\n    }\n  })\n\n  if (same) {\n    return 'Yes'\n  } else {\n    return 'No'\n  }\n}\n\n/*\n  Check if the strings 'abc' and 'abd' are the same.\n  Examples:\n  sameStrings('abc', 'abd') == 'Yes'\n  sameStrings('abc', 'a') == 'No'\n  sameStrings('abd', 'ab') == 'No'\n  */\nconst sameStrings = (lst1, lst2) => {\n  const len = lst1.length\n  const len2 = lst2.length\n\n  if (lst1 === lst2) {\n    return 'Yes'\n  } else if (len!== len2) {\n    return 'No'\n  } else {\n    return 'No'\n  }\n}\n\nconst main = () => {\n  console.log(matchParens(['()', ')']));\n  console.log(matchString(['a', 'b', 'c', 'd']));\n  console.log(sameStrings('abc', 'abd'));\n  console.log(sameStrings('abc', 'a'));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn an Array arr Of iNtegeRs and A positiVe iNtegeR k, return a sORtEd list \n  Of leNGth k With the maximum k numberS in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const sortedArr = sortArray(arr);\n  const sortedArrLength = sortedArr.length;\n  const max = sortedArr[sortedArrLength - k];\n  const start = sortedArrLength - k;\n  const end = sortedArrLength;\n  return arr.slice(start, end);\n};\n\nconst sortArray = (arr) => {\n  return arr.slice().sort((a, b) => {\n    return a - b;\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*GiveN a noN-emptY list of IntegErs, return thE sum of aLl oF the oDd eLEmEnTs thAT arE in even positionS.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += lst[i];\n    }\n    return sum;\n}\n\nconst evenSum = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst oddSum = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstSum = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        sum += lst[i];\n    }\n    return sum;\n}\n\nconst lstEvenSum = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSum = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstSumEven = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSum = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSumEven = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstEvenSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstEvenSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstEvenSumEven = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 0){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstEvenSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSumEven = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstEvenSumOdd = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++){\n        if(lst[i] % 2 === 1){\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\nconst lstOddSumEven"}
{"task_id": "JavaScript/122", "prompt": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n// TASK #2\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements2 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n// TASK #3\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements3 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n// TASK #4\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements4 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n// TASK #5\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements5 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  GivEn a nOn-empTy aRray oF inteGers arr and An iNtegeR k, return\n  thE SuM oF the ELemEnts with at mosT TWo diGits from thE first k elemenTs of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements6 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements7 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements8 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements9 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements10 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements11 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements12 = (arr, k) => {\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElements13 = (arr,"}
{"task_id": "JavaScript/123", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNeD\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THat nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = [];\n  for (let i = 1; i < n; i++) {\n    const newN = getCollatz(i);\n    oddCollatz.push(newN);\n  }\n  return oddCollatz;\n};\n\n/*\n  GivEn a pOsitiVe iNtegeR n, return a sorTed list that Has The odD nuMBeRs in CollATz sEquence.\n\n  The ColLATz coNjecture is A conjecture in mAthemAtICs ThAT cOncerNs a sequENcE DEfiNEd\n  AS foLlOWs: Start WitH anY PosItive IntEgEr n. tHEN eaCh term is oBTAIned from thE \n  pREvious tErm as FolLows: iF ThE prEVioUs TerM Is evEn, tHe NEXt term Is one half Of \n  THE prEvIOuS teRm. iF ThE pReVious Term Is odd, the NExT Term is 3 timeS the PrevioUs\n  TErM PLus 1. the ConjecTure Is THAt nO MAtter wHAt VALUe OF n, The sequence wiLl always reaCH 1.\n\n  NOTe: \n      1. COllAtZ(1) Is [1].\n      2. REturneD list sortEd in INcrEaSing ordeR.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getCollatz = (n) => {\n  const oddCollatz = [];\n  for (let i = 1; i < n; i++) {\n    const newN = getCollatz(getCollatz(i));\n    oddCollatz.push(newN);\n  }\n  return oddCollatz;\n};\n\nconst getOddCollatzByTHeMethod = (n) => {\n  const oddCollatz = [];\n  for (let i = 1; i < n; i++) {\n    oddCollatz.push(getCollatz(i));\n  }\n  return oddCollatz;\n};\n\nmodule.exports = {\n  getOddCollatz,\n  getOddCollatzByTHeMethod\n};\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You hAve tO writE a fUnctiOn whiCh validAteS a givEn date sTRiNg And\n  rETurNs true if the date is VALid oTherwise faLse.\n  The date is valiD if alL oF ThE fOLlOwing Rules arE SaTISfiEd:\n  1. tHE date stRiNG iS not eMptY.\n  2. ThE NumBer of DayS iS nOT LEss Than 1 or higHER Than 31 days foR mONths 1,3,5,7,8,10,12. And The nuMbeR of daYS iS noT LesS tHan 1 OR higHer ThAN 30 Days foR months 4,6,9,11. AnD, tHE NumBeR Of DayS iS NOt LeSs Than 1 oR higHer than 29 fOR tHE month 2.\n  3. The mOnthS shoulD nOT bE LEss ThaN 1 or higHer tHaN 12.\n  4. the date sHOUld be in tHE fORMAt: MM-Dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  return (\n    (typeof date ==='string') &&\n    (date.indexOf('/')!== -1) &&\n    (date.indexOf('-')!== -1) &&\n    (date.indexOf('-')!== -1) &&\n    (date.indexOf('-')!== -1)\n  );\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1, ... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* GivEn a sTring Of wOrds, return a list Of worDs split On wHitesPacE, If No WhitESpaCes exists in the tEXT you\n  Should spliT on commas ',' if nO commAs EXiStS YoU shouLd return the nuMBeR OF loWeR-CAse LeTTeRs witH odD orDEr in tHe\n  alpHabEt, OrD('A') = 0, ORd('b') = 1,... Ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const result = [];\n  const words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  GivEN a tEXT, return a list of wordD\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords2 = (txt) => {\n  const result = [];\n  const words = txt.split(/\\W+/);\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  GivEN a tEXT, return a list of wordD\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords3 = (txt) => {\n  const result = [];\n  const words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\n/*\n  GivEN a tEXT, return a list of wordD\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords4 = (txt) => {\n  const result = [];\n  const words = txt.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (word.length) {\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nconst isNotEmpty = (value) => {\n  if (!value) {\n    return false;\n  }\n  return value.length;\n};\n\nconst toInt = (value) => {\n  if (isNotEmpty(value)) {\n    return parseInt(value, 10);\n  }\n  return null;\n};\n\nconst toUInt = (value) => {\n  if (isNotEmpty(value)) {\n    return parseInt(value, 10);\n  }\n  return null;\n};\n\nconst toFloat = (value) => {\n  if (isNotEmpty(value)) {\n    return parseFloat(value);\n  }\n  return null;\n};\n\nconst isNumber = (value) => {\n  if (isNotEmpty(value)) {\n    return toFloat(value)!== null;\n  }\n  return null;\n};\n\nconst isNumberInt = (value) => {\n  if (isNotEmpty(value)) {\n    return toInt(value)!== null;\n  }\n  return null;\n};\n\nconst isNumberUInt = (value) => {\n  if (isNotEmpty(value)) {\n    return toUInt(value)!== null;\n  }\n  return null;\n};\n\nconst isAlpha = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Za-z]*$/.test(value);\n  }\n  return null;\n};\n\nconst isAlphaNumeric = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Za-z0-9]*$/.test(value);\n  }\n  return null;\n};\n\nconst isUpperCase = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Z]*$/.test(value);\n  }\n  return null;\n};\n\nconst isLowerCase = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[a-z]*$/.test(value);\n  }\n  return null;\n};\n\nconst isAlphaNumeric = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Za-z0-9]*$/.test(value);\n  }\n  return null;\n};\n\nconst isAlphaOrNumeric = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Za-z0-9]*$/.test(value);\n  }\n  return null;\n};\n\nconst isAlphanumeric = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Za-z0-9]*$/.test(value);\n  }\n  return null;\n};\n\nconst isAlphanumericOrNumeric = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Za-z0-9]*$/.test(value);\n  }\n  return null;\n};\n\nconst isAlphaOrNumeric = (value) => {\n  if (isNotEmpty(value)) {\n    return /^[A-Za-z0-"}
{"task_id": "JavaScript/126", "prompt": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return WhethEr or nOt they aRe sOrted\n  in AscENdInG ordER. If list Has more than 1 duPLIcatE of the same\n  Number, return false. ASsume No NEgAtIVe NumbeRs and onLY iNTEgeRs.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length < 2) {\n    return true\n  }\n\n  const last = lst[lst.length - 1]\n  const lastIndex = lst.indexOf(last)\n  if (lastIndex < 0) {\n    return false\n  }\n\n  for (let i = lastIndex + 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false\n    }\n  }\n\n  return true\n}\n\nmodule.exports = isSorted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen twO inTervaLs,\n  wheRe each iNteRval iS a pAIr Of InteGErs. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let [start1, end1] = interval1\n  let [start2, end2] = interval2\n\n  if (end1 < start2 || end2 < start1) {\n    return \"NO\"\n  }\n\n  let middle = Math.floor((start1 + end1) / 2)\n  let [middle1, middle2] = [start1, middle]\n  let [middle3, middle4] = [middle2, end2]\n\n  if (middle2 === middle3) {\n    return \"YES\"\n  }\n\n  if (middle4 === middle1) {\n    return \"YES\"\n  }\n\n  let count = 0\n  while (middle1!== middle3 && middle2!== middle4) {\n    if (middle1 < middle3) {\n      if (middle2 < middle4) {\n        middle1 = middle2\n      } else {\n        return \"NO\"\n      }\n    } else {\n      if (middle3 < middle2) {\n        middle2 = middle3\n      } else {\n        return \"NO\"\n      }\n    }\n    count++\n  }\n\n  if (count === 0) {\n    return \"NO\"\n  } else {\n    return \"YES\"\n  }\n}\n\nconsole.log(intersection((1, 2), (2, 3)))\nconsole.log(intersection((-1, 1), (0, 4)))\nconsole.log(intersection((-3, -1), (-5, 5)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven aN arRay arr of IntegErs and yOu nEed to return\n  Sum OF mAgNituDEs oF integers multIPLied By product oF all signs\n  of eAch nuMbER in tHe ARrAy, repResenteD By 1, -1 OR 0.\n  notE: return nULL foR eMPtY arr.\n\n  ExamPle:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const len = arr.length\n  if (len == 0) return null\n  if (len == 1) return arr[0]\n\n  const signArr = Array.from(Array(len).keys())\n  const signArrLen = signArr.length\n\n  // 1) init\n  let s = 0\n  let p = 1\n  let i = 0\n\n  // 2) loop\n  while (i < len) {\n    let k = i\n    // 3) multIPLied By signArr\n    for (let j = 0; j < signArrLen; j++) {\n      s += arr[k] * signArr[j]\n      p *= signArr[j]\n      k += 1\n    }\n    i += 1\n  }\n\n  return s // s = sumOfIntegers(arr)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a grid wIth N rOws And N cOlumnS (N >= 2) and a pOsiTive iNteGEr k, \n  EaCh ceLL of The grid contains a vALUe. EvEry integer in The range [1, N * N]\n  inClusiVe APpEaRS eXactlY once on THe CELls Of THE grid.\n\n  YoU hAVe To finD thE miNImuM path Of lEnGtH k in THE grid. YoU can start\n  FROM any cell, anD in eACh step yOu can MovE to anY Of The NEigHbOr cELls,\n  in oTheR wORDs, you cAn go to celLs WHIch ShARe An eDgE WItH yOu CurreNt\n  ceLl.\n  Please NOtE That a path oF lenGth k meaNs VIsITIng ExaCtly k ceLls (nOt\n  NEcesSARily diSTiNCT).\n  yoU caNNOT go off the grid.\n  a path A (of lenGTh k) IS coNsiDeREd LEss thaN a patH B (OF leNgTh k) if\n  afteR MakiNg the ordeRed lisTS of the vALues on THe cellS thAt A And B GO\n  tHROugH (lET's cALl TheM LSt_a and Lst_B), LsT_A Is leXIcOgRAPHIcalLy lEss\n  tHan lST_b, in othEr words, tHerE exiST an INtegEr indEx i (1 <= i <= k)\n  SuCh THat lST_a[i] < lsT_B[I] AnD fOr Any j (1 <= j < i) we have\n  lSt_A[J] = lst_b[j].\n  It is gUaRAnTeEd tHaT the aNSwer is UnIQuE.\n  return aN ordereD list Of tHe VALUeS on thE cells that the MINIMuM path go THroUgH.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const len = grid.length\n    const [nRows, nCols] = [len, len]\n    const [min, max] = [1, nRows * nCols]\n    const [pairs, minPaths] = [Array(len), Array(nRows * nCols)]\n    for (let [row, col] of grid) {\n        pairs[row - 1][col - 1] = 1\n        for (let [row2, col2] of grid) {\n            if (row2 === row && col2 === col) continue\n            pairs[row - 1][col - 1] = Math.min(pairs[row - 1][col - 1], pairs[row2 - 1][col2 - 1])\n        }\n        minPaths[row - 1][col - 1] = Math.min(minPaths[row - 1][col - 1], pairs[row - 1][col - 1])\n    }\n    const maxPath = minPaths.reduce((x, y) => Math.min(x, y), max)\n    if (maxPath === max) return []\n    const answer = []\n    const [startRow, startCol] = [1, 1]\n    const [nextRow, nextCol] = [2, 2]\n    while (startRow < nRows && startCol < nCols) {\n        const [val, row, col] = grid[startRow - 1][startCol - 1]\n        if (val === maxPath) {\n            answer.unshift([row, col])\n            [startRow, startCol].unshift([row, col])\n            nextRow, nextCol = [row, col]\n            while (nextRow - 1 < nRows && nextCol - 1 < nCols) {\n                const [val2, row2, col2] = grid[nextRow - 1][nextCol - 1]\n                if (val2 === maxPath) {\n                    answer.unshift([row2, col2])\n                    [nextRow, nextCol].unshift([row2, col2])\n                } else break\n                nextRow, nextCol = [row2, col2]\n            }\n        }\n        startRow, startCol = [nextRow, nextCol]\n    }\n    return answer\n}\n\nexport {minPath}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*EverYone Knows fibOnaccI sequEnce, it wAs sTudieD deEPlY bY matHEmaTicians in \n  the lasT COuplE centuries. however, what pEople DoN'T kNoW Is triboNacci seQUeNCE.\n  TrIbONAccI sEQuEnce iS deFinED by The reCurReNcE:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, IF n Is eVen.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odD.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 1) {\n    return [3]\n  } else if (n === 2) {\n    return [1, 3]\n  } else {\n    const triArr = tri(n - 1)\n    const newArr = []\n    for (let i = 0; i < triArr.length; i++) {\n      const temp = triArr[i] + triArr[i + 1] + triArr[i + 2]\n      newArr.push(temp)\n    }\n    return newArr\n  }\n}\n\nconst tri = (n) => {\n  if (n === 1) {\n    return [3]\n  } else if (n === 2) {\n    return [1, 3]\n  } else {\n    const triArr = tri(n - 1)\n    const newArr = []\n    for (let i = 0; i < triArr.length; i++) {\n      const temp = triArr[i] + triArr[i + 1] + triArr[i + 2]\n      newArr.push(temp)\n    }\n    newArr.push(newArr[0])\n    return newArr\n  }\n}\n\nconst fib = (n) => {\n  if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [1, 1]\n  } else {\n    const fibArr = fib(n - 1)\n    const newArr = []\n    for (let i = 0; i < fibArr.length; i++) {\n      const temp = fibArr[i] + fibArr[i + 1]\n      newArr.push(temp)\n    }\n    return newArr\n  }\n}\n\nconst fib = (n) => {\n  if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [1, 1]\n  } else {\n    const fibArr = fib(n - 1)\n    const newArr = []\n    for (let i = 0; i < fibArr.length; i++) {\n      const temp = fibArr[i] + fibArr[i + 1]\n      newArr.push(temp)\n    }\n    newArr.push(newArr[0])\n    return newArr\n  }\n}\n\nconst fib = (n) => {\n  if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [1, 1]\n  } else {\n    const fibArr = fib(n - 1)\n    const newArr = []\n    for (let i = 0; i < fibArr.length; i++) {\n      const temp = fibArr[i] + fibArr[i + 1]\n      newArr.push(temp)\n    }\n    newArr.push(newArr[0])\n    return newArr\n  }\n}\n\nconst fib = (n) => {\n  if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [1, 1]\n  } else {\n    const fibArr = fib(n - 1)\n    const newArr = []\n    for (let i = 0; i < fibArr.length; i++) {\n      const temp = fibArr[i] + fibArr[i + 1]\n      newArr.push(temp)\n    }\n    newArr.push(newArr[0])\n    return newArr\n  }\n}\n\nconst fib = (n) => {\n  if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [1, 1]\n  } else {\n    const fibArr = fib(n - 1)\n    const newArr = []\n    for (let i = 0; i < fibArr.length; i++) {\n      const temp = fibArr[i] + fibArr[i + 1]\n      newArr.push(temp)\n    }\n    newArr.push(newArr[0])\n    return newArr\n  }\n}\n\nconst fib = (n) => {\n  if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [1, 1]\n  } else {\n    const fibArr = fib(n - 1)\n    const newArr = []\n    for (let i = 0; i < fibArr.length; i++) {\n      const temp = fibArr[i] + fibArr[i + 1]\n      newArr.push(temp)\n    }\n    newArr.push(newArr[0])\n    return newArr\n  }\n}\n\nconst fib = (n) => {\n  if (n === 1) {\n    return [1]\n  } else if (n === 2) {\n    return [1, 1]\n  } else {\n    const fibArr = fib(n - 1)\n    const newArr = []\n    for (let i = 0; i < fibArr"}
{"task_id": "JavaScript/131", "prompt": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*GiveN a poSitivE inTeger n, return The prOduct of The Odd digits.\n  ReTurN 0 If AlL digits are EVen.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 0) return 0\n  if (n % 2 === 0) return n / 2\n  return 3 * n + 1\n}\n\nexport default digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a FunctIon That tAkes a string As input WhiCh conTaiNS oNlY squARe bRackets.\n  The funCTIon sHould return true iF and only if thEre is A vALiD sUBsEquenCe of braCKeTS\n  WheRe AT LeaSt ONe BrackEt in tHe sUBseQuencE is NeStED.\n  isNested('[[]]') ➞ TRue\n  isNested('[]]]]]]][[[[[]') ➞ False\n  isNested('[][]') ➞ falsE\n  isNested('[]') ➞ FALse\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ truE\n  */\ncONst isNested = (string) => {\n\tif( string.charAt(0) == '['){\n\t\tif( string.charAt(string.length-1) == ']'){\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\treturn false;\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isEmpty = (string) => {\n\tif(string == null) return true;\n\tif(string.length == 0) return true;\n\treturn false;\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isNotEmpty = (string) => {\n\tif(string == null) return false;\n\tif(string.length == 0) return false;\n\treturn true;\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasSpaces = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/\\s/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasNoSpaces = (string) => {\n\tif(string == null) return false;\n\treturn!string.match(/\\s/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasCapitalLetters = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/[A-Z]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasLowerLetters = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/[a-z]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasNumbers = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/\\d/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasPunctuation = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/[!@#$%^&*(){}_+-=`~|:;<,>/?.\\/]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isAlpha = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/[A-Za-z]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isAlphaNumeric = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/\\w/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isNumeric = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/\\d/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isNotAlpha = (string) => {\n\tif(string == null) return false;\n\treturn!string.match(/[A-Za-z]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isNotAlphaNumeric = (string) => {\n\tif(string == null) return false;\n\treturn!string.match(/\\w/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isNotNumeric = (string) => {\n\tif(string == null) return false;\n\treturn!string.match(/\\d/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst isNotPunctuation = (string) => {\n\tif(string == null) return false;\n\treturn!string.match(/[!@#$%^&*(){}_+-=`~|:;<,>/?.\\/]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasLowerLetter = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/[a-z]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasUpperLetter = (string) => {\n\tif(string == null) return false;\n\treturn string.match(/[A-Z]/g);\n}\n\n//FUNCTION THAT TAKES A STRING AND RETURNS TRUE IF IT IS EMPTY, FALSE IF NOT\ncONst hasUpperLetterAndLowerLetter = (string) => {\n\tif(string == null"}
{"task_id": "JavaScript/133", "prompt": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a list oF nuMbers.\n  you neEd to return the Sum Of squAreD NuMbErs in tHE giVen list,\n  round each eLEMent in The list to the upPer int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    let s = 0\n    for (let i = 0; i < lst.length; i++) {\n        s += Math.pow(Math.ceil(lst[i]), 2)\n    }\n    return s\n}\n\n/*\n  Let's say we have a list with items as follows:\n  - 1\n  - 2\n  - 3\n  - 4\n  - 5\n  - 6\n  - 7\n  - 8\n  - 9\n  - 10\n  - 11\n  - 12\n  - 13\n  - 14\n  - 15\n  - 16\n  - 17\n  - 18\n  - 19\n  - 20\n  - 21\n  - 22\n  - 23\n  - 24\n  - 25\n  - 26\n  - 27\n  - 28\n  - 29\n  - 30\n  - 31\n  - 32\n  - 33\n  - 34\n  - 35\n  - 36\n  - 37\n  - 38\n  - 39\n  - 40\n  - 41\n  - 42\n  - 43\n  - 44\n  - 45\n  - 46\n  - 47\n  - 48\n  - 49\n  - 50\n  - 51\n  - 52\n  - 53\n  - 54\n  - 55\n  - 56\n  - 57\n  - 58\n  - 59\n  - 60\n  - 61\n  - 62\n  - 63\n  - 64\n  - 65\n  - 66\n  - 67\n  - 68\n  - 69\n  - 70\n  - 71\n  - 72\n  - 73\n  - 74\n  - 75\n  - 76\n  - 77\n  - 78\n  - 79\n  - 80\n  - 81\n  - 82\n  - 83\n  - 84\n  - 85\n  - 86\n  - 87\n  - 88\n  - 89\n  - 90\n  - 91\n  - 92\n  - 93\n  - 94\n  - 95\n  - 96\n  - 97\n  - 98\n  - 99\n  - 100\n  - 101\n  - 102\n  - 103\n  - 104\n  - 105\n  - 106\n  - 107\n  - 108\n  - 109\n  - 110\n  - 111\n  - 112\n  - 113\n  - 114\n  - 115\n  - 116\n  - 117\n  - 118\n  - 119\n  - 120\n  - 121\n  - 122\n  - 123\n  - 124\n  - 125\n  - 126\n  - 127\n  - 128\n  - 129\n  - 130\n  - 131\n  - 132\n  - 133\n  - 134\n  - 135\n  - 136\n  - 137\n  - 138\n  - 139\n  - 140\n  - 141\n  - 142\n  - 143\n  - 144\n  - 145\n  - 146\n  - 147\n  - 148\n  - 149\n  - 150\n  - 151\n  - 152\n  - 153\n  - 154\n  - 155\n  - 156\n  - 157\n  - 158\n  - 159\n  - 160\n  - 161\n  - 162\n  - 163\n  - 164\n  - 165\n  - 166\n  - 167\n  - 168\n  - 169\n  - 170\n  - 171\n  - 172\n  - 173\n  - 174\n  - 175\n  - 176\n  - 177\n  - 178\n  - 179\n  - 180\n  - 181\n  - 182\n  - 183\n  - 184\n  - 185\n  - 186\n  - 187\n  - 188\n  - 189\n  - 190\n  - 191\n  - 192\n  - 193\n  - 194\n  - 195\n  - 196\n  - 197\n  - 198\n  - 199\n  - 200\n  - 201\n  - 202\n  - 203\n  - 204\n  - 205\n  - 206\n  - 207\n  - 208\n  - 209\n  - 210\n  - 211\n  - 212\n  - 213\n  - 214\n  - 215\n  - 216\n  - 217\n  - 218\n  - 219\n  - 220\n  - 221\n  - 222\n  - 223\n  - 224\n  - 225\n  - 226\n  - 227\n  - 228\n  - 229\n  - 230\n  - 231\n  - 232\n  - 233\n  - 234\n  - 235\n  - 236\n  - 237\n  - 238\n  - 239\n  - 240\n  - 241\n  - 242\n  - 243\n  - 244\n  - 245\n  - 246\n  - 247\n  - 248\n  - 249\n  - 250\n  - 251\n  - 252\n  - 253\n  - 254\n  - 255\n  - 256\n  - 257\n  - 258\n  - 259\n  - 260\n  - 261\n  - 262\n  - 263\n  - 264\n  - 265\n  - 266\n  - 267\n  - 268\n  - 269\n  - 270\n  - 271\n  - 272\n  - 273\n  - 274\n  - 275\n  - 276\n  - 277\n  - 278\n  - 279\n  - 280\n  - 281\n  - 282\n  - 283\n  - 284\n  - 285\n  - 286\n  - 287\n  - 288\n  - 289\n  - 290\n  - 291\n  - 292\n  - 293\n  - 294\n  - 295\n  - 296\n  - 297\n  - 298\n  - 299\n  - 300\n  - 301\n  - 302\n  - 303\n  - 304\n  - 305\n  - 306\n  - 307\n  - 308\n  - 309\n  - 310\n  - 311\n  - 312\n  - 313\n  - 314\n  - 315\n  - 316\n  - 317\n  - 318\n  - 319\n  - 320\n  -"}
{"task_id": "JavaScript/134", "prompt": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* CreAte a FunctIon That rEturnS true if The Last cHarACtEr\n  Of a gIVen String is an alpHABetiCal charactEr and is not\n  a pArt of A wORd, AnD FaLse otHerwise.\n  nOtE: \"WOrd\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    const alpha = /[A-Za-z]/g\n    return alpha.test(txt.slice(-1))\n}\n\n/**\n  *   D e F A U L T   F r O M   A r C H A C T E R\n  *   nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  *   Example:\n  *   checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  *   checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  *   checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  *   checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n    const alpha = /[A-Za-z]/g\n    return alpha.test(txt.slice(0, 1))\n}\n\n/**\n  *   N e w   T r a v e   F o r   a r c h a c t e r\n  *   nOtE: \"WORD\" Is A GRouP oF ChAractErs SepARatEd by sPacE.\n  *   Example:\n  *   newTrim(\"    apple pie   \") ➞ \"apple pie\"\n  */\nconst newTrim = (txt) => {\n    return txt.replace(/^\\s+|\\s+$/g, \"\")\n}\n\nmodule.exports = {\n    newTrim,\n    checkIfLastCharIsALetter,\n    checkIfFirstCharIsALetter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fUnctiOn wHich rEturnS the larGesT indeX of AN eLeMent WHicH\n  is not greater THAn or Equal to the Element immedIatelY pREcEdINg It. If\n  nO such elEMeNT ExiStS THen return -1. thE GiVen arRay WilL Not ContaIn\n  dUpLiCATE vaLues.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let max = arr[0];\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  if (max - min === 0) {\n    return -1;\n  }\n  return max - min;\n};\n\nconst canArrange = (arr) => {\n  let max = arr[0];\n  let min = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return max - min;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* CreAte a fUnctiOn tHat reTurns a tuple (a, b), Where 'a' is\n  The LargeSt oF NeGaTive INteGers, and 'b' is the sMALlesT\n  of positivE integers in a list.\n  If tHere iS nO NeGaTIvE or poSitive iNTeGERs, return tHeM AS nuLl.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let largest, smallest;\n  lst.forEach(num => {\n    if (num < 0) return largest = null;\n    if (num === largest) return largest = num;\n    if (num < largest) return largest = num;\n  });\n  return largest? [largest, largest] : [null, null];\n};\n\n/* _________________________________________________________\n   The Smallest of all the Large Integers in the list is a tuple\n   (a, b) where 'a' is the Smallest and 'b' is the Smallest\n   of the large Integers in the list.\n   If there are no large Integers, return (null, null).\n   Examples:\n   smallestLargeIntegers([1, 2, 3, 4, 5]) == (1, 5)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6]) == (1, 6)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7]) == (1, 7)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8]) == (1, 8)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (1, 9)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 10)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (1, 11)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (1, 12)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (1, 13)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (1, 14)\n   smallestLargeIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (1, 15)\n   */\nconst smallestLargeIntegers = (lst) => {\n  let smallest, largest;\n  lst.forEach(num => {\n    if (num < 0) return largest = null;\n    if (num === largest) return largest = num;\n    if (num > largest) return largest = num;\n  });\n  return largest? [largest, largest] : [null, null];\n};\n\n/* _________________________________________________________\n   The Biggest of all the Small Integers in the list is a tuple\n   (a, b) where 'a' is the Biggest and 'b' is the Smallest\n   of the small Integers in the list.\n   If there are no small Integers, return (null, null).\n   Examples:\n   biggestSmallIntegers([1, 2, 3, 4, 5]) == (5, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6]) == (6, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7]) == (7, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8]) == (8, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (9, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (10, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (11, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (12, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (13, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (14, 1)\n   biggestSmallIntegers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (15, 1)\n   */\nconst biggestSmallIntegers = (lst) => {\n  let smallest, largest;\n  lst.forEach(num => {\n    if (num < 0) return largest = null;\n    if (num === largest) return largest = num;\n    if (num < largest) return largest = num;\n  });\n  return largest? [largest, largest] : [null, null];\n};\n\nmodule.exports = {\n  largestSmallestIntegers,\n  smallestLargeIntegers,\n  biggestSmallIntegers,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  CreAte a fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ nuLl\n  */\nconSt compareOne = (a, b) => {\n  const c = (typeof a) ==='string'? parseFloat(a) : a\n  const d = (typeof b) ==='string'? parseFloat(b) : b\n  return c === d? 0 : c > d? 1 : -1\n}\n\n/*\n  Given an int (or string) value, convert it to a float and return the\n  fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  convertOne(1) ➞ 1\n  convertOne(\"2,3\") ➞ \"2,3\"\n  convertOne(\"1.5\") ➞ \"1.5\"\n  convertOne(\"5,1\") ➞ \"5.0\"\n  convertOne(\"-1\") ➞ -1\n  */\nconSt convertOne = (value) => {\n  const num = parseFloat(value)\n  return isNaN(num)? NaN : num\n}\n\n/*\n  Given an int (or string) value, convert it to a float and return the\n  fUnctiOn tHat taKes inTegers, fLoaTs, or sTriNGs RePresENtiNg\n  real numbers, AND retUrns the larGer variable in iTs givEn VArIaBLe Type.\n  REturn nuLL iF THe vAlUES arE eQUaL.\n  Note: if a rEal NUmbEr is rEprEsEnTED As a sTring, the fLOATing point mIgHT be. or,\n\n  convertToNumber(\"-1\") ➞ -1\n  convertToNumber(\"-2\") ➞ -2\n  convertToNumber(\"0\") ➞ 0\n  convertToNumber(\"1\") ➞ 1\n  convertToNumber(\"2\") ➞ 2\n  convertToNumber(\"2.5\") ➞ 2.5\n  convertToNumber(\"1.5\") ➞ 1.5\n  convertToNumber(\"0.5\") ➞ 0.5\n  convertToNumber(\"-0.5\") ➞ -0.5\n  convertToNumber(\"1.0\") ➞ 1.0\n  convertToNumber(\"2.0\") ➞ 2.0\n  convertToNumber(\"-2.0\") ➞ -2.0\n  convertToNumber(\"-3.0\") ➞ -3.0\n  convertToNumber(\"-4.0\") ➞ -4.0\n  convertToNumber(\"-5.0\") ➞ -5.0\n  convertToNumber(\"-6.0\") ➞ -6.0\n  convertToNumber(\"-7.0\") ➞ -7.0\n  convertToNumber(\"-8.0\") ➞ -8.0\n  convertToNumber(\"-9.0\") ➞ -9.0\n  convertToNumber(\"-10.0\") ➞ -10.0\n  convertToNumber(\"-11.0\") ➟ -11.0\n  */\nconSt convertToNumber = (value) => {\n  const num = parseFloat(value)\n  return isNaN(num)? NaN : num\n}\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMberS\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n) % 2 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMBERs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 0;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMBERs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOddNumbers = (n) => {\n  return (n) % 2 === 1;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMBERs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumOdd = (n) => {\n  return (n) % 2 === 1;\n};\n\n/*EvalUate WhethEr tHe givEn numBer n can bE wrItten As tHE sUm Of exACtlY 4 positive even NUMBERs\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenOdd = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1;\n};\n\nconst isEqualToSumEvenOdd = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n\nconst isEqualToSumOdd = (n) => {\n  return (n) % 2 === 1;\n};\n\nconst isEqualToSumOddNumbers = (n) => {\n  return (n) % 2 === 1 && (n) % 3 === 1;\n};\n\nconst isEqualToSumOddNumbers = (n) => {\n  return (n) % 2 === 1 && (n) % 3 === 1;\n};\n\nconst isEqualToSumOddNumbers = (n) => {\n  return (n) % 2 === 1 && (n) % 3 === 1;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n\nconst isEqualToSumEvenOddNumbers = (n) => {\n  return (n) % 2 === 0 && (n) % 3 === 1 && (n) % 5 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The BRaziLian fActOrial Is defIned as:\n  bRazIlian_FacTOrIaL(n) = n! * (n-1)! * (n-2)! *... * 1!\n  whERe n > 0\n\n  FOr example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    const base = 1\n    const factorial = 1\n    const count = 1\n    const result = 1\n\n    while (count <= n) {\n        factorial *= base\n        base += 1\n        count += 1\n        result += factorial\n    }\n\n    return result\n}\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial2 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial2(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial3 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial3(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial4 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial4(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial5 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial5(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial6 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial6(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial7 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial7(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial8 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial8(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial9 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial9(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial10 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial10(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial11 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial11(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial12 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial12(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial13 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial13(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial14 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial14(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial15 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial15(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial16 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial16(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial17 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial17(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The function will recieve an integer as input and return the factorial of the\n  integer.\n  */\nconst factorial18 = (n) => {\n    if (n === 0) {\n        return 1\n    }\n    return n * factorial18(n - 1)\n}\n\n// -----------------------------------\n\n/*\n  The"}
{"task_id": "JavaScript/140", "prompt": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring text, RepLace aLl spaCes in it wiTh uNdersCorES, \n  aNd If a sTRinG has more than 2 cONSecuTive spaces, \n  Then replace aLl conSeCUtIvE SpAces wIth - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  const spacesCount = text.split(' ').length - 1\n  if (spacesCount > 1) {\n    return textWithoutSpaces\n  }\n  if (spacesCount === 0) {\n    return textWithoutSpaces\n  }\n  return textWithoutSpaces + '_'\n}\n\nconst removeSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces\n}\n\nconst makeCamel = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst makePascal = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst makeSnake = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst makeCamelCase = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst makePascalCase = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst makeSnakeCase = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst makeCamelCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst makePascalCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst makeSnakeCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst snakeCase = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst snakeCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst toSnakeCase = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst toSnakeCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst toCamelCase = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst toCamelCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst snakeCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toLowerCase() + textWithoutSpaces.slice(1)\n}\n\nconst toPascalCase = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nconst toPascalCaseWithoutSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s+/g, '')\n  return textWithoutSpaces[0].toUpperCase() + textWithoutSpaces.slice(1)\n}\n\nmodule.exports = {\n  fixSpaces,\n  removeSpaces,\n  makeCamel,\n  makePascal,\n  makeSnake,\n  makeCamelCase,\n  makePascalCase,\n  makeSnakeCase,\n  makeCamelCaseWithoutSpaces,\n  makePascalCaseWithoutSpaces,\n  makeSnakeCaseWithoutSpaces,\n  makeCamelCaseWithoutSpaces,\n  makePascalCaseWithoutSpaces,\n  makeSnakeCaseWithoutSpaces,\n  toSnakeCase,\n  toSnakeCaseWithoutSpaces,\n  toCamelCase,\n  toCamelCaseWithoutSpaces,\n  toP"}
{"task_id": "JavaScript/141", "prompt": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*CreaTe a fuNctioN whIch taKes a stRing repResEntinG a fiLE's NaMe, anD RetUrns\n  'Yes' if the tHE File'S name is valId, and returns 'no' othErWIsE.\n  A FIlE's namE is consIDeRED to Be VALid If ANd Only iF alL thE FolLowinG coNdItIONS \n  arE met:\n  - There SHOUld not be moRe THan threE digiTs ('0'-'9') in tHe filE'S nAme.\n  - tHe fIlE's nAMe coNtaInS EXactly One dot '.'\n  - The SuBSTriNg BEfOre ThE DOt ShOuLd not Be emPty, and it STaRTs with a lettEr frOm \n  the lAtIN aLPHapEt ('a'-'z' aNd 'A'-'Z').\n  - ThE subStRIng aFTEr the dOT sHOULd BE One of these: ['txt', 'Exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  var i = 0,\n    file_name_array = file_name.split(\".\"),\n    valid_file_name = true;\n  \n  for(i = 0; i < file_name_array.length; i++) {\n    if(/^\\w+$/.test(file_name_array[i])) {\n      valid_file_name = true;\n      break;\n    }\n    else {\n      valid_file_name = false;\n      break;\n    }\n  }\n  \n  if(valid_file_name) {\n    for(i = 0; i < file_name_array.length; i++) {\n      if(/^[0-9]+$/.test(file_name_array[i])) {\n        valid_file_name = false;\n        break;\n      }\n      else if(/^[a-zA-Z]+$/.test(file_name_array[i])) {\n        valid_file_name = true;\n        break;\n      }\n    }\n  }\n  \n  return valid_file_name;\n};\n\nmodule.exports = fileNameCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  ThiS funCtion WilL take A list of inTegers. FOr aLl entRieS in ThE list, tHe fuNCtiOn shall square THE intEger entry iF its index is a \n  MultiPlE Of 3 AnD WiLl cubE the intEGeR ENtrY iF ITs iNdEX iS a mulTipLe oF 4 And Not a mUltIpLe OF 3. tHe fUnction wiLL NOt \n  change thE eNTries in thE list whosE inDexes ARe Not A MulTiPle OF 3 or 4. THe fUnCTIon shaLl then return the SuM OF alL eNTrIes. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const n = lst.length\n  const sum = sumOfInts(lst)\n  const squares = lst.map(x => x * x)\n  return sumOfSquares(squares)\n}\n\n/*\"\n  The sumOfSquares fUnCTION shaLl return the sum of all the intEgRs in thE list squared.\n  */\nconst sumOfSquares = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i] * lst[i]\n  }\n  return sum\n}\n\nconst sumOfInts = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i]\n  }\n  return sum\n}\n\nconst isPowerOfThree = (n) => {\n  return n >= 3 && n % 3 === 0\n}\n\nconst isPowerOfFour = (n) => {\n  return n >= 4 && n % 4 === 0\n}\n\nconst isPythagoreanTriple = (x, y) => {\n  const a = x - y\n  const b = x + y\n  return Math.pow(a, 2) + Math.pow(b, 2) === x * x + y * y\n}\n\nconst isSquare = (n) => {\n  return Math.sqrt(n) === Math.floor(Math.sqrt(n))\n}\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nconst getPrimeFactors = (n) => {\n  const factors = []\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      while (n % i === 0) {\n        n = n / i\n      }\n    }\n  }\n  return factors\n}\n\nconst getSquareRootOfN = (n) => {\n  let x = n\n  while (!isPowerOfThree(x)) {\n    x += 1\n  }\n  let y = n\n  while (!isPowerOfFour(y)) {\n    y += 1\n  }\n  while (!isPythagoreanTriple(x, y)) {\n    x += 1\n    y += 1\n  }\n  return [x, y]\n}\n\nconst getFactors = (n) => {\n  const factors = []\n  while (n > 1) {\n    let x = n\n    while (!isPrime(x)) {\n      x += 1\n    }\n    factors.push(x)\n    n = n / x\n  }\n  return factors\n}\n\nconst getPeriod = (n) => {\n  const a = getPrimeFactors(n)\n  const b = getSquareRootOfN(n)\n  return [a, b]\n}\n\nconst isPythagoreanTriple = (x, y) => {\n  return isPowerOfThree(x) && isPowerOfFour(y) && Math.pow(x, 2) + Math.pow(y, 2) === x * x + y * y\n}\n\nconst getPeriods = (n) => {\n  const periods = []\n  while (n > 1) {\n    let [a, b] = getPeriod(n)\n    if (isPythagoreanTriple(a, b)) {\n      periods.push([a, b])\n      n = n / b\n    } else {\n      n = n + 1\n    }\n  }\n  return periods\n}\n\nconst getPeriodsOfTriples = (n) => {\n  const periods = []\n  while (n > 1) {\n    let [a, b] = getPeriod(n)\n    if (isPythagoreanTriple(a, b)) {\n      periods.push([a, b])\n      n = n / b\n    } else {\n      n = n + 1\n    }\n  }\n  return periods\n}\n\nconst isPeriod = (n) => {\n  const [a, b] = getPeriod(n)\n  return a * b === n\n}\n\nconst getPeriods = (n) => {\n  const periods = []\n  while (n > 1) {\n    let [a, b] = getPeriod(n)\n    if (isPeriod(n)) {\n      periods.push([a, b])\n      n = n / b\n    } else {\n      n = n + 1\n    }\n  }\n  return periods\n}\n\nconst isPeriod = (n) => {\n  const [a, b] = getPeriod(n)\n  return a * b === n\n}\n\nconst getPeriods = (n) => {\n  const periods = []\n  while (n > 1) {\n    let [a, b] = getPeriod(n)\n    if (isPeriod(n)) {\n      periods.push([a, b])\n      n = n / b\n    } else {\n      n = n + 1\n    }\n  }\n  return periods\n}\n\nconst main = () => {\n  const"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a StrIng rePreseNting a sentence,\n  tHe sentence cOntaiNs sOMe WoRds sEParAted by a space,\n  aND You hAve to return a striNg that contaiNs the WoRDs FrOM tHe oriGinal sentence,\n  whOSe LENgtHs ARE prImE NuMbers,\n  The OrdER of The woRds in ThE nEW STriNg should bE THE same as the OrIGinal onE.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const re = /(.*?)(?=\\S|\\s|$)/g\n  return sentence.replace(re, '$1 ').trim()\n}\n\nexport const parse = (sentence) => {\n  const words = wordsInSentence(sentence)\n  const newSentence = words.split(' ')\n  return newSentence\n}\n\nexport const join = (sentence) => {\n  const words = parse(sentence)\n  const joined = words.join(' ')\n  return joined\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your Task Is to iMplEment a FunctIon that WilL simplify the eXprESsIoN\n  x * n. The FUncTion returns trUE If x * n evAluates to a wHole number anD falsE\n  oTHeRwISe. both x aNd n, are stRInG REprEsENTatIoN Of a FractIon, And HAve The foLloWiNg FORMat,\n  <Numerator>/<DENOminator> whErE Both numEratoR anD denoMInAtoR Are PoSitIVe whOle NuMBErs.\n\n  You Can assume ThAT x, And n ArE VaLid FrACTiOnS, aNd do nOt haVe zero as DEnOMinator.\n\n  simplify(\"1/5\", \"5/1\") = truE\n  simplify(\"1/6\", \"2/1\") = falSe\n  simplify(\"7/10\", \"10/2\") = falsE\n  */\ncONsT simplify = (x, n) => {\n    let denominator = parseInt(n);\n    if (isNaN(denominator)) {\n        return false;\n    }\n    let numerator = parseInt(x);\n    if (isNaN(numerator)) {\n        return false;\n    }\n    if (numerator === 0 || denominator === 0) {\n        return true;\n    }\n    return (numerator / denominator) === parseInt(x);\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  WriTe a fUnctiOn wHich sOrts tHe given list Of iNtegeRs\n  in aSCeNdIng oRDer According to thE SUm of Their digitS.\n  Note: if there Are seVeRAl ItEMs With sImilar sUM oF THeiR dIGIts,\n  OrDEr Them bAseD on THeiR indeX in orIgInAL list.\n\n  fOr eXample:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const arr = nums.sort((a, b) => {\n    const aSum = a.sum();\n    const bSum = b.sum();\n    const diff = bSum - aSum;\n    return diff;\n  });\n  return arr;\n};\n\n// console.log(orderByPoints([1, 11, -1, -11, -12]));\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt takEs an aRray of nUmbErs as InpUT aNd RetuRNs \n  tHe number of eleMENts in tHe array thaT are greater tHan 10 anD bOTh \n  FiRSt And laSt digitS Of A NUmbEr ARE odD (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter((x) => {\n    if (x > 10 && x < 100) return 1;\n    if (x > 1000 && x < 10000) return 2;\n    if (x > 10000000 && x < 100000000) return 3;\n    if (x > 1000000000000) return 4;\n    return 0;\n  });\n};\n\nconst specialFilterTest = () => {\n  specialFilter([15, -73, 14, -15]); //1\n  specialFilter([33, -2, -3, 45, 21, 109]); //2\n  specialFilter([4, -3, -3, -4, -3, 3, 2, 4]); //3\n  specialFilter([9, -9, -9, -9, -9, 9, 9, 9, 9]); //4\n  specialFilter([-9, -9, -9, -9, -9, 9, 9, 9, 9, 9]); //5\n  specialFilter([-9, -9, -9, -9, -9, 9, 9, 9, 9, 9, 9]); //6\n};\n\nspecialFilterTest();\n\n/*\nWrite a function:\n  checkio(a, b) that takes two arguments an d returns true if a is \n  greater than b and false if not.\n*/\nconst checkio = (a, b) => {\n  if (a > b) {\n    return true;\n  }\n  return false;\n};\n\nconst checkioTest = () => {\n  checkio(11, 11);\n  checkio(11, 12);\n  checkio(12, 11);\n  checkio(15, 11);\n  checkio(11, 19);\n  checkio(11, 20);\n};\n\ncheckioTest();\n\n/*\nWrite a function:\n  reverse(a) that takes one argument an d returns a reversed \n  version of the argument.\n*/\nconst reverse = (a) => {\n  let arr = Array.from(a);\n  arr.reverse();\n  return arr;\n};\n\nconst reverseTest = () => {\n  reverse([11, 11, 11]);\n  reverse([11, 12, 11]);\n  reverse([12, 11, 11]);\n  reverse([15, 11, 11]);\n  reverse([11, 19, 11]);\n  reverse([11, 20, 11]);\n};\n\nreverseTest();\n\n/*\nWrite a function:\n  fib(n) that takes one argument an d returns the nth fibonacci number.\n*/\nconst fib = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nconst fibTest = () => {\n  fib(10);\n  fib(11);\n  fib(12);\n  fib(13);\n  fib(14);\n  fib(15);\n};\n\nfibTest();\n\n/*\nWrite a function:\n  primes(n) that takes one argument an d returns a list of prime numbers \n  up to n.\n*/\nconst primes = (n) => {\n  let result = [];\n  let i;\n  for (i = 2; i < n; i += 1) {\n    if (isPrime(i)) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst primesTest = () => {\n  primes(11);\n  primes(12);\n  primes(13);\n  primes(14);\n  primes(15);\n};\n\nprimesTest();\n\n/*\nWrite a function:\n  sum(a, b) that takes two arguments an d returns the sum of a and b.\n*/\nconst sum = (a, b) => {\n  return a + b;\n};\n\nconst sumTest = () => {\n  sum(10, 11);\n  sum(10, 12);\n  sum(10, 13);\n  sum(10, 14);\n  sum(10, 15);\n};\n\nsumTest();\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You Are gIven a PosItive IntegEr n. You haVe tO creaTe aN InTeGer aRRay A of length n.\n      For eACH i (1 ≤ i ≤ n), the Value of a[i] = i * i - i + 1.\n      REturn the numbEr of tRiPLeS (a[I], A[j], A[k]) of a Where i < j < k, \n  anD A[i] + A[J] + A[k] iS a MULtiPlE Of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let A = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i < j && j < k) {\n                    A[i] += A[j];\n                    A[j] += A[k];\n                    A[k] += i;\n                    count++;\n                }\n            }\n        }\n    }\n    return count;\n}\n\nconst getMaxTriplesByMap = (n) => {\n    let map = new Map();\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i < j && j < k) {\n                    map.set(i + '_' + j + '_' + k, 1);\n                }\n            }\n        }\n    }\n    let count = 0;\n    for (let [i, j, k] of map.entries()) {\n        if (i < j && j < k) {\n            count++;\n        }\n    }\n    return count;\n}\n\nmodule.exports = {\n    getMaxTriples,\n    getMaxTriplesByMap\n}<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* TheRe arE eighT plAnets in Our soLar systEm: tHe cloSerST tO tHe SuN\n  Is MErcury, the next ONE is VEnus, then EaRth, Mars, JupitEr, SatUrN,\n  urAnUS, NEptunE.\n  Write a FUnCTIon ThAT TakEs TWo PlaneT naMes AS stRings planet1 And planet2.\n  thE fUNCTioN should return a tuple cONTAining all pLaNEts whosE orbiTs aRe\n  locATeD beTWeeN tHe oRBit oF planet1 anD tHE Orbit oF planet2, sorted by\n  ThE PRoxImITy To tHe SUN.\n  THe FuNctioN shoUld return an empTY tuple iF planet1 Or planet2\n  are not coRrecT planeT nAMeS.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  return (\n    (typeof planet1 === \"string\")?\n      (typeof planet2 === \"string\")?\n        (planet1 === planet2) :\n        (planet1 < planet2) :\n      (planet1 < planet2)\n  );\n};\n\nbf(\"Mercury\", \"Jupiter\") // false\nbf(\"Mercury\", \"Earth\") // true\nbf(\"Mercury\", \"Saturn\") // true\nbf(\"Saturn\", \"Jupiter\") // false\nbf(\"Saturn\", \"Earth\") // true\nbf(\"Saturn\", \"Mars\") // false\nbf(\"Jupiter\", \"Saturn\") // false\nbf(\"Jupiter\", \"Uranus\") // true\nbf(\"Uranus\", \"Saturn\") // false\nbf(\"Earth\", \"Jupiter\") // false\nbf(\"Mercury\", \"Saturn\") // true\nbf(\"Mercury\", \"Saturn\") // true\nbf(\"Saturn\", \"Uranus\") // true\nbf(\"Saturn\", \"Uranus\") // true\nbf(\"Jupiter\", \"Earth\") // true\nbf(\"Saturn\", \"Uranus\") // true\nbf(\"Saturn\", \"Uranus\") // true\nbf(\"Mercury\", \"Saturn\") // true\nbf(\"Mercury\", \"Saturn\") // true\nbf(\"Jupiter\", \"Saturn\") // false\nbf(\"Jupiter\", \"Mercury\") // false\nbf(\"Jupiter\", \"Earth\") // false\nbf(\"Jupiter\", \"Saturn\") // false\nbf(\"Jupiter\", \"Saturn\") // false\nbf(\"Jupiter\", \"Saturn\") // false\nbf(\"Saturn\", \"Jupiter\") // false\nbf(\"Saturn\", \"Mercury\") // false\nbf(\"Saturn\", \"Mercury\") // false\nbf(\"Saturn\", \"Jupiter\") // false\nbf(\"Saturn\", \"Earth\") // false\nbf(\"Saturn\", \"Earth\") // false\nbf(\"Saturn\", \"Jupiter\") // false\nbf(\"Saturn\", \"Saturn\") // false\nbf(\"Saturn\", \"Mercury\") // false\nbf(\"Saturn\", \"Mercury\") // false\nbf(\"Saturn\", \"Saturn\") // false\nbf(\"Saturn\", \"Saturn\") // false\nbf(\"Saturn\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false\nbf(\"Mercury\", \"Saturn\") // false"}
{"task_id": "JavaScript/149", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs aS a parAmeTEr,\n  DeLeteS The Strings that haVE Odd lEngths from It,\n  and returns The reSuLTeD list wITh A sortEd order,\n  tHe list IS AlwAyS A list Of sTrINgS and nEveR an ARraY of nuMbeRs,\n  AnD IT May Contain duPLICates.\n  The orDeR Of the list shOuld bE asCendiNG bY leNGth Of EacH Word, And YoU\n  SHould return tHe list sorted bY tHAT ruLe.\n  iF tWo wOrDS HaVe ThE same LengTh, sort thE list AlPHabeticallY.\n  The FunctiOn SHoULD return a list oF stRings in sOrteD oRDer.\n  YOU May assUMe THAT aLL Words will have The same lengTH.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  return lst.sort((a, b) => {\n    return a.length - b.length;\n  });\n};\n\ndescribe('#sortedListSum', () => {\n  it('should return sorted list', () => {\n    expect(sortedListSum([1, 3, 5, 7, 9])).toEqual([1, 3, 5, 7, 9]);\n    expect(sortedListSum([1, 3, 5, 7, 9, 11, 13])).toEqual([1, 3, 5, 7, 9, 11, 13]);\n    expect(sortedListSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\n  });\n\n  it('should return sorted list with duplicates', () => {\n    expect(sortedListSum([1, 2, 2, 3, 4, 4, 5])).toEqual([1, 2, 2, 3, 4, 4, 5]);\n    expect(sortedListSum([1, 2, 2, 3, 4, 4, 5, 6])).toEqual([1, 2, 2, 3, 4, 4, 5, 6]);\n    expect(sortedListSum([1, 2, 3, 4, 5, 6, 7, 8])).toEqual([1, 2, 3, 4, 5, 6, 7, 8]);\n  });\n\n  it('should return sorted list with different lengths', () => {\n    expect(sortedListSum([1, 3, 5, 7, 9])).toEqual([1, 3, 5, 7, 9]);\n    expect(sortedListSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])).toEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simPle pRograM whIch shOuld return tHe value Of x iF n is \n  a pRimE NuMbEr anD ShoUld return the value of y OTHerwIse.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return x === y? x : n - x + y;\n}\n\nconst xOrYTest = (n, x, y) => {\n  if (n === x) {\n    return x;\n  }\n  if (n === y) {\n    return y;\n  }\n  return n - x + y;\n}\n\nconsole.log(xOrY(7, 34, 12) === 34);\nconsole.log(xOrY(15, 8, 5) === 5);\n\nconsole.log(xOrYTest(7, 34, 12) === 34);\nconsole.log(xOrYTest(15, 8, 5) === 5);\n\n//# sourceMappingURL=xOrY.js.map<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* GivEn a list oF numbErs, return The suM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheDifference = (lst) => {\n  const arr = lst.toArray();\n  const result = arr.map((x) => x * x);\n  return result.reduce((prev, current) => prev + current, 0);\n};\n\n/* GivEn a list oF numbErs, return The sUM of sqUares of The NumbeRs\n  in tHE list tHaT are ODd. IGnore numbers tHAT are Negative or Not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  IF the iNpUT list iS eMPtY, return 0.\n  */\nconsT doubleTheSum = (lst) => {\n  const arr = lst.toArray();\n  const result = arr.reduce((prev, current) => prev + current, 0);\n  return result;\n};\n\nexport {\n  doubleTheDifference,\n  doubleTheSum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thiNk we All reMemBer thAt feeLing wheN thE resuLt oF SoMe Long-AWaiTed\n  event is finALLy knOwn. The feelIngs and thougHts yoU hAVe At THaT momeNt are\n  deFInITEly WoRTH noTiNG dOwn anD coMpaRIng.\n  your tAsk Is To DETErmIne if a perSON Correctly gUeSSed the rEsultS of A numbER oF maTCheS.\n  YOu aRE givEn tWo ARRays of Scores and GuESSes Of EQuAl lEnGTH, wHeRe Each iNdex Shows a maTCh. \n  rEturn an arrAy of The samE lENgTH DenOtiNg how fAr ofF eACh guess waS. iF they hAVe GUESsED Correctly,\n  the vAlue is 0, and if NOt, THe vAluE iS ThE AbsoluTe difFeREncE bEtween thE guess And tHe score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const gameLen = game.length;\n  const guessLen = guess.length;\n  let result = [0, 0, 0, 0, 0, 0];\n  for (let i = 0; i < gameLen; i++) {\n    if (guess[i] === game[i]) {\n      result[i] = 1;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You wIll bE giveN thE name Of a clAss (a strIng) And a list oF extensions.\n  ThE extensions ArE tO be uSEd tO load additionAL ClasSes to the clAss. The\n  strengTh of tHe EXtEnSIoN is as Follows: lEt cap be ThE NUmbEr OF tHe uppErcAse\n  LEttErs in thE exTeNsION'S naMe, and let Sm BE The number oF lOWercase LetteRs\n  in tHe extENsIon'S NamE, tHe sTRengTh iS gIVEn by thE fraction cAp - sm.\n  YoU sHOuLd fInD THe StRoNgest ExteNsion and return A StRIng in this\n  forMat: CLassNaMe.sTrONGesTExTensioNNamE.\n  IF TherE ARe two oR MoRE extensions WItH THe same strengtH, you should\n  cHOoSE thE onE tHAt COmes fiRst in thE list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const name_parts = class_name.split(\".\")\n  let ext_name = \"\"\n  let strength = 0\n\n  // check if extensions is an array\n  if (!Array.isArray(extensions)) {\n    extensions = [extensions]\n  }\n\n  // find the strongest extension\n  extensions.forEach(extension => {\n    const extension_parts = extension.split(\".\")\n    let strength_of_extension = 0\n\n    // check if extension is a class\n    if (!isClass(extension)) {\n      extension = \".\" + extension\n    }\n\n    // loop through each part of the class name\n    name_parts.forEach((part, index) => {\n      if (index === name_parts.length - 1) {\n        // last part of the class name\n        const ext_strength = getStrength(extension)\n        if (ext_strength > strength) {\n          strength = ext_strength\n          ext_name = extension\n        }\n      } else {\n        // not the last part of the class name\n        const part_strength = getStrength(part)\n        if (part_strength > strength) {\n          strength = part_strength\n          ext_name = \".\" + part\n        }\n      }\n    })\n  })\n\n  return ext_name\n}\n\n// returns a string representing the name of the class\n// given the class_name and the extension\nconst getClassName = (class_name, extension) => {\n  const name_parts = class_name.split(\".\")\n  const ext_name = extension.split(\".\")\n\n  // check if extensions is an array\n  if (!Array.isArray(extension)) {\n    extension = [extension]\n  }\n\n  name_parts.forEach((part, index) => {\n    if (index === name_parts.length - 1) {\n      // last part of the class name\n      if (extension.length > 0) {\n        return part + \".\" + extension[0]\n      }\n    } else {\n      // not the last part of the class name\n      if (extension.length > 0) {\n        return part + \".\" + extension[0]\n      } else {\n        return part\n      }\n    }\n  })\n}\n\n// returns a string representing the strength of a class\n// given the class_name and the extension\nconst getStrength = (class_name, extension) => {\n  const name_parts = class_name.split(\".\")\n  const ext_name = extension.split(\".\")\n\n  // check if extensions is an array\n  if (!Array.isArray(extension)) {\n    extension = [extension]\n  }\n\n  name_parts.forEach((part, index) => {\n    if (index === name_parts.length - 1) {\n      // last part of the class name\n      if (extension.length > 0) {\n        return getStrength(extension[0])\n      }\n    } else {\n      // not the last part of the class name\n      if (extension.length > 0) {\n        return getStrength(extension[0])\n      } else {\n        return -1\n      }\n    }\n  })\n}\n\nconst isClass = (class_name) => {\n  if (class_name.indexOf(\".\")!== -1) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isValidExtension = (extension) => {\n  if (extension.indexOf(\".\")!== -1) {\n    return true\n  } else {\n    return false\n  }\n}\n\nexport {\n  getClassName,\n  getStrength,\n  isClass,\n  isValidExtension\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen 2 woRds. you neEd to return tRue if thE seCond wOrd OR aNy Of itS RotAtions is a substRINg in thE first word\n  cycpatternCheck(\"abcd\",\"abd\") => False\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => falSe\n  cycpatternCheck(\"abab\",\"baa\") => truE\n  cycpatternCheck(\"efef\",\"eeff\") => fALsE\n  cycpatternCheck(\"himenss\",\"simen\") => tRUe\n  */\nConst cycpatternCheck = (a, b) => {\n  const a2 = a.toLowerCase()\n  const b2 = b.toLowerCase()\n\n  const firstWord = a2.substr(0,1)\n  const secondWord = a2.substr(1)\n  const firstWordIsB = b2.indexOf(firstWord) === 0\n\n  if (firstWordIsB) {\n    const a2secondWord = a2.substr(1)\n    const b2secondWord = b2.substr(firstWord.length)\n\n    if (a2secondWord.indexOf(secondWord) === 0) {\n      return true\n    }\n  }\n\n  if (secondWord.indexOf(firstWord) === 0) {\n    return false\n  }\n\n  return false\n}\n\n/**\n  * @param {string} a\n  * @param {string} b\n  * @return {boolean}\n  */\nconst isSatisfiable = (a, b) => {\n  let aWords = a.split(\" \")\n  let bWords = b.split(\" \")\n\n  if (aWords.length === bWords.length) {\n    for (let i = 0; i < aWords.length; i++) {\n      if (cycpatternCheck(aWords[i], bWords[i]) === false) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  return false\n}\n\nmodule.exports = isSatisfiable\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    return (Math.abs(num) % 2 === 0)? (1, 1) : (1, 2)\n}\n\n/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n   If num < 0, return an evenOddCount(). Else return an oddOddCount().\n*/\nconst oddEvenCount = (num) => {\n    return ((Math.abs(num) % 2) === 0)? (1, 1) : (1, 2)\n}\n\n/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n   If num < 0, return an oddOddCount(). Else return an evenOddCount().\n*/\nconst evenOddCount = (num) => {\n    return ((Math.abs(num) % 2) === 0)? (1, 1) : (1, 2)\n}\n\n/*GiveN an iNtegeR. return a tuple tHat haS the nUmber of EveN and oDd dIGiTs RespECtiVely.\n   If num < 0, return an oddOddCount(). Else return an evenOddCount().\n*/\nconst oddEvenCount = (num) => {\n    return ((Math.abs(num) % 2) === 0)? (1, 1) : (1, 2)\n}\n\nconst oddCount = (num) => {\n    return ((Math.abs(num) % 2) === 1)? (1, 1) : (1, 2)\n}\n\nconst evenCount = (num) => {\n    return ((Math.abs(num) % 2) === 0)? (1, 1) : (1, 2)\n}\n\nconst main = (function () {\n    const number = input(\"GiveN a number: \")\n\n    const oddCount = (num) => {\n        return ((Math.abs(num) % 2) === 1)? (1, 1) : (1, 2)\n    }\n\n    const evenCount = (num) => {\n        return ((Math.abs(num) % 2) === 0)? (1, 1) : (1, 2)\n    }\n\n    const oddEvenCount = (num) => {\n        return ((Math.abs(num) % 2) === 1)? (1, 1) : (1, 2)\n    }\n\n    const evenOddCount = (num) => {\n        return ((Math.abs(num) % 2) === 0)? (1, 1) : (1, 2)\n    }\n\n    const evenOddCount = (num) => {\n        return ((Math.abs(num) % 2) === 0)? (1, 1) : (1, 2)\n    }\n\n    return (oddCount(number) + evenCount(number) + oddEvenCount(number) + evenOddCount(number))\n})()\n\nconsole.log(`The answer is: ${main}`)\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a pOsitiVe iNtegeR, obtaIn its roMan NumerAl eQUiVaLent AS a sTring,\n  and return it in lowERCase.\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = \"\";\n  let result2 = \"\";\n  let charToNumber = {\n    \"I\": 1,\n    \"V\": 5,\n    \"X\": 10,\n    \"L\": 50,\n    \"C\": 100,\n    \"D\": 500,\n    \"M\": 1000,\n  };\n  let numberToChar = {\n    1: \"I\",\n    5: \"V\",\n    10: \"X\",\n    50: \"L\",\n    100: \"C\",\n    500: \"D\",\n    1000: \"M\",\n  };\n  let length = number.toString().length;\n  for (let i = 0; i < length; i++) {\n    if (numberToChar[number] === \"M\") {\n      result2 = \"M\";\n      result += numberToChar[number];\n      break;\n    }\n    if (numberToChar[number] === \"D\") {\n      result2 = \"D\";\n      result += numberToChar[number];\n      break;\n    }\n    if (numberToChar[number] === \"C\") {\n      result2 = \"C\";\n      result += numberToChar[number];\n      break;\n    }\n    if (numberToChar[number] === \"L\") {\n      result2 = \"L\";\n      result += numberToChar[number];\n      break;\n    }\n    if (numberToChar[number] === \"X\") {\n      result2 = \"X\";\n      result += numberToChar[number];\n      break;\n    }\n    if (numberToChar[number] === \"V\") {\n      result2 = \"V\";\n      result += numberToChar[number];\n      break;\n    }\n    if (numberToChar[number] === \"I\") {\n      result2 = \"I\";\n      result += numberToChar[number];\n      break;\n    }\n    number--;\n  }\n  return result2 + result;\n};\n\n/*\n  Convert a number into a roman numeral,\n  for example if the number is equal to 27, it returns \"XXXVII\"\n  restrictioNs: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(27) == \"XXXVII\"\n  >>> intToRoman(10) == \"X\"\n  >>> intToRoman(500) == \"CD\"\n  >>> intToRoman(9) == \"IX\"\n  */\nconst intToRoman = (number) => {\n  let result = \"\";\n  let num = parseInt(number, 10);\n  let charToNumber = {\n    \"I\": 1,\n    \"V\": 5,\n    \"X\": 10,\n    \"L\": 50,\n    \"C\": 100,\n    \"D\": 500,\n    \"M\": 1000,\n  };\n  for (let i = 0; i < num; i++) {\n    result += charToNumber[num % charToNumber[i]];\n    num = Math.floor(num / charToNumber[i]);\n  }\n  return result;\n};\n\nmodule.exports = {\n  intToRoman,\n  intToMiniRoman,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n GivEn thE lengThs Of the Three Sides of a TriAngle. retURn TrUe if THe tHree\n  sides form a RIGht-aNgled trianGle, false otheRwise.\n  a rIGhT-aNGlEd triAngle is a TRiANGle in WhICH onE aNGlE is riGht AngLE or\n  90 DegreE.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    let ab = [a, b],\n        bc = [b, c],\n        ca = [c, a];\n\n    let abc = [a, b, c],\n        abc2 = [a, b, c];\n\n    if(\n        ((a + b > c) && (a + b < c + a) && (b + c > a) && (b + c < a + c)) ||\n        ((a + c > b) && (a + c < b + c) && (c + a > b) && (c + a < b + a)) ||\n        ((b + c > a) && (b + c < a + c) && (c + a > b) && (c + a < b + a))\n    ){\n        return true;\n    }else{\n        return false;\n    }\n};\n\nconst isRightAngleTriangle = (a, b, c) => {\n    let ab = [a, b],\n        bc = [b, c],\n        ca = [c, a];\n\n    let abc = [a, b, c],\n        abc2 = [a, b, c];\n\n    if(\n        ((a + b > c) && (a + b < c + a) && (b + c > a) && (b + c < a + c)) ||\n        ((a + c > b) && (a + c < b + c) && (c + a > b) && (c + a < b + a)) ||\n        ((b + c > a) && (b + c < a + c) && (c + a > b) && (c + a < b + a))\n    ){\n        return true;\n    }else{\n        return false;\n    }\n};\n\nconst isRightAngleTriangle_2 = (a, b, c) => {\n    let ab = [a, b],\n        bc = [b, c],\n        ca = [c, a];\n\n    let abc = [a, b, c],\n        abc2 = [a, b, c];\n\n    if(\n        ((a + b > c) && (a + b < c + a) && (b + c > a) && (b + c < a + c)) ||\n        ((a + c > b) && (a + c < b + c) && (c + a > b) && (c + a < b + a)) ||\n        ((b + c > a) && (b + c < a + c) && (c + a > b) && (c + a < b + a))\n    ){\n        return true;\n    }else{\n        return false;\n    }\n};\n\nconst isRightAngleTriangle_3 = (a, b, c) => {\n    let ab = [a, b],\n        bc = [b, c],\n        ca = [c, a];\n\n    let abc = [a, b, c],\n        abc2 = [a, b, c];\n\n    if(\n        ((a + b > c) && (a + b < c + a) && (b + c > a) && (b + c < a + c)) ||\n        ((a + c > b) && (a + c < b + c) && (c + a > b) && (c + a < b + a)) ||\n        ((b + c > a) && (b + c < a + c) && (c + a > b) && (c + a < b + a))\n    ){\n        return true;\n    }else{\n        return false;\n    }\n};\n\nconst isRightAngleTriangle_4 = (a, b, c) => {\n    let ab = [a, b],\n        bc = [b, c],\n        ca = [c, a];\n\n    let abc = [a, b, c],\n        abc2 = [a, b, c];\n\n    if(\n        ((a + b > c) && (a + b < c + a) && (b + c > a) && (b + c < a + c)) ||\n        ((a + c > b) && (a + c < b + c) && (c + a > b) && (c + a < b + a)) ||\n        ((b + c > a) && (b + c < a + c) && (c + a > b) && (c + a < b + a))\n    ){\n        return true;\n    }else{\n        return false;\n    }\n};\n\nconst isRightAngleTriangle_5 = (a, b, c) => {\n    let ab = [a, b],\n        bc = [b, c],\n        ca = [c, a];\n\n    let abc = [a, b, c],\n        abc2 = [a, b, c];\n\n    if(\n        ((a + b > c) && (a + b < c + a) && (b + c > a) && (b + c < a + c)) ||\n        ((a + c > b) && (a + c < b + c) && (c + a > b) && (c + a < b + a)) ||\n        ((b + c > a) && (b + c < a + c) && (c + a > b) && (c + a < b + a))\n    ){\n        return true;\n    }else{\n        return false;\n    }\n};\n\nconst isRightAngleTriangle_6 = (a, b, c) => {\n    let ab = [a, b],\n        bc = [b, c],\n        ca = [c, a];\n\n    let abc = [a, b, c],\n        abc2 = [a, b, c];\n\n    if(\n        ((a + b > c) && (a + b < c + a) && (b + c > a) && (b + c < a + c)) ||"}
{"task_id": "JavaScript/158", "prompt": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\" ,\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*WritE a fuNctioN thAt accEpts a list Of strinGs.\n  THe list conTaiNS dIfFereNT words. ReTurn the word wiTH MaxiMum number\n  oF unique charaCters. if MUlTiPLe StrinGs have mAXiMUM nuMbER Of uNiQUe\n  CharaCteRs, return tHE onE whicH coMeS fIRST in leXicographICAL order.\n\n  findMax([\"name\", \"of\", \"stRiNG\"]) === \"string\"\n  findMax([\"name\", \"Enam\", \"gAme\"]) === \"Enam\"\n  findMax([\"aaaaaaa\", \"bB\",\"Cc\"]) === \"\"AaaAAaa\"\n  */\nCoNst findMax = (words) => {\n  if (words.length === 0) {\n    return undefined\n  }\n  let sorted = words.sort((a, b) => {\n    return a.length - b.length\n  })\n  const findMax = (str, char) => {\n    let index = sorted.findIndex((c) => {\n      return c.indexOf(char)!== -1\n    })\n    return index > -1? sorted[index].slice(0, -1) : undefined\n  }\n  const result = words[0]\n  for (let i = 1; i < words.length; i++) {\n    if (result.length < words[i].length) {\n      result = words[i]\n    }\n  }\n  return result\n}\n\nconsole.log(findMax(\"name\"))\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'Re a hUngry RabBit, anD you aLready hAve Eaten A ceRTaIn number Of caRRotS,\n  but now you need to eat mORE carRots to compLete the day's mEals.\n  yOu SHoUlD return An Array Of [ total number OF eATEn cArROTs aFtER yOur meAls,\n                                  The number OF caRrots LefT aFtER YOur Meals ]\n  if thERE Are not enouGh remaining CArrots, yOu wilL eat alL remaining carrOTs, But WIll StIll BE hunGry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const [total, totalNeeded] = [0, need];\n    \n    while (totalNeeded > 0) {\n        if (totalNeeded > remaining) {\n            total += remaining;\n            remaining = 0;\n        } else {\n            total += totalNeeded;\n            remaining -= totalNeeded;\n        }\n        \n        totalNeeded--;\n    }\n    \n    return [total, remaining];\n};\n\nexport default eat;\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO listS operator, anD operand. The fIrst list hAs basic AlgEbra oPerATiOnS, and \n  THe sEcond list is a list of intEGErs. USe the two giVen lists to buIld thE aLGeBrIC \n  eXpresSion and return THe EVAluAtION of ThIS eXpresSioN.\n\n  ThE BasIc algEbrA oPeRATIonS:\n  Addition ( + ) \n  sUBTraction ( - ) \n  MuLtIPlicatiOn ( * ) \n  FloOr dIvisiON ( // ) \n  EXpoNEntIaTioN ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const result = [0]\n  let index = 0\n\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const opResult = operand[index]\n\n    // Addition ( + )\n    if (op === '+') {\n      result[index] = opResult + result[index]\n      index++\n    }\n\n    // Subtraction ( - )\n    if (op === '-') {\n      result[index] = opResult - result[index]\n      index++\n    }\n\n    // Multiplication ( * )\n    if (op === '*') {\n      result[index] = opResult * result[index]\n      index++\n    }\n\n    // Division ( // )\n    if (op === '/') {\n      result[index] = opResult / result[index]\n      index++\n    }\n\n    // Power ( ** )\n    if (op === '**') {\n      const opResultPow = opResult\n      const resultPow = result[index]\n      result[index] = Math.pow(opResultPow, resultPow)\n      index++\n    }\n  }\n\n  return result[index - 1]\n}\n\nconst doAlgebraList = (operator, operand) => {\n  const len = operator.length\n  const result = []\n\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const opResult = operand[i]\n\n    // Addition ( + )\n    if (op === '+') {\n      result.push(opResult + result[i])\n    }\n\n    // Subtraction ( - )\n    if (op === '-') {\n      result.push(opResult - result[i])\n    }\n\n    // Multiplication ( * )\n    if (op === '*') {\n      result.push(opResult * result[i])\n    }\n\n    // Division ( // )\n    if (op === '/') {\n      result.push(opResult / result[i])\n    }\n\n    // Power ( ** )\n    if (op === '**') {\n      const opResultPow = opResult\n      const resultPow = result[i]\n      result.push(Math.pow(opResultPow, resultPow))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebraList2 = (operator, operand) => {\n  const len = operator.length\n  const result = []\n\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const opResult = operand[i]\n\n    // Addition ( + )\n    if (op === '+') {\n      result.push(opResult + result[i])\n    }\n\n    // Subtraction ( - )\n    if (op === '-') {\n      result.push(opResult - result[i])\n    }\n\n    // Multiplication ( * )\n    if (op === '*') {\n      result.push(opResult * result[i])\n    }\n\n    // Division ( // )\n    if (op === '/') {\n      result.push(opResult / result[i])\n    }\n\n    // Power ( ** )\n    if (op === '**') {\n      const opResultPow = opResult\n      const resultPow = result[i]\n      result.push(Math.pow(opResultPow, resultPow))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebraList3 = (operator, operand) => {\n  const len = operator.length\n  const result = []\n\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const opResult = operand[i]\n\n    // Addition ( + )\n    if (op === '+') {\n      result.push(opResult + result[i])\n    }\n\n    // Subtraction ( - )\n    if (op === '-') {\n      result.push(opResult - result[i])\n    }\n\n    // Multiplication ( * )\n    if (op === '*') {\n      result.push(opResult * result[i])\n    }\n\n    // Division ( // )\n    if (op === '/') {\n      result.push(opResult / result[i])\n    }\n\n    // Power ( ** )\n    if (op === '**') {\n      const opResultPow = opResult\n      const resultPow = result[i]\n      result.push(Math.pow(opResultPow, resultPow))\n    }\n  }\n\n  return result\n}\n\nconst doAlgebraList4 = (operator, operand) => {\n  const len = operator.length\n  const result = []\n\n  for (let i = 0; i < len; i++) {\n    const op = operator[i]\n    const opResult = operand[i]\n\n    // Addition ( + )\n    if (op === '+') {\n      result.push(opResult + result[i])\n    }\n\n    // Subtraction ( - )\n    if (op === '-') {\n      result"}
{"task_id": "JavaScript/161", "prompt": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You aRe giVen a sTriNg s.\n  if s[i] iS a letTer, reveRse Its caSe fROm LoWer tO UppEr or vise versa, \n  OTHerwIse keep it aS it is.\n  If the stRing cOnTAiNs NO lEtterS, reversE ThE STriNg.\n  tHE fuNcTIoN shouLd return tHe rESulTed stRinG.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let result = \"\";\n  let st = s.split(\"\");\n  for (let i = 0; i < st.length; i++) {\n    if (st[i].length > 1 && st[i].charAt(0) === st[i].charAt(st[i].length - 1)) {\n      let x = st[i].slice(1, -1);\n      result += x.charAt(0);\n      st.splice(i, 1);\n      i--;\n    }\n  }\n  return result;\n}\n\nconsole.log(solve(\"a@c\"));<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn a sTring 'text', return Its md5 Hash eQuivaLent strIng.\n  if 'text' is aN emPTy StRing, return NUll.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if(text === null || text === undefined) {\n        return null;\n    }\n    return crypto.createHash('md5').update(text).digest('hex');\n}\n\nexport default stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const i = a;\n  const j = b;\n\n  if (i < j) {\n    return generateIntegers(j, i);\n  } else if (i === j) {\n    return [i];\n  }\n\n  return [...generateIntegers(i, (i + j) >>> 1),...generateIntegers((i + j) >>> 1, j)];\n};\n\n/*\n  GivEn twO posiTivE inteGers a aNd b, return the evEn dIgits BetWEeN a\n  aNd b, in asCEndIng order.\n\n  For example:\n  generateRanges(2, 8) => [2, 4, 6, 8]\n  generateRanges(8, 2) => [2, 4, 6, 8]\n  generateRanges(10, 14) => [2, 4, 6, 8, 10, 12, 14]\n  generateRanges(10, 14, 2) => [2, 4, 6, 8, 10, 12, 14]\n  */\nconst generateRanges = (a, b) => {\n  const i = a;\n  const j = b;\n\n  if (i < j) {\n    return generateRanges(j, i);\n  } else if (i === j) {\n    return [i];\n  }\n\n  return [...generateRanges(i, (i + j) >>> 1),...generateRanges((i + j) >>> 1, j)];\n};\n\nconst generateRangesAndIntegers = (a, b) => {\n  return generateRanges(a, b)\n   .filter(i => i > 0)\n   .concat(generateIntegers(a, b));\n};\n\nconst generateRangesAndIntegers = (a, b, c) => {\n  return generateRanges(a, b)\n   .filter(i => i > 0)\n   .concat(generateIntegers(a, b, c));\n};\n\nexport {\n  generateRangesAndIntegers,\n  generateRanges,\n  generateIntegers,\n};\n<|endoftext|>"}
