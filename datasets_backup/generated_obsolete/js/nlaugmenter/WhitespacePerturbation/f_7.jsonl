{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    return numbers.reduce((result, number) => {\n        return result || (\n            Math.abs(number - numbers[numbers.length - 2]) < threshold &&\n            Math.abs(number - numbers[numbers.length - 1]) < threshold\n        )\n    }, false)\n}\n\n// Given a matrix, the diagonal sums of which sums to a given target, return\n// the indices of the given matrix's diagonal elements that sum to the target.\nconst getDiagonalElementsSums = (matrix, target) => {\n    const diagonalElements = matrix.filter(row => row.every((element, index) => index === index))\n    return diagonalElements.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the diagonal elements of which sums to a given\n// target, return the indices of the given matrix's diagonal elements that sum\n// to the target.\nconst getDiagonalElements = (matrix, target) => {\n    const diagonalElements = matrix.filter(row => row.every((element, index) => index === index))\n    return diagonalElements.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the rows of which sums to a given target, return\n// the indices of the given matrix's rows that sum to the target.\nconst getRowsSums = (matrix, target) => {\n    const rows = matrix.filter(row => row.every((element, index) => index === index))\n    return rows.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the columns of which sums to a given target, return\n// the indices of the given matrix's columns that sum to the target.\nconst getColumnsSums = (matrix, target) => {\n    const columns = matrix.filter(row => row.every((element, index) => index === index))\n    return columns.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the diagonal elements of which sums to a given\n// target, return the indices of the given matrix's diagonal elements that sum\n// to the target.\nconst getDiagonalElementsSums = (matrix, target) => {\n    const diagonalElements = matrix.filter(row => row.every((element, index) => index === index))\n    return diagonalElements.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the rows of which sums to a given target, return\n// the indices of the given matrix's rows that sum to the target.\nconst getRowsSums = (matrix, target) => {\n    const rows = matrix.filter(row => row.every((element, index) => index === index))\n    return rows.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the columns of which sums to a given target, return\n// the indices of the given matrix's columns that sum to the target.\nconst getColumnsSums = (matrix, target) => {\n    const columns = matrix.filter(row => row.every((element, index) => index === index))\n    return columns.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the diagonal elements of which sums to a given\n// target, return the indices of the given matrix's diagonal elements that sum\n// to the target.\nconst getDiagonalElementsSums = (matrix, target) => {\n    const diagonalElements = matrix.filter(row => row.every((element, index) => index === index))\n    return diagonalElements.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the rows of which sums to a given target, return\n// the indices of the given matrix's rows that sum to the target.\nconst getRowsSums = (matrix, target) => {\n    const rows = matrix.filter(row => row.every((element, index) => index === index))\n    return rows.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n\n// Given a matrix, the sum of the columns of which sums to a given target, return\n// the indices of the given matrix's columns that sum to the target.\nconst getColumnsSums = (matrix, target) => {\n    const columns = matrix.filter(row => row.every((element, index) => index === index))\n    return columns.map(row => row.reduce((sum, element, index) => sum + element))\n   .filter(element => element === target)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    return paren_string.match(/\\(((?:\\()+|\\))*\\)/g)\n       .map( (par_string) => {\n            return par_string.replace(/\\(|\\)/g, '')\n        })\n       .map( (par_string) => {\n            return par_string.match(/\\(((?:\\()+|\\))*\\)/g)\n        })\n       .map( (par_string) => {\n            return par_string.replace(/\\(|\\)/g, '')\n        })\n       .map( (par_string) => {\n            return par_string.match(/\\(((?:\\()+|\\))*\\)/g)\n        })\n}\n\nconsole.log(separateParenGroups('( ) (( )) (( )( ))'))\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let integerPart = number.toString().split('.')[0];\n  let decimalPart = number.toString().split('.')[1];\n  let remainder = number - Math.floor(number);\n  let decimals = decimalPart.length;\n  return { integerPart, decimalPart, remainder, decimals };\n};\n\n/** Given a list of numbers, return the sum of the numbers */\nconst sum = (list) => {\n  let sum = 0;\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i];\n  }\n  return sum;\n};\n\n/** Given a list of numbers, return the largest number in the list */\nconst max = (list) => {\n  let max = list[0];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] > max) {\n      max = list[i];\n    }\n  }\n  return max;\n};\n\n/** Given a list of numbers, return the smallest number in the list */\nconst min = (list) => {\n  let min = list[0];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] < min) {\n      min = list[i];\n    }\n  }\n  return min;\n};\n\n/** Given a list of numbers, return the average of the numbers */\nconst avg = (list) => {\n  let sum = sum(list);\n  let avg = sum / list.length;\n  return avg;\n};\n\n/** Given a list of numbers, return the largest number in the list that is less than the given number */\nconst maxInRange = (list, number) => {\n  let max = list[0];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] <= number) {\n      max = list[i];\n    }\n  }\n  return max;\n};\n\n/** Given a list of numbers, return the smallest number in the list that is greater than the given number */\nconst minInRange = (list, number) => {\n  let min = list[0];\n  for (let i = 0; i < list.length; i++) {\n    if (list[i] >= number) {\n      min = list[i];\n    }\n  }\n  return min;\n};\n\n/** Given a list of numbers, return the number that is closest to the given number */\nconst closest = (list, number) => {\n  let closest = list[0];\n  let distance = Math.abs(list[0] - number);\n  for (let i = 0; i < list.length; i++) {\n    let current = Math.abs(list[i] - number);\n    if (current < distance) {\n      closest = list[i];\n      distance = current;\n    }\n  }\n  return closest;\n};\n\n/** Given a list of numbers, return the number that is closest to the given number */\nconst closestInRange = (list, number) => {\n  let closest = list[0];\n  let distance = Math.abs(list[0] - number);\n  for (let i = 0; i < list.length; i++) {\n    let current = Math.abs(list[i] - number);\n    if (current < distance) {\n      closest = list[i];\n      distance = current;\n    }\n  }\n  return closest;\n};\n\nmodule.exports = {\n  truncateNumber,\n  sum,\n  max,\n  min,\n  avg,\n  maxInRange,\n  minInRange,\n  closest,\n  closestInRange\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let sum = 0;\n  operations.forEach(x => sum += x);\n  return sum < 0;\n};\n\nexport { belowZero };\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  return numbers.reduce((a, b) => Math.abs(b - mean), 0) / sum;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Variance\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.25\n  */\nconst variance = (numbers) => {\n  const mean = mean(numbers);\n  const sum = numbers.reduce((a, b) => a + b, 0);\n  const meanSquare = sum / numbers.length;\n  return numbers.reduce((a, b) => (b - mean) * (b - mean), 0) /\n    (numbers.length - 1);\n};\n\n/*\n  For a given list of input numbers, c alcul ate Standard Deviation\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.5\n  */\nconst stdDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\nconst allStatistics = [\n  meanAbsoluteDeviation,\n  variance,\n  stdDeviation\n];\n\n/*\n  For a given list of input numbers, c alcul ate Mean, Standard Deviation and\n  Mode\n  >>> mean([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n  5.0\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n  2.5\n  >>> mode([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0, 13.0])\n  5.0\n  */\nconst mean = (numbers) => {\n  const stats = allStatistics.reduce((acc, func) => {\n    return acc + func(numbers);\n  }, 0);\n  return stats / allStatistics.length;\n};\n\nconst stdDeviation = (numbers) => {\n  const variance = variance(numbers);\n  return Math.sqrt(variance);\n};\n\nconst mode = (numbers) => {\n  const maxIndex = findMode(numbers);\n  return numbers[maxIndex];\n};\n\nconst findMode = (numbers) => {\n  let max = 0;\n  let index = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      index = i;\n    }\n  }\n  return index;\n};\n\nmodule.exports = {\n  mean,\n  stdDeviation,\n  mode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0]);\n};\n\n/*\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 4, 2, 4, 3]\n  */\nconst intersperse2 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(delimeter, numbers[0]);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4], 4)\n  [1, 4, 4, 2, 4, 3]\n  */\nconst intersperse3 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5], 4)\n  [1, 4, 4, 2, 4, 3, 5]\n  */\nconst intersperse4 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter, numbers[numbers.length - 1]);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 4, 2, 4, 3, 5, 6]\n  */\nconst intersperse5 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter, numbers[numbers.length - 1], delimeter, numbers[numbers.length - 2]);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7], 4)\n  [1, 4, 4, 2, 4, 3, 5, 6, 7]\n  */\nconst intersperse6 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter, numbers[numbers.length - 1], delimeter, numbers[numbers.length - 2], delimeter, numbers[numbers.length - 3]);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8], 4)\n  [1, 4, 4, 2, 4, 3, 5, 6, 7, 8]\n  */\nconst intersperse7 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter, numbers[numbers.length - 1], delimeter, numbers[numbers.length - 2], delimeter, numbers[numbers.length - 3], delimeter, numbers[numbers.length - 4]);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9], 4)\n  [1, 4, 4, 2, 4, 3, 5, 6, 7, 8, 9]\n  */\nconst intersperse8 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter, numbers[numbers.length - 1], delimeter, numbers[numbers.length - 2], delimeter, numbers[numbers.length - 3], delimeter, numbers[numbers.length - 4], delimeter, numbers[numbers.length - 5]);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n  [1, 4, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10]\n  */\nconst intersperse9 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter, numbers[numbers.length - 1], delimeter, numbers[numbers.length - 2], delimeter, numbers[numbers.length - 3], delimeter, numbers[numbers.length - 4], delimeter, numbers[numbers.length - 5], delimeter, numbers[numbers.length - 6]);\n};\n\n/*\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4)\n  [1, 4, 4, 2, 4, 3, 5, 6, 7, 8, 9, 10, 11]\n  */\nconst intersperse10 = (numbers, delimeter) => {\n  if(numbers.length === 0) {\n    return [];\n  }\n  const list = numbers.slice(1, -1).map(x => x);\n  return list.concat(numbers[0], delimeter, numbers[numbers.length - 1], delimeter, numbers[numbers.length - 2], delimeter, numbers[numbers.length - 3"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const array_len = paren_array.length;\n  const max_level = array_len - 1;\n  const level = 1;\n  const paren_level = 1;\n  let paren_list = [];\n  let paren_list_deep = [];\n  paren_list[0] = paren_array[0];\n  paren_list_deep[0] = paren_array[0];\n  while (level <= max_level) {\n    paren_list = [];\n    paren_list_deep = [];\n    for (let i = 0; i < array_len; i++) {\n      paren_list[i] = paren_array[i];\n      paren_list_deep[i] = paren_array[i];\n      if (paren_array[i] === ')') {\n        level--;\n        if (level === 0) {\n          break;\n        }\n      }\n      if (paren_array[i] === '(') {\n        level++;\n        paren_level++;\n      }\n      if (paren_array[i] === ')') {\n        paren_level--;\n      }\n      if (paren_level === 0) {\n        paren_list[i] = paren_array[i];\n        paren_list_deep[i] = paren_array[i];\n      }\n    }\n    paren_list.reverse();\n    paren_list_deep.reverse();\n    for (let i = 0; i < paren_list.length; i++) {\n      paren_list[i] = paren_list[i].replace(/\\(|\\)/g, '');\n    }\n    for (let i = 0; i < paren_list_deep.length; i++) {\n      paren_list_deep[i] = paren_list_deep[i].replace(/\\(|\\)/g, '');\n    }\n    paren_list = paren_list.concat(paren_list_deep);\n    if (paren_list[0] === ')') {\n      paren_list.shift();\n    }\n    paren_list.reverse();\n    paren_list_deep.reverse();\n    paren_list_deep = paren_list.concat(paren_list_deep);\n    paren_list_deep = paren_list_deep.concat(paren_list);\n    paren_list = paren_list.concat(paren_list_deep);\n  }\n  return paren_list;\n};\n\n/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const array_len = paren_array.length;\n  const max_level = array_len - 1;\n  const level = 1;\n  const paren_level = 1;\n  let paren_list = [];\n  paren_list[0] = paren_array[0];\n  while (level <= max_level) {\n    paren_list = [];\n    for (let i = 0; i < array_len; i++) {\n      paren_list[i] = paren_array[i];\n      if (paren_array[i] === ')') {\n        level--;\n        if (level === 0) {\n          break;\n        }\n      }\n      if (paren_array[i] === '(') {\n        level++;\n        paren_level++;\n      }\n      if (paren_array[i] === ')') {\n        paren_level--;\n      }\n    }\n    if (paren_level === 0) {\n      paren_list.reverse();\n      break;\n    }\n  }\n  return paren_list;\n};\n\n/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const paren_array = paren_string.split(' ');\n  const array_len = paren_array.length;\n  const max_level = array_len - 1;\n  const level = 1;\n  const paren_level = 1;\n  let paren_list = [];\n  paren_list[0] = paren_array[0];\n  while (level <= max_level) {\n    paren_list = [];\n    for (let i = 0; i < array_len; i++) {\n      paren_list[i] = paren_array[i];\n      if (paren_array[i] === ')') {\n        level--;\n        if (level === 0) {\n          break;\n        }\n      }\n      if (paren_array[i] === '(') {\n        level++;\n        paren_level++;\n      }\n      if (paren_array[i] === ')') {\n        paren_level--;\n      }\n    }\n    if (paren_level === 0) {\n      paren_list.reverse();\n      break;\n    }\n  }\n  return paren_list;\n};\n\nconst paren"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const indexOf = strings.findIndex((item) => item.indexOf(substring) === 0);\n  if (indexOf === -1) {\n    return strings;\n  }\n  return strings.slice(0, indexOf).concat(strings.slice(indexOf + 1));\n};\n\n/**\n * Return a random number between 0 and n-1\n  >>> pickRandom(3)\n  0\n  >>> pickRandom(3)\n  1\n  >>> pickRandom(3)\n  2\n  */\nconst pickRandom = (n) => {\n  return Math.floor(Math.random() * n);\n};\n\n/**\n * Return a random number between min and max\n  >>> randomIntInRange(5, 10)\n  6\n  >>> randomIntInRange(5, 10)\n  7\n  >>> randomIntInRange(5, 10)\n  8\n  */\nconst randomIntInRange = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n};\n\n/**\n * Return a random number between min and max\n  >>> randomFloatInRange(5.5, 10.5)\n  7.6\n  >>> randomFloatInRange(5.5, 10.5)\n  7.7\n  >>> randomFloatInRange(5.5, 10.5)\n  7.8\n  */\nconst randomFloatInRange = (min, max) => {\n  return Math.random() * (max - min) + min;\n};\n\n/**\n * Return a random number between min and max\n  >>> randomBool()\n  false\n  >>> randomBool()\n  true\n  */\nconst randomBool = () => {\n  return Math.random() > 0.5;\n};\n\n/**\n * Return a random string\n  >>> randomString(5)\n  aB5\n  >>> randomString(5)\n  aB6\n  >>> randomString(5)\n  aB7\n  */\nconst randomString = (length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += String.fromCharCode(65 + Math.floor(Math.random() * 26));\n  }\n  return str;\n};\n\n/**\n * Return a random string\n  >>> randomEmail(5)\n  kHg9v3k6Yi5j5sL0BxYt0r0f\n  >>> randomEmail(5)\n  kHg9v3k6Yi5j5sL0BxYt0r1f\n  >>> randomEmail(5)\n  kHg9v3k6Yi5j5sL0BxYt0r2f\n  */\nconst randomEmail = (length) => {\n  let str = '';\n  for (let i = 0; i < length; i++) {\n    str += String.fromCharCode(97 + Math.floor(Math.random() * 26));\n  }\n  return str;\n};\n\nexport default {\n  filterBySubstring,\n  pickRandom,\n  randomIntInRange,\n  randomFloatInRange,\n  randomBool,\n  randomString,\n  randomEmail,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let { sum, product } = sumProduct(numbers, 1, 0)\n  return [sum, product]\n}\n\nconst sumProduct = (numbers, i, product) => {\n  if (!numbers || numbers.length === 0) {\n    return [0, 1]\n  }\n\n  let sum = numbers[i]\n\n  if (i === numbers.length - 1) {\n    return [sum, product]\n  }\n\n  for (let j = i + 1; j < numbers.length; j++) {\n    sum += numbers[j]\n    product *= numbers[j]\n  }\n\n  return sumProduct(numbers, i + 1, product * sum)\n}\n\nconsole.log(sumProduct([1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  const maxIdx = 0;\n  let lastMax = max;\n  let lastMaxIndex = maxIndex;\n  let lastMaxIdx = maxIdx;\n  for (let i = 1; i < numbers.length; i++) {\n    const number = numbers[i];\n    if (number > lastMax) {\n      lastMax = number;\n      lastMaxIndex = i;\n      lastMaxIdx = i;\n    } else if (number === lastMax) {\n      lastMaxIndex = i;\n    }\n  }\n  return [lastMax, lastMaxIndex, lastMaxIdx];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n    let rev = string.split('').reverse ().join('');\n    return string + rev;\n};\n\n// export {makePalindrome};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const a_len = a.length\n  const b_len = b.length\n  const result = []\n  for (let i = 0; i < a_len; i++) {\n    result.push(a[i] ^ b[i])\n  }\n  return result.join('')\n}\n\n/*\n  Given two string a and b, return the difference of a and b as string.\n  >>> stringDiff('abcdefg', 'abcd')\n  'efg'\n  >>> stringDiff('abcdefg', 'abcefg')\n  'abcdefg'\n  */\nconst stringDiff = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  const result = []\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i])\n    }\n  }\n  return result.join('')\n}\n\n/*\n  Given two strings a and b, return the common elements in a and b as array.\n  >>> stringDiff('abcdefg', 'abcd')\n  ['f']\n  >>> stringDiff('abcdefg', 'abcefg')\n  ['e', 'f']\n  */\nconst stringCommon = (a, b) => {\n  const a_len = a.length\n  const b_len = b.length\n  const result = []\n  for (let i = 0; i < a_len; i++) {\n    if (a[i] === b[i]) {\n      result.push(a[i])\n    }\n  }\n  return result\n}\n\n/*\n  Given two strings a and b, return the number of common characters.\n  >>> stringCommon('abcdefg', 'abcd')\n  1\n  >>> stringCommon('abcdefg', 'abcefg')\n  2\n  */\nconst stringCommonCount = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given two strings a and b, return the number of strings that are substrings of a.\n  >>> stringCommon('abcdefg', 'abcd')\n  1\n  >>> stringCommon('abcdefg', 'abcefg')\n  2\n  >>> stringCommon('abcdefg', 'abcdefg')\n  3\n  */\nconst stringCommonCountSubstr = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given two strings a and b, return the number of strings that are superstrings of b.\n  >>> stringCommon('abcdefg', 'abcd')\n  1\n  >>> stringCommon('abcdefg', 'abcefg')\n  2\n  >>> stringCommon('abcdefg', 'abcdefg')\n  3\n  */\nconst stringCommonCountSupstr = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given two strings a and b, return the number of strings that are permutations of a.\n  >>> stringCommon('abcdefg', 'abcd')\n  1\n  >>> stringCommon('abcdefg', 'abcefg')\n  2\n  >>> stringCommon('abcdefg', 'abcdefg')\n  3\n  */\nconst stringCommonCountPermutation = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given two strings a and b, return the number of strings that are permutations of b.\n  >>> stringCommon('abcdefg', 'abcd')\n  1\n  >>> stringCommon('abcdefg', 'abcefg')\n  2\n  >>> stringCommon('abcdefg', 'abcdefg')\n  3\n  */\nconst stringCommonCountPermutationSupstr = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given two strings a and b, return the number of strings that are permutations of a and b.\n  >>> stringCommon('abcdefg', 'abcd')\n  1\n  >>> stringCommon('abcdefg', 'abcefg')\n  2\n  >>> stringCommon('abcdefg', 'abcdefg')\n  3\n  */\nconst stringCommonCountPermutationSupstrAndSubstr = (a, b) => {\n  const len = Math.min(a.length, b.length)\n  let count = 0\n  for (let i = 0; i < len; i++) {\n    if (a[i] === b[i]) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given two strings a and b, return the number of strings that are common prefixes of a and b.\n  >>> stringCommon('abcdefg', 'abcd')\n  1\n  >>> stringCommon('abcdefg', 'abcefg')\n  2\n  >>> stringCommon('abcdefg', 'abcdefg')\n  3\n  */\nconst stringCommonCountPrefix = (a, b) =>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i]\n    }\n  }\n  return longest\n}\n\n/*\n  Find the longest common prefix of a list of strings. Return the prefix or null if\n  the list is empty.\n  >>> longestCommonPrefix(['a', 'b', 'c'])\n  'a'\n  >>> longestCommonPrefix(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longestCommonPrefix([])\n  null\n  */\nconst longestCommonPrefix = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null\n  }\n  const longest = strings[0]\n  for (let i = 1; i < strings.length; i++) {\n    const prefix = strings[i].slice(0, longest.length)\n    if (prefix!== longest) {\n      return prefix\n    }\n  }\n  return longest\n}\n\n/*\n  Given two lists, return the intersection of the lists.\n  >>> intersect(['a', 'b', 'c'], ['a', 'b'])\n  ['a', 'b']\n  >>> intersect([], [])\n  []\n  >>> intersect([], [1])\n  []\n  >>> intersect([1], [2])\n  []\n  >>> intersect([1], [1])\n  [1]\n  >>> intersect([1, 2], [2, 3])\n  [2]\n  */\nconst intersect = (a, b) => {\n  if (!a ||!b) {\n    return []\n  }\n  return a.filter((x) => b.includes(x))\n}\n\n/*\n  Given a list of words, return a dictionary where the keys are the words and the\n  values are the number of times that word appears in the list.\n  >>> words = ['a', 'b', 'c', 'b', 'a']\n  >>> words.map((w) => ({w, times: 1}))\n  [{w: 'a', times: 1}, {w: 'b', times: 2}, {w: 'c', times: 1}]\n  >>> words.map((w) => ({w: w, times: 1}))\n  [{w: 'a', times: 1}, {w: 'b', times: 2}, {w: 'c', times: 1}]\n  >>> words.map((w) => ({w: w, times: 2}))\n  [{w: 'a', times: 2}, {w: 'b', times: 4}, {w: 'c', times: 2}]\n  */\nconst wordCount = (words) => {\n  return words.reduce((dictionary, word) => {\n    dictionary[word] = dictionary[word] || 0\n    dictionary[word]++\n    return dictionary\n  }, {})\n}\n\n/*\n  Given a list of words, return a dictionary where the keys are the words and the\n  values are the number of times that word appears in the list.\n  >>> words = ['a', 'b', 'c', 'b', 'a']\n  >>> words.map((w) => ({w, times: 1}))\n  [{w: 'a', times: 1}, {w: 'b', times: 2}, {w: 'c', times: 1}]\n  >>> words.map((w) => ({w: w, times: 1}))\n  [{w: 'a', times: 1}, {w: 'b', times: 2}, {w: 'c', times: 1}]\n  >>> words.map((w) => ({w: w, times: 2}))\n  [{w: 'a', times: 2}, {w: 'b', times: 4}, {w: 'c', times: 2}]\n  */\nconst wordCount2 = (words) => {\n  return words.reduce((dictionary, word) => {\n    if (!dictionary[word]) {\n      dictionary[word] = 1\n    } else {\n      dictionary[word]++\n    }\n    return dictionary\n  }, {})\n}\n\n/*\n  Given a list of words, return a list of the words that do not appear in the list.\n  >>> words = ['a', 'b', 'c', 'b', 'a']\n  >>> words.filter((w) => w!== 'b')\n  ['c', 'a']\n  >>> words.filter((w) => w!== 'a')\n  ['b', 'c']\n  >>> words.filter((w) => w!== 'a')\n  ['b', 'c']\n  */\nconst remove = (words, element) => {\n  return words.filter((w) => w!== element)\n}\n\n/*\n  Given a list of words, return the words that do not appear in the list.\n  >>> words = ['a', 'b', 'c', 'b', 'a']\n  >>> words.filter((w) => w!== 'b')\n  ['c', 'a']\n  >>> words.filter((w) => w!== 'a')\n  ['b', 'c']\n  >>> words.filter((w) => w!== 'a')\n  ['b', 'c']\n  */\nconst remove2 = (words, element) => {\n  return words.filter((w) => w!== element)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while(b) {\n    const remainder = a % b\n    a = b\n    b = remainder\n  }\n  return a\n}\n\n/* Return a least common multiple oftwo i ntegers a and b\n  >>> leastCommonMultiple(3, 5)\n  15\n  >>> leastCommonMultiple(25, 15)\n  50\n  */\nconst leastCommonMultiple = (a, b) => {\n  return a * b / greatestCommonDivisor(a, b)\n}\n\n/* Return the maximum number of consecutive equal values\n  >>> maximumConsecutiveEqual(3, 5, 4, 6)\n  2\n  >>> maximumConsecutiveEqual(25, 15, 2, 3)\n  2\n  >>> maximumConsecutiveEqual(25, 15, 25, 15)\n  1\n  >>> maximumConsecutiveEqual(25, 15, 25, 20)\n  1\n  */\nconst maximumConsecutiveEqual = (a, b, c) => {\n  if(a === b) return 1\n  if(a === c) return 2\n  if(b === c) return 1\n  if(a === b && b === c) return 2\n  return 3\n}\n\n/* Return the difference between the greatest and the least\n  >>> greatestDifference(3, 5)\n  2\n  >>> greatestDifference(25, 15)\n  5\n  >>> greatestDifference(25, 20)\n  5\n  >>> greatestDifference(25, 25)\n  0\n  */\nconst greatestDifference = (a, b) => {\n  return Math.abs(b - a)\n}\n\n/* Return the sum of the i ntegers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  45\n  >>> sum(25, 20)\n  45\n  >>> sum(25, 25)\n  45\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/* Return the difference between the greatest and the least\n  >>> difference(3, 5)\n  2\n  >>> difference(25, 15)\n  5\n  >>> difference(25, 20)\n  5\n  >>> difference(25, 25)\n  0\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/* Return the product of the i ntegers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  225\n  >>> product(25, 20)\n  25000\n  >>> product(25, 25)\n  25000000\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/* Return the quotient of the i ntegers a and b\n  >>> quotient(3, 5)\n  2\n  >>> quotient(25, 15)\n  5\n  >>> quotient(25, 20)\n  5\n  >>> quotient(25, 25)\n  1\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/* Return the sum of the i ntegers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  45\n  >>> sum(25, 20)\n  45\n  >>> sum(25, 25)\n  45\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/* Return the difference between the greatest and the least\n  >>> difference(3, 5)\n  2\n  >>> difference(25, 15)\n  5\n  >>> difference(25, 20)\n  5\n  >>> difference(25, 25)\n  0\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/* Return the product of the i ntegers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  225\n  >>> product(25, 20)\n  25000\n  >>> product(25, 25)\n  25000000\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/* Return the quotient of the i ntegers a and b\n  >>> quotient(3, 5)\n  2\n  >>> quotient(25, 15)\n  5\n  >>> quotient(25, 20)\n  5\n  >>> quotient(25, 25)\n  1\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/* Return the sum of the i ntegers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  45\n  >>> sum(25, 20)\n  45\n  >>> sum(25, 25)\n  45\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/* Return the difference between the greatest and the least\n  >>> difference(3, 5)\n  2\n  >>> difference(25, 15)\n  5\n  >>> difference(25, 20)\n  5\n  >>> difference(25, 25)\n  0\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/* Return the product of the i ntegers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  225\n  >>> product(25, 20)\n  25000\n  >>> product(25, 25)\n  25000000\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/* Return the quotient of the i ntegers a and b\n  >>> quotient(3, 5)\n  2\n  >>> quotient(25, 15)\n  5\n  >>> quotient(25, 20)\n  5\n  >>> quotient(25, 25)\n  1\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/* Return the sum of the i ntegers a and b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  45\n  >>> sum(25, 20)\n  45\n  >>> sum(25"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const len = string.length\n  const results = []\n  for (let i = 0; i <= len; i++) {\n    const prefix = string.substr(0, i)\n    results.push(prefix)\n  }\n  return results\n}\n\nexport default allPrefixes\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result +='' + i;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let length = string.length;\n  let count = 1;\n  for (let i = 0; i < length; i++) {\n    let char = string[i];\n    count = count + (char === string[i].toUpperCase()? 1 : 0) + (char === string[i].toLowerCase()? 1 : 0);\n  }\n  return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let beats = [];\n  let current_beat = 0;\n  let current_note = '';\n  let current_note_index = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      current_note += 'o';\n      if (current_note.length === 1) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 3) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 5) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      }\n    } else if (music_string[i] === 'o|') {\n      current_note += 'o|';\n      if (current_note.length === 1) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 3) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 5) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      }\n    } else if (music_string[i] === '.') {\n      current_note += '.';\n      if (current_note.length === 1) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 3) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 5) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      }\n    } else if (music_string[i] === '|') {\n      current_note += '|';\n      if (current_note.length === 1) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 3) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      } else if (current_note.length === 5) {\n        beats.push(current_beat);\n        current_beat = 0;\n        current_note = '';\n      }\n    }\n  }\n  beats.push(current_beat);\n  return beats;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let counter = 0;\n  let substrCount = 0;\n  let i = 0;\n  while (i < string.length) {\n    substrCount = 0;\n    let j = 0;\n    while (j < substring.length) {\n      if (string[i + j] === substring[j]) {\n        substrCount++;\n        j++;\n        while (j < substring.length && string[i + j] === substring[j]) {\n          j++;\n        }\n      }\n    }\n    if (substrCount > counter) {\n      counter = substrCount;\n    }\n    i++;\n  }\n  return counter;\n};\n\n/*\n  Let's test the above function.\n  */\nconst test = howManyTimes('aaaaaa', 'aaa');\n\nif (test === 3) {\n  console.log('PASS');\n} else {\n  console.log('FAIL');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    let sortedNumbers = [...numbers].sort();\n    return sortedNumbers.join(\" \");\n};\n\nconsole.log(sortNumbers(\"three one five\"));\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closest = numbers[0];\n  let secondClosest = numbers[0];\n  let n = numbers.length;\n  for (let i = 1; i < n; i++) {\n    if (Math.abs(numbers[i] - closest) < Math.abs(numbers[i] - secondClosest)) {\n      secondClosest = closest;\n      closest = numbers[i];\n    } else if (Math.abs(numbers[i] - closest) > Math.abs(numbers[i] - secondClosest)) {\n      secondClosest = numbers[i];\n    }\n  }\n  return [closest, secondClosest];\n};\n\nexport default findClosestElements;<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[numbers.length - 1];\n  const delta = largest - smallest;\n  const multiplier = 1 / delta;\n  return numbers.map(x => x * multiplier);\n};\n\nconst scaleToUnit = (numbers) => {\n  const smallest = numbers[0];\n  const largest = numbers[numbers.length - 1];\n  const delta = largest - smallest;\n  const multiplier = 1 / delta;\n  return numbers.map(x => x * multiplier);\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> scaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale = (numbers, multiplier) => {\n  const smallest = numbers[0];\n  const largest = numbers[numbers.length - 1];\n  const delta = largest - smallest;\n  return numbers.map(x => x * multiplier);\n};\n\nconst scale = (numbers, multiplier) => {\n  const smallest = numbers[0];\n  const largest = numbers[numbers.length - 1];\n  const delta = largest - smallest;\n  return numbers.map(x => x * multiplier);\n};\n\nconst transform = (numbers, scaleFunction) => {\n  const smallest = numbers[0];\n  const largest = numbers[numbers.length - 1];\n  const delta = largest - smallest;\n  return numbers.map(x => scaleFunction(x, delta));\n};\n\nconst isPowerOfTwo = (n) => {\n  return (n & (n - 1)) === 0;\n};\n\nconst isOdd = (n) => {\n  return n % 2 === 1;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n\nconst isPowerOfFour = (n) => {\n  return n >= 2 && n <= 4;\n};\n\nconst isPowerOfSix = (n) => {\n  return n >= 2 && n <= 6;\n};\n\nconst isPowerOfTen = (n) => {\n  return n >= 2 && n <= 10;\n};\n\nconst isPowerOfTwelve = (n) => {\n  return n >= 2 && n <= 12;\n};\n\nconst isPowerOfTwenty = (n) => {\n  return n >= 2 && n <= 20;\n};\n\nconst isPowerOfThirty = (n) => {\n  return n >= 2 && n <= 30;\n};\n\nconst isPowerOfSixty = (n) => {\n  return n >= 2 && n <= 60;\n};\n\nconst isPowerOfSeventy = (n) => {\n  return n >= 2 && n <= 70;\n};\n\nconst isPowerOfEighty = (n) => {\n  return n >= 2 && n <= 80;\n};\n\nconst isPowerOfNovehundred = (n) => {\n  return n >= 2 && n <= 100;\n};\n\nconst isPowerOfHundrethousand = (n) => {\n  return n >= 2 && n <= 1000;\n};\n\nconst isPowerOfTenthousand = (n) => {\n  return n >= 2 && n <= 10000;\n};\n\nconst isPowerOfTwentiethousand = (n) => {\n  return n >= 2 && n <= 20000;\n};\n\nconst isPowerOfTwentythousand = (n) => {\n  return n >= 2 && n <= 200000;\n};\n\nconst isPowerOfOneHundredthousand = (n) => {\n  return n >= 2 && n <= 100000;\n};\n\nconst isPowerOfOneThousand = (n) => {\n  return n >= 2 && n <= 1000;\n};\n\nconst isPowerOfTwoThousand = (n) => {\n  return n >= 2 && n <= 2000;\n};\n\nconst isPowerOfThreeThousand = (n) => {\n  return n >= 2 && n <= 3000;\n};\n\nconst isPowerOfFiftiethousand = (n) => {\n  return n >= 2 && n <= 50000;\n};\n\nconst isPowerOfTensThousand = (n) => {\n  return n >= 2 && n <= 100000;\n};\n\nconst isPowerOfHundredThousand = (n) => {\n  return n >= 2 && n <= 1000000;\n};\n\nconst isPowerOfOneMillon = (n) => {\n  return n >= 2 && n <= 10000000;\n};\n\nconst isPowerOfTenMillon = (n) => {\n  return n >= 2 && n <= 100000000;\n};\n\nconst isPowerOfHundredMillon = (n) => {\n  return n >= 2 && n <= 1000000000;\n};\n\nconst isPowerOfOneMillion = (n) => {\n  return n >= 2 && n <= 1000000000;\n};\n\nconst isPowerOfTenMillion = (n) => {\n  return n >= 2 && n <= 1000000000000;\n};\n\nconst isPowerOfHundredMillion = (n) => {\n  return n >= 2 && n <= 1000000000000000;\n};\n\nconst isPowerOfOneBillion = (n) => {\n  return n >= 2 && n <= 100000000000000000;\n};\n\nconst isPowerOfTenBillion = (n) => {\n  return n >= 2 && n <= 1000000000000000000;\n};\n\nconst isPowerOfHundredBillion = (n) => {\n  return n >= 2 && n <= 1000000000000000000000;\n};\n\nconst isPowerOfOneTrillion = (n) => {\n  return n >= 2 && n <= 10000000000000000000000;\n};\n\nconst isPowerOfTenTrillion = (n) => {\n  return n >= 2 && n <= 100000000000000000000000;\n};\n\nconst isPowerOfHundredTrillion = (n) => {\n  return"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const isInteger = (value) => {\n    return typeof value === 'number' &&\n      isFinite(value) &&\n      Math.floor(value) === value;\n  };\n\n  return values.filter((value) => {\n    return isInteger(value);\n  });\n};\n\nmodule.exports = {\n  filterIntegers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let length = 0;\n  for (let char of string) {\n    if (char.charCodeAt(0) >= 0xD800 && char.charCodeAt(0) <= 0xDFFF) {\n      length += 2;\n    } else {\n      length++;\n    }\n  }\n  return length;\n};\n\n/* Trim whitespace from beginning and end of a string\n  >>> trim('')\n  ''\n  >>> trim('  abc')\n  'abc'\n  >>> trim('abc ')\n  'abc'\n  >>> trim('  abc ')\n  'abc'\n  */\nconst trim = (string) => {\n  let first = 0,\n      last = strlen(string) - 1;\n  while (first <= last && string[first].match(/\\s/)) {\n    first++;\n  }\n  while (first <= last && string[last].match(/\\s/)) {\n    last--;\n  }\n  return string.slice(first, last + 1);\n};\n\n/* Convert a string to lowercase\n  >>> tolower('ABC')\n  'abc'\n  >>> tolower(' aBC ')\n  'abc'\n  */\nconst tolower = (string) => string.toLowerCase();\n\n/* Convert a string to uppercase\n  >>> toupper('abc')\n  'ABC'\n  >>> toupper(' aBC ')\n  'ABC'\n  */\nconst toupper = (string) => string.toUpperCase();\n\n/* Capitalize first letter of a string\n  >>> capitalize('abc')\n  'Abc'\n  >>> capitalize(' abc ')\n  'Abc'\n  */\nconst capitalize = (string) => {\n  let first = string.charAt(0).toUpperCase();\n  return first + string.slice(1);\n};\n\n/* Return a string with all characters converted to lowercase\n  >>> tolower('')\n  ''\n  >>> tolower('ABC')\n  'abc'\n  >>> tolower(' abc ')\n  'abc'\n  */\nconst tolower_str = (string) => {\n  let result = '';\n  for (let char of string) {\n    result += char.toLowerCase();\n  }\n  return result;\n};\n\n/* Return a string with all characters converted to uppercase\n  >>> toupper('')\n  ''\n  >>> toupper('abc')\n  'ABC'\n  >>> toupper(' abc ')\n  'ABC'\n  */\nconst toupper_str = (string) => {\n  let result = '';\n  for (let char of string) {\n    result += char.toUpperCase();\n  }\n  return result;\n};\n\n/* Return a string with first character capitalized\n  >>> capitalize('')\n  ''\n  >>> capitalize('abc')\n  'Abc'\n  >>> capitalize(' abc ')\n  'Abc'\n  */\nconst capitalize_str = (string) => {\n  let result = '';\n  if (string.length > 0) {\n    result += string.charAt(0).toUpperCase();\n    result += string.slice(1);\n  }\n  return result;\n};\n\n/* Return a string with the first character lowercased\n  >>> tolower('')\n  ''\n  >>> tolower('ABC')\n  'abc'\n  >>> tolower(' abc ')\n  'abc'\n  */\nconst tolower_str2 = (string) => {\n  let result = '';\n  if (string.length > 0) {\n    result += string.charAt(0).toLowerCase();\n    result += string.slice(1);\n  }\n  return result;\n};\n\n/* Return a string with the first character capitalized\n  >>> capitalize('')\n  ''\n  >>> capitalize('ABC')\n  'Abc'\n  >>> capitalize(' abc ')\n  'Abc'\n  */\nconst capitalize_str2 = (string) => {\n  let result = '';\n  if (string.length > 0) {\n    result += string.charAt(0).toUpperCase();\n    result += string.slice(1);\n  }\n  return result;\n};\n\n/* Return a string with the first character capitalized\n  >>> capitalize_str2('')\n  ''\n  >>> capitalize_str2('abc')\n  'Abc'\n  >>> capitalize_str2(' abc ')\n  'Abc'\n  */\nconst capitalize_str3 = (string) => {\n  let result = '';\n  if (string.length > 0) {\n    result += string.charAt(0).toUpperCase();\n    result += string.slice(1);\n  }\n  return result;\n};\n\n/* Return a string with all characters in upper case\n  >>> toupper('')\n  ''\n  >>> toupper('ABC')\n  'ABC'\n  >>> toupper(' abc ')\n  'ABC'\n  */\nconst toupper_str3 = (string) => {\n  let result = '';\n  for (let char of string) {\n    result += char.toUpperCase();\n  }\n  return result;\n};\n\n/* Return a string with all characters in lower case\n  >>> tolower('')\n  ''\n  >>> tolower('ABC')\n  'abc'\n  >>> tolower(' abc ')\n  'abc'\n  */\nconst tolower_str3 = (string) => {\n  let result = '';\n  for (let char of string) {\n    result += char.toLowerCase();\n  }\n  return result;\n};\n\n/* Return a string with first character capitalized and the rest lowercased\n  >>> capitalize_str3('')\n  ''\n  >>> capitalize_str3('ABC')\n  'Abc'\n  >>> capitalize_str3(' abc ')\n  'Abc'\n  */\nconst capitalize_str4 = (string) => {\n  let result = '';\n  if (string.length > 0) {\n    result += string.charAt(0).toUpperCase();\n    result += string.slice(1).toLowerCase();\n  }\n  return result;\n};\n\n/* Return a string with first character capitalized and the rest capitalized\n  "}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let i = 2\n  let num = n\n  while (num % i === 0) {\n    num = num / i\n    i = i + 1\n  }\n  return num\n}\n\nconst largestDivisor2 = (n) => {\n  let a = largestDivisor(n)\n  let b = largestDivisor(n)\n  return Math.min(a, b)\n}\n\n// const largestDivisor2 = (n) => {\n//   let a = largestDivisor(n)\n//   let b = largestDivisor(n)\n//   return Math.max(a, b)\n// }\n\nconsole.log(largestDivisor(15))\nconsole.log(largestDivisor2(15))\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    if (n <= 1) {\n        return []\n    }\n    let factors = []\n    for (let i = 2; i < n; i++) {\n        while (n % i === 0) {\n            factors.push(i)\n            n = n / i\n        }\n    }\n    return factors\n}\n\nconst isPrime = (n) => {\n    let count = 2\n    while (count < n) {\n        if (n % count === 0) {\n            return false\n        }\n        count++\n    }\n    return true\n}\n\nconst isPrimeFactor = (n, factors) => {\n    return factors.indexOf(n) > -1\n}\n\nconst isPrimeFactor2 = (n, factors) => {\n    let i = 0\n    while (i < factors.length) {\n        if (n % factors[i] === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst numberOfFactor = (n, factors) => {\n    return factors.reduce((a, b) => a + b)\n}\n\nconst isPrimeFactor3 = (n, factors) => {\n    let i = 0\n    while (i < factors.length) {\n        if (n % factors[i] === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isPrimeFactor4 = (n, factors) => {\n    let i = 0\n    while (i < factors.length) {\n        if (n % factors[i] === 0) {\n            return false\n        }\n        if (n % factors[i] === 1) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst factorsOf = (n) => {\n    let factors = []\n    for (let i = 2; i < n; i++) {\n        while (n % i === 0) {\n            factors.push(i)\n            n = n / i\n        }\n    }\n    return factors\n}\n\nconst isFactorOf = (n, factors) => {\n    return factors.indexOf(n) > -1\n}\n\nconst isFactorOf2 = (n, factors) => {\n    let i = 0\n    while (i < factors.length) {\n        if (n % factors[i] === 0) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isFactorOf3 = (n, factors) => {\n    let i = 0\n    while (i < factors.length) {\n        if (n % factors[i] === 0) {\n            return false\n        }\n        if (n % factors[i] === 1) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst isFactorOf4 = (n, factors) => {\n    let i = 0\n    while (i < factors.length) {\n        if (n % factors[i] === 0) {\n            return false\n        }\n        if (n % factors[i] === 1) {\n            return false\n        }\n        if (n % factors[i] === 2) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nmodule.exports = {\n    factorize,\n    isPrime,\n    isPrimeFactor,\n    isPrimeFactor2,\n    isPrimeFactor3,\n    isPrimeFactor4,\n    numberOfFactor,\n    isFactorOf,\n    isFactorOf2,\n    isFactorOf3,\n    isFactorOf4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  return numbers.filter((v, i, a) => {\n    return a.indexOf(v) === i;\n  });\n};\n\n/*\n  From a list of strings, remove duplicates.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([\"one\", \"two\", \"two\", \"one\", \"two\"])\n  [\"one\", \"two\"]\n  */\nconst removeDuplicatesInArray = (strings) => {\n  return removeDuplicates(strings.map(str => str.toLowerCase()));\n};\n\n/*\n  Take a string and a number, and return the number of times the number\n  occurs in the string.\n  >>> countOccurrences(\"a\", 2)\n  1\n  >>> countOccurrences(\"aa\", 2)\n  1\n  >>> countOccurrences(\"aa\", 1)\n  1\n  >>> countOccurrences(\"aab\", 2)\n  2\n  >>> countOccurrences(\"abc\", \"a\")\n  0\n  >>> countOccurrences(\"\", \"a\")\n  0\n  >>> countOccurrences(\"\", \"\")\n  1\n  >>> countOccurrences(\"aaa\", \"a\")\n  2\n  >>> countOccurrences(\"aaa\", \"b\")\n  0\n  >>> countOccurrences(\"aaa\", \"\")\n  0\n  */\nconst countOccurrences = (string, number) => {\n  let result = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === number) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Take a string, and a number, and return the string with the number\n  removed.\n  >>> removeNumber(\"a\", 2)\n  'a'\n  >>> removeNumber(\"aa\", 2)\n  'aa'\n  >>> removeNumber(\"aa\", 1)\n  'aa'\n  >>> removeNumber(\"aab\", 2)\n  'aab'\n  >>> removeNumber(\"abc\", \"a\")\n  'c'\n  >>> removeNumber(\"\", \"a\")\n  ''\n  >>> removeNumber(\"\", \"\")\n  ''\n  >>> removeNumber(\"aaa\", \"a\")\n  'aaa'\n  >>> removeNumber(\"aaa\", \"b\")\n  'aaa'\n  >>> removeNumber(\"aaa\", \"\")\n  'aaa'\n  */\nconst removeNumber = (string, number) => {\n  return string.slice(0, -countOccurrences(string, number));\n};\n\n/*\n  Take a string, and a number, and return the string with the number\n  replaced.\n  >>> replaceNumber(\"a\", 2, \"aa\")\n  'aa'\n  >>> replaceNumber(\"aa\", 2, \"a\")\n  'aa'\n  >>> replaceNumber(\"aa\", 1, \"a\")\n  'aa'\n  >>> replaceNumber(\"aab\", 2, \"b\")\n  'aab'\n  >>> replaceNumber(\"abc\", \"a\", \"bb\")\n  'bbc'\n  >>> replaceNumber(\"\", \"a\", \"\")\n  ''\n  >>> replaceNumber(\"\", \"\", \"\")\n  ''\n  >>> replaceNumber(\"aaa\", \"a\", \"bbb\")\n  'bbbaaa'\n  >>> replaceNumber(\"aaa\", \"b\", \"\")\n  'aaa'\n  */\nconst replaceNumber = (string, number, newNumber) => {\n  return string.replace(new RegExp(`[${number}]`, \"g\"), newNumber);\n};\n\n/*\n  Take a string, and a list of strings, and return the string with the\n  list of strings removed.\n  >>> removeWords(\"aa bb cc\", [\"aa\", \"bb\"])\n  'cc'\n  >>> removeWords(\"aa bb cc\", [\"aa\", \"bb\", \"cc\"])\n  ''\n  >>> removeWords(\"aa bb cc\", [\"bb\"])\n  'aa cc'\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\"])\n  'aa'\n  >>> removeWords(\"aa bb cc\", [\"aa\", \"cc\"])\n  'bb'\n  >>> removeWords(\"aa bb cc\", [\"cc\"])\n  'aa bb'\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\"])\n  ''\n  >>> removeWords(\"aa bb cc\", [\"cc\", \"aa\"])\n  'bb'\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"aa\"])\n  'cc'\n  >>> removeWords(\"aa bb cc\", [\"aa\", \"bb\", \"cc\"])\n  ''\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\", \"aa\"])\n  'cc'\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\", \"aa\", \"bb\", \"cc\"])\n  ''\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\", \"aa\", \"bb\", \"cc\"])\n  'cc'\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\", \"aa\", \"bb\", \"cc\", \"aa\", \"bb\", \"cc\"])\n  ''\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\", \"aa\", \"bb\", \"cc\", \"aa\", \"bb\", \"cc\", \"aa\"])\n  ''\n  >>> removeWords(\"aa bb cc\", [\"bb\", \"cc\", \"aa\", \"bb\", \"cc\", \"aa\", \"bb\", \"cc\", \"aa\", \"bb\", \"cc\"])\n  ''\n  */\nconst removeWords = (string, words) => {\n  let result = string;\n  words.forEach(word => {\n    result = result.replace(new RegExp(`[${word}]`, \"g\"), \"\");\n  });\n  return result;\n};\n\n/*\n  Take a string, and a list of strings, and return the string with the\n  list of strings added.\n  >>> addWords(\"aa bb cc\", [\"aa\", \"bb\"])\n  'aa bb cc'\n  >>> addWords(\"aa bb cc\", [\"aa\", \"bb\", \"cc\"])\n  'aa bb cc'\n  >>> addWords(\"aa"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    return string.replace(/\\w\\S*/g, c => {\n        return c.toUpperCase();\n    });\n};\n\nmodule.exports = flipCase;<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let buffer = ''\n  strings.forEach((s) => {\n    buffer += s\n  })\n  return buffer\n}\n\nexport default concatenate\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if(!strings ||!strings.length)\n    return [];\n\n  const newStrings = [];\n\n  strings.forEach((s) => {\n    if(s.startsWith(prefix))\n      newStrings.push(s);\n  });\n\n  return newStrings;\n}\n\n\n/* Filter an input list of strings to ones that don't start with a given prefix.\n  >>> filterByPrefix([], 'b')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filterByPrefixNo = (strings, prefix) => {\n  if(!strings ||!strings.length)\n    return [];\n\n  const newStrings = [];\n\n  strings.forEach((s) => {\n    if(!s.startsWith(prefix))\n      newStrings.push(s);\n  });\n\n  return newStrings;\n}\n\n\n/* Return a list of strings that are all the same, but are not the same as the\n  first element.\n  >>> [uniqueStrings([1, 2, 1, 3, 4])]\n  ['2', '3', '4']\n  >>> [uniqueStrings([1, 2, 1, 3, 4, 5])]\n  []\n  */\nconst uniqueStrings = (strings) => {\n  const unique = [];\n\n  strings.forEach((s) => {\n    if(unique.indexOf(s) === -1)\n      unique.push(s);\n  });\n\n  return unique;\n}\n\n\n/* Return a list of strings that are the same as the first element, but are not\n  the same as the last element.\n  >>> [uniqueStrings([1, 2, 1, 3, 4, 5])]\n  ['1', '2', '3', '4']\n  >>> [uniqueStrings([1, 2, 1, 3, 4])]\n  ['1', '2', '3', '4']\n  */\nconst uniqueLastStrings = (strings) => {\n  const unique = [];\n\n  strings.forEach((s) => {\n    if(unique.indexOf(s) === -1)\n      unique.push(s);\n    else\n      unique.pop();\n  });\n\n  return unique;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, -3, -9, -123, -1, -10]\n  */\nconst getNegative = (l) => {\n  return l.filter(n => n < 0);\n};\n\n/*\n  >>> getLarger([-1, 2, -4, 5, 6])\n  [-1, -4, -5, -6]\n  >>> getLarger([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, -3, -9, -123, -1, -10]\n  */\nconst getLarger = (l) => {\n  return l.sort((a, b) => a - b);\n};\n\n/*\n  >>> getSmaller([-1, 2, -4, 5, 6])\n  [2, 4, 5, 6]\n  >>> getSmaller([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, -3, -9, -123, -1, -10]\n  */\nconst getSmaller = (l) => {\n  return l.sort((a, b) => b - a);\n};\n\n/*\n  >>> getEqual([-1, 2, -4, 5, 6])\n  []\n  >>> getEqual([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  []\n  */\nconst getEqual = (l) => {\n  return l.filter((elem, index, arr) => index === 0 || elem - arr[index - 1] === 0);\n};\n\n/*\n  >>> getEven([1, 3, 5, 7, 9])\n  [1, 3, 5, 7, 9]\n  >>> getEven([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8]\n  */\nconst getEven = (l) => {\n  return l.filter(elem => (elem & 1) === 0);\n};\n\n/*\n  >>> getOdd([1, 3, 5, 7, 9])\n  [1, 3, 5, 7, 9]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [2, 4, 6, 8]\n  */\nconst getOdd = (l) => {\n  return l.filter(elem => (elem & 1) === 1);\n};\n\n/*\n  >>> getAll([1, 3, 5, 7, 9])\n  [1, 3, 5, 7, 9]\n  >>> getAll([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst getAll = (l) => {\n  return l;\n};\n\n/*\n  >>> getRandom([1, 3, 5, 7, 9])\n  [3, 5, 7, 9]\n  >>> getRandom([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [5, 6, 7, 8]\n  >>> getRandom([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [7, 8, 9]\n  */\nconst getRandom = (l) => {\n  return l.sort().slice(Math.round(Math.random() * l.length), l.length);\n};\n\n/*\n  >>> getRandom([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [7, 8, 9]\n  >>> getRandom([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [7, 8, 9]\n  */\nconst getSorted = (l) => {\n  return l.sort();\n};\n\n/*\n  >>> getUnique([1, 3, 5, 7, 9])\n  [1, 3, 5, 7, 9]\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst getUnique = (l) => {\n  return l.filter((elem, index, arr) => index === 0 || elem!== arr[index - 1]);\n};\n\n/*\n  >>> getUnique([1, 3, 5, 7, 9])\n  [1, 3, 5, 7, 9]\n  >>> getUnique([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst getUnsorted = (l) => {\n  return l.sort();\n};\n\nmodule.exports = {\n  getAll,\n  getEqual,\n  getEven,\n  getOdd,\n  getPositive,\n  getNegative,\n  getLarger,\n  getSmaller,\n  getRandom,\n  getSorted,\n  getUnique,\n  getUnsorted\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  return n > 1 && n % 1 === 0 && n!== 3 && n!== 5;\n}\n\n/* Return the next prime number greater than the given number, starting\n   from the given number.\n  >>> nextPrime(3)\n  7\n  >>> nextPrime(7)\n  11\n  >>> nextPrime(101)\n  113\n  >>> nextPrime(11)\n  13\n  >>> nextPrime(13441)\n  14041\n  >>> nextPrime(61)\n  61\n  >>> nextPrime(4)\n  4\n  >>> nextPrime(1)\n  1\n  */\nconst nextPrime = (n) => {\n  if (n < 2) return 2;\n\n  let i = 2;\n  while (i < n) {\n    if (isPrime(i)) return i + 1;\n    i += 2;\n  }\n  return n + 1;\n}\n\n/* Return a prime number larger than the given number.\n  >>> nextPrimeLarger(1)\n  3\n  >>> nextPrimeLarger(3)\n  7\n  >>> nextPrimeLarger(7)\n  11\n  >>> nextPrimeLarger(101)\n  113\n  >>> nextPrimeLarger(11)\n  13\n  >>> nextPrimeLarger(13441)\n  14041\n  >>> nextPrimeLarger(61)\n  61\n  >>> nextPrimeLarger(4)\n  4\n  >>> nextPrimeLarger(1)\n  1\n  */\nconst nextPrimeLarger = (n) => {\n  if (n < 2) return 2;\n\n  let i = n;\n  while (i < nextPrime(i)) {\n    i = nextPrime(i);\n  }\n  return i;\n}\n\n/* Return the sum of all primes less than or equal to the given number.\n  >>> sumOfPrimes(20)\n  232792560\n  >>> sumOfPrimes(10)\n  15\n  >>> sumOfPrimes(1)\n  1\n  >>> sumOfPrimes(0)\n  0\n  >>> sumOfPrimes(-1)\n  0\n  >>> sumOfPrimes(-10)\n  0\n  */\nconst sumOfPrimes = (n) => {\n  const n1 = nextPrimeLarger(n);\n  const result = n1;\n  for (let i = n; i < n1; i += 2) {\n    if (isPrime(i)) result += i;\n  }\n  return result;\n}\n\n/* Return the sum of all primes less than or equal to the given number.\n  >>> sumOfPrimes(20)\n  232792560\n  >>> sumOfPrimes(10)\n  15\n  >>> sumOfPrimes(1)\n  1\n  >>> sumOfPrimes(0)\n  0\n  >>> sumOfPrimes(-1)\n  0\n  >>> sumOfPrimes(-10)\n  0\n  */\nconst sumOfPrimes = (n) => {\n  const n1 = nextPrimeLarger(n);\n  const result = n1;\n  for (let i = n; i < n1; i += 2) {\n    if (isPrime(i)) result += i;\n  }\n  return result;\n}\n\nexport default {\n  isPrime,\n  nextPrime,\n  nextPrimeLarger,\n  sumOfPrimes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  // find largest number, it is x.\n  var max = -1;\n  var max_i = 0;\n  for(var i = 0; i < xs.length; i++) {\n    if(xs[i] > max) {\n      max = xs[i];\n      max_i = i;\n    }\n  }\n  //  find x0 = 1 / max\n  var x0 = 1 / max;\n  // find largest number\n  var max = -1;\n  var max_i = 0;\n  for(var i = 0; i < xs.length; i++) {\n    if(Math.abs(xs[i]) > max) {\n      max = Math.abs(xs[i]);\n      max_i = i;\n    }\n  }\n  var l = max_i + 1;\n  var r = max_i + 2;\n  if(l == r) {\n    // find  x1 = x0 * max\n    var x1 = x0 * max;\n    //find zeros\n    var x0s = [];\n    while(ly(xs, x1)!= 0) {\n      x1 = x1 + x0;\n      x0s.push(x1);\n    }\n    return x0s;\n  }\n  var lx = l + 1;\n  var rx = r - 1;\n  // find largest non zero\n  var max = -1;\n  var max_i = 0;\n  for(var i = 0; i < xs.length; i++) {\n    if(xs[i] > max) {\n      max = xs[i];\n      max_i = i;\n    }\n  }\n  // find x1 = x0 * max\n  var x1 = x0 * max;\n  // find x2 = x0 * max * max\n  var x2 = x1 * max;\n  var x0s = [];\n  while(ly(xs, x2)!= 0) {\n    x1 = x1 + x0;\n    x0s.push(x1);\n    x1 = x1 * x2;\n    x0s.push(x1);\n  }\n  // find x3 = x0 * max * max * max\n  var x3 = x2 * max;\n  var x0s2 = [];\n  while(ly(xs, x3)!= 0) {\n    x1 = x1 + x0;\n    x0s2.push(x1);\n    x1 = x1 * x2;\n    x0s2.push(x1);\n    x1 = x1 * x3;\n    x0s2.push(x1);\n  }\n  // find x4 = x0 * max * max * max * max\n  var x4 = x3 * max;\n  while(ly(xs, x4)!= 0) {\n    x1 = x1 + x0;\n    x0s.push(x1);\n    x1 = x1 * x2;\n    x0s.push(x1);\n    x1 = x1 * x3;\n    x0s.push(x1);\n    x1 = x1 * x4;\n    x0s.push(x1);\n  }\n  // find x5 = x0 * max * max * max * max * max\n  var x5 = x4 * max;\n  while(ly(xs, x5)!= 0) {\n    x1 = x1 + x0;\n    x0s.push(x1);\n    x1 = x1 * x2;\n    x0s.push(x1);\n    x1 = x1 * x3;\n    x0s.push(x1);\n    x1 = x1 * x4;\n    x0s.push(x1);\n    x1 = x1 * x5;\n    x0s.push(x1);\n  }\n  // find x6 = x0 * max * max * max * max * max * max\n  var x6 = x5 * max;\n  while(ly(xs, x6)!= 0) {\n    x1 = x1 + x0;\n    x0s.push(x1);\n    x1 = x1 * x2;\n    x0s.push(x1);\n    x1 = x1 * x3;\n    x0s.push(x1);\n    x1 = x1 * x4;\n    x0s.push(x1);\n    x1 = x1 * x5;\n    x0s.push(x1);\n    x1 = x1 * x6;\n    x0s.push(x1);\n  }\n  // find x7 = x0 * max * max * max * max * max * max * max\n  var x7 = x6 * max;\n  while(ly(xs, x7)!= 0) {\n    x1 = x1 + x0;\n    x0s.push(x1);\n    x1 = x1 * x2;\n    x0s.push(x1);\n    x1 ="}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const l3 = [];\n    const l3i = [];\n    const l3d = [];\n    const l3i_d = [];\n    const l3d_i = [];\n    const l_d = [];\n    for (let i = 0; i < l.length; i++) {\n        l3[i] = l[i];\n        l3i[i] = l[i];\n        l3d[i] = l[i];\n        l3i_d[i] = l[i];\n        l3d_i[i] = l[i];\n        l_d[i] = l[i];\n    }\n    let t;\n    const s_1 = [];\n    const s_2 = [];\n    const s_3 = [];\n    const s_1d = [];\n    const s_2d = [];\n    const s_3d = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 3 === 0) {\n            s_1[i] = l[i];\n            s_1d[i] = l[i];\n        }\n        if (l[i] % 3 === 1) {\n            s_2[i] = l[i];\n            s_2d[i] = l[i];\n        }\n        if (l[i] % 3 === 2) {\n            s_3[i] = l[i];\n            s_3d[i] = l[i];\n        }\n    }\n    let r_d = [];\n    let r_i = [];\n    let r_d_i = [];\n    let r_d_i_d = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 3 === 0) {\n            r_d[i] = l[i];\n            r_d_i[i] = l[i];\n            r_d_i_d[i] = l[i];\n        }\n        if (l[i] % 3 === 1) {\n            r_i[i] = l[i];\n            r_i_d[i] = l[i];\n            r_i_d_d[i] = l[i];\n        }\n        if (l[i] % 3 === 2) {\n            r_d_i[i] = l[i];\n            r_d_i_d_d[i] = l[i];\n        }\n    }\n    let t_d = [];\n    let t_i = [];\n    let t_d_i = [];\n    let t_d_i_d = [];\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] % 3 === 0) {\n            t_d[i] = l[i];\n            t_d_i[i] = l[i];\n            t_d_i_d[i] = l[i];\n        }\n        if (l[i] % 3 === 1) {\n            t_i[i] = l[i];\n            t_i_d[i] = l[i];\n            t_i_d_d[i] = l[i];\n        }\n        if (l[i] % 3 === 2) {\n            t_d_i[i] = l[i];\n            t_d_i_d_d[i] = l[i];\n        }\n    }\n    const l3_d = [];\n    const l3_i_d = [];\n    const l3_d_i = [];\n    for (let i = 0; i < l3.length; i++) {\n        l3_d[i] = l3[i];\n        l3_i_d[i] = l3[i];\n        l3_d_i[i] = l3[i];\n    }\n    const l3_i_d_d = [];\n    const l3_d_i_d = [];\n    const l3_d_i_d_d = [];\n    for (let i = 0; i < l3.length; i++) {\n        if (l3[i] % 3 === 0) {\n            l3_d_i_d[i] = l3[i];\n            l3_d_i_d_d[i] = l3[i];\n        }\n        if (l3[i] % 3 === 1) {\n            l3_i_d_d[i] = l3[i];\n            l3_i_d_d_d[i] = l3[i];\n        }\n        if (l3[i] % 3 === 2) {\n            l3_i_d[i] = l3[i];\n            l3_i_d_d_d[i] = l3[i];\n        }\n    }\n    l3.sort((a, b) => a - b);\n    for (let i = 0; i < l3.length; i++) {\n        if (l3[i] % 3 === 0) {\n            l3_d[i] = l3[i];\n            l3_d_i[i] = l3[i];\n            l3_d_i_d[i] = l3[i];\n        }\n        if (l3[i] % 3 === 1) {\n            l3_i[i] = l3[i];\n            l3_i_d[i] = l3[i];\n            l3_i_d_d[i] = l3[i];\n        }\n        if (l3[i] % 3 === 2) {\n            l3_i_d[i] = l3[i];\n            l3_i_d_d["}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let seen = new Set()\n  const output = []\n  for (let element of l) {\n    if (seen.has(element)) {\n      continue\n    }\n    seen.add(element)\n    output.push(element)\n  }\n  return output\n}\n\n/*\n  Create a new list without duplicate elements.\n  >>> unique([5, 5, 5, 2, 3, 3, 3, 9, 123])\n  [5, 2, 3, 9, 123]\n  >>> unique([\"foo\", \"bar\", \"baz\", \"foo\", \"foo\", \"bar\", \"baz\", \"baz\"])\n  [\"foo\", \"bar\", \"baz\"]\n  */\nconst uniqueList = (l) => {\n  const output = []\n  for (let element of l) {\n    if (output.indexOf(element) === -1) {\n      output.push(element)\n    }\n  }\n  return output\n}\n\n/*\n  Take a list of integers and remove all pairs where the second\n  element is equal to the first element.\n  >>> list(unique([1, 1, 2, 3, 4, 5, 1, 1, 6, 7]))\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> list(unique([1, 1, 2, 3, 4, 5, 1, 1, 6, 7, 1, 1]))\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst unique2 = (l) => {\n  const output = []\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === l[i + 1]) {\n      continue\n    }\n    output.push(l[i])\n  }\n  return output\n}\n\n/*\n  Take a list of strings and remove all elements where the first\n  element is equal to the second element.\n  >>> list(unique([\"foo\", \"bar\", \"baz\", \"foo\", \"foo\", \"bar\", \"baz\", \"baz\"]))\n  [\"foo\", \"bar\", \"baz\"]\n  >>> list(unique([\"foo\", \"bar\", \"baz\", \"foo\", \"foo\", \"bar\", \"baz\", \"baz\", \"foo\"]))\n  [\"foo\", \"bar\", \"baz\"]\n  */\nconst unique3 = (l) => {\n  const output = []\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === l[i + 1]) {\n      continue\n    }\n    output.push(l[i])\n  }\n  return output\n}\n\n/*\n  >>> list(unique([1, 2, 3, 2, 1, 2, 1, 2, 1, 2]))\n  [1, 2, 3]\n  >>> list(unique([1, 2, 3, 2, 1, 2, 1, 2, 1, 2, 1]))\n  [1, 2, 3]\n  */\nconst unique4 = (l) => {\n  const output = []\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === l[i + 1]) {\n      continue\n    }\n    output.push(l[i])\n  }\n  return output\n}\n\n/*\n  Take a list of strings and remove all elements where the first\n  element is equal to the second element.\n  >>> list(unique([\"foo\", \"bar\", \"baz\", \"foo\", \"foo\", \"bar\", \"baz\", \"baz\", \"foo\"]))\n  [\"foo\", \"bar\", \"baz\"]\n  >>> list(unique([\"foo\", \"bar\", \"baz\", \"foo\", \"foo\", \"bar\", \"baz\", \"baz\", \"foo\", \"bar\"]))\n  [\"foo\", \"bar\", \"baz\"]\n  */\nconst unique5 = (l) => {\n  const output = []\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === l[i + 1]) {\n      continue\n    }\n    output.push(l[i])\n  }\n  return output\n}\n\n/*\n  Take a list of strings and remove all elements where the first\n  element is equal to the second element.\n  >>> list(unique([\"foo\", \"bar\", \"baz\", \"foo\", \"foo\", \"bar\", \"baz\", \"baz\", \"foo\", \"bar\", \"baz\"]))\n  [\"foo\", \"bar\", \"baz\"]\n  >>> list(unique([\"foo\", \"bar\", \"baz\", \"foo\", \"foo\", \"bar\", \"baz\", \"baz\", \"foo\", \"bar\", \"baz\", \"foo\"]))\n  [\"foo\", \"bar\", \"baz\"]\n  */\nconst unique6 = (l) => {\n  const output = []\n  for (let i = 0; i < l.length - 1; i++) {\n    if (l[i] === l[i + 1]) {\n      continue\n    }\n    output.push(l[i])\n  }\n  return output\n}\n\nmodule.exports = {\n  unique,\n  uniqueList,\n  unique2,\n  unique3,\n  unique4,\n  unique5,\n  unique6\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = Number.MIN_VALUE;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n  let counter = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      if (i % 5 === 0) {\n        counter += 1\n      }\n    }\n    if (i % 5 === 0) {\n      if (i % 7 === 0) {\n        counter += 1\n      }\n    }\n    if (i % 11 === 0) {\n      counter += 1\n    }\n    if (i % 13 === 0) {\n      counter += 1\n    }\n  }\n  return counter\n}\n\n/*Return the number of times the digit8 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz2 = (n) => {\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n  let counter = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      if (i % 5 === 0) {\n        counter += 1\n      }\n    }\n    if (i % 5 === 0) {\n      if (i % 7 === 0) {\n        counter += 1\n      }\n    }\n    if (i % 11 === 0) {\n      counter += 1\n    }\n    if (i % 13 === 0) {\n      counter += 1\n    }\n  }\n  return counter\n}\n\n/*Return the number of times the digit9 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz3 = (n) => {\n  const digits = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]\n  let counter = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0) {\n      if (i % 5 === 0) {\n        counter += 1\n      }\n    }\n    if (i % 5 === 0) {\n      if (i % 7 === 0) {\n        counter += 1\n      }\n    }\n    if (i % 11 === 0) {\n      counter += 1\n    }\n    if (i % 13 === 0) {\n      counter += 1\n    }\n  }\n  return counter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = [...l];\n  const evenIndex = [...l.length].filter((v, i) => i % 2 === 0);\n  const odd = [...l];\n  const oddIndex = [...l.length].filter((v, i) => i % 2!== 0);\n  const evenVal = evenIndex.map(i => even[i]);\n  const oddVal = oddIndex.map(i => odd[i]);\n  const result = [...evenVal,...oddVal];\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n  var groups = [], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\n/*\n  takes as input string with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\n/*\n  takes as input string with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic2 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\n/*\n  takes as input string with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeCyclic3 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst encodeCyclic4 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst decodeCyclic4 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst decodeCyclic5 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst decodeCyclic6 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst decodeCyclic7 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst decodeCyclic8 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst decodeCyclic9 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n}\n\nconst decodeCyclic10 = (s) => {\n var groups = [ ], gr oups = [];\n  var groups2 = [];\n  for(constgroup of groups) {\n    if (group.leng th == 3)\n      groups2.push(group.slice(1));\n  }\n  for(constgroup ofgroups2) {\n    groups.push(group);  }  return groups2.join(''); \n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    const fib = primeFib(n - 1) + primeFib(n - 2)\n    return (fib % 2 === 0)? fib : fib + 1\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const count = 0\n    const count2 = 0\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    count += 1\n                }\n            }\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if (l[i] + l[j] + l[k] === 0) {\n                    count2 += 1\n                }\n            }\n        }\n    }\n    if (count === 0 && count2 === 0) {\n        return false\n    }\n    return true\n}\n\n/*\n  triplesSumToZero2 takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero2([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero2([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero2([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero2([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero2([1])\n  false\n  */\nconst triplesSumToZero2 = (l) => {\n    const count = 0\n    const count2 = 0\n    const count3 = 0\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                for (let l = k + 1; l < l.length; l++) {\n                    if (l - k + j - i === 0) {\n                        count += 1\n                    }\n                }\n            }\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                for (let l = k + 1; l < l.length; l++) {\n                    if (l - k + j - i === 0) {\n                        count2 += 1\n                    }\n                }\n            }\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                for (let l = k + 1; l < l.length; l++) {\n                    if (l - k + j - i === 0) {\n                        count3 += 1\n                    }\n                }\n            }\n        }\n    }\n    if (count === 0 && count2 === 0 && count3 === 0) {\n        return false\n    }\n    return true\n}\n\n/*\n  main takes two lists and returns the sum of all the triples in the lists.\n\n  >>> main([[1, 3, 5, 0], [1, 3, -2, 1], [1, 2, 3, 7], [2, 4, -5, 3, 9, 7]])\n  8\n  >>> main([[1, 2, 3, 7]])\n  4\n  >>> main([[1]])\n  1\n  */\nconst main = (l) => {\n    const sum = 0\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                sum += l[i] + l[j] + l[k]\n            }\n        }\n    }\n    return sum\n}\n\n/*\n  main2 takes two lists and returns the sum of all the triples in the lists.\n\n  >>> main2([[1, 3, 5, 0], [1, 3, -2, 1], [1, 2, 3, 7], [2, 4, -5, 3, 9, 7]])\n  8\n  >>> main2([[1, 2, 3, 7]])\n  4\n  >>> main2([[1]])\n  1\n  */\nconst main2 = (l) => {\n    const sum = 0\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            sum += l[i] + l[j]\n        }\n    }\n    return sum\n}\n\n/*\n  main3 takes two lists and returns the sum of all the triples in the lists.\n\n  >>> main3([[1, 3, 5, 0], [1, 3, -2, 1], [1, 2, 3, 7], [2, 4, -5, 3, 9, 7]])\n  8\n  >>> main3([[1, 2, 3, 7]])\n  4\n  >>> main3([[1]])\n  1\n  */\nconst main3 = (l) => {\n    const sum = 0\n    for (let i = 0; i < l.length; i++) {\n        for (let j = i + 1; j < l.length; j++) {\n            for ("}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    int collisions = 0;\n    for(int i = 0; i < n; ++i) {\n      int j = (n - i - 1) % n;\n      if(carRaceCollision(carA, carB)) {\n        ++collisions;\n      }\n    }\n    return collisions;\n  }\n*/\n\n/*\n  Tests if two cars are colliding\n  */con st int carRaceCollision(car cA, car cB) = > {\n    if(cA.getX() > cB.getX() + cB.getRadius()) {\n      return 0;\n    }\n    if(cA.getX() + cA.getRadius() < cB.getX() - cB.getRadius()) {\n      return 0;\n    }\n    return 1;\n  }\n\n/*\n  Given n car, returns how many car are in the left of carA\n  */con st int carLeft(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() < cA.getX() + cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns how many car are in the right of carA\n  */con st int carRight(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() > cA.getX() - cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns the total number of cars that are\n  in the left of carA\n  */con st int carLeft(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() < cA.getX() + cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns the total number of cars that are\n  in the right of carA\n  */con st int carRight(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() > cA.getX() - cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns the total number of cars that are\n  in the left and right of carA\n  */con st int carRight(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() < cA.getX() + cA.getRadius()) {\n        ++count;\n      }\n      if(cars.get(i).getX() > cA.getX() - cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns the total number of cars that are\n  in the left and right of carA\n  */con st int carLeft(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() < cA.getX() + cA.getRadius()) {\n        ++count;\n      }\n      if(cars.get(i).getX() > cA.getX() - cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns the total number of cars that are\n  in the left and right of carA\n  */con st int carRight(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() > cA.getX() - cA.getRadius()) {\n        ++count;\n      }\n      if(cars.get(i).getX() < cA.getX() + cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns the total number of cars that are\n  in the left and right of carA\n  */con st int carLeft(car cA, carRace cars) = > {\n    int count = 0;\n    for(int i = 0; i < cars.size(); ++i) {\n      if(cars.get(i).getX() < cA.getX() + cA.getRadius()) {\n        ++count;\n      }\n      if(cars.get(i).getX() > cA.getX() - cA.getRadius()) {\n        ++count;\n      }\n    }\n    return count;\n  }\n\n/*\n  Given n car, returns the total number of cars that are\n  in the left and right of carA\n  */con st int carRight(car cA, carRace cars) = > {\n"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1];\n    });\n}\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3, 4])\n  [2, 3, 4, 5]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((a, b) => {\n        return [...a, b + 1"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  if (!l ||!l.length) return false;\n  const sum = l.reduce((a, b) => a + b, 0);\n  return (l.filter((item, index, array) => array.indexOf(item) === index).length > 1)? true : false;\n};\n\nconst isPairsSumToZero = (l) => pairsSumToZero(l);\n\nmodule.exports = {\n  pairsSumToZero,\n  isPairsSumToZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  return convertToBase(x, base).toString();\n};\n\nconst convertToBase = (x, base) => {\n  let result = 0;\n  while (x > 0) {\n    result = result * base + x % base;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\n/*\n  >>> convertBase(1, 10, 3)\n  '11'\n  >>> convertBase(12, 10, 3)\n  '21'\n  >>> convertBase(8, 3, 2)\n  '2000'\n  >>> convertBase(8, 2, 2)\n  '8'\n  >>> convertBase(16, 2, 16)\n  '10'\n  >>> convertBase(16, 16, 2)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(15, 16, 16)\n  '11'\n  >>> convertBase(8, 16, 16)\n  '32'\n  >>> convertBase(8, 16, 8)\n  '128'\n  >>> convertBase(16, 16, 8)\n  '65536'\n  >>> convertBase(16, 8, 16)\n  '256'\n  >>> convertBase(8, 8, 16)\n  '256'\n  >>> convertBase(8, 8, 8)\n  '128'\n  >>> convertBase(16, 8, 8)\n  '128'\n  >>> convertBase(16, 8, 8)\n  '128'\n  >>> convertBase(8, 16, 8)\n  '128'\n  >>> convertBase(16, 16, 8)\n  '256'\n  >>> convertBase(16, 16, 8)\n  '256'\n  >>> convertBase(16, 16, 8)\n  '256'\n  >>> convertBase(8, 16, 8)\n  '256'\n  >>> convertBase(16, 16, 8)\n  '256'\n  >>> convertBase(16, 8, 8)\n  '256'\n  >>> convertBase(8, 8, 8)\n  '128'\n  >>> convertBase(8, 8, 16)\n  '128'\n  >>> convertBase(16, 8, 16)\n  '128'\n  >>> convertBase(8, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(15, 16, 16)\n  '11'\n  >>> convertBase(8, 16, 16)\n  '32'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(8, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)\n  '256'\n  >>> convertBase(16, 16, 16)"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(3, 5)\n  2.5\n  */\nconst triangleArea2 = (h, a) => {\n  return (a * h) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(2, 3)\n  3.0\n  */\nconst triangleArea3 = (a) => {\n  return (a * a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(3, 3)\n  4.0\n  */\nconst triangleArea4 = (a) => {\n  return (a * a * a) / 6;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(4, 3)\n  9.0\n  */\nconst triangleArea5 = (a) => {\n  return (a * a * a * a) / 20;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(3, 4)\n  7.0\n  */\nconst triangleArea6 = (a) => {\n  return (a * a * a * a * a) / 36;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(4, 4)\n  16.0\n  */\nconst triangleArea7 = (a) => {\n  return (a * a * a * a * a * a) / 64;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  19.0\n  */\nconst triangleArea8 = (a) => {\n  return (a * a * a * a * a * a * a) / 120;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(3, 5)\n  15.0\n  */\nconst triangleArea9 = (a) => {\n  return (a * a * a * a * a * a * a * a) / 240;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 5)\n  45.0\n  */\nconst triangleArea10 = (a) => {\n  return (a * a * a * a * a * a * a * a * a) / 320;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(6, 5)\n  85.0\n  */\nconst triangleArea11 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a) / 400;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(7, 5)\n  175.0\n  */\nconst triangleArea12 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a) / 500;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(8, 5)\n  315.0\n  */\nconst triangleArea13 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a) / 600;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(9, 5)\n  429.0\n  */\nconst triangleArea14 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a * a) / 800;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(10, 5)\n  655.0\n  */\nconst triangleArea15 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a * a * a) / 1000;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(11, 5)\n  1023.0\n  */\nconst triangleArea16 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a) / 1200;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(12, 5)\n  1459.0\n  */\nconst triangleArea17 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a) / 1400;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(13, 5)\n  19119.0\n  */\nconst triangleArea18 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a) / 2000;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(14, 5)\n  209891.0\n  */\nconst triangleArea19 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a) / 30000;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(15, 5)\n  32985843.0\n  */\nconst triangleArea20 = (a) => {\n  return (a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a * a"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4)\n}\n\n// The Fib5 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n/*The Fib5 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib5(0) ->0\n  fib5(1)->1\n  fib5(2) -> 1\n  fib5(3) -> 1\n  fib5(n)->fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib5 number sequen ce.  Do not use recursi on.\n  >>> fib5(5)\n  5\n  >>> fib5(6)\n  8\n  >>> fib5(7)\n  13\n  */\nconst fib5 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5)\n}\n\n// The Fib6 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n/*The Fib6 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib6(0) ->0\n  fib6(1)->1\n  fib6(2) -> 1\n  fib6(3) -> 1\n  fib6(n)->fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib6 number sequen ce.  Do not use recursi on.\n  >>> fib6(5)\n  6\n  >>> fib6(6)\n  9\n  >>> fib6(7)\n  16\n  */\nconst fib6 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6)\n}\n\n// The Fib7 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n/*The Fib7 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib7(0) ->0\n  fib7(1)->1\n  fib7(2) -> 1\n  fib7(3) -> 1\n  fib7(n)->fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib7 number sequen ce.  Do not use recursi on.\n  >>> fib7(5)\n  5\n  >>> fib7(6)\n  10\n  >>> fib7(7)\n  17\n  */\nconst fib7 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7)\n}\n\n// The Fib8 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n/*The Fib8 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib8(0) ->0\n  fib8(1)->1\n  fib8(2) -> 1\n  fib8(3) -> 1\n  fib8(n)->fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib8 number sequen ce.  Do not use recursi on.\n  >>> fib8(5)\n  5\n  >>> fib8(6)\n  11\n  >>> fib8(7)\n  18\n  */\nconst fib8 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4)"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    return null\n  } else if (l.length === 1) {\n    return l[0]\n  } else if (l.length === 2) {\n    return (l[0] + l[1]) / 2\n  } else {\n    const sortedList = l.slice().sort()\n    const middle = Math.floor(l.length / 2)\n    return (sortedList[middle] + sortedList[l.length - 1 - middle]) / 2\n  }\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let reversed = text.split('').reverse().join('');\n    return text === reversed;\n};\n\n/*\n  Checks if given string is a square me\n  >>> isSquare('')\n  false\n  >>> isSquare('aba')\n  false\n  >>> isSquare('abab')\n  true\n  >>> isSquare('abac')\n  false\n  */\nconst isSquare = (text) => {\n    let isSquare = false;\n    for (let i = 0; i < text.length; i++) {\n        let num = text.charAt(i);\n        if (isSquare) {\n            if (i === 0 || i === text.length - 1) {\n                if (num!== num) {\n                    isSquare = false;\n                }\n            } else {\n                if (num!== text.charAt(i - 1) || num!== text.charAt(i + 1)) {\n                    isSquare = false;\n                }\n            }\n        } else {\n            if (num!== num) {\n                isSquare = true;\n            }\n        }\n    }\n    return isSquare;\n};\n\n/*\n  Returns an array of all the palindromes in the given text\n  >>> findAllPalindromes('abc')\n  ['abc', 'bca', 'bac', 'cab', 'cba', 'acb', 'cab', 'bac', 'cba', 'abc']\n  >>> findAllPalindromes('abab')\n  ['abab', 'abac', 'abcd', 'acab', 'acad', 'acbc', 'acbd', 'acdb', 'adab', 'adac', 'adbc', 'adbd', 'adcb', 'adcd', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'adcb', 'ad"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let res = n % p\n  while (res < 0) {\n    res += p\n  }\n  return res\n}\n\n/*\n  Return sum of all elements of n array.\n  >>> sum(3)\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  32\n  */\nconst sum = (n) => {\n  return n.reduce((acc, elem) => acc + elem, 0)\n}\n\n/*\n  Return product of all elements of n array.\n  >>> prod(3)\n  9\n  >>> prod([1, 2, 3, 4])\n  24\n  >>> prod([1, 2, 3, 4, 5])\n  120\n  >>> prod([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  720\n  */\nconst prod = (n) => {\n  return n.reduce((acc, elem) => acc * elem, 1)\n}\n\n/*\n  Return element at position 'pos' in 'n' array.\n  >>> elem(3, 2)\n  2\n  >>> elem([1, 2, 3, 4], 2)\n  3\n  >>> elem([1, 2, 3, 4], 7)\n  0\n  */\nconst elem = (n, pos) => {\n  return n.slice(0, pos).concat(n.slice(pos + 1))\n}\n\n/*\n  Return list of n elements of x range from 1 to n.\n  >>> range(3)\n  [1, 2, 3]\n  >>> range(1, 4)\n  [1, 2, 3]\n  >>> range(1, 5, 2)\n  [1, 3]\n  >>> range(1, 6, 2)\n  [3, 5]\n  >>> range(1, 7, 2)\n  [3, 5, 7]\n  */\nconst range = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1)\n}\n\n/*\n  Return list of n elements of x range from 1 to n.\n  >>> range(3, 5)\n  [1, 2, 3, 4]\n  >>> range(1, 5, 2)\n  [1, 3]\n  >>> range(1, 6, 2)\n  [3, 5]\n  >>> range(1, 7, 2)\n  [3, 5, 7]\n  */\nconst range2 = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1)\n}\n\n/*\n  Return list of n elements of x range from 1 to n.\n  >>> range3(3, 5)\n  [1, 2, 3, 4]\n  >>> range3(1, 5, 2)\n  [1, 3]\n  >>> range3(1, 6, 2)\n  [3, 5]\n  >>> range3(1, 7, 2)\n  [3, 5, 7]\n  */\nconst range3 = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1)\n}\n\n/*\n  Return string of n elements of x range from 1 to n.\n  >>> rangeStr(3, 5)\n  '0123'\n  >>> rangeStr(1, 5, 2)\n  '01'\n  >>> rangeStr(1, 6, 2)\n  '0123'\n  >>> rangeStr(1, 7, 2)\n  '0123'\n  */\nconst rangeStr = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1).join('')\n}\n\n/*\n  Return list of n elements of x range from 1 to n.\n  >>> rangeStr2(3, 5)\n  '0123'\n  >>> rangeStr2(1, 5, 2)\n  '01'\n  >>> rangeStr2(1, 6, 2)\n  '0123'\n  >>> rangeStr2(1, 7, 2)\n  '0123'\n  */\nconst rangeStr2 = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1).join('')\n}\n\n/*\n  Return list of n elements of x range from 1 to n.\n  >>> rangeStr3(3, 5)\n  '0123'\n  >>> rangeStr3(1, 5, 2)\n  '01'\n  >>> rangeStr3(1, 6, 2)\n  '0123'\n  >>> rangeStr3(1, 7, 2)\n  '0123'\n  */\nconst rangeStr3 = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1).join('')\n}\n\n/*\n  Return list of n elements of x range from 1 to n.\n  >>> rangeStr4(3, 5)\n  '0123'\n  >>> rangeStr4(1, 5, 2)\n  '01'\n  >>> rangeStr4(1, 6, 2)\n  '0123'\n  >>> rangeStr4(1, 7, 2)\n  '0123'\n  */\nconst rangeStr4 = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1).join('')\n}\n\n/*\n  Return list of n elements of x range from 1 to n.\n  >>> rangeStr5(3, 5)\n  '0123'\n  >>> rangeStr5(1, 5, 2)\n  '01'\n  >>> rangeStr5(1, 6, 2)\n  '0123'\n  >>> rangeStr5(1, 7, 2)\n  '0123'\n  */\nconst rangeStr5 = (n, x) => {\n  return Array.from(Array(n), (x) => x + 1).join('')"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decode= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decode_shift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decode_encode_shift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decode_encode= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decode_decode_shift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode_encode_shift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode_encode= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode_decode_shift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode_decode= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode_decode_encode_shift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode_decode_encode= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) - 5 - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decode_decode_decode_decode_shift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.toLowerCase()\n   .replace(/[aeiouAEIOU]/g, '')\n   .replace(/[^a-z]/g, '')\n   .toLowerCase()\n   .replace(/[^a-z]/g, '')\n   .toUpperCase();\n}\n\n//-------------------------------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------------------------------\n//-------------------------------------------------------------------------------------------------------\n\nconst output = process.argv[2];\nconst input = process.argv[3];\n\nconsole.log(`Processing ${input} to ${output}`);\n\nconst inputStream = fs.createReadStream(input);\n\nconst outputStream = fs.createWriteStream(output);\n\ninputStream\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe(\n    replaceVowels(removeVowels)\n  )\n .pipe"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.every(num => num <= t);\n};\n\nexport {\n  belowThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const a = x\n  const b = y\n  return a + b\n}\n\n/*\n  Add two numbers\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add2 = (a, b) => {\n  return a + b\n}\n\nconst add3 = (a, b) => {\n  return a + b\n}\n\nconst add4 = (a, b) => {\n  return a + b\n}\n\nconst add5 = (a, b) => {\n  return a + b\n}\n\nconst add6 = (a, b) => {\n  return a + b\n}\n\nconst add7 = (a, b) => {\n  return a + b\n}\n\nconst add8 = (a, b) => {\n  return a + b\n}\n\nconst add9 = (a, b) => {\n  return a + b\n}\n\nconst add10 = (a, b) => {\n  return a + b\n}\n\nconst add11 = (a, b) => {\n  return a + b\n}\n\nconst add12 = (a, b) => {\n  return a + b\n}\n\nconst add13 = (a, b) => {\n  return a + b\n}\n\nconst add14 = (a, b) => {\n  return a + b\n}\n\nconst add15 = (a, b) => {\n  return a + b\n}\n\nconst add16 = (a, b) => {\n  return a + b\n}\n\nconst add17 = (a, b) => {\n  return a + b\n}\n\nconst add18 = (a, b) => {\n  return a + b\n}\n\nconst add19 = (a, b) => {\n  return a + b\n}\n\nconst add20 = (a, b) => {\n  return a + b\n}\n\nconst add21 = (a, b) => {\n  return a + b\n}\n\nconst add22 = (a, b) => {\n  return a + b\n}\n\nconst add23 = (a, b) => {\n  return a + b\n}\n\nconst add24 = (a, b) => {\n  return a + b\n}\n\nconst add25 = (a, b) => {\n  return a + b\n}\n\nconst add26 = (a, b) => {\n  return a + b\n}\n\nconst add27 = (a, b) => {\n  return a + b\n}\n\nconst add28 = (a, b) => {\n  return a + b\n}\n\nconst add29 = (a, b) => {\n  return a + b\n}\n\nconst add30 = (a, b) => {\n  return a + b\n}\n\nconst add31 = (a, b) => {\n  return a + b\n}\n\nconst add32 = (a, b) => {\n  return a + b\n}\n\nconst add33 = (a, b) => {\n  return a + b\n}\n\nconst add34 = (a, b) => {\n  return a + b\n}\n\nconst add35 = (a, b) => {\n  return a + b\n}\n\nconst add36 = (a, b) => {\n  return a + b\n}\n\nconst add37 = (a, b) => {\n  return a + b\n}\n\nconst add38 = (a, b) => {\n  return a + b\n}\n\nconst add39 = (a, b) => {\n  return a + b\n}\n\nconst add40 = (a, b) => {\n  return a + b\n}\n\nconst add41 = (a, b) => {\n  return a + b\n}\n\nconst add42 = (a, b) => {\n  return a + b\n}\n\nconst add43 = (a, b) => {\n  return a + b\n}\n\nconst add44 = (a, b) => {\n  return a + b\n}\n\nconst add45 = (a, b) => {\n  return a + b\n}\n\nconst add46 = (a, b) => {\n  return a + b\n}\n\nconst add47 = (a, b) => {\n  return a + b\n}\n\nconst add48 = (a, b) => {\n  return a + b\n}\n\nconst add49 = (a, b) => {\n  return a + b\n}\n\nconst add50 = (a, b) => {\n  return a + b\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let i = 0;\n    for (; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) {\n            break;\n        }\n    }\n    return i === s0.length;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    if (n === 0) {\n        return 0;\n    }\n    else if (n === 1) {\n        return 1;\n    }\n    else {\n        return fib(n-1) + fib(n-2);\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  const i = 0;\n  const l = brackets.length;\n  const j = brackets.length;\n\n  while (i < l) {\n    if (brackets[i] === \"<\") {\n      stack.push(\"<\");\n      j -= 1;\n    } else if (brackets[i] === \">\") {\n      const isClosingBracket = stack.pop();\n      if (isClosingBracket!== \">\") return false;\n      j -= 1;\n    } else {\n      return false;\n    }\n    i += 1;\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const i = l.length\n  let c = 0\n  let prev = l[0]\n  let j = 1\n  while (j < i) {\n    if (prev < l[j]) {\n      c++\n    } else if (prev > l[j]) {\n      c--\n    }\n    prev = l[j]\n    j++\n  }\n  return c === 0\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return l1.filter(x => l2.indexOf(x) > -1).sort().concat(l2.filter(x => l1.indexOf(x) > -1).sort());\n}\n\n/* Return the smallest of two numbers.\n  >>> smallest(5, 6)\n  5\n  >>> smallest(5, 3)\n  3\n  >>> smallest(9, 5)\n  5\n  >>> smallest(9, 4)\n  9\n  >>> smallest(3, 9)\n  3\n  >>> smallest(3, 2)\n  2\n  >>> smallest(3, 1)\n  1\n  >>> smallest(3, 0)\n  0\n  >>> smallest(9, 9)\n  9\n  >>> smallest(0, 9)\n  9\n  >>> smallest(9, 0)\n  9\n  >>> smallest(0, 0)\n  0\n  >>> smallest(9, 9, 9)\n  9\n  >>> smallest(9, 9, 8)\n  9\n  >>> smallest(9, 9, 7)\n  9\n  >>> smallest(9, 9, 6)\n  9\n  >>> smallest(9, 9, 5)\n  9\n  >>> smallest(9, 9, 4)\n  9\n  >>> smallest(9, 9, 3)\n  9\n  >>> smallest(9, 9, 2)\n  9\n  >>> smallest(9, 9, 1)\n  9\n  >>> smallest(9, 9, 0)\n  9\n  >>> smallest(9, 9, -1)\n  9\n  >>> smallest(9, 9, -2)\n  9\n  >>> smallest(9, 9, -3)\n  9\n  >>> smallest(9, 9, -4)\n  9\n  >>> smallest(9, 9, -5)\n  9\n  >>> smallest(9, 9, -6)\n  9\n  >>> smallest(9, 9, -7)\n  9\n  >>> smallest(9, 9, -8)\n  9\n  >>> smallest(9, 9, -9)\n  9\n  >>> smallest(9, 9, -10)\n  9\n  >>> smallest(9, 9, -11)\n  9\n  >>> smallest(9, 9, -12)\n  9\n  >>> smallest(9, 9, -13)\n  9\n  >>> smallest(9, 9, -14)\n  9\n  >>> smallest(9, 9, -15)\n  9\n  >>> smallest(9, 9, -16)\n  9\n  >>> smallest(9, 9, -17)\n  9\n  >>> smallest(9, 9, -18)\n  9\n  >>> smallest(9, 9, -19)\n  9\n  >>> smallest(9, 9, -20)\n  9\n  >>> smallest(9, 9, -21)\n  9\n  >>> smallest(9, 9, -22)\n  9\n  >>> smallest(9, 9, -23)\n  9\n  >>> smallest(9, 9, -24)\n  9\n  >>> smallest(9, 9, -25)\n  9\n  >>> smallest(9, 9, -26)\n  9\n  >>> smallest(9, 9, -27)\n  9\n  >>> smallest(9, 9, -28)\n  9\n  >>> smallest(9, 9, -29)\n  9\n  >>> smallest(9, 9, -30)\n  9\n  >>> smallest(9, 9, -31)\n  9\n  >>> smallest(9, 9, -32)\n  9\n  >>> smallest(9, 9, -33)\n  9\n  >>> smallest(9, 9, -34)\n  9\n  >>> smallest(9, 9, -35)\n  9\n  >>> smallest(9, 9, -36)\n  9\n  >>> smallest(9, 9, -37)\n  9\n  >>> smallest(9, 9, -38)\n  9\n  >>> smallest(9, 9, -39)\n  9\n  >>> smallest(9, 9, -40)\n  9\n  >>> smallest(9, 9, -41)\n  9\n  >>> smallest(9, 9, -42)\n  9\n  >>> smallest(9, 9, -43)\n  9\n  >>> smallest(9, 9, -44)\n  9\n  >>> smallest(9, 9, -45)\n  9\n  >>> smallest(9, 9, -46)\n  9\n  >>> smallest(9, 9, -47)\n  9\n  >>> smallest(9, 9, -48)\n  9\n  >>> smallest(9, 9, -49)\n  9\n  >>> smallest(9, 9, -50)\n  9\n  >>> smallest(9, 9, -51)\n  9\n  >>> smallest(9, 9, -52)\n  9\n  >>> smallest(9, 9, -53)\n  9\n  >>> smallest(9, 9, -54)\n  9\n  >>> smallest(9, 9, -55)\n  9\n  >>> smallest(9, 9, -56)\n  9\n  >>> smallest(9, 9, -57)\n  9\n  >>> smallest(9, 9, -58)\n  9\n  >>> smallest(9, 9, -59)\n  9\n  >>> smallest(9, 9, -60)\n  9\n  >>> smallest(9, 9, -61)\n  9\n  >>> smallest(9, 9, -62)\n  9\n  >>> smallest(9, 9, -63)\n  9\n  >>> smallest(9, 9, -64)\n  9\n  >>> smallest(9, 9, -65)\n  9\n  >>> smallest(9, 9, -66)\n  9\n  >>> smallest(9, 9, -67)\n  9\n  >>> smallest(9, 9, -68)\n  9\n  >>> smallest(9, 9, -69)\n  9\n  >>> smallest(9, 9, -70)\n  9\n  >>> smallest(9, 9, -71)\n  9\n  >>> smallest(9, 9, -72)\n  9\n  >>> smallest(9, 9, -73)\n  "}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const i = n - 1\n  const s = (n + 1) / 2\n  let p = 2\n  while (p * p <= n) {\n    if (n % p == 0) {\n      while (n % p == 0) {\n        n /= p\n      }\n      return p\n    }\n    p += 1\n  }\n  if (i >= s) {\n    const q = largestPrimeFactor(n)\n    return largestPrimeFactor(q * q)\n  }\n  return 1\n}\n\nexport default largestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/**\n  * sumEvenFibs is a function that sums even fibonacci numbers.\n  * @param {number} n the upper limit of fibonacci number.\n  * @returns {number} the sum of even fibonacci numbers.\n  *\n  * @example\n  * sumEvenFibs(4)\n  * // => 4\n  *\n  * @example\n  * sumEvenFibs(9)\n  * // => 13\n  */\nconst sumEvenFibs = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/**\n  * sumOddFibs is a function that sums odd fibonacci numbers.\n  * @param {number} n the upper limit of fibonacci number.\n  * @returns {number} the sum of odd fibonacci numbers.\n  *\n  * @example\n  * sumOddFibs(4)\n  * // => 13\n  *\n  * @example\n  * sumOddFibs(9)\n  * // => 46\n  */\nconst sumOddFibs = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2!== 0) {\n      sum += i\n    }\n  }\n  return sum\n}\n\nconst sumFibs = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  return sumEvenFibs(n) + sumOddFibs(n)\n}\n\nconst sumToN2 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumToN3 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i\n  }\n  return sum\n}\n\nconst sumToN4 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i\n  }\n  return sum\n}\n\nconst sumToN5 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN6 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN7 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN8 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN9 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN10 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN11 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN12 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN13 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN14 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN15 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN16 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i * i * i * i * i * i\n  }\n  return sum\n}\n\nconst sumToN17 = (n) => {\n  const sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i * i * i * i * i * i * i * i * i"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength == 0) return true\n\n  let open = 0\n  let closed = 0\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] == '(') {\n      open++\n    } else if (brackets[i] == ')') {\n      closed++\n    }\n  }\n\n  if (open!= closed) return false\n  return correctBracketing(brackets.slice(open + 1))\n}\n\n/*\n  Let's find the minimal number of operations that you can do to turn a string of brackets\n  into a string of open-close pairs, like so:\n\n  \"([{()}\" -> \"([{()}]\"\n  \"{([(]}\" -> \"{[(]}\"\n  \"[([)]\" -> \"[[]]\"\n\n  >>> minOperations(\"([{()}])\")\n  2\n  >>> minOperations(\"{([(]})\")\n  2\n  >>> minOperations(\"([{()}])\")\n  1\n  */\nconst minOperations = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength == 0) return 0\n  let min = bracketsLength\n  let currentOperations = bracketsLength\n  let previousOperations = bracketsLength\n\n  while (true) {\n    previousOperations = currentOperations\n    currentOperations = 0\n    for (let i = 0; i < bracketsLength; i++) {\n      if (brackets[i] == '(') {\n        currentOperations++\n      } else if (brackets[i] == ')') {\n        currentOperations--\n      }\n    }\n    if (previousOperations == currentOperations) break\n    if (currentOperations < min) {\n      min = currentOperations\n    }\n  }\n\n  return min\n}\n\n/*\n  Let's find the maximal number of brackets that can be contained in a string of brackets.\n\n  \"([{()}\" -> \"([{()}])\"\n  \"{([(]}\" -> \"{[(]}\"\n  \"[([)]\" -> \"[[]]\"\n\n  >>> maxBrackets(\"([{()})\")\n  3\n  >>> maxBrackets(\"{([(]})\")\n  3\n  >>> maxBrackets(\"([{()}])\")\n  1\n  */\nconst maxBrackets = (brackets) => {\n  const bracketsLength = brackets.length\n  if (bracketsLength == 0) return 0\n  let max = 0\n  let currentBrackets = 1\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] == '(') {\n      currentBrackets++\n    } else if (brackets[i] == ')') {\n      currentBrackets--\n    }\n    if (currentBrackets > max) {\n      max = currentBrackets\n    }\n  }\n  return max\n}\n\n/*\n  Let's implement a simple function that prints a string of brackets in a recursive way.\n\n  >>> printBrackets(\"([{()}])\")\n  ([{()}])\n  >>> printBrackets(\"{([(]})\")\n  {[(]}\n  >>> printBrackets(\"([{()}])\")\n  ([{()}])\n  >>> printBrackets(\"{([(]})\")\n  {[(]}\n  >>> printBrackets(\"([{()}])\")\n  ([{()}])\n  >>> printBrackets(\"([{()}])\")\n  ([{()}])\n  */\nconst printBrackets = (brackets) => {\n  if (brackets == \"\") return brackets\n  let bracketsLength = brackets.length\n  let newBrackets = \"\"\n  let newBracketsLength = 0\n  let newBracket = \"\"\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] == '(') {\n      newBrackets += '('\n      newBracketsLength++\n    } else if (brackets[i] == ')') {\n      newBrackets += ')'\n      newBracketsLength++\n    }\n  }\n  newBracketsLength = bracketsLength - newBracketsLength\n  if (newBracketsLength == bracketsLength) {\n    return newBrackets\n  }\n  return newBrackets + brackets.slice(newBracketsLength)\n}\n\n/*\n  Let's implement a function that takes a string of brackets and returns a string\n  of all possible combinations of brackets.\n\n  >>> allBrackets(\"([{()}])\")\n  '([{()}])'\n  >>> allBrackets(\"{([(]})\")\n  '{[(]}'\n  >>> allBrackets(\"([{()}])\")\n  '([{()}])'\n  >>> allBrackets(\"{([(]})\")\n  '{[(]}'\n  >>> allBrackets(\"([{()}])\")\n  '([{()}])'\n  >>> allBrackets(\"([{()}])\")\n  '([{()}])'\n  >>> allBrackets(\"([{()}])\")\n  '([{()}])'\n  */\nconst allBrackets = (brackets) => {\n  let bracketsLength = brackets.length\n  let allBrackets = \"\"\n  for (let i = 0; i < bracketsLength; i++) {\n    allBrackets += brackets[i]\n  }\n  return allBrackets\n}\n\n/*\n  Let's implement a function that prints a string of brackets in a recursive way.\n\n  >>> printBracketsRecursive(\"([{()}])\")\n  ([{()}])\n  >>> printBracketsRecursive(\"{([(]})\")\n  {[(]}\n  >>> printBracketsRecursive(\"([{()}])\")\n  ([{()}])\n  >>> printBracketsRecursive(\"{([(]})\")\n  {[(]}\n  >>> printBracketsRecursive(\"([{()}])\")\n  ([{()}])\n  >>> printBracketsRecursive(\"([{()}])\")\n  ([{()}])\n  "}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    let p = 0;\n    let d = [1];\n    for (let i = 0; i < xs.length - 1; i++) {\n        let f = xs[i];\n        for (let j = 0; j < d.length; j++) {\n            d[j] += f * (p + j);\n        }\n        p++;\n    }\n    return d;\n};\n\nconsole.log(derivative([1, 2, 3]));\nconsole.log(derivative([3, 1, 2, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    const fib = (n) => {\n        if (n === 0) return 0\n        if (n === 1) return 1\n        return fib(n-1) + fib(n-2) + fibfib(n-3)\n    }\n    return fib(n)\n}\n\n/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib2 = (n) => {\n    const fib = (n) => {\n        if (n === 0) return 0\n        if (n === 1) return 1\n        return fib(n-1) + fib(n-2) + fib(n-3)\n    }\n    return fib(n)\n}\n\n// console.log(fibfib(5))\n// console.log(fibfib2(5))\n\nconst fibfib3 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fibfib2(n-1) + fibfib2(n-2) + fibfib2(n-3)\n}\n\n// console.log(fibfib3(5))\n\nconst fibfib4 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n// console.log(fibfib4(5))\n\nconst fibfib5 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3)\n}\n\n// console.log(fibfib5(5))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' ||\n        s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(vowelsCount(\"abcde\"));\nconsole.log(vowelsCount(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  return (x << shift) & ((1 << (x.toString().length * 8)) - 1);\n}\n\n// a = x^2 + y^2\nconst p = (x, y) => {\n  return x*x + y*y;\n}\n\nconst g = (x) => {\n  return x*(x + 1) + 1;\n}\n\nconst n = (x) => {\n  return x*(x - 1) + 1;\n}\n\nconst a = (x) => {\n  return x*(x + 1) + 1;\n}\n\nconst e = (x, y) => {\n  return x*x - y*y;\n}\n\nconst r = (x, y) => {\n  return (x - y) % x;\n}\n\nconst px = (x, y) => {\n  return ((x + y) % x);\n}\n\nconst p2 = (x) => {\n  return x*(x + 1) + 1;\n}\n\nconst p3 = (x) => {\n  return x*(x + 1)*(x + 2) + 1;\n}\n\nconst p4 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3) + 1;\n}\n\nconst p5 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4) + 1;\n}\n\nconst p6 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5) + 1;\n}\n\nconst p7 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6) + 1;\n}\n\nconst p8 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7) + 1;\n}\n\nconst p9 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8) + 1;\n}\n\nconst p10 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9) + 1;\n}\n\nconst p11 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10) + 1;\n}\n\nconst p12 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11) + 1;\n}\n\nconst p13 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11)*(x + 12) + 1;\n}\n\nconst p14 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11)*(x + 12)*(x + 13) + 1;\n}\n\nconst p15 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11)*(x + 12)*(x + 13)*(x + 14) + 1;\n}\n\nconst p16 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11)*(x + 12)*(x + 13)*(x + 14)*(x + 15) + 1;\n}\n\nconst p17 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11)*(x + 12)*(x + 13)*(x + 14)*(x + 15)*(x + 16) + 1;\n}\n\nconst p18 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11)*(x + 12)*(x + 13)*(x + 14)*(x + 15)*(x + 16)*(x + 17) + 1;\n}\n\nconst p19 = (x) => {\n  return x*(x + 1)*(x + 2)*(x + 3)*(x + 4)*(x + 5)*(x + 6)*(x + 7)*(x + 8)*(x + 9)*(x + 10)*(x + 11)*(x + 12)*(x + 13)*(x + 14)*(x + 15)*(x + 16)*(x + 17)*(x + 18) + 1"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let total = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90) {\n      total += s.charCodeAt(i);\n    }\n  }\n  return total;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    let {apples, oranges, mango} = s.split(\" \").map(Number)\n    let apples_and_oranges = apples + oranges\n    let numberOfFruits = apples_and_oranges / n\n    let numberOfApples = numberOfFruits * apples\n    let numberOfOranges = numberOfFruits * oranges\n    let numberOfMangoes = numberOfFruits * mango\n    let totalNumberOfFruit = numberOfApples + numberOfOranges + numberOfMangoes\n    return totalNumberOfFruit\n  }\n\nmodule.exports = fruitDistribution<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const list = [];\n  let minIndex = 0;\n\n  arr.forEach((node, index) => {\n    if (node % 2 === 0) {\n      if (index < minIndex) {\n        minIndex = index;\n      }\n    } else {\n      list.push([node, index]);\n    }\n  });\n\n  return list.length > 0? list[minIndex] : [];\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (!lst.length) return -1\n  const start = lst.length - 1\n  const end = 0\n  let cur = start\n  while (cur!== end) {\n    const i = cur\n    cur = ((cur + 1) % lst.length)\n    if (lst[i] < 0) return -1\n    if (lst[i] > lst[cur]) {\n      return lst[i]\n    }\n  }\n  return lst[end]\n}\n\n/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if (!lst.length) return -1\n  const start = lst.length - 1\n  const end = 0\n  let cur = start\n  while (cur!== end) {\n    const i = cur\n    cur = ((cur + 1) % lst.length)\n    if (lst[i] < 0) return -1\n    if (lst[i] > lst[cur]) {\n      return lst[i]\n    }\n  }\n  return lst[end]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return []\n  }\n\n  const min = lst[0]\n  const max = lst[lst.length - 1]\n\n  const list = []\n\n  for (let i = 0; i < lst.length; i++) {\n    const item = lst[i]\n    while (item < min) {\n      list.push(min)\n      min = Math.min(min, item)\n      item = lst[++i]\n    }\n\n    while (item > max) {\n      list.push(max)\n      max = Math.max(max, item)\n      item = lst[--i]\n    }\n  }\n\n  return list\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    return (a + b + c) / 2;\n};\n\n/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points if t he thre e  sidesform a va lid triangle.\n  Otherwise return -1.\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst isValidTriangle = (a, b, c) => {\n    const isValid = triangleArea(a, b, c) >= 0 && triangleArea(a, b, c) <= 1000;\n    return isValid;\n};\n\n//------------------------------------------------------------------------------\n// Tests\n//------------------------------------------------------------------------------\n\nconst triangleAreaTester = (triangle, expected) => {\n    const result = triangleArea(triangle[0], triangle[1], triangle[2]);\n    if (result === expected) {\n        console.log(`Success: ${triangle} is a valid triangle`);\n    } else {\n        console.log(`Failed: ${triangle} is not a valid triangle`);\n    }\n};\n\ntriangleAreaTester(\n    [10, 20, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [1, 2, 10],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 20, 10],\n    -1\n);\n\ntriangleAreaTester(\n    [10, 20, 20],\n    -1\n);\n\ntriangleAreaTester(\n    [10, 20, 20],\n    -1\n);\n\ntriangleAreaTester(\n    [10, 20, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [30, 20, 20],\n    6.00\n);\n\ntriangleAreaTester(\n    [10, 20, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [30, 20, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [20, 30, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [30, 30, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [20, 30, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [20, 30, 30],\n    6.00\n);\n\ntriangleAreaTester(\n    [20, 30, 40],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 40, 40],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 40, 40],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 40, 50],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 40, 50],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 50, 50],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 50, 50],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 50, 60],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 50, 60],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 60, 60],\n    -1\n);\n\ntriangleAreaTester(\n    [30, 60, 60],\n    -1\n);\n\ntriangleAreaTester(\n    [40, 60, 60],\n    -1\n);\n\ntriangleAreaTester(\n    [40, 60, 60],\n    -1\n);\n\ntriangleAreaTester(\n    [40, 60, 70],\n    -1\n);\n\ntriangleAreaTester(\n    [40, 60, 70],\n    -1\n);\n\ntriangleAreaTester(\n    [40, 70, 70],\n    -1\n);\n\ntriangleAreaTester(\n    [40, 70, 70],\n    -1\n);\n\ntriangleAreaTester(\n    [50, 70, 70],\n    -1\n);\n\ntriangleAreaTester(\n    [50, 70, 70],\n    -1\n);\n\ntriangleAreaTester(\n    [50, 70, 80],\n    -1\n);\n\ntriangleAreaTester(\n    [50, 70, 80],\n    -1\n);\n\ntriangleAreaTester(\n    [50, 80, 80],\n    -1\n);\n\ntriangleAreaTester(\n    [50, 80, 80],\n    -1\n);\n\ntriangleAreaTester(\n    [60, 80, 80],\n    -1\n);\n\ntriangleAreaTester(\n    [60, 80, 80],\n    -1\n);\n\ntriangleAreaTester(\n    [60, 80, 90],\n    -1\n);\n\ntriangleAreaTester(\n    [60, 80, 90],\n    -1\n);\n\ntriangleAreaTester(\n    [60, 90, 90],\n    -1\n);\n\ntriangleAreaTester(\n    [60, 90, 90],\n    -1\n);\n\ntriangleAreaTester(\n    [70, 90, 90],\n    -1\n);\n\ntriangleAreaTester(\n    [70, 90, 90],\n    -1\n);\n\ntriangleAreaTester(\n    [70, 90, 100],\n    -1\n);\n\ntriangleAreaTester(\n    [70, 90, 100],\n    -1\n);\n\ntriangleAreaTester(\n    [80, 90, 100],\n    -1\n);\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let qs = q.map((qw) => qw.toString()).join(\"\");\n  let qw = qs.split(\"\");\n  let max = qw.reduce((a, b) => a + b, 0);\n  let p = qw.reduce((a, b) => a + b, 0);\n  let s = qw.reduce((a, b) => a + b, 0);\n  return p <= w && (s <= max);\n};\n\nconsole.log(willItFly([1, 2, 3, 2, 3], 5));\nconsole.log(willItFly([1, 2, 3, 2, 3], 9));\nconsole.log(willItFly([3, 2, 3], 5));\nconsole.log(willItFly([3, 2, 3], 9));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let l = arr.length\n  let p = arr.slice()\n\n  while (l > 1) {\n    let p1 = p.slice()\n    let p2 = p.slice()\n    let diff = []\n\n    for (let i = 0; i < l; i++) {\n      if (p[i]!== p1[i]) {\n        diff.push(p[i])\n        p1.splice(i, 1)\n        p2.splice(i, 1)\n      }\n    }\n\n    if (diff.length === 0) {\n      return 0\n    }\n\n    p = p1.concat(p2)\n    l = p.length\n  }\n\n  return p.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const total = lst1.reduce((total, lst) => {\n    return total + lst.length;\n  }, 0);\n  const common = lst1.concat(lst2);\n  const matched = common.filter((element) => {\n    return lst1.includes(element) && lst2.includes(element);\n  });\n  if (total === matched.length) return lst1;\n  if (total === matched.length + lst2.length) return lst2;\n  return matched;\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    const prime = primeFactors(a);\n    return prime.length === 2;\n}\n\nconst isPrime = (n) => {\n    const num = n;\n    if (num === 2 || num === 3) return true;\n    const limit = Math.sqrt(num);\n    for (let i = 2; i < limit; i++) {\n        if (num % i === 0) return false;\n    }\n    return true;\n}\n\nconst primeFactors = (n) => {\n    const prime = [];\n    for (let i = 2; i <= n; i++) {\n        if (isPrime(i)) {\n            prime.push(i);\n        }\n    }\n    return prime;\n}\n\n// console.log(isMultiplyPrime(30));\n// console.log(isMultiplyPrime(11));\n// console.log(isMultiplyPrime(3));\n// console.log(isMultiplyPrime(2));\n// console.log(isMultiplyPrime(0));\n// console.log(isMultiplyPrime(1));\n// console.log(isMultiplyPrime(4));\n// console.log(isMultiplyPrime(6));\n// console.log(isMultiplyPrime(9));\n// console.log(isMultiplyPrime(10));\n// console.log(isMultiplyPrime(20));\n// console.log(isMultiplyPrime(30));\n// console.log(isMultiplyPrime(40));\n// console.log(isMultiplyPrime(100));\n// console.log(isMultiplyPrime(111));\n// console.log(isMultiplyPrime(12));\n// console.log(isMultiplyPrime(15));\n// console.log(isMultiplyPrime(21));\n// console.log(isMultiplyPrime(30));\n// console.log(isMultiplyPrime(60));\n// console.log(isMultiplyPrime(81));\n// console.log(isMultiplyPrime(100));\n// console.log(isMultiplyPrime(201));\n// console.log(isMultiplyPrime(300));\n// console.log(isMultiplyPrime(600));\n// console.log(isMultiplyPrime(900));\n// console.log(isMultiplyPrime(900));\n// console.log(isMultiplyPrime(1200));\n// console.log(isMultiplyPrime(1500));\n// console.log(isMultiplyPrime(2000));\n// console.log(isMultiplyPrime(3000));\n// console.log(isMultiplyPrime(4000));\n// console.log(isMultiplyPrime(6000));\n// console.log(isMultiplyPrime(8000));\n// console.log(isMultiplyPrime(9000));\n// console.log(isMultiplyPrime(10000));\n// console.log(isMultiplyPrime(11000));\n// console.log(isMultiplyPrime(12000));\n// console.log(isMultiplyPrime(15000));\n// console.log(isMultiplyPrime(20000));\n// console.log(isMultiplyPrime(30000));\n// console.log(isMultiplyPrime(40000));\n// console.log(isMultiplyPrime(50000));\n// console.log(isMultiplyPrime(60000));\n// console.log(isMultiplyPrime(70000));\n// console.log(isMultiplyPrime(80000));\n// console.log(isMultiplyPrime(90000));\n// console.log(isMultiplyPrime(100000));\n// console.log(isMultiplyPrime(110000));\n// console.log(isMultiplyPrime(120000));\n// console.log(isMultiplyPrime(130000));\n// console.log(isMultiplyPrime(140000));\n// console.log(isMultiplyPrime(150000));\n// console.log(isMultiplyPrime(200000));\n// console.log(isMultiplyPrime(210000));\n// console.log(isMultiplyPrime(220000));\n// console.log(isMultiplyPrime(230000));\n// console.log(isMultiplyPrime(240000));\n// console.log(isMultiplyPrime(250000));\n// console.log(isMultiplyPrime(320000));\n// console.log(isMultiplyPrime(330000));\n// console.log(isMultiplyPrime(340000));\n// console.log(isMultiplyPrime(350000));\n// console.log(isMultiplyPrime(360000));\n// console.log(isMultiplyPrime(370000));\n// console.log(isMultiplyPrime(380000));\n// console.log(isMultiplyPrime(390000));\n// console.log(isMultiplyPrime(420000));\n// console.log(isMultiplyPrime(430000));\n// console.log(isMultiplyPrime(440000));\n// console.log(isMultiplyPrime(450000));\n// console.log(isMultiplyPrime(460000));\n// console.log(isMultiplyPrime(470000));\n// console.log(isMultiplyPrime(480000));\n// console.log(isMultiplyPrime(490000));\n// console.log(isMultiplyPrime(520000));\n// console.log(isMultiplyPrime(530000));\n// console.log(isMultiplyPrime(540000));\n// console.log(isMultiplyPrime(550000));\n// console.log(isMultiplyPrime(560000));\n// console.log(isMultiplyPrime(570000));\n// console.log(isMultiplyPrime(580000));\n// console.log(isMultiplyPrime(590000));\n// console.log(isMultiplyPrime(620000));\n// console.log(isMultiplyPrime(630000));\n// console.log(isMultiplyPrime(640000));\n// console.log(isMultiplyPrime(650000));\n// console.log(is"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) {\n    return true\n  }\n  if (x === n) {\n    return true\n  }\n  if (x === -1 * n) {\n    return true\n  }\n  if (x === -1 * n * n) {\n    return true\n  }\n  if (x === 0) {\n    return false\n  }\n  if (x % n === 0) {\n    return false\n  }\n  const result = (x * x - n * n) % (2 * n)\n  return result === 0\n}\n\nconst isSimplePowerTest = [\n  [1, 4],\n  [2, 2],\n  [8, 2],\n  [3, 2],\n  [3, 1],\n  [5, 3]\n]\n\nconsole.log(isSimplePowerTest.every(isSimplePower))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    let t = a;\n    let n = t.toString();\n    for (let i = 0; i < n.length - 1; i++) {\n        if (n[i]!== n[i + 1]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(64));\nconsole.log(iscube(-1));\nconsole.log(iscube(180));\nconsole.log(iscube(64 * 64 * 64 * 64 * 64 * 64 * 64 * 64 * 64));\nconsole.log(iscube(64 * 64 * 64 * 64 * 64 * 64 * 64 * 64 * 64));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  // return num.match(/^([0-9A-F]{2})+$/)[0].length;\n  return num.match(/^([0-9A-F]{2})+$/)[0].length;\n};\nconst prime = (num) => {\n  let primeNumber = 0;\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (num % key === 0) {\n      primeNumber += 1;\n      if (primeNumber === 2) {\n        return primeNumber;\n      }\n    }\n    key += 2;\n  }\n  return primeNumber;\n};\nconst isPrime = (num) => {\n  let primeNumber = 0;\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (num % key === 0) {\n      primeNumber += 1;\n      if (primeNumber === 2) {\n        return primeNumber;\n      }\n    }\n    key += 2;\n  }\n  return primeNumber;\n};\n\nconst primeNumbers = (num) => {\n  let primeNumber = 0;\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (prime(key) === primeNumber) {\n      primeNumber += 1;\n    }\n    key += 2;\n  }\n  return primeNumber;\n};\n\nconst isPrimeNumbers = (num) => {\n  let primeNumber = 0;\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (isPrime(key) === primeNumber) {\n      primeNumber += 1;\n    }\n    key += 2;\n  }\n  return primeNumber;\n};\n\nconst primeNumbersArray = (num) => {\n  let primeNumbers = [];\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (prime(key) === primeNumbers) {\n      primeNumbers += 1;\n    }\n    key += 2;\n  }\n  return primeNumbers;\n};\n\nconst isPrimeNumbersArray = (num) => {\n  let primeNumbers = [];\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (isPrime(key) === primeNumbers) {\n      primeNumbers += 1;\n    }\n    key += 2;\n  }\n  return primeNumbers;\n};\n\nconst allPrimeNumbers = (num) => {\n  let primeNumbers = [];\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (prime(key) === primeNumbers) {\n      primeNumbers += 1;\n    }\n    key += 2;\n  }\n  return primeNumbers;\n};\n\nconst allPrimeNumbersArray = (num) => {\n  let primeNumbers = [];\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (isPrime(key) === primeNumbers) {\n      primeNumbers += 1;\n    }\n    key += 2;\n  }\n  return primeNumbers;\n};\n\nconst allPrimeNumbersArrayByArray = (num) => {\n  let primeNumbers = [];\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (isPrime(key) === primeNumbers) {\n      primeNumbers += 1;\n    }\n    key += 2;\n  }\n  return primeNumbers;\n};\n\nconst allPrimeNumbersArrayByArrayByArray = (num) => {\n  let primeNumbers = [];\n  let key = 1;\n  let i = 1;\n  while (key <= num) {\n    if (isPrime(key) === primeNumbers) {\n      primeNumbers += 1;\n    }\n    key += 2;\n  }\n  return primeNumbers;\n};\n\nconst main = () => {\n  let num = \"1077E\";\n  console.log(hexKey(num));\n  console.log(primeNumbers(num));\n  console.log(primeNumbersArray(num));\n  console.log(isPrimeNumbers(num));\n  console.log(isPrimeNumbersArray(num));\n  console.log(allPrimeNumbers(num));\n  console.log(allPrimeNumbersArray(num));\n  console.log(allPrimeNumbersArrayByArray(num));\n  console.log(allPrimeNumbersArrayByArrayByArray(num));\n  return num;\n};\n\nconst main2 = () => {\n  let num = \"1077E\";\n  console.log(hexKey(num));\n  console.log(primeNumbers(num));\n  console.log(primeNumbersArray(num));\n  console.log(isPrimeNumbers(num));\n  console.log(isPrimeNumbersArray(num));\n  console.log(allPrimeNumbers(num));\n  console.log(allPrimeNumbersArray(num));\n  console.log(allPrimeNumbersArrayByArray(num));\n  console.log(allPrimeNumbersArrayByArrayByArray(num));\n  "}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let res = '';\n  for (let i = 0; i < decimal.toString().length; i++) {\n    let ch = decimal.toString()[i];\n    res += (ch === '1'? '1' : '0');\n  }\n  return 'db' + res + 'db';\n};\n\n/*\n  Convert a binary number to decimal\n  \n  Examples:\n  decimalToBinary(11)   # returns \"1011\"\n  decimalToBinary(16)   # returns \"11110110\"\n  */\nconst binaryToDecimal = (binary) => {\n  let res = 0;\n  for (let i = 0; i < binary.length; i++) {\n    let ch = binary[i];\n    res += ((ch === '1')? 1 : 0) * Math.pow(2, binary.length - i - 1);\n  }\n  return res;\n};\n\n/*\n  Convert a string to binary\n  \n  Examples:\n  binaryToString(\"0110111\")   # returns \"11111011\"\n  */\nconst binaryToString = (binary) => {\n  let res = '';\n  for (let i = 0; i < binary.length; i++) {\n    let ch = binary[i];\n    res += (ch === '1'? '1' : '0');\n  }\n  return res;\n};\n\n/*\n  Convert a binary number to decimal\n  \n  Examples:\n  binaryToDecimal(\"11111011\")   # returns \"16\"\n  */\nconst stringToBinary = (str) => {\n  let res = 0;\n  for (let i = 0; i < str.length; i++) {\n    let ch = str[i];\n    res += ((ch === '1')? 1 : 0) * Math.pow(2, str.length - i - 1);\n  }\n  return res;\n};\n\n/*\n  Convert a binary number to decimal\n  \n  Examples:\n  binaryToDecimal(\"11111011\")   # returns \"16\"\n  */\nconst stringToDecimal = (str) => {\n  return binaryToDecimal(stringToBinary(str));\n};\n\n/*\n  Convert a decimal number to binary\n  \n  Examples:\n  decimalToBinary(16)   # returns \"11110110\"\n  */\nconst decimalToBinaryStr = (decimal) => {\n  return binaryToString(decimalToBinary(decimal));\n};\n\nconst decimalToBinary = (decimal) => {\n  return binaryToString(decimalToBinary(decimal));\n};\n\n/*\n  Convert a binary number to decimal\n  \n  Examples:\n  binaryToDecimal(\"11111011\")   # returns \"16\"\n  */\nconst binaryToDecimalStr = (binary) => {\n  return decimalToBinaryStr(binaryToDecimal(binary));\n};\n\nconst binaryToDecimal = (binary) => {\n  return decimalToBinaryStr(binaryToDecimal(binary));\n};\n\n/*\n  Convert a binary number to decimal\n  \n  Examples:\n  binaryToDecimal(\"11111011\")   # returns \"16\"\n  */\nconst stringToDecimalStr = (str) => {\n  return decimalToBinaryStr(stringToBinary(str));\n};\n\nconst stringToDecimal = (str) => {\n  return decimalToBinaryStr(stringToDecimal(str));\n};\n\n/*\n  Convert a binary number to decimal\n  \n  Examples:\n  binaryToDecimal(\"11111011\")   # returns \"16\"\n  */\nconst decimalToString = (decimal) => {\n  return binaryToString(decimalToBinary(decimal));\n};\n\nconst decimalToString = (decimal) => {\n  return binaryToString(decimalToBinary(decimal));\n};\n\n/*\n  Convert a decimal number to binary\n  \n  Examples:\n  decimalToBinary(16)   # returns \"11110110\"\n  */\nconst binaryToString = (binary) => {\n  return decimalToBinaryStr(binaryToDecimal(binary));\n};\n\nconst binaryToString = (binary) => {\n  return decimalToBinaryStr(binaryToDecimal(binary));\n};\n\nconst decimalToString = (decimal) => {\n  return binaryToString(decimalToBinary(decimal));\n};\n\nconst decimalToString = (decimal) => {\n  return binaryToString(decimalToBinary(decimal));\n};\n\nconst main = () => {\n  console.log(binaryToDecimal('11111011'));\n  console.log(decimalToBinary('11111011'));\n  console.log(decimalToBinaryStr('11111011'));\n  console.log(binaryToDecimalStr('11111011'));\n  console.log(decimalToBinary('11111011'));\n  console.log(decimalToBinaryStr('11111011'));\n  console.log(decimalToString('16'));\n  console.log(decimalToString('16'));\n  console.log(binaryToString('11111011'));\n  console.log(decimalToString('16'));\n  console.log(decimalToString('16'));\n  console.log(binaryToDecimal('11111011'));\n  console.log(decimalToBinary('11111011'));\n  console.log(decimalToBinaryStr('11111011'));\n  console.log(binaryToDecimalStr('11111011'));\n  console.log(decimalToBinary('11111011'));\n  console.log(decimalToBinaryStr('1111"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    let length = s.length;\n    let str = [];\n    for (let i = 0; i < length; i++) {\n        let count = 0;\n        for (let j = i; j < length; j++) {\n            if (s[i] === s[j]) {\n                count++;\n            }\n        }\n        if (count < 3) {\n            return false;\n        }\n        str.push(count);\n    }\n    return true;\n};\n\nconsole.log(isHappy('abcd'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let result = []\n  for (let i = 0; i < grades.length; i++) {\n    let letterGrade = (grades[i] * 100) / 6.0\n    let letterGradeParsed = `${letterGrade.toFixed(2)}`\n    if (letterGrade < 35) {\n      result.push(`B`)\n    } else if (letterGrade >= 35 && letterGrade < 39) {\n      result.push(`B+`)\n    } else if (letterGrade >= 39 && letterGrade < 40) {\n      result.push(`C`)\n    } else if (letterGrade >= 40 && letterGrade < 45) {\n      result.push(`C+`)\n    } else if (letterGrade >= 45 && letterGrade < 49) {\n      result.push(`A`)\n    } else if (letterGrade >= 49 && letterGrade < 56) {\n      result.push(`A+`)\n    } else if (letterGrade >= 56 && letterGrade < 60) {\n      result.push(`A`)\n    } else if (letterGrade >= 60 && letterGrade < 64) {\n      result.push(`A-`)\n    } else if (letterGrade >= 64 && letterGrade < 70) {\n      result.push(`B`)\n    } else if (letterGrade >= 70 && letterGrade < 75) {\n      result.push(`B+`)\n    } else if (letterGrade >= 75 && letterGrade < 80) {\n      result.push(`C`)\n    } else if (letterGrade >= 80 && letterGrade < 85) {\n      result.push(`C+`)\n    } else if (letterGrade >= 85 && letterGrade < 90) {\n      result.push(`A`)\n    } else if (letterGrade >= 90 && letterGrade < 95) {\n      result.push(`A+`)\n    } else if (letterGrade >= 95 && letterGrade < 100) {\n      result.push(`A`)\n    } else {\n      result.push(`A-`)\n    }\n  }\n  return result\n}\n\nmodule.exports = numericalLetterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const primeList = ['2', '3', '5', '7', '11', '13', '17', '19', '23', '29', '31', '37', '41', '43', '47', '53', '59', '61', '67', '71', '73', '79', '83', '89', '97', '101', '103', '107', '109', '113', '127', '131', '137', '139', '149', '151', '157', '163', '167', '173', '179', '181', '191', '193', '197', '199', '211', '223', '227', '229', '233', '239', '241', '251', '257', '263', '269', '271', '277', '281', '283', '293', '307', '311', '313', '317', '331', '337', '347', '349', '353', '359', '367', '373', '379', '383', '389', '397', '401', '409', '419', '421', '431', '433', '439', '443', '449', '457', '461', '463', '467', '479', '487', '491', '499', '503', '509', '521', '523', '541', '547', '557', '563', '569', '571', '577', '587', '593', '599', '601', '607', '613', '617', '619', '631', '641', '643', '647', '653', '659', '661', '673', '677', '683', '691', '701', '709', '719', '727', '733', '739', '743', '751', '757', '761', '769', '773', '787', '797', '809', '811', '821', '823', '827', '829', '839', '853', '857', '859', '863', '877', '881', '883', '887', '907', '911', '919', '929', '937', '941', '947', '953', '967', '971', '977', '983', '991', '997', '1009', '1013', '1019', '1021', '1031', '1033', '1039', '1049', '1051', '1061', '1063', '1069', '1087', '1091', '1093', '1097', '1099', '1101', '1103', '1107', '1109', '1117', '1123', '1129', '1151', '1153', '1163', '1171', '1181', '1187', '1193', '1201', '1213', '1217', '1223', '1229', '1231', '1237', '1249', '1259', '1267', '1279', '1283', '1289', '1291', '1297', '1301', '1303', '1307', '1319', '1321', '1327', '1361', '1367', '1373', '1381', '1399', '1409', '1423', '1427', '1429', '1433', '1439', '1447', '1451', '1453', '1459', '1471', '1481', '1483', '1487', '1489', '1493', '1499', '1511', '1523', '1531', '1543', '1549', '1553', '1559', '1567', '1571', '1579', '1583', '1597', '1601', '1607', '1609', '1613', '1619', '1621', '1627', '1637', '1657', '1663', '1667', '1669', '1693', '1697', '1699', '1709', '1721', '1723', '1733', '1741', '1747', '1753', '1759', '1777', '1783', '1787', '1789', '1801', '1811', '1823', '1831', '1847', '1861', '1867', '1871', '1873', '1877', '1879', '1889', '1901', '1907', '1913', '1931', '1933', '1949', '1951', '1973', '1979', '1987', '1993', '1997', '1999', '2003', '2011', '2013', '2017'];\n  let prime = false;\n  for (let i = 2; i < primeList.length; i++) {\n    if (primeList[i] == string.length) {\n      prime = true;\n      break;\n    }\n  }\n  return prime;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n    let s = 0\n    for (let i = 2; i < n; i++) {\n        if (i === n - 1) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === 2) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 2) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 3) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 4) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 5) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 6) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 7) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 8) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 9) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 10) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 11) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 12) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 13) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 14) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 15) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 16) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 17) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 18) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 19) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 20) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 21) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 22) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 23) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 24) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 25) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 26) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 27) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 28) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 29) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 30) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 31) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 32) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 33) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 34) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 35) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 36) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 37) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 38) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 39) {\n            if (n - i > 1) {\n                s += i\n            }\n            continue\n        }\n        if (i === n - 40) {\n            if (n - i > 1) {\n                s +="}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0\n  let binStr = \"\"\n  while (N > 0) {\n    let digit = N % 2\n    N = N / 2\n    sum = sum + digit\n    binStr = (digit === 0? \"0\" : \"1\") + binStr\n  }\n  return sum + binStr\n}\n\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const a = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      a.push(lst[i])\n    }\n  }\n  return a\n}\n\n/*Given two lists, l1 and l2, return a new list containing all elements that appear in both lists,\n  in the order they appear in both lists.\n\n\n  Examples:\n      intersection([4, 2, 6, 7, 8, 9], [5, 3, 7, 9, 10, 12]) ==> [4, 2, 6, 7, 9, 10, 12]\n  */\nconst intersection = (l1, l2) => {\n  const a = []\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i])!== -1) {\n      a.push(l1[i])\n    }\n  }\n  return a\n}\n\n/*Given two lists, l1 and l2, return a new list containing all elements that appear in either list,\n  in the order they appear in the lists.\n\n\n  Examples:\n      union([1, 2, 3, 4], [2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  */\nconst union = (l1, l2) => {\n  const a = []\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      a.push(l1[i])\n    }\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (l1.indexOf(l2[i]) === -1) {\n      a.push(l2[i])\n    }\n  }\n  return a\n}\n\n/*Given a sorted array, return a new array containing all elements in the original array,\n  but in a different order.\n\n\n  Examples:\n      sort([1, 2, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  */\nconst sort = (arr) => {\n  const a = []\n  for (let i = 0; i < arr.length; i++) {\n    a.push(arr[i])\n  }\n  return a\n}\n\n/*Given two lists, l1 and l2, return a new list that contains the unique elements of both lists.\n\n\n  Examples:\n      union([1, 2, 3, 4, 5], [1, 2, 3, 5]) ==> [1, 2, 3, 4, 5]\n  */\nconst unique = (l1, l2) => {\n  const a = []\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.indexOf(l1[i]) === -1) {\n      a.push(l1[i])\n    }\n  }\n  return a\n}\n\nmodule.exports = {\n  add,\n  intersection,\n  union,\n  sort,\n  unique\n}<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const s = s.toLowerCase();\n  const arr = s.split(' ');\n  const newArray = [];\n\n  const alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',''];\n\n  for (let i = 0; i < arr.length; i++) {\n    const newWord = '';\n    const index = Math.floor(Math.random() * alphabet.length);\n    newWord = newWord + alphabet[index];\n    newArray.push(newWord);\n  }\n  return newArray.join(' ');\n};\n\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const lstSize = lst.length;\n  let result = [];\n  if (lstSize) {\n    const lstLastIndex = lstSize - 1;\n    for (let i = 0; i < lstLastIndex; i++) {\n      const lstRow = lst[i];\n      const lstLastRowSize = lstRow.length;\n      for (let j = 0; j < lstLastRowSize; j++) {\n        const lstRowValue = lstRow[j];\n        const xValue = x + i;\n        const xRow = x + i;\n        const xColumn = j;\n        const yRow = lstLastRowSize - j;\n        const yColumn = lstLastIndex - i;\n        if (lstRowValue === xValue) {\n          result.push([xRow, xColumn]);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow2 = (lst, x) => {\n  const lstSize = lst.length;\n  let result = [];\n  if (lstSize) {\n    const lstLastIndex = lstSize - 1;\n    for (let i = 0; i < lstLastIndex; i++) {\n      const lstRow = lst[i];\n      const lstLastRowSize = lstRow.length;\n      for (let j = 0; j < lstLastRowSize; j++) {\n        const lstRowValue = lstRow[j];\n        const xValue = x + i;\n        const xRow = x + i;\n        const xColumn = j;\n        const yRow = lstLastRowSize - j;\n        const yColumn = lstLastIndex - i;\n        if (lstRowValue === xValue) {\n          result.push([xRow, xColumn]);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow3 = (lst, x) => {\n  const lstSize = lst.length;\n  let result = [];\n  if (lstSize) {\n    const lstLastIndex = lstSize - 1;\n    for (let i = 0; i < lstLastIndex; i++) {\n      const lstRow = lst[i];\n      const lstLastRowSize = lstRow.length;\n      for (let j = 0; j < lstLastRowSize; j++) {\n        const lstRowValue = lstRow[j];\n        const xValue = x + i;\n        const xRow = x + i;\n        const xColumn = j;\n        const yRow = lstLastRowSize - j;\n        const yColumn = lstLastIndex - i;\n        if (lstRowValue === xValue) {\n          result.push([xRow, xColumn]);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow4 = (lst, x) => {\n  const lstSize = lst.length;\n  let result = [];\n  if (lstSize) {\n    const lstLastIndex = lstSize - 1;\n    for (let i = 0; i < lstLastIndex; i++) {\n      const lstRow = lst[i];\n      const lstLastRowSize = lstRow.length;\n      for (let j = 0; j < lstLastRowSize; j++) {\n        const lstRowValue = lstRow[j];\n        const xValue = x + i;\n        const xRow = x + i;\n        const xColumn = j;\n        const yRow = lstLastRowSize - j;\n        const yColumn = lstLastIndex - i;\n        if (lstRowValue === xValue) {\n          result.push([xRow, xColumn]);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow5 = (lst, x) => {\n  const lstSize = lst.length;\n  let result = [];\n  if (lstSize) {\n    const lstLastIndex = lstSize - 1;\n    for (let i = 0; i < lstLastIndex; i++) {\n      const lstRow = lst[i];\n      const lstLastRowSize = lstRow.length;\n      for (let j = 0; j < lstLastRowSize; j++) {\n        const lstRowValue = lstRow[j];\n        const xValue = x + i;\n        const xRow = x + i;\n        const xColumn = j;\n        const yRow = lstLastRowSize - j;\n        const yColumn = lstLastIndex - i;\n        if (lstRowValue === xValue) {\n          result.push([xRow, xColumn]);\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst getRow6 = (lst, x) => {\n  const lstSize = lst.length;\n  let result = [];\n  if (lstSize) {\n    const lstLastIndex = lstSize - 1;\n    for (let i = 0; i < lstLastIndex; i++) {\n      const lstRow = l"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length;\n  if (len < 2) return array;\n  const diff = array[0] + array[1];\n  const even = (diff % 2)? array.reverse() : array;\n  const odd = array.reverse();\n  const result = [...even,...odd];\n  return result;\n}\n\nexport default sortArray;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let sArray = s.split('');\n  let newArray = [];\n  for (let i = 0; i < sArray.length; i++) {\n    let x = alphabet.indexOf(sArray[i]);\n    if (x < alphabet.length) {\n      newArray.push(alphabet[x + (alphabet.length / 2) * 2]);\n    } else {\n      newArray.push(alphabet[x - (alphabet.length / 2) * 2]);\n    }\n  }\n  return newArray.join('');\n};\n\n/*\n  Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let newArray = [];\n  for (let i = 0; i < s.length; i++) {\n    let x = alphabet.indexOf(s[i]);\n    if (x < alphabet.length) {\n      newArray.push(alphabet[x - (alphabet.length / 2) * 2]);\n    } else {\n      newArray.push(alphabet[x + (alphabet.length / 2) * 2]);\n    }\n  }\n  return newArray.join('');\n};\n\nexport { encrypt, decrypt };\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n  let nextSmallest = (l) => {\n    const first = l[0]\n    const second = l[1]\n    return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n  }\n  return nextSmallest(lst)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconstnex tSmallest = (lst) => {\n  let nextSmallest = (l) => {\n    const first = l[0]\n    const second = l[1]\n    return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n  }\n  return nextSmallest(lst)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2] < first) && (lst[lst.length - 1] < second)\n}\n\nconst nextSmallest = (l) => {\n  const first = l[0]\n  const second = l[1]\n  return (lst.length >= 2) && (lst[lst.length - 2]"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const s = S.split(' ')\n  let counter = 0\n  for (let i = 0; i < s.length; i += 1) {\n    const c = s[i]\n    if (c == '.' || c == '?' || c == '!') {\n      counter += 1\n    } else {\n      counter = 0\n    }\n  }\n  return counter\n}\n\nmodule.exports = isBored\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n    if (typeof x!== 'number') {\n        throw new TypeError('x must be a number');\n    }\n    if (typeof y!== 'number') {\n        throw new TypeError('y must be a number');\n    }\n    if (typeof z!== 'number') {\n        throw new TypeError('z must be a number');\n    }\n    return x + y === z && x % 1 === 0 && y % 1 === 0;\n}\n\nconst isPrime = (n) => {\n    return n % 1 === 0 && n > 1;\n}\n\nconst isEven = (n) => {\n    return n % 2 === 0;\n}\n\nconst isOdd = (n) => {\n    return n % 2!== 0;\n}\n\nconst isPrimeNumber = (n) => {\n    return isPrime(n) &&!isEven(n) &&!isOdd(n);\n}\n\nconst isOddNumber = (n) => {\n    return isOdd(n) &&!isEven(n);\n}\n\nconst isPrimeNumberOrOdd = (n) => {\n    return isPrimeNumber(n) || isOddNumber(n);\n}\n\nconst isPrimeNumberOrEven = (n) => {\n    return isPrimeNumber(n) || isEven(n);\n}\n\nconst isPrimeNumberOrOddOrEven = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n);\n}\n\nconst isOddOrEven = (n) => {\n    return isOdd(n) || isEven(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOdd = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEven = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n);\n}\n\nconst isOddOrEvenOrPrime = (n) => {\n    return isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEven = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n) || isEven(n) || isPrimeNumber(n);\n}\n\nconst isPrimeNumberOrOddOrEvenOrPrimeOrOddOrEvenOrPrime = (n) => {\n    return isPrimeNumberOrEven(n) || isOddOrEven(n) || isPrimeNumber(n) || isOdd(n)"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const encode = (message) => {\n        const encode = (message) => {\n            const encode = (message) => {\n                let encoded = '';\n                for (let i = 0; i < message.length; i++) {\n                    if (message.charAt(i) ==='') {\n                        encoded +='';\n                    } else if (message.charAt(i) === 'T') {\n                        encoded += 'H';\n                    } else if (message.charAt(i) === 'H') {\n                        encoded += 'T';\n                    } else if (message.charAt(i) === 'K') {\n                        encoded += 'S';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'K';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'S';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'M') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'S';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'S';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'S';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';\n                    } else if (message.charAt(i) === 'S') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'C') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'C';\n                    } else if (message.charAt(i) === 'G') {\n                        encoded += 'G';"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0;\n  for (let x of lst) {\n    if (isPrime(x)) {\n      max = x;\n    }\n  }\n  let sum = 0;\n  for (let x of lst) {\n    sum += x.toString().charAt(0);\n  }\n  return sum + max;\n}\n\nfunction isPrime(n) {\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const isNotEmpty = Object.keys(dict).length > 0\n  const isNotEmptyAndNotInUpper = isNotEmpty && Object.keys(dict).every((key) => {\n    const isNotInUpper = key.toUpperCase()!== key.toLowerCase()\n    const isNotInLower = key.toLowerCase()!== key.toUpperCase()\n    return isNotEmptyAndNotInUpper && isNotInUpper || isNotEmptyAndNotInLower\n  })\n  return isNotEmpty && isNotEmptyAndNotInUpper\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = [];\n  for (let i = 1; i <= n; i++) {\n    arr.push(i);\n  }\n  return arr;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) return 0\n  if (b === 1) return a\n  if (a === 1) return b\n  if (a === -1) return b\n  if (b === -1) return a\n  let aInt = a * 1\n  let bInt = b * 1\n  let result = 0\n  while (aInt >= 10) {\n    result = result + aInt % 10\n    aInt = aInt / 10\n  }\n  while (bInt >= 10) {\n    result = result + bInt % 10\n    bInt = bInt / 10\n  }\n  return result\n}\n\nconsole.log(multiply(19, 28))\nconsole.log(multiply(2020, 1851))\nconsole.log(multiply(14, -15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    return s.toUpperCase().split('').reduce((acc, c, i) => {\n        if(i % 2 === 0) {\n            acc += c === 'A' || c === 'E' || c === 'I' || c === 'O' || c === 'U'? 1 : 0;\n        }\n        return acc;\n    }, 0);\n};\n\nconsole.log(countUpper('aBCdEf'));\nconsole.log(countUpper('abcdefg'));\nconsole.log(countUpper('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  if (typeof value!== \"number\") {\n    throw new TypeError(\"input must be a number\");\n  }\n  // Check if value is an integer\n  if (Math.floor(value)!== value) {\n    throw new TypeError(\"input must be an integer\");\n  }\n  let integerValue = Math.floor(value);\n  let floatValue = value - integerValue;\n  let sign = (integerValue > 0)? \"positive\" : \"negative\";\n  // If the number is an integer, return the integer\n  if (Math.abs(floatValue) < 0.000001) {\n    return integerValue;\n  }\n  // If the number is not an integer, return the closest integer to the float value\n  if (floatValue < 0) {\n    return Math.ceil(value);\n  } else {\n    return Math.floor(value);\n  }\n};\n\nconsole.log(closestInteger(10));\nconsole.log(closestInteger(\"15.3\"));\nconsole.log(closestInteger(\"-14.5\"));\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = [];\n  let sum = 1;\n  let i = 0;\n  while (sum <= n) {\n    pile.push(sum);\n    sum += 2;\n    i++;\n  }\n  return pile;\n};\n\nconst main = () => {\n  let n = parseInt(process.argv[2]);\n  let pile = makeAPile(n);\n  console.log(pile);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    s = s.trim();\n    return s.split(/[,\\s]+/);\n}\n\n/*\n  This function will convert a given arrayof words into a string of\n  wordssepar ated by commas or spaces.\n  \n  For example:\n  convertWords([1,2,3,4,5,6]) == \"1, 2, 3, 4, 5, 6\"\n  convertWords([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == \"1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\"\n  */\nconst convertWords = (a) => {\n    const words = [];\n    for(let i = 0; i < a.length; i++) {\n        words.push(a[i]);\n    }\n    return words.join(', ');\n}\n\n/*\n  This function will return the average of the given arrayof\n  numbers.\n  \n  For example:\n  average([1,2,3,4,5,6]) == 3.0\n  average([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 12.0\n  */\nconst average = (a) => {\n    let total = 0;\n    for(let i = 0; i < a.length; i++) {\n        total += a[i];\n    }\n    return total/a.length;\n}\n\n/*\n  This function will return the median of the given arrayof\n  numbers.\n  \n  For example:\n  median([1,2,3,4,5,6]) == 3.0\n  median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 14.0\n  */\nconst median = (a) => {\n    const sorted = a.sort((a1, a2) => a1 - a2);\n    const middle = sorted.length/2;\n    return sorted[middle];\n}\n\n/*\n  This function will return the mode of the given arrayof\n  numbers.\n  \n  For example:\n  mode([1,2,3,4,5,6]) == 6.0\n  mode([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 20.0\n  */\nconst mode = (a) => {\n    const sorted = a.sort((a1, a2) => a1 - a2);\n    return sorted[sorted.indexOf(a[0])];\n}\n\n/*\n  This function will return the sum of the given arrayof\n  numbers.\n  \n  For example:\n  sum([1,2,3,4,5,6]) == 15.0\n  sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 76.0\n  */\nconst sum = (a) => {\n    let total = 0;\n    for(let i = 0; i < a.length; i++) {\n        total += a[i];\n    }\n    return total;\n}\n\n/*\n  This function will return the median of the given arrayof\n  numbers.\n  \n  For example:\n  median([1,2,3,4,5,6]) == 3.0\n  median([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 14.0\n  */\nconst median = (a) => {\n    const sorted = a.sort((a1, a2) => a1 - a2);\n    const middle = sorted.length/2;\n    return sorted[middle];\n}\n\n/*\n  This function will return the mode of the given arrayof\n  numbers.\n  \n  For example:\n  mode([1,2,3,4,5,6]) == 6.0\n  mode([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 20.0\n  */\nconst mode = (a) => {\n    const sorted = a.sort((a1, a2) => a1 - a2);\n    return sorted[sorted.indexOf(a[0])];\n}\n\n/*\n  This function will return the sum of the given arrayof\n  numbers.\n  \n  For example:\n  sum([1,2,3,4,5,6]) == 15.0\n  sum([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]) == 76.0\n  */\nconst sum = (a) => {\n    let total = 0;\n    for(let i = 0; i < a.length; i++) {\n        total += a[i];\n    }\n    return total"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  const evenNum = [...Array(x + 1 - y + 1)].reduce((acc, num) => {\n    if (num % 2 === 0) {\n      return acc + num;\n    }\n    return acc;\n  }, 0);\n  return evenNum;\n}\n\nexport default chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const i = (n - 1) + Math.floor((m - n) / 2);\n  const j = n + Math.floor((m - n) / 2);\n\n  const avg = (n - i) + (j - n) / 2;\n\n  return avg.toString(2);\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const temp = []\n  let index = 0\n  while (index < x) {\n    const num = x.charAt(index) - '0'\n    if (num % 2 === 0) {\n      temp.push(x.charAt(index))\n    }\n    index++\n  }\n  return temp.sort()\n}\n\n// console.log(uniqueDigits([15, 33, 1422, 1]))\n// console.log(uniqueDigits([152, 323, 1422, 10]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    let len = arr.length,\n        i = 0,\n        temp;\n    \n    while (i < len) {\n        temp = arr[i];\n        arr[i] = {\n            value: temp,\n            name: arr[i]\n        };\n        i++;\n    }\n    arr.sort((a, b) => {\n        if (a.value > b.value) {\n            return -1;\n        } else if (a.value < b.value) {\n            return 1;\n        } else {\n            return 0;\n        }\n    });\n    arr.reverse();\n    let result = [];\n    for (let i = 0; i < arr.length; i++) {\n        result.push(arr[i].name);\n    }\n    return result;\n};\n\nexport default byLength;<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  var result = [];\n  for (var i = 1; i <= n; i++) {\n    result.push(1);\n    for (var j = 2; j <= i; j++) {\n      result.push(result[j - 1] * j);\n    }\n  }\n  return result;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenCount = 0;\n  let oddCount = 0;\n  let count = 1;\n  for (let i = 1; i < n; i++) {\n    let x = (n - i) % 2;\n    if (x === 0) {\n      evenCount++;\n    } else {\n      oddCount++;\n    }\n    count++;\n  }\n  return [count, evenCount, oddCount];\n};\n\n/*\n  Given a string s, return the number of palindromic substrings in s.\n  A palindromic substring is a string that reads the same backwards as forward.\n\n  Example:\n\n      Input: \"ABCD\"\n      Output: 2\n\n  Note:\n      1. 1 <= s.length <= 10^5\n      2. s consist of only lowercase letters.\n*/\nconst numberOfPalindromicSubstrings = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    for (let j = i + 1; j < s.length; j++) {\n      if (s[i] === s[j]) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of occurrences of the character 'a' in the\n  string.\n\n  Example:\n\n      Input: \"aaa\"\n      Output: 3\n\n  Note:\n      1. 1 <= s.length <= 10^5\n      2. The character 'a' has a value from 0 to 100.\n*/\nconst numberOfA = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of occurrences of the character 'a' in the\n  string.\n\n  Example:\n\n      Input: \"aaa\"\n      Output: 3\n\n  Note:\n      1. 1 <= s.length <= 10^5\n      2. The character 'a' has a value from 0 to 100.\n*/\nconst numberOfA = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string s, return the number of occurrences of the character 'a' in the\n  string.\n\n  Example:\n\n      Input: \"aaa\"\n      Output: 3\n\n  Note:\n      1. 1 <= s.length <= 10^5\n      2. The character 'a' has a value from 0 to 100.\n*/\nconst numberOfA = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst numberOfA = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a') {\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    let sum = 0\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > 0) {\n            sum += arr[i]\n        }\n    }\n    return sum > 0\n}\n\nconsole.log(countNums([-1, 11, -11]))\nconsole.log(countNums([1, 1, 2]))\nconsole.log(countNums([1, 2, 3]))\nconsole.log(countNums([2, 2, 2]))\nconsole.log(countNums([2, 2, -2]))\nconsole.log(countNums([-2, 2, -2]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const arrLen = arr.length\n  const left = 0\n  const right = arrLen - 1\n\n  if (arrLen === 0) {\n    return true\n  }\n  if (arr[right] < arr[left]) {\n    return false\n  }\n\n  let result = true\n\n  while (right > left) {\n    const middle = Math.floor((left + right) / 2)\n    if (arr[middle] < arr[right]) {\n      result = false\n      break\n    }\n    if (arr[middle] > arr[right]) {\n      right = middle\n    } else {\n      left = middle + 1\n    }\n  }\n\n  return result\n}\n\nmoveOneBall([3, 4, 5, 1, 2])\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // base case\n  if (lst1.length === 0) {\n    return lst2.length === 0? \"YES\" : \"NO\";\n  } else if (lst2.length === 0) {\n    return lst1.length === 0? \"YES\" : \"NO\";\n  }\n\n  // find the minimum of two lists\n  const min = Math.min(lst1.length, lst2.length);\n  let i = 0;\n  while (i < min) {\n    if (lst1[i]!== lst2[i]) {\n      return \"NO\";\n    }\n    i++;\n  }\n  if (i === min) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5]));\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    let count = 0;\n    const ret = {};\n    const s = test.toLowerCase();\n    const len = s.length;\n    for (let i = 0; i < len; i++) {\n        if (ret[s[i]]) {\n            ret[s[i]] += 1;\n        } else {\n            ret[s[i]] = 1;\n        }\n        count += 1;\n    }\n    return ret;\n};\n\n/*\n  Given a string representing a space s epara ted lowercase letters, return a string \n  with a string of the same length where each character has been replaced with a \n  space.\n  Example:\n  spaced(test) == 'a b c'\n  */\nconst spaced = (test) => {\n    return test.replace(/\\w/g,'');\n};\n\nconst main = () => {\n    const histogramInput = document.getElementById('histogram').value;\n    const spacedInput = document.getElementById('spaced').value;\n    const histogramResult = histogram(histogramInput);\n    const spacedResult = spaced(spacedInput);\n    document.getElementById('histogramResult').textContent = JSON.stringify(histogramResult);\n    document.getElementById('spacedResult').textContent = spacedResult;\n};\n\nwindow.addEventListener('load', main);\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  const length = s.length;\n  for (let i = 0; i < length; i++) {\n    if (c.indexOf(s[i]) === -1) {\n      result.push(s[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = {};\n  lst.forEach(element => {\n    count[element] = count[element] || 0;\n    count[element] += 1;\n  });\n  const res = [];\n  for (let k in count) {\n    if (count.hasOwnProperty(k)) {\n      res.push(`the number of odd elements ${count[k]} of the str${k} of the ${k}put.`);\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let minSum = 0\n  for (let i = 0; i < nums.length; i++) {\n    const sub = nums.slice(i, i + 1)\n    let sum = 0\n    for (let j = 0; j < sub.length; j++) {\n      sum += sub[j]\n    }\n    if (sum > minSum) {\n      minSum = sum\n    }\n  }\n  return minSum\n}\n\nmodule.exports = minSubArraySum\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const rows = grid.length\n    const cols = grid[0].length\n    const max = rows * cols\n\n    const visited = new Array(max)\n    const visited2 = new Array(max)\n\n    const buckets = new Array(max)\n    buckets.fill(0)\n\n    const curr = new Array(max)\n    curr.fill(0)\n\n    let count = 0\n    let count2 = 0\n    let index = 0\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 1) {\n                curr[index] = i\n                curr[index + 1] = j\n                count++\n                index += 2\n\n                if (count > capacity) {\n                    index -= 2\n                    count = 0\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 0) {\n                count2++\n                if (count2 > capacity) {\n                    index -= 2\n                    count2 = 0\n                }\n            }\n        }\n    }\n\n    for (let i = 0; i < max; i++) {\n        visited[i] = visited2[i] = false\n    }\n\n    for (let i = 0; i < rows; i++) {\n        for (let j = 0; j < cols; j++) {\n            if (grid[i][j] === 0) {\n                index = i * cols + j\n                if (!visited[index]) {\n                    if (buckets[index] === 0) {\n                        buckets[index] = 1\n                    } else {\n                        buckets[index]++\n                    }\n                    count = 0\n                    index += 2\n\n                    if (count > capacity) {\n                        index -= 2\n                        count = 0\n                    }\n                }\n            }\n        }\n    }\n\n    return buckets\n}\n\nconsole.log(maxFill([[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1))\nconsole.log(maxFill([[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1], [0, 1, 1, 1]], 2))\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 5))\nconsole.log(maxFill([[0, 0, 0], [0, 0, 0]], 0))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let a = arr.slice();\n  let res = [];\n\n  // Convert array to binary string\n  let binary = a.map(v => v.toString(2));\n\n  // Sorts based on number of ones\n  let sort1 = binary.sort((a, b) => {\n    return binary.indexOf(a) - binary.indexOf(b);\n  });\n\n  // Sorts based on number of zeros\n  let sort2 = binary.sort((a, b) => {\n    let diff = binary.indexOf(a) - binary.indexOf(b);\n    return diff == 0? binary.indexOf(b) - binary.indexOf(a) : diff;\n  });\n\n  // Add the sorted arrays\n  for (let i = 0; i < sort1.length; i++) {\n    res.push(sort1[i]);\n  }\n\n  for (let i = 0; i < sort2.length; i++) {\n    res.push(sort2[i]);\n  }\n\n  return res;\n};\n\nconsole.log(sortArray([1, 0, 2, 3, 4]));\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let output = [];\n  let words = s.split(\"\");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === n) {\n      output.push(words[i]);\n    }\n  }\n  return output;\n};\n\n/*\n Given a string s, you will be given two integers m and n. Write a function to return a list of all the words in s which length is exactly equal to m.\n\nExample:\n Given s = \"a good   example\", m = 5, n = 3, return [\"example\"].\n Given s = \"aa good example\", m = 3, n = 5, return [\"example\"].\n Given s = \"a good example\", m = 5, n = 5, return [\"example\"].\n Given s = \"a good example\", m = 2, n = 3, return [\"a good example\"].\n Given s = \"a good example\", m = 5, n = 1, return [\"a good example\"].\n Given s = \"a good example\", m = 5, n = 0, return [\"a good example\"].\n Given s = \"a good example\", m = 0, n = 3, return [\"a good example\"].\n */\nconst selectWords = (s, m, n) => {\n  let output = [];\n  let words = s.split(\"\");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === m) {\n      output.push(words[i]);\n    }\n  }\n  if (output.length === 0) {\n    output = selectWords(s, m, n - 1);\n  }\n  return output;\n};\n\n/*\n Given a string s, you will be given two integers m and n. Write a function to return a list of all the words in s which length is less than or equal to m.\n\nExample:\n Given s = \"a good example\", m = 5, n = 3, return [\"good\",\"example\"].\n Given s = \"a good example\", m = 5, n = 5, return [\"good\",\"example\"].\n Given s = \"a good example\", m = 2, n = 3, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 5, n = 1, return [\"a good example\"].\n Given s = \"a good example\", m = 5, n = 0, return [\"a good example\"].\n Given s = \"a good example\", m = 0, n = 3, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 0, n = 2, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 0, n = 1, return [\"a good example\"].\n */\nconst selectWords = (s, m, n) => {\n  let output = [];\n  let words = s.split(\"\");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length <= m) {\n      output.push(words[i]);\n    }\n  }\n  return output;\n};\n\n/*\n Given a string s, you will be given two integers m and n. Write a function to return a list of all the words in s which length is between m and n.\n\nExample:\n Given s = \"a good example\", m = 5, n = 3, return [\"good\",\"example\"].\n Given s = \"a good example\", m = 5, n = 5, return [\"good\",\"example\"].\n Given s = \"a good example\", m = 2, n = 3, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 5, n = 1, return [\"a good example\"].\n Given s = \"a good example\", m = 5, n = 0, return [\"a good example\"].\n Given s = \"a good example\", m = 0, n = 3, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 0, n = 2, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 0, n = 1, return [\"a good example\"].\n */\nconst selectWords = (s, m, n) => {\n  let output = [];\n  let words = s.split(\"\");\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length >= m && words[i].length <= n) {\n      output.push(words[i]);\n    }\n  }\n  return output;\n};\n\n/*\n Given a string s, you will be given two integers m and n. Write a function to return a list of all the words in s which length is exactly n.\n\nExample:\n Given s = \"a good example\", m = 5, n = 3, return [\"good\",\"example\"].\n Given s = \"a good example\", m = 5, n = 5, return [\"good\",\"example\"].\n Given s = \"a good example\", m = 2, n = 3, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 5, n = 1, return [\"a good example\"].\n Given s = \"a good example\", m = 5, n = 0, return [\"a good example\"].\n Given s = \"a good example\", m = 0, n = 3, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 0, n = 2, return [\"a good\",\"example\"].\n Given s = \"a good example\", m = 0, n = 1, return [\"a good example\"].\n */\nconst selectWords = (s, m, n) => {\n  let output = [];\n  let words = s.split(\"\");\n  for ("}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const word = word.toLowerCase();\n  const vowelList = ['a', 'e', 'i', 'o', 'u'];\n  let prevIndex = word.length;\n  let nextIndex = word.length;\n  let index = -1;\n  let closest = '';\n  while (index < word.length - 1) {\n    const vowel = word.charAt(index);\n    if (vowelList.includes(vowel)) {\n      if (vowel === 'e' || vowel === 'i' || vowel === 'o' || vowel === 'u') {\n        closest = vowel;\n        break;\n      }\n    }\n    nextIndex = index + 1;\n    while (nextIndex < word.length) {\n      const nextChar = word.charAt(nextIndex);\n      if (vowelList.includes(nextChar)) {\n        closest = nextChar;\n        break;\n      }\n      nextIndex++;\n    }\n    prevIndex = index;\n    index++;\n  }\n  return closest;\n};\n\nconst word = 'havoc';\nconsole.log(getClosestVowel(word));\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const match = (lst, i) => {\n    const parens = 0\n    while (lst[i] === '(') {\n      parens++\n    }\n    if (lst[i] === ')') {\n      parens--\n    }\n    if (parens < 0) {\n      return false\n    }\n    if (parens === 0) {\n      return match(lst, i + 1)\n    }\n  }\n\n  const len = lst.length\n  if (lst[0] === '(') {\n    return match(lst, 1)\n  }\n  if (lst[len - 1] === ')') {\n    return match(lst, len - 1)\n  }\n\n  return false\n}\n\nconsole.log(matchParens([]) === 'No')\nconsole.log(matchParens(['(', ')', ')']) === 'Yes')\nconsole.log(matchParens(['()()', ')', '(']) === 'Yes')\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.find(e => e >= 0)\n\n  if (k <= 1) {\n    return [max]\n  }\n\n  const a = arr.slice(0, k)\n  const b = arr.slice(k)\n\n  if (max > a[a.length - 1]) {\n    return [max]\n  }\n\n  if (max > b[0]) {\n    return [max]\n  }\n\n  return a.concat(b)\n}\n\n// Test\n\nconst test = async () => {\n  const arr = [-3, -4, 5]\n  const k = 3\n\n  const res = maximum(arr, k)\n\n  console.log(res)\n}\n\n// run\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let result = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 0) {\n            result += lst[i];\n        }\n    }\n    return result;\n};\n\nconsole.log(solution([5, 8, 7, 1, 2, 3, 4, 3, 2, 1, 0, 8, 7, 6, 5, 4, 3, 2, 1, 0]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nmodule.exports = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let collatz = [n];\n  while (collatz[0] % 2!== 1) {\n    let p = collatz[0] - 1;\n    let q = collatz[0] + 1;\n    if (p % 2 === 0) {\n      collatz[0] = q;\n    } else {\n      collatz[0] = (p + q) / 2;\n    }\n  }\n  return collatz;\n}\n\nlet getOddCollatz = (n) => {\n  let collatz = [n];\n  while (collatz[0] % 2!== 1) {\n    let p = collatz[0] - 1;\n    let q = collatz[0] + 1;\n    if (p % 2 === 0) {\n      collatz[0] = q;\n    } else {\n      collatz[0] = (p + q) / 2;\n    }\n  }\n  return collatz;\n}\n\nlet getOddCollatz = (n) => {\n  let collatz = [n];\n  while (collatz[0] % 2!== 1) {\n    let p = collatz[0] - 1;\n    let q = collatz[0] + 1;\n    if (p % 2 === 0) {\n      collatz[0] = q;\n    } else {\n      collatz[0] = (p + q) / 2;\n    }\n  }\n  return collatz;\n}\n\nconsole.log(getOddCollatz(5));<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date ||!date.length ||!date.length) {\n    return false;\n  }\n\n  const dateArr = date.split(\"-\");\n  const month = parseInt(dateArr[0]);\n  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 2) {\n    if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n      if (day > 29) {\n        return false;\n      }\n    } else {\n      if (day > 28) {\n        return false;\n      }\n    }\n  }\n\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n\n  return true;\n}\n\nconst validDateArray = (dates) => {\n  const dateArr = dates.split(\"-\");\n  const month = parseInt(dateArr[0]);\n  const day = parseInt(dateArr[1]);\n  const year = parseInt(dateArr[2]);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 2) {\n    if (year % 4 === 0 && year % 100!== 0 || year % 400 === 0) {\n      if (day > 29) {\n        return false;\n      }\n    } else {\n      if (day > 28) {\n        return false;\n      }\n    }\n  }\n\n  if (year < 1 || year > 2040) {\n    return false;\n  }\n\n  return true;\n}\n\nconst validDateString = (date) => {\n  if (!date ||!date.length ||!date.length) {\n    return false;\n  }\n\n  if (!validDate(date)) {\n    return false;\n  }\n\n  if (!validDateArray(date)) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.trim().split(' ')\n  const arr = words.map((w) => {\n    return w.toLowerCase()\n  })\n  return arr\n}\n\nconst getRows = (txt) => {\n  const words = splitWords(txt)\n  return words.map((w) => {\n    const x = 0\n    while (w.charAt(x) ==='') {\n      x++\n    }\n    const y = w.length - 1\n    while (w.charAt(y) ==='') {\n      y--\n    }\n    const word = w.substring(x, y + 1)\n    return [x, y, word]\n  })\n}\n\nconst getWord = (row) => {\n  return row[2]\n}\n\nconst getColumn = (row) => {\n  return row[1]\n}\n\nconst getPosition = (row) => {\n  return row[0]\n}\n\nconst getNumber = (row) => {\n  return row[2].length\n}\n\nconst getNextWord = (row, x) => {\n  return row[2].charAt(x)\n}\n\nconst getPrevWord = (row, x) => {\n  return row[2].charAt(x - 1)\n}\n\nconst getWordBefore = (row, x) => {\n  return row[2].charAt(x - 1)\n}\n\nconst getWordAfter = (row, x) => {\n  return row[2].charAt(x + 1)\n}\n\nconst getPrevWordBefore = (row, x) => {\n  return row[2].charAt(x - 2)\n}\n\nconst getNextWordAfter = (row, x) => {\n  return row[2].charAt(x + 2)\n}\n\nconst getWordCount = (row) => {\n  return row[2].length\n}\n\nconst getWords = (row) => {\n  return row[2].split(' ')\n}\n\nconst getColumns = (txt) => {\n  const words = splitWords(txt)\n  const arr = words.map((w) => {\n    const x = 0\n    while (w.charAt(x) ==='') {\n      x++\n    }\n    const y = w.length - 1\n    while (w.charAt(y) ==='') {\n      y--\n    }\n    const word = w.substring(x, y + 1)\n    return [x, y, word]\n  })\n  return arr\n}\n\nconst getWord = (row) => {\n  return row[2]\n}\n\nconst getColumn = (row) => {\n  return row[1]\n}\n\nconst getPosition = (row) => {\n  return row[0]\n}\n\nconst getNumber = (row) => {\n  return row[2].length\n}\n\nconst getNextWord = (row, x) => {\n  return row[2].charAt(x)\n}\n\nconst getPrevWord = (row, x) => {\n  return row[2].charAt(x - 1)\n}\n\nconst getWordBefore = (row, x) => {\n  return row[2].charAt(x - 1)\n}\n\nconst getWordAfter = (row, x) => {\n  return row[2].charAt(x + 1)\n}\n\nconst getPrevWordBefore = (row, x) => {\n  return row[2].charAt(x - 2)\n}\n\nconst getNextWordAfter = (row, x) => {\n  return row[2].charAt(x + 2)\n}\n\nconst getWordCount = (row) => {\n  return row[2].length\n}\n\nconst getWords = (row) => {\n  return row[2].split(' ')\n}\n\nconst getRow = (txt) => {\n  const words = splitWords(txt)\n  const row = words.map((w) => {\n    return w\n  })\n  return row\n}\n\nconst getColumns = (txt) => {\n  const words = splitWords(txt)\n  const arr = words.map((w) => {\n    const x = 0\n    while (w.charAt(x) ==='') {\n      x++\n    }\n    const y = w.length - 1\n    while (w.charAt(y) ==='') {\n      y--\n    }\n    const word = w.substring(x, y + 1)\n    return [x, y, word]\n  })\n  return arr\n}\n\nconst getWord = (row) => {\n  return row[2]\n}\n\nconst getColumn = (row) => {\n  return row[1]\n}\n\nconst getPosition = (row) => {\n  return row[0]\n}\n\nconst getNumber = (row) => {\n  return row[2].length\n}\n\nconst getNextWord = (row, x) => {\n  return row[2].charAt(x)\n}\n\nconst getPrevWord = (row, x) => {\n  return row[2].charAt(x - 1)\n}\n\nconst getWordBefore = (row, x) => {\n  return row[2].charAt(x - 1)\n}\n\nconst getWordAfter = (row, x) => {\n  return row[2].charAt(x + 1)\n}\n\nconst getPrevWordBefore = (row, x) => {\n  return row[2].charAt(x - 2)\n}\n\nconst getNextWordAfter = (row, x) => {\n  return row[2].charAt(x + 2)\n}\n\nconst getWordCount = (row) => {\n  return row[2"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  return lst.reduce((prev, curr) => {\n    if (prev === curr) {\n      return false;\n    }\n    if (prev === undefined) {\n      return true;\n    }\n    if (curr < prev) {\n      return false;\n    }\n    return true;\n  }, true);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // (interval1.start, interval1.end) < (interval2.start, interval2.end)\n  if (interval1.start < interval2.start) {\n    return intersection(interval2, interval1)\n  } else if (interval1.start > interval2.start) {\n    return intersection(interval1, interval2)\n  } else {\n    return interval1\n  }\n}\n\n/*\n  [input]\n  intersection(interval1, interval2) ==> \"YES\"\n  intersection(interval1, interval3) ==> \"NO\"\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false\n  } else if (n === 2) {\n    return true\n  } else if (n === 3) {\n    return true\n  } else {\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/*\n  [input]\n  intersection(interval1, interval2) ==> \"NO\"\n  */\nconst isPrimeNumber = (intersection) => {\n  return intersection.length === 1 && isPrime(intersection[0])\n}\n\n/*\n  [input]\n  intersection(interval1, interval2) ==> \"YES\"\n  intersection(interval1, interval3) ==> \"NO\"\n  */\nconst isIntersectionPrime = (intersection) => {\n  return intersection.length > 1 && intersection.every(isPrime)\n}\n\n/*\n  [input]\n  intersection(interval1, interval2) ==> \"YES\"\n  intersection(interval1, interval3) ==> \"NO\"\n  */\nconst isIntersectionPrimeNumber = (intersection) => {\n  return intersection.length > 1 && intersection.every(isPrimeNumber)\n}\n\nconst isPrimeNumberOrIntersectionPrime = (intersection) => {\n  return isPrimeNumber(intersection) || isIntersectionPrimeNumber(intersection)\n}\n\nconst isIntersectionPrimeNumberOrIntersectionPrime = (intersection) => {\n  return isIntersectionPrimeNumber(intersection) || isIntersectionPrime(intersection)\n}\n\nconst isPrimeOrIntersectionPrime = (intersection) => {\n  return isPrimeNumberOrIntersectionPrime(intersection) || isIntersectionPrimeOrIntersectionPrime(intersection)\n}\n\nconst isIntersectionPrimeOrIntersectionPrime = (intersection) => {\n  return isIntersectionPrime(intersection) || isIntersectionPrimeOrIntersectionPrime(intersection)\n}\n\nconst intersectionOfIntervals = (intersection) => {\n  return intersection.reduce((prev, curr) => {\n    return intersection(prev, curr)\n  })\n}\n\n/*\n  [input]\n  intersection(interval1, interval2) ==> \"YES\"\n  intersection(interval1, interval3) ==> \"NO\"\n  */\nconst intersectionOfIntervalsIsPrime = (intersection) => {\n  return intersection.length > 1 && intersectionOfIntervals(intersection).every(isPrime)\n}\n\nconst intersectionOfIntervalsIsPrimeNumber = (intersection) => {\n  return intersection.length > 1 && intersectionOfIntervals(intersection).every(isPrimeNumber)\n}\n\nconst intersectionOfIntervalsIsPrimeOrIntersectionPrime = (intersection) => {\n  return intersection.length > 1 && intersectionOfIntervals(intersection).every(isPrimeOrIntersectionPrime)\n}\n\nconst intersectionOfIntervalsIsPrimeNumberOrIntersectionPrime = (intersection) => {\n  return intersection.length > 1 && intersectionOfIntervals(intersection).every(isPrimeNumberOrIntersectionPrime)\n}\n\nconst intersectionOfIntervalsIsPrimeOrIntersectionPrimeNumber = (intersection) => {\n  return intersection.length > 1 && intersectionOfIntervals(intersection).every(isPrimeOrIntersectionPrimeNumber)\n}\n\nconst intersectionOfIntervalsIsPrimeOrIntersectionPrimeNumberOrIntersectionPrime = (intersection) => {\n  return intersection.length > 1 && intersectionOfIntervals(intersection).every(isPrimeOrIntersectionPrimeNumberOrIntersectionPrime)\n}\n\nconst intersectionOfIntervalsIsPrimeOrIntersectionPrimeNumberOrIntersectionPrimeNumber = (intersection) => {\n  return intersection.length > 1 && intersectionOfIntervals(intersection).every(isPrimeOrIntersectionPrimeNumberOrIntersectionPrimeNumber)\n}\n\nconst isPrimeOrIntersectionPrimeNumberOrIntersectionPrimeNumber = (intersection) => {\n  return isPrimeNumberOrIntersectionPrimeNumber(intersection) || isIntersectionPrimeNumberOrIntersectionPrimeNumber(intersection)\n}\n\nconst isPrimeOrIntersectionPrimeNumberOrIntersectionPrimeNumberNumber = (intersection) => {\n  return isPrimeOrIntersectionPrimeNumber(intersection) || isIntersectionPrimeNumberOrIntersectionPrimeNumberNumber(intersection)\n}\n\nconst isPrimeOrIntersectionPrimeNumberOrIntersectionPrimeNumberNumberOrIntersectionPrimeNumber = (intersection) => {\n  return isPrimeOrIntersectionPrimeNumber(intersection) || isIntersectionPrimeNumberOrIntersectionPrimeNumberNumber(intersection) || isIntersectionPrimeNumberOrIntersectionPrimeNumberNumber(intersection)\n}\n\nconst isPrimeOrIntersection"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  let res = 1\n  for (let i = 0; i < arr.length; i++) {\n    res *= Math.sign(arr[i])\n  }\n  return res\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const arr = grid.map(row => row.map(n => n))\n    const n = arr.length\n    const m = arr[0].length\n\n    const visited = Array(m).fill(false)\n    const dp = []\n    for (let i = 0; i < n; i++) {\n        const a = arr[i]\n        const b = arr[i + 1]\n        const t_a = a.slice()\n        const t_b = b.slice()\n        dp.push([]);\n        dp[i].push(1)\n        for (let j = 1; j < k; j++) {\n            dp[i].push(0)\n        }\n        for (let j = 0; j < k; j++) {\n            const s = j\n            const [t_a_x, t_a_y] = t_a[j]\n            const [t_b_x, t_b_y] = t_b[j]\n            let t_dp = dp[t_a_x][t_a_y]\n            dp[t_a_x][t_a_y] = Infinity\n            let path = []\n            let visited_t_b = false\n            while (t_b_x!= -1 && t_b_y!= -1) {\n                path.push([t_a_x, t_a_y])\n                t_b_x = t_a_x\n                t_b_y = t_a_y\n                if (t_a_x == i) {\n                    t_dp = Math.min(t_dp, t_dp + 1)\n                    if (visited[t_b_y][t_b_x]) {\n                        break\n                    } else {\n                        visited[t_b_y][t_b_x] = true\n                    }\n                }\n                if (t_a_y == n - 1) {\n                    t_dp = Math.min(t_dp, t_dp + 1)\n                    if (visited[t_b_y][t_b_x]) {\n                        break\n                    } else {\n                        visited[t_b_y][t_b_x] = true\n                    }\n                }\n                t_a_x = Math.min(t_a_x, t_b_x)\n                t_a_y = Math.min(t_a_y, t_b_y)\n            }\n            dp[i][j] = t_dp\n        }\n    }\n\n    return dp[0][0]\n}\n\nconst grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\nconsole.log(minPath(grid, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    let s = [];\n    let t = 1;\n    for (let i = 0; i <= n; i++) {\n        s[i] = t;\n        t = t + t + (i % 2 === 0? 0 : 1);\n    }\n    return s;\n};\n\ntri(3).forEach((a, index) => {\n    console.log(index +'' + a);\n});\n\n/*\nWrite an algorithm that takes an array of ints as input and returns an array \nof ints, which is the sum of all the elements in the input array.\n*/\nconst sum = (array) => {\n    let sum = 0;\n    for (let i = 0; i < array.length; i++) {\n        sum += array[i];\n    }\n    return sum;\n};\n\nsum([1, 2, 3]).forEach((a, index) => {\n    console.log(index +'' + a);\n});<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n < 10) {\n    return n\n  }\n  let res = 0\n  for (let i = n; i >= 10; i--) {\n    res += i % 10\n    if (i % 2 === 0) {\n      break\n    }\n  }\n  return res\n}\n\nconsole.log(digits(235))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n    let regex = /\\[\\[|\\]\\]/;\n    let array = str.split(regex);\n    let isNested = false;\n    for (let i = 0; i < array.length; i++ ) {\n        if(array[i] == '[[]]') {\n            return isNested;\n        }\n        if(array[i] == '[]') {\n            isNested = true;\n        }\n    }\n    return isNested;\n}\n\n/*\n  Create a function that takes a string as input and returns true if the string is\n  a palindrome.\n  isPalindrome('A man, a plan, a canal pan')➞tru e\n  isPalindrome('race a car')➞ false\n  */\nconst isPalindrome = (str ing ) => {\n    let array = str.split('');\n    let reversed = '';\n    for (let i = 0; i < array.length; i++ ) {\n        reversed = reversed + array[i];\n    }\n    return (str === reversed)? true : false;\n}\n\n/*\n  Create a function that takes a string as input and returns true if the string contains\n  an odd number of square brackets.\n  isOdd('[]]')➞ t ru e\n  isOdd('[a]')➞ false\n  isOdd('[a[b]]')➞ tru e\n  */\nconst isOdd = (str ing ) => {\n    let array = str.split(/\\[\\]/);\n    let isOdd = false;\n    for (let i = 0; i < array.length; i++ ) {\n        if(array[i] == '[]') {\n            isOdd = true;\n        }\n    }\n    return isOdd;\n}\n\n/*\n  Create a function that takes a string as input and returns true if the string\n  contains an even number of square brackets.\n  isEven('[]]')➞ false\n  isEven('[a]')➞ true\n  isEven('[a[b]]')➞ false\n  */\nconst isEven = (str ing ) => {\n    let array = str.split(/\\[\\]/);\n    let isEven = false;\n    for (let i = 0; i < array.length; i++ ) {\n        if(array[i] == '[]') {\n            isEven = true;\n        }\n    }\n    return isEven;\n}\n\n/*\n  Create a function that takes a string as input and returns true if the string\n  contains only alphabets.\n  isAlpha('Hello')➞ false\n  isAlpha('Hello world')➞ t ru e\n  isAlpha('Hello world and world')➞ tru e\n  isAlpha('Hello world. And world')➞ tru e\n  isAlpha('Hello world. And world')➞ tru e\n  */\nconst isAlpha = (str ing ) => {\n    let array = str.split('');\n    let isAlpha = true;\n    for (let i = 0; i < array.length; i++ ) {\n        if(!((array[i] >= 97 && array[i] <= 122) || (array[i] >= 65 && array[i] <= 90))) {\n            isAlpha = false;\n        }\n    }\n    return isAlpha;\n}\n\n/*\n  Create a function that takes a string as input and returns true if the string\n  contains only numbers.\n  isNum('Hello')➞ false\n  isNum('Hello world')➞ tru e\n  isNum('Hello world. And world')➞ tru e\n  isNum('Hello world. And world')➞ tru e\n  */\nconst isNum = (str ing ) => {\n    let array = str.split('');\n    let isNum = true;\n    for (let i = 0; i < array.length; i++ ) {\n        if(!((array[i] >= 48 && array[i] <= 57))) {\n            isNum = false;\n        }\n    }\n    return isNum;\n}\n\n/*\n  Create a function that takes a string as input and returns true if the string\n  contains a word.\n  isWord('Hello')➞ false\n  isWord('Hello world')➞ tru e\n  isWord('Hello world. And world')➞ tru e\n  isWord('Hello world. And world')➞ tru e\n  */\nconst isWord = (str ing ) => {\n    let array = str.split('');\n    let isWord = true;\n    for (let i = 0; i < array.length; i++ ) {\n        if(!(array[i] >= 97 && array[i] <= 122) &&!(array[i] >= 65 && array[i] <= 90) &&!(array[i] >= 48 && array[i] <= 57)) {\n            isWord = false;\n        }\n    }\n    return isWord;\n}\n\n/*\n  Create a function that takes a string as input and returns true if the string\n  contains at least one letter.\n  isLetter('Hello')➞ false\n  isLetter('Hello world')➞ tru e\n  isLetter('Hello world. And world')➞ tru e\n  isLetter('Hello world. And world')➞ tru e\n  */\nconst isLetter = (str ing ) => {\n    let array = str.split('');\n    let isLetter = false;\n    for (let i = 0; i < array.length; i++ ) {\n        if(array[i] >= 97 && array[i] <= 122) {\n"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    return lst.reduce((sum, num) => sum + num * num, 0);\n}\n\nconst main = () => {\n    console.log(sumSquares([1,2,3,4,5,6,7,8,9]));\n    console.log(sumSquares([1,4,9]));\n    console.log(sumSquares([1.4,4.2,0]));\n    console.log(sumSquares([-2.4,1,1]));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    return /^[a-zA-Z]+$/.test(txt.slice(-1)) &&!/[^a-zA-Z]+$/.test(txt.slice(-1));\n};\n\n// check if the last character of a given string is an alphabetical character\nconst checkIfLastCharIsALetter = (txt) => {\n    return /^[a-zA-Z]+$/.test(txt.slice(-1));\n};\n\nconst getWordFromTxt = (txt) => {\n    const lastChar = txt.slice(-1);\n    if (checkIfLastCharIsALetter(lastChar)) {\n        return txt.slice(0, -1);\n    }\n    return txt;\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt.slice(0, -1);\n};\n\nconst getWordFromTxt = (txt) => {\n    return txt."}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    let i = -1;\n    let j = -1;\n    let tmp = 0;\n\n    while (++i < arr.length) {\n        if (arr[i] === arr[tmp]) {\n            if (tmp > j) {\n                tmp = j;\n            }\n        } else {\n            tmp = i;\n        }\n    }\n    return tmp;\n}\n\n// const canArrange = (arr) => {\n//     let i = -1;\n//     let j = -1;\n//     let tmp = 0;\n\n//     while (++i < arr.length) {\n//         if (arr[i] === arr[tmp]) {\n//             if (tmp > j) {\n//                 tmp = j;\n//             }\n//         } else {\n//             tmp = i;\n//         }\n//     }\n//     return tmp;\n// }\n\nconsole.log(canArrange([1,2,3,4,5])); // 3\nconsole.log(canArrange([1,2,3])); // -1\nconsole.log(canArrange([1,2,3,4,5,6])); // 3\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = (a, b) => a > b? a : b;\n  const smallest = (a, b) => a < b? a : b;\n  const result = lst.length?\n    (lst.length === 1?\n      [lst[0], lst[0]] :\n      lst.map(largestSmallestIntegers).reduce((a, b) => max(a[0], b[0]), [lst[0], lst[1]])\n    ) :\n    [null, null]\n  return result\n}\n\n/*\n  Convert a list of strings to a list of numbers.\n  If there are no numbers in the list, return null.\n  Examples:\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3]) == [1, 2, 3]\n  toNumbers([1, 2, 3, 4, '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) == [1, 2, 3, 4, 5]\n  toNumbers([1, 2, 3, '4']) == [1, 2, 3, 4]\n  toNumbers([1, 2, 3, '4', '5']) =="}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  const compare = (a, b) => {\n    if (a > b) {\n      return 1\n    }\n    if (a < b) {\n      return -1\n    }\n    return 0\n  }\n  if (a == b) {\n    return null\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      if (compare(a, b) === 0) {\n        return null\n      }\n      return compare(a, b)\n    }\n    return compare(a, b)\n  }\n  if (typeof b ==='string') {\n    return compare(a, b)\n  }\n  return compare(a, b)\n}\n\nconst compare = (a, b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareOne = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconstcompare = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareTo = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToOne = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToTwo = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToThree = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToFour = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToFive = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToSix = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToSeven = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToEight = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToNine = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToTen = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToEleven = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToTwelve = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToThirteen = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToFourteen = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToFifteen = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToSixteen = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToSeventeen = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}\n\nconst compareToEighteen = (a,  b) => {\n  if (a > b) {\n    return 1\n  }\n  if (a < b) {\n    return -1\n  }\n  return 0\n}"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n - (n & 1);\n  return sum === 4 || sum === 6 || sum === 8;\n};\n\nconsole.log(isEqualToSumEven(6));\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1;\n  }\n  else {\n    return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n  }\n}\n\nexport default specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A-Z])/g, (match, lowercase, uppercase) => `${lowercase}_${uppercase}`);\n};\n\n// eslint-disable-next-line\nconst removeSpace = (text) => text.replace(/\\s/g, \"\");\n\n// eslint-disable-next-line\nconst isNotEmptyString = (text) => text.length > 0;\n\n// eslint-disable-next-line\nconst getUniqueString = (text) => {\n  const textWithoutSpaces = text.replace(/\\s/g, \"\");\n  return textWithoutSpaces.replace(/([a-z])([A"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n\t//let s = '';\n\tif(file_name.length > 3){\n\t\tlet name = file_name.substring(0, file_name.length - 3);\n\t\t//console.log(name);\n\t\tlet is_valid = true;\n\t\tfor(let i = 0; i < name.length; i++){\n\t\t\tlet is_letter = true;\n\t\t\tif(name.charAt(i)!= '.'){\n\t\t\t\tif(name.charAt(i)!= '0' && name.charAt(i)!= '1' && name.charAt(i)!= '2' && name.charAt(i)!= '3' && name.charAt(i)!= '4' && name.charAt(i)!= '5' && name.charAt(i)!= '6' && name.charAt(i)!= '7' && name.charAt(i)!= '8' && name.charAt(i)!= '9'){\n\t\t\t\t\tis_letter = false;\n\t\t\t\t}\n\t\t\t\tif(!is_letter){\n\t\t\t\t\tis_valid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(name.charAt(i) == '.'){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_valid){\n\t\t\treturn 'Yes';\n\t\t}else{\n\t\t\treturn 'No';\n\t\t}\n\t}else{\n\t\treturn 'No';\n\t}\n}\n\n/*\n  Create a function which takes a string and returns the same string with all the vowels of the alphabet replaced by a letter.\n  Examples:\n  let s = 'abc';\n  let r = vowels('abc');\n  => 'abc'\n  */\nconst vowels = (str) => {\n\tlet s = 'abcdefghijklmnopqrstuvwxyz';\n\tlet r = str;\n\tfor(let i = 0; i < str.length; i++){\n\t\tif(s.indexOf(str.charAt(i)) > -1){\n\t\t\tr = r.replace(str.charAt(i), 'a');\n\t\t}\n\t}\n\treturn r;\n}\n\n/*\n  Create a function which takes a string and returns a string with all the vowels replaced by a letter.\n  Examples:\n  let s = 'abc';\n  let r = vowels('abc');\n  => 'abc'\n  */\nconst vowels2 = (str) => {\n\tlet s = 'abcdefghijklmnopqrstuvwxyz';\n\tlet r = str;\n\tfor(let i = 0; i < str.length; i++){\n\t\tif(s.indexOf(str.charAt(i)) > -1){\n\t\t\tr = r.replace(str.charAt(i), 'a');\n\t\t}\n\t}\n\treturn r;\n}\n\n/*\n  Create a function which takes a string and returns the same string with all the vowels replaced by a letter.\n  Examples:\n  let s = 'abc';\n  let r = vowels('abc');\n  => 'abc'\n  */\nconst vowels3 = (str) => {\n\tlet s = 'abcdefghijklmnopqrstuvwxyz';\n\tlet r = str;\n\tfor(let i = 0; i < str.length; i++){\n\t\tif(s.indexOf(str.charAt(i)) > -1){\n\t\t\tr = r.replace(str.charAt(i), 'a');\n\t\t}\n\t}\n\treturn r;\n}\n\nconst check_file_name = (file_name) => {\n\tif(file_name.length > 3){\n\t\tlet name = file_name.substring(0, file_name.length - 3);\n\t\tlet is_valid = true;\n\t\tfor(let i = 0; i < name.length; i++){\n\t\t\tlet is_letter = true;\n\t\t\tif(name.charAt(i)!= '.'){\n\t\t\t\tif(name.charAt(i)!= '0' && name.charAt(i)!= '1' && name.charAt(i)!= '2' && name.charAt(i)!= '3' && name.charAt(i)!= '4' && name.charAt(i)!= '5' && name.charAt(i)!= '6' && name.charAt(i)!= '7' && name.charAt(i)!= '8' && name.charAt(i)!= '9'){\n\t\t\t\t\tis_letter = false;\n\t\t\t\t}\n\t\t\t\tif(!is_letter){\n\t\t\t\t\tis_valid = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(name.charAt(i) == '.'){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(is_valid){\n\t\t\treturn 'Yes';\n\t\t}else{\n\t\t\treturn 'No';\n\t\t}\n\t}else{\n\t\treturn 'No';\n\t}\n}\n\nmodule.exports = {\n\tfileNameCheck: fileNameCheck,\n\tvowels: vowels,\n\tvowels2: vowels2,\n\tvowels3: vowels3,\n\tcheck_file_name: check_file_name\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let temp = lst[i];\n    if (i % 3 === 0 && i % 4 === 0) {\n      sum += temp * temp;\n    } else {\n      sum += temp;\n    }\n  }\n  return sum;\n};\n\nexport default sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(/\\s+/).filter((word) => word.length > 0);\n    const wordsLengths = words.map((word) => word.length);\n    const primeNumbers = primeNumberSieve.getPrimeNumbers(wordsLengths.length + 1);\n    return words.map((word, index) => {\n        const wordLength = wordsLengths[index];\n        const numberOfWords = primeNumbers.length;\n        let start = 0;\n        let end = numberOfWords - 1;\n        while (start < end) {\n            const startIndex = (start + end) / 2 | 0;\n            const number = wordsLengths[index] - (startIndex + 1) * wordLength;\n            if (primeNumbers[startIndex] < number) {\n                start = startIndex + 1;\n            } else if (primeNumbers[startIndex] > number) {\n                end = startIndex - 1;\n            } else {\n                start = startIndex + 1;\n                end = startIndex - 1;\n            }\n        }\n        return words[index] + (end + 1) * wordLength;\n    });\n};\n\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(/\\s+/).filter((word) => word.length > 0);\n    const wordsLengths = words.map((word) => word.length);\n    const primeNumbers = primeNumberSieve.getPrimeNumbers(wordsLengths.length + 1);\n    return words.map((word, index) => {\n        const wordLength = wordsLengths[index];\n        const numberOfWords = primeNumbers.length;\n        let start = 0;\n        let end = numberOfWords - 1;\n        while (start < end) {\n            const startIndex = (start + end) / 2 | 0;\n            const number = wordsLengths[index] - (startIndex + 1) * wordLength;\n            if (primeNumbers[startIndex] < number) {\n                start = startIndex + 1;\n            } else if (primeNumbers[startIndex] > number) {\n                end = startIndex - 1;\n            } else {\n                start = startIndex + 1;\n                end = startIndex - 1;\n            }\n        }\n        return words[index] + (end + 1) * wordLength;\n    });\n};\n\nexport default wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n    x = x.split(\"/\");\n    n = n.split(\"/\");\n    x = x[1].split(\" \");\n    n = n[1].split(\" \");\n    x = x[1];\n    n = n[1];\n    if (n[0] === \"0\") {\n        return true;\n    }\n    if (n[0] === \"1\") {\n        return x[0] === \"1\" || x[0] === \"0\";\n    }\n    if (n[0] === \"2\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\";\n    }\n    if (n[0] === \"3\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\";\n    }\n    if (n[0] === \"4\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\";\n    }\n    if (n[0] === \"5\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\";\n    }\n    if (n[0] === \"6\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\";\n    }\n    if (n[0] === \"7\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\";\n    }\n    if (n[0] === \"8\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\" || x[0] === \"8\";\n    }\n    if (n[0] === \"9\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\" || x[0] === \"8\" || x[0] === \"9\";\n    }\n    if (n[0] === \"10\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\" || x[0] === \"8\" || x[0] === \"9\" || x[0] === \"10\";\n    }\n    if (n[0] === \"11\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\" || x[0] === \"8\" || x[0] === \"9\" || x[0] === \"10\" || x[0] === \"11\";\n    }\n    if (n[0] === \"12\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\" || x[0] === \"8\" || x[0] === \"9\" || x[0] === \"10\" || x[0] === \"11\" || x[0] === \"12\";\n    }\n    if (n[0] === \"13\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\" || x[0] === \"8\" || x[0] === \"9\" || x[0] === \"10\" || x[0] === \"11\" || x[0] === \"12\" || x[0] === \"13\";\n    }\n    if (n[0] === \"14\") {\n        return x[0] === \"1\" || x[0] === \"0\" || x[0] === \"2\" || x[0] === \"3\" || x[0] === \"4\" || x[0] === \"5\" || x[0] === \"6\" || x[0] === \"7\""}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  let sorted = nums.slice().sort((a, b) => a - b)\n  let res = []\n  let i = 0\n  let sum = 0\n  while (i < sorted.length) {\n    if (sorted[i] < 0) {\n      sum += sorted[i] * Math.pow(10, sorted.length - i - 1)\n      res.unshift(-sum)\n    } else {\n      sum += sorted[i] * Math.pow(10, sorted.length - i)\n      res.push(sum)\n    }\n    i++\n  }\n  return res\n}\n\nconsole.log(orderByPoints([1, 11, -1, -11, -12]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const isOdd = (num) => num % 2 === 1;\n  const isEven = (num) => num % 2 === 0;\n  const hasOddLastDigit = (num) => num % 10 === 1;\n  const hasEvenLastDigit = (num) => num % 10 === 0;\n\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (isOdd(nums[i]) && hasOddLastDigit(nums[i])) {\n      result++;\n    }\n    if (isEven(nums[i]) && hasEvenLastDigit(nums[i])) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let sum = 0\n  let counter = 0\n  for (let i = 0; i < a.length; i++) {\n    for (let j = i + 1; j < a.length; j++) {\n      for (let k = j + 1; k < a.length; k++) {\n        if (a[i] + a[j] + a[k] === sum) {\n          counter++\n        }\n      }\n    }\n  }\n  return counter\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    let solarSystem = solarSystems[planet1.toLowerCase()];\n    let solarSystem2 = solarSystems[planet2.toLowerCase()];\n    let solarSystem1 = solarSystems[solarSystem.toLowerCase()];\n    let planet1Orbit = findOrbit(solarSystem1, solarSystem2);\n    let planet2Orbit = findOrbit(solarSystem2, solarSystem1);\n    let planet1OrbitList = getList(planet1Orbit);\n    let planet2OrbitList = getList(planet2Orbit);\n    return planet1OrbitList.concat(planet2OrbitList);\n};\n\n/*\n  Write a function which takes two  tuples with planet names as first  and second element\n  and returns a tuple with the planets that are closer to the Sun than the second element.\n  In our solar system, Mercury is the second element and the function should return (\"Mercury\")\n  Example\n  f((\"Jupiter\", \"Neptune\"), (\"Earth\", \"Saturn\")) ==> (\"Mercury\")\n  */\nconst f = (planet1, planet2) => {\n    let planet2Orbit = findOrbit(planet2, planet1);\n    let planet2OrbitList = getList(planet2Orbit);\n    return planet2OrbitList;\n};\n\nconst getList = (list) => {\n    let result = [];\n    for (let element of list) {\n        result.push(element);\n    }\n    return result;\n};\n\nconst findOrbit = (planet, other) => {\n    let list = solarSystems[planet.toLowerCase()];\n    let solarSystem = solarSystems[other.toLowerCase()];\n    let solarSystemList = solarSystems[solarSystem.toLowerCase()];\n    let orbits = [];\n    let orbital = solarSystemList.find((o) => {\n        let planetOrbit = findOrbit(planet, o);\n        let planetOrbitList = getList(planetOrbit);\n        return planetOrbitList.includes(other);\n    });\n    if (orbital) {\n        orbits.push(orbital);\n    }\n    return orbits;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sortedLst = lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length > b.length;\n    }\n    return a > b;\n  });\n  let sum = 0;\n  for (let i = 0; i < sortedLst.length; i += 1) {\n    sum += sortedLst[i];\n  }\n  return sum;\n};\n\nconst lst = [\n  \"ab\",\n  \"ab\",\n  \"ab\",\n  \"a\",\n  \"a\",\n  \"aaa\",\n  \"aaa\",\n  \"aa\",\n  \"ab\",\n  \"ab\",\n  \"ab\",\n  \"aa\",\n  \"a\",\n  \"b\",\n  \"c\",\n  \"d\",\n  \"e\",\n  \"f\",\n  \"g\",\n  \"h\",\n  \"i\",\n  \"j\",\n  \"k\",\n  \"l\",\n  \"m\",\n  \"n\",\n  \"o\",\n  \"p\",\n  \"q\",\n  \"r\",\n  \"s\",\n  \"t\",\n  \"u\",\n  \"v\",\n  \"w\",\n  \"x\",\n  \"y\",\n  \"z\"\n];\n\nconsole.log(sortedListSum(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) return xOrY(n + 1, x, y);\n  return n === x? y : xOrY(n, x, y);\n};\n\nconst primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n\nconsole.log(xOrY(9, 2, 4));\n\nconst primeFactors = (n) => {\n  const factors = [];\n  let i = 0;\n  while (primes[i] <= n) {\n    while (n % primes[i] === 0) {\n      factors.push(primes[i]);\n      n = n / primes[i];\n    }\n    i++;\n  }\n  if (n > 1) factors.push(n);\n  return factors;\n};\n\nconst isPrime = (n) => {\n  const factors = primeFactors(n);\n  return factors.length === 1 && n!== 1;\n};\n\nconst primeFactors2 = (n) => {\n  const factors = [];\n  let i = 2;\n  while (i * i <= n) {\n    while (n % i === 0) {\n      factors.push(i);\n      n = n / i;\n    }\n    i++;\n  }\n  if (n > 1) factors.push(n);\n  return factors;\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (isPrime(n)) return xOrY(n, x, y);\n  return xOrY(n, x, y);\n};\n\nconsole.log(xOrY2(9, 2, 4));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n    const a = Array.from(lst)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n    const a = Array.from(lst)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst ubleTheDifference = (lst) => {\n    const a = Array.from(lst)\n    return a.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test2 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test3 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test4 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test5 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test6 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test7 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test8 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test9 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test10 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test11 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test12 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test13 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test14 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test15 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test16 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test17 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test18 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a1.reduce((acc, x) => x * x + acc, 0)\n}\n\nconst test19 = (x) => {\n    const a = Array.from(x)\n    const a1 = a.filter((n) => n % 1 === 1)\n    return a"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.slice()\n  const guesses = guess.slice()\n  const len = scores.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let score = scores[i]\n    let guess = guesses[i]\n    if (score === guess) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(score - guess))\n    }\n  }\n  return result\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const names = extensions.map(ext => ext.toUpperCase());\n  const cap_count = names.reduce((count, name) => count + name.length, 0);\n  const lower_count = names.reduce((count, name) => count + name.length, 0);\n  const strength = -1;\n  if (cap_count > lower_count) {\n    strength = -1;\n  } else if (cap_count < lower_count) {\n    strength = names.length - 1;\n  } else {\n    strength = names.length - 1;\n  }\n  return `${class_name}.${names[strength]}`;\n};\n\nconst addExtension = (class_name, extension) => {\n  return `${class_name}.${extension.toUpperCase()}`;\n};\n\nexport {\n  getExtensions,\n  addExtension,\n  strongestExtension,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n    const aLower = a.toLowerCase();\n    const bLower = b.toLowerCase();\n    if(a === b) return true;\n    if(aLower.indexOf(bLower)!== -1) return true;\n    const aReverse = a.split(\"\").reverse().join(\"\");\n    const bReverse = b.split(\"\").reverse().join(\"\");\n    if(aReverse.indexOf(bReverse)!== -1) return true;\n    return false;\n};\nconst isCyclic = cycpatternCheck(\"abc\",\"cba\");\nconsole.log(isCyclic);<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let even = 0, odd = 0;\n  while (num!== 0) {\n    num = num % 10;\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return [even, odd];\n};\n\n/*\n  Given an integer number. Return the number of trailing zeros in the binary representation.\n   Example:\n      trailingZeros(1) ==> 0\n      trailingZeros(5) ==> 3\n      trailingZeros(11) ==> 5\n      trailingZeros(16) ==> 5\n      trailingZeros(123) ==> 6\n      trailingZeros(1234) ==> 9\n  */\nconst trailingZeros = (num) => {\n  const count = 0;\n  while (num!== 0) {\n    num = num / 2;\n    count++;\n  }\n  return count;\n};\n\n/*\n  Given a string, returns the number of vowels in the string.\n   Example:\n      vowels(\"cat\") ==> 1\n      vowels(\"abcd\") ==> 2\n      vowels(\"hello\") ==> 2\n      vowels(\"abcd123\") ==> 3\n  */\nconst vowels = (str) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (vowels.indexOf(str[i]) > -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of consonants in the string.\n   Example:\n      consonants(\"cat\") ==> 1\n      consonants(\"abcd\") ==> 3\n      consonants(\"hello\") ==> 1\n      consonants(\"abcd123\") ==> 4\n  */\nconst consonants = (str) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'x', 'y', 'z'];\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (consonants.indexOf(str[i]) > -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, returns the number of consonants.\n   Example:\n      vowels(\"cat\") ==> 1\n      vowels(\"abcd\") ==> 2\n      vowels(\"hello\") ==> 2\n      vowels(\"abcd123\") ==> 3\n  */\nconst consonantsOnly = (str) => {\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, returns the number of vowels.\n   Example:\n      vowels(\"cat\") ==> 1\n      vowels(\"abcd\") ==> 2\n      vowels(\"hello\") ==> 2\n      vowels(\"abcd123\") ==> 3\n  */\nconst vowelsOnly = (str) => {\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, returns the number of consonants and vowels.\n   Example:\n      vowels(\"cat\") ==> 2\n      vowels(\"abcd\") ==> 3\n      vowels(\"hello\") ==> 1\n      vowels(\"abcd123\") ==> 4\n  */\nconst allVowels = (str) => {\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, returns the number of consonants and vowels.\n   Example:\n      vowels(\"cat\") ==> 2\n      vowels(\"abcd\") ==> 3\n      vowels(\"hello\") ==> 1\n      vowels(\"abcd123\") ==> 4\n  */\nconst allConsonants = (str) => {\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of vowels and consonants.\n   Example:\n      vowels(\"cat\") ==> 1\n      vowels(\"abcd\") ==> 2\n      vowels(\"hello\") ==> 2\n      vowels(\"abcd123\") ==> 3\n  */\nconst onlyVowels = (str) => {\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of vowels and consonants.\n   Example:\n      vowels(\"cat\") ==> 1\n      vowels(\"abcd\") ==> 2\n      vowels(\"hello\") ==> 2\n      vowels(\"abcd123\") ==> 3\n  */\nconst onlyConsonants = (str) => {\n  const count = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i]!=='') {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string, return the number of vowels and consonants.\n   Example:"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = '';\n  while (number > 0) {\n    let digit = number % 10;\n    number = Math.floor(number / 10);\n    let roman = {\n      I: 1,\n      V: 5,\n      X: 10,\n      L: 50,\n      C: 100,\n      D: 500,\n      M: 1000\n    }[digit];\n    result = roman + result;\n  }\n  return result.toLowerCase();\n}\n\nconst numRoman = (number) => {\n  return intToMiniRoman(number).match(/[ivxlcdm]+/)[0].toLowerCase();\n}\n\nconsole.log(numRoman(19));\nconsole.log(numRoman(152));\nconsole.log(numRoman(426));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    if (a === b) {\n        return true;\n    }\n    if (b === c) {\n        return true;\n    }\n    if (c === a) {\n        return true;\n    }\n    return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  //console.log(words);\n  //console.log(words.length);\n  let max = words[0];\n  let count = 0;\n  for (let i = 0; i < words.length; i++) {\n    let [word, count] = words[i].match(/\\w+/g);\n    if (count > count) {\n      max = word;\n    }\n  }\n  return max;\n};\n\n// console.log(Max(\"name \", \"enam\", \"game\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"name \", \"enam\", \"game\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\"));\n// console.log(Max(\"na me\", \"of\", \"string\")"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    let needC = need;\n    let remainingC = remaining;\n    let result = [];\n    let i = number;\n    while (i > 0) {\n        result.push(i);\n        i--;\n    }\n    while (remainingC > 0) {\n        if (remainingC < needC) {\n            result.push(remainingC);\n            break;\n        } else {\n            remainingC = remainingC - needC;\n            needC = needC - remainingC;\n            result.push(needC);\n        }\n    }\n    return result;\n}\nconsole.log(eat(1, 3, 5));\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(2, 11, 5));\nconsole.log(eat(9, 10, 10));\nconsole.log(eat(10, 10, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const length = operator.length\n  const length1 = operand.length\n\n  const result = []\n  for (let i = 0; i < length; i++) {\n    const operation = operator[i]\n    const operand1 = operand[i]\n    const operand2 = operand[i + 1]\n    const result1 = doAlgebra(operation, operand1)\n    const result2 = doAlgebra(operation, operand2)\n    result.push(result1 + result2)\n  }\n  return result\n}\n\nconst checkArray = (operator, operand) => {\n  const length = operator.length\n  const length1 = operand.length\n  if (length!== length1) {\n    throw new Error(`Operand and operator arrays are of unequal size`)\n  }\n  for (let i = 0; i < length; i++) {\n    if (isNaN(operand[i])) {\n      throw new Error(`Operand array contains non-numeric value`)\n    }\n    if (operand[i] < 0) {\n      throw new Error(`Operand array contains negative value`)\n    }\n  }\n  return operand\n}\n\nconst doAlgebraOfList = (operator, list) => {\n  const length = operator.length\n  const length1 = list.length\n  if (length!== length1) {\n    throw new Error(`Operand and operator lists are of unequal size`)\n  }\n  const result = []\n  for (let i = 0; i < length; i++) {\n    const operation = operator[i]\n    const operand = list[i]\n    result.push(doAlgebra(operation, operand))\n  }\n  return result\n}\n\nconst operator = ['+', '-', '*', '/']\nconst operand = [2, 3, 4, 5]\nconst result = doAlgebra(operator, operand)\nconsole.log(`The result is: ${result}`)\n\nconst operator2 = ['+', '-', '*', '/', '**']\nconst operand2 = [2, 3, 4, 5, 6]\nconst result2 = doAlgebra(operator2, operand2)\nconsole.log(`The result is: ${result2}`)\n\nconst operator3 = ['+', '-', '*', '/', '**']\nconst operand3 = [2, 3, 4, 5, 6, 7]\nconst result3 = doAlgebra(operator3, operand3)\nconsole.log(`The result is: ${result3}`)\n\nconst operator4 = ['+', '-', '*', '/', '**']\nconst operand4 = [2, 3, 4, 5, 6, 7, 8]\nconst result4 = doAlgebra(operator4, operand4)\nconsole.log(`The result is: ${result4}`)\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let n = s.length,\n        p = 0,\n        q = 0,\n        c = 0,\n        result = \"\";\n    for (let i = 0; i < n; i += 1) {\n        c = s.charCodeAt(i);\n        if (c >= 97 && c <= 122) {\n            result += (c - 32).toString();\n            p = i;\n        }\n        else if (c >= 65 && c <= 90) {\n            result += (c - 96).toString();\n            q = i;\n        }\n        else if (c >= 48 && c <= 57) {\n            result += (c - 48).toString();\n            p = i;\n        }\n        else if (c >= 97 && c <= 122) {\n            result += (c - 32).toString();\n            q = i;\n        }\n        else if (c >= 65 && c <= 90) {\n            result += (c - 96).toString();\n            p = i;\n        }\n        else if (c >= 48 && c <= 57) {\n            result += (c - 48).toString();\n            q = i;\n        }\n    }\n    if (p > q) {\n        result = result.substring(0, q) + result.substring(p, result.length);\n    }\n    else if (p < q) {\n        result = result.substring(0, p) + result.substring(q, result.length);\n    }\n    return result;\n};\nconsole.log(solve(\"#A@c\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text.length === 0) {\n        return null;\n    }\n\n    const md5sum = crypto.createHash('md5');\n    md5sum.update(text);\n    return md5sum.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let output = []\n  for (let i = a; i <= b; i++) {\n    output.push(i)\n  }\n  return output\n}\n\nexport default generateIntegers\n<|endoftext|>"}
