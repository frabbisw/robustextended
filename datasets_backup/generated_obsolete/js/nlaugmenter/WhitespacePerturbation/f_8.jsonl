{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    let sum = 0.0;\n    for (let i = 0; i < numbers.length; i++) {\n        sum += numbers[i];\n    }\n    let avg = sum / numbers.length;\n    let dist = 0.0;\n    for (let i = 0; i < numbers.length; i++) {\n        dist += Math.pow(Math.abs(numbers[i] - avg), 2);\n    }\n    dist = Math.sqrt(dist);\n    if (dist < threshold) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nconst getRandomElement = () => {\n    return Math.floor(Math.random() * 100) + 1;\n};\n\nconst getRandomElementRange = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n};\n\nconst getRandomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n};\n\nconst getRandomFloat = () => {\n    return Math.random();\n};\n\nconst isPowerOfTwo = number => {\n    return (Math.log(number) / Math.log(2)) % 1 === 0;\n};\n\nconst getRandomPowerOfTwo = () => {\n    let power = 0;\n    while (!isPowerOfTwo(power)) {\n        power = getRandomInt(2, 64);\n    }\n    return power;\n};\n\nconst getRandomIntInRange = (min, max) => {\n    return Math.floor(Math.random() * (max - min) + min);\n};\n\nconst getRandomFloatInRange = (min, max) => {\n    return Math.random() * (max - min) + min;\n};\n\nconst getRandomBool = () => {\n    return Math.random() < 0.5;\n};\n\nconst getRandomColor = () => {\n    let color = '#';\n    color += getRandomInt(0, 7);\n    color += getRandomInt(0, 7);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorInRange = (min, max) => {\n    return getRandomColor() + getRandomIntInRange(min, max);\n};\n\nconst getRandomColorInRangeWithAlpha = (min, max) => {\n    let color = getRandomColorInRange(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorInRangeWithAlphaInRange = (min, max) => {\n    let color = getRandomColorInRangeWithAlpha(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorInRangeWithAlphaInRangeWithAlpha = (min, max) => {\n    let color = getRandomColorInRangeWithAlphaInRange(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRange = (min, max) => {\n    let color = getRandomColor();\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlpha = (min, max) => {\n    let color = getRandomColorWithAlpha();\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlphaInRange = (min, max) => {\n    let color = getRandomColorWithAlphaInRange(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlphaInRangeWithAlpha = (min, max) => {\n    let color = getRandomColorWithAlphaInRangeWithAlpha(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlpha = () => {\n    let color = '#';\n    color += getRandomInt(0, 15);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRange = (min, max) => {\n    let color = getRandomColorWithAlpha();\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlpha = (min, max) => {\n    let color = getRandomColorWithAlphaInRange(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlphaInRange = (min, max) => {\n    let color = getRandomColorWithAlphaInRange(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlphaInRangeWithAlpha = (min, max) => {\n    let color = getRandomColorWithAlphaInRangeWithAlpha(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlphaInRangeWithAlphaInRange = (min, max) => {\n    let color = getRandomColorWithAlphaInRangeWithAlphaInRange(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlphaInRangeWithAlphaInRangeWithAlpha = (min, max) => {\n    let color = getRandomColorWithAlphaInRangeWithAlphaInRangeWithAlpha(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n\nconst getRandomColorWithAlphaInRangeWithAlphaInRangeWithAlphaInRangeWithAlphaInRange = (min, max) => {\n    let color = getRandomColorWithAlphaInRangeWithAlphaInRangeWithAlphaInRange(min, max);\n    color += getRandomInt(0, 7);\n    return color;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let stack = []\n  let open_braces = 0\n  let braces_used = 0\n  let result = []\n  for (let i = 0; i < paren_string.length; i++) {\n    let c = paren_string[i]\n    if (c === '(') {\n      open_braces += 1\n      stack.push(c)\n    } else if (c === ')') {\n      open_braces -= 1\n      if (open_braces <= 0) {\n        if (stack.length === 0) {\n          stack = []\n          open_braces = 0\n        } else {\n          let last_open_brace = stack.pop()\n          braces_used += 1\n          if (last_open_brace === '(') {\n            stack.push(last_open_brace)\n          }\n          stack.push(c)\n        }\n      }\n    }\n    if (open_braces === 0 && braces_used === 0) {\n      if (stack.length === 0) {\n        result.push(paren_string.substring(0, i + 1))\n      } else {\n        let last_open_brace = stack.pop()\n        braces_used += 1\n        if (last_open_brace === '(') {\n          stack.push(last_open_brace)\n        }\n        result.push(paren_string.substring(0, i + 1))\n      }\n    }\n  }\n  return result\n}\n\n//console.log(separateParenGroups('()()()'))\n//console.log(separateParenGroups('()()()'))\n//console.log(separateParenGroups('(())()'))\n//console.log(separateParenGroups('()(()'))\n//console.log(separateParenGroups('((()()))'))\n//console.log(separateParenGroups('(()()))'))\n//console.log(separateParenGroups('((()()))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()())))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('(()()))'))\n//console.log(separateParenGroups('(()()))))'))\n//console.log(separateParenGroups('((()()))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('((()()))))'))\n//console.log(separateParenGroups('(("}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let integerPart = Math.floor(number);\n    let decimalPart = number - integerPart;\n    if (decimalPart < 0.01) {\n        return integerPart;\n    }\n    else {\n        let decimals = number - integerPart;\n        return integerPart + (decimals * 10);\n    }\n}\n\n/* Given a number, r eturns a string representing the number in the form (integer part,decimal part).\n  >>> toString(3.5)\n  3.5\n  */\nconst toString = (number) => {\n    let integerPart = truncateNumber(number);\n    let decimals = number - integerPart;\n    if (decimals < 0.01) {\n        return integerPart.toString();\n    }\n    else {\n        return integerPart.toString() + '.' + (decimals * 10).toString().substr(1);\n    }\n}\n\n/* Given a number and an integer, r eturns a string representing the number in the form (integer part,decimal part)\n  >>> toString(3.5, 2)\n  3.5.2\n  */\nconst toStringWithDecimals = (number, decimals) => {\n    let integerPart = truncateNumber(number);\n    let decimals = number - integerPart;\n    if (decimals < 0.01) {\n        return integerPart.toString();\n    }\n    else {\n        return integerPart.toString() + '.' + (decimals * 10).toString().substr(1);\n    }\n}\n\n/* Given a number, r eturns a string representing the number in the form (integer part,decimal part)\n  >>> toString(3.5)\n  3.5\n  */\nconst toStringWithDecimalsWithoutLeadingZeroes = (number, decimals) => {\n    let integerPart = truncateNumber(number);\n    let decimals = number - integerPart;\n    if (decimals < 0.01) {\n        return integerPart.toString();\n    }\n    else {\n        return integerPart.toString() + '.' + (decimals * 10).toString().substr(1);\n    }\n}\n\n/* Given a number, r eturns a string representing the number in the form (integer part,decimal part)\n  >>> toString(3.5)\n  3.5\n  */\nconst toStringWithLeadingZeroes = (number) => {\n    let integerPart = truncateNumber(number);\n    let decimals = number - integerPart;\n    if (decimals < 0.01) {\n        return integerPart.toString();\n    }\n    else {\n        return '0' + integerPart.toString() + '.' + (decimals * 10).toString().substr(1);\n    }\n}\n\nmodule.exports = {\n    truncateNumber,\n    toString,\n    toStringWithDecimals,\n    toStringWithDecimalsWithoutLeadingZeroes,\n    toStringWithLeadingZeroes\n}<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let i = 0,\n    j = 0,\n    total = 0;\n\n  while (i < operations.length) {\n    if (operations[i].amount < 0) {\n      return true;\n    }\n\n    total += operations[i].amount;\n    i++;\n  }\n\n  return false;\n};\n\nconsole.log(belowZero([\n  { amount: -1 },\n  { amount: 2 },\n  { amount: -4 },\n  { amount: 5 }\n]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const result = [];\n  for (let i = 0; i < numbers.length; i++) {\n    const sum = numbers.slice(0, i + 1).reduce((sum, val) => sum + val);\n    result.push((sum - numbers[i]));\n  }\n  return result.reduce((sum, value) => sum / numbers.length) / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + val);\n  const deviation = (sum / numbers.length) - Math.mean(numbers);\n  return Math.abs(deviation);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val - mean, 2));\n  return Math.sqrt(sum / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val - mean, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val - mean, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return Math.sqrt(sum / numbers.length);\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = Math.mean(numbers);\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val - mean, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const sum = numbers.reduce((sum, val) => sum + Math.pow(val, 2));\n  return sum / numbers.length;\n};\n\n/*\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let i = 0;\n  const output = [];\n  while (i < numbers.length - 1) {\n    output.push(numbers[i]);\n    output.push(delimeter);\n    i++;\n  }\n  output.push(numbers[i]);\n  return output;\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [];\n  const nested_p = paren_string.split(' ');\n  const last_nested_paren = nested_p[nested_p.length - 1];\n  const is_last_nested_paren = nested_p.indexOf(last_nested_paren) === nested_p.length - 1;\n\n  for (let i = 0; i < nested_p.length; i++) {\n    const group = nested_p[i];\n    const is_group_open = group.startsWith('(');\n    const is_group_close = group.startsWith(')');\n\n    if (is_group_open) {\n      stack.push(i);\n    } else if (is_group_close) {\n      stack.pop();\n    }\n\n    if (stack.length === 0) {\n      // No more groups, so we're done.\n      if (is_last_nested_paren) {\n        return nested_p.slice(0, -1).join(' ');\n      }\n      return nested_p.slice(0, stack.length).join(' ');\n    }\n  }\n\n  return nested_p;\n};\n\nconst parseNestedParens2 = (paren_string) => {\n  const stack = [];\n  const nested_p = paren_string.split(' ');\n  const last_nested_paren = nested_p[nested_p.length - 1];\n  const is_last_nested_paren = nested_p.indexOf(last_nested_paren) === nested_p.length - 1;\n\n  for (let i = 0; i < nested_p.length; i++) {\n    const group = nested_p[i];\n    const is_group_open = group.startsWith('(');\n    const is_group_close = group.startsWith(')');\n\n    if (is_group_open) {\n      stack.push(i);\n    } else if (is_group_close) {\n      stack.pop();\n    }\n\n    if (stack.length === 0) {\n      // No more groups, so we're done.\n      if (is_last_nested_paren) {\n        return nested_p.slice(0, -1).join(' ');\n      }\n      return nested_p.slice(0, stack.length).join(' ');\n    }\n  }\n\n  return nested_p;\n};\n\nmodule.exports = parseNestedParens2;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(s => {\n    return s.indexOf(substring)!== -1\n  })\n}\n\n/*\n  # Filter an input list of strings only  for ones that do not contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'b')\n  ['abc', 'bacd']\n  */\nconst filterBySubstring2 = (strings, substring) => {\n  return strings.filter(s => {\n    return s.indexOf(substring) === -1\n  })\n}\n\n/*\n  # Given a list of strings, return a list of all the substrings\n  >>> substrings(['abc', 'def', 'ghi'])\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 1)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 3)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 2)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -1)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -3)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -2)\n  ['abc', 'def']\n  >>> substrings(['abc', 'def', 'ghi'], 2, 3)\n  ['abc', 'def']\n  >>> substrings(['abc', 'def', 'ghi'], 2, -3)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 2, -2)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 2, 2)\n  []\n  >>> substrings(['abc', 'def', 'ghi'], -1, 3)\n  ['abc', 'def']\n  >>> substrings(['abc', 'def', 'ghi'], -1, -3)\n  ['abc', 'def']\n  >>> substrings(['abc', 'def', 'ghi'], -1, -2)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -2, 2)\n  ['def']\n  >>> substrings(['abc', 'def', 'ghi'], -3, -2)\n  ['def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -2, -3)\n  ['def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 3, 2)\n  []\n  >>> substrings(['abc', 'def', 'ghi'], -1, 2)\n  []\n  */\nconst substrings = (strings, start, end) => {\n  const newStrings = []\n\n  if (start < 0) {\n    start = 0\n  }\n\n  if (end < 0) {\n    end = strings.length + end\n  }\n\n  if (start > strings.length) {\n    return newStrings\n  }\n\n  if (end > strings.length) {\n    end = strings.length\n  }\n\n  for (let i = start; i <= end; i++) {\n    newStrings.push(strings[i])\n  }\n\n  return newStrings\n}\n\n/*\n  # Given a list of strings, return a list of all the substrings\n  >>> substrings(['abc', 'def', 'ghi'])\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 1)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 3)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 2)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -1)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -3)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -2)\n  ['abc', 'def']\n  >>> substrings(['abc', 'def', 'ghi'], 2, 3)\n  ['abc', 'def']\n  >>> substrings(['abc', 'def', 'ghi'], 2, -3)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 2, -2)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], 2, 2)\n  []\n  >>> substrings(['abc', 'def', 'ghi'], -1, 3)\n  ['abc', 'def']\n  >>> substrings(['abc', 'def', 'ghi'], -1, -3)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -1, -2)\n  ['abc', 'def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -2, 2)\n  ['def']\n  >>> substrings(['abc', 'def', 'ghi'], -3, -2)\n  ['def', 'ghi']\n  >>> substrings(['abc', 'def', 'ghi'], -2, -3)\n  ['def', 'ghi']\n  >>> substrings(['abc', 'def', 'gh"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  let number;\n\n  for (let i = 0; i < numbers.length; i++) {\n    number = numbers[i];\n    sum += number;\n    product *= number;\n  }\n\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let result = [...numbers];\n  for (let i = 1; i < result.length; i++) {\n    let max = result[i - 1];\n    for (let j = i; j < result.length; j++) {\n      if (max < result[j]) {\n        max = result[j];\n      }\n    }\n    result[i] = max;\n  }\n  return result;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n  const str = string.split('');\n  const pal = str.reverse().join('');\n  let i = 0;\n  while (i < pal.length - 1 &&!onst(pal)) {\n    i++;\n  }\n  const sub = pal.substr(i);\n  return sub + pal.substr(0, i);\n}\n\n/* Test if strig is a palindrome  */\nconst makePalindrome = (string) => {\n  if (string == '') {\n    return '';\n  }\n  const str = string.split('');\n  const pal = str.reverse().join('');\n  let i = 0;\n  while (i < pal.length - 1 &&!onst(pal)) {\n    i++;\n  }\n  const sub = pal.substr(i);\n  return sub + pal.substr(0, i);\n}\n\nmodule.exports = {\n  makePalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  let res = '';\n  for (let i = 0; i < aLen; i++) {\n    res += a[i] ^ b[i];\n  }\n  return res;\n};\n\n// Binary XOR for two strings a and b with same length\n// and same number of 1s and 0s\n// Expected time complexity: O(n)\nconst stringXor2 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const n = aLen + bLen - 1;\n  const c = [];\n  for (let i = 0; i <= n; i++) {\n    c[i] = 0;\n  }\n  for (let i = 0; i < aLen; i++) {\n    c[a[i] ^ b[i]] += 1;\n  }\n  for (let i = 0; i < bLen; i++) {\n    c[aLen + b[i] ^ i] += 1;\n  }\n  for (let i = 0; i < n; i++) {\n    if (c[i] % 2 == 1) {\n      c[i] -= 1;\n    }\n  }\n  return c.map((x, i) => {\n    return (x > 1)? i : i + aLen;\n  }).reduce((a, b) => a + b);\n};\n\n// Binary XOR for two strings a and b with different length\n// and different number of 1s and 0s\n// Expected time complexity: O(n)\nconst stringXor3 = (a, b) => {\n  const aLen = a.length;\n  const bLen = b.length;\n  const n = aLen + bLen - 1;\n  const c = [];\n  for (let i = 0; i <= n; i++) {\n    c[i] = 0;\n  }\n  for (let i = 0; i < aLen; i++) {\n    c[a[i] ^ b[i]] += 1;\n  }\n  for (let i = 0; i < bLen; i++) {\n    c[aLen + b[i] ^ i] += 1;\n  }\n  for (let i = 0; i < n; i++) {\n    if (c[i] % 2 == 1) {\n      c[i] -= 1;\n    }\n  }\n  return c.map((x, i) => {\n    return (x > 1)? i : i + aLen;\n  }).reduce((a, b) => a + b);\n};\n\nconst main = () => {\n  console.log(stringXor('101', '001'));\n  console.log(stringXor('11', '1'));\n  console.log(stringXor('00', '1'));\n  console.log(stringXor('0', '1'));\n  console.log(stringXor('1', '0'));\n  console.log(stringXor('01', '10'));\n  console.log(stringXor('00', '0'));\n  console.log(stringXor('100', '00'));\n  console.log(stringXor('11', '10'));\n  console.log(stringXor('101', '101'));\n  console.log(stringXor('010', '110'));\n  console.log(stringXor('011', '100'));\n  console.log(stringXor('110', '011'));\n  console.log(stringXor('001', '010'));\n  console.log(stringXor('001', '111'));\n  console.log(stringXor('111', '000'));\n  console.log(stringXor('101', '101'));\n  console.log(stringXor('111', '101'));\n  console.log(stringXor('100', '000'));\n  console.log(stringXor('010', '100'));\n  console.log(stringXor('011', '011'));\n  console.log(stringXor('110', '011'));\n  console.log(stringXor('011', '110'));\n  console.log(stringXor('001', '000'));\n  console.log(stringXor('111', '110'));\n  console.log(stringXor('111', '001'));\n  console.log(stringXor('001', '001'));\n  console.log(stringXor('000', '001'));\n  console.log(stringXor('110', '000'));\n  console.log(stringXor('101', '010'));\n  console.log(stringXor('010', '110'));\n  console.log(stringXor('011', '101'));\n  console.log(stringXor('101', '010'));\n  console.log(stringXor('011', '111'));\n  console.log(stringXor('111', '000'));\n  console.log(stringXor('000', '001'));\n  console.log(stringXor('110', '001'));\n  console.log(stringXor('101', '110'));\n  console.log(stringXor('110', '010'));\n  console.log(stringXor('011', '110'));\n  console.log(stringXor('111', '001'));\n  console.log(stringXor('000', '111'));\n  console.log(stringXor('111', '000'));\n  console.log(stringXor('110', '000'));\n  console.log(stringXor('010', '111'));\n  console.log(stringXor('011', '011'));\n  console.log(stringXor('111', '011'));\n  console.log(stringXor('000', '010'));\n  console.log(stringXor('001', '010'));\n  console.log(stringXor('010', '111'));\n  console.log(stringXor('011', '111'));\n  console"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const sorted = sortBy(strings, (string) => {\n    return string.length;\n  });\n  if (sorted.length === 0) {\n    return null;\n  } else {\n    return sorted[0];\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  let gcd = 0;\n  while (b) {\n    gcd = a;\n    a = b;\n    b = gcd % b;\n  }\n  return a;\n};\n\n// Calculate the value of the sum of the primes below a number n\n// a prime is a number that has no proper divisor other than 1 and itself\n// a proper divisor is a divisor that divides the number evenly\nconst sumOfPrimes = (n) => {\n  let sum = 0;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n// Returns the nth term of the fibonacci series\n// f(n) = f(n-1) + f(n-2)\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n// Returns the nth term of the harmonic series\n// h(n) = 1 + 1/2 + 1/3 +... + 1/n\nconst harmonic = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return 1 + harmonic(n - 1) / n;\n};\n\n// Calculate the value of Euler's totient function phi(n)\n// phi(n) = phi(n-1) + phi(n-2) +... + phi(1)\n// eulerTotient(n) = phi(n)\nconst eulerTotient = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let totient = n;\n  for (let i = n; i > 1; i--) {\n    totient += i;\n  }\n  return totient;\n};\n\n// Returns the nth term of the Catalan number, catalan(n)\n// n is an integer\n// catalan(n) = n * (n - 1) / 2\nconst catalan = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * (n - 1) / 2;\n};\n\n// Returns the nth term of the Combinatorial Number, com(n)\n// n is an integer\n// com(n) = n * (n - 1) / 2\nconst combinatorialNumber = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * (n - 1) / 2;\n};\n\n// Calculate the value of the number of divisors of a number\nconst numberOfDivisors = (n) => {\n  let total = 1;\n  let divisor = 1;\n  while (divisor < n) {\n    total += 1;\n    divisor = greatestCommonDivisor(divisor, n);\n  }\n  return total;\n};\n\n// Returns the value of the number of divisors of a number\nconst numberOfDivisors2 = (n) => {\n  let total = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    total += 1;\n    divisor = greatestCommonDivisor(divisor, n);\n  }\n  return total;\n};\n\n// Return the sum of the divisors of a number\nconst numberOfDivisors3 = (n) => {\n  let sum = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    sum += 1;\n    divisor = greatestCommonDivisor(divisor, n);\n  }\n  return sum;\n};\n\n// Returns the value of the number of divisors of a number\nconst numberOfDivisors4 = (n) => {\n  let total = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      total += 1;\n    }\n    divisor++;\n  }\n  return total;\n};\n\n// Return the sum of the divisors of a number\nconst numberOfDivisors5 = (n) => {\n  let sum = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      sum += divisor;\n    }\n    divisor++;\n  }\n  return sum;\n};\n\n// Return the number of divisors of a number\nconst numberOfDivisors6 = (n) => {\n  let divisor = 1;\n  let count = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      count++;\n    }\n    divisor++;\n  }\n  return count;\n};\n\n// Return the number of divisors of a number\nconst numberOfDivisors7 = (n) => {\n  let sum = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      sum += 1;\n    }\n    divisor++;\n  }\n  return sum;\n};\n\n// Return the number of divisors of a number\nconst numberOfDivisors8 = (n) => {\n  let count = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      count++;\n    }\n    divisor++;\n  }\n  return count;\n};\n\n// Return the number of divisors of a number\nconst numberOfDivisors9 = (n) => {\n  let sum = 1;\n  let divisor = 1;\n  while (divisor <= n) {\n    if (n % divisor === 0) {\n      sum += divisor;\n    }\n    divisor++;\n  }\n  return sum;\n};\n\n// Return the number of divisors of a number\n"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  return (string.split('')).filter((char) => (char!== '')).map((char) => (char + ''));\n}\n\n/* Return longest prefix from a string  to longest of the input string\n  >>> longestPrefix('abc')\n  'abc'\n  >>> longestPrefix('cba')\n  'cba'\n  */\nconst longestPrefix = (string) => {\n  return allPrefixes(string).pop();\n}\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'cba']\n  */\nconst allSuffixes = (string) => {\n  return (string.split('')).filter((char) => (char!== '')).reverse().map((char) => (char + ''));\n}\n\n/* Return longest suffix from a string  to longest of the input string\n  >>> longestSuffix('abc')\n  'abc'\n  >>> longestSuffix('cba')\n  'cba'\n  */\nconst longestSuffix = (string) => {\n  return allSuffixes(string).pop();\n}\n\n/* Return list of all suffixes from sho rtest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'cba']\n  */\nconst allLongestSuffixes = (string) => {\n  return allSuffixes(string).reverse();\n}\n\n/* Return longest prefix and suffix from a string  to longest of the input string\n  >>> longestLongestPrefix('abc')\n  'abc'\n  >>> longestLongestPrefix('cba')\n  'cba'\n  */\nconst longestLongestPrefix = (string) => {\n  return longestPrefix(string) + longestSuffix(string);\n}\n\nmodule.exports = {\n  allLongestSuffixes,\n  allLongestPrefixes,\n  allSuffixes,\n  allPrefixes,\n  longestLongestPrefix,\n  longestLongestSuffix,\n  longestPrefix,\n  longestSuffix\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i <= n; i++) {\n    str += ` ${i}`;\n  }\n  return str;\n};\n\nexport default stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characterSet = new Set(string.split(''));\n  return characterSet.size;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let output_list = [];\n  let music_string_splits = music_string.split(\" \");\n  music_string_splits.forEach((music_string_split) => {\n    let beat_list = parseBeat(music_string_split);\n    output_list = output_list.concat(beat_list);\n  });\n  return output_list;\n}\n\nconst parseBeat = (music_string_split) => {\n  let beat_list = [];\n  let beats = music_string_split.split(\"\");\n  for (let i = 0; i < beats.length; i++) {\n    let current_beat = parseBeatOne(beats[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOne = (beat_string) => {\n  let beat_list = [];\n  let beat_split = beat_string.split(\"|\");\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 1);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 2);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOneOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 3);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOneOneOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 4);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOneOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOneOneOneOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 5);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOneOneOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOneOneOneOneOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 6);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOneOneOneOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOneOneOneOneOneOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 7);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOneOneOneOneOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  }\n  return beat_list;\n}\n\nconst parseBeatOneOneOneOneOneOneOneOne = (beat_string) => {\n  let beat_list = [];\n  let beat_string_splits = beat_string.split(\"\");\n  let beat_split = beat_string_splits.slice(0, 8);\n  for (let i = 0; i < beat_split.length; i++) {\n    let current_beat = parseBeatOneOneOneOneOneOneOneOneOneOne(beat_split[i]);\n    beat_list = beat_list.concat(current_beat);\n  "}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const len = string.length\n  if (string.indexOf(substring) === -1) return 0\n  const count = 0\n  for (let i = 0; i < len; i++) {\n    if (string.indexOf(substring, i)!== -1) count++\n  }\n  return count\n}\n\n/* Find the most frequent character in a string */\nconst findFrequentChar = (string) => {\n  const len = string.length\n  const map = {}\n  for (let i = 0; i < len; i++) {\n    if (map[string[i]] === undefined) map[string[i]] = 0\n    map[string[i]]++\n  }\n  const max = 0\n  let character = ''\n  for (let key in map) {\n    if (map[key] > max) {\n      max = map[key]\n      character = key\n    }\n  }\n  return character\n}\n\n/*\n  Find the longest string that can be formed by the concatenation of two strings,\n  but is not a palindrome.\n*/\nconst findLongestNonPalindrome = (string1, string2) => {\n  let len = 0\n  let start = 0\n  let end = 0\n  let string = ''\n  for (let i = 0; i < string1.length; i++) {\n    if (string2[i] === string1[i]) {\n      if (i === start) {\n        start += 1\n      } else if (i === end) {\n        end += 1\n      } else {\n        string = string1.substring(start, end)\n        if (string.indexOf(string2.substring(0, i)) === -1 && string.indexOf(string2.substring(i, string2.length)) === -1) {\n          len = Math.max(len, string.length)\n        }\n        start = i + 1\n        end = i\n      }\n    }\n  }\n  return len\n}\n\n/* Find the longest string that can be formed by the concatenation of two strings.\n  If they are a palindrome, return the longest non-palindrome string */\nconst findLongestPalindrome = (string1, string2) => {\n  let len = 0\n  let start = 0\n  let end = 0\n  let string = ''\n  for (let i = 0; i < string1.length; i++) {\n    if (string2[i] === string1[i]) {\n      if (i === start) {\n        start += 1\n      } else if (i === end) {\n        end += 1\n      } else {\n        string = string1.substring(start, end)\n        if (string.indexOf(string2.substring(0, i)) === -1 && string.indexOf(string2.substring(i, string2.length)) === -1) {\n          len = Math.max(len, string.length)\n        }\n        start = i + 1\n        end = i\n      }\n    }\n  }\n  return len\n}\n\n/* Find the longest substring that is a palindrome. */\nconst findLongestPalindromeSubstring = (string) => {\n  let start = 0\n  let end = 0\n  let string = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - 1 - i]) {\n      if (i === start) {\n        start += 1\n      } else if (i === end) {\n        end += 1\n      } else {\n        string = string.substring(start, end)\n        if (string.indexOf(string[0]) === -1 && string.indexOf(string[string.length - 1]) === -1) {\n          return string\n        }\n        start = i + 1\n        end = i\n      }\n    }\n  }\n  return ''\n}\n\n/* Find the longest substring that is a palindrome and is not a palindrome itself. */\nconst findLongestNonPalindromeSubstring = (string) => {\n  let start = 0\n  let end = 0\n  let string = ''\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === string[string.length - 1 - i]) {\n      if (i === start) {\n        start += 1\n      } else if (i === end) {\n        end += 1\n      } else {\n        string = string.substring(start, end)\n        if (string.indexOf(string[0]) === -1 && string.indexOf(string[string.length - 1]) === -1) {\n          return string\n        }\n        start = i + 1\n        end = i\n      }\n    }\n  }\n  return ''\n}\n\n/*\n  Find the longest palindrome that can be formed by concatenating two strings.\n  If they are a palindrome, return the longest non-palindrome string.\n*/\nconst findLongestPalindrome = (string1, string2) => {\n  let start = 0\n  let end = 0\n  let string = ''\n  for (let i = 0; i < string1.length; i++) {\n    if (string2[i] === string1[i]) {\n      if (i === start) {\n        start += 1\n      } else if (i === end) {\n        end += 1\n      } else {\n        string = string1.substring(start, end)\n        if (string.indexOf(string2.substring(0, i)) === -1 && string.indexOf(string2.substring(i, string2.length)) === -1) {\n          return string\n        }\n        start = i + 1\n        end = i\n      }\n    }\n  }\n  return ''\n}\n\nmodule.exports = {\n  howManyTimes,\n  findFrequentChar,\n  findLongestNonPalindrome,\n  findLongestPalindrome,\n  findLongestPalindromeSubstring,\n  findLongestNon"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n    const arr = numbers.split(\" \").map(Number);\n    const sorted = arr.sort((a, b) => a - b);\n    return sorted.join(\" \");\n}\n\n/*\n  Input: The number of elements in an array.\n  Output: A binary array with the elements sorted from smallest to largest.\n  \n  >>> sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  >>> sortArray([8, 5, 4, 3, 2, 1])\n  [1, 2, 3, 4, 5, 8]\n  \n  >>> sortArray([2, 3, 1, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  \n  >>> sortArray([1, 4, 5, 3, 2, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  \n  >>> sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  >>> sortArray([9, 8, 7, 6, 5, 4, 3, 2, 1])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  >>> sortArray([5, 4, 3, 2, 1])\n  [1, 2, 3, 4, 5]\n  \n  >>> sortArray([2, 3, 1, 4, 5])\n  [1, 2, 3, 4, 5]\n  \n  >>> sortArray([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  \n  >>> sortArray([1])\n  [1]\n  \n  >>> sortArray([])\n  []\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3, 4]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3, 4, 5]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3, 4, 5, 6]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3, 4, 5, 6, 7]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  \n  >>> sortArray([-9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6,"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length\n  if (len < 2) return\n\n  const min = numbers[0]\n  const max = numbers[len - 1]\n\n  let minIndex = 0\n  let maxIndex = len - 1\n\n  const mid = (maxIndex + minIndex) / 2\n  const midValue = numbers[mid]\n\n  let minDistance = Math.abs(maxValue - midValue)\n  let maxDistance = Math.abs(minValue - midValue)\n\n  for (let i = 0; i < len; i++) {\n    const current = numbers[i]\n\n    if (Math.abs(midValue - current) < minDistance) {\n      minIndex = i\n      minDistance = Math.abs(midValue - current)\n    }\n\n    if (Math.abs(midValue - current) > maxDistance) {\n      maxIndex = i\n      maxDistance = Math.abs(midValue - current)\n    }\n  }\n\n  return [numbers[minIndex], numbers[maxIndex]]\n}\n\nexport default findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const [min, max] = Array.from(numbers).sort((a, b) => a - b)\n  const range = max - min\n  return numbers.map(x => (x - min) / range)\n}\n\nconst scaleToFit = (width, height, image) => {\n  const canvas = document.createElement(\"canvas\")\n  canvas.width = width\n  canvas.height = height\n  const ctx = canvas.getContext(\"2d\")\n  ctx.drawImage(image, 0, 0, width, height)\n  return canvas\n}\n\nconst transformToFit = (width, height, image) => {\n  const canvas = scaleToFit(width, height, image)\n  return {\n    transform: canvas.style.transform,\n    image: canvas\n  }\n}\n\nconst transformToScale = (width, height, image) => {\n  const canvas = scaleToFit(width, height, image)\n  return {\n    transform: canvas.style.transform,\n    image: canvas\n  }\n}\n\nconst rotate = (angle) => {\n  return {\n    transform: \"rotate(\" + angle + \"deg)\"\n  }\n}\n\nconst flipHorizontal = () => {\n  return {\n    transform: \"scale(-1,1)\"\n  }\n}\n\nconst flipVertical = () => {\n  return {\n    transform: \"scale(1,-1)\"\n  }\n}\n\nconst translate = (x, y) => {\n  return {\n    transform: \"translate(\" + x + \"px,\" + y + \"px)\"\n  }\n}\n\nconst scale = (x, y) => {\n  return {\n    transform: \"scale(\" + x + \",\" + y + \")\"\n  }\n}\n\nconst scaleTo = (width, height) => {\n  return {\n    transform: \"scale(\" + width + \",\" + height + \")\"\n  }\n}\n\nconst scaleFrom = (width, height) => {\n  return {\n    transform: \"scale(\" + height + \",\" + width + \")\"\n  }\n}\n\nconst transform = (transform) => {\n  return {\n    transform: transform\n  }\n}\n\nconst getTransformed = (transform, image) => {\n  const canvas = document.createElement(\"canvas\")\n  canvas.width = image.width\n  canvas.height = image.height\n  const ctx = canvas.getContext(\"2d\")\n  ctx.drawImage(image, 0, 0)\n  ctx.translate(canvas.width / 2, canvas.height / 2)\n  ctx.translate(transform.x, transform.y)\n  ctx.rotate(transform.rotate)\n  ctx.scale(transform.scaleX, transform.scaleY)\n  ctx.scale(transform.scale, transform.scale)\n  ctx.translate(-canvas.width / 2, -canvas.height / 2)\n  return canvas\n}\n\nexport default {\n  rescaleToUnit,\n  scaleToFit,\n  rotate,\n  flipHorizontal,\n  flipVertical,\n  translate,\n  scale,\n  scaleTo,\n  scaleFrom,\n  transform,\n  getTransformed\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* Filter given list of any python valu es on ly for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', '5']\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter((value) => {\n    return typeof value ==='string';\n  });\n};\n\n/* Filter given list of any python valu es on ly for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number';\n  });\n};\n\n/* Filter given list of any python valu es on ly for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  [5]\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'boolean';\n  });\n};\n\n/* Filter given list of any python valu es on ly for objects\n  >>> filterObjects(['a', 3.14, 5])\n  [{}]\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'object';\n  });\n};\n\nmodule.exports = {\n  filterStrings,\n  filterNumbers,\n  filterIntegers,\n  filterBooleans,\n  filterObjects\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return string without last character\n  *\n  * @param {string} string\n  * @returns {string}\n  * @example\n  * strcutLast('')\n  * // ''\n  *\n  * strcutLast('abc')\n  * // 'abc'\n  *\n  * strcutLast('abcdef')\n  * // 'abcdef'\n  *\n  * strcutLast('abcdefgh')\n  * // 'abcdefg'\n  *\n  * strcutLast('abcdefghijklmnopqrst')\n  * // 'abcdefghijklmnopqrst'\n  */\nconst strcutLast = (string) => {\n  return string.slice(0, -1);\n};\n\n/**\n  * Return string without first character\n  *\n  * @param {string} string\n  * @returns {string}\n  * @example\n  * strcutFirst('')\n  * // ''\n  *\n  * strcutFirst('abc')\n  * // 'abc'\n  *\n  * strcutFirst('abcdef')\n  * // 'ef'\n  *\n  * strcutFirst('abcdefgh')\n  * // 'gh'\n  *\n  * strcutFirst('abcdefghijklmnopqrst')\n  * // 't'\n  */\nconst strcutFirst = (string) => {\n  return string.slice(1);\n};\n\n/**\n  * Return string without the first and last character\n  *\n  * @param {string} string\n  * @returns {string}\n  * @example\n  * strcutFirstLast('')\n  * // ''\n  *\n  * strcutFirstLast('abc')\n  * // 'bc'\n  *\n  * strcutFirstLast('abcdef')\n  * // 'def'\n  *\n  * strcutFirstLast('abcdefgh')\n  * // 'gh'\n  *\n  * strcutFirstLast('abcdefghijklmnopqrst')\n  * // 't'\n  */\nconst strcutFirstLast = (string) => {\n  return strcutLast(strcutFirst(string));\n};\n\n/**\n  * Return string without the first and last character and\n  * replace some character with other\n  *\n  * @param {string} string\n  * @param {string} replace\n  * @returns {string}\n  * @example\n  * strcutFirstLastReplace('abc', 'x')\n  * // 'xbxc'\n  *\n  * strcutFirstLastReplace('abcdef', 'x')\n  * // 'xef'\n  *\n  * strcutFirstLastReplace('abcdefgh', 'x')\n  * // 'xgh'\n  *\n  * strcutFirstLastReplace('abcdefghijklmnopqrst', 'x')\n  * // 'txst'\n  */\nconst strcutFirstLastReplace = (string, replace) => {\n  return strcutFirstLast(string).replace(replace, '');\n};\n\n/**\n  * Return string without the first character\n  *\n  * @param {string} string\n  * @returns {string}\n  * @example\n  * strcutFirstReplace('')\n  * // ''\n  *\n  * strcutFirstReplace('abc')\n  * // 'abc'\n  *\n  * strcutFirstReplace('abcdef')\n  * // 'abcdef'\n  *\n  * strcutFirstReplace('abcdefgh')\n  * // 'abcdefgh'\n  *\n  * strcutFirstReplace('abcdefghijklmnopqrst')\n  * // 'abcdefghijklmnopqrst'\n  */\nconst strcutFirstReplace = (string) => {\n  return strcutFirst(string).replace(/^\\s*/, '');\n};\n\n/**\n  * Return string without the last character\n  *\n  * @param {string} string\n  * @returns {string}\n  * @example\n  * strcutLastReplace('')\n  * // ''\n  *\n  * strcutLastReplace('abc')\n  * // 'abc'\n  *\n  * strcutLastReplace('abcdef')\n  * // 'abcdef'\n  *\n  * strcutLastReplace('abcdefgh')\n  * // 'abcdefgh'\n  *\n  * strcutLastReplace('abcdefghijklmnopqrst')\n  * // 'abcdefghijklmnopqrst'\n  */\nconst strcutLastReplace = (string) => {\n  return strcutLast(string).replace(/\\s*$/, '');\n};\n\n/**\n  * Return string without the first and last character and\n  * replace some character with other\n  *\n  * @param {string} string\n  * @param {string} replace\n  * @returns {string}\n  * @example\n  * strcutFirstLastReplace('abc', 'x')\n  * // 'xbxc'\n  *\n  * strcutFirstLastReplace('abcdef', 'x')\n  * // 'xef'\n  *\n  * strcutFirstLastReplace('abcdefgh', 'x')\n  * // 'xgh'\n  *\n  * strcutFirstLastReplace('abcdefghijklmnopqrst', 'x')\n  * // 'txst'\n  */\nconst strcutFirstLastReplace = (string, replace) => {\n  return strcutFirstLastReplace(strcutFirstLast(string), replace);\n};\n\nexport default {\n  strlen,\n  strcutLast,\n  strcutLastReplace,\n  strcutFirst,\n  strcutFirstReplace,\n  strcutFirstLast,\n  strcutFirstLastReplace\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let divisor = 2\n  while (n % divisor!= 0) {\n    divisor += 1\n  }\n  return divisor\n}\n\n/*\n  >>> largestFactor(1)\n  1\n  >>> largestFactor(15)\n  3\n  >>> largestFactor(5)\n  1\n  >>> largestFactor(10)\n  2\n  >>> largestFactor(7)\n  7\n  >>> largestFactor(100)\n  100\n  >>> largestFactor(1000)\n  100\n  >>> largestFactor(1000000)\n  1000\n  >>> largestFactor(10000000)\n  1000\n  >>> largestFactor(100000000)\n  1000\n  >>> largestFactor(1000000000)\n  1000\n  >>> largestFactor(10000000000)\n  1000\n  >>> largestFactor(100000000000)\n  1000\n  >>> largestFactor(1000000000000)\n  1000\n  >>> largestFactor(10000000000000)\n  1000\n  >>> largestFactor(100000000000000)\n  1000\n  >>> largestFactor(1000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000)\n  1000\n  >>> largestFactor(10000000000000000"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = []\n  for(let i = 1; i * i <= n; i++) {\n    if(n % i === 0) {\n      factors.push(i)\n      if(i!== Math.sqrt(n)) {\n        factors.push(n / i)\n      }\n    }\n  }\n  return factors\n}\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const unique = [];\n  const count = {};\n  const uniqueCount = 0;\n  for (const n of numbers) {\n    if (count[n] === undefined) {\n      count[n] = 1;\n      uniqueCount += 1;\n    } else {\n      count[n] += 1;\n    }\n    if (uniqueCount > 1) {\n      unique.push(n);\n    }\n  }\n  return unique;\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let result = string.toLowerCase();\n  let i = result.length;\n  while (--i) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result = result.replace(String.fromCharCode(result[i].toUpperCase()), result[i].toLowerCase());\n    }\n  }\n  return result;\n}\n\n/*\n  >>> flipCase('HELLo')\n  'hello'\n  */\nconst flipCase2 = (string) => {\n  let result = string.toLowerCase();\n  let i = result.length;\n  while (--i) {\n    if (result[i] >= 'A' && result[i] <= 'Z') {\n      result = result.replace(String.fromCharCode(result[i].toUpperCase()), result[i].toLowerCase());\n    }\n  }\n  return result;\n}\n\nconst flipCase3 = (string) => {\n  let result = string.toUpperCase();\n  let i = result.length;\n  while (--i) {\n    if (result[i] >= 'a' && result[i] <= 'z') {\n      result = result.replace(String.fromCharCode(result[i].toLowerCase()), result[i].toUpperCase());\n    }\n  }\n  return result;\n}\n\nmodule.exports = {\n  flipCase,\n  flipCase2,\n  flipCase3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  # Return true if given number is even\n  >>> isEven(4)\n  True\n  >>> isEven(5)\n  False\n  >>> isEven(6)\n  False\n  >>> isEven(0)\n  True\n  >>> isEven(1)\n  True\n  >>> isEven(2)\n  False\n  >>> isEven(3)\n  False\n  */\nconst isEven = (num) => {\n  return num % 2 === 0;\n};\n\n/*\n  # Return the number of 1 bits in given number\n  >>> numBits(0)\n  0\n  >>> numBits(1)\n  1\n  >>> numBits(2)\n  1\n  >>> numBits(3)\n  2\n  >>> numBits(4)\n  2\n  >>> numBits(5)\n  3\n  >>> numBits(6)\n  3\n  >>> numBits(7)\n  3\n  >>> numBits(8)\n  4\n  >>> numBits(9)\n  4\n  >>> numBits(10)\n  4\n  >>> numBits(11)\n  5\n  >>> numBits(12)\n  5\n  >>> numBits(13)\n  5\n  >>> numBits(14)\n  5\n  >>> numBits(15)\n  6\n  >>> numBits(16)\n  6\n  >>> numBits(17)\n  6\n  >>> numBits(18)\n  6\n  >>> numBits(19)\n  6\n  >>> numBits(20)\n  7\n  >>> numBits(21)\n  7\n  >>> numBits(22)\n  7\n  >>> numBits(23)\n  7\n  >>> numBits(24)\n  7\n  >>> numBits(25)\n  7\n  >>> numBits(26)\n  7\n  >>> numBits(27)\n  7\n  >>> numBits(28)\n  8\n  >>> numBits(29)\n  8\n  >>> numBits(30)\n  8\n  >>> numBits(31)\n  8\n  >>> numBits(32)\n  8\n  >>> numBits(33)\n  9\n  >>> numBits(34)\n  9\n  >>> numBits(35)\n  9\n  >>> numBits(36)\n  9\n  >>> numBits(37)\n  9\n  >>> numBits(38)\n  9\n  >>> numBits(39)\n  9\n  >>> numBits(40)\n  9\n  >>> numBits(41)\n  9\n  >>> numBits(42)\n  9\n  >>> numBits(43)\n  9\n  >>> numBits(44)\n  9\n  >>> numBits(45)\n  9\n  >>> numBits(46)\n  9\n  >>> numBits(47)\n  9\n  >>> numBits(48)\n  9\n  >>> numBits(49)\n  9\n  >>> numBits(50)\n  9\n  >>> numBits(51)\n  9\n  >>> numBits(52)\n  9\n  >>> numBits(53)\n  9\n  >>> numBits(54)\n  9\n  >>> numBits(55)\n  9\n  >>> numBits(56)\n  9\n  >>> numBits(57)\n  9\n  >>> numBits(58)\n  9\n  >>> numBits(59)\n  9\n  >>> numBits(60)\n  9\n  >>> numBits(61)\n  9\n  >>> numBits(62)\n  9\n  >>> numBits(63)\n  9\n  >>> numBits(64)\n  9\n  >>> numBits(65)\n  10\n  >>> numBits(66)\n  10\n  >>> numBits(67)\n  10\n  >>> numBits(68)\n  10\n  >>> numBits(69)\n  10\n  >>> numBits(70)\n  10\n  >>> numBits(71)\n  10\n  >>> numBits(72)\n  10\n  >>> numBits(73)\n  10\n  >>> numBits(74)\n  10\n  >>> numBits(75)\n  10\n  >>> numBits(76)\n  10\n  >>> numBits(77)\n  10\n  >>> numBits(78)\n  10\n  >>> numBits(79)\n  10\n  >>> numBits(80)\n  10\n  >>> numBits(81)\n  10\n  >>> numBits(82)\n  10\n  >>> numBits(83)\n  10\n  >>> numBits(84)\n  10\n  >>> numBits(85)\n  10\n  >>> numBits(86)\n  10\n  >>> numBits(87)\n  10\n  >>> numBits(88)\n  10\n  >>> numBits(89)\n  10\n  >>> numBits(90)\n  10\n  >>> numBits(91)\n  10\n  >>> numBits(92)\n  10\n  >>> numBits(93)\n  10\n  >>> numBits(94)\n  10\n  >>> numBits(95)\n  10\n  >>> numBits(96)\n  10\n  >>> numBits(97)\n  10\n  >>> numBits(98)\n  10\n  >>> numBits(99)\n  10\n  >>> numBits(100)\n  10\n  >>> numBits(101)\n  10\n  >>> numBits(102)\n  10\n  >>> numBits(103)\n  10\n  >>> numBits(104)\n  10\n  >>> numBits(105)\n  10\n  >>> numBits(106)\n  10\n  >>> numBits(107)\n  10\n  >>> numBits(108)\n  10\n  >>> numBits(109)\n  10\n  >>> num"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n    return strings.filter(x => x.indexOf(prefix) === 0);\n}\n\n/*\n  Return a string containing the provided number of copies of the given string.\n  >>> repeatString('a', 0)\n  ''\n  >>> repeatString('a', 1)\n  'a'\n  >>> repeatString('a', 2)\n  'aa'\n  >>> repeatString('a', 3)\n  'aaa'\n  >>> repeatString('a', 4)\n  'aaaa'\n  >>> repeatString('a', 5)\n  'aaaaa'\n  >>> repeatString('a', 6)\n  'aaaaaa'\n  >>> repeatString('a', 7)\n  'aaaaaaa'\n  */\nconst repeatString = (s, times) => {\n    const r = '';\n    while (times--) {\n        r += s;\n    }\n    return r;\n}\n\n/*\n  Find the index of the largest element in the given list of numbers.\n  >>> largestNumberIndex([1,2,3,4,5,6,7,8,9])\n  6\n  >>> largestNumberIndex([1,2,3,4,5,6,7,8,9,10])\n  7\n  >>> largestNumberIndex([1,2,3,4,5,6,7,8,9,10,11])\n  9\n  */\nconst largestNumberIndex = (numbers) => {\n    let largest = 0;\n    for (let i = 1; i < numbers.length; i++) {\n        if (numbers[largest] < numbers[i]) {\n            largest = i;\n        }\n    }\n    return largest;\n}\n\n/*\n  Count the number of strings in the given list that contain a given word.\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'A')\n  1\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'C')\n  0\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'S')\n  1\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'z')\n  0\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'Aard')\n  1\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'aardvark')\n  1\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'AardVark')\n  1\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'Aardv')\n  1\n  >>> countWords(['Aardvark', 'cows', 'bats', 'fish'], 'AardvarkAard')\n  2\n  */\nconst countWords = (words, substr) => {\n    return words.filter(x => x.indexOf(substr)!== -1).length;\n}\n\n/*\n  Take a string and convert it to uppercase.\n  >>> upperCase('hello world')\n  'HELLO WORLD'\n  */\nconst upperCase = (str) => {\n    return str.toUpperCase();\n}\n\n/*\n  Take a string and convert it to lowercase.\n  >>> lowerCase('HELLO WORLD')\n  'hello world'\n  */\nconst lowerCase = (str) => {\n    return str.toLowerCase();\n}\n\n/*\n  Take a string and replace any occurences of the given string with the given replacement string.\n  >>> replaceString('hello world', 'hello', 'helloooo')\n  'helloooo world'\n  >>> replaceString('hello world', 'hello', 'helloooo')\n  'helloooo world'\n  >>> replaceString('hello world', 'hello', 'helloooo')\n  'helloooo world'\n  >>> replaceString('hello world', 'hello', 'helloooo')\n  'helloooo world'\n  >>> replaceString('hello world', 'hello', 'helloooo')\n  'helloooo world'\n  >>> replaceString('hello world', 'hello', 'helloooo')\n  'helloooo world'\n  >>> replaceString('hello world', 'hello', 'helloooo')\n  'helloooo world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hello', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello world', 'hell', 'hello')\n  'hello world'\n  >>> replaceString('hello"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n    return l.filter(x => x > 0);\n};\n\n/*\n  >>> getNegative([-1, 2, -4, 5, 6])\n  [-4, -5, -6]\n  >>> getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -2, -3, -9, -123, -1]\n  */\nconst getNegative = (l) => {\n    return l.filter(x => x < 0);\n};\n\n/*\n  >>> getEven([-1, 2, -4, 5, 6])\n  [2, 4, 6]\n  >>> getEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [2, 4, 6, 9, 123, 1]\n  >>> getEven([1, 2, 3, 4])\n  []\n  >>> getEven([1, 2, 3, 4, 5])\n  [2, 4, 5]\n  */\nconst getEven = (l) => {\n    return l.filter(x => x % 2 === 0);\n};\n\n/*\n  >>> getOdd([-1, 2, -4, 5, 6])\n  [1, 3, 5, 7]\n  >>> getOdd([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [1, 3, 5, 7, 9, 123, 1]\n  >>> getOdd([1, 2, 3, 4])\n  []\n  >>> getOdd([1, 2, 3, 4, 5])\n  [1, 3, 5]\n  */\nconst getOdd = (l) => {\n    return l.filter(x => x % 2!== 0);\n};\n\n/*\n  >>> getSum([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getSum([1, 2, 3, 4, 5, 6, 7, 8, 9,"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n    if (n < 2) return false;\n    if (n === 2) return true;\n    if (n === 1) return false;\n    let div = 2;\n    while (div * div <= n) {\n        if (n % div === 0) return false;\n        div += 1;\n    }\n    return true;\n}\n\n/**\n  * @name gcd\n  * @description\n  * Return the greatest common divisor of a given number.\n  *\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  *\n  * @example\n  * gcd(5, 12)\n  * //=> 2\n  *\n  * @example\n  * gcd(7, 21)\n  * //=> 7\n  *\n  * @example\n  * gcd(5, 2)\n  * //=> 1\n  *\n  * @example\n  * gcd(1, 1)\n  * //=> 1\n  */\nconst gcd = (x, y) => {\n    if (x === 0) return y;\n    if (y === 0) return x;\n    if (x < 0) return gcd(-x, y);\n    if (y < 0) return gcd(x, -y);\n    return gcd(y, x % y);\n}\n\n/**\n  * @name lcm\n  * @description\n  * Return the least common multiple of a given number.\n  *\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  *\n  * @example\n  * lcm(5, 12)\n  * //=> 60\n  *\n  * @example\n  * lcm(7, 21)\n  * //=> 21\n  *\n  * @example\n  * lcm(5, 2)\n  * //=> 5\n  *\n  * @example\n  * lcm(1, 1)\n  * //=> 1\n  */\nconst lcm = (x, y) => {\n    if (x === 0) return y;\n    if (y === 0) return x;\n    if (x < 0) return lcm(-x, y);\n    if (y < 0) return lcm(x, -y);\n    return x * y / gcd(x, y);\n}\n\n/**\n  * @name lcm\n  * @description\n  * Return the least common multiple of a given number.\n  *\n  * @param {number} x\n  * @param {number} y\n  * @returns {number}\n  *\n  * @example\n  * lcm(5, 12)\n  * //=> 60\n  *\n  * @example\n  * lcm(7, 21)\n  * //=> 21\n  *\n  * @example\n  * lcm(5, 2)\n  * //=> 5\n  *\n  * @example\n  * lcm(1, 1)\n  * //=> 1\n  */\nconst lcm = (x, y) => {\n    if (x === 0) return y;\n    if (y === 0) return x;\n    if (x < 0) return lcm(-x, y);\n    if (y < 0) return lcm(x, -y);\n    return x * y / gcd(x, y);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    if(xs.length % 2 == 0)\n      return findZero(xs.concat([0]));\n    return findMax(xs);\n}\nconst findMax = (xs) => {\n    let max = 0;\n    let min = 0;\n    for(let i in xs) {\n      if(xs[i] > max)\n        max = xs[i];\n      if(xs[i] < min)\n        min = xs[i];\n    }\n    if(min > 0)\n      return -min;\n    else\n      return max;\n}\n\n/* Find x such that poly(x) = 0 and return it.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findMax = (xs) => {\n    let max = 0;\n    let min = 0;\n    for(let i in xs) {\n      if(xs[i] > max)\n        max = xs[i];\n      if(xs[i] < min)\n        min = xs[i];\n    }\n    if(min > 0)\n      return -min;\n    else\n      return max;\n}\n\n/* \n  Given a polynomial xs, and point x, return ys.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */\nconst poly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\nconst polyFind = (xs, x) => {\n  let ans = 0;\n  for(let i in xs) {\n    ans = ans + xs[i] * Math.pow(x, i);\n  }\n  return ans;\n}\n\n/* Evaluate a polynomial with coefficients in terms of the base.\n  x0 - base\n  x1 - exponent\n  return x0 * x^x1\n  */\nconst base = (x,x0,x1) => {\n  return x0 * Math.pow(x, x1);\n}\n\nconst polyFind2 = (xs, x) => {\n  let ans = 0;\n  for(let i in xs) {\n    ans = ans + xs[i] * Math.pow(x, i);\n  }\n  return ans;\n}\n\n/* Evaluate a polynomial with coefficients in terms of the base.\n  x0 - base\n  x1 - exponent\n  return x0 * x^x1\n  */\nconst base = (x,x0,x1) => {\n  return x0 * Math.pow(x, x1);\n}\n\n/* Given an array of numbers, return the value of the nth power of the base\n */\nconst power = (xs, n) => {\n  return xs.reduce((prev, it, index) =>{\n    return prev + it * Math.pow(xs[index], n);\n  }, 1);\n}\n\n/* \n  Given a polynomial xs, and x, return the coefficien ts of xs\n  */\nconst getPolyCoefficiens = (x, xs) => {\n  let poly = xs.reduce((prev, it, index) =>{\n    return prev + item * Math.pow(x, index);\n  }, 0);\n  return poly;\n}\n\nconst getPowerCoefficiens = (x, xs) => {\n  let poly = xs.reduce((prev, it, index) =>{\n    return prev + it * Math.pow(x, index);\n  }, 1);\n  return poly;\n}\n\nconst getPowerCoefficiens2 = (x, xs) => {\n  let poly = xs.reduce((prev, it, index) =>{\n    return prev + it * Math.pow(x, index);\n  }, 1);\n  return poly;\n}\n\nconst getPowerCoefficiens3 = (x, xs) => {\n  let poly = xs.reduce((prev, it, index) =>{\n    return prev + it * Math.pow(x, index);\n  }, 1);\n  return poly;\n}\n\nconst getPowerCoefficiens4 = (x, xs) => {\n  let poly = xs.reduce((prev, it, index) =>{\n    return prev + it * Math.pow(x, index);\n  }, 1);\n  return poly;\n}\n\nconst getPowerCoefficiens5 = (x, xs) => {\n  let poly = xs.reduce((prev, it, index) =>{\n    return"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const a = []\n  for (let i = 0; i < l.length; i++) {\n    a.push(l[i])\n  }\n  a.sort((a, b) => a - b)\n  const ret = []\n  for (let i = 0; i < a.length; i++) {\n    ret.push(a[i])\n  }\n  return ret\n}\n\n// const sortThird = (l) => {\n//   const a = []\n//   for (let i = 0; i < l.length; i++) {\n//     a.push(l[i])\n//   }\n//   a.sort((a, b) => a - b)\n//   const ret = []\n//   for (let i = 0; i < a.length; i++) {\n//     ret.push(a[i])\n//   }\n//   return ret\n// }\n\nexport default sortThird\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const d = new Map();\n  for (let i = 0, len = l.length; i < len; i++) {\n    d.set(l[i], true);\n  }\n  return Array.from(d.keys());\n};\n\n/*\n  >>> unique(['a', 'b', 'c', 'b', 'c', 'a'])\n  ['a', 'b', 'c']\n  >>> unique([{a: 1}, {a: 2}])\n  [{a: 1}, {a: 2}]\n  >>> unique([{a: 1}, {a: 2}, {a: 2}])\n  [{a: 1}, {a: 2}]\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> unique([{a: 1}, {b: 2}])\n  [{a: 1}, {b: 2}]\n  >>> unique([{a: 1, b: 2}, {a: 2, b: 3}])\n  [{a: 1, b: 2}, {a: 2, b: 3}]\n  >>> unique([{a: 1, b: 2}, {a: 2, b: 3}, {a: 2, b: 3}])\n  [{a: 1, b: 2}, {a: 2, b: 3}]\n  >>> unique([{a: 1}, {a: 2}, {a: 2}])\n  [{a: 1}, {a: 2}]\n  >>> unique([{a: 1}, {a: 2}, {a: 2}, {a: 2}])\n  [{a: 1}, {a: 2}]\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 0])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n  >>> unique([{a: 1}, {b: 2}, {c: 3}])\n  [{a: 1}, {b: 2}, {c: 3}]\n  >>> unique([{a: 1, b: 2}, {a: 2, b: 3}, {a: 3, b: 4}])\n  [{a: 1, b: 2}, {a: 2, b: 3}, {a: 3, b: 4}]\n  >>> unique([{a: 1, b: 2}, {a: 2, b: 3}, {a: 3, b: 4}, {a: 4, b: 5}])\n  [{a: 1, b: 2}, {a: 2, b: 3}, {a: 3, b: 4}, {a: 4, b: 5}]\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'a', 'b', 'c'])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'a', 'b', 'c']\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'a', 'b', 'c'], {sort: true})\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'a', 'b', 'c']\n  >>> unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'a', 'b', 'c'], {sort: false})\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'a', 'b', 'c']\n*/\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return undefined;\n  }\n  const currentMax = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > currentMax) {\n      currentMax = l[i];\n    }\n  }\n  return currentMax;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const divisors = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251]\n    const divisorN = (divisor) => {\n        let count = 0;\n        while (n % divisor === 0) {\n            count++;\n            n = n / divisor;\n        }\n        return count;\n    }\n\n    return divisors.reduce((acc, i) => {\n        let count = 0;\n        if (n % i === 0) {\n            count = divisorN(i);\n            acc += count;\n        }\n        return acc;\n    }, 0);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let oddIndex = -1;\n  let evenIndex = -1;\n  let length = l.length;\n  let result = [];\n  while (length--) {\n    if (oddIndex === -1 && evenIndex === -1) {\n      if (l[length] % 2 === 1) {\n        oddIndex = length;\n      } else {\n        evenIndex = length;\n      }\n    } else {\n      if (oddIndex === -1) {\n        result[length] = l[length];\n      } else {\n        result[oddIndex] = l[oddIndex];\n        if (evenIndex === -1) {\n          result[oddIndex + 1] = l[length];\n          oddIndex = -1;\n        } else {\n          result[oddIndex + 1] = l[evenIndex];\n          evenIndex = -1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  >>> sortEven([5, 6, 2, 4])\n  [2, 4, 6, 5]\n  */\nconst sortOdd = (l) => {\n  let oddIndex = -1;\n  let evenIndex = -1;\n  let length = l.length;\n  let result = [];\n  while (length--) {\n    if (oddIndex === -1 && evenIndex === -1) {\n      if (l[length] % 2 === 0) {\n        oddIndex = length;\n      } else {\n        evenIndex = length;\n      }\n    } else {\n      if (oddIndex === -1) {\n        result[length] = l[length];\n      } else {\n        result[oddIndex] = l[oddIndex];\n        if (evenIndex === -1) {\n          result[oddIndex + 1] = l[length];\n          oddIndex = -1;\n        } else {\n          result[oddIndex + 1] = l[evenIndex];\n          evenIndex = -1;\n        }\n      }\n    }\n  }\n  return result;\n};\n\nconst sort = (l) => {\n  if (l.length % 2 === 0) {\n    return sortEven(l);\n  } else {\n    return sortOdd(l);\n  }\n};\n\nexport default sort;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n const groups = [], gr oups2 = [];\n  for(constgroup of groups) {\n    ou ps ou ps\n      oups2.push(group.slice(0, 1)); \n  }\n  oups2.push(s.slice(1));\n  for(const group of groups) {\n    if(group.leng th == 3)\n     oups2.push(group.slice(2)); \n  }\n  return oups2.join(' '); \n}\n\nexport { encodeCyclic, decodeC };\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let prime = 2;\n    while (prime <= n) {\n        let p = prime;\n        prime = prime + prime;\n        if (p % 2 === 0) {\n            return prime;\n        }\n    }\n    return prime;\n};\n\nmodule.exports = primeFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (const e of l) {\n    if (e < 0) return false\n    set.add(e)\n    if (set.size!== 3) return false\n    if (set.size === 2) return true\n  }\n  return false\n}\n\n/*\n  isPrime takes a number as an input.\n  it returns true if the number is prime, and false otherwise.\n\n  >>> isPrime(2)\n  false\n  >>> isPrime(1)\n  false\n  >>> isPrime(0)\n  false\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(9)\n  true\n  >>> isPrime(4.5)\n  false\n  >>> isPrime(13)\n  true\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  let max = Math.sqrt(n)\n  for (let i = 2; i <= max; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/*\n  primesSumToZero takes a list of int primes as an input.\n  it returns true if there are three distinct elements inthe l ist that sum to zero,\n  and false otherwise.\n\n  >>> primesSumToZero([1, 3, 5, 0])\n  false\n  >>> primesSumToZero([1, 3, -2, 1])\n  false\n  >>> primesSumToZero([1, 2, 3, 7])\n  false\n  >>> primesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> primesSumToZero([1])\n  false\n  */\nconst primesSumToZero = (l) => {\n  const set = new Set()\n  for (const e of l) {\n    if (!isPrime(e)) return false\n    set.add(e)\n    if (set.size!== 3) return false\n    if (set.size === 2) return true\n  }\n  return false\n}\n\n/*\n  triplesSumToZero takes a list of int egers as an input.\n  it returns true if there are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  false\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const set = new Set()\n  for (const e of l) {\n    if (e < 0) return false\n    set.add(e)\n    if (set.size!== 3) return false\n    if (set.size === 2) return true\n  }\n  return false\n}\n\nmodule.exports = {\n  triplesSumToZero,\n  isPrime,\n  primesSumToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    int coll = 0;\n    for(int i = 0; i < n; i++){\n      for(int j = 0; j < n; j++){\n        if(i == j) continue;\n        if(carRaceCollision(cars[i], cars[j])){\n          coll++;\n        }\n      }\n    }\n    return coll;\n  }\n\n*/\n\n/*\n\nint carRaceCollision(Car c1, Car c2){\n  double r = distance(c1.pos, c2.pos);\n  double w = c1.speed + c2.speed;\n  double l = c1.length + c2.length;\n  return r < l && w > 0;\n}\n\ndouble distance(Point a, Point b){\n  return sqrt(pow(a.x - b.x, 2) + pow(a.y - b.y, 2));\n}\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((n) => n + 1)\n}\n\n/*\n  Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 2, 1, 0, 122]\n  */\nconst decrList = (l) => {\n  return l.map((n) => n - 1)\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList = (l) => {\n  return l.map((n) => 'X')\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList2([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList2 = (l) => {\n  return l.map((n) => n * 'X')\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList3([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList3 = (l) => {\n  return l.map((n) => 'X' + n)\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList4([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList4 = (l) => {\n  return l.map((n) => n + n)\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList5([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList5([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList5 = (l) => {\n  return l.map((n) => 'X' + n)\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList6([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList6 = (l) => {\n  return l.map((n) => n + 'X')\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList7([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList7([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList7 = (l) => {\n  return l.map((n) => n * 'X')\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList8([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList8([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList8 = (l) => {\n  return l.map((n) => n * n)\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList9([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList9([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList9 = (l) => {\n  return l.map((n) => n.replace(/X/g, 'x'))\n}\n\n/*\n  Return list with elements replaced by 'X'\n  >>> replaceList10([1, 2, 3])\n  [1, 2, 3]\n  >>> replaceList10([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst replaceList10 = (l) => {\n  return l.map((n) => n.replace(/X/g, 'x'))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const set = new Set();\n  for (const elem of l) {\n    if (set.has(elem)) {\n      return false;\n    }\n    set.add(elem);\n  }\n  return true;\n};\n\n/*\n  pairsSumToZero returns true iff the sum of any two elements of a list is zero, false otherwise.\n  >>> pairsSumToZero([1, 2, 3])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 0])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  true\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  false\n  >>> pairsSumToZero([1, 2, 3, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  true\n  */\nconst pairsSumToZero = (l) => {\n  let sum = 0;\n  "}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  return Array(x + 1).join(base.toString())\n   .slice(x.toString().length)\n   .map((digit, index) => {\n      return (index + 1) % base === 0? 0 : index + 1;\n    }).join('');\n};\n\nconsole.log(changeBase(8, 3));\nconsole.log(changeBase(8, 2));\nconsole.log(changeBase(7, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    return Math.pow(a, 2) * Math.tan(Math.PI / h);\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(3, 4)\n  9\n  */\nconst triangleArea = (a, h) => {\n    return Math.pow(a, 2) / (1 + Math.tan(Math.PI / h) + Math.tan(Math.PI / a));\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(4, 3)\n  4\n  */\nconst triangleArea = (a, h) => {\n    return (1 + Math.tan(Math.PI / h) + Math.tan(Math.PI / a)) / 2;\n};\n\nexport { triangleArea };\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n\n/*\nFib5 is a function that returns a number that is the fifth Fibonacci number.\nIt returns the fifth Fibonacci number, defined as the sum of the first, second, and third Fibonacci numbers.\n*/\nconst fib5 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    return fib5(n - 1) + fib5(n - 2) + fib5(n - 3);\n}\n\nconsole.log(fib5(5));\nconsole.log(fib5(6));\nconsole.log(fib5(7));\n\n/*\nFib6 is a function that returns a number that is the sixth Fibonacci number.\nIt returns the sixth Fibonacci number, defined as the sum of the first, second, third, and fourth Fibonacci numbers.\n*/\nconst fib6 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    if (n === 4) return 4;\n    return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4);\n}\n\nconsole.log(fib6(5));\nconsole.log(fib6(6));\nconsole.log(fib6(7));\n\n/*\nFib7 is a function that returns a number that is the seventh Fibonacci number.\nIt returns the seventh Fibonacci number, defined as the sum of the first, second, third, and fourth, and the fifth Fibonacci numbers.\n*/\nconst fib7 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    if (n === 4) return 4;\n    if (n === 5) return 5;\n    return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5);\n}\n\nconsole.log(fib7(5));\nconsole.log(fib7(6));\nconsole.log(fib7(7));\n\n/*\nFib8 is a function that returns a number that is the eighth Fibonacci number.\nIt returns the eighth Fibonacci number, defined as the sum of the first, second, third, fourth, and fifth Fibonacci numbers.\n*/\nconst fib8 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    if (n === 4) return 4;\n    if (n === 5) return 5;\n    if (n === 6) return 6;\n    return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6);\n}\n\nconsole.log(fib8(5));\nconsole.log(fib8(6));\nconsole.log(fib8(7));\n\n/*\nFib9 is a function that returns a number that is the ninth Fibonacci number.\nIt returns the ninth Fibonacci number, defined as the sum of the first, second, third, fourth, fifth, and sixth Fibonacci numbers.\n*/\nconst fib9 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    if (n === 4) return 4;\n    if (n === 5) return 5;\n    if (n === 6) return 6;\n    if (n === 7) return 7;\n    return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7);\n}\n\nconsole.log(fib9(5));\nconsole.log(fib9(6));\nconsole.log(fib9(7));\n\n/*\nFib10 is a function that returns a number that is the tenth Fibonacci number.\nIt returns the tenth Fibonacci number, defined as the sum of the first, second, third, fourth, fifth, sixth, and seventh Fibonacci numbers.\n*/\nconst fib10 = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 1;\n    if (n === 2) return 2;\n    if (n === 3) return 3;\n    if (n === 4) return 4;\n    if (n === 5) return 5;\n    if (n === 6) return 6;\n    if (n === 7) return 7;\n    if (n === 8) return 8;\n    return fib10(n - 1) + fib10(n - 2) + fib10(n - 3) + fib10(n - 4) + fib"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedList = sorted(l);\n  if (sortedList.length % 2 === 0) {\n    const half = Math.floor(sortedList.length / 2);\n    return (sortedList[half - 1] + sortedList[half]) / 2;\n  } else {\n    return sortedList[sortedList.length / 2];\n  }\n};\n\n/**\n  *  Returns the median of elements in the list  l.\n  *  Returns NaN if l is empty.\n  *  \n  *  @param {list} l \n  *  @return {number}\n  */\nconst median2 = (l) => {\n  if (l.length === 0) {\n    return NaN;\n  }\n  return sorted(l)[Math.floor(l.length / 2)];\n};\n\nmodule.exports = {\n  median,\n  median2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bca')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('ab')\n  true\n  */\nconst isPalindrome2 = (text) => {\n    return (text.split('').reduce((a, b) => a === b? true : false, '') === text);\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('bca')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('ab')\n  true\n  */\nconst isPalindrome3 = (text) => {\n    return (text.split('').reduce((a, b) => (a && b && a === b? true : false), true) === true);\n};\n\n/*\n  Finds the longest palindrome in given text\n  >>> isPalindrome('abab')\n  'abab'\n  >>> isPalindrome('ababccccddeee')\n  'abab'\n  >>> isPalindrome('ab')\n  false\n  */\nconst findLongestPalindrome = (text) => {\n    let len = 1;\n    let longest = '';\n\n    for (let i = 0; i < text.length - 1; i++) {\n        let start = i;\n        let end = i + 1;\n        while (start < text.length - 1 && text[start] === text[end]) {\n            start++;\n            end++;\n        }\n        if (end - start > len) {\n            len = end - start;\n            longest = text.substring(start, end);\n        }\n    }\n    return longest;\n};\n\n/*\n  Finds the longest palindrome in given text\n  >>> isPalindrome('abab')\n  'abab'\n  >>> isPalindrome('ababccccddeee')\n  'abab'\n  >>> isPalindrome('ab')\n  false\n  */\nconst findLongestPalindrome2 = (text) => {\n    let len = 1;\n    let longest = '';\n\n    for (let i = 0; i < text.length - 1; i++) {\n        let start = i;\n        let end = i + 1;\n        while (start < text.length - 1 && text[start] === text[end]) {\n            start++;\n            end++;\n        }\n        if (end - start > len) {\n            len = end - start;\n            longest = text.substring(start, end);\n        }\n    }\n    return longest;\n};\n\n/*\n  Finds the longest palindrome in given text\n  >>> isPalindrome('abab')\n  'abab'\n  >>> isPalindrome('ababccccddeee')\n  'abab'\n  >>> isPalindrome('ab')\n  false\n  */\nconst findLongestPalindrome3 = (text) => {\n    let len = 1;\n    let longest = '';\n\n    for (let i = 0; i < text.length - 1; i++) {\n        let start = i;\n        let end = i + 1;\n        while (start < text.length - 1 && text[start] === text[end]) {\n            start++;\n            end++;\n        }\n        if (end - start > len) {\n            len = end - start;\n            longest = text.substring(start, end);\n        }\n    }\n    return longest;\n};\n\n/*\n  Finds the longest palindrome in given text\n  >>> isPalindrome('abab')\n  'abab'\n  >>> isPalindrome('ababccccddeee')\n  'abab'\n  >>> isPalindrome('ab')\n  false\n  */\nconst findLongestPalindrome4 = (text) => {\n    let len = 1;\n    let longest = '';\n\n    for (let i = 0; i < text.length - 1; i++) {\n        let start = i;\n        let end = i + 1;\n        while (start < text.length - 1 && text[start] === text[end]) {\n            start++;\n            end++;\n        }\n        if (end - start > len) {\n            len = end - start;\n            longest = text.substring(start, end);\n        }\n    }\n    return longest;\n};\n\n/*\n  Finds the longest palindrome in given text\n  >>> isPalindrome('abab')\n  'abab'\n  >>> isPalindrome('ababccccddeee')\n  'abab'\n  >>> isPalindrome('ab')\n  false\n  */\nconst findLongestPalindrome5 = (text) => {\n    let len = 1;\n    let longest = '';\n\n    for (let i = 0; i < text.length - 1; i++) {\n        let start = i;\n        let end = i + 1;\n        while (start < text.length - 1 && text[start] === text[end]) {\n            start++;\n            end++;\n        }\n        if (end - start > len) {\n            len = end - start;\n            longest = text.substring(start, end);\n        }\n    }\n    return longest;\n};\n\nmodule.exports = {\n    isPalindrome: isPalindrome,\n    isPalindrome2: isPalindrome2,\n    isPalindrome3: isPalindrome3,\n    findLongestPalindrome: findLongestPalindrome,\n    findLongestPalindrome2: findLongestPalindrome2,\n    findLongestPalindrome3: findLongestPalindrome3,\n    findLongestPalindrome4: findLongestPalindrome4,\n    findLongestPalind"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n < 0) return 0\n  return ((n % p) + p) % p\n}\n\nconst r = modp(3, 5)\nconsole.log(r) // 3\nconsole.log(modp(3, 11)) // 8\nconsole.log(modp(3, 101)) // 1\nconsole.log(modp(3, 0)) // 0\nconsole.log(modp(0, 101)) // 1\nconsole.log(modp(1101, 101)) // 2\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    (c.charCod eAt(0) - \"a\".charCod eAt(0) + 26 - \"a\".charCod eAt(0) + 5 )%26\n  )).join(\"\");\n  return ret;\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift_reverse =(s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    (c.charCod eAt(0) - \"a\".charCod eAt(0) + 26 - \"a\".charCod eAt(0) + 5 )%26\n  )).join(\"\");\n  return ret;\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift_reverse_reverse =(s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    (c.charCod eAt(0) - \"a\".charCod eAt(0) + 26 - \"a\".charCod eAt(0) + 5 )%26\n  )).join(\"\");\n  return ret;\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift_reverse_reverse_reverse =(s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    (c.charCod eAt(0) - \"a\".charCod eAt(0) + 26 - \"a\".charCod eAt(0) + 5 )%26\n  )).join(\"\");\n  return ret;\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeShift_reverse =(s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return ret;\n}\n\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeShift_reverse_reverse =(s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return ret;\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeShift_reverse_reverse_reverse =(s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return ret;\n}\n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst encodeShift_reverse_reverse_reverse_reverse =(s) =>{\n  let ret =  s. split(\" \"). map(c h => (\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n  return ret;\n}\n\n\nexport default {\n  encodeShift,\n  decodeShift,\n  encodeShift_reverse,\n  decodeShift_reverse,\n  encodeShift_reverse_reverse,\n  decodeShift_reverse_reverse,\n  encodeShift_reverse_reverse_reverse,\n  decodeShift_reverse_reverse_reverse,\n  encodeShift_reverse_reverse_reverse_reverse,\n  decodeShift_reverse_reverse_reverse_reverse,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let regex = new RegExp(vowels.join(\"|\"), \"g\");\n  return text.replace(regex, \"\");\n}\n\n/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeNonVowels = (text) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let regex = new RegExp(vowels.join(\"|\"), \"g\");\n  let nonVowels = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"x\", \"y\", \"z\"];\n  let regex2 = new RegExp(nonVowels.join(\"|\"), \"g\");\n  return text.replace(regex, \"\").replace(regex2, \"\");\n}\n\n/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let regex = new RegExp(vowels.join(\"|\"), \"g\");\n  let nonVowels = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"x\", \"y\", \"z\"];\n  let regex2 = new RegExp(nonVowels.join(\"|\"), \"g\");\n  let regex3 = new RegExp(vowels.join(\"|\"), \"g\");\n  return text.replace(regex, \"\").replace(regex2, \"\").replace(regex3, \"\");\n}\n\n/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeNonVowels2 = (text) => {\n  let vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  let regex = new RegExp(vowels.join(\"|\"), \"g\");\n  let nonVowels = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"x\", \"y\", \"z\"];\n  let regex2 = new RegExp(nonVowels.join(\"|\"), \"g\");\n  let regex3 = new RegExp(vowels.join(\"|\"), \"g\");\n  return text.replace(regex, \"\").replace(regex2, \"\").replace(regex3, \"\");\n}\n\nexport default {\n  removeVowels,\n  removeNonVowels,\n  removeVowels2,\n  removeNonVowels2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const result = l.reduce((prev, current, i) => {\n    if (current <= t) {\n      return prev\n    } else {\n      return false\n    }\n  }, true)\n  return result\n}\n\n/* Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold_2 = (l, t) => {\n  let result = true\n  l.forEach(item => {\n    if (item <= t) {\n      result = result && true\n    } else {\n      result = result && false\n    }\n  })\n  return result\n}\n\n/* Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold_3 = (l, t) => {\n  let result = false\n  l.forEach(item => {\n    if (item <= t) {\n      result = result || true\n    } else {\n      result = result || false\n    }\n  })\n  return result\n}\n\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10))\n//console.log(belowThreshold([1, 2, 4, 10], 100))\n//console.log(belowThreshold([1, 2, 4, 10], 5))\n//console.log(belowThreshold([1, 2, 4, 10], 10"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    //if (s0 === s1) return true\n    //console.log(s0, s1)\n    let i = 0\n    let len = Math.min(s0.length, s1.length)\n    while (i < len) {\n        if (s0[i]!== s1[i]) return false\n        i++\n    }\n    return true\n}\n\n/*\n  Check if two words are equal.\n  >>> sameWords('abcd', 'abcd')\n  true\n  >>> sameWords('abcd', 'abce')\n  false\n  >>> sameWords('abcd', 'eabcd')\n  false\n  >>> sameWords('abcd', 'abcdzzzz')\n  false\n  >>> sameWords('abcd', 'abcezzzz')\n  false\n  */\nconst sameWords = (s0, s1) => {\n    //if (s0 === s1) return true\n    //console.log(s0, s1)\n    let i = 0\n    let len = Math.min(s0.length, s1.length)\n    while (i < len) {\n        if (s0[i]!== s1[i]) return false\n        i++\n    }\n    return true\n}\n\nconst removePunctuation = (s0) => {\n    let i = 0\n    let len = s0.length\n    let output = ''\n    while (i < len) {\n        if (isPunctuation(s0[i])) {\n            output += s0[i]\n            i++\n        } else {\n            output += s0[i]\n        }\n        i++\n    }\n    return output\n}\n\nconst isPunctuation = (c) => {\n    switch (c) {\n        case '!':\n        case '?':\n        case '.':\n        case ',':\n        case ';':\n        case ':':\n        case '\"':\n        case'':\n        case '\\n':\n            return true\n        default:\n            return false\n    }\n}\n\nconst removeNonAlphabetic = (s0) => {\n    let i = 0\n    let len = s0.length\n    let output = ''\n    while (i < len) {\n        if (isAlphabetic(s0[i])) {\n            output += s0[i]\n            i++\n        } else {\n            output += s0[i]\n        }\n        i++\n    }\n    return output\n}\n\nconst isAlphabetic = (c) => {\n    switch (c) {\n        case 'a':\n        case 'b':\n        case 'c':\n        case 'd':\n        case 'e':\n        case 'f':\n        case 'g':\n        case 'h':\n        case 'i':\n        case 'j':\n        case 'k':\n        case 'l':\n        case'm':\n        case 'n':\n        case 'o':\n        case 'p':\n        case 'q':\n        case 'r':\n        case's':\n        case 't':\n        case 'u':\n        case 'v':\n        case 'w':\n        case 'x':\n        case 'y':\n        case 'z':\n            return true\n        default:\n            return false\n    }\n}\n\nconst removeStopWords = (s0) => {\n    let i = 0\n    let len = s0.length\n    let output = ''\n    while (i < len) {\n        if (stopWords.indexOf(s0[i]) === -1) {\n            output += s0[i]\n            i++\n        } else {\n            output +=''\n        }\n        i++\n    }\n    return output\n}\n\nconst stopWords = [\n    'a', 'about', 'above', 'after', 'against', 'among', 'around', 'at',\n    'back', 'before', 'below', 'beneath', 'beside', 'between', 'beyond',\n    'by', 'c', 'c\\'s', 'came', 'can', 'cant', 'co', 'con', 'could', 'couldnt',\n    'd', 'd\\'s', 'dave', 'de', 'dec', 'did', 'do', 'does', 'dont', 'down', 'dr',\n    'dr.', 'dr\\'.', 'drew', 'e', 'e\\'s', 'each', 'earlier', 'early', 'east',\n    'eat', 'eaten', 'ed', 'edu', 'either', 'else', 'end', 'ending', 'eng',\n    'enter', 'entered', 'entering', 'enough', 'etc', 'even', 'ever', 'every',\n    'few', 'fewer', 'first', 'five', 'for', 'from', 'further', 'furthermore',\n    'g', 'get', 'give', 'go', 'goes', 'going', 'gone', 'got', 'gotta', 'gotten',\n    'greetings', 'h', 'had', 'hadn\\'t', 'happens', 'hard', 'has', 'hasn\\'t',\n    'have', 'haven\\'t', 'having', 'he', 'he\\'s', 'hello', 'help', 'hence',\n    'her', 'here', 'here\\'s', 'hereafter', 'hereby', 'herein', 'hereupon',\n    'hers', 'herself', 'him', 'himself', 'his', 'how', 'how\\'s', 'i', 'i\\'d',\n    'i\\'ll', 'i\\'m', 'i\\'ve', 'if', 'i\\'m', 'in', 'into', 'is', 'isn\\'t',\n    'it', 'it\\'s', 'its"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 0, b = 1;\n  let i = 1, j = 0, sum = 0;\n\n  while (i < n) {\n    sum = a + b;\n    a = b;\n    b = sum;\n    i++;\n  }\n  return sum;\n};\n\nexport default fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let openBrackets = brackets.slice(0, 1)\n    let closedBrackets = brackets.slice(1)\n    if (openBrackets.length!= closedBrackets.length) {\n        return false\n    }\n    for (let i = 0; i < openBrackets.length; i++) {\n        if (openBrackets[i] == closedBrackets[i]) {\n            continue\n        }\n        return false\n    }\n    return true\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let m = 1;\n  l.forEach((e) => {\n    if (m < e) m = e;\n  });\n  return m === l[l.length - 1];\n};\n\n/*\n  Return a list of diapason values\n  >>> diapason([1, 4, 10, 20])\n  [1, 4, 10, 20]\n  >>> diapason([1, 10, 20, 4])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5])\n  [1, 4, 10, 20]\n  >>> diapason([1, 10, 20, 4, -5])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1])\n  [1, 4, 10, 20]\n  >>> diapason([1, 10, 20, 4, -5, -4, -1])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0])\n  [1, 4, 10, 20]\n  >>> diapason([1, 10, 20, 4, -5, -4, -1, 0, 1])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4, 10, 20, -5, -4, -1, 0, 1, -2, 3, -3, -4, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 4, 10, 20]\n  >>> diapason([1, 4"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let res = [];\n  for (let item of l1) {\n    if (l2.indexOf(item) > -1) {\n      res.push(item);\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n === 2) {\n    return 2;\n  }\n\n  if (n === 1 || n === 0) {\n    return 1;\n  }\n\n  const divisors = [2];\n\n  while (n > 1) {\n    const candidate = largestPrimeFactor(Math.ceil(n / 2));\n\n    if (n % candidate === 0) {\n      divisors.push(candidate);\n      n = n / candidate;\n    } else {\n      break;\n    }\n  }\n\n  return largestPrimeFactor(n);\n};\n\nconsole.log(largestPrimeFactor(1));\nconsole.log(largestPrimeFactor(2));\nconsole.log(largestPrimeFactor(13195));\nconsole.log(largestPrimeFactor(2048));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n/*\n  * addTwoNumbers is a function that adds two numbers.\n  * This function has the following signature:\n  * function(x, y)\n  * where x is the first number and y is the second number.\n  *\n  * To add two numbers, we will use a for loop.\n  * We will loop from 1 to 10 and add the sum of two numbers in the for loop.\n  * Then we return the sum.\n  *\n  * Note that addTwoNumbers will not have the same signature as sumToN.\n  * The signature of addTwoNumbers will be:\n  * function(a, b)\n  *\n  * To test addTwoNumbers, we will need to pass in two numbers.\n  * This is the same way that sumToN is passed in.\n  *\n  * In addition to the parameters, addTwoNumbers also has a return statement.\n  *\n  * Return statements are very important.\n  * They tell us that the function is done and we can return values.\n  *\n  * return statement\n  * The return statement returns a value.\n  *\n  * return x + y;\n  *\n  * return sumToN(10);\n  *\n  * In order to return a value, we must use a return statement.\n  *\n  * return sumToN(10);\n  *\n  * If you don't need to return a value, you can omit the return statement.\n  *\n  * return sumToN(10);\n  *\n  * Since the return statement is only used in the case of a function that returns a value,\n  * there is no need to use the return statement in a function that doesn't return a value.\n  *\n  * If the function doesn't return a value, it can have a return statement.\n  *\n  * If the function doesn't return a value, the return statement is a comment.\n  *\n  * return;\n  *\n  * If you omit the return statement, the function will return undefined.\n  * This means that the function will not return a value.\n  *\n  * Note that the return statement must be the last statement in the function.\n  * If it is not the last statement, you will get an error.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is used to return a value.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x + y;\n  *\n  * Note that the return statement is a comment.\n  *\n  * return x"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const numOpening = brackets.length;\n  const numClosing = brackets.length;\n\n  for (let i = 0; i < numOpening; ++i) {\n    if (brackets[i]!== '(') {\n      return false;\n    }\n  }\n\n  for (let i = 0; i < numClosing; ++i) {\n    if (brackets[brackets.length - i - 1]!== ')') {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport {correctBracketing};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  if (len < 2) {\n    return xs;\n  }\n  const len1 = len - 1;\n  const dxs = new Array(len1);\n  const d = xs[len - 1];\n  for (let i = 0; i < len1; i++) {\n    dxs[i] = xs[i] * d;\n  }\n  return dxs;\n};\n\n/*\n  Calculate the number of terms of a polynomial\n  x^n * x^m *... * x^k\n  n = len of xs\n  k = length of a term\n  */\nconst nterms = (xs, k) => {\n  const len = xs.length;\n  const l = len - 1;\n  const lenk = xs[l].length;\n  return lenk - k + 1;\n};\n\n/*\n  Calculate the number of terms of a polynomial\n  x^n * x^m *... * x^k\n  n = len of xs\n  k = length of a term\n  */\nconst nterms1 = (xs, k) => {\n  const len = xs.length;\n  const l = len - 1;\n  const lenk = xs[l].length;\n  return lenk - k + 1;\n};\n\n/*\n  Return the coefficients of a polynomial.\n  */\nconst coefficients = (xs) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const coeffs = new Array(len1);\n  const d = xs[len - 1];\n  for (let i = 0; i < len1; i++) {\n    coeffs[i] = xs[i];\n  }\n  return coeffs;\n};\n\n/*\n  Return the terms of a polynomial.\n  */\nconst terms = (xs) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const terms = new Array(len1);\n  const d = xs[len - 1];\n  for (let i = 0; i < len1; i++) {\n    terms[i] = xs[i];\n  }\n  return terms;\n};\n\n/*\n  Return the degree of a polynomial.\n  */\nconst degree = (xs) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return len1;\n};\n\n/*\n  Return the coefficient of a term of a polynomial.\n  */\nconst coefficient = (xs, i) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return d;\n};\n\n/*\n  Return the coefficient of a term of a polynomial.\n  */\nconst coefficient1 = (xs, i) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return d;\n};\n\n/*\n  Calculate the derivative of a polynomial.\n  */\nconst derivative1 = (xs, k) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  const coeffs = new Array(len1);\n  const dxs = new Array(len1);\n  const lenk = xs[len - 1].length;\n  for (let i = 0; i < len1; i++) {\n    coeffs[i] = xs[i];\n    dxs[i] = xs[i + 1] * d;\n  }\n  return coeffs;\n};\n\n/*\n  Calculate the derivative of a polynomial.\n  */\nconst derivative2 = (xs, k) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  const coeffs = new Array(len1);\n  const dxs = new Array(len1);\n  const lenk = xs[len - 1].length;\n  for (let i = 0; i < len1; i++) {\n    coeffs[i] = xs[i];\n    dxs[i] = xs[i + 1] * d;\n  }\n  return coeffs;\n};\n\n/*\n  Calculate the coefficient of a polynomial.\n  */\nconst coefficient2 = (xs, i) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return d;\n};\n\n/*\n  Calculate the coefficient of a polynomial.\n  */\nconst coefficient3 = (xs, i) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return d;\n};\n\n/*\n  Calculate the coefficient of a polynomial.\n  */\nconst coefficient4 = (xs, i) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return d;\n};\n\n/*\n  Calculate the coefficient of a polynomial.\n  */\nconst coefficient5 = (xs, i) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return d;\n};\n\n/*\n  Calculate the coefficient of a polynomial.\n  */\nconst coefficient6 = (xs, i) => {\n  const len = xs.length;\n  const len1 = len - 1;\n  const d = xs[len - 1];\n  return d"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let fib = 0;\n    if (n === 0) {\n        return 0;\n    }\n    else if (n === 1) {\n        return 0;\n    }\n    else if (n === 2) {\n        return 1;\n    }\n    else if (n > 2) {\n        let b = 1;\n        let b1 = 0;\n        let b2 = 0;\n        let i = 2;\n        while (i < n) {\n            b = b1 + b2;\n            b1 = b2;\n            b2 = b;\n            i = i + 1;\n        }\n        fib = b;\n    }\n    return fib;\n}\n\nconsole.log(fibfib(0));\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(3));\nconsole.log(fibfib(4));\nconsole.log(fibfib(5));\nconsole.log(fibfib(6));\nconsole.log(fibfib(7));\nconsole.log(fibfib(8));\nconsole.log(fibfib(9));\nconsole.log(fibfib(10));\nconsole.log(fibfib(11));\nconsole.log(fibfib(12));\nconsole.log(fibfib(13));\nconsole.log(fibfib(14));\nconsole.log(fibfib(15));\nconsole.log(fibfib(16));\nconsole.log(fibfib(17));\nconsole.log(fibfib(18));\nconsole.log(fibfib(19));\nconsole.log(fibfib(20));\nconsole.log(fibfib(21));\nconsole.log(fibfib(22));\nconsole.log(fibfib(23));\nconsole.log(fibfib(24));\nconsole.log(fibfib(25));\nconsole.log(fibfib(26));\nconsole.log(fibfib(27));\nconsole.log(fibfib(28));\nconsole.log(fibfib(29));\nconsole.log(fibfib(30));\nconsole.log(fibfib(31));\nconsole.log(fibfib(32));\nconsole.log(fibfib(33));\nconsole.log(fibfib(34));\nconsole.log(fibfib(35));\nconsole.log(fibfib(36));\nconsole.log(fibfib(37));\nconsole.log(fibfib(38));\nconsole.log(fibfib(39));\nconsole.log(fibfib(40));\nconsole.log(fibfib(41));\nconsole.log(fibfib(42));\nconsole.log(fibfib(43));\nconsole.log(fibfib(44));\nconsole.log(fibfib(45));\nconsole.log(fibfib(46));\nconsole.log(fibfib(47));\nconsole.log(fibfib(48));\nconsole.log(fibfib(49));\nconsole.log(fibfib(50));\nconsole.log(fibfib(51));\nconsole.log(fibfib(52));\nconsole.log(fibfib(53));\nconsole.log(fibfib(54));\nconsole.log(fibfib(55));\nconsole.log(fibfib(56));\nconsole.log(fibfib(57));\nconsole.log(fibfib(58));\nconsole.log(fibfib(59));\nconsole.log(fibfib(60));\nconsole.log(fibfib(61));\nconsole.log(fibfib(62));\nconsole.log(fibfib(63));\nconsole.log(fibfib(64));\nconsole.log(fibfib(65));\nconsole.log(fibfib(66));\nconsole.log(fibfib(67));\nconsole.log(fibfib(68));\nconsole.log(fibfib(69));\nconsole.log(fibfib(70));\nconsole.log(fibfib(71));\nconsole.log(fibfib(72));\nconsole.log(fibfib(73));\nconsole.log(fibfib(74));\nconsole.log(fibfib(75));\nconsole.log(fibfib(76));\nconsole.log(fibfib(77));\nconsole.log(fibfib(78));\nconsole.log(fibfib(79));\nconsole.log(fibfib(80));\nconsole.log(fibfib(81));\nconsole.log(fibfib(82));\nconsole.log(fibfib(83));\nconsole.log(fibfib(84));\nconsole.log(fibfib(85));\nconsole.log(fibfib(86));\nconsole.log(fibfib(87));\nconsole.log(fibfib(88));\nconsole.log(fibfib(89));\nconsole.log(fibfib(90));\nconsole.log(fibfib(91));\nconsole.log(fibfib(92));\nconsole.log(fibfib(93));\nconsole.log(fibfib(94));\nconsole.log(fibfib(95));\nconsole.log(fibfib(96));\nconsole.log(fibfib(97));\nconsole.log(fibfib(98));\nconsole."}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n    let i = 0;\n    let count = 0;\n    while (i < s.length) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n            count++;\n        }\n        i++;\n    }\n    return count;\n};\n\nconsole.log(vowelsCount(\"abcde\")); //2\nconsole.log(vowelsCount(\"ACEDY\")); //3\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const digits = x.toString().split('').reverse();\n  return digits.join('').substr(shift);\n};\n\n// console.log(circularShift(12, 2));\n// console.log(circularShift(12, 3));\n// console.log(circularShift(12, 4));\n// console.log(circularShift(12, 5));\n// console.log(circularShift(12, 6));\n// console.log(circularShift(12, 7));\n// console.log(circularShift(12, 8));\n// console.log(circularShift(12, 9));\n// console.log(circularShift(12, 10));\n// console.log(circularShift(12, 11));\n// console.log(circularShift(12, 12));\n// console.log(circularShift(12, 13));\n// console.log(circularShift(12, 14));\n// console.log(circularShift(12, 15));\n// console.log(circularShift(12, 16));\n// console.log(circularShift(12, 17));\n// console.log(circularShift(12, 18));\n// console.log(circularShift(12, 19));\n// console.log(circularShift(12, 20));\n// console.log(circularShift(12, 21));\n// console.log(circularShift(12, 22));\n// console.log(circularShift(12, 23));\n// console.log(circularShift(12, 24));\n// console.log(circularShift(12, 25));\n// console.log(circularShift(12, 26));\n// console.log(circularShift(12, 27));\n// console.log(circularShift(12, 28));\n// console.log(circularShift(12, 29));\n// console.log(circularShift(12, 30));\n// console.log(circularShift(12, 31));\n// console.log(circularShift(12, 32));\n// console.log(circularShift(12, 33));\n// console.log(circularShift(12, 34));\n// console.log(circularShift(12, 35));\n// console.log(circularShift(12, 36));\n// console.log(circularShift(12, 37));\n// console.log(circularShift(12, 38));\n// console.log(circularShift(12, 39));\n// console.log(circularShift(12, 40));\n// console.log(circularShift(12, 41));\n// console.log(circularShift(12, 42));\n// console.log(circularShift(12, 43));\n// console.log(circularShift(12, 44));\n// console.log(circularShift(12, 45));\n// console.log(circularShift(12, 46));\n// console.log(circularShift(12, 47));\n// console.log(circularShift(12, 48));\n// console.log(circularShift(12, 49));\n// console.log(circularShift(12, 50));\n// console.log(circularShift(12, 51));\n// console.log(circularShift(12, 52));\n// console.log(circularShift(12, 53));\n// console.log(circularShift(12, 54));\n// console.log(circularShift(12, 55));\n// console.log(circularShift(12, 56));\n// console.log(circularShift(12, 57));\n// console.log(circularShift(12, 58));\n// console.log(circularShift(12, 59));\n// console.log(circularShift(12, 60));\n// console.log(circularShift(12, 61));\n// console.log(circularShift(12, 62));\n// console.log(circularShift(12, 63));\n// console.log(circularShift(12, 64));\n// console.log(circularShift(12, 65));\n// console.log(circularShift(12, 66));\n// console.log(circularShift(12, 67));\n// console.log(circularShift(12, 68));\n// console.log(circularShift(12, 69));\n// console.log(circularShift(12, 70));\n// console.log(circularShift(12, 71));\n// console.log(circularShift(12, 72));\n// console.log(circularShift(12, 73));\n// console.log(circularShift(12, 74));\n// console.log(circularShift(12, 75));\n// console.log(circularShift(12, 76));\n// console.log(circularShift(12, 77));\n// console.log(circularShift(12, 78));\n// console.log(circularShift(12, 79));\n// console.log(circularShift(12, 80));\n// console.log(circularShift(12, 81));\n// console.log(circularShift(12, 82));\n// console.log(circularShift(12, 83));\n// console.log(circularShift(12, 84));\n// console.log(circularShift(12, 85));\n// console.log(circularShift(12, 86));\n// console.log(circularShift(12, 87));\n// console.log(circularShift(12, 88));\n// console.log(circularShift(12, 89));\n// console.log(circularShift(12, 90));\n// console.log(circularShift(12, 91));\n// console.log(circularShift(12, 92));\n// console.log(circularShift(12, 93));\n// console.log(circularShift(12, 94));\n// console.log(circularShift(12, 95));\n// console.log(circularShift(12, 96));\n// console.log(circularShift(12, 97));\n// console.log(circularShift(12, 98));\n// console.log(circularShift(12, 99));\n// console.log(circularShift(12, 100));\n// console.log(circularShift(12, 101));\n// console.log(circularShift(12"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].charCodeAt(0) >= 97 && s[i].charCodeAt(0) <= 122){\n      count += parseInt(s[i].charCodeAt(0));\n    }\n  }\n  return count;\n}\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    const [str, strLen] = s.split(' ')\n    const [strLen, numOfFruit] = n.split(' ')\n    const [numOfFruit, numOfRange] = strLen.split(' ')\n    const fruitArr = str.split(' ')\n    let countOfFruit = 0\n    for (let i = 0; i < fruitArr.length; i++) {\n      if (fruitArr[i] == 'apples') {\n        countOfFruit += 1\n      }\n    }\n    let [fruitStart,fruitEnd] = [1,1]\n    if (countOfFruit > 0) {\n      for (let i = 0; i < fruitArr.length; i++) {\n        if (fruitArr[i] == 'apples') {\n          fruitStart = i + 1\n          break\n        }\n      }\n      fruitEnd = fruitArr.length - 1\n      if (fruitArr[fruitEnd] == 'apples') {\n        fruitEnd = fruitEnd - 1\n      }\n    }\n    let [fruitStart,fruitEnd] = [fruitArr.length - 1, fruitArr.length - 1]\n    for (let i = fruitArr.length - 2; i >= 0; i--) {\n      if (fruitArr[i] == 'oranges') {\n        fruitEnd = i\n        break\n      }\n    }\n    let [fruitStart,fruitEnd] = [fruitArr.length - 1, fruitArr.length - 1]\n    for (let i = fruitArr.length - 2; i >= 0; i--) {\n      if (fruitArr[i] == 'apples') {\n        fruitStart = i\n        break\n      }\n    }\n    let countOfRange = fruitArr.length - (fruitStart - 1) - (fruitEnd - 1)\n    return countOfFruit + countOfRange\n  }\n  const fruitDistribution = (s, n) => {\n    const [str, strLen] = s.split(' ')\n    const [strLen, numOfFruit] = n.split(' ')\n    const [numOfFruit, numOfRange] = strLen.split(' ')\n    const fruitArr = str.split(' ')\n    let countOfFruit = 0\n    for (let i = 0; i < fruitArr.length; i++) {\n      if (fruitArr[i] == 'apples') {\n        countOfFruit += 1\n      }\n    }\n    let [fruitStart,fruitEnd] = [1,1]\n    if (countOfFruit > 0) {\n      for (let i = 0; i < fruitArr.length; i++) {\n        if (fruitArr[i] == 'apples') {\n          fruitStart = i + 1\n          break\n        }\n      }\n      fruitEnd = fruitArr.length - 1\n      if (fruitArr[fruitEnd] == 'apples') {\n        fruitEnd = fruitEnd - 1\n      }\n    }\n    let [fruitStart,fruitEnd] = [fruitArr.length - 1, fruitArr.length - 1]\n    for (let i = fruitArr.length - 2; i >= 0; i--) {\n      if (fruitArr[i] == 'oranges') {\n        fruitEnd = i\n        break\n      }\n    }\n    let [fruitStart,fruitEnd] = [fruitArr.length - 1, fruitArr.length - 1]\n    for (let i = fruitArr.length - 2; i >= 0; i--) {\n      if (fruitArr[i] == 'apples') {\n        fruitStart = i\n        break\n      }\n    }\n    let countOfRange = fruitArr.length - (fruitStart - 1) - (fruitEnd - 1)\n    return countOfFruit + countOfRange\n  }\n  const fruitDistributioin = (s, n) => {\n    const [str, strLen] = s.split(' ')\n    const [strLen, numOfFruit] = n.split(' ')\n    const [numOfFruit, numOfRange] = strLen.split(' ')\n    const fruitArr = str.split(' ')\n    let countOfFruit = 0\n    for (let i = 0; i < fruitArr.length; i++) {\n      if (fruitArr[i] == 'apples') {\n        countOfFruit += 1\n      }\n    }\n    let [fruitStart,fruitEnd] = [1,1]\n    if (countOfFruit > 0) {\n      for (let i = 0; i < fruitArr.length; i++) {\n        if (fruitArr[i] == 'apples') {\n          fruitStart = i + 1\n          break\n        }\n      }\n      fruitEnd = fruitArr.length - 1\n      if (fruitArr[fruitEnd] == 'apples') {\n        fruitEnd = fruitEnd - 1\n      }\n    }\n    let [fruitStart,fruitEnd] = [fruitArr.length - 1, fruitArr.length - 1]\n    for (let i = fruitArr.length - 2; i >= 0; i--) {\n      if (fruitArr[i] == 'oranges') {\n        fruitEnd = i\n        break\n      }\n    }\n    let [fruitStart,fruitEnd] = [fruitArr.length - 1"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (!arr || arr.length === 0) {\n    return []\n  }\n\n  let sorted = arr.sort((a, b) => a - b)\n\n  let minIndex = sorted.findIndex(a => a % 2 === 0)\n  let min = sorted[minIndex]\n\n  return [min, minIndex]\n}\n\nconst test = () => {\n  const arr = [4, 2, 3]\n  console.log(pluck(arr))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    const max = lst[i];\n    const count = 1;\n    for (; i < lst.length; i++) {\n      if (lst[i] >= max) {\n        count++;\n      } else {\n        break;\n      }\n    }\n    if (count > lst[i]) {\n      return max;\n    }\n  }\n  return -1;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let odd = lst.slice();\n  let even = lst.slice();\n  let i = 0;\n  let j = odd.length - 1;\n  while (i < j) {\n    if (odd[i] > odd[j]) {\n      odd.splice(j, 1, odd[i]);\n      i++;\n    } else {\n      odd.splice(i, 1, odd[j]);\n      j--;\n    }\n    if (even[i] > even[j]) {\n      even.splice(j, 1, even[i]);\n      i++;\n    } else {\n      even.splice(i, 1, even[j]);\n      j--;\n    }\n  }\n  return odd.concat(even);\n};\n\n/*\n  Given list of numbers, return list in ascending order.\n\n  Examples:\n  sortedList([1, 2, 3, 4]) == [1, 2, 3, 4]\n  sortedList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  sortedList([]) == []\n  */\nconst sortedList = (lst) => {\n  let lstSorted = [];\n  let i = 0;\n  while (i < lst.length) {\n    lstSorted.push(lst[i]);\n    i++;\n  }\n  return lstSorted;\n};\n\nmodule.exports = {\n  strangeSortList,\n  sortedList\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const sides = [a, b, c];\n  const s = sum(sides);\n  if (sides.every((side) => side >= 2)) {\n    const area = Math.sqrt(s * (s - a) * (s - b) * (s - c));\n    return Math.round(area * 10) / 10;\n  }\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length === 0) {\n    return true;\n  }\n  let sum = 0;\n  for (let i = 0; i < q.length; i++) {\n    sum += q[i];\n  }\n  if (sum > w) {\n    return false;\n  }\n  return willItFly(q.slice(1), w - sum);\n};\n\nconsole.log(willItFly([1, 2, 3, 2, 3, 4], 7));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const n = arr.length;\n  let p = arr.length - 1;\n  let c = 0;\n  let min = arr[n - 1];\n  let k = n - 1;\n  let t = n - 1;\n  let i = n - 1;\n  let j = n - 1;\n  while (k >= 0) {\n    if (arr[k] > arr[p]) {\n      if (k!= p) {\n        min = Math.min(min, t - k);\n      }\n      p = k;\n      k = n - 1;\n    } else {\n      if (k!= p) {\n        min = Math.min(min, t - k);\n      }\n      p = k;\n      t = k;\n      k--;\n    }\n  }\n  while (t!= n - 1) {\n    if (arr[t] > arr[p]) {\n      min = Math.min(min, t - k);\n    }\n    p = t;\n    t = t - 1;\n  }\n  return min;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let [lst1_len, lst2_len] = [lst1.length, lst2.length];\n  if(lst1_len === lst2_len) return lst1;\n  else if(lst1_len > lst2_len) return lst2;\n  else return lst1;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n    return _.every(primes, (p) => {\n        return a % p === 0;\n    });\n}\n\n/**\n * @param {number} a\n * @return {number}\n */\nconst findSmallestPrimeFactor = (a) => {\n    const isMultiplyPrime = (a) => {\n        return _.every(primes, (p) => {\n            return a % p === 0;\n        });\n    };\n    \n    let p = _.reduce(primes, (p, n) => {\n        if (isMultiplyPrime(a / n)) {\n            return n;\n        }\n        return p;\n    }, 0);\n    \n    if (p === 0) {\n        p = a;\n    }\n    \n    return p;\n}\n\n//console.log(findSmallestPrimeFactor(30));\n//console.log(findSmallestPrimeFactor(2));\n\nconst test = () => {\n    const isPrime = (n) => {\n        if (n <= 1) {\n            return false;\n        }\n        \n        let i = 2;\n        while (i < n) {\n            if (n % i === 0) {\n                return false;\n            }\n            i += 1;\n        }\n        \n        return true;\n    };\n    \n    const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n    \n    const isMultiplyPrime = (a) => {\n        return _.every(primes, (p) => {\n            return a % p === 0;\n        });\n    };\n    \n    const a = 20;\n    const p = findSmallestPrimeFactor(a);\n    \n    console.log(a);\n    console.log(p);\n    console.log(isMultiplyPrime(a));\n    console.log(isMultiplyPrime(p));\n    console.log(isPrime(a));\n    console.log(isPrime(p));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n    if (x === 1 || n === 1) return true;\n    let i = 1;\n    let tmp = x;\n    while (tmp % n === 0) {\n        tmp = tmp / n;\n        i++;\n    }\n    return i === Math.floor(n);\n};\n\nisSimplePower(8, 2)\nisSimplePower(3, 2)\nisSimplePower(3, 1)\nisSimplePower(5, 3)\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  // your code here\n  // write code that returns true if it is a cube\n  // write code that returns false if it is not a cube\n  // return true or false\n  if (a < 0) {\n    return false\n  }\n  if (Math.pow(a, 3) === a) {\n    return true\n  }\n  return false\n}\n\n// iscube(1) ==> true\n// iscube(2) ==> false\n// iscube(64) ==> true\n// iscube(0) ==> true\n// iscube(180) ==> false\nconsole.log(iscube(1))\nconsole.log(iscube(2))\nconsole.log(iscube(64))\nconsole.log(iscube(0))\nconsole.log(iscube(180))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let res = 0\n  let sum = 0\n  for (let i = 0; i < num.length; i++) {\n    let hex = num[i]\n    if (hex >= '0' && hex <= '9') {\n      res += parseInt(hex)\n    } else if (hex >= 'A' && hex <= 'F') {\n      res += parseInt(hex) + 10\n    } else if (hex >= 'a' && hex <= 'f') {\n      res += parseInt(hex) + 10\n    }\n  }\n  let div = res / 16\n  sum += div\n  let divisor = parseInt(num.charAt(num.length - 1))\n  while (div < 10) {\n    sum += parseInt(div)\n    div = parseInt(num.charAt(num.length - 1))\n  }\n  sum -= divisor\n  if (sum % 2 === 0) {\n    return 2\n  } else {\n    return 4\n  }\n}\n\nconsole.log(hexKey(\"A1A\"))\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const bin = '';\n  const remainder = decimal % 2;\n  const d = decimal;\n  while (d > 0) {\n    bin = `${bin}1`;\n    d -= remainder;\n  }\n  return `db${bin}db`;\n};\n\nconst binaryToDecimal = (bin) => {\n  let decimal = 0;\n  const binLen = bin.length;\n  for (let i = 0; i < binLen; i++) {\n    decimal += (bin[i] === '1')? 1 : 0;\n  }\n  return decimal;\n};\n\nconst main = async () => {\n  const { decimal, bin } = await readInput();\n  console.log(`decimal = ${decimal}`);\n  console.log(`bin = ${bin}`);\n  const [bin1, bin2] = bin.split('db');\n  const [decimal1, decimal2] = decimal.split('db');\n  console.log(`bin1 = ${bin1}`);\n  console.log(`decimal1 = ${decimal1}`);\n  console.log(`bin2 = ${bin2}`);\n  console.log(`decimal2 = ${decimal2}`);\n  const result = decimalToBinary(decimal1);\n  console.log(`result = ${result}`);\n  const result1 = binaryToDecimal(bin1);\n  console.log(`result1 = ${result1}`);\n  const result2 = binaryToDecimal(bin2);\n  console.log(`result2 = ${result2}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const len = s.length\n  let sum = 0, i = 0\n  while (i < len) {\n    const j = i + 1\n    while (j < len) {\n      if (s[i]!== s[j]) {\n        sum -= (s[i] - '0')\n        sum += (s[j] - '0')\n      }\n      j++\n    }\n    i++\n    sum += (s[i] - '0')\n    if (sum < 0) {\n      sum = 0\n    }\n  }\n  return sum > 0\n}\n\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const numberOfPoints = grades.length;\n  const letterGrade = [];\n\n  for (let i = 0; i < numberOfPoints; i++) {\n    const currentGrade = grades[i];\n    const letterGradePoint = getLetterGrade(currentGrade);\n    letterGrade.push(letterGradePoint);\n  }\n\n  return letterGrade;\n};\n\nconst getLetterGrade = (currentGrade) => {\n  const letterGrade = currentGrade.toFixed(2);\n  return letterGrade;\n};\n\nconst letterGrade = (grades) => {\n  const letterGrade = numericalLetterGrade(grades);\n  return letterGrade;\n};\n\nexport {letterGrade as letterGrades};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (typeof string!=='string') {\n    return false;\n  }\n  if (string.length === 0) {\n    return false;\n  }\n  let num = 2;\n  while (num < string.length) {\n    let prime = true;\n    for (let i = 0; i < string.length; i++) {\n      if (string[i] === string[i + num]) {\n        prime = false;\n        break;\n      }\n    }\n    if (prime === true) {\n      return true;\n    }\n    num++;\n  }\n  return false;\n};\n\n/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength2 = (string) => {\n  if (typeof string!=='string') {\n    return false;\n  }\n  if (string.length === 0) {\n    return false;\n  }\n  let num = 2;\n  while (num < string.length) {\n    if (string[num] === string[num - 1]) {\n      return false;\n    }\n    let prime = true;\n    while (num + num < string.length) {\n      if (string[num] === string[num + num]) {\n        prime = false;\n        break;\n      }\n      num++;\n    }\n    if (prime === true) {\n      return true;\n    }\n    num++;\n  }\n  return false;\n};\n\nconst primeLength3 = (string) => {\n  if (typeof string!=='string') {\n    return false;\n  }\n  if (string.length === 0) {\n    return false;\n  }\n  let num = 2;\n  while (num < string.length) {\n    if (string[num] === string[num - 1]) {\n      return false;\n    }\n    let prime = true;\n    while (num + num < string.length) {\n      if (string[num] === string[num + num]) {\n        prime = false;\n        break;\n      }\n      num++;\n    }\n    if (prime === true) {\n      return true;\n    }\n    num++;\n  }\n  return false;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\nconsole.log(primeLength2('Hello'));\nconsole.log(primeLength2('abcdcba'));\nconsole.log(primeLength2('kittens'));\nconsole.log(primeLength2('orange'));\nconsole.log(primeLength3('Hello'));\nconsole.log(primeLength3('abcdcba'));\nconsole.log(primeLength3('kittens'));\nconsole.log(primeLength3('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  let c = 0\n  let ones = 0\n  let start = 1\n  while (ones <= n) {\n    if (ones === 1) {\n      c += 1\n    }\n    if (start === 1) {\n      start += 1\n    }\n    ones += 1\n  }\n  return c\n}\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that end with  1.\n */\ncon s t ends = (n) => {\n  let c = 0\n  let ones = 0\n  let start = 1\n  while (ones <= n) {\n    if (ones === 1) {\n      c += 1\n    }\n    if (start === 1) {\n      start += 1\n    }\n    ones += 1\n  }\n  return c\n}\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start with  1 and end with  1.\n */\ncon s t startEnds = (n) => {\n  let c = 0\n  let ones = 0\n  let start = 1\n  while (ones <= n) {\n    if (ones === 1) {\n      c += 1\n    }\n    if (start === 1) {\n      start += 1\n    }\n    ones += 1\n  }\n  return c\n}\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that end with  1 and start with  1.\n */\ncon s t startStart = (n) => {\n  let c = 0\n  let ones = 0\n  let start = 1\n  while (ones <= n) {\n    if (ones === 1) {\n      c += 1\n    }\n    if (start === 1) {\n      start += 1\n    }\n    ones += 1\n  }\n  return c\n}\n\n/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start with  1 and end with  1.\n */\ncon s t endsStart = (n) => {\n  let c = 0\n  let ones = 0\n  let start = 1\n  while (ones <= n) {\n    if (ones === 1) {\n      c += 1\n    }\n    if (start === 1) {\n      start += 1\n    }\n    ones += 1\n  }\n  return c\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0,\n    binary = '',\n    i = 1;\n\n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n\n  while (sum > 0) {\n    binary = (sum % 2)? binary + 1 : binary;\n    sum = Math.floor(sum / 2);\n  }\n\n  return binary;\n}\n\nconst isValid = (N) => {\n  let result = false;\n  if (N >= 0 && N <= 10000) {\n    result = true;\n  }\n\n  return result;\n}\n\nconsole.log(solve(147));\nconsole.log(solve(150));\nconsole.log(solve(1000));\nconsole.log(isValid(1000));\nconsole.log(isValid(150));\nconsole.log(isValid(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  const sum = 0\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 == 0){\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers ls t. ad d the odd elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add_odd = (lst) => {\n  const sum = 0\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 == 1){\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers ls t. ad d the sum of even elements..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 18 \n  */\nconst add_sum = (lst) => {\n  const sum = 0\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 == 0){\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given a non-empty list of integers ls t. ad d the sum of odd elements..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 13 \n  */\nconst add_sum_odd = (lst) => {\n  const sum = 0\n  for(let i = 0; i < lst.length; i++){\n    if(i % 2 == 1){\n      sum += lst[i]\n    }\n  }\n  return sum\n}\n\n/*Given two lists ls t and ls t. Sort ls t and return it..\n\n\n  Examples:\n      sort_list([1, 3, 4, 5]) ==> [1, 3, 4, 5]\n  */\nconst sort_list = (lst) => {\n  const sorted_lst = []\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] > lst[j]){\n        const temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n      }\n    }\n    sorted_lst.push(lst[i])\n  }\n  return sorted_lst\n}\n\n/*Given a non-empty list of integers ls t. remove the duplicates and return a new list of unique elements..\n\n\n  Examples:\n      remove_duplicates([1, 2, 3, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  */\nconst remove_duplicates = (lst) => {\n  const duplicates = []\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] == lst[j]){\n        duplicates.push(lst[i])\n      }\n    }\n  }\n  const unique_list = []\n  for(let i = 0; i < lst.length; i++){\n    if(duplicates.indexOf(lst[i]) == -1){\n      unique_list.push(lst[i])\n    }\n  }\n  return unique_list\n}\n\n/*Given a non-empty list of integers ls t. remove the duplicates and return a new list of unique elements..\n\n\n  Examples:\n      remove_duplicates([1, 2, 3, 3, 4, 5]) ==> [1, 2, 3, 4, 5]\n  */\nconst remove_duplicates_2 = (lst) => {\n  const duplicates = []\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] == lst[j]){\n        duplicates.push(lst[i])\n      }\n    }\n  }\n  const unique_list = []\n  for(let i = 0; i < lst.length; i++){\n    if(duplicates.indexOf(lst[i]) == -1){\n      unique_list.push(lst[i])\n    }\n  }\n  return unique_list\n}\n\n/*Given two lists ls t and ls t. Sort ls t and return it..\n\n\n  Examples:\n      sort_list([1, 3, 4, 5]) ==> [1, 3, 4, 5]\n  */\nconst sort_list_2 = (lst) => {\n  const sorted_lst = []\n  for(let i = 0; i < lst.length; i++){\n    for(let j = 0; j < lst.length; j++){\n      if(lst[i] > lst[j]){\n        const temp = lst[i]\n        lst[i] = lst[j]\n        lst[j] = temp\n      }\n    }\n    sorted_lst.push(lst[i])\n  }\n  return sorted_lst\n}\n\nmodule.exports = {\n  add,\n  add_odd,\n  add_sum,\n  add_sum_odd,\n  sort_list,\n  remove_duplicates,\n  remove_duplicates_2,\n  sort_list_2\n}<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const re = /\\s+/g;\n  const words = s.split(re);\n  const new_words = [];\n\n  for (let i = 0; i < words.length; i += 1) {\n    if (i === words.length - 1) {\n      new_words.push(words[i]);\n    } else {\n      let j = i + 1;\n      while (j < words.length) {\n        if (words[i].length!== words[j].length) {\n          break;\n        }\n        new_words.push(words[i] + words[j]);\n        j += 1;\n      }\n      new_words.push(words[i]);\n    }\n  }\n  return new_words.join('');\n};\n\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole.log(antiShuffle('Hello World!!!'));\nconsole"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    if (lst.length === 0) return [];\n    if (lst.length === 1) return [\n        [lst[0][x], lst[0][x + 1]],\n        [lst[0][x], lst[0][x + 1]],\n    ];\n    return lst.map((row, index) => {\n        const subLst = row.slice(0, x + 1).concat(row.slice(x + 1));\n        return [\n            [row[0], subLst[0]],\n            [row[x], subLst[subLst.length - 1]],\n        ];\n    });\n};\n\nconst getRowIndex = (lst, x) => {\n    const r = getRow(lst, x);\n    const indexes = lst.map((row, i) => [i, i + 1, i + 2]);\n    return indexes.filter(index => r.includes([index[0], index[1]]))\n       .sort((a, b) => b[0] - a[0]);\n};\n\n/*\n  Given a matrix, we can easily get the diagonals of the matrix\n  \n  Examples:\n  getDiagonals([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], [1, 0, 0, 0, 0, 0]) == [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]\n  getDiagonals([], [1, 0, 0, 0, 0, 0]) == []\n  */\nconst getDiagonals = (lst, indexes) => {\n    const [row, col, row2, col2] = indexes;\n    const diagonal = [];\n    const l = lst.length;\n    for (let i = 0; i < l; i++) {\n        const rowI = lst[i][row];\n        const colI = lst[i][col];\n        const row2I = lst[row2][col2];\n        const diagonalItem = [rowI, colI, row2I];\n        diagonal.push(diagonalItem);\n    }\n    return diagonal;\n};\n\nconst main = () => {\n    const testCase = [\n        [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]],\n        [[], [1], [1, 2, 3]],\n    ];\n    const testCase2 = [[[], []], [[1, 2, 3], [4, 5, 6]], [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]];\n    for (const [lst, indexes] of testCase) {\n        console.log('getRow(%s, %s) == %s', lst, indexes, getRow(lst, indexes));\n    }\n    console.log('getRowIndex(%s, %s) == %s', testCase, getRowIndex(testCase, 0), getRowIndex(testCase, 2));\n    console.log('getDiagonals(%s, %s) == %s', testCase, [0, 1, 2, 3], getDiagonals(testCase, [0, 1, 2, 3]));\n    console.log('getDiagonals(%s, %s) == %s', testCase2, [1, 0, 3], getDiagonals(testCase2, [1, 0, 3]));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = [...array];\n  newArray.sort((a, b) => a - b);\n  return newArray;\n};\n\nconsole.log(sortArray([5, 4, 3, 0, 1, 2, 6]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7]));\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6, 7, 8]));\nconsole.log(sortArray([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n    let r = alphabet.length;\n    const rot = s.split('').map((x) => {\n        const t = x.charCodeAt(0) + (x.charCodeAt(0) << 8);\n        return alphabet.charAt((t + rot) % r);\n    }).join('');\n    return rot;\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAll = (s, i, replace) => {\n    return s.split('').map((x) => {\n        return x.charCodeAt(0) + (x.charCodeAt(0) << 8) === i? replace : x;\n    }).join('');\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegex = (s, i, replace) => {\n    return s.replace(new RegExp(replace, 'g'), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx = (s, i, replace) => {\n    return s.replace(new RegExp(replace, 'g'), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx2 = (s, i, replace) => {\n    return s.replace(new RegExp(replace), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx3 = (s, i, replace) => {\n    return s.replace(new RegExp(replace, 'g'), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx4 = (s, i, replace) => {\n    return s.replace(new RegExp(replace), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx5 = (s, i, replace) => {\n    return s.replace(new RegExp(replace, 'g'), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx6 = (s, i, replace) => {\n    return s.replace(new RegExp(replace), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx7 = (s, i, replace) => {\n    return s.replace(new RegExp(replace, 'g'), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx8 = (s, i, replace) => {\n    return s.replace(new RegExp(replace), replace);\n}\n\n/*\n  Create a function that takes a str ing and an int, returns a new string\n  with all the words in the string ing replaced with the int i\n  For example:\n  replaceAll('the',3,'s') returns's s s'\n  replaceAll('the',3,'s') returns's s s'\n  */\nconst replaceAllWithRegEx9 = (s, i, replace) => {\n    return s.replace(new RegExp(replace), replace);\n}\n\n"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n    let s = 0;\n    lst.forEach((el) => {\n        if (el < s)\n            s = el;\n    });\n    return s;\n}\n\nconsole.log(tSmallest([1, 2, 3, 4, 5]));\nconsole.log(nextSmallest([5, 1, 4,  3, 2]));\nconsole.log(nextSmallest([1, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    let counter = 0;\n    const isBored = s => s.split(/[.,?!]/).filter(w => w === \"I\").length;\n    return isBored(S);\n}\n\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let sum = x + y + z;\n  if (x === y && y === z) {\n    return true;\n  }\n  if (x === sum) {\n    return true;\n  }\n  if (y === sum) {\n    return true;\n  }\n  if (z === sum) {\n    return true;\n  }\n  if (x === y && y === z && z === sum) {\n    return true;\n  }\n  return false;\n}\n\nconsole.log(anyInt(3, 2, 1)); // false\nconsole.log(anyInt(3.6, -2.2, 2)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const encode = (message) => {\n    const map = {\n      \"a\": \"a\",\n      \"b\": \"b\",\n      \"c\": \"c\",\n      \"d\": \"d\",\n      \"e\": \"e\",\n      \"f\": \"f\",\n      \"g\": \"g\",\n      \"h\": \"h\",\n      \"i\": \"i\",\n      \"j\": \"j\",\n      \"k\": \"k\",\n      \"l\": \"l\",\n      \"m\": \"m\",\n      \"n\": \"n\",\n      \"o\": \"o\",\n      \"p\": \"p\",\n      \"q\": \"q\",\n      \"r\": \"r\",\n      \"s\": \"s\",\n      \"t\": \"t\",\n      \"u\": \"u\",\n      \"v\": \"v\",\n      \"w\": \"w\",\n      \"x\": \"x\",\n      \"y\": \"y\",\n      \"z\": \"z\",\n      \"A\": \"A\",\n      \"B\": \"B\",\n      \"C\": \"C\",\n      \"D\": \"D\",\n      \"E\": \"E\",\n      \"F\": \"F\",\n      \"G\": \"G\",\n      \"H\": \"H\",\n      \"I\": \"I\",\n      \"J\": \"J\",\n      \"K\": \"K\",\n      \"L\": \"L\",\n      \"M\": \"M\",\n      \"N\": \"N\",\n      \"O\": \"O\",\n      \"P\": \"P\",\n      \"Q\": \"Q\",\n      \"R\": \"R\",\n      \"S\": \"S\",\n      \"T\": \"T\",\n      \"U\": \"U\",\n      \"V\": \"V\",\n      \"W\": \"W\",\n      \"X\": \"X\",\n      \"Y\": \"Y\",\n      \"Z\": \"Z\"\n    };\n    let encodedMessage = \"\";\n    for (let i = 0; i < message.length; i++) {\n      if (map.hasOwnProperty(message[i])) {\n        encodedMessage += map[message[i]];\n      } else {\n        encodedMessage += message[i];\n      }\n    }\n    return encodedMessage;\n  };\n  return encode(message);\n};\n\nencode('test');\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let largestPrime = 0\n  const primeNumbers = []\n  for (let i = 1; i < 10; i++) {\n    primeNumbers.push(i)\n  }\n  for (let i = 0; i < lst.length; i++) {\n    const digit = lst[i]\n    const isPrime = primeNumbers.indexOf(digit) > -1\n    if (isPrime) {\n      largestPrime += digit\n    }\n  }\n  return largestPrime\n}\n\nconsole.log(largestPrime(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3])))\nconsole.log(largestPrime(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1])))\nconsole.log(largestPrime(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3])))\nconsole.log(largestPrime(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6])))\nconsole.log(largestPrime(skjkasdkd([0, 81, 12, 3, 1, 21])))\nconsole.log(largestPrime(skjkasdkd([0, 8, 1, 2, 1, 7])))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const check = Object.keys(dict).every((key) => {\n    return dict[key].toLowerCase() === dict[key].toUpperCase();\n  });\n  return check;\n};\n\n/*\n  Given a list of strings, return true if every string is unique,\n  else return false.\n  Examples:\n  checkUnique([\"A\",\"B\",\"A\"]) should return true.\n  checkUnique([\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]) should return false.\n  checkUnique([\"A\",\"B\",\"A\"]) should return false.\n  */\nconst checkUnique = (list) => {\n  const listLength = list.length;\n  let unique = true;\n  for (let i = 0; i < listLength; i++) {\n    for (let j = 0; j < listLength; j++) {\n      if (i!= j && list[i] == list[j]) {\n        unique = false;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given an array of numbers, return true if all the numbers in the array are\n  even, else return false.\n  Examples:\n  checkEven([\"1\",\"2\",\"3\",\"4\",\"5\"]) should return true.\n  checkEven([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) should return false.\n  */\nconst checkEven = (list) => {\n  const listLength = list.length;\n  let even = true;\n  for (let i = 0; i < listLength; i++) {\n    if (list[i] % 2!== 0) {\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given an array of numbers, return true if the number of even elements is\n  equal to the number of odd elements, else return false.\n  Examples:\n  checkOdd([\"1\",\"2\",\"3\",\"4\",\"5\"]) should return true.\n  checkOdd([\"1\",\"2\",\"3\",\"4\",\"5\",\"6\"]) should return false.\n  */\nconst checkOdd = (list) => {\n  const listLength = list.length;\n  let odd = false;\n  for (let i = 0; i < listLength; i++) {\n    if (list[i] % 2 === 0) {\n      odd = true;\n    }\n  }\n  return odd;\n};\n\n/*\n  Given a list of numbers, return true if all the numbers are in the given range,\n  else return false.\n  Examples:\n  checkInRange([\"2\",\"5\",\"3\",\"4\",\"7\"]) should return true.\n  checkInRange([\"2\",\"5\",\"3\",\"4\",\"7\",\"9\"]) should return false.\n  */\nconst checkInRange = (list) => {\n  const listLength = list.length;\n  let even = true;\n  for (let i = 0; i < listLength; i++) {\n    if (list[i] < 3 || list[i] > 9) {\n      even = false;\n    }\n  }\n  return even;\n};\n\n/*\n  Given an array of strings, return true if all the strings in the array are\n  equal to each other, else return false.\n  Examples:\n  checkEqual([\"Hello\",\"World\",\"Hello\"]) should return true.\n  checkEqual([\"Hello\",\"Hello\",\"Hello\"]) should return false.\n  checkEqual([\"Hello\",\"Hello\",\"Hello\"]) should return false.\n  */\nconst checkEqual = (list) => {\n  const listLength = list.length;\n  let equal = true;\n  for (let i = 0; i < listLength; i++) {\n    for (let j = 0; j < listLength; j++) {\n      if (list[i]!= list[j]) {\n        equal = false;\n      }\n    }\n  }\n  return equal;\n};\n\n/*\n  Given an array of strings, return true if the strings are all unique,\n  else return false.\n  Examples:\n  checkUnique([\"A\",\"B\",\"A\"]) should return true.\n  checkUnique([\"A\",\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]) should return false.\n  checkUnique([\"A\",\"B\",\"A\"]) should return false.\n  */\nconst checkUnique2 = (list) => {\n  const listLength = list.length;\n  let unique = true;\n  for (let i = 0; i < listLength; i++) {\n    for (let j = 0; j < listLength; j++) {\n      if (list[i] == list[j] && i!= j) {\n        unique = false;\n      }\n    }\n  }\n  return unique;\n};\n\n/*\n  Given a list of strings, return true if all the strings are the same,\n  else return false.\n  Examples:\n  checkEqual([\"Hello\",\"World\",\"Hello\"]) should return true.\n  checkEqual([\"Hello\",\"Hello\",\"Hello\"]) should return false.\n  checkEqual([\"Hello\",\"Hello\",\"Hello\"]) should return false.\n  */\nconst checkEqual2 = (list) => {\n  const listLength = list.length;\n  let equal = true;\n  for (let i = 0; i < listLength; i++) {\n    for (let j = 0; j < listLength; j++) {\n      if (list[i]!= list[j]) {\n        equal = false;\n      }\n    }\n  }\n  return equal;\n};\n\nmodule.exports = {\n  checkDictCase,\n  checkUnique,\n  checkE"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i < n) {\n    arr.push(i);\n    i = i + 1;\n  }\n  return arr;\n};\n\nconst countUpTo2 = (n) => {\n  let arr = [];\n  let i = 1;\n  while(i < n) {\n    arr.push(i);\n    i = i + 1;\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply(a % 10, b % 10);\n}\n\nconst multiply1 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply1(a % 10, b % 10);\n}\n\nconst multiply2 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply2(a % 10, b % 10);\n}\n\nconst multiply3 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply3(a % 10, b % 10);\n}\n\nconst multiply4 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply4(a % 10, b % 10);\n}\n\nconst multiply5 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply5(a % 10, b % 10);\n}\n\nconst multiply6 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply6(a % 10, b % 10);\n}\n\nconst multiply7 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply7(a % 10, b % 10);\n}\n\nconst multiply8 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply8(a % 10, b % 10);\n}\n\nconst multiply9 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply9(a % 10, b % 10);\n}\n\nconst multiply10 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply10(a % 10, b % 10);\n}\n\nconst multiply11 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply11(a % 10, b % 10);\n}\n\nconst multiply12 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply12(a % 10, b % 10);\n}\n\nconst multiply13 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply13(a % 10, b % 10);\n}\n\nconst multiply14 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply14(a % 10, b % 10);\n}\n\nconst multiply15 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply15(a % 10, b % 10);\n}\n\nconst multiply16 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply16(a % 10, b % 10);\n}\n\nconst multiply17 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply17(a % 10, b % 10);\n}\n\nconst multiply18 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a;\n  else\n    return multiply18(a % 10, b % 10);\n}\n\nconst multiply19 = (a, b) => {\n  if(a === 0)\n    return 0;\n  else if(b === 0)\n    return 0;\n  else if(b === 1)\n    return a"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n            result += 1;\n        }\n    }\n    return result;\n};\n\n/*\n  Given a string s, count the number o f lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 1\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n            result += 1;\n        }\n    }\n    return result;\n};\n\nconst count = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\nconst countUpperAndLower = (s) => {\n    return countUpper(s) + countLower(s);\n};\n\nconst countUpperAndLowerInNewWay = (s) => {\n    return s.split('').map(x => x.toUpperCase() + x.toLowerCase()).join('');\n};\n\nconst countUpperAndLowerInOldWay = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay2 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay3 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay4 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay5 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay6 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay7 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay8 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay9 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay10 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i += 1) {\n        result += (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') || (s.charAt(i) >= 'a' && s.charAt(i) <= 'z');\n    }\n    return result;\n};\n\nconst countUpperAndLowerInOldWay11 = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i +="}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const numbers = [\n    -3, -2, -1,\n    -0.5, -0.4, -0.3, -0.2, -0.1,\n    0, 1, 2, 3,\n    0.5, 1.0, 1.5, 2.0, 2.5,\n    3.0, 4.0, 5.0, 6.0, 7.0,\n    8.0, 9.0, 10.0,\n    11.0, 12.0, 13.0, 14.0, 15.0,\n    16.0, 17.0, 18.0,\n    19.0, 20.0, 21.0,\n    22.0, 23.0, 24.0,\n    25.0, 26.0, 27.0,\n    28.0, 29.0, 30.0,\n    31.0, 32.0, 33.0, 34.0,\n    35.0, 36.0, 37.0,\n    38.0, 39.0, 40.0,\n    41.0, 42.0, 43.0,\n    44.0, 45.0, 46.0,\n    47.0, 48.0, 49.0,\n    50.0, 51.0, 52.0,\n    53.0, 54.0, 55.0,\n    56.0, 57.0, 58.0,\n    59.0, 60.0, 61.0,\n    62.0, 63.0, 64.0,\n    65.0, 66.0, 67.0,\n    68.0, 69.0, 70.0,\n    71.0, 72.0, 73.0,\n    74.0, 75.0, 76.0,\n    77.0, 78.0, 79.0,\n    80.0, 81.0, 82.0,\n    83.0, 84.0, 85.0,\n    86.0, 87.0, 88.0,\n    89.0, 90.0, 91.0,\n    92.0, 93.0, 94.0,\n    95.0, 96.0, 97.0,\n    98.0, 99.0, 100.0,\n    101.0, 102.0, 103.0,\n    104.0, 105.0, 106.0,\n    107.0, 108.0, 109.0,\n    110.0, 111.0, 112.0,\n    113.0, 114.0, 115.0,\n    116.0, 117.0, 118.0,\n    119.0, 120.0, 121.0,\n    122.0, 123.0, 124.0,\n    125.0, 126.0, 127.0,\n    128.0, 129.0, 130.0,\n    131.0, 132.0, 133.0,\n    134.0, 135.0, 136.0,\n    137.0, 138.0, 139.0,\n    140.0, 141.0, 142.0,\n    143.0, 144.0, 145.0,\n    146.0, 147.0, 148.0,\n    149.0, 150.0, 151.0,\n    152.0, 153.0, 154.0,\n    155.0, 156.0, 157.0,\n    158.0, 159.0, 160.0,\n    161.0, 162.0, 163.0,\n    164.0, 165.0, 166.0,\n    167.0, 168.0, 169.0,\n    170.0, 171.0, 172.0,\n    173.0, 174.0, 175.0,\n    176.0, 177.0, 178.0,\n    179.0, 180.0, 181.0,\n    182.0, 183.0, 184.0,\n    185.0, 186.0, 187.0,\n    188.0, 189.0, 190.0,\n    191.0, 192.0, 193.0,\n    194.0, 195.0, 196.0,\n    197.0, 198.0, 199.0,\n    200.0, 201.0, 202.0,\n    203.0, 204.0, 205.0,\n    206.0, 207.0, 208.0,\n    209.0, 210.0, 211.0,\n    212.0, 213.0, 214.0,\n    215.0, 216.0, 217.0,\n    218.0, 219.0, 220.0,\n    221.0, 222.0, 223.0,\n    224.0, 225.0, 226.0,\n    227.0, 228.0, 229.0,\n    230.0, 231.0, 232.0,\n    233.0, 234.0, 235.0,\n    236.0, 237.0, 238.0,\n    239.0, 240.0, 241.0,\n    242.0, 243.0, 244.0,\n    245.0, 246.0, 247.0,\n    248.0, 249.0, 250.0,\n    251.0, 252.0, 253.0,\n    254.0, 255.0, 256.0\n  ];\n  let closest = -1;\n  let closestDiff = -1;\n  numbers.forEach(n => {\n    if (Math.abs(value - n) < closestDiff) {\n      closest = n;\n      closestDiff = Math.abs(value - n);\n    }\n  });\n  return closest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let ans = []\n  let level = 1\n  while (n > 0) {\n    let level = n % 2\n    if (level === 0) {\n      ans.push(n)\n      n = n / 2\n    } else {\n      n = n - 1\n      ans.push(n)\n    }\n  }\n  return ans\n}\n\n/*\n  Given a positive integer n, you have to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n  let ans = []\n  let level = 1\n  while (n > 0) {\n    let level = n % 2\n    if (level === 1) {\n      ans.push(n)\n      n = n / 2\n    } else {\n      n = n - 1\n      ans.push(n)\n    }\n  }\n  return ans\n}\n\nmodule.exports = makeAPile2\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let arr = s.split(' ');\n  return arr;\n};\n\nconsole.log(wordsString(\"Hi, my name is John\")); // => [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\nconsole.log(wordsString(\"One, two, three, four, five, six\")); // => [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let m = (x + y) / 2;\n  let x1 = m - x;\n  let y1 = m - y;\n  let x2 = x - m;\n  let y2 = y - m;\n  if (x1 === 0 && y1 === 0) {\n    return m;\n  } else if (x2 === 0 && y2 === 0) {\n    return -1;\n  } else if (x1 === 0) {\n    return chooseNum(y2, m);\n  } else if (y1 === 0) {\n    return chooseNum(x2, m);\n  } else if (x2 === 0) {\n    return chooseNum(y1, m);\n  } else if (y2 === 0) {\n    return chooseNum(x1, m);\n  } else {\n    return Math.max(chooseNum(x1, m), chooseNum(y1, m), chooseNum(x2, m),\n      chooseNum(y2, m));\n  }\n};\n\nlet x = 12, y = 15;\nconsole.log(chooseNum(x, y));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return (sum / (m - n + 1)).toString(2);\n};\n\n// console.log(roundedAvg(1, 5));\n// console.log(roundedAvg(7, 5));\n// console.log(roundedAvg(10, 20));\n// console.log(roundedAvg(20, 33));\n\nconst test = () => {\n  const testArray = [1, 5, 7, 10, 20, 33];\n  const sum = testArray.reduce((prev, curr) => prev + curr);\n  console.log(sum);\n  console.log(roundedAvg(sum, testArray.length - 1));\n  console.log(\"test passed\");\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let result = []\n  let i = 1\n  while (i <= x) {\n    result.push(x % 10)\n    x = Math.floor(x / 10)\n    i++\n  }\n  return result.filter(n => n % 2 === 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  let length = arr.length;\n  let arrLength = [];\n  let reverseArr = [];\n  let temp;\n  let reverseArrLength = 0;\n\n  if (length > 0) {\n    while (arr[reverseArrLength] > 0) {\n      reverseArrLength++;\n    }\n    reverseArrLength--;\n    while (arr[reverseArrLength] > 0) {\n      reverseArr.push(arr[reverseArrLength]);\n      reverseArrLength--;\n    }\n  }\n  for (let i = 0; i < reverseArrLength; i++) {\n    temp = reverseArr[i];\n    reverseArr[i] = reverseArr[length - 1 - i];\n    reverseArr[length - 1 - i] = temp;\n  }\n  let result = reverseArr;\n  let resultLength = result.length;\n  let reversed = [];\n  let j = 0;\n  while (j < resultLength) {\n    reversed.push(result[j]);\n    j++;\n  }\n  result = reversed;\n  return result;\n};\n\nconst nameByNumber = (arr) => {\n  let reverseArr = [];\n  let result = [];\n  let length = arr.length;\n  if (length > 0) {\n    while (arr[length - 1] > 0) {\n      reverseArr.push(arr[length - 1]);\n      length--;\n    }\n  }\n  for (let i = 0; i < length; i++) {\n    result.push(reverseArr[i]);\n  }\n  return result;\n};\n\nconst sortArray = (arr) => {\n  let result = [];\n  let length = arr.length;\n  if (length > 0) {\n    while (arr[length - 1] > 0) {\n      result.push(arr[length - 1]);\n      length--;\n    }\n    while (arr[length - 1] > 0) {\n      arr.splice(length, 1);\n      length--;\n    }\n  }\n  return result;\n};\n\nconst sortArrayByLength = (arr) => {\n  let length = arr.length;\n  let result = [];\n  while (arr[length - 1] > 0) {\n    result.push(arr[length - 1]);\n    length--;\n  }\n  while (arr[length - 1] > 0) {\n    arr.splice(length, 1);\n    length--;\n  }\n  return result;\n};\n\nconst sortArrayByLengthByName = (arr) => {\n  let length = arr.length;\n  let result = [];\n  while (arr[length - 1] > 0) {\n    result.push(arr[length - 1]);\n    length--;\n  }\n  while (arr[length - 1] > 0) {\n    arr.splice(length, 1);\n    length--;\n  }\n  return result;\n};\n\nconst sortArrayByLengthByNameByNumber = (arr) => {\n  let length = arr.length;\n  let result = [];\n  while (arr[length - 1] > 0) {\n    result.push(arr[length - 1]);\n    length--;\n  }\n  while (arr[length - 1] > 0) {\n    arr.splice(length, 1);\n    length--;\n  }\n  return result;\n};\n\nconst sortArrayByLengthByNameByNumberByLength = (arr) => {\n  let length = arr.length;\n  let result = [];\n  while (arr[length - 1] > 0) {\n    result.push(arr[length - 1]);\n    length--;\n  }\n  while (arr[length - 1] > 0) {\n    arr.splice(length, 1);\n    length--;\n  }\n  return result;\n};\n\nconst sortArrayByLengthByNameByNumberByLengthByName = (arr) => {\n  let length = arr.length;\n  let result = [];\n  while (arr[length - 1] > 0) {\n    result.push(arr[length - 1]);\n    length--;\n  }\n  while (arr[length - 1] > 0) {\n    arr.splice(length, 1);\n    length--;\n  }\n  return result;\n};\n\nconst sortArrayByLengthByNameByNumberByLengthByNameByNumber = (arr) => {\n  let length = arr.length;\n  let result = [];\n  while (arr[length - 1] > 0) {\n    result.push(arr[length - 1]);\n    length--;\n  }\n  while (arr[length - 1] > 0) {\n    arr.splice(length, 1);\n    length--;\n  }\n  return result;\n};\n\nmodule.exports = {\n  byLength,\n  nameByNumber,\n  sortArray,\n  sortArrayByLength,\n  sortArrayByLengthByName,\n  sortArrayByLengthByNameByNumber,\n  sortArrayByLengthByNameByNumberByLength,\n  sortArrayByLengthByNameByNumberByLengthByName,\n  sortArrayByLengthByNameByNumberByLengthByNameByNumber,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fact = (i) => {\n    return i === 1? 1 : i === 0? 1 : (i - 1) * f(i - 1);\n  };\n  const nums = [1];\n  const ret = [];\n  for (let i = 2; i <= n; i++) {\n    const nnum = i;\n    for (let j = 0; j < nums.length; j++) {\n      ret.push(nums[j] * fact(num));\n    }\n    nums.push(nnum);\n  }\n  return ret;\n};\n\nf(10).forEach((a) => {\n  console.log(a);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let result = [];\n\n  for (let i = 1; i <= n; i++) {\n    let palindrome = i;\n    let reverse = n - i;\n    while (palindrome >= reverse) {\n      if (palindrome % 2 === 0) {\n        result.push(palindrome);\n      }\n      palindrome = Math.floor(palindrome / 2);\n    }\n  }\n\n  return result;\n};\n\nexport { evenOddPalindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const array = [...arr]\n  let index = 0\n  const max = array.length - 1\n  while (index < max) {\n    if (array[index] > array[index + 1]) {\n      array[index + 1] = array[index + 1] + array[index]\n      array[index] = array[index] - array[index + 1]\n      index = 0\n      max = array.length - 1\n    } else {\n      index += 1\n    }\n  }\n  return array.every(x => x >= 0)\n}\n\nconst moveTwoBall = (arr) => {\n  const array = [...arr]\n  let index = 0\n  const max = array.length - 1\n  while (index < max) {\n    if (array[index] > array[index + 2]) {\n      array[index + 2] = array[index + 1] + array[index]\n      array[index + 1] = array[index] - array[index + 2]\n      array[index] = array[index] - array[index + 1]\n      index = 0\n      max = array.length - 1\n    } else {\n      index += 1\n    }\n  }\n  return array.every(x => x >= 0)\n}\n\nconst moveThreeBall = (arr) => {\n  const array = [...arr]\n  let index = 0\n  const max = array.length - 1\n  while (index < max) {\n    if (array[index] > array[index + 3]) {\n      array[index + 3] = array[index + 2] + array[index]\n      array[index + 2] = array[index + 1] + array[index]\n      array[index + 1] = array[index] - array[index + 3]\n      array[index] = array[index] - array[index + 2]\n      array[index + 2] = array[index + 1] - array[index]\n      array[index + 1] = array[index] - array[index + 3]\n      index = 0\n      max = array.length - 1\n    } else {\n      index += 1\n    }\n  }\n  return array.every(x => x >= 0)\n}\n\nconst moveFourBall = (arr) => {\n  const array = [...arr]\n  let index = 0\n  const max = array.length - 1\n  while (index < max) {\n    if (array[index] > array[index + 4]) {\n      array[index + 4] = array[index + 3] + array[index]\n      array[index + 3] = array[index + 2] + array[index]\n      array[index + 2] = array[index + 1] + array[index]\n      array[index + 1] = array[index] - array[index + 4]\n      array[index] = array[index] - array[index + 3]\n      array[index + 3] = array[index + 2] - array[index]\n      array[index + 2] = array[index + 1] - array[index]\n      array[index + 1] = array[index] - array[index + 4]\n      index = 0\n      max = array.length - 1\n    } else {\n      index += 1\n    }\n  }\n  return array.every(x => x >= 0)\n}\n\nconst moveFiveBall = (arr) => {\n  const array = [...arr]\n  let index = 0\n  const max = array.length - 1\n  while (index < max) {\n    if (array[index] > array[index + 5]) {\n      array[index + 5] = array[index + 4] + array[index]\n      array[index + 4] = array[index + 3] + array[index]\n      array[index + 3] = array[index + 2] + array[index]\n      array[index + 2] = array[index + 1] + array[index]\n      array[index + 1] = array[index] - array[index + 5]\n      array[index] = array[index] - array[index + 4]\n      array[index + 4] = array[index + 3] - array[index]\n      array[index + 3] = array[index + 2] - array[index]\n      array[index + 2] = array[index + 1] - array[index]\n      array[index + 1] = array[index] - array[index + 5]\n      index = 0\n      max = array.length - 1\n    } else {\n      index += 1\n    }\n  }\n  return array.every(x => x >= 0)\n}\n\nconst moveSixBall = (arr) => {\n  const array = [...arr]\n  let index = 0\n  const max = array.length - 1\n  while (index < max) {\n    if (array[index] > array[index + 6]) {\n      array[index + 6] = array"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const l1 = lst1.length;\n  const l2 = lst2.length;\n  let i, j;\n  if (l1!== l2) {\n    return \"NO\";\n  }\n  let index = 0;\n  for (i = 0; i < l1; i++) {\n    if (lst1[i] % 2!== 0) {\n      return \"NO\";\n    }\n    index = i;\n  }\n  for (j = 0; j < l2; j++) {\n    if (lst2[j] % 2!== 0) {\n      return \"NO\";\n    }\n    lst1[index] = lst2[j];\n    index += 1;\n  }\n  return \"YES\";\n};\n\nconst lst1 = [1, 2, 3, 4];\nconst lst2 = [1, 5, 3, 4];\n\nconsole.log(exchange(lst1, lst2));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  let i = 0\n  let j = 0\n  let count = 0\n  let tmp = test.split('')\n  \n  while(i < tmp.length){\n    if(tmp[i] === tmp[j]){\n      count++\n      if(histogram.hasOwnProperty(tmp[i])){\n        histogram[tmp[i]] = count\n      }else{\n        histogram[tmp[i]] = count\n      }\n      j++\n      if(j === tmp.length){\n        j = 0\n      }\n    }else{\n      j++\n      if(j === tmp.length){\n        j = 0\n      }\n    }\n    i++\n  }\n  return histogram\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  let r = '';\n  for (let i = 0, l = s.length; i < l; i++) {\n    if (s.charAt(i) === c.charAt(0) && c.indexOf(s.charAt(i))!== -1) {\n      i = i + c.indexOf(s.charAt(i)) - 1;\n      l = i + 1;\n    }\n    r += s.charAt(i);\n  }\n  return [r, r.toLowerCase() === s.toLowerCase()];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const arr = lst.map(Number);\n  const odd = arr.filter((x) => x % 2!== 0);\n  const even = arr.filter((x) => x % 2 === 0);\n  const result = odd.map((x) => `the number of odd elements ${x} of the ${lst[0]}`);\n  result.push(`the number of even elements ${even.reduce((p, c) => p + c)} of the ${lst[0]}`);\n  return result;\n}\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0\n  let sumSoFar = 0\n  let currSum = 0\n  for (let i = 0; i < nums.length; i++) {\n    sumSoFar += nums[i]\n    currSum = sumSoFar - sum\n    if (currSum < sum) {\n      sum = currSum\n    }\n    sumSoFar -= nums[i]\n  }\n  return sum\n}\n\n// console.log(minSubArraySum([2, 3, 4, 1, 2, 4]))\n// console.log(minSubArraySum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const n = grid.length\n    const m = grid[0].length\n    let res = 0\n    for (let i = 0; i < n; i++) {\n        let r = 1\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 0) {\n                res += r\n                r += 1\n            }\n        }\n    }\n    return res - capacity\n}\n\nconst bucketFilling = (grid, capacity) => {\n    const n = grid.length\n    const m = grid[0].length\n    let res = 0\n    for (let i = 0; i < n; i++) {\n        let r = 1\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                r += 1\n            }\n        }\n        if (r > capacity) {\n            return -1\n        }\n        res += r\n    }\n    return res\n}\n\nconst main = () => {\n    const grid = [\n        [0, 0, 1, 1, 1, 1],\n        [0, 1, 1, 1, 1, 0],\n        [1, 1, 1, 1, 1, 1],\n        [1, 1, 1, 1, 1, 1]\n    ]\n    console.log(bucketFilling(grid, 1))\n    console.log(bucketFilling(grid, 2))\n    console.log(bucketFilling(grid, 3))\n    console.log(bucketFilling(grid, 4))\n    console.log(bucketFilling(grid, 5))\n    console.log(bucketFilling(grid, 6))\n    console.log(bucketFilling(grid, 7))\n    console.log(bucketFilling(grid, 8))\n    console.log(bucketFilling(grid, 9))\n    console.log(bucketFilling(grid, 10))\n    console.log(bucketFilling(grid, 11))\n    console.log(bucketFilling(grid, 12))\n    console.log(bucketFilling(grid, 13))\n    console.log(bucketFilling(grid, 14))\n    console.log(bucketFilling(grid, 15))\n    console.log(bucketFilling(grid, 16))\n    console.log(bucketFilling(grid, 17))\n    console.log(bucketFilling(grid, 18))\n    console.log(bucketFilling(grid, 19))\n    console.log(bucketFilling(grid, 20))\n    console.log(bucketFilling(grid, 21))\n    console.log(bucketFilling(grid, 22))\n    console.log(bucketFilling(grid, 23))\n    console.log(bucketFilling(grid, 24))\n    console.log(bucketFilling(grid, 25))\n    console.log(bucketFilling(grid, 26))\n    console.log(bucketFilling(grid, 27))\n    console.log(bucketFilling(grid, 28))\n    console.log(bucketFilling(grid, 29))\n    console.log(bucketFilling(grid, 30))\n    console.log(bucketFilling(grid, 31))\n    console.log(bucketFilling(grid, 32))\n    console.log(bucketFilling(grid, 33))\n    console.log(bucketFilling(grid, 34))\n    console.log(bucketFilling(grid, 35))\n    console.log(bucketFilling(grid, 36))\n    console.log(bucketFilling(grid, 37))\n    console.log(bucketFilling(grid, 38))\n    console.log(bucketFilling(grid, 39))\n    console.log(bucketFilling(grid, 40))\n    console.log(bucketFilling(grid, 41))\n    console.log(bucketFilling(grid, 42))\n    console.log(bucketFilling(grid, 43))\n    console.log(bucketFilling(grid, 44))\n    console.log(bucketFilling(grid, 45))\n    console.log(bucketFilling(grid, 46))\n    console.log(bucketFilling(grid, 47))\n    console.log(bucketFilling(grid, 48))\n    console.log(bucketFilling(grid, 49))\n    console.log(bucketFilling(grid, 50))\n    console.log(bucketFilling(grid, 51))\n    console.log(bucketFilling(grid, 52))\n    console.log(bucketFilling(grid, 53))\n    console.log(bucketFilling(grid, 54))\n    console.log(bucketFilling(grid, 55))\n    console.log(bucketFilling(grid, 56))\n    console.log(bucketFilling(grid, 57))\n    console.log(bucketFilling(grid, 58))\n    console.log(bucket"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    const sortedArray = [...new Array(arr.length)].map((_, i) => arr[i]);\n    let last = sortedArray.pop();\n    let i = 0;\n    while (sortedArray[i] < last) {\n        let j = i + 1;\n        while (sortedArray[j] < last) {\n            if (sortedArray[i] < sortedArray[j]) {\n                let t = sortedArray[i];\n                sortedArray[i] = sortedArray[j];\n                sortedArray[j] = t;\n            }\n            j += 1;\n        }\n        i += 1;\n    }\n    return sortedArray;\n};\n\nexport default sortArray;<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  if(s.length === 0) {\n    return []\n  }\n  const s = s.toLowerCase()\n  const words = []\n  const n = n > 0? n : Infinity\n  let i = 0\n  while(i < n && i < s.length) {\n    const word = s.substr(i, s.length)\n    if(isWord(word)) {\n      words.push(word)\n    }\n    i += word.length\n  }\n  return words\n}\n\nfunction isWord(s) {\n  return s.match(/^[a-z]+$/i)\n}\n\n/*\nGiven a string s and a non-empty string p, you need to write a function that returns \nthe number of strings that contains all the characters in p in the string s.\n*/\nconst containsAll = (s, p) => {\n  const s = s.toLowerCase()\n  const p = p.toLowerCase()\n  const map = new Map()\n  for(let i = 0; i < s.length; i++) {\n    if(p.indexOf(s[i]) > -1) {\n      map.set(s[i], map.get(s[i]) + 1)\n    }\n  }\n  return map.values().reduce((a, b) => a + b)\n}\n\n/*\n Given a string s and a dictionary of words dict, you need to find all the words in dict \n that can be obtained from s using one or more valid transformations. Each transformation \n is a string that can be obtained by interleaving a word from dict with a word from s. \n For example, \"I have a dream\" can be transformed into \"I have a dreamp\", \"dream\", \n \"a\", \"dreamp\", \"dream\". \n */\nconst findWords = (s, dict) => {\n  const map = new Map()\n  for(let word of dict) {\n    let l = word.length\n    while(l > 0) {\n      let p = word.substr(0, l)\n      if(containsAll(s, p) > 0) {\n        map.set(p, map.get(p) + 1)\n      }\n      l--\n    }\n  }\n  return map.keys()\n}\n\n/*\n Given a string s and a dictionary of words dict, you need to find all the words in dict \n that can be obtained from s using one or more valid transformations. Each transformation \n is a string that can be obtained by deleting 2 characters from s. For example, \n \"I have a dream\" can be transformed into \"I have a dr\", \"am\", \"dream\". \n */\nconst findWordsDeletions = (s, dict) => {\n  const map = new Map()\n  for(let word of dict) {\n    let l = word.length\n    while(l > 2) {\n      let p = word.substr(0, l)\n      if(containsAll(s, p) > 0) {\n        map.set(p, map.get(p) + 1)\n      }\n      l--\n    }\n  }\n  return map.keys()\n}\n\nconst isValid = (s, dict) => {\n  return findWords(s, dict).length > 0\n}\n\nconst isValidDeletions = (s, dict) => {\n  return findWordsDeletions(s, dict).length > 0\n}\n\n/*\nGiven a string s and a dictionary of words dict, you need to find all the words in dict \n that can be obtained from s using one or more valid transformations. Each transformation \n is a string that can be obtained by replacing a certain character in s with another \n character. For example, \"I have a dream\" can be transformed into \"I have a dr\", \"am\", \n \"dream\". \n */\nconst findWordsReplacements = (s, dict) => {\n  const map = new Map()\n  for(let word of dict) {\n    let l = word.length\n    while(l > 2) {\n      let p = word.substr(0, l)\n      if(containsAll(s, p) > 0) {\n        map.set(p, map.get(p) + 1)\n      }\n      l--\n    }\n  }\n  return map.keys()\n}\n\n/*\n Given a string s and a dictionary of words dict, you need to find all the words in dict \n that can be obtained from s using one or more valid transformations. Each transformation \n is a string that can be obtained by inserting a certain character at a specified \n position in s. For example, \"I have a dream\" can be transformed into \"I have a dr\", \n \"am\", \"dream\", \"dream\". \n */\nconst findWordsInsertions = (s, dict) => {\n  const map = new Map()\n  for(let word of dict) {\n    let l = word.length\n    while(l > 0) {\n      let p = word.substr(0, l)\n      if(containsAll(s, p) > 0) {\n        map.set(p, map.get(p) + 1)\n      }\n      l--\n    }\n  }\n  return map.keys()\n}\n\n/*\n Given a string s and a dictionary of words dict, you need to find all the words in dict \n that can be obtained from s using one or more valid transformations. Each transformation \n is a string that can be obtained by reversing the order of characters in s. For example, \n \"I have a dream\" can be transformed into \"dream\", \"I have a dr\", \"am\". \n */"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const letters = word.split('')\n  const letterBefore = letters[0]\n  const letterAfter = letters[1]\n  const vowelBefore = letterBefore.charCodeAt(0)\n  const vowelAfter = letterAfter.charCodeAt(0)\n\n  if (letterBefore.toUpperCase() === letterAfter.toUpperCase()) {\n    return ''\n  }\n  const vowelLength = vowelAfter - vowelBefore\n  for (let i = vowelBefore + 1; i < vowelAfter; i++) {\n    if (word.indexOf(String.fromCharCode(i), vowelBefore)!== -1) {\n      return String.fromCharCode(i)\n    }\n  }\n  return ''\n}\n\nmodule.exports = getClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const [str1, str2] = lst\n  for (let i = 0; i < str1.length; i++) {\n    if (str1[i] === '(') stack.push(str1[i])\n    else if (str1[i] === ')') {\n      if (stack.length) {\n        stack.pop()\n        if (stack.length) {\n          if (stack[stack.length - 1] === '(') {\n            stack.pop()\n            break\n          }\n        }\n      }\n    }\n  }\n  for (let i = 0; i < str2.length; i++) {\n    if (str2[i] === '(') stack.push(str2[i])\n    else if (str2[i] === ')') {\n      if (stack.length) {\n        stack.pop()\n        if (stack.length) {\n          if (stack[stack.length - 1] === '(') {\n            stack.pop()\n            break\n          }\n        }\n      }\n    }\n  }\n  return stack.length === 0\n}\n\nexport { matchParens }\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  const max = arr.slice(0, k).reduce((max, elem) => {\n    if (elem > max) {\n      max = elem;\n    }\n    return max;\n  });\n  return arr.slice(k).filter(elem => elem === max).reverse();\n};\n\nconst [n, k] = process.argv.slice(2);\n\nconsole.log(maximum(Number.parseInt(n), Number.parseInt(k)));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let arr = lst.slice();\n  let sum = 0;\n  for (let i = 0; i < arr.length; i += 1) {\n    if (arr[i] % 2 === 0) {\n      sum += arr[i];\n    }\n  }\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  let current = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (current + arr[i] >= k) {\n      result.push(current + arr[i]);\n      current = 0;\n    } else {\n      current += arr[i];\n    }\n  }\n\n  return result.length === 0? current : result.length === 1? result[0] + current : result.reduce((acc, value) => acc + value);\n};\n\n// export default addElements;\nexport { addElements };\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    let ret = [];\n    while (n) {\n        if (n % 2 === 1) {\n            ret.push(n);\n            n = n / 2;\n        } else {\n            n = 3 * n + 1;\n        }\n    }\n    return ret;\n};\n\nexport default getOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date === undefined || date === null || date === '') {\n    return false;\n  }\n  const match = /^((([0-9]{2})-([0-9]{2}))|(([0-9]{2})-([0-9]{2})-([0-9]{4})))$/g.exec(date);\n  return match!== null && match.length > 0 && match[2]!== undefined && match[2]!== null && match[4]!== undefined && match[4]!== null;\n};\n\nexport default validDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let word = \"\";\n  let words = [];\n  for (let i = 0; i < txt.length; i++) {\n    if (txt[i] === \" \") {\n      words.push(word);\n      word = \"\";\n    } else {\n      word += txt[i];\n    }\n  }\n  words.push(word);\n  return words;\n};\n\n/**\nGiven a string of words, return a string of the words with '*' appended after each word that does not already\nend with a '*'.\n\nExamples\nsplitWords(\"Hello world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello * world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello ** world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello **world!\") ➞ \"Hello world!\"\n*/\nconst splitWordsWithStar = (txt) => {\n  let words = splitWords(txt);\n  words.forEach(word => {\n    let isEndWithStar = /[\\s\\S]*?[^\\s*]*\\*([^\\s*]*)?[\\s\\S]*?[\\s\\S]*?$/.test(word);\n    if (!isEndWithStar) {\n      words.push(word + \"*\");\n    }\n  });\n  return words.join(\" \");\n};\n\n/**\nGiven a string of words, return a string of the words with '_' appended after each word that does not already\nend with a '_'.\n\nExamples\nsplitWords(\"Hello world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello _ world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello **world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello **world!\") ➞ \"Hello world!\"\n*/\nconst splitWordsWithUnderscore = (txt) => {\n  let words = splitWords(txt);\n  words.forEach(word => {\n    let isEndWithUnderscore = /[\\s\\S]*?[^\\s_]*_([^\\s_]*)?[\\s\\S]*?[\\s\\S]*?$/.test(word);\n    if (!isEndWithUnderscore) {\n      words.push(word + \"_\");\n    }\n  });\n  return words.join(\" \");\n};\n\n/**\nGiven a string of words, return a string of the words with '%' appended after each word that does not already\nend with a '%'.\n\nExamples\nsplitWords(\"Hello world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello % world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello %world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello **world!\") ➞ \"Hello world!\"\nsplitWords(\"Hello **world!\") ➞ \"Hello world!\"\n*/\nconst splitWordsWithPercent = (txt) => {\n  let words = splitWords(txt);\n  words.forEach(word => {\n    let isEndWithPercent = /[\\s\\S]*?[^\\s%]*%([^\\s%]*)?[\\s\\S]*?[\\s\\S]*?$/.test(word);\n    if (!isEndWithPercent) {\n      words.push(word + \"%\");\n    }\n  });\n  return words.join(\" \");\n};\n\nconst splitWordsWithComma = (txt) => {\n  let words = splitWords(txt);\n  words.forEach(word => {\n    let isEndWithComma = /[\\s\\S]*?[^\\s,]*,[^\\s,]*([^\\s,]*)?[\\s\\S]*?[\\s\\S]*?$/.test(word);\n    if (!isEndWithComma) {\n      words.push(word + \",\");\n    }\n  });\n  return words.join(\" \");\n};\n\nexport {\n  splitWords,\n  splitWordsWithStar,\n  splitWordsWithUnderscore,\n  splitWordsWithPercent,\n  splitWordsWithComma\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = []\n  const map = {}\n  lst.forEach(x => {\n    if (map[x] === undefined) {\n      map[x] = 1\n    } else {\n      map[x]++\n    }\n  })\n  const size = Object.keys(map).length\n  for (let i = 0; i < size - 1; i++) {\n    if (map[lst[i]] > map[lst[i + 1]]) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.end <= interval2.start || interval2.end <= interval1.start) {\n    return false;\n  }\n\n  const intersection = {\n    start: Math.max(interval1.start, interval2.start),\n    end: Math.min(interval1.end, interval2.end)\n  };\n\n  if (intersection.end - intersection.start === 0) {\n    return false;\n  }\n\n  return true;\n};\n\nmodule.exports = intersection;\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (arr.length === 0) return null;\n  const sign = arr.map((num) => Math.sign(num));\n  const prod = arr.map((num) => Math.abs(num));\n  const product = sign.reduce((p, c, i) => p * prod[i], 1);\n  return product;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const k = k\n  const [p, s] = dfs(grid, k, 0, n, 0)\n  return p\n}\n\nconst dfs = (grid, k, i, n, s) => {\n  if (s === k) return [grid[i][s], i]\n  for (let j = 1; j <= n; j++) {\n    const [p, s] = dfs(grid, k, i, n, j)\n    if (p < grid[i][s]) {\n      return [p, i]\n    }\n  }\n  return [grid[i][s], i]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = fibo(n)\n  const ret = []\n  const t = n\n  const tr = []\n  while (t > 1) {\n    const f = fib[t - 2]\n    const g = fib[t - 1]\n    tr.push(f + g)\n    t -= 1\n  }\n  ret = tr\n  return ret\n}\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const i = n\n  if(i%2===0)\n    return 0\n  else\n    return n\n}\n\nconsole.log(digits(1))\nconsole.log(digits(4))\nconsole.log(digits(235))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n    const [firstBrack, lastBrack] = str.split(\"]\").map(brack => brack.charAt(0));\n    const isNested = (str, lastBrack) => {\n        const [brack, lastBrack] = str.split(\"]\").map(brack => brack.charAt(0));\n        return lastBrack === lastBrack && lastBrack === firstBrack;\n    }\n    const isNested = (str, lastBrack) => {\n        const [brack, lastBrack] = str.split(\"]\").map(brack => brack.charAt(0));\n        return lastBrack === lastBrack && lastBrack === firstBrack;\n    }\n    return str.split(\"]\").every(isNested);\n};\nconsole.log(isNe(\"[[]]\")); // true\nconsole.log(isNe(\"[][][]\")); // false\nconsole.log(isNe(\"[]]\")); // true\nconsole.log(isNe(\"[][]\")); // true\nconsole.log(isNe(\"[][]][\")); // false\nconsole.log(isNe(\"[][][][]\")); // false\nconsole.log(isNe(\"[][][][][]\")); // true\nconsole.log(isNe(\"[][][]][\")); // true\nconsole.log(isNe(\"[][][]][[\")); // true\nconsole.log(isNe(\"[][][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe(\"[][][]][]][]\")); // true\nconsole.log(isNe"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach(val => {\n    sum += Math.pow(Number(val), 2);\n  });\n  return sum;\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  return /^[a-zA-Z]+$/.test(txt.slice(-1)) && txt.slice(-1)!== \" \"\n}\n\nconst checkIfLastCharIsNumber = (txt) => {\n  return /^\\d+$/.test(txt.slice(-1))\n}\n\nconst checkIfLastCharIsPunctuation = (txt) => {\n  return /^\\w+$/.test(txt.slice(-1)) && txt.slice(-1)!== \" \"\n}\n\nconst checkIfLastCharIsWhitespace = (txt) => {\n  return txt.slice(-1) === \" \"\n}\n\nconst checkIfLastCharIsSpace = (txt) => {\n  return txt.slice(-1) === \" \"\n}\n\n/*\n  Create a function that returns true if the string contains\n  all the characters in a word, and false otherwise.\n  Examples:\n  containsAllLetters(\"apple pie\") ➞ false\n  containsAllLetters(\"apple pi e\") ➞ true\n  containsAllLetters(\"apple pie \") ➞ false\n  containsAllLetters(\"\") ➞ false\n  */\nconst containsAllLetters = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z]+/)\n}\n\nconst containsAllNumbers = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\d+/)\n}\n\nconst containsAllPunctuation = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\w+/)\n}\n\nconst containsAllWhitespace = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\s+/)\n}\n\n/*\n  Create a function that returns true if the string contains\n  all the letters of the alphabet, and false otherwise.\n  Examples:\n  containsAllLetters(\"apple pie\") ➞ true\n  containsAllLetters(\"apple pi e\") ➞ false\n  containsAllLetters(\"apple pie \") ➞ false\n  containsAllLetters(\"\") ➞ false\n  */\nconst containsAllLettersFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z]+/)\n}\n\nconst containsAllNumbersFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\d+/)\n}\n\nconst containsAllPunctuationFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[\\w]+/)\n}\n\nconst containsAllWhitespaceFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\s+/)\n}\n\nconst containsAllLettersAndNumbers = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z\\d]+/)\n}\n\nconst containsAllLettersAndPunctuation = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z\\w]+/)\n}\n\nconst containsAllLettersAndNumbersAndPunctuation = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z\\d\\w]+/)\n}\n\nconst containsAllWhitespaceAndNumbers = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\s+/)\n}\n\n/*\n  Create a function that returns true if the string contains\n  all the letters and numbers of the alphabet, and false otherwise.\n  Examples:\n  containsAllLettersAndNumbers(\"apple pie\") ➞ true\n  containsAllLettersAndNumbers(\"apple pi e\") ➞ false\n  containsAllLettersAndNumbers(\"apple pie \") ➞ false\n  containsAllLettersAndNumbers(\"\") ➞ false\n  */\nconst containsAllLettersAndNumbersFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z\\d]+/)\n}\n\nconst containsAllPunctuationAndNumbersFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[\\w\\d]+/)\n}\n\nconst containsAllLettersAndNumbersAndPunctuationFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z\\d\\w]+/)\n}\n\nconst containsAllWhitespaceAndNumbersFromALetter = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\s+/)\n}\n\nconst containsAllLettersAndNumbersAndPunctuationAndWhitespace = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z\\d\\w]+/)\n}\n\nconst containsOnlyLetters = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/[a-zA-Z]+/)\n}\n\nconst containsOnlyNumbers = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match(/\\d+/)\n}\n\nconst containsOnlyPunctuation = (txt) => {\n  return txt.replace(/\\s+/g, \"\").match("}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    let index = -1\n    for(let i = 0; i < arr.length; i++){\n        let temp = arr[i]\n        for(let j = i + 1; j < arr.length; j++){\n            if(temp < arr[j]){\n                index = j\n                break\n            }\n        }\n        if(index!= -1){\n            break\n        }\n    }\n    return index\n}\n\n// console.log(canArrange([1,2,3,4,5]))\n// console.log(canArrange([1,2,3,4,5,6]))\n// console.log(canArrange([1,2,3,4,5,6,7]))\n// console.log(canArrange([1,2,3,4,5,6,7,8]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10]))\n\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (!lst) {\n    return null\n  }\n  const max = Math.max.apply(null, lst)\n  const min = Math.min.apply(null, lst)\n  if (min < 0) {\n    return (null, min)\n  }\n  if (max < 0) {\n    return (max, null)\n  }\n  return (max, min)\n}\n\nconst largestSmallestIntegersTest = t.test(largestSmallestIntegers)\n\nlargestSmallestIntegersTest.write({\n  '[2, 4, 1, 3, 5, 7]': [null, 1],\n  '[]': [null, null],\n  '[0]': [null, null]\n})\n\nlargestSmallestIntegersTest.end()\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n    let typeA = typeof(a);\n    let typeB = typeof(b);\n    if (typeA === typeB && typeA === 'object'){\n        if (a.length === b.length){\n            return compare(a, b);\n        }\n        else{\n            return compare(a, b);\n        }\n    }\n    else if (typeA ==='string' && typeB ==='string'){\n        return compare(a, b);\n    }\n    else{\n        return compare(a, b);\n    }\n};\n\n/*\n  Create a function that takes two arrays of equal length and returns the smallest\n  differenc in their values.\n  Note: If two arrays of the same length, and in the same order, are equal, return the\n  array of the smaller length.\n*/\nconstcompare = (a,  b) => {\n    let typeA = typeof(a);\n    let typeB = typeof(b);\n    if (typeA === typeB && typeA === 'object'){\n        if (a.length === b.length){\n            return compare(a, b);\n        }\n        else{\n            return compare(a, b);\n        }\n    }\n    else if (typeA ==='string' && typeB ==='string'){\n        return compare(a, b);\n    }\n    else{\n        return compare(a, b);\n    }\n};\n\nconst compare = (a,  b) => {\n    if (a < b){\n        return a;\n    }\n    else{\n        return b;\n    }\n};\n\nmodule.exports = {\n    compareOne: compareOne,\n    compare: compare\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + n + n + n;\n  const num = Math.floor(sum / 2);\n  return num === sum;\n};\n\nconst isEqualToSumOdd = (n) => {\n  const sum = n + n + n + n;\n  const num = Math.floor(sum / 2);\n  return num === sum;\n};\n\nconst isEqualToSumEvenOdd = (n) => {\n  const sum = n + n + n + n;\n  const num = Math.floor(sum / 2);\n  return num === sum || num === sum + 1;\n};\n\nexport default {\n  isEqualToSumEven,\n  isEqualToSumOdd,\n  isEqualToSumEvenOdd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    //TODO\n};\n\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    if(typeof text!== \"string\"){\n        throw new Error(\"Text is not a string\");\n    }\n    const textLength = text.length;\n    let start = 0;\n    let i = 0;\n    let next = text.charAt(i);\n    let textStart = next;\n    let textEnd = next;\n    let isTextEnd = false;\n    \n    for(i = 1; i < textLength; i++){\n        next = text.charAt(i);\n        if(next ===''){\n            textStart = next;\n            textEnd = next;\n            isTextEnd = true;\n        }else if(next ===''){\n            if(isTextEnd){\n                textStart = next;\n                textEnd = next;\n            }\n            isTextEnd = false;\n        }else if(isTextEnd){\n            textEnd = next;\n            isTextEnd = false;\n        }\n        if(next ===''){\n            text = text.substring(0, textStart) + '_' + text.substring(textEnd);\n            textStart = next;\n            textEnd = next;\n        }\n    }\n    return text;\n}\n\n/*\n  Given a string text, return a copy of text with the first and last\n  characters removed. If the first or last character is removed,\n  the remaining character will be the first or last character in\n  the string.\n  \n  ex1: ex1 = \"Test\"\n  ex2: ex2 = \"Test\"\n  ex3: ex3 = \"T\"\n  ex4: ex4 = \"Test\"\n  ex5: ex5 = \"Test\"\n  ex6: ex6 = \"T\"\n  ex7: ex7 = \"Test\"\n  ex8: ex8 = \"Test\"\n  ex9: ex9 = \"T\"\n  \n  ex1: ex2 = \"est\"\n  ex2: ex3 = \"est\"\n  ex3: ex4 = \"est\"\n  ex4: ex5 = \"est\"\n  ex5: ex6 = \"est\"\n  ex6: ex7 = \"est\"\n  ex7: ex8 = \"est\"\n  ex8: ex9 = \"est\"\n  */\nconst removeFirstAndLast = (text) => {\n    if(typeof text!== \"string\"){\n        throw new Error(\"Text is not a string\");\n    }\n    let textLength = text.length;\n    let start = 0;\n    let i = 0;\n    let next = text.charAt(i);\n    let textStart = next;\n    let textEnd = next;\n    let isTextEnd = false;\n    \n    for(i = 1; i < textLength; i++){\n        next = text.charAt(i);\n        if(next ===''){\n            textStart = next;\n            textEnd = next;\n            isTextEnd = true;\n        }else if(next ===''){\n            if(isTextEnd){\n                textStart = next;\n                textEnd = next;\n            }\n            isTextEnd = false;\n        }else if(isTextEnd){\n            textEnd = next;\n            isTextEnd = false;\n        }\n        if(next ===''){\n            text = text.substring(0, textStart) + text.substring(textEnd);\n            textStart = next;\n            textEnd = next;\n        }\n    }\n    return text;\n}\n\nconst removeAllSpaces = (text) => {\n    if(typeof text!== \"string\"){\n        throw new Error(\"Text is not a string\");\n    }\n    let textLength = text.length;\n    let start = 0;\n    let i = 0;\n    let next = text.charAt(i);\n    let textStart = next;\n    let textEnd = next;\n    let isTextEnd = false;\n    \n    for(i = 1; i < textLength; i++){\n        next = text.charAt(i);\n        if(next ===''){\n            textStart = next;\n            textEnd = next;\n            isTextEnd = true;\n        }else if(next ===''){\n            if(isTextEnd){\n                textStart = next;\n                textEnd = next;\n            }\n            isTextEnd = false;\n        }else if(isTextEnd){\n            textEnd = next;\n            isTextEnd = false;\n        }\n        if(next ===''){\n            text = text.substring(0, textStart) + text.substring(textEnd);\n            textStart = next;\n            textEnd = next;\n        }\n    }\n    return text;\n}\n\nconst removeLastSpace = (text) => {\n    if(typeof text!== \"string\"){\n        throw new Error(\"Text is not a string\");\n    }\n    let textLength = text.length;\n    let start = 0;\n    let i = 0;\n    let next = text.charAt(i);\n    let textStart = next;\n    let textEnd = next;\n    let isTextEnd = false;\n    \n    for(i = 1; i < textLength; i++){\n        next = text.charAt(i);\n        if(next ===''){\n            textStart = next;\n            textEnd = next;\n            isTextEnd = true;\n        }else if(next ===''){\n            if(isTextEnd){\n                textStart = next;\n                textEnd = next;\n            }\n            isTextEnd = false;\n        }else if(isTextEnd){\n            textEnd = next;\n            isTextEnd = false;\n        }\n        if(next ===''){\n            text = text.substring(0, textStart) + text.substring(textEnd);\n            textStart = next;\n            textEnd = next;\n        }\n    }\n    return text;\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (!file_name) {\n    return 'No';\n  }\n  var re = /^[A-Za-z][A-Za-z0-9]*[.]?[A-Za-z]{2,4}$/;\n  if (!re.test(file_name)) {\n    return 'No';\n  }\n  var count = file_name.split('.').length;\n  var len = file_name.length;\n  var start = 0;\n  var end = file_name.length;\n  for (var i = 0; i < len; i++) {\n    if (file_name[i] === '.') {\n      if (i === 0) {\n        return 'No';\n      }\n      if (i + 1 === len) {\n        return 'No';\n      }\n      if (file_name[i + 1]!== '.') {\n        return 'No';\n      }\n      start = i + 1;\n      end = len;\n      break;\n    }\n  }\n  if (start === end) {\n    return 'No';\n  }\n  var name = file_name.slice(start, end);\n  var nameArray = name.split('.');\n  var isExt = (nameArray[nameArray.length - 1].toLowerCase() === 'txt' ||\n               nameArray[nameArray.length - 1].toLowerCase() === 'exe' ||\n               nameArray[nameArray.length - 1].toLowerCase() === 'dll');\n  if (!isExt) {\n    return 'No';\n  }\n  return 'Yes';\n};\n\n// var fileNameCheck = file_name => {\n//   if (!file_name) {\n//     return 'No';\n//   }\n//   var re = /^[A-Za-z][A-Za-z0-9]*[.]?[A-Za-z]{2,4}$/;\n//   if (!re.test(file_name)) {\n//     return 'No';\n//   }\n//   var count = file_name.split('.').length;\n//   var len = file_name.length;\n//   var start = 0;\n//   var end = file_name.length;\n//   for (var i = 0; i < len; i++) {\n//     if (file_name[i] === '.') {\n//       if (i === 0) {\n//         return 'No';\n//       }\n//       if (i + 1 === len) {\n//         return 'No';\n//       }\n//       if (file_name[i + 1]!== '.') {\n//         return 'No';\n//       }\n//       start = i + 1;\n//       end = len;\n//       break;\n//     }\n//   }\n//   if (start === end) {\n//     return 'No';\n//   }\n//   var name = file_name.slice(start, end);\n//   var nameArray = name.split('.');\n//   var isExt = (nameArray[nameArray.length - 1].toLowerCase() === 'txt' ||\n//               nameArray[nameArray.length - 1].toLowerCase() === 'exe' ||\n//               nameArray[nameArray.length - 1].toLowerCase() === 'dll');\n//   if (!isExt) {\n//     return 'No';\n//   }\n//   return 'Yes';\n// };\n\nmodule.exports = fileNameCheck;\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares2 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares3 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares4 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares5 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares6 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares7 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares8 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares9 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares10 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares11 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares12 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares13 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares14 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares15 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares16 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares17 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares18 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares19 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares20 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)\n  return sum(lst)\n}\n\nconst sumSquares21 = (lst) => {\n  const squares = (val) => val * val\n  const sum = (lst) => lst.reduce((acc, val) => acc + squares(val), 0)"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let arr = sentence.split(' ')\n    let newArr = []\n    let tmpArr = []\n    for (let i = 0; i < arr.length; i++) {\n        let word = arr[i]\n        let tmp = []\n        for (let j = 0; j < word.length; j++) {\n            tmp.push(parseInt(word[j]))\n        }\n        tmpArr.push(tmp)\n    }\n    for (let i = 0; i < tmpArr.length; i++) {\n        let tmp = []\n        for (let j = 0; j < tmpArr[i].length; j++) {\n            tmp.push(tmpArr[i][j])\n        }\n        newArr.push(tmp)\n    }\n    let newSentence = []\n    let tmp = []\n    let isPrime = []\n    for (let i = 0; i < newArr.length; i++) {\n        let num = newArr[i][0]\n        let index = newArr[i][newArr[i].length - 1]\n        tmp.push(num)\n        tmp.push(index)\n    }\n    for (let i = 0; i < tmp.length; i++) {\n        let num = tmp[i]\n        let index = tmp[tmp.length - 1 - i]\n        if (num.toString().length === 1) {\n            if (index % 2 === 0) {\n                isPrime.push(true)\n            } else {\n                isPrime.push(false)\n            }\n        } else {\n            let res = num.toString().split('')\n            for (let j = 0; j < res.length; j++) {\n                if (isPrime[parseInt(res[j])] === false) {\n                    isPrime.push(false)\n                }\n            }\n        }\n    }\n    for (let i = 0; i < isPrime.length; i++) {\n        if (isPrime[i] === true) {\n            newSentence.push(i)\n        }\n    }\n    return newSentence\n}\n\nconsole.log(wordsInSentence('This is a test'))\nconsole.log(wordsInSentence('lets go for swimming'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n\treturn (x*n).toExponential().toLowerCase().replace('e','').replace('.','') === (x*n).toString().replace('e','').replace('.','')\n}\n\nconst main = (x, n) => {\n\tif(simplify(x, n)){\n\t\tconsole.log(x + \" \" + n + \" = \" + x*n)\n\t}else{\n\t\tconsole.log(x + \" \" + n + \" is not a simplification of \" + x*n)\n\t}\n}\n\nmain(\"1\", \"2\")\nmain(\"1\", \"1\")\nmain(\"7\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"1\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \"0\")\nmain(\"1\", \""}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const arr = Array.from(nums);\n  return arr.sort((a, b) => {\n    const sum = a.slice(0, -1).reduce((prev, next) => prev + next, 0);\n    const sum2 = b.slice(0, -1).reduce((prev, next) => prev + next, 0);\n    return sum2 - sum;\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter((num) => {\n    let sum = num;\n    let lastDigits = num % 10;\n    for (let i = 1; i < 9; i++) {\n      sum = sum + (num % 10) * i;\n      num = num / 10;\n    }\n    return sum % 10 === lastDigits;\n  });\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const arr = Array(n)\n  const count = arr.reduce((a, x) => a + x, 0)\n  const triple = arr.reduce((a, x) => a + x, 0)\n  const tripleCount = count - (triple - 1)\n  return (tripleCount)\n}\n\nconst triple = (arr) => {\n  return arr.reduce((a, x) => a + x, 0)\n}\n\nconsole.log(getMaxTriples(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    var r = [];\n    var m = [];\n    for (var i = 1; i < 9; i++) {\n        var p1 = planet1.charAt(i - 1);\n        var p2 = planet2.charAt(i - 1);\n        if (p1 === p2) {\n            r.push(i);\n        } else {\n            var d = distance(p1, p2);\n            if (d < 5) {\n                m.push(i);\n            }\n        }\n    }\n    var temp = r.concat(m);\n    temp.sort((a, b) => a - b);\n    return (temp);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const result = []\n  let i = 0\n  for (let x of lst) {\n    const t = i++\n    if (t % 2) {\n      result.push(x)\n    }\n  }\n  return result\n}\n\nconst list_sort = (lst) => {\n  const result = []\n  lst.sort((a, b) => {\n    if (a < b) return -1\n    if (a > b) return 1\n    return 0\n  })\n  return result\n}\n\nconsole.log(sortedListSum([\"aa\", \"a\", \"aaa\"]))\nconsole.log(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  const t = (n % x === 0)? x : y\n  return t\n}\n\nconst test = (xOrY, [x, y, n]) => {\n  const testResult = xOrY(n, x, y)\n  console.log(`The result of ${n} is:${testResult}`)\n}\n\ntest(xOrY, [7, 34, 12])\ntest(xOrY, [15, 8, 5])<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  const diff = (x, y) => x - y;\n  const sum = (x, y) => x + y;\n  const half = (x, y) => x + y;\n  const double = (x, y) => half(x, x);\n  const halfSum = (x, y) => sum(x, half(y, y));\n  const doubleSum = (x, y) => sum(half(x, x), half(y, y));\n  const halfDiff = (x, y) => diff(half(x, x), half(y, y));\n  const doubleDiff = (x, y) => diff(double(x, x), double(y, y));\n  const halfDiffSum = (x, y) => sum(halfDiff(x, y), halfDiff(y, x));\n  const doubleDiffSum = (x, y) => sum(doubleDiff(x, y), doubleDiff(y, x));\n  const diffSum = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum2 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum3 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum4 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum5 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum6 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum7 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum8 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum9 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum10 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum11 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum12 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum13 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum14 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum15 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum16 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum17 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum18 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum19 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum20 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum21 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum22 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum23 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum24 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum25 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum26 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum27 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum28 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum29 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum30 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum31 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum32 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum33 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum34 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum35 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum36 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum37 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum38 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum39 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum40 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum41 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum42 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum43 = (x, y) => sum(diff(x, y), diff(y, x));\n  const diffSum44 = ("}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let result = [];\n  for (let i = 0; i < game.length; i++) {\n    result.push(0);\n  }\n  for (let i = 0; i < game.length; i++) {\n    if (guess[i] === game[i]) {\n      result[i] = 0;\n    } else {\n      result[i] = Math.abs(guess[i] - game[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const class_list = class_name.split('.')\n  const class_upper = class_list[0]\n  const class_lower = class_list[1]\n  const extension_list = extensions.split('.')\n  const extension_upper = extension_list[0]\n  const extension_lower = extension_list[1]\n  const cap = extensions.charCodeAt(0) - 'a'.charCodeAt(0)\n  const strength = -1\n  let current_strength = 0\n  let current_extension_index = 0\n  let current_extension = null\n  let current_extension_name = null\n  let i = 0\n  for (i = 0; i < extension_list.length; i += 1) {\n    const extension = extension_list[i]\n    const extension_upper = extension.charCodeAt(0) - 'a'.charCodeAt(0)\n    const strength = (cap - extension_upper)\n    if (strength > current_strength) {\n      current_strength = strength\n      current_extension_name = extension\n      current_extension_index = i\n    }\n  }\n  return class_upper + '.' + current_extension_name + '.' + class_lower\n}\n\n/*\n  This function is to be used for determining the strength of an extension.\n  for example, if extension is 'SErviNGSliCes' in the list'my_class', the function returns -1\n  since 'SErviNGSliCes' is the strongest extension in the list.\n  It can also be used to check the strength of a classname, in the example above, the classname is 'Slices'\n  and the extension is 'SErviNGSliCes'\n  Example:\n  classStrength('Slices', 'SErviNGSliCes') == -1\n  classStrength('Slices', 'SErviNGSliCes') == -1\n  classStrength('Slices', 'Be') == 0\n  classStrength('Slices', 'Be') == 0\n  classStrength('Slices', 'Cheese') == 1\n  classStrength('Slices', 'Cheese') == 1\n*/\nconst classStrength = (class_name, extension) => {\n  const class_list = class_name.split('.')\n  const class_upper = class_list[0]\n  const class_lower = class_list[1]\n  const extension_list = extension.split('.')\n  const extension_upper = extension_list[0]\n  const extension_lower = extension_list[1]\n  const cap = extension_upper - 'a'.charCodeAt(0)\n  const strength = -1\n  let current_strength = 0\n  let current_extension_index = 0\n  let current_extension = null\n  let current_extension_name = null\n  let i = 0\n  for (i = 0; i < extension_list.length; i += 1) {\n    const extension = extension_list[i]\n    const extension_upper = extension.charCodeAt(0) - 'a'.charCodeAt(0)\n    const strength = (cap - extension_upper)\n    if (strength > current_strength) {\n      current_strength = strength\n      current_extension_name = extension\n      current_extension_index = i\n    }\n  }\n  return current_strength\n}\n\n/*\n  This function is to be used to determine if the given class has any of the given extensions\n  Example:\n  hasExtension('MyClass', ['AA', 'BB', 'CC']) == true\n  hasExtension('MyClass', ['AA', 'BB', 'CC']) == true\n  hasExtension('MyClass', ['AA', 'BB', 'CC']) == true\n  hasExtension('MyClass', ['AA', 'BB', 'CC']) == false\n*/\nconst hasExtension = (class_name, extensions) => {\n  const class_list = class_name.split('.')\n  const class_upper = class_list[0]\n  const class_lower = class_list[1]\n  const extension_list = extensions.split('.')\n  const extension_upper = extension_list[0]\n  const extension_lower = extension_list[1]\n  const cap = extension_upper - 'a'.charCodeAt(0)\n  const current_strength = 0\n  let i = 0\n  for (i = 0; i < extension_list.length; i += 1) {\n    const extension = extension_list[i]\n    const extension_upper = extension.charCodeAt(0) - 'a'.charCodeAt(0)\n    const strength = (cap - extension_upper)\n    if (strength === current_strength) {\n      return true\n    }\n    current_strength = strength\n  }\n  return false\n}\n\nmodule.exports = {\n  strongestExtension,\n  classStrength,\n  hasExtension\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  const r= a.split(\"\")\n  const l= b.split(\"\")\n  const m= new Map()\n  for (let i= 0; i < r.length; i++) {\n    const s= r[i]\n    for (let j= 0; j < l.length; j++) {\n      const t= l[j]\n      if (s.length >= t.length && m.has(s.substr(0, t.length))) {\n        return false\n      }\n    }\n    m.set(s, true)\n  }\n  return true\n}\n\n/*\n  a b cd e\n  ab cd ef\n  ab c e f\n  ab cd ef\n  abc de f\n  abcd ef\n  abce f\n  abcd ef\n  abcd e f\n  abcd ef\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e f\n  abcd e"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let oddCount = 0, evenCount = 0;\n    for (let i = 0; i < num.toString().length; i++) {\n        let char = num.toString().charAt(i);\n        if (char === '0') {\n            evenCount++;\n        } else if (char === '1') {\n            oddCount++;\n        }\n    }\n    return [evenCount, oddCount];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let roman}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    if (a <= 0 || b <= 0 || c <= 0) {\n        throw new Error('Length of any side must be greater than zero');\n    }\n    return ((a + b > c) && (a + c > b) && (b + c > a));\n}\n\nconst getThreeSideLengths = (triangle) => {\n    let a = triangle[0];\n    let b = triangle[1];\n    let c = triangle[2];\n    return [a, b, c];\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n    if (a <= 0 || b <= 0 || c <= 0) {\n        throw new Error('Length of any side must be greater than zero');\n    }\n    return ((a + b > c) && (a + c > b) && (b + c > a));\n}\n\nconst checkTriangle = (triangle) => {\n    const a = triangle[0];\n    const b = triangle[1];\n    const c = triangle[2];\n    return ((a + b > c) && (a + c > b) && (b + c > a));\n}\n\nconst isValidTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return (checkTriangle(triangle));\n}\n\nconst getTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst printTriangle = (triangle) => {\n    const a = triangle[0];\n    const b = triangle[1];\n    const c = triangle[2];\n    console.log(`Triangle: ${a} + ${b} = ${c}`);\n}\n\nconst getTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getRightAngleTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getValidTriangles = (triangle) => {\n    return triangle.filter((triangle) => {\n        return isValidTriangle(triangle);\n    });\n}\n\nconst checkTriangles = (triangle) => {\n    return getValidTriangles(triangle).every((triangle) => {\n        return checkTriangle(triangle);\n    });\n}\n\nconst printTriangles = (triangle) => {\n    return getValidTriangles(triangle).map((triangle) => {\n        printTriangle(triangle);\n    });\n}\n\nconst getTriangleLength = (triangle) => {\n    const a = triangle[0];\n    const b = triangle[1];\n    const c = triangle[2];\n    return a + b + c;\n}\n\nconst getTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getRightAngleTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getValidTriangles = (triangle) => {\n    return triangle.filter((triangle) => {\n        return isValidTriangle(triangle);\n    });\n}\n\nconst getTriangleLength = (triangle) => {\n    const a = triangle[0];\n    const b = triangle[1];\n    const c = triangle[2];\n    return a + b + c;\n}\n\nconst getTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getRightAngleTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst isValidTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getValidTriangles = (triangle) => {\n    return triangle.filter((triangle) => {\n        return isValidTriangle(triangle);\n    });\n}\n\nconst checkTriangles = (triangle) => {\n    return getValidTriangles(triangle).every((triangle) => {\n        return checkTriangle(triangle);\n    });\n}\n\nconst isValidTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst printTriangles = (triangle) => {\n    return getValidTriangles(triangle).map((triangle) => {\n        printTriangle(triangle);\n    });\n}\n\nconst checkTriangles = (triangle) => {\n    return getValidTriangles(triangle).every((triangle) => {\n        return checkTriangle(triangle);\n    });\n}\n\nconst getTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getRightAngleTriangle = (triangle) => {\n    if (triangle.length!== 3) {\n        throw new Error('Triangle must have 3 sides');\n    }\n    return triangle;\n}\n\nconst getValidTriangles = (triangle) => {"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  const sort = words.sort();\n  let result = '';\n  for(let i = 0; i < words.length; i++) {\n    let w = sort[i];\n    let t = w.split('');\n    for(let j = 0; j < t.length; j++) {\n      if(t[j].length > result.length) {\n        result = t[j];\n      }\n    }\n  }\n  return result;\n};\nconsole.log(Max(['na me', 'of','string']));\nconsole.log(Max(['name ', 'enam', 'game']));\nconsole.log(Max(['aaaaaaa', 'bb',\"cc\"]));\nconsole.log(Max(['a']));\nconsole.log(Max(['a', 'b']));\nconsole.log(Max(['a', 'b', 'c']));\nconsole.log(Max(['a', 'b', 'c', 'd']));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  // you're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  // but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  // you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n  //                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  let diff = need - number;\n  if (diff > remaining) {\n    diff = remaining;\n  }\n  return [number + diff, remaining - diff];\n}\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0\n  for (let i = 0; i < operator.length; i++) {\n    result += operator[i][0] * operand[i][0]\n  }\n  for (let j = 1; j < operand.length; j++) {\n    result += operator[0][j] * operand[j][0]\n  }\n  return result\n}\n\nconst getOperator = (array) => {\n  let operator = []\n  for (let i = 0; i < array.length; i++) {\n    let currentOperator = []\n    for (let j = 0; j < array.length; j++) {\n      currentOperator.push(array[j][i])\n    }\n    operator.push(currentOperator)\n  }\n  return operator\n}\n\nconst getOperand = (array) => {\n  let operand = []\n  for (let i = 0; i < array.length; i++) {\n    operand.push(array[i][array.length - 1])\n  }\n  return operand\n}\n\nconst getArray = (array) => {\n  let a = []\n  for (let i = 0; i < array.length; i++) {\n    let b = []\n    for (let j = 0; j < array[i].length; j++) {\n      b.push(array[i][j])\n    }\n    a.push(b)\n  }\n  return a\n}\n\nconst doAlgebraWithArray = (array) => {\n  let result = 0\n  for (let i = 0; i < array.length; i++) {\n    let currentOperator = []\n    for (let j = 0; j < array.length; j++) {\n      currentOperator.push(array[i][j])\n    }\n    let currentOperand = []\n    for (let k = 0; k < array.length; k++) {\n      currentOperand.push(array[k][array.length - 1])\n    }\n    result += doAlgebra(getOperator(currentOperator), currentOperand)\n  }\n  return result\n}\n\nconst doAlgebraWithTwoLists = (operator, operand) => {\n  let result = 0\n  for (let i = 0; i < operator.length; i++) {\n    let currentOperator = []\n    for (let j = 0; j < operand.length; j++) {\n      currentOperator.push(operand[j][i])\n    }\n    let currentOperand = []\n    for (let k = 0; k < operand.length; k++) {\n      currentOperand.push(operand[k][operand.length - 1])\n    }\n    result += doAlgebra(getOperator(currentOperator), currentOperand)\n  }\n  return result\n}\n\nconst main = () => {\n  let array1 = [\n    [2, 3, 4, 5],\n    [3, 4, 5, 6],\n    [4, 5, 6, 7],\n    [5, 6, 7, 8],\n    [6, 7, 8, 9],\n    [7, 8, 9, 10],\n    [8, 9, 10, 11],\n    [9, 10, 11, 12],\n    [10, 11, 12, 13],\n    [11, 12, 13, 14],\n    [12, 13, 14, 15],\n    [13, 14, 15, 16],\n    [14, 15, 16, 17],\n    [15, 16, 17, 18],\n    [16, 17, 18, 19],\n    [17, 18, 19, 20],\n    [18, 19, 20, 21],\n    [19, 20, 21, 22],\n    [20, 21, 22, 23],\n    [21, 22, 23, 24],\n    [22, 23, 24, 25],\n    [23, 24, 25, 26],\n    [24, 25, 26, 27],\n    [25, 26, 27, 28],\n    [26, 27, 28, 29],\n    [27, 28, 29, 30],\n    [28, 29, 30, 31],\n    [29, 30, 31, 32],\n    [30, 31, 32, 33],\n    [31, 32, 33, 34],\n    [32, 33, 34, 35],\n    [33, 34, 35, 36],\n    [34, 35, 36, 37],\n    [35, 36, 37, 38],\n    [36, 37, 38, 39],\n    [37, 38, 39, 40],\n    [38, 39, 40, 41],\n    [39, 40, 41, 42],\n    [40, 41, 42, 43],\n    [41, 42, 43, 44],\n    [42, 43, 44, 45],\n    [43, 44, 45, 46],\n    [44, 45, 46, 47],\n    [45, 46, 47, 48],\n    [46, 47, 48, 49],\n    [47, 48, 49, 50],\n    [48, 49, 50, 51],\n    [49, 50, 51, 52],\n    [50, 51, 52, 53],\n    [51, 52, 53, 54],\n    [52, 53, 54, 55],\n    [53, 54, 55, 56],\n    [54, 55, 56, 57],\n    [55, 56, 57, 58],\n    [56, 57, 58"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const str = s.split('');\n  return str.reverse().join('');\n};\n\n// console.log(solve(\"1234\"));\n// console.log(solve(\"ab\"));\n// console.log(solve(\"#a@C\"));\n\n// https://www.hackerrank.com/challenges/reverse-string/problem\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text.length === 0) {\n        return null;\n    }\n\n    const md5 = crypto.createHash('md5');\n    md5.update(text);\n\n    return md5.digest('hex');\n};\n\nexport default stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n    let digits = [];\n    for (let i = a; i <= b; i++) {\n        digits.push(i);\n    }\n    return digits;\n};\n\nconst test = () => {\n    let a = 9, b = 9;\n    let result = generateIntegers(a, b);\n    let expected = [];\n    expected.push(9);\n    expected.push(9);\n    console.log(\"generateIntegers(\", a, \", \", b, \") => \", result);\n    console.log(\"expected:\", expected);\n};\n\ntest();\n<|endoftext|>"}
