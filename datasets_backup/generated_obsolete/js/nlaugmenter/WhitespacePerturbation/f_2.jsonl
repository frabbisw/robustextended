{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements2 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements3 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements4 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements5 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements6 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements7 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements8 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements9 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements10 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements11 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements12 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements13 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements14 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements15 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements16 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements17 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements18 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements19 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements20 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements21 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements22 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements23 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements24 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements25 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements26 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements27 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements28 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements29 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n\nconst hasNearElements30 = (numbers, threshold) => {\n  const diff = Math.abs(numbers[0] - numbers[1]);\n  return diff <= threshold;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n    const parenStack = [];\n    const parens = paren_string.split('(');\n    const openBrackets = parens.length - 1;\n    parenStack.push(openBrackets);\n    for (let i = 0; i < parens.length; i++) {\n        parenStack.push(parens[i]);\n        if (parens[i] === '(') {\n            parenStack.push(1);\n        } else if (parens[i] === ')') {\n            parenStack.pop();\n            if (parenStack[parenStack.length - 1] === 1) {\n                parenStack.pop();\n            }\n        }\n    }\n    return parenStack.slice(0);\n}\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hos e i n the string tring and return the list of strings.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateGroups('( ) (( )) (( )( ))')\n  ['()', '()()', '()()()', '()()()()']\n  */\nconst separateGroups = (paren_string) => {\n    const parenStack = [];\n    const parens = paren_string.split('(');\n    const openBrackets = parens.length - 1;\n    parenStack.push(openBrackets);\n    for (let i = 0; i < parens.length; i++) {\n        parenStack.push(parens[i]);\n        if (parens[i] === '(') {\n            parenStack.push(1);\n        } else if (parens[i] === ')') {\n            parenStack.pop();\n            if (parenStack[parenStack.length - 1] === 1) {\n                parenStack.pop();\n            }\n        }\n    }\n    return parenStack.slice(0);\n}\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal is to\n  determine wheter or not the string is balanced.\n  >>> balanced(\")((()()(()))(())\")\n  true\n  >>> balanced(\"()((()()()())\")\n  true\n  >>> balanced(\"()(())\")\n  false\n  */\nconst balanced = (paren_string) => {\n    const parenStack = [];\n    const parens = paren_string.split('(');\n    const openBrackets = parens.length - 1;\n    parenStack.push(openBrackets);\n    for (let i = 0; i < parens.length; i++) {\n        parenStack.push(parens[i]);\n        if (parens[i] === '(') {\n            parenStack.push(1);\n        } else if (parens[i] === ')') {\n            parenStack.pop();\n            if (parenStack[parenStack.length - 1] === 1) {\n                parenStack.pop();\n            }\n        }\n    }\n    if (parenStack.length === 1) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst removeBraces = (paren_string) => {\n    const parenStack = [];\n    const parens = paren_string.split('(');\n    const openBrackets = parens.length - 1;\n    parenStack.push(openBrackets);\n    for (let i = 0; i < parens.length; i++) {\n        parenStack.push(parens[i]);\n        if (parens[i] === '(') {\n            parenStack.push(1);\n        } else if (parens[i] === ')') {\n            parenStack.pop();\n            if (parenStack[parenStack.length - 1] === 1) {\n                parenStack.pop();\n            }\n        }\n    }\n    return parenStack.slice(0);\n}\n\nconst parensToString = (paren_string) => {\n    const parenStack = [];\n    const parens = paren_string.split('(');\n    const openBrackets = parens.length - 1;\n    parenStack.push(openBrackets);\n    for (let i = 0; i < parens.length; i++) {\n        parenStack.push(parens[i]);\n        if (parens[i] === '(') {\n            parenStack.push(1);\n        } else if (parens[i] === ')') {\n            parenStack.pop();\n            if (parenStack[parenStack.length - 1] === 1) {\n                parenStack.pop();\n            }\n        }\n    }\n    return parenStack.join(' ');\n}\n\nconst parensToStringWithSpaces = (paren_string) => {\n    const parenStack = [];\n    const parens = paren_string.split('(');\n    const openBrackets = parens.length - 1;\n    parenStack.push(openBrackets);\n    for (let i = 0; i < parens.length; i++) {\n        parenStack.push(parens[i]);\n        if (parens[i] === '(') {\n            parenStack.push(1);\n        } else if (parens[i] === ')') {\n            parenStack.pop();\n            if (parenStack[parenStack.length - 1] === 1) {\n                parenStack.pop();\n            }\n        }\n    }\n    return parenStack.join('  ');\n}\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal is to\n  "}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  if (number > 1) {\n    let remainder = number % 1;\n    return Math.floor(number);\n  }\n  return number;\n};\n\nexport { truncateNumber };\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const sum = operations.reduce((accumulator, current) => accumulator + current, 0)\n    return sum < 0\n}\n\nexport default belowZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const abs = []\n  const mean = numbers.reduce((acc, number) => {\n    return acc + number\n  }, 0) / numbers.length\n  numbers.forEach(number => {\n    abs.push(Math.abs(number - mean))\n  })\n  return Math.mean(abs)\n}\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = (numbers.map(number => {\n    return Math.pow(number - meanAbsoluteDeviation(numbers), 2)\n  }))\n  return Math.sqrt(variance.reduce((acc, element) => {\n    return acc + element\n  }, 0) / numbers.length)\n}\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst skewness = (numbers) => {\n  const meanAbsoluteDeviation = meanAbsoluteDeviation(numbers)\n  const variance = (numbers.map(number => {\n    return Math.pow(number - meanAbsoluteDeviation, 2)\n  }))\n  const meanVariance = variance.reduce((acc, element) => {\n    return acc + element\n  }, 0)\n  const stdDev = Math.sqrt(meanVariance)\n  const meanDev = meanAbsoluteDeviation\n  const n = numbers.length\n  const meanDevDev = Math.pow(meanDev - meanDev, 2)\n  const meanDevDevDev = Math.pow(meanDevDev - meanDevDev, 2)\n  return (n / (n - 1)) * (meanDevDevDev / (meanDevDev * stdDev * stdDev))\n}\n\nconst data = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nconsole.log('The Mean Absolute Deviation of the data is'+ meanAbsoluteDeviation(data))\nconsole.log('The Standard Deviation of the data is'+ standardDeviation(data))\nconsole.log('The Skewness of the data is'+ skewness(data))<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers)) return numbers\n  if (numbers.length === 0) return []\n  if (numbers.length === 1) return numbers\n  return [...numbers.slice(0, -1), delimeter,...numbers.slice(numbers.length - 1)]\n}\n\n/**\n  * Find the maximum number in an array of numbers\n  * @param {array} input\n  * @returns {number}\n  */\nconst max = (input) => {\n  const {length} = input\n  const output = input.reduce((prev, current) => Math.max(prev, current), 0)\n  return output\n}\n\n/**\n  * Find the minimum number in an array of numbers\n  * @param {array} input\n  * @returns {number}\n  */\nconst min = (input) => {\n  const {length} = input\n  const output = input.reduce((prev, current) => Math.min(prev, current), 0)\n  return output\n}\n\n/**\n  * Calculate the sum of all the numbers in an array\n  * @param {array} input\n  * @returns {number}\n  */\nconst sum = (input) => {\n  const {length} = input\n  const output = input.reduce((prev, current) => prev + current, 0)\n  return output\n}\n\n/**\n  * Calculate the average of all the numbers in an array\n  * @param {array} input\n  * @returns {number}\n  */\nconst avg = (input) => {\n  const {length} = input\n  return sum(input) / length\n}\n\n/**\n  * Calculate the mean of all the numbers in an array\n  * @param {array} input\n  * @returns {number}\n  */\nconst mean = (input) => {\n  const {length} = input\n  return avg(input)\n}\n\n/**\n  * Calculate the median of an array\n  * @param {array} input\n  * @returns {number}\n  */\nconst median = (input) => {\n  const length = input.length\n  if (length === 0) return undefined\n  if (length === 1) return input[0]\n  const half = Math.floor(length / 2)\n  if (length % 2 === 1) return input[half]\n  return (input[half - 1] + input[half]) / 2\n}\n\n/**\n  * Calculate the mode of an array\n  * @param {array} input\n  * @returns {number}\n  */\nconst mode = (input) => {\n  const mode = {}\n  const {length} = input\n  if (length === 0) return undefined\n  input.forEach(item => {\n    const itemCount = mode[item] = (mode[item] || 0) + 1\n    if (itemCount > 1) return\n    mode[item] = 1\n  })\n  const maxCount = max(Object.keys(mode).map(key => mode[key]))\n  const maxCountIndex = Object.keys(mode).find(key => mode[key] === maxCount)\n  return input[maxCountIndex]\n}\n\nmodule.exports = {\n  intersperse,\n  max,\n  min,\n  sum,\n  avg,\n  mean,\n  median,\n  mode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let paren_string_arr = paren_string.split('').filter(x => x!=='');\n  let nested_paren_level = 0;\n  for (let i = 0; i < paren_string_arr.length; i++) {\n    if (paren_string_arr[i] === '(') {\n      nested_paren_level++;\n    }\n    if (paren_string_arr[i] === ')') {\n      nested_paren_level--;\n    }\n  }\n  return nested_paren_level;\n};\n\n/**\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\n/**\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\n/**\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\n\n/**\n  >>> parseNestedParens('()')\n  [0]\n  */\n\n/**\n  >>> parseNestedParens('())')\n  [1]\n  */\n\n/**\n  >>> parseNestedParens('()())')\n  [2]\n  */\n\n/**\n  >>> parseNestedParens('(())')\n  [2]\n  */\n\n/**\n  >>> parseNestedParens('((()))')\n  [1]\n  */\n\n/**\n  >>> parseNestedParens('((())())')\n  [1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()())')\n  [0, 1]\n  */\n\n/**\n  >>> parseNestedParens('()(())')\n  [0, 1]\n  */\n\n/**\n  >>> parseNestedParens('()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()())')\n  [0, 1, 2]\n  */\n\n/**\n  >>> parseNestedParens('()()()()(())')\n  [0, 1, 2]\n  */\n\n/**\n"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const substrings = strings.filter((s) => s.includes(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that start with given substring\nconst filterBySubstringStart = (strings, substring) => {\n  const substrings = strings.filter((s) => s.startsWith(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContains = (strings, substring) => {\n  const substrings = strings.filter((s) => s.includes(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringEndsWith = (strings, substring) => {\n  const substrings = strings.filter((s) => s.endsWith(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringStartsWith = (strings, substring) => {\n  const substrings = strings.filter((s) => s.startsWith(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringLength = (strings, length) => {\n  const substrings = strings.filter((s) => s.length === length);\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCaseSensitive = (strings, substring) => {\n  const substrings = strings.filter((s) => s.toLowerCase().includes(substring.toLowerCase()));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCaseInsensitive = (strings, substring) => {\n  const substrings = strings.filter((s) => s.toLowerCase().includes(substring.toLowerCase()));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCount = (strings, count) => {\n  const substrings = strings.filter((s) => s.match(new RegExp(`(?=.*${count})`, 'g')));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCaseSensitiveRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCaseInsensitiveRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringLengthRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCaseSensitiveRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCaseInsensitiveRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringCountRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContainsAny = (strings, substring) => {\n  const substrings = strings.filter((s) => s.includes(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContainsAll = (strings, substring) => {\n  const substrings = strings.filter((s) => s.includes(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContainsNone = (strings, substring) => {\n  const substrings = strings.filter((s) =>!s.includes(substring));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContainsAllIgnoreCase = (strings, substring) => {\n  const substrings = strings.filter((s) => s.toLowerCase().includes(substring.toLowerCase()));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContainsNoneIgnoreCase = (strings, substring) => {\n  const substrings = strings.filter((s) =>!s.toLowerCase().includes(substring.toLowerCase()));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContainsAllIgnoreCaseRegex = (strings, regex) => {\n  const substrings = strings.filter((s) => s.toLowerCase().match(regex));\n  return substrings;\n};\n\n// Filter a list of strings only for those that contain given substring\nconst filterBySubstringContainsNoneIgnoreCaseRegex = (strings, regex) => {\n  const substrings = strings.filter((s) =>!s."}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n    if (!numbers ||!numbers.length) {\n        return (0, 1);\n    }\n\n    let n = numbers.length;\n    let sum = 0;\n    let product = 1;\n\n    for (let i = 0; i < n; i++) {\n        sum += numbers[i];\n    }\n\n    for (let i = 0; i < n; i++) {\n        product *= numbers[i];\n    }\n\n    return (sum, product);\n};\n\nmodule.exports = sumProduct;<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  return numbers.reduce((max, number) => {\n    if (number > max) {\n      return number\n    } else {\n      return max\n    }\n  }, 0)\n}\n\n/**\n  * From a given list of numbers, generate a list of rolling minimum element found until given moment\n  * in the sequence.\n  * @param {Array} numbers - Array of numbers to be rolled.\n  * @return {Array} - Array of rolling minimum element found until given moment in the sequence.\n  */\nconst rollingMin = (numbers) => {\n  return numbers.reduce((min, number) => {\n    if (number < min) {\n      return number\n    } else {\n      return min\n    }\n  }, 0)\n}\n\n/**\n  * Given a list of numbers, calculate the sum of all of them.\n  * @param {Array} numbers - Array of numbers to be summed.\n  * @return {Number} - Sum of all of the elements in the given array.\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((sum, number) => {\n    return sum + number\n  }, 0)\n}\n\nmodule.exports = {\n  rollingMax,\n  rollingMin,\n  sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const max_str = str => str.split('').re verse ().join('');\n  const max_lng = str => str.length;\n  const str = string.split('').re verse ().join('');\n  let str_lng = str.length;\n  let str_arr = [];\n  while (str_lng > 0) {\n    str_arr = str.slice(0, -str_lng + 1).concat(str.slice(str_lng - 1));\n    str_lng = str_arr.length;\n    if (onst(str_arr)) {\n      return max_str(str_arr);\n    }\n  }\n}\n/* Test the above function */\ntest('Test onst isPalindrome', () => {\n  console.log(makePalindrome('cat'));\n  console.log(makePalindrome('cata'));\n  console.log(makePalindrome('c'));\n});\n/* Find the longest string of a palindrome */\nconst makePalindrome_lng = str => str.split('').re verse ().join('');\n/* Append a string at the end of the given string that is the  reversed of itself */\nconst rev = (string) => {\n  const r = string.slice(0, -1).concat(string.slice(1));\n  return r;\n}\nconst rev_lng = (str) => {\n  const r = str.slice(0, -1).concat(str.slice(1));\n  return r.length;\n}\nconst rev_arr = str => str.split('').re verse ().join('');\nconst rev_str = (str) => str.split('').re verse ().join('');\n/* Test the above function */\ntest('Test rev_lng', () => {\n  console.log(rev_lng('cat'));\n  console.log(rev_lng('cata'));\n  console.log(rev_lng('c'));\n});\ntest('Test rev_arr', () => {\n  console.log(rev_arr('cat'));\n  console.log(rev_arr('cata'));\n  console.log(rev_arr('c'));\n});\ntest('Test rev_str', () => {\n  console.log(rev_str('cat'));\n  console.log(rev_str('cata'));\n  console.log(rev_str('c'));\n});\n\n/* Find the longest palindrome string that can be made of \n  a suplied string\n  Algorithm idea is simp le:\n  - Find the longest prefix of the given string that is a palindrome.\n  - Appendto the end of the string that comes aftre the palindromic suffix.\n  - Make the next palindrome string that is a rev of the string given.\n  >>> makePalindrome_lng('')\n  0\n  >>> makePalindrome_lng('cat')\n  1\n  >>> makePalindrome_lng('cata')\n  2\n  >>> makePalindrome_lng('c')\n  1\n  */\nconst makePalindrome_lng = (str) => {\n  const max_str = str => str.split('').re verse ().join('');\n  const max_lng = str => str.length;\n  const str = string.split('').re verse ().join('');\n  let str_lng = str.length;\n  let str_arr = [];\n  while (str_lng > 0) {\n    str_arr = str.slice(0, -str_lng + 1).concat(str.slice(str_lng - 1));\n    str_lng = str_arr.length;\n    if (onst(str_arr)) {\n      return max_str(str_arr);\n    }\n  }\n}\n/* Test the above function */\ntest('Test onst_lng', () => {\n  console.log(makePalindrome_lng('cat'));\n  console.log(makePalindrome_lng('cata'));\n  console.log(makePalindrome_lng('c'));\n});\n/* Find the longest string of a palindrome that can be made of a suppl ied string */\nconst makePalindrome_lng_str = str => str.split('').re verse ().join('');\n/* Append a string at the end of the given string that is the  reversed of itself */\nconst rev = (str) => {\n  const r = str.slice(0, -1).concat(str.slice(1));\n  return r;\n}\nconst rev_lng = (str) => {\n  const r = str.slice(0, -1).concat(str.slice(1));\n  return r.length;\n}\nconst rev_arr = str => str.split('').re verse ().join('');\nconst rev_str = (str) => str.split('').re verse ().join('');\n/* Test the above function */\ntest('Test rev_lng', () => {\n  console.log(rev_lng('cat'));\n  console.log(rev_lng('cata'));\n  console.log(rev_lng('c'));\n});\ntest('Test rev_arr', () => {\n  console.log(rev_arr('cat'));\n  console.log(rev_arr('cata'));\n  console.log(rev_arr('c'));\n});\ntest('Test rev_str', () => {\n  console.log(rev_str('"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Two strings must be same length');\n  }\n  const str = new Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    str[i] = a[i] ^ b[i];\n  }\n  return str.join('');\n};\n\n// console.log(stringXor('010', '110'));\n// console.log(stringXor('110', '010'));\n// console.log(stringXor('0011', '0110'));\n// console.log(stringXor('0010', '1010'));\n// console.log(stringXor('0100', '0010'));\n// console.log(stringXor('0000', '1010'));\n// console.log(stringXor('1100', '0010'));\n// console.log(stringXor('1000', '0100'));\n// console.log(stringXor('0110', '0010'));\n// console.log(stringXor('1010', '0100'));\n// console.log(stringXor('0010', '0110'));\n// console.log(stringXor('0010', '1100'));\n// console.log(stringXor('0100', '1100'));\n// console.log(stringXor('0000', '0110'));\n// console.log(stringXor('0000', '1100'));\n// console.log(stringXor('0100', '0110'));\n// console.log(stringXor('1100', '0110'));\n// console.log(stringXor('1000', '0000'));\n// console.log(stringXor('0110', '0000'));\n// console.log(stringXor('1100', '0000'));\n// console.log(stringXor('0010', '1000'));\n// console.log(stringXor('0100', '1000'));\n// console.log(stringXor('0000', '1000'));\n// console.log(stringXor('0100', '1000'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0100', '0010'));\n// console.log(stringXor('0000', '0100'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0100', '0010'));\n// console.log(stringXor('0000', '0100'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0100', '0100'));\n// console.log(stringXor('0000', '0100'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0100', '0010'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010'));\n// console.log(stringXor('0010', '0100'));\n// console.log(stringXor('0000', '0010"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) {\n    return null\n  }\n\n  let len = 0\n  let max = 0\n  let longest = ''\n  strings.forEach(str => {\n    if (str.length > max) {\n      max = str.length\n      longest = str\n    }\n  })\n  return longest\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    if (a < b) {\n        return greatestCommonDivisor(b, a);\n    }\n\n    let gcd = b;\n\n    while (b!== 0) {\n        let b_rem = a % b;\n        a = b;\n        b = b_rem;\n    }\n\n    return a;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = [];\n  let prefix = string.slice(0, 1);\n  while (prefix.length < string.length) {\n    prefixes.push(prefix);\n    prefix = prefix + string.slice(0, prefix.length + 1);\n  }\n  return prefixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes2 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c']\n  */\nconst allSuffixes3 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes4 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes5 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes6 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes7 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes8 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes9 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n/*\n  Return list of all suffixes from sho rtest  to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b']\n  */\nconst allSuffixes10 = (string) => {\n  const suffixes = [];\n  let suffix = string.slice(string.length - 1, string.length);\n  while (suffix.length > 0) {\n    suffixes.push(suffix);\n    suffix = string.slice(string.length - suffix.length - 1, string.length);\n  }\n  return suffixes;\n};\n\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let i = 0;\n  return `${Array(n).join(' ')}`;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let i = 0;\n  return `${Array(n).join(' ')}`;\n};\n\n/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let i = 0;\n  return `${Array(n).join(' ')}`;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let count = 0;\n  let seen = {};\n  for (let char of string) {\n    if (!seen[char.toLowerCase()]) {\n      count++;\n      seen[char.toLowerCase()] = true;\n    }\n  }\n  return count;\n};\n\nexport default countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = []\n  for (let i = 0; i < music_string.length; i++) {\n    const note = music_string[i]\n    if (note === 'o') {\n      notes.push(1)\n    } else if (note === 'o|') {\n      notes.push(2)\n    } else if (note === '.') {\n      notes.push(3)\n    } else if (note === '|') {\n      notes.push(4)\n    }\n  }\n  return notes\n}\n\nconst test_parseMusic = (music_string) => {\n  const notes = parseMusic(music_string)\n  const result = notes.map(number => number * 4)\n  console.log(result)\n}\n\nconst test_parseMusic2 = () => {\n  const notes = parseMusic(music_string)\n  const result = notes.map(number => number * 4)\n  console.log(result)\n}\n\ntest_parseMusic(music_string)\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  let index = 0;\n  while (index < string.length) {\n    if (string[index] === substring[0]) {\n      count++;\n      index += 1;\n    } else {\n      index += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Find a substring within a string\n  >>> getSubstring('abc', 2)\n  'bc'\n  >>> getSubstring('abc', 0)\n  ''\n  >>> getSubstring('abc', -2)\n  ''\n  >>> getSubstring('abc', 2, 3)\n  'c'\n  >>> getSubstring('abc', 2, 3)\n  'c'\n  */\nconst getSubstring = (string, index, count) => {\n  if (index < 0) {\n    return '';\n  }\n  if (index + count > string.length) {\n    return string.slice(index);\n  }\n  return string.slice(index, index + count);\n};\n\n/*\n  Find a substring within a string\n  >>> containsSubstring('abc', 'ab')\n  True\n  >>> containsSubstring('abc', 'de')\n  False\n  >>> containsSubstring('abc', '', 3)\n  True\n  >>> containsSubstring('abc', '', 3)\n  True\n  */\nconst containsSubstring = (string, substring) => {\n  return string.indexOf(substring) >= 0;\n};\n\n/*\n  Find a substring within a string\n  >>> getAllSubstrings('abc', 2)\n  ['ab', 'bc']\n  >>> getAllSubstrings('abc', 0)\n  []\n  >>> getAllSubstrings('abc', -2)\n  []\n  >>> getAllSubstrings('abc', 2, 3)\n  ['a', 'b', 'c']\n  >>> getAllSubstrings('abc', 2, 3)\n  ['a', 'b', 'c']\n  */\nconst getAllSubstrings = (string, index, count) => {\n  let start = index;\n  let end = start + count;\n  if (index < 0) {\n    return [];\n  }\n  if (end > string.length) {\n    return [string.slice(start)];\n  }\n  let allSubstrings = [];\n  while (start < string.length) {\n    allSubstrings.push(string.slice(start, end));\n    start += 1;\n    end += 1;\n  }\n  return allSubstrings;\n};\n\n/*\n  Find a substring within a string\n  >>> hasAllSubstrings('abc', ['ab', 'bc'])\n  True\n  >>> hasAllSubstrings('abc', ['ab', 'de'])\n  False\n  >>> hasAllSubstrings('abc', ['', '', '', '', '', ''], 3)\n  True\n  >>> hasAllSubstrings('abc', ['', '', '', '', '', ''], 3)\n  True\n  */\nconst hasAllSubstrings = (string, substring) => {\n  return getAllSubstrings(string, 0, substring.length).every(substring => containsSubstring(string, substring));\n};\n\n/*\n  Find a substring within a string\n  >>> hasAnySubstring('abc', ['ab', 'bc'])\n  True\n  >>> hasAnySubstring('abc', ['ab', 'de'])\n  True\n  >>> hasAnySubstring('abc', ['', '', '', '', '', ''], 3)\n  True\n  >>> hasAnySubstring('abc', ['', '', '', '', '', ''], 3)\n  True\n  */\nconst hasAnySubstring = (string, substring) => {\n  return getAllSubstrings(string, 0, substring.length).find(substring => containsSubstring(string, substring));\n};\n\n/*\n  Find a substring within a string\n  >>> isSubstring('abc', 'ab')\n  True\n  >>> isSubstring('abc', 'de')\n  False\n  >>> isSubstring('abc', '', 3)\n  True\n  >>> isSubstring('abc', '', 3)\n  True\n  */\nconst isSubstring = (string, substring) => {\n  return containsSubstring(string, substring);\n};\n\n/*\n  Find a substring within a string\n  >>> isNotSubstring('abc', 'ab')\n  True\n  >>> isNotSubstring('abc', 'de')\n  True\n  >>> isNotSubstring('abc', '', 3)\n  False\n  >>> isNotSubstring('abc', '', 3)\n  False\n  */\nconst isNotSubstring = (string, substring) => {\n  return!containsSubstring(string, substring);\n};\n\n/*\n  Find a substring within a string\n  >>> isLastSubstring('abc', 'abc')\n  True\n  >>> isLastSubstring('abc', 'bcd')\n  False\n  >>> isLastSubstring('abc', '', 3)\n  False\n  >>> isLastSubstring('abc', '', 3)\n  False\n  */\nconst isLastSubstring = (string, substring) => {\n  return getLastSubstring(string, substring) === substring;\n};\n\n/*\n  Find a substring within a string\n  >>> isFirstSubstring('abc', 'abc')\n  True\n  >>> isFirstSubstring('abc', 'bcd')\n  False\n  >>> isFirstSubstring('abc', '', 3)\n  False\n  >>> isFirstSubstring('abc', '', 3)\n  False\n  */\nconst isFirstSubstring = (string, substring) => {\n  return getFirstSubstring(string, substring) === substring;\n};\n\n/*\n  Find a substring within a string\n  >>> getFirstSubstring('abc', 'ab')\n  'ab'\n  >>> getFirstSubstring('abc', 'de')\n  ''\n  >>> getFirstSubstring('abc', '', 3)\n  ''\n  >>> getFirstSubstring('abc', '', 3)\n  ''\n  */\nconst getFirstSubstring = ("}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  // var sorted = sortNums(numbers);\n  return numbers;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  if (numbers.length < 2) {\n    return [numbers[0], numbers[0]]\n  }\n  let maxDiff = numbers[0] - numbers[1]\n  let minDiff = numbers[0] - numbers[1]\n  let index = 0\n  let index2 = 1\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] - numbers[index] < minDiff) {\n      minDiff = numbers[i] - numbers[index]\n      index = i\n    }\n    if (numbers[i] - numbers[index2] > maxDiff) {\n      maxDiff = numbers[i] - numbers[index2]\n      index2 = i\n    }\n  }\n  return [numbers[index], numbers[index2]]\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElementsByFunc = (numbers, func) => {\n  if (numbers.length < 2) {\n    return [numbers[0], numbers[0]]\n  }\n  let maxDiff = func(numbers[0], numbers[1])\n  let minDiff = func(numbers[0], numbers[1])\n  let index = 0\n  let index2 = 1\n  for (let i = 1; i < numbers.length; i++) {\n    if (func(numbers[i], numbers[index]) < minDiff) {\n      minDiff = func(numbers[i], numbers[index])\n      index = i\n    }\n    if (func(numbers[i], numbers[index2]) > maxDiff) {\n      maxDiff = func(numbers[i], numbers[index2])\n      index2 = i\n    }\n  }\n  return [numbers[index], numbers[index2]]\n}\n\n/*\n  >>> findClosestElementsByFunc([1.0, 2.0, 3.0, 4.0, 5.0, 2.2], Math.abs)\n  (2.0, 2.2)\n  >>> findClosestElementsByFunc([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], Math.abs)\n  (2.0, 2.0)\n  */\nconst findClosestElementsByFunc2 = (numbers, func) => {\n  if (numbers.length < 2) {\n    return [numbers[0], numbers[0]]\n  }\n  let maxDiff = func(numbers[0], numbers[1])\n  let minDiff = func(numbers[0], numbers[1])\n  let index = 0\n  let index2 = 1\n  for (let i = 1; i < numbers.length; i++) {\n    if (func(numbers[i], numbers[index]) < minDiff) {\n      minDiff = func(numbers[i], numbers[index])\n      index = i\n    }\n    if (func(numbers[i], numbers[index2]) > maxDiff) {\n      maxDiff = func(numbers[i], numbers[index2])\n      index2 = i\n    }\n  }\n  return [numbers[index], numbers[index2]]\n}\n\nconst findClosestElements3 = (numbers) => {\n  const func = (x, y) => {\n    return x - y\n  }\n  return findClosestElementsByFunc2(numbers, func)\n}\n\nconst findClosestElements4 = (numbers) => {\n  const func = (x, y) => {\n    return x - y\n  }\n  return findClosestElementsByFunc(numbers, func)\n}\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements5 = (numbers) => {\n  const func = (x, y) => {\n    return x - y\n  }\n  return findClosestElementsByFunc(numbers, func)\n}\n\nconst findClosestElements6 = (numbers) => {\n  const func = (x, y) => {\n    return x - y\n  }\n  return findClosestElementsByFunc2(numbers, func)\n}\n\nmodule.exports = {\n  findClosestElements: findClosestElements,\n  findClosestElementsByFunc: findClosestElementsByFunc,\n  findClosestElementsByFunc2: findClosestElementsByFunc2,\n  findClosestElements3: findClosestElements3,\n  findClosestElements4: findClosestElements4,\n  findClosestElements5: findClosestElements5,\n  findClosestElements6: findClosestElements6\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let min = Number.MAX_SAFE_INTEGER,\n    max = Number.MIN_SAFE_INTEGER,\n    newNumbers = [];\n\n  numbers.forEach((num) => {\n    if (num > max) {\n      max = num;\n    }\n    if (num < min) {\n      min = num;\n    }\n  });\n\n  let diff = max - min;\n\n  numbers.forEach((num) => {\n    newNumbers.push(num - min);\n  });\n\n  return newNumbers;\n};\n\n/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become 0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit2 = (numbers) => {\n  let min = Number.MAX_SAFE_INTEGER,\n    max = Number.MIN_SAFE_INTEGER,\n    newNumbers = [];\n\n  numbers.forEach((num) => {\n    if (num > max) {\n      max = num;\n    }\n    if (num < min) {\n      min = num;\n    }\n  });\n\n  let diff = max - min;\n\n  numbers.forEach((num) => {\n    newNumbers.push(num - min);\n  });\n\n  return newNumbers;\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number')\n}\n\n/**\n  * Returns true if every element of the list is an even number\n  *\n  * @param {Array} values List of numbers\n  * @returns {boolean} True if every element is an even number\n  *\n  * @example\n  *\n  * ```js\n  * filterEvenNumbers([1, 2, 3, 4, 5])\n  * //=> true\n  * filterEvenNumbers([1, 2, 3, 4, 5, 6])\n  * //=> false\n  * ```\n  *\n  */\nconst filterEvenNumbers = (values) => {\n  return filterIntegers(values).every((v) => v % 2 === 0)\n}\n\n/**\n  * Returns true if every element of the list is an odd number\n  *\n  * @param {Array} values List of numbers\n  * @returns {boolean} True if every element is an odd number\n  *\n  * @example\n  *\n  * ```js\n  * filterOddNumbers([1, 2, 3, 4, 5])\n  * //=> true\n  * filterOddNumbers([1, 2, 3, 4, 5, 6])\n  * //=> false\n  * ```\n  *\n  */\nconst filterOddNumbers = (values) => {\n  return filterIntegers(values).every((v) => v % 2!== 0)\n}\n\n/**\n  * Returns true if every element of the list is a power of two\n  *\n  * @param {Array} values List of numbers\n  * @returns {boolean} True if every element is a power of two\n  *\n  * @example\n  *\n  * ```js\n  * filterPowersOfTwo([1, 2, 4, 8])\n  * //=> true\n  * filterPowersOfTwo([1, 2, 3, 4, 5, 6, 7])\n  * //=> false\n  * ```\n  *\n  */\nconst filterPowersOfTwo = (values) => {\n  return filterIntegers(values).every((v) => Math.log(v) % 1 === 0)\n}\n\n/**\n  * Returns true if every element of the list is a multiple of three\n  *\n  * @param {Array} values List of numbers\n  * @returns {boolean} True if every element is a multiple of three\n  *\n  * @example\n  *\n  * ```js\n  * filterTriples([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  * //=> true\n  * filterTriples([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  * //=> false\n  * ```\n  *\n  */\nconst filterTriples = (values) => {\n  return filterIntegers(values).every((v) => v % 3 === 0)\n}\n\n/**\n  * Returns true if every element of the list is a multiple of five\n  *\n  * @param {Array} values List of numbers\n  * @returns {boolean} True if every element is a multiple of five\n  *\n  * @example\n  *\n  * ```js\n  * filterFives([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  * //=> true\n  * filterFives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  * //=> false\n  * ```\n  *\n  */\nconst filterFives = (values) => {\n  return filterIntegers(values).every((v) => v % 5 === 0)\n}\n\n/**\n  * Returns true if every element of the list is a multiple of 7\n  *\n  * @param {Array} values List of numbers\n  * @returns {boolean} True if every element is a multiple of 7\n  *\n  * @example\n  *\n  * ```js\n  * filterSevens([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  * //=> true\n  * filterSevens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  * //=> false\n  * ```\n  *\n  */\nconst filterSevens = (values) => {\n  return filterIntegers(values).every((v) => v % 7 === 0)\n}\n\nexport default {\n  filterIntegers,\n  filterPowersOfTwo,\n  filterFives,\n  filterTriples,\n  filterSevens\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n  * Return given string in lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase()\n}\n\n/**\n  * Return given string in upper case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase()\n}\n\n/**\n  * Return given string with first character upper case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toUpperFirst = (string) => {\n  return string.toUpperCase()[0] + string.toLowerCase()[1:]\n}\n\n/**\n  * Return given string with first character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toLowerFirst = (string) => {\n  return string.toLowerCase()[0] + string.toUpperCase()[1:]\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toCapitalized = (string) => {\n  return toUpperFirst(toLowerCase(string))\n}\n\n/**\n  * Return given string with first character lower case and last character upper case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toUncapitalized = (string) => {\n  return toLowerFirst(toUpperCase(string))\n}\n\n/**\n  * Return given string with first character upper case and last character upper case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toCapitalizedFirst = (string) => {\n  return toCapitalized(toUpperFirst(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character lower case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toUncapitalizedFirst = (string) => {\n  return toUncapitalized(toUpperFirst(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toCamelized = (string) => {\n  return toCapitalizedFirst(toUpperFirst(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character lower case and last character upper case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toSnakeCase = (string) => {\n  return toCamelized(toUpperFirst(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character lower case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toPascalCase = (string) => {\n  return toCapitalizedFirst(toUpperCase(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toCamelCase = (string) => {\n  return toSnakeCase(toUpperCase(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toTitleCase = (string) => {\n  return toCamelCase(toUpperCase(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toHyphenated = (string) => {\n  return toTitleCase(toUpperCase(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toKebabCase = (string) => {\n  return toHyphenated(toUpperCase(toLowerCase(string)))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toSlug = (string) => {\n  return toKebabCase(toLowerCase(string))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toHumanized = (string) => {\n  return toSlug(toLowerCase(string))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toSwapedCase = (string) => {\n  return toUpperCase(toLowerCase(string))\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toCapitalizeWords = (string) => {\n  return string.replace(/\\b([a-z])([A-Z])/g, '$1 $2').toLowerCase()\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n  * @param {string} string\n  * @return {string}\n  */\nconst toUncapitalizeWords = (string) => {\n  return string.replace(/\\b([A-Z])([a-z])/g, '$1 $2').toUpperCase()\n}\n\n/**\n  * Return given string with first character upper case and last character lower case\n  *\n"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  if(n < 2)\n    return 1;\n\n  const nums = [];\n  for(let i = 1; i < n; i++)\n    nums.push(i);\n\n  for(let i = 1; i < n; i++)\n    if(nums.every( (n) => n % i === 0))\n      return i;\n  return 1;\n};\n\n/*\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor2 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= Math.sqrt(n); i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor2(15)\n  5\n  */\nconst largestDivisor3 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= Math.sqrt(n); i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor3(15)\n  5\n  */\nconst largestDivisor4 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor4(15)\n  5\n  */\nconst largestDivisor5 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor5(15)\n  5\n  */\nconst largestDivisor6 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor6(15)\n  5\n  */\nconst largestDivisor7 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor7(15)\n  5\n  */\nconst largestDivisor8 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor8(15)\n  5\n  */\nconst largestDivisor9 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor9(15)\n  5\n  */\nconst largestDivisor10 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor10(15)\n  5\n  */\nconst largestDivisor11 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor11(15)\n  5\n  */\nconst largestDivisor12 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor12(15)\n  5\n  */\nconst largestDivisor13 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n; i++)\n    if(n % i === 0)\n      divisors.push(i);\n\n  const max = Math.max(...divisors);\n  return max;\n};\n\n/*\n  >>> largestDivisor13(15)\n  5\n  */\nconst largestDivisor14 = (n) => {\n  if(n < 2)\n    return 1;\n\n  const divisors = [];\n  for(let i = 1; i <= n;"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const primes = prime.list(10)\n  const factors = []\n  for (let i = 0; i < n; i++) {\n    const primeFactor = primes.find((p) => p % i === 0)\n    if (primeFactor) {\n      factors.push(primeFactor)\n    }\n  }\n  return factors\n}\n\nconst sum = (a, b) => a + b\n\nconst multiply = (a, b) => a * b\n\nconst product = (a, b) => a * b\n\nconst add = (a, b) => a + b\n\nconst subtract = (a, b) => a - b\n\nconst divide = (a, b) => a / b\n\nconst power = (a, b) => a ** b\n\nconst find = (n, arr) => arr.find((v) => v === n)\n\nconst isPrime = (n) => prime.isPrime(n)\n\nconst findPrime = (n) => prime.findPrime(n)\n\nconst countPrimes = (n) => prime.countPrimes(n)\n\nconst isEven = (n) => n % 2 === 0\n\nconst isOdd = (n) => n % 2!== 0\n\nconst gcd = (a, b) => prime.gcd(a, b)\n\nconst lcm = (a, b) => prime.lcm(a, b)\n\nconst compare = (a, b) => prime.compare(a, b)\n\nconst productOfFactors = (n) => prime.productOfFactors(n)\n\nconst factors = (n) => prime.factors(n)\n\nconst primeFactors = (n) => prime.primeFactors(n)\n\nconst primeFactor = (n) => prime.primeFactor(n)\n\nconst factorsSum = (n) => prime.factorsSum(n)\n\nconst factorizeSum = (n) => prime.factorizeSum(n)\n\nconst factorizeByFactor = (n) => prime.factorizeByFactor(n)\n\nconst primeFactorsSum = (n) => prime.primeFactorsSum(n)\n\nconst isProper = (n) => prime.isProper(n)\n\nconst isComposite = (n) => prime.isComposite(n)\n\nconst isPerfect = (n) => prime.isPerfect(n)\n\nconst isAbundant = (n) => prime.isAbundant(n)\n\nconst isPrimeAbundant = (n) => prime.isPrimeAbundant(n)\n\nconst isAbundantPerfect = (n) => prime.isAbundantPerfect(n)\n\nconst isPerfectAbundant = (n) => prime.isPerfectAbundant(n)\n\nconst isAbundantPrime = (n) => prime.isAbundantPrime(n)\n\nconst isAbundantPrimeAbundant = (n) => prime.isAbundantPrimeAbundant(n)\n\nconst isAbundantPrimePerfect = (n) => prime.isAbundantPrimePerfect(n)\n\nconst isPerfectAbundant = (n) => prime.isPerfectAbundant(n)\n\nconst isPerfectPerfect = (n) => prime.isPerfectPerfect(n)\n\nconst isPerfectPrime = (n) => prime.isPerfectPrime(n)\n\nconst isPerfectPrimeAbundant = (n) => prime.isPerfectPrimeAbundant(n)\n\nconst isPerfectPrimePerfect = (n) => prime.isPerfectPrimePerfect(n)\n\nconst isPerfectPrimePrime = (n) => prime.isPerfectPrimePrime(n)\n\nconst isPerfectPrimePrimePerfect = (n) => prime.isPerfectPrimePerfect(n)\n\nconst isCompositeAbundant = (n) => prime.isCompositeAbundant(n)\n\nconst isCompositeAbundantPerfect = (n) => prime.isCompositeAbundantPerfect(n)\n\nconst isCompositePerfect = (n) => prime.isCompositePerfect(n)\n\nconst isCompositePerfectPerfect = (n) => prime.isCompositePerfectPerfect(n)\n\nconst isCompositePrime = (n) => prime.isCompositePrime(n)\n\nconst isCompositePrimePerfect = (n) => prime.isCompositePrimePerfect(n)\n\nconst isCompositePrimePerfectPerfect = (n) => prime.isCompositePrimePerfectPerfect(n)\n\nconst isPerfectComposite = (n) => prime.isPerfectComposite(n)\n\nconst isPerfectCompositePerfect = (n) => prime.isPerfectCompositePerfect(n)\n\nconst isPerfectCompositePerfectPerfect = (n) => prime.isPerfectCompositePerfectPerfect(n)\n\nconst isPerfectCompositePrime = (n) => prime.isPerfectCompositePrime(n)\n\nconst isPerfectCompositePrimePerfect = (n) => prime.isPerfectCompositePrimePerfect(n)\n\nconst isPerfectCompositePrimePerfectPerfect = (n) => prime.isPerfectCompositePrimePerfectPerfect(n)\n\nconst isCompositePrimePerfect = (n) => prime.isCompositePrimePerfect(n)\n\nconst isCompositePrimePerfectPerfect = (n) => prime.isCompositePrimePerfectPerfect(n)\n\nconst isCompositePrimePerfectPerfectPerfect = (n) => prime.isCompositePrimePerfectPerfectPerfect(n)\n\nconst isPrimePerfect = (n) => prime.isPrimePerfect(n)\n\nconst isPrimePerfectPerfect = (n) => prime.isPrimePerfectPerfect(n)\n\nconst isPrimePerfectPerfectPerfect = (n) => prime.isPrimePerfectPerfectPerfect(n)\n\nconst isPrimePerfectPerfectPerfectPerfect = (n) => prime.isPrimePerfectPerfectPerfectPerfect(n)\n\nconst isPrimePerfectPerfectPerfectPerfectPerfect = (n) => prime.isPrimePerfect"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n    const map = new Map();\n    return numbers.filter(number => {\n        if (map.has(number)) {\n            return false;\n        }\n        map.set(number, true);\n        return true;\n    });\n};\n\n/* Given a list of strings, remove all strings that start with the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeStartOfString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  [\"Hello\", \"World\", \"Hello\", \"World\"]\n  */\nconst removeStartOfString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[0]) === -1;\n    });\n};\n\n/* Given a list of strings, remove all strings that end with the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeEndOfString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  [\"Hello\", \"Hello\"]\n  */\nconst removeEndOfString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[strings.length - 1]) === -1;\n    });\n};\n\n/* Given a list of strings, remove all strings that contain the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeContainsString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  [\"Hello\", \"World\"]\n  */\nconst removeContainsString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[0]) === -1;\n    });\n};\n\n/* Given a list of strings, remove all strings that do not contain the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeDoesNotContainString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  [\"Hello\", \"Hello\"]\n  */\nconst removeDoesNotContainString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[0]) > -1;\n    });\n};\n\n/* Given a list of strings, remove all strings that do not start with the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeDoesNotStartWithString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  [\"World\", \"World\"]\n  */\nconst removeDoesNotStartWithString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[0]) === 0;\n    });\n};\n\n/* Given a list of strings, remove all strings that do not end with the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeDoesNotEndWithString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  [\"Hello\", \"Hello\"]\n  */\nconst removeDoesNotEndWithString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[strings.length - 1]) === 0;\n    });\n};\n\n/* Given a list of strings, remove all strings that contain the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeContainsString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  []\n  */\nconst removeContainsString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[0]) === -1;\n    });\n};\n\n/* Given a list of strings, remove all strings that do not contain the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeDoesNotContainString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  []\n  */\nconst removeDoesNotContainString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[0]) > -1;\n    });\n};\n\n/* Given a list of strings, remove all strings that do not start with the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeDoesNotStartWithString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  []\n  */\nconst removeDoesNotStartWithString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[0]) === 0;\n    });\n};\n\n/* Given a list of strings, remove all strings that do not end with the given string.\n  Keep order of elements left the same as in the input t he inpu t.\n  >>> removeDoesNotEndWithString([\"Hello\", \"World\", \"Hello\", \"World\", \"Hello\"])\n  []\n  */\nconst removeDoesNotEndWithString = (strings) => {\n    return strings.filter(str => {\n        return str.indexOf(strings[strings.length - 1]) === 0;\n    });\n};\n\nmodule.exports = {\n    removeDuplicates,\n    removeStartOfString,\n    removeEndOfString,\n    removeContainsString,\n    removeDoesNotContainString,\n    removeDoesNotStartWithString,\n    removeDoesNotEndWithString,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('').map((letter, index) => {\n    return index % 2 === 0? letter.toUpperCase() : letter.toLowerCase()\n  }).join('')\n}\n\n/*\n  # For a given string, return all characters with a given charcter.\n  >>> allChars('abcdefg', 'f')\n  ['b', 'c', 'd', 'e', 'g']\n  */\nconst allChars = (string, char) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.filter((character, index) => {\n    return character === char\n  })\n}\n\n/*\n  # For a given string, return all characters with a given charcter that appear in order.\n  >>> allCharsOrder('abcdefg', 'f')\n  ['b', 'c', 'd', 'e', 'g']\n  */\nconst allCharsOrder = (string, char) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.filter((character, index) => {\n    return index === stringLength - 1? character === char : character > char\n  })\n}\n\n/*\n  # For a given string, return all characters with a given charcter that appear in reverse order.\n  >>> allCharsRev('abcdefg', 'f')\n  ['g', 'e', 'd', 'c', 'b']\n  */\nconst allCharsRev = (string, char) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.filter((character, index) => {\n    return index === stringLength - 1? character === char : character < char\n  })\n}\n\n/*\n  # For a given string, return all characters with a given charcter that appear in ascending order.\n  >>> allCharsAsc('abcdefg', 'f')\n  ['b', 'c', 'd', 'e', 'f', 'g']\n  */\nconst allCharsAsc = (string, char) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.filter((character, index) => {\n    return index === stringLength - 1? character === char : character >= char\n  })\n}\n\n/*\n  # For a given string, return all characters with a given charcter that appear in descending order.\n  >>> allCharsDesc('abcdefg', 'f')\n  ['g', 'e', 'd', 'c', 'b', 'f']\n  */\nconst allCharsDesc = (string, char) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.filter((character, index) => {\n    return index === stringLength - 1? character === char : character <= char\n  })\n}\n\n/*\n  # Return a string with all the characters in a given string that appear in ascending order.\n  >>> ascChars('abcdefg')\n  'abcdefg'\n  */\nconst ascChars = (string) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.join('')\n}\n\n/*\n  # Return a string with all the characters in a given string that appear in descending order.\n  >>> descChars('abcdefg')\n  'cdefgab'\n  */\nconst descChars = (string) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.reverse().join('')\n}\n\n/*\n  # Return a string with all the characters in a given string that appear in ascending order, in reverse.\n  >>> ascCharsRev('abcdefg')\n  'cdefgab'\n  */\nconst ascCharsRev = (string) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.reverse().join('')\n}\n\n/*\n  # Return a string with all the characters in a given string that appear in descending order, in reverse.\n  >>> descCharsRev('abcdefg')\n  'gfedcba'\n  */\nconst descCharsRev = (string) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.reverse().join('')\n}\n\n/*\n  # Return a string with all the characters in a given string that appear in ascending order, in reverse, in reverse.\n  >>> ascCharsRevRev('abcdefg')\n  'gfedcba'\n  */\nconst ascCharsRevRev = (string) => {\n  const stringLength = string.length\n  const characters = []\n\n  for (let index = 0; index < stringLength; index++) {\n    characters.push(string.charAt(index))\n  }\n\n  return characters.reverse().reverse().join('')\n}\n\n/*\n  # Return a string with all the characters in a given string that appear in descending order, in reverse, in reverse.\n  >>> descCharsRevRev('abc"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return (strings.reduce((acc, str) => acc + str, ''));\n};\n\n// This is a more complex example\nconst concatenate = (strings) => {\n  return ("}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const filtered = [];\n  strings.forEach(string => {\n    if (string.startsWith(prefix)) {\n      filtered.push(string);\n    }\n  });\n  return filtered;\n};\n\nexport default {\n  getFixture,\n  getFixtureByType,\n  getTest,\n  filterByPrefix\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const r = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      r.push(l[i])\n    }\n  }\n  return r\n}\n\n// Tests\nconst test = (l, r) => {\n  console.log(getPositive(l))\n}\n\ntest([1, -2, 3, -4, 5, 6], [2, 5, 6])\ntest([-1, 2, -4, 5, 6], [5, 3, 2, 3, 9, 123, 1])\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 1\n  }\n  return true\n}\n\n/*Return the next prime after n\n  >>> nextPrime(101)\n  1003\n  >>> nextPrime(3)\n  7\n  >>> nextPrime(2)\n  2\n  >>> nextPrime(6)\n  6\n  >>> nextPrime(7)\n  7\n  >>> nextPrime(13441)\n  13443\n  >>> nextPrime(61)\n  61\n  >>> nextPrime(4)\n  4\n  >>> nextPrime(1)\n  1\n  */\nconst nextPrime = (n) => {\n  if (n === 2) return 2\n  if (n === 3) return 3\n  let i = 2\n  while (true) {\n    if (isPrime(i * i > n)) return i\n    i += 1\n  }\n}\n\n/*Return the next prime after n. The function is not recursive, so it will\n  fail for large primes.\n  >>> nextPrimeRec(101)\n  1003\n  >>> nextPrimeRec(3)\n  7\n  >>> nextPrimeRec(2)\n  2\n  >>> nextPrimeRec(6)\n  6\n  >>> nextPrimeRec(7)\n  7\n  >>> nextPrimeRec(13441)\n  13443\n  >>> nextPrimeRec(61)\n  61\n  >>> nextPrimeRec(4)\n  4\n  >>> nextPrimeRec(1)\n  1\n  */\nconst nextPrimeRec = (n) => {\n  if (n === 2) return 2\n  if (n === 3) return 3\n  let i = 2\n  while (true) {\n    if (isPrime(i * i > n)) return i\n    i += 1\n  }\n}\n\n/*Return the smallest number that is greater than n, which is prime.\n  >>> nextPrime(3)\n  7\n  >>> nextPrime(2)\n  2\n  >>> nextPrime(6)\n  6\n  >>> nextPrime(7)\n  7\n  >>> nextPrime(13441)\n  13443\n  >>> nextPrime(61)\n  61\n  >>> nextPrime(4)\n  4\n  >>> nextPrime(1)\n  1\n  */\nconst nextPrimeWhile = (n) => {\n  let i = n + 1\n  while (true) {\n    if (isPrime(i)) return i\n    i += 1\n  }\n}\n\n/*Return the smallest number that is greater than n, which is prime.\n  >>> nextPrimeWhile(101)\n  1003\n  >>> nextPrimeWhile(3)\n  7\n  >>> nextPrimeWhile(2)\n  2\n  >>> nextPrimeWhile(6)\n  6\n  >>> nextPrimeWhile(7)\n  7\n  >>> nextPrimeWhile(13441)\n  13443\n  >>> nextPrimeWhile(61)\n  61\n  >>> nextPrimeWhile(4)\n  4\n  >>> nextPrimeWhile(1)\n  1\n  */\nconst nextPrimeWhileRec = (n) => {\n  let i = n + 1\n  while (true) {\n    if (isPrime(i)) return i\n    i += 1\n  }\n}\n\n/*Return the smallest number that is greater than n, which is prime.\n  >>> nextPrimeWhileRec(101)\n  1003\n  >>> nextPrimeWhileRec(3)\n  7\n  >>> nextPrimeWhileRec(2)\n  2\n  >>> nextPrimeWhileRec(6)\n  6\n  >>> nextPrimeWhileRec(7)\n  7\n  >>> nextPrimeWhileRec(13441)\n  13443\n  >>> nextPrimeWhileRec(61)\n  61\n  >>> nextPrimeWhileRec(4)\n  4\n  >>> nextPrimeWhileRec(1)\n  1\n  */\nconst nextPrimeWhileRecR = (n) => {\n  let i = n + 1\n  while (true) {\n    if (isPrime(i)) return i\n    i = nextPrimeWhileRec(i)\n  }\n}\n\nmodule.exports = {\n  nextPrime,\n  nextPrimeWhile,\n  nextPrimeWhileRec,\n  nextPrimeWhileRecR,\n  isPrime,\n  nextPrimeRec\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    let list = xs.filter((it) => it!==0);\n    let len = list.length;\n    if (len % 2!== 0){\n      return undefined;\n    }\n    let sum = 0;\n    for (let i = 0; i < len; i++){\n      sum += list[i];\n    }\n    let x = findMax(list);\n    return x - sum/len;\n}\n\n/*\n  findMax finds largest nonzero  coefficien t\n  findMax( [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  -5\n  */\nconst findMax = (xs) => {\n    let list = xs.filter((it) => it!==0);\n    let len = list.length;\n    if (len === 0){\n      return undefined;\n    }\n    let max = list[0];\n    for (let i = 1; i < len; i++){\n      if (list[i] > max){\n        max = list[i];\n      }\n    }\n    return max;\n}\n\n/*\n  findMin finds  smallest nonzero coefficien t\n  findMax( [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  -5\n  */\nconst findMin = (xs) => {\n    let list = xs.filter((it) => it!==0);\n    let len = list.length;\n    if (len === 0){\n      return undefined;\n    }\n    let min = list[0];\n    for (let i = 1; i < len; i++){\n      if (list[i] < min){\n        min = list[i];\n      }\n    }\n    return min;\n}\n\n/*\n  findMax finds largest coefficien t\n  findMax( [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  5\n  */\nconst findMaxOfList = (list) => {\n    let len = list.length;\n    if (len === 0){\n      return undefined;\n    }\n    let max = list[0];\n    for (let i = 1; i < len; i++){\n      if (list[i] > max){\n        max = list[i];\n      }\n    }\n    return max;\n}\n\n/*\n  findMin finds smallest coefficien t\n  findMax( [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  -5\n  */\nconst findMinOfList = (list) => {\n    let len = list.length;\n    if (len === 0){\n      return undefined;\n    }\n    let min = list[0];\n    for (let i = 1; i < len; i++){\n      if (list[i] < min){\n        min = list[i];\n      }\n    }\n    return min;\n}\n\n/*\n  Finds max of list\n  findMax( [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  5\n  */\nconst findMaxOfListOfList = (list) => {\n    let len = list.length;\n    if (len === 0){\n      return undefined;\n    }\n    let max = list[0][0];\n    for (let i = 0; i < len; i++){\n      if (list[i].length === 1){\n        continue;\n      }\n      let x = list[i][0];\n      if (x > max){\n        max = x;\n      }\n    }\n    return max;\n}\n\n/*\n  Finds min of list\n  findMax( [-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5])\n  -5\n  */\nconst findMinOfListOfList = (list) => {\n    let len = list.length;\n    if (len === 0){\n      return undefined;\n    }\n    let min = list[0][0];\n    for (let i = 0; i < len; i++){\n      if (list[i].length === 1){\n        continue;\n      }\n      let x = list[i][0];\n      if (x < min){\n        min = x;\n      }\n    }\n    return min;\n}\n\nconst isPrime = (n) => {\n  if (n === 2 || n === 3) {\n    return true;\n  }\n  if (n % 2 === 0 || n % 3 === 0) {\n    return false;\n  }\n  if (n <= 1) {\n    return false;\n  }\n  for (let i = 5; i * i <= n; i += 6) {\n    if (n % i === 0 || n % (i + 2) === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst findPrime = (n) => {\n  if"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const l1 = [...l];\n  const l2 = l1.slice();\n  const l3 = l2.slice();\n  const sorted = [];\n  let i = 0;\n  let j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] % 3 === 0) {\n      sorted.push(l1[i]);\n      l2[j] = l1[i];\n      i++;\n    }\n    if (l2[j] % 3 === 0) {\n      sorted.push(l2[j]);\n      l1[i] = l2[j];\n      j++;\n    }\n  }\n  while (i < l1.length) {\n    sorted.push(l1[i]);\n    l2[j] = l1[i];\n    i++;\n  }\n  while (j < l2.length) {\n    sorted.push(l2[j]);\n    l1[i] = l2[j];\n    j++;\n  }\n  return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniq = [];\n  for (let i = 0; i < l.length; i++) {\n    const index = uniq.indexOf(l[i]);\n    if (index === -1) {\n      uniq.push(l[i]);\n    }\n  }\n  return uniq;\n};\n\n// Returns an array with the elements in a list in reverse order.\n// The array is made up of unique elements in the list.\n// The order of the elements in the array is the same as the order in the list.\n// >>> reverse([1, 2, 3])\n// [3, 2, 1]\nconst reverse = (l) => {\n  return unique(l).reverse();\n};\n\n// Returns the reverse of the string that was passed in as an argument.\n// >>> reverse('abc')\n// 'cba'\nconst reverseString = (str) => {\n  return str.split('').reverse().join('');\n};\n\n//Returns the first character of a string\n//>>> first('hello')\n//'h'\nconst first = (str) => {\n  return str.substring(0, 1);\n};\n\n//Returns the last character of a string\n//>>> last('hello')\n//'o'\nconst last = (str) => {\n  return str.substring(str.length - 1, str.length);\n};\n\n//Returns a string that contains the first n characters of a string\n//>>> nth('hello', 1)\n//'ello'\nconst nth = (str, n) => {\n  return str.substring(0, n);\n};\n\n//Returns a string that contains the last n characters of a string\n//>>> nth('hello', 5)\n//'hello'\nconst nthLast = (str, n) => {\n  return str.substring(str.length - n, str.length);\n};\n\n//Returns a string with the first and last n characters\n//>>> firstLast('hello', 1, 5)\n//'ell'\nconst firstLast = (str, first, last) => {\n  return nth(str, first) + nthLast(str, last);\n};\n\n//Returns a string with the first and last n characters in reverse\n//>>> firstLastReverse('hello', 1, 5)\n//'olleh'\nconst firstLastReverse = (str, first, last) => {\n  return nthLast(str, last) + nth(str, first);\n};\n\n//Returns the concatenation of two strings.\n//>>> cat('hello','world')\n//'hello world'\nconst cat = (str1, str2) => {\n  return str1 + str2;\n};\n\n//Returns the first n characters of a string in reverse order.\n//>>> nthReverse('hello', 1)\n//'ello'\nconst nthReverse = (str, n) => {\n  return reverse(nth(str, n));\n};\n\n//Returns the first n characters of a string in reverse order in reverse.\n//>>> nthReverseReverse('hello', 1)\n//'olleh'\nconst nthReverseReverse = (str, n) => {\n  return reverse(nth(str, n));\n};\n\n//Returns the first n characters of a string in reverse order in reverse.\n//>>> firstLastReverseReverse('hello', 1, 5)\n//'olleh'\nconst firstLastReverseReverse = (str, first, last) => {\n  return reverse(nthLast(str, last)) + nth(str, first);\n};\n\n//Returns the first n characters of a string in reverse order in reverse.\n//>>> firstLastReverseReverse('hello', 1, 5)\n//'olleh'\nconst firstLastReverseReverse2 = (str, first, last) => {\n  return firstLast(reverse(nthLast(str, last)), first, last);\n};\n\n//Returns the string with all spaces removed.\n//>>> space('  hello  world')\n//'hello world'\nconst space = (str) => {\n  return str.replace(/\\s+/g, '');\n};\n\n//Returns a string with a new line appended at the end.\n//>>> newLine('hello world')\n//'hello world\\n'\nconst newLine = (str) => {\n  return str + '\\n';\n};\n\n//Returns the first character of a string in reverse order\n//>>> firstReverse('hello')\n//'olleh'\nconst firstReverse = (str) => {\n  return reverse(first(str));\n};\n\n//Returns the last character of a string in reverse order\n//>>> lastReverse('hello')\n//'hello'\nconst lastReverse = (str) => {\n  return reverse(last(str));\n};\n\n//Returns the first n characters of a string in reverse order in reverse.\n//>>> firstLastReverseReverse('hello', 1, 5)\n//'olleh'\nconst firstLastReverseReverse = (str, first, last) => {\n  return reverse(firstLast(reverse(str), first, last));\n};\n\n//Returns the first n characters of a string in reverse order in reverse.\n//>>> firstLastReverseReverse('hello', 1, 5)\n//'olleh'\nconst firstLastReverseReverse2 = (str, first, last) => {\n  return firstLastReverseReverse(reverse(str), first, last);\n};\n\n//Returns the first n characters of a string in reverse order in reverse.\n//>>> firstLastReverseReverse('hello', 1, 5)\n//'olleh'\nconst firstLastReverseReverse3 = (str, first, last) => {\n  return firstLastReverseReverse(reverse(str), first, last);\n};\n\n//Returns the first n characters of a string in reverse order in reverse.\n//>>> firstLastReverseReverse('hello', 1, 5)\n//'olleh'\nconst firstLastReverseReverse4 = (str, first, last) => {\n  return firstLastReverseReverse(reverse(str), first, last"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let m = null;\n  for (let i = 0; i < l.length; i++) {\n    if (m == null || l[i] > m) m = l[i];\n  }\n  return m;\n};\n\nexport default maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let num = n;\n  while (num) {\n    if (num % 3 === 0 && num % 5 === 0) {\n      num = num - 2;\n      return 'FizzBuzz';\n    }\n    if (num % 3 === 0) {\n      num = num - 3;\n      return 'Fizz';\n    }\n    if (num % 5 === 0) {\n      num = num - 5;\n      return 'Buzz';\n    }\n    num--;\n  }\n  return num;\n};\n\nexport {fizzBuzz};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  const even = []\n  const odd = []\n  for (let i = 0; i < l.length; i += 2) {\n    if (i % 2 === 0) {\n      odd.push(l[i])\n    } else {\n      even.push(l[i])\n    }\n  }\n  return [...odd,...even]\n}\n\nmodule.exports = sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n var decoded = [], groups = [], groups2 = [],  group = [], groups2 = [], g = [];\n  for(const group of groups) {\n    if (group.leng th == 3) {\n     g.push(group.slice(1)); \n    } \n  }\n  for(const group of groups2) {\n    if (group.leng th == 3) {\n     g.push(group.slice(1)); \n    } \n  }\n  groups2.forEach(group2 => {\n    group2.forEach(group3 => {\n      group.push(group3); \n    }); \n  });\n  g.forEach(group3 => {\n    const group4 = group3.slice(1);\n    group3.forEach(group4 => {\n      group4.forEach(group5 => {\n       decoded.push(group5);\n     }); \n    }); \n  });\n  return decoded.join(' '); \n}\n\n//const encodeCyclic = (s) => {\n// var groups = [ ], gr oups2 = [];\n//  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n//    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n//  }\n//  for(constgroup ofgroups) {\n//    if (group.leng th == 3)\n//     groups2. push(group.slice(1) + group [0]);\n//  e ls e \n//      groups2.push(group);  }  return gro ups2.join(' '); \n//}\n\n//const decodeC yc lic = (s) =>{\n// var decoded = [], ggroups = [], groups2 = [],  group = [], groups2 = [], g = [];\n//  for(const group of groups) {\n//    if (group.leng th == 3) {\n//     g.push(group.slice(1)); \n//    } \n//  }\n//  for(const group of groups2) {\n//    if (group.leng th == 3) {\n//     g.push(group.slice(1)); \n//    } \n//  }\n//  groups2.forEach(group2 => {\n//    group2.forEach(group3 => {\n//      group.push(group3); \n//    }); \n//  });\n//  g.forEach(group3 => {\n//    const group4 = group3.slice(1);\n//    group3.forEach(group4 => {\n//      group4.forEach(group5 => {\n//       decoded.push(group5);\n//     }); \n//    }); \n//  });\n//  return decoded.join(' '); \n//}\n\nmodule.exports = {\n encode: encodeCyclic,\n decode: decodeC,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let prime = 1\n  let fib = 2\n  let count = 1\n\n  while (prime <= n) {\n    if (fib % prime === 0) {\n      count++\n    }\n    fib = fib * prime\n    prime = prime + prime\n  }\n\n  return fib\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const res = {};\n    const l2 = l.slice();\n    const d = {};\n    const x = [];\n    let k = 0;\n    while (k < l.length) {\n        if (d[l2[k]]) {\n            return false;\n        }\n        d[l2[k]] = true;\n        x.push(l2[k]);\n        k += 1;\n    }\n    k = 0;\n    while (k < x.length) {\n        res[x[k]] = 0;\n        k += 1;\n    }\n    return true;\n};\n\nmodule.exports = {\n    triplesSumToZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    cout << n << endl;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n    return l.reduce((acc, x, i) => {\n        return [...acc, x + 1, i + 1];\n    }, [1]);\n};\n\n/**\n  * @name findMin\n  * @description Return list with the smallest element\n  * @param {list} l - List\n  * @return {number} - the smallest element\n  * @example\n  * findMin([1, 2, 3, 4])\n  * //=> 1\n  * findMin([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  * //=> 0\n  */\nconst findMin = (l) => {\n    return l.reduce((acc, x, i) => {\n        if (acc === undefined) {\n            return x;\n        }\n        if (acc > x) {\n            return x;\n        }\n        return acc;\n    });\n};\n\n/**\n  * @name findMax\n  * @description Return list with the largest element\n  * @param {list} l - List\n  * @return {number} - the largest element\n  * @example\n  * findMax([1, 2, 3, 4])\n  * //=> 4\n  * findMax([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  * //=> 9\n  */\nconst findMax = (l) => {\n    return l.reduce((acc, x, i) => {\n        if (acc < x) {\n            return x;\n        }\n        return acc;\n    });\n};\n\n/**\n  * @name findMinMax\n  * @description Return list with the largest and the smallest element\n  * @param {list} l - List\n  * @return {object} - Object with min and max\n  * @example\n  * findMinMax([1, 2, 3, 4])\n  * //=> {min: 1, max: 4}\n  * findMinMax([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  * //=> {min: 0, max: 9}\n  */\nconst findMinMax = (l) => {\n    let min = Infinity;\n    let max = -Infinity;\n    l.forEach((x, i) => {\n        if (x < min) {\n            min = x;\n        }\n        if (x > max) {\n            max = x;\n        }\n    });\n    return {min: min, max: max};\n};\n\nexport {\n    findMin,\n    findMax,\n    findMinMax,\n    incrList,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let a = l.sort((a, b) => { return a - b });\n  return a.length === 2 && a[0] === 0 && a[1]!== 0;\n};\n\n/*\n  isPalindrome takes a string and returns true if it is a palindrome, false otherwise.\n  >>> isPalindrome(\"a\")\n  false\n  >>> isPalindrome(\"abc\")\n  false\n  >>> isPalindrome(\"aabba\")\n  false\n  >>> isPalindrome(\"ab\")\n  true\n  >>> isPalindrome(\"abab\")\n  true\n  */\nconst isPalindrome = (s) => {\n  let l = s.length,\n    r = l - 1;\n  while (r >= 0 && s[r] === s[l - 1]) {\n    r--;\n    l--;\n  }\n  return l === r;\n};\n\n/*\n  partition takes a list and a predicate function, and returns a tuple of a list and the remainder.  \n  the predicate is applied to the first element of the list and the rest of the list is returned as the remainder.\n  >>> partition([1, 2, 3, 4, 5], x => x < 3)\n  ([1, 2], [3, 4, 5])\n  >>> partition([1, 2, 3, 4, 5], x => x < 4)\n  ([1, 2, 3], [4, 5])\n  >>> partition([1, 2, 3, 4, 5], x => x < 5)\n  ([1, 2, 3, 4], [5])\n  >>> partition([1, 2, 3, 4, 5], x => x < 6)\n  ([1, 2, 3, 4, 5], [])\n  >>> partition([1, 2, 3, 4, 5], x => x < 0)\n  ([1, 2, 3, 4, 5], [])\n  */\nconst partition = (l, f) => {\n  let [a, b] = [l.slice(0, 1), l.slice(1)];\n  for (let i = 0; i < b.length; i++) {\n    if (f(a[i])) {\n      let [c, d] = partition(b, f);\n      b = [...c, a[i],...d];\n    }\n  }\n  return [a, b];\n};\n\n/*\n  sortBy takes a list and a predicate function and returns a sorted list.  the predicate is applied to the\n  first element of the list and the rest of the list is returned as the remainder.\n  >>> sortBy([1, 2, 3, 4, 5], x => x < 3)\n  [1, 2, 3, 4, 5]\n  >>> sortBy([1, 2, 3, 4, 5], x => x < 4)\n  [1, 2, 3, 5]\n  >>> sortBy([1, 2, 3, 4, 5], x => x < 5)\n  [1, 2, 3, 4, 5]\n  >>> sortBy([1, 2, 3, 4, 5], x => x < 6)\n  [1, 2, 3, 4, 5]\n  >>> sortBy([1, 2, 3, 4, 5], x => x < 0)\n  [1, 2, 3, 4, 5]\n  */\nconst sortBy = (l, f) => {\n  let a = partition(l, f);\n  return a[0].sort(x => x).concat(a[1].sort((x, y) => f(x) - f(y)));\n};\n\n/*\n  isSorted takes a list and returns true if it is sorted in ascending order, false otherwise.\n  >>> isSorted([1, 2, 3, 4, 5])\n  false\n  >>> isSorted([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst isSorted = (l) => {\n  let sorted = l.slice().sort((a, b) => a - b);\n  return l.length === sorted.length && l.every((x, i) => sorted[i] === x);\n};\n\n/*\n  find the first index of a value in a list, or -1 if the value is not found.\n  >>> findIndex([\"one\", \"two\", \"three\"], \"two\")\n  1\n  >>> findIndex([\"one\", \"two\", \"three\"], \"four\")\n  -1\n  >>> findIndex([\"one\", \"two\", \"three\"], \"five\")\n  -1\n  >>> findIndex([\"one\", \"two\", \"three\"], \"five\", -1)\n  -1\n  >>> findIndex([\"one\", \"two\", \"three\"], \"five\", 1)\n  2\n  */\nconst findIndex = (l, f, i = 0) => {\n  while (l.indexOf(f(l[i]))!== i) {\n    if (i === l.length - 1) return -1;\n    i++;\n  }\n  return i;\n};\n\n/*\n  reverse takes a list and returns a reversed list.\n  >>> reverse([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  >>> reverse([1])\n  [1]\n  >>> reverse([])\n  []\n  */\nconst reverse = (l) => {\n  return l.slice().reverse();\n};\n\n/*\n  compare takes two lists and returns true if they are equal, false otherwise.\n  >>> compare([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> compare(["}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let res = ''\n  while (x > 0) {\n    res = (x % base).toString() + res\n    x = (x / base)\n  }\n  return res\n}\n\n// Test Code\nconst test_base = (base) => {\n  console.log('Enter number to convert to base:')\n  let num = process.stdin.readLine().trim()\n  console.log('Converted number is:'+ changeBase(num, base))\n}\n\n// Test Code\nconst test_changeBase = (base) => {\n  console.log('Enter number to convert to base:')\n  let num = process.stdin.readLine().trim()\n  console.log('Converted number is:'+ changeBase(num, base))\n}\n\n// Main Code\nconst main = (base) => {\n  if (base == 10) {\n    return test_base(base)\n  } else {\n    return test_changeBase(base)\n  }\n}\n\n// Run Code\nmain(process.argv[2])\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea14 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea15 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea16 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea17 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea18 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea19 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n}\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea20 = (a, h) => {\n  return Math.sqrt(a*(a-h)*(2*a - h))/2;\n"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  return (n <= 2)? n : fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  l.sort((a, b) => (a - b));\n  if (l.length % 2 === 1) {\n    return l[(l.length - 1) / 2];\n  } else {\n    return (l[(l.length - 1) / 2] + l[(l.length - 1) / 2 - 1]) / 2;\n  }\n}\n\nconst sort = (l) => {\n  l.sort((a, b) => a - b);\n}\n\nconst test_median = (l, expected) => {\n  if (expected === undefined) {\n    return;\n  }\n\n  if (expected === null) {\n    expected = median(l);\n  }\n\n  sort(l);\n\n  assert.equal(expected, median(l), 'The median of list'+ l +'is'+ expected);\n}\n\ndescribe('Median', () => {\n  it('should return the median of an empty list', () => {\n    test_median([], null);\n  });\n\n  it('should return the median of a single-element list', () => {\n    test_median([1], 1);\n  });\n\n  it('should return the median of a list with two elements', () => {\n    test_median([1, 2], 2);\n  });\n\n  it('should return the median of a list with three elements', () => {\n    test_median([1, 2, 3], 2.5);\n  });\n\n  it('should return the median of a list with four elements', () => {\n    test_median([1, 2, 3, 4], 3);\n  });\n\n  it('should return the median of a list with five elements', () => {\n    test_median([1, 2, 3, 4, 5], 3.5);\n  });\n\n  it('should return the median of a list with six elements', () => {\n    test_median([1, 2, 3, 4, 5, 6], 4);\n  });\n\n  it('should return the median of a list with seven elements', () => {\n    test_median([1, 2, 3, 4, 5, 6, 7], 4.5);\n  });\n\n  it('should return the median of a list with eight elements', () => {\n    test_median([1, 2, 3, 4, 5, 6, 7, 8], 5);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if(text.length === 0) return true;\n    const reverseText = text.split('').reverse().join('');\n    return text === reverseText;\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('z')\n  true\n  >>> isPalindrome('zabc')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome2 = (text) => {\n    let n = text.length;\n    for(let i = 0; i < n/2; i++){\n        if(text[i]!== text[n - 1 - i]){\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('z')\n  true\n  >>> isPalindrome('zabc')\n  true\n  >>> isPalindrome('abcd')\n  false\n  */\nconst isPalindrome3 = (text) => {\n    let n = text.length;\n    for(let i = 0; i < n/2; i++){\n        if(text[i]!== text[n - 1 - i]){\n            return false;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome4 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n    }\n    return true;\n}\n\nconst isPalindrome5 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome6 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome7 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome8 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome9 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome10 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome11 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome12 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            i++;\n            j--;\n        }\n    }\n    return true;\n}\n\nconst isPalindrome13 = (text) => {\n    let n = text.length;\n    let i = 0;\n    let j = n - 1;\n    while(i < j){\n        if(text[i]!== text[j]){\n            return false;\n        }\n        i++;\n        j--;\n        while(i < j && text[i] === text[j]){\n            "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p;\n};\n\nexport default modp;\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let arr = s.split(\"\").reverse().join(\" \");\n  let n = 0;\n  return arr.split(\" \").reverse().join(\"\");\n} \n\nconst convertToHex =(c) => {\n  let s = parseInt(c.toString(16),16);\n  return s;\n}\n\nconst convertToChar =(c) => {\n  let s = parseInt(c.toString(16),16);\n  return String.fromCharCode(s);\n}\n\nconst isValid =(s) => {\n  let l = s.length;\n  let c = 0;\n  for(let i = 0;i<l;i++){\n    c += parseInt(s.charAt(i),16);\n  }\n  return c % 26 == 0;\n}\n\nconst encode =(s) => {\n  let ret = \"\";\n  for(let i = 0; i < s.length; i++){\n    ret += (convertToHex(s.charAt(i)));\n  }\n  return ret;\n}\n\nconst decode =(s) =>{\n  let ret = \"\";\n  for(let i = 0; i < s.length; i++){\n    ret += convertToChar(convertToHex(s.charAt(i)));\n  }\n  return ret;\n}\n\nconst stripHex =(s) =>{\n  let ret = \"\";\n  for(let i = 0; i < s.length; i++){\n    if(s.charAt(i)!= \"0\"){\n      ret += s.charAt(i);\n    }\n  }\n  return ret;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  isValid: isValid,\n  stripHex: stripHex,\n  convertToHex: convertToHex,\n  convertToChar: convertToChar\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a','e','i','o','u','A','E','I','O','U']\n  const consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n  let i = 0\n  let char = text.charAt(i)\n  let output = \"\"\n\n  while (char!= '\\n') {\n    if (char =='') {\n      i += 1\n      char = text.charAt(i)\n    } else if (vowels.includes(char)) {\n      i += 1\n      char = text.charAt(i)\n    } else {\n      output += char\n      i += 1\n      char = text.charAt(i)\n    }\n  }\n\n  return output\n}\n\n/*\n  isVowel is a function that takes a string and returns true iff string contains a vowel\n  >>> isVowel(\"aa\")\n  false\n  >>> isVowel(\"a\")\n  true\n  >>> isVowel(\"\")\n  false\n  >>> isVowel(\"abcdef\")\n  true\n  >>> isVowel(\"abca\")\n  false\n  */\nconst isVowel = (text) => {\n  const vowels = ['a','e','i','o','u','A','E','I','O','U']\n  const consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n  let i = 0\n  let char = text.charAt(i)\n\n  while (char!= '\\n') {\n    if (char =='') {\n      i += 1\n      char = text.charAt(i)\n    } else if (vowels.includes(char)) {\n      return true\n    } else if (consonants.includes(char)) {\n      i += 1\n      char = text.charAt(i)\n    } else {\n      return false\n    }\n  }\n\n  return false\n}\n\n/*\n  getFirstLetter is a function that takes a string and returns first letter of string\n  >>> getFirstLetter(\"abc\")\n  a\n  >>> getFirstLetter(\"\")\n  ''\n  >>> getFirstLetter(\"a\")\n  a\n  >>> getFirstLetter(\"abcdef\")\n  a\n  >>> getFirstLetter(\"abca\")\n  a\n  */\nconst getFirstLetter = (text) => {\n  let firstLetter = \"\"\n  let i = 0\n  let char = text.charAt(i)\n\n  while (char!= '\\n') {\n    if (char =='') {\n      i += 1\n      char = text.charAt(i)\n    } else {\n      firstLetter += char\n      i += 1\n      char = text.charAt(i)\n    }\n  }\n\n  return firstLetter\n}\n\n/*\n  getLastLetter is a function that takes a string and returns last letter of string\n  >>> getLastLetter(\"abc\")\n  c\n  >>> getLastLetter(\"\")\n  ''\n  >>> getLastLetter(\"a\")\n  a\n  >>> getLastLetter(\"abcdef\")\n  f\n  >>> getLastLetter(\"abca\")\n  a\n  */\nconst getLastLetter = (text) => {\n  let lastLetter = \"\"\n  let i = text.length - 1\n  let char = text.charAt(i)\n\n  while (char!= '\\n') {\n    if (char =='') {\n      i -= 1\n      char = text.charAt(i)\n    } else {\n      lastLetter += char\n      i -= 1\n      char = text.charAt(i)\n    }\n  }\n\n  return lastLetter\n}\n\n/*\n  getWord is a function that takes a string and returns first and last letters of string\n  >>> getWord(\"abc\")\n  ('a', 'c')\n  >>> getWord(\"\")\n  ('', '')\n  >>> getWord(\"a\")\n  ('a', 'a')\n  >>> getWord(\"abcdef\")\n  ('a', 'f')\n  >>> getWord(\"abca\")\n  ('a', 'a')\n  */\nconst getWord = (text) => {\n  let firstLetter = getFirstLetter(text)\n  let lastLetter = getLastLetter(text)\n\n  return (firstLetter, lastLetter)\n}\n\n/*\n  removeVowelsAndSpaces is a function that takes a string and returns string without vowels and spaces\n  >>> removeVowelsAndSpaces(\"abcdef\")\n  'bcdf'\n  >>> removeVowelsAndSpaces(\"abc def\")\n  'abc def'\n  >>> removeVowelsAndSpaces(\" abc def\")\n  'abc def'\n  >>> removeVowelsAndSpaces(\"abc\")\n  'abc'\n  >>> removeVowelsAndSpaces(\" abc\")\n  'abc'\n  >>> removeVowelsAndSpaces(\" abc \")\n  'abc'\n  >>> removeVowelsAndSpaces(\"a b c d\")\n  'a b c d'\n  >>> removeVowelsAndSpaces(\"a b c d \")\n  'a b c d'\n  >>> removeVowelsAndSpaces(\"\")\n  ''\n  >>> removeVowelsAndSpaces(\" \")\n  ''\n  >>> removeVowelsAndSpaces(\" abc \")\n 'abc '\n  >>> removeVowelsAndSpaces(\" abc \")\n 'abc '\n  >>> removeVowelsAndSpaces(\" a b c d \")\n 'a b c d '\n  >>> removeVowelsAndSpaces(\" a b c d \")\n 'a b c d '\n  >>> removeVowelsAndSpaces(\""}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0;\n  for (; i < l.length - 1; i++) {\n    if (l[i] >= t) {\n      break;\n    }\n  }\n  return i === l.length - 1;\n};\n\n/*\n  Return the index of the max element in the list.\n  >>> max(2, 3, 2, 4)\n  4\n  >>> max([2, 3, 2, 4])\n  4\n  >>> max([])\n  N/A\n  >>> max([1, 2, 3])\n  N/A\n  >>> max([1, 2, 3, 4, 5])\n  N/A\n  */\nconst max = (...l) => {\n  if (!l.length) {\n    return NaN;\n  }\n  let max = l[0], min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    } else if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the index of the min element in the list.\n  >>> min(2, 3, 2, 4)\n  2\n  >>> min([2, 3, 2, 4])\n  2\n  >>> min([])\n  N/A\n  >>> min([1, 2, 3])\n  N/A\n  >>> min([1, 2, 3, 4, 5])\n  N/A\n  */\nconst min = (...l) => {\n  if (!l.length) {\n    return NaN;\n  }\n  let max = l[0], min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < max) {\n      max = l[i];\n    } else if (l[i] > min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Return the max number in the list.\n  >>> max([2, 3, 2, 4])\n  4\n  >>> max([2, 3, 2, 4, 5])\n  5\n  >>> max([1, 2, 3])\n  N/A\n  >>> max([1, 2, 3, 4])\n  N/A\n  >>> max([])\n  N/A\n  */\nconst maxNumber = (...l) => {\n  if (!l.length) {\n    return NaN;\n  }\n  let max = l[0], min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    } else if (l[i] < min) {\n      min = l[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Return the min number in the list.\n  >>> min([2, 3, 2, 4])\n  2\n  >>> min([2, 3, 2, 4, 5])\n  2\n  >>> min([1, 2, 3])\n  N/A\n  >>> min([1, 2, 3, 4])\n  N/A\n  >>> min([])\n  N/A\n  */\nconst minNumber = (...l) => {\n  if (!l.length) {\n    return NaN;\n  }\n  let max = l[0], min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < max) {\n      max = l[i];\n    } else if (l[i] > min) {\n      min = l[i];\n    }\n  }\n  return min;\n};\n\nexport {\n  find,\n  findIndex,\n  findLast,\n  findLastIndex,\n  findLastIndexOf,\n  findLastIndexOfWhere,\n  findLastIndexWhere,\n  findLastWhere,\n  findLastWhere,\n  findIndexWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere,\n  findLastWhere,\n  findWhere"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  let i = 0\n  let len = s0.length\n  let j = 0\n  let len2 = s1.length\n  while (i < len && j < len2) {\n    if (s0[i]!== s1[j]) {\n      return false\n    }\n    i++\n    j++\n  }\n  return i === len && j === len2\n}\n\n/*\n  Check if two words are equal, ignoring case.\n  >>> sameIgnoreCase('eabcd', 'EABCD')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCDE')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCDE')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCDe')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCDe')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcd', 'ABcd')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('ABCde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCDe')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('ABCde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('ABCde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('ABCde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('ABCde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('ABCde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('ABCde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'ABCde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde')\n  true\n  >>> sameIgnoreCase('abcde', 'abcde"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let [a, b] = [1, 1];\n  while (n > 1) {\n    [a, b] = [b, a + b];\n    n -= 1;\n  }\n  return a;\n};\n\n/**\n  * @method fib.print\n  * @param {number} n\n  * @return {number}\n  *\n  * Print the n-th Fibonacci number.\n  */\nfib.print = (n) => {\n  console.log(fib(n));\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets_length = brackets.length\n  const brackets_open = brackets[0]\n  const brackets_closed = brackets[1]\n  let brackets_counter = 2\n\n  for (let i = 1; i < brackets_length; i++) {\n    if (brackets[i] === brackets_open) {\n      if (brackets_counter === 1) {\n        brackets_counter += 1\n        continue\n      }\n      if (brackets_open!== brackets_closed) {\n        return false\n      }\n    }\n    if (brackets[i] === brackets_closed) {\n      brackets_counter -= 1\n    }\n  }\n  return brackets_counter === 1\n}\n\n/*\n  returns true if the given bracketing is valid.\n\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<>\")\n  true\n  >>> validBracketing(\"<"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let max = -Infinity;\n  let min = Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n    if (l[i] < min) min = l[i];\n  }\n  return max < min;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    set.add(l1[i]);\n  }\n  for (let i = 0; i < l2.length; i++) {\n    if (set.has(l2[i])) {\n      set.delete(l2[i]);\n    }\n  }\n  return [...set];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return largestPrimeFactor(i)\n    }\n  }\n  return n\n}\n\n// This solution is slower\nconst largestPrimeFactor = (n) => {\n  let i = 2\n  let nPrime = 1\n  while (i <= n) {\n    if (n % i === 0) {\n      nPrime = i\n      i++\n    }\n  }\n  return nPrime\n}\n\n/* Return the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let i = 2\n  let nPrime = 1\n  while (i < n) {\n    if (n % i === 0) {\n      nPrime = i\n      break\n    }\n    i++\n  }\n  return nPrime\n}\n\n/* Return the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  const isPrime = (n) => {\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n  let i = 2\n  let nPrime = 1\n  while (i < n) {\n    if (isPrime(i)) {\n      nPrime = i\n      break\n    }\n    i++\n  }\n  return nPrime\n}\n\n/* Return the largest prime factor of n.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  if (n < 2) {\n    return n\n  }\n  let i = 2\n  let nPrime = 1\n  while (i < n) {\n    if (n % i === 0) {\n      nPrime = i\n      break\n    }\n    i++\n  }\n  if (nPrime > n) {\n    return n\n  }\n  return nPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 1;\n  while (sum <= n) {\n    sum += sum;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n//---------------------------------------------------------------------------------\n\n/*\n  >>> getDigits(1)\n  [1]\n  >>> getDigits(2)\n  [1, 2]\n  >>> getDigits(3)\n  [1, 2, 3]\n  >>> getDigits(4)\n  [1, 2, 3, 4]\n  >>> getDigits(5)\n  [1, 2, 3, 4, 5]\n  >>> getDigits(6)\n  [1, 2, 3, 4, 5, 6]\n  >>> getDigits(7)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> getDigits(8)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> getDigits(9)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> getDigits(10)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> getDigits(11)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> getDigits(12)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> getDigits(13)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> getDigits(14)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getDigits(15)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> getDigits(16)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> getDigits(17)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getDigits(18)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getDigits(19)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getDigits(20)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getDigits(21)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getDigits(22)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> getDigits(23)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getDigits(24)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> getDigits(25)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> getDigits(26)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]\n  >>> getDigits(27)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]\n  >>> getDigits(28)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]\n  >>> getDigits(29)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]\n  >>> getDigits(30)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]\n  >>> getDigits(31)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let stack = []\n    for (let i = 0; i < brackets.length; i++) {\n        const ch = brackets[i]\n        if (ch === '(') {\n            stack.push(ch)\n        } else {\n            if (stack.length > 0) {\n                const top = stack.pop()\n                if (top === '(') {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.length === 0\n}\n\nconsole.log(correctBracketing(\"()\"))\nconsole.log(correctBracketing(\"()()\"))\nconsole.log(correctBracketing(\"(()()))\"))\nconsole.log(correctBracketing(\")(()\"))\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return []\n  }\n  const d = [xs[len - 1]]\n  for (let i = len - 2; i >= 0; i--) {\n    d[i + 1] = xs[i]\n    d[i] = xs[i] * (len - i)\n  }\n  return d\n}\n\n// Returns xs[0] + xs[1] * x + xs[2] * x^2 +...\nconst integrate = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return 0\n  }\n  const d = derivative(xs)\n  const sum = xs[len - 1]\n  for (let i = len - 2; i >= 0; i--) {\n    sum += d[i] * (len - i)\n  }\n  return sum\n}\n\nconst test = () => {\n  const xs = [1, 2, 3, 4, 5, 6]\n  console.log(integrate(xs))\n  console.log(derivative(xs))\n}\n\n// export { derivative, integrate, test }\n\n// test()\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let a = 0;\n    let b = 1;\n    let fib = a;\n    let fibi = b;\n    let i = 1;\n    while (i <= n) {\n        fib = fibi + fib;\n        fibi = b + fibi;\n        i++;\n    }\n    return fib;\n}\n\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\nconsole.log(fibfib(11));\nconsole.log(fibfib(12));\nconsole.log(fibfib(13));\nconsole.log(fibfib(14));\nconsole.log(fibfib(15));\nconsole.log(fibfib(16));\nconsole.log(fibfib(17));\nconsole.log(fibfib(18));\nconsole.log(fibfib(19));\nconsole.log(fibfib(20));\nconsole.log(fibfib(21));\nconsole.log(fibfib(22));\nconsole.log(fibfib(23));\nconsole.log(fibfib(24));\nconsole.log(fibfib(25));\nconsole.log(fibfib(26));\nconsole.log(fibfib(27));\nconsole.log(fibfib(28));\nconsole.log(fibfib(29));\nconsole.log(fibfib(30));\nconsole.log(fibfib(31));\nconsole.log(fibfib(32));\nconsole.log(fibfib(33));\nconsole.log(fibfib(34));\nconsole.log(fibfib(35));\nconsole.log(fibfib(36));\nconsole.log(fibfib(37));\nconsole.log(fibfib(38));\nconsole.log(fibfib(39));\nconsole.log(fibfib(40));\nconsole.log(fibfib(41));\nconsole.log(fibfib(42));\nconsole.log(fibfib(43));\nconsole.log(fibfib(44));\nconsole.log(fibfib(45));\nconsole.log(fibfib(46));\nconsole.log(fibfib(47));\nconsole.log(fibfib(48));\nconsole.log(fibfib(49));\nconsole.log(fibfib(50));\nconsole.log(fibfib(51));\nconsole.log(fibfib(52));\nconsole.log(fibfib(53));\nconsole.log(fibfib(54));\nconsole.log(fibfib(55));\nconsole.log(fibfib(56));\nconsole.log(fibfib(57));\nconsole.log(fibfib(58));\nconsole.log(fibfib(59));\nconsole.log(fibfib(60));\nconsole.log(fibfib(61));\nconsole.log(fibfib(62));\nconsole.log(fibfib(63));\nconsole.log(fibfib(64));\nconsole.log(fibfib(65));\nconsole.log(fibfib(66));\nconsole.log(fibfib(67));\nconsole.log(fibfib(68));\nconsole.log(fibfib(69));\nconsole.log(fibfib(70));\nconsole.log(fibfib(71));\nconsole.log(fibfib(72));\nconsole.log(fibfib(73));\nconsole.log(fibfib(74));\nconsole.log(fibfib(75));\nconsole.log(fibfib(76));\nconsole.log(fibfib(77));\nconsole.log(fibfib(78));\nconsole.log(fibfib(79));\nconsole.log(fibfib(80));\nconsole.log(fibfib(81));\nconsole.log(fibfib(82));\nconsole.log(fibfib(83));\nconsole.log(fibfib(84));\nconsole.log(fibfib(85));\nconsole.log(fibfib(86));\nconsole.log(fibfib(87));\nconsole.log(fibfib(88));\nconsole.log(fibfib(89));\nconsole.log(fibfib(90));\nconsole.log(fibfib(91));\nconsole.log(fibfib(92));\nconsole.log(fibfib(93));\nconsole.log(fibfib(94));\nconsole.log(fibfib(95));\nconsole.log(fibfib(96));\nconsole.log(fibfib(97));\nconsole.log(fibfib(98));\nconsole.log(fibfib(99));\nconsole.log(fibfib(100));\nconsole.log(fibfib(101));\nconsole.log(fibfib(102));\nconsole.log(fibfib(103));\nconsole.log(fibfib(104));\nconsole.log(fibfib(105));\nconsole.log(fibfib(106));\nconsole.log(fibfib(107));\nconsole.log(fibfib(108));\nconsole.log(fibfib(109));\nconsole.log(fibfib(110));\nconsole.log(fibfib(111));\nconsole.log(fibfib(112));\nconsole.log(fibfib(113));\nconsole.log(fibfib(114));\nconsole"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[AEIOU]/)) {\n      result++;\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  console.log(vowelsCount(\"a\"));\n  console.log(vowelsCount(\"ABC\"));\n  console.log(vowelsCount(\"XYZ\"));\n  console.log(vowelsCount(\"ACEDY\"));\n  console.log(vowelsCount(\"ABCDE\"));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let r = x;\n    let shift = shift;\n    if (shift > 0) {\n        while (shift--) {\n            r = parseInt(r.toString().charAt(0)) + parseInt(r.toString().charAt(1))\n        }\n    } else if (shift < 0) {\n        while (shift--) {\n            r = parseInt(r.toString().charAt(1)) + parseInt(r.toString().charAt(0))\n        }\n    }\n    return r;\n}\n\n/*\n    Circular shift the digits of the inte ger x, shift thedigits left by shift\n and return the result as a string.\n If shift > nubmer of digits,  return the original.\n  >>> circularShift(12, 1)\n  \"12\"\n  >>> circularShift(12, 2)\n  \"21\"\n  */\nconst circularShift1 = (x, shift) => {\n    let r = x;\n    let shift = shift;\n    if (shift > 0) {\n        while (shift--) {\n            r = parseInt(r.toString().charAt(shift)) + parseInt(r.toString().charAt(shift + 1))\n        }\n    } else if (shift < 0) {\n        while (shift--) {\n            r = parseInt(r.toString().charAt(shift + 1)) + parseInt(r.toString().charAt(shift))\n        }\n    }\n    return r;\n}\n\nconst reverse = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    for (let i = 0; i < len / 2; i++) {\n        let p = str.charAt(i);\n        str = str.charAt(len - i - 1) + p;\n    }\n    return str;\n}\n\nconst reverse1 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    for (let i = len - 1; i >= 0; i--) {\n        let p = str.charAt(i);\n        str = p + str.charAt(i - len + 1);\n    }\n    return str;\n}\n\nconst reverse2 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    let len2 = len - 1;\n    for (let i = 0; i < len2; i++) {\n        let p = str.charAt(i);\n        str = p + str.charAt(len2 - i);\n    }\n    return str;\n}\n\nconst reverse3 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    let len2 = len - 1;\n    for (let i = len - 1; i >= 0; i--) {\n        let p = str.charAt(i);\n        str = str.charAt(i - len2) + p;\n    }\n    return str;\n}\n\nconst reverse4 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    for (let i = 0; i < len; i++) {\n        let p = str.charAt(i);\n        str = p + str.charAt(len - i - 1);\n    }\n    return str;\n}\n\nconst reverse5 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    let len2 = len - 1;\n    for (let i = 0; i < len2; i++) {\n        let p = str.charAt(i);\n        str = str.charAt(i) + p + str.charAt(len2 - i - 1);\n    }\n    return str;\n}\n\nconst reverse6 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    for (let i = len - 1; i >= 0; i--) {\n        let p = str.charAt(i);\n        str = p + str.charAt(i + 1);\n    }\n    return str;\n}\n\nconst reverse7 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    for (let i = 0; i < len; i++) {\n        let p = str.charAt(i);\n        str = p + str.charAt(i + 1);\n    }\n    return str;\n}\n\nconst reverse8 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    let len2 = len - 1;\n    for (let i = 0; i < len2; i++) {\n        let p = str.charAt(i);\n        str = str.charAt(i) + p + str.charAt(len2 - i - 1);\n    }\n    return str;\n}\n\nconst reverse9 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    for (let i = 0; i < len; i++) {\n        let p = str.charAt(i);\n        str = p + str.charAt(len - i - 1);\n    }\n    return str;\n}\n\nconst reverse10 = (x) => {\n    let r = x;\n    let str = x.toString();\n    let len = str.length;\n    for (let i = 0; i < len; i++) {\n        let p = str.charAt(i);\n        str = str.charAt(i) + p + str.charAt(len - i - 1);\n    }\n    return str;\n}\n\nconst"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let num = 0\n  for (let i = 0; i < s.length; i++) {\n    num += s.charCodeAt(i) - 97\n  }\n  return num\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n  //  console.log(`fruitDistribution ${s} ${n}`)\n    const s = s.trim().split(\" \").join(\"\").split(\"\\n\").map(parseInt)\n    const n = parseInt(n)\n    let fruitDist = []\n    for (let i = 0; i < n; i++) {\n      fruitDist.push(s.shift())\n    }\n    const nFruit = fruitDist.reduce((prev, curr) => prev + curr, 0)\n    return nFruit\n  }\n  // var a = fruitDistribution(\"100 apples and1ora nges\",1 2 0)\n  // console.log(a)\n  // var b = fruitDistribution(\"100 apples and1ora nges\",1 2 1)\n  // console.log(b)\n  // var c = fruitDistribution(\"100 apples and1ora nges\",1 2 2)\n  // console.log(c)\n  // var d = fruitDistribution(\"100 apples and1ora nges\",1 2 3)\n  // console.log(d)\n  // var e = fruitDistribution(\"100 apples and1ora nges\",1 2 4)\n  // console.log(e)\n  // var f = fruitDistribution(\"100 apples and1ora nges\",1 2 5)\n  // console.log(f)\n  // var g = fruitDistribution(\"100 apples and1ora nges\",1 2 6)\n  // console.log(g)\n  // var h = fruitDistribution(\"100 apples and1ora nges\",1 2 7)\n  // console.log(h)\n  // var i = fruitDistribution(\"100 apples and1ora nges\",1 2 8)\n  // console.log(i)\n  // var j = fruitDistribution(\"100 apples and1ora nges\",1 2 9)\n  // console.log(j)\n  // var k = fruitDistribution(\"100 apples and1ora nges\",1 2 10)\n  // console.log(k)\n  // var l = fruitDistribution(\"100 apples and1ora nges\",1 2 11)\n  // console.log(l)\n  // var m = fruitDistribution(\"100 apples and1ora nges\",1 2 12)\n  // console.log(m)\n  // var n = fruitDistribution(\"100 apples and1ora nges\",1 2 13)\n  // console.log(n)\n  // var o = fruitDistribution(\"100 apples and1ora nges\",1 2 14)\n  // console.log(o)\n  // var p = fruitDistribution(\"100 apples and1ora nges\",1 2 15)\n  // console.log(p)\n  // var q = fruitDistribution(\"100 apples and1ora nges\",1 2 16)\n  // console.log(q)\n  // var r = fruitDistribution(\"100 apples and1ora nges\",1 2 17)\n  // console.log(r)\n  // var s = fruitDistribution(\"100 apples and1ora nges\",1 2 18)\n  // console.log(s)\n  // var t = fruitDistribution(\"100 apples and1ora nges\",1 2 19)\n  // console.log(t)\n  // var u = fruitDistribution(\"100 apples and1ora nges\",1 2 20)\n  // console.log(u)\n  // var v = fruitDistribution(\"100 apples and1ora nges\",1 2 21)\n  // console.log(v)\n  // var w = fruitDistribution(\"100 apples and1ora nges\",1 2 22)\n  // console.log(w)\n  // var x = fruitDistribution(\"100 apples and1ora nges\",1 2 23)\n  // console.log(x)\n  // var y = fruitDistribution(\"100 apples and1ora nges\",1 2 24)\n  // console.log(y)\n  // var z = fruitDistribution(\"100 apples and1ora nges\",1 2 25)\n  // console.log(z)\n  // var a = fruitDistribution(\"100 apples and1ora nges\",1 2 26)\n  // console.log(a)\n  // var b = fruitDistribution(\"100 apples and1ora nges\",1 2 27)\n  // console.log(b)\n  // var c = fruitDistribution(\"100 apples and1ora nges\",1 2 28)\n  // console.log(c)\n  // var d = fruitDistribution(\"100 apples and1ora nges\",1 2 29)\n  // console.log(d)\n  // var e = fruitDistribution(\"100 apples and1ora nges\",1 2 30)\n  // console.log(e)\n  // var f = fruitDistribution(\"100 apples and1ora nges\",1 2 31)\n  // console.log(f)\n  // var g = fruitDistribution(\"100 apples and1ora nges\",1 2 32)\n  // console.log(g)\n  // var h = fruitDistribution(\"100 apples and1ora nges\",1 2 33)\n  // console.log(h)\n  // var i = fruitDistribution(\"100 apples and1ora nges\",1 2 34)\n  // console.log(i)\n  // var j = fruitDistribution(\"100 apples and1ora nges\",1 2 35)\n  // console.log(j)\n  // var k = fruitDistribution(\"100 apples and1ora nges\",1 2 36)\n  // console.log(k)\n  // var l = fruitDistribution(\"100 apples and1ora nges\",1 2 37)"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n\n    const min = arr[0];\n    let minIndex = 0;\n\n    arr.forEach((x, i) => {\n        if (x === min) {\n            return;\n        }\n        if (x % 2 === 0 && x < min) {\n            min = x;\n            minIndex = i;\n        }\n    });\n\n    return [min, minIndex];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let max = lst[0];\n    for (let i = 1; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n        }\n    }\n    if (max === 0) {\n        return -1;\n    }\n    let count = 1;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] === max) {\n            count++;\n        }\n    }\n    return max * count;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (!lst) return []\n  if (!lst.length) return lst\n  const sorted = []\n  const min = lst.reduce((a, b) => (b < a? b : a), 0)\n  for (let i = 0; i < lst.length; i++) {\n    sorted.push(lst[i])\n    const max = lst.reduce((a, b) => (b > a? b : a), 0)\n    if (min === max) {\n      break\n    }\n    lst.splice(i, 1)\n    i--\n  }\n  return sorted\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\nconst triangleArea = (a, b, c) => {\n    const area = Math.sqrt(Math.pow(b, 2) + Math.pow(c, 2) - 2 * b * c);\n    return (area.toFixed(2));\n}\n\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const qs = q.slice();\n  const sum = qs.reduce((acc, elem, index) => acc + elem, 0);\n\n  return qs.length === 1 && sum <= w;\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const len = arr.length\n  let min = Math.min(arr[0], arr[1])\n  let index = 0\n  let i = 0\n  let j = 0\n  let p = arr[0]\n  let q = arr[1]\n  let k = 0\n\n  while (min!= p && min!= q) {\n    if (arr[i] > arr[j]) {\n      p = arr[i]\n      q = arr[j]\n    } else if (arr[i] < arr[j]) {\n      p = arr[j]\n      q = arr[i]\n    }\n    i++\n    j++\n    k++\n    if (i >= len) {\n      i = 0\n    }\n    if (j >= len) {\n      j = 0\n    }\n    min = Math.min(arr[i], arr[j])\n  }\n  return k\n}\n\nconsole.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  const lst1Length = lst1.length\n  const lst2Length = lst2.length\n  const maxLength = Math.max(lst1Length, lst2Length)\n\n  let index = 0\n  let result = []\n  while (index < maxLength) {\n    if (lst1[index] === lst2[index]) {\n      result.push(lst1[index])\n      index++\n    } else if (lst1[index] > lst2[index]) {\n      index++\n    } else if (lst1[index] < lst2[index]) {\n      index++\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primeFactors = getPrimeFactors(a);\n  let result = false;\n  for (let i = 0; i < primeFactors.length; i++) {\n    if (a % primeFactors[i] === 0) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n\nfunction getPrimeFactors(a) {\n  let primeFactors = [];\n  for (let i = 1; i < a; i++) {\n    if (a % i === 0) {\n      primeFactors.push(i);\n    }\n  }\n  return primeFactors;\n}\n\nexport { isMultiplyPrime };\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  let m = Math.pow(n, 2) - x;\n  return m % n === 0;\n};\n\nexport { isSimplePower };\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a == 0) return false\n  if (a < 0) return false\n  if (a % 2 == 0) return false\n  const s = a +'' + a +'' + a +'' + a +'' + a\n  const i = new Int32Array(s.length)\n  for (let i = 0; i < s.length; i++) {\n    i[i] = parseInt(s.charAt(i), 10)\n  }\n  const sum = i[0] + i[1] + i[2] + i[3] + i[4] + i[5]\n  return sum == a * a * a * a * a * a\n}\n\n//console.log(iscube(64))\n\nconsole.log(iscube(1))\nconsole.log(iscube(2))\nconsole.log(iscube(-1))\nconsole.log(iscube(64))\nconsole.log(iscube(0))\nconsole.log(iscube(180))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const s = num.split('');\n  let result = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === 'A' && s[i + 1] === 'B') {\n      result += 1;\n    }\n  }\n  return result;\n}\nconsole.log(hexKey('ABED1A33'));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    let str = \"\";\n    while (decimal > 0) {\n        str += (decimal % 2)? '1' : '0';\n        decimal = decimal / 2;\n    }\n    str = `db${str}db`;\n    return str;\n};\n\n/*\n  Given a string, it returns the length of the string\n  Examples:\n  lengthOf(\"abc\") returns 3\n  lengthOf(\"abb\") returns 2\n  lengthOf(\"\") returns 0\n*/\nconst lengthOf = (str) => {\n    let str = \"\";\n    while (str.length < str.length) {\n        str = str + str;\n    }\n    return str.length;\n};\n\n/*\n  Given a string and a charcter, it returns the position of that charcter in the string\n  Examples:\n  positionOf(\"abc\", 'b') returns 1\n  positionOf(\"abc\", 'z') returns -1\n  positionOf(\"abc\", 'a') returns 0\n*/\nconst positionOf = (str, charcter) => {\n    let position = -1;\n    let pos = 0;\n    while (str.charAt(pos)!== charcter) {\n        pos++;\n    }\n    while (pos < str.length) {\n        if (str.charAt(pos) === charcter) {\n            return pos;\n        }\n        pos++;\n    }\n    return -1;\n};\n\n/*\n  Given a string, it returns the position of a substring in the string\n  Examples:\n  positionOf(\"abc\", \"bc\") returns 1\n  positionOf(\"abc\", \"aa\") returns -1\n  positionOf(\"abc\", \"ab\") returns 0\n*/\nconst positionOf = (str, substr) => {\n    let start = 0;\n    let end = 0;\n    let strlen = lengthOf(str);\n    while (start < strlen) {\n        end = positionOf(str, substr, start);\n        if (end === -1) {\n            return -1;\n        }\n        start = end + 1;\n    }\n    return start;\n};\n\nconst positionOf = (str, substr, start) => {\n    let index = start;\n    let strlen = lengthOf(str);\n    while (index < strlen) {\n        if (str.charAt(index) === substr.charAt(0)) {\n            if (index + substr.length - 1 <= strlen) {\n                if (str.charAt(index + substr.length - 1) === substr.charAt(substr.length - 1)) {\n                    return index;\n                }\n            }\n        }\n        index++;\n    }\n    return -1;\n};\n\n/*\n  Given a string and a sub string, it returns the position of a sub string in the string\n  Examples:\n  positionOf(\"abc\", \"a\") returns 0\n  positionOf(\"abc\", \"ab\") returns 1\n  positionOf(\"abc\", \"c\") returns -1\n  positionOf(\"abc\", \"zz\") returns -1\n*/\nconst positionOf = (str, substr) => {\n    let start = 0;\n    let end = 0;\n    let strlen = lengthOf(str);\n    while (start < strlen) {\n        end = positionOf(str, substr, start);\n        if (end === -1) {\n            return -1;\n        }\n        start = end + 1;\n    }\n    return start;\n};\n\n/*\n  Given a string and a charcter, it returns the index of that charcter in the string\n  Examples:\n  indexOf(\"abc\", 'b') returns 1\n  indexOf(\"abc\", 'z') returns -1\n  indexOf(\"abc\", 'a') returns 0\n*/\nconst indexOf = (str, charcter) => {\n    let pos = 0;\n    while (pos < str.length) {\n        if (str.charAt(pos) === charcter) {\n            return pos;\n        }\n        pos++;\n    }\n    return -1;\n};\n\n/*\n  Given a string and a charcter, it returns the index of that charcter in the string\n  Examples:\n  indexOf(\"abc\", 'b') returns 1\n  indexOf(\"abc\", 'z') returns -1\n  indexOf(\"abc\", 'a') returns 0\n*/\nconst indexOf = (str, charcter) => {\n    let pos = 0;\n    while (pos < str.length) {\n        if (str.charAt(pos) === charcter) {\n            return pos;\n        }\n        pos++;\n    }\n    return -1;\n};\n\n/*\n  Given a string, it returns the last index of a charcter in the string\n  Examples:\n  lastIndexOf(\"abc\", 'b') returns 2\n  lastIndexOf(\"abc\", 'z') returns -1\n  lastIndexOf(\"abc\", 'a') returns -1\n*/\nconst lastIndexOf = (str, charcter) => {\n    let pos = -1;\n    while (pos < str.length) {\n        if (str.charAt(pos) === charcter) {\n            return pos;\n        }\n        pos--;\n    }\n    return -1;\n};\n\n/*\n  Given a string and a charcter, it returns the index of that charcter in the string\n  Examples:\n  lastIndexOf(\"abc\", 'b') returns 2\n  lastIndexOf(\"abc\", 'z') returns -1\n  lastIndexOf(\"abc\", 'a') returns -1\n*/\nconst lastIndexOf = (str, charcter) => {\n    let pos = -1;\n    while (pos < str.length) {\n        if (str.charAt(pos) === charcter) {\n"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let count = 1\n  for (let i = 0; i < s.length - 2; i++) {\n    if (s[i + 1] === s[i + 2]) {\n      count++\n    } else {\n      count = 1\n    }\n    if (count > 2) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n    const sorted = grades.sort((a, b) => a - b);\n    const letterGrade = [];\n    for (let i = 0; i < sorted.length; i++) {\n        let letterGrade = sorted[i] < 3.3? 'B-' : sorted[i] < 3.7? 'C-' : sorted[i] < 4.0? 'A-' : 'D-'\n        letterGrade +='' + sorted[i];\n        letterGrade += sorted[i] < 1.3? 'C-' : sorted[i] < 1.7? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 1.3? 'B-' : sorted[i] < 2.3? 'C-' : 'A+';\n        letterGrade +='' + sorted[i] < 2.7? 'C-' : 'B+';\n        letterGrade +='' + sorted[i] < 3.0? 'C-' : 'A+';\n        letterGrade +='' + sorted[i] < 3.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 3.7? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'C-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B-' : 'A+';\n        letterGrade +='' + sorted[i] < 4.0? 'B"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength2 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 2 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength3 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  let counter = 2;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % counter === 0) {\n        isPrime = false;\n        break;\n      }\n      counter++;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength4 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      isPrime = false;\n      break;\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength5 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 2 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength6 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 3 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength7 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 5 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength8 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 7 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength9 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 11 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength10 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 13 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength11 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 17 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength12 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 19 === 0) {\n        isPrime = false;\n        break;\n      }\n    }\n  }\n  return isPrime;\n};\n\nconst primeLength13 = (string) => {\n  if (string.length === 1) return false;\n  let isPrime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string.substr(i, 1)!== string.charAt(i - 1)) {\n      if (i % 23 === 0) {\n        isPrime = false;\n        break;\n      }\n"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n  let start = 0;\n  let end = n;\n  while (start < end) {\n    let start_num = start * 10 + 1;\n    if (start_num > 9999) {\n      return false;\n    }\n    let end_num = end * 10 + 9;\n    if (end_num > 9999) {\n      return false;\n    }\n    let count = 0;\n    while (start_num <= end_num) {\n      count += start_num === end_num? 1 : 0;\n      start_num *= 10;\n      end_num *= 10;\n    }\n    if (count === n) {\n      return true;\n    }\n    start += 1;\n    end -= 1;\n  }\n  return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const n = N.toString(2);\n  const s = new Array(n.length);\n  let total = 0;\n  \n  for (let i = 0; i < n.length; i++) {\n    s[i] = parseInt(n[i]);\n    total += s[i];\n  }\n  \n  return total;\n};\n\nconst getN = () => {\n  return process.stdin.readLine();\n};\n\nprocess.stdin.resume();\nprocess.stdin.setEncoding(\"ascii\");\n\nlet T = Number(getN());\n\nfor (let t = 0; t < T; t++) {\n  let N = Number(getN());\n  let result = solve(N);\n  process.stdout.write(`The sum of digits of ${N} is ${result}\\n`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let i, k, sum = 0;\n  for (i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    let chars = new Set();\n    let charsArray = new Array(s.length);\n    let order = new Array(s.length);\n    for(let i = 0; i < s.length; i++) {\n        chars.add(s[i]);\n        charsArray[i] = s[i];\n    }\n    let shuffled = chars.values();\n    let index = 0;\n    let i = 0;\n    while(i < shuffled.length) {\n        let c = shuffled[i];\n        let count = 0;\n        for(let j = 0; j < chars.size; j++) {\n            if(chars.has(charsArray[j])) {\n                count++;\n                if(count === 2) {\n                    order[index] = charsArray[j];\n                    chars.delete(charsArray[j]);\n                    index++;\n                }\n            }\n        }\n        i++;\n    }\n    return order.join(' ');\n};\n\nconsole.log(antiShuffle('Hi'));\nconsole.log(antiShuffle('hello'));\nconsole.log(antiShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr.push(lst[i][x])\n  arr.sort((a, b) => a-b)\n  for(let i = 0; i < lstlen; i++)\n    arr[i] = [arr[i][0], arr[i][1]]\n  arr.sort((a, b) => b[0]-a[0])\n  return arr\n}\n\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr.push(lst[i][x])\n  arr.sort((a, b) => b-a)\n  for(let i = 0; i < lstlen; i++)\n    arr[i] = [arr[i][0], arr[i][1]]\n  arr.sort((a, b) => a[1]-b[1])\n  return arr\n}\n\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr.push(lst[i][x])\n  arr.sort((a, b) => b-a)\n  for(let i = 0; i < lstlen; i++)\n    arr[i] = [arr[i][0], arr[i][1]]\n  arr.sort((a, b) => a[0]-b[0])\n  return arr\n}\n\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr.push(lst[i][x])\n  arr.sort((a, b) => b-a)\n  for(let i = 0; i < lstlen; i++)\n    arr[i] = [arr[i][0], arr[i][1]]\n  arr.sort((a, b) => a[1]-b[1])\n  return arr\n}\n\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr.push(lst[i][x])\n  arr.sort((a, b) => b-a)\n  for(let i = 0; i < lstlen; i++)\n    arr[i] = [arr[i][0], arr[i][1]]\n  arr.sort((a, b) => a[0]-b[0])\n  return arr\n}\n\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr.push(lst[i][x])\n  arr.sort((a, b) => b-a)\n  for(let i = 0; i < lstlen; i++)\n    arr[i] = [arr[i][0], arr[i][1]]\n  arr.sort((a, b) => a[1]-b[1])\n  return arr\n}\n\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr.push(lst[i][x])\n  arr.sort((a, b) => b-a)\n  for(let i = 0; i < lstlen; i++)\n    arr[i] = [arr[i][0], arr[i][1]]\n  arr.sort((a, b) => a[0]-b[0])\n  return arr\n}\n\nconst getRow = (lst, x) => {\n  const lstlen = lst.length\n  if(lstlen === 0)\n    return []\n  if(lstlen === 1)\n    return [x]\n  const arr = []\n  for(let i = 0; i < lstlen; i++)\n    arr"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  let i = 0\n  let j = len - 1\n  let tmp\n  let sum = 0\n\n  while (i < j) {\n    if (sum % 2 === 0) {\n      while (j > i) {\n        tmp = array[j]\n        array[j] = array[i]\n        array[i] = tmp\n        sum += tmp\n        j -= 1\n      }\n    } else {\n      while (i > j) {\n        tmp = array[i]\n        array[i] = array[j]\n        array[j] = tmp\n        sum += tmp\n        i -= 1\n      }\n    }\n  }\n  return array\n}\n\nconsole.log(sortArray([5, 2, 4, 3, 0, 1, 5, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let rotated = alphabet.split(\"\").reverse().reverse().join(\"\");\n  let encryptString = s.split(\"\").map((letter, index) => {\n    return letter.toUpperCase() + rotated[index * 2];\n  });\n  return encryptString.join(\"\");\n};\n\n//encrypt('hello world')\n\n/*\n  Create a function decrypt that takes a str as an argument and returns \n  the original string with the alphabet decrypted.\n  The alphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  let encrypted = s.split(\"\").reverse().join(\"\");\n  let decrypted = encrypted.split(\"\").map((letter, index) => {\n    return letter.toLowerCase() + alphabet[index * 2];\n  });\n  return decrypted.join(\"\");\n};\n\n//decrypt('hello world')\n\n//encrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt('ix')\n//decrypt('ix')\n//decrypt('gf')\n//decrypt('kj')\n//encrypt"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n    let smallest = null;\n    lst.forEach(element => {\n        if (smallest === null) {\n            smallest = element;\n        } else {\n            if (smallest > element) {\n                smallest = element;\n            }\n        }\n    });\n    return smallest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const strArr = S.split(\" \");\n  let strArrLength = strArr.length;\n  let strArrLengthMinusOne = strArrLength - 1;\n  for (let i = 0; i < strArrLengthMinusOne; i++) {\n    if (strArr[i] === \"I\") {\n      return true;\n    }\n  }\n  return false;\n};\n\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = x + y + z\n  const b = x - y - z\n  const c = x * y * z\n  const d = x / y / z\n  const e = x % y % z\n  const f = x ** y ** z\n  const g = x + y + z\n  const h = x - y - z\n  const i = x * y * z\n  const j = x / y / z\n  const k = x % y % z\n  const l = x ** y ** z\n  return a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b * c && a === b / c && a === b % c && a === b ** c && a === b + c && a === b - c && a === c + b && a === c - b && a === b"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.split('').map((letter, i) => {\n    const index = message.indexOf(letter);\n    if (index === i) {\n      return letter;\n    }\n    return message[index + 1];\n  }).join('');\n};\n\nmodule.exports = encode;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let l = lst.length;\n  let max = 0;\n  let sum = 0;\n  let i = 0;\n  while(i < l){\n    if(lst[i] < 10){\n      sum = sum + lst[i];\n    }else{\n      max = max + lst[i];\n    }\n    i = i + 1;\n  }\n  return max;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  return Object.keys(dict).reduce((isDict, key) => {\n    const test = dict[key].toUpperCase() === dict[key].toLowerCase();\n    return isDict && test;\n  }, true);\n};\n\n/*\n  Given a string, return true if the string is an integer.\n  Examples:\n  checkInt(42) should return true.\n  checkInt(\"43\") should return false.\n  checkInt(\"a\") should return false.\n  checkInt(\"\") should return false.\n  checkInt(42.34) should return false.\n*/\nconst checkInt = (number) => {\n  return isNaN(parseInt(number)) === false;\n};\n\nconst getInt = (number) => {\n  const str = number.toString();\n  return parseInt(str);\n};\n\nconst getFloat = (number) => {\n  const str = number.toString();\n  return parseFloat(str);\n};\n\n/*\n  Given a number, return the number as a string.\n  Examples:\n  getString(42) should return \"42\".\n  getString(43) should return \"43\".\n  getString(a) should return \"a\".\n  getString(\") should return \"\"\n  getString(2.3) should return \"2.3\".\n  getString(2.3.4) should return \"2.3.4\".\n*/\nconst getString = (number) => {\n  return number.toString();\n};\n\n/*\n  Given a string, return true if it contains an int.\n  Examples:\n  containsInt(\"a\") should return false.\n  containsInt(\"42\") should return true.\n  containsInt(\"42a\") should return false.\n*/\nconst containsInt = (string) => {\n  return string.indexOf(\".\")!== -1 || string.indexOf(\"-\")!== -1 || string.indexOf(\"+\")!== -1;\n};\n\n/*\n  Given a number, return true if it is an even number.\n  Examples:\n  isEven(42) should return true.\n  isEven(43) should return false.\n  isEven(a) should return false.\n  isEven(\") should return false.\n  isEven(2.3) should return false.\n  isEven(2.3.4) should return false.\n*/\nconst isEven = (number) => {\n  return number % 2 === 0;\n};\n\n/*\n  Given a number, return true if it is an odd number.\n  Examples:\n  isOdd(42) should return false.\n  isOdd(43) should return true.\n  isOdd(a) should return false.\n  isOdd(\") should return false.\n  isOdd(2.3) should return false.\n  isOdd(2.3.4) should return false.\n*/\nconst isOdd = (number) => {\n  return number % 2!== 0;\n};\n\n/*\n  Given a number, return true if it is a power of 2.\n  Examples:\n  isPowerOf2(42) should return true.\n  isPowerOf2(43) should return false.\n  isPowerOf2(a) should return false.\n  isPowerOf2(\") should return false.\n  isPowerOf2(2.3) should return false.\n  isPowerOf2(2.3.4) should return false.\n*/\nconst isPowerOf2 = (number) => {\n  return number && (number === 2 || (number & (number - 1)) === 0);\n};\n\n/*\n  Given a number, return true if it is a prime number.\n  Examples:\n  isPrime(42) should return true.\n  isPrime(43) should return false.\n  isPrime(a) should return false.\n  isPrime(\") should return false.\n  isPrime(2.3) should return false.\n  isPrime(2.3.4) should return false.\n*/\nconst isPrime = (number) => {\n  const num = getInt(number);\n  return isInt(num) && num === Math.floor(num) && number % 1 === 0 && isEven(number) === false && number > 1;\n};\n\nconst isInt = (number) => {\n  return number === parseInt(number);\n};\n\nconst isFloat = (number) => {\n  return number === parseFloat(number);\n};\n\nmodule.exports = {\n  getInt,\n  getFloat,\n  getString,\n  containsInt,\n  isEven,\n  isOdd,\n  isPowerOf2,\n  isPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n <= 0) {\n    return [];\n  }\n\n  const arr = [];\n  for (let i = 1; i < n; i++) {\n    arr.push(i);\n  }\n\n  return arr;\n};\n\nmodule.exports = countUpTo;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    let aStr = String(a);\n    let bStr = String(b);\n    let aDig = aStr.length;\n    let bDig = bStr.length;\n    let result = 1;\n    for (let i = 0; i < aDig; i++) {\n        result = multiply(parseInt(aStr[i]), parseInt(bStr[i]));\n    }\n    return result;\n};\n\nmultiply(14, -15);\nmultiply(2020, 1851);\nmultiply(148, 412);\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      result++;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const valueFloat = parseFloat(value)\n  const floor = Math.floor(valueFloat)\n  const ceil = Math.ceil(valueFloat)\n  if (ceil - floor === 0) {\n    return Math.round(valueFloat)\n  } else if (ceil - floor < 0) {\n    return floor\n  } else {\n    return ceil\n  }\n}\n\n/*\n  Convert a string into an integer.\n  E xamples\n  >>> stringToInteger(\"10\")\n  10\n  >>> stringToInteger(\"15.3\")\n  15\n  >>> stringToInteger(\"-14.5\")\n  -15\n  >>> stringToInteger(\"1a\")\n  1\n  >>> stringToInteger(\"\")\n  undefined\n  >>> stringToInteger(null)\n  undefined\n  >>> stringToInteger(undefined)\n  undefined\n  >>> stringToInteger(\" \")\n  undefined\n  >>> stringToInteger(\"a\")\n  undefined\n  >>> stringToInteger(true)\n  undefined\n  >>> stringToInteger(false)\n  undefined\n  */\nconst stringToInteger = (value) => {\n  if (value === undefined || value === null || value === \"\") {\n    return undefined\n  } else if (typeof value === \"boolean\") {\n    return value? 1 : 0\n  } else if (typeof value === \"string\") {\n    return parseInt(value, 10)\n  } else {\n    return value\n  }\n}\n\n/*\n  Convert an integer into a string.\n  E xamples\n  >>> integerToString(10)\n  \"10\"\n  >>> integerToString(15.3)\n  \"15.3\"\n  >>> integerToString(-15.3)\n  \"-15.3\"\n  >>> integerToString(1)\n  \"1\"\n  >>> integerToString(undefined)\n  undefined\n  >>> integerToString(null)\n  undefined\n  >>> integerToString(0)\n  \"0\"\n  >>> integerToString(1.3)\n  \"1.3\"\n  >>> integerToString(true)\n  \"1\"\n  >>> integerToString(false)\n  \"0\"\n  */\nconst integerToString = (value) => {\n  if (value === undefined || value === null || value === \"\") {\n    return undefined\n  } else if (typeof value === \"number\") {\n    return value.toString()\n  } else if (typeof value === \"boolean\") {\n    return value? \"1\" : \"0\"\n  } else {\n    return value\n  }\n}\n\n/*\n  Given a string, get the value of the first character in the string.\n  E xamples\n  >>> firstCharacter(\"Hello\")\n  \"H\"\n  >>> firstCharacter(\"a\")\n  \"A\"\n  >>> firstCharacter(\" \")\n  \"\"\n  >>> firstCharacter(\"\")\n  \"\"\n  >>> firstCharacter(null)\n  \"\"\n  >>> firstCharacter(undefined)\n  \"\"\n  */\nconst firstCharacter = (value) => {\n  if (value === undefined || value === null || value === \"\") {\n    return \"\"\n  } else {\n    return value.charAt(0)\n  }\n}\n\n/*\n  Given a string, return the string reversed.\n  E xamples\n  >>> reverse(\"Hello\")\n  \"olleH\"\n  >>> reverse(\"\")\n  \"\"\n  >>> reverse(null)\n  \"\"\n  >>> reverse(undefined)\n  \"\"\n  */\nconst reverse = (value) => {\n  if (value === undefined || value === null || value === \"\") {\n    return \"\"\n  } else {\n    return value.split(\"\").reverse().join(\"\")\n  }\n}\n\n/*\n  Given a string, return the string with all the vowels removed.\n  E xamples\n  >>> removeVowels(\"Hello\")\n  \"elloh\"\n  >>> removeVowels(\"\")\n  \"\"\n  >>> removeVowels(null)\n  \"\"\n  >>> removeVowels(undefined)\n  \"\"\n  */\nconst removeVowels = (value) => {\n  if (value === undefined || value === null || value === \"\") {\n    return \"\"\n  } else {\n    return value.replace(/[aeiou]/gi, '')\n  }\n}\n\nmodule.exports = {\n  closestInteger,\n  stringToInteger,\n  integerToString,\n  firstCharacter,\n  reverse,\n  removeVowels\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let pile = []\n  for (let i = 1; i <= n; i++) {\n    pile.push(n)\n  }\n  return pile\n}\n\nexport { makeAPile }\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  let words = s.split(/(\\s|,)/g)\n  return words\n}\n\nexport { wordsString }\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x < y) {\n    return -1;\n  }\n  let max = Math.ceil(x);\n  for (let i = max; i <= y; i += 2) {\n    if (i === y) {\n      return y;\n    }\n    if (i === x) {\n      return x;\n    }\n  }\n  return -1;\n};\n\nconsole.log(chooseNum(12, 15)); // 14\nconsole.log(chooseNum(13, 12)); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let sum = 0;\n  let count = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n    count++;\n  }\n  return sum / count;\n}\n\nconst main = () => {\n  console.log(roundedAvg(1, 5));\n  console.log(roundedAvg(7, 5));\n  console.log(roundedAvg(10, 20));\n  console.log(roundedAvg(20, 33));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n    let res = []\n    let arr = x.sort()\n    for(let i=0;i<x.length;i++){\n        if(arr[i]%2==0){\n            res.push(arr[i])\n        }\n    }\n    return res\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]))\nconsole.log(uniqueDigits([152, 323, 1422, 10]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLength = arr.length;\n  if (arrLength === 0) {\n    return [];\n  }\n  const sortedArr = arr.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  const reversedArr = sortedArr.reverse();\n  const sortedArray = sortedArr.concat(reversedArr);\n  const sortedArrayLength = sortedArray.length;\n  const lengthArray = sortedArray.slice(0, sortedArrayLength);\n  const nameArray = [];\n  lengthArray.forEach((elem, index) => {\n    nameArray.push(sortedArrayLength - index - 1);\n  });\n  return nameArray;\n};\n\nmodule.exports = byLength;<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const elems = [1]\n  for (let i = 1; i < n; i++) {\n    elems.push(elems[i - 1] * i)\n  }\n  return elems\n}\n\nconst factorialo = (n) => {\n  const a = f(n)\n  return a.reduce((a, b) => a + b)\n}\n\nconst sum = (n) => {\n  const nFactorials = factorialo(n)\n  return nFactorials.reduce((a, b) => a + b)\n}\n\nconsole.log(sum(5))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let sumEven = 0, sumOdd = 0;\n    for (let i = 1; i <= n; i++) {\n        let num = i;\n        while (num > 0) {\n            sumEven += num % 2;\n            num = Math.floor(num / 2);\n        }\n    }\n    for (let i = n - 1; i >= 1; i--) {\n        let num = i;\n        while (num > 0) {\n            sumOdd += num % 2;\n            num = Math.floor(num / 2);\n        }\n    }\n    return [sumEven, sumOdd];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n    const count = 0;\n    const sums = 0;\n    for (let i = 0; i < arr.length; i++) {\n        const num = arr[i];\n        if (num > 0) {\n            sums += num;\n        }\n        if (sums > 0) {\n            count += 1;\n        }\n    }\n    return count;\n};\n\nmodule.exports = countNums;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    let arrSum = arr.reduce((previous, current, index) => previous + current, 0);\n    arr.forEach(element => {\n        let arrSumOfElement = arrSum - element;\n        if (arrSumOfElement === 0) {\n            arrSum = arrSum - element;\n        } else {\n            arrSum = arrSumOfElement;\n        }\n    });\n    if (arrSum === 0) {\n        return true;\n    } else {\n        return false;\n    }\n};\n\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2, 3]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\nmoveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0)\n  {\n    return false;\n  }\n\n  let max = lst1.length > lst2.length? lst1.length : lst2.length;\n  let i = 0, j = 0;\n  let flag = 0;\n  while(i < max && j < max)\n  {\n    if(lst1[i] < lst2[j])\n    {\n      lst1[i] = lst1[i] + 2*(lst1[i] % 2);\n      i++;\n    }\n    else\n    {\n      lst2[j] = lst2[j] + 2*(lst2[j] % 2);\n      j++;\n    }\n  }\n\n  if(i === max)\n  {\n    return true;\n  }\n  else if(j === max)\n  {\n    return false;\n  }\n  else\n  {\n    return false;\n  }\n}\n\nconst lst1 = [1, 2, 3, 4];\nconst lst2 = [1, 5, 3, 4];\nconsole.log(exchange(lst1, lst2));<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const result = {};\n  const testArr = test.split('');\n  testArr.forEach( (value, index) => {\n    if (result[value]) {\n      result[value] += 1;\n    } else {\n      result[value] = 1;\n    }\n  });\n  return result;\n}\n\n/*Given a string s, return a string with all occurences of\n  the character 'a' replaced with 'aa'.\n  Example:\n  replacer('abcd') == 'aaa'\n  replacer('a b c d') == 'aa b c d'\n  */\nconst replacer = (test) => {\n  let result = '';\n  for (let i = 0; i < test.length; i++) {\n    if (test[i] === 'a') {\n      result += 'aa';\n    } else {\n      result += test[i];\n    }\n  }\n  return result;\n}\n\n/*Given two strings s and t, return a string with the first string\n  appended to the last string of the second string, and then\n  returned again.\n  Example:\n  concat('abcd', 'xyz') == 'abcdxyz'\n  concat('abcd', 'xyz') == 'abcdxyz'\n  concat('abcd', 'xyz') == 'abcdxyz'\n  */\nconst concat = (first, second) => {\n  const result = first + second;\n  return result;\n}\n\n/*Given two strings s and t, return a string with t replacing every\n  occurrence of a character in s with the character t.\n  Example:\n  replaces('abcd', 'a', 'z') == 'zdz'\n  replaces('abcd', 'a', 'z') == 'zdz'\n  replaces('abcd', 'a', 'z') == 'zdz'\n  */\nconst replaces = (test, sub, replace) => {\n  const result = test.replace(sub, replace);\n  return result;\n}\n\n/*Given two strings s and t, return a string with t replacing every\n  occurrence of a character in s with the character t.\n  Example:\n  replaces('abcd', 'a', 'z') == 'zdz'\n  replaces('abcd', 'a', 'z') == 'zdz'\n  replaces('abcd', 'a', 'z') == 'zdz'\n  */\nconst reverses = (test, sub, replace) => {\n  const result = test.replace(sub, replace);\n  return result;\n}\n\n/*Given a string s and a dictionary of characters and their counts,\n  return a string with the character in s replaced by the most\n  frequently occuring character in the dictionary.\n  Example:\n  replaces('abcdefghijklmnopqrst', {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20}) == 'bbccccdddeeeffffgh'\n  replaces('abcdefghijklmnopqrst', {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20}) == 'bbccccdddeeeffffgh'\n  replaces('abcdefghijklmnopqrst', {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20}) == 'bbccccdddeeeffffgh'\n  */\nconst replaces2 = (test, dictionary) => {\n  const result = test.replace(dictionary);\n  return result;\n}\n\n/*Given a string s and a dictionary of characters and their counts,\n  return a string with the character in s replaced by the most\n  frequently occuring character in the dictionary.\n  Example:\n  replaces('abcdefghijklmnopqrst', {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16, 'q': 17, 'r': 18,'s': 19, 't': 20}) == 'bbccccdddeeeffffgh'\n  replaces('abcdefghijklmnopqrst', {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10, 'k': 11, 'l': 12,'m': 13, 'n': 14, 'o': 15, 'p': 16"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const sArray = s.split('');\n    const cArray = c.split('');\n    const result = [];\n    let i = 0;\n    let j = 0;\n    let flag = false;\n    while(i < sArray.length && j < cArray.length){\n        if(sArray[i] === cArray[j]){\n            i++;\n            j++;\n        }else{\n            flag =!flag;\n            i++;\n        }\n        result.push(sArray[i-1]);\n    }\n    if(flag){\n        return (result.join(''),true);\n    }\n    return (result.join(''),false);\n}\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let count = 0\n  let odd = []\n  for(let i = 0; i < lst.length; i++) {\n    let num = lst[i]\n    let numStr = \"\"\n    for(let j = 0; j < num.length; j++) {\n      if(num[j] % 2 == 1) {\n        count++\n      }\n      numStr += num[j]\n    }\n    odd.push(numStr)\n  }\n  return odd\n}\n\nconst oddCountTest = [\n  [['3',\"11111111\"],[\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n    \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]],\n  [['1234567'],[\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]]\n]\n\nfor(let i = 0; i < oddCountTest.length; i++) {\n  let lst = oddCountTest[i][0]\n  let exp = oddCountTest[i][1]\n  let act = oddCount(lst)\n  if(act.length!= exp.length) {\n    console.log(`failure: ${act}`)\n    console.log(`should be: ${exp}`)\n    throw Error(\"test failed\")\n  }\n  for(let j = 0; j < act.length; j++) {\n    if(act[j]!= exp[j]) {\n      console.log(`failure: ${act}`)\n      console.log(`should be: ${exp}`)\n      throw Error(\"test failed\")\n    }\n  }\n  console.log(\"success\")\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let minSum = nums[0]\n    let sum = nums[0]\n    for (let i = 1; i < nums.length; i++) {\n        sum += nums[i]\n        if (sum < minSum) {\n            minSum = sum\n        }\n    }\n    return minSum\n}\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\nconsole.log(minSubArraySum([-1, -2, -3]) === -6)\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const len = grid.length;\n  const buckets = [];\n  for (let i = 0; i < len; i++) {\n    buckets[i] = new Array(len);\n    for (let j = 0; j < len; j++) {\n      buckets[i][j] = {\n        height: 0,\n        capacity: capacity\n      };\n    }\n  }\n  const count = 0;\n  while (true) {\n    count += (buckets[0][0].height > 0)? 1 : 0;\n    for (let i = 0; i < len; i++) {\n      for (let j = 0; j < len; j++) {\n        if (buckets[i][j].height < grid[i][j]) {\n          buckets[i][j].height++;\n          count++;\n        }\n      }\n    }\n    if (count === len) {\n      break;\n    }\n  }\n  return count;\n}\n\n// TESTS\n[\n  [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]],\n  [[0, 0, 0], [0, 0, 0]],\n  [[0, 0, 1, 1], [0, 0, 0, 0]],\n  [[0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 0, 0], [1, 1, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [1, 1, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1]],\n  [[0, 0, 1, 1], [0, 0, 1, 1], [0, 0, 1, 1], [0, 0,"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 > b1\n  })\n}\n\n/*\n  In this Kata, you have to sort an ar ra y of non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [1, 0, 2, 3, 4]\n  */\nconst sortArray2 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 > b1\n  })\n}\n\nconst sortArray3 = (arr) => {\n  return arr.sort((a, b) => {\n    const a1 = a.toString(2).split('').reverse().join('')\n    const b1 = b.toString(2).split('').reverse().join('')\n    return a1 > b1\n  })\n}\n\nconst sortArray4 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 > b1\n  })\n}\n\nconst sortArray5 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 < b1\n  })\n}\n\nconst sortArray6 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 === b1\n  })\n}\n\nconst sortArray7 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 > b1\n  })\n}\n\nconst sortArray8 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 < b1\n  })\n}\n\nconst sortArray9 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 < b1\n  })\n}\n\nconst sortArray10 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 === b1\n  })\n}\n\nconst sortArray11 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 === b1\n  })\n}\n\nconst sortArray12 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 > b1\n  })\n}\n\nconst sortArray13 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 < b1\n  })\n}\n\nconst sortArray14 = (arr) => {\n  const count = (num) => num.toString(2).split('').reverse().join('')\n  return arr.sort((a, b) => {\n    const a1 = count(a)\n    const b1 = count(b)\n    return a1 > b1\n  })\n}\n\nconst sortArray15 = (arr) => {\n  const count = (num) =>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let list = [];\n  for (let i = 0; i < s.length; i++) {\n    let temp = [];\n    for (let j = 0; j < s.length; j++) {\n      if (s.charAt(j) === s.charAt(i)) {\n        temp.push(s.charAt(j));\n      }\n    }\n    if (temp.length === n) {\n      list.push(temp);\n    }\n  }\n  return list;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    const closest = [];\n    for (let i = 0; i < word.length; i++) {\n        if (i === word.length - 1) {\n            return word[i];\n        }\n        let next = word[i + 1];\n        let curr = word[i];\n        if (curr === 'a' && next === 'e') {\n            closest.push(curr);\n        }\n        if (curr === 'e' && next === 'a') {\n            closest.push(curr);\n        }\n    }\n    if (closest.length === 0) {\n        return '';\n    }\n    return closest[0];\n};\n\nconsole.log(getClosestVowel(\"yogurt\"));\nconsole.log(getClosestVowel(\"FULL\"));\nconsole.log(getClosestVowel(\"quick\"));\nconsole.log(getClosestVowel(\"ab\"));<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  if(lst.length === 0) return 'No';\n  let head = lst.shift();\n  let tail = lst.shift();\n  if(head === '(' && tail === ')') return 'Yes';\n  if(head === ')') return matchParens(lst);\n  if(head === '(') return matchParens(lst);\n  return 'No';\n}\n\nconst result = matchParens(['()', ')'])\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 1) {\n    return arr;\n  }\n  const max = arr[0];\n  let maxIndex = 0;\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      maxIndex = i;\n    }\n  }\n  const newArr = arr.slice(0, maxIndex);\n  return newArr.concat(arr.slice(maxIndex + 1));\n};\n\nconst test = (t) => {\n  const arr = [-3, -4, 5];\n  const k = 3;\n  const res = maximum(arr, k);\n  t.deepEqual(res, [-4, -3, 5]);\n};\n\ntest(t);\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const n = lst.length;\n  let oddSum = 0;\n  let evenSum = 0;\n  for(let i = 0; i < n; i++){\n    if(lst[i] % 2 === 0) {\n      evenSum += lst[i];\n    } else {\n      oddSum += lst[i];\n    }\n  }\n  return oddSum + evenSum;\n};\n\nconsole.log(solution([5, 8, 7, 1])); //12\nconsole.log(solution([3, 3, 3, 3, 3])); //9\nconsole.log(solution([30, 13, 24, 321])); //0\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  let carry = 0;\n  for (let i = k; i < arr.length; i++) {\n    carry += sum + arr[i];\n    sum = carry;\n    carry = 0;\n  }\n  return sum;\n};\n\nconst test = (actual, expected) => {\n  if (actual!== expected) {\n    throw new Error(`Expected ${expected}, got ${actual}`);\n  }\n};\n\ntest(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4), 24);\ntest(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9, 2, 1], 4), 28);\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = [1]\n  while (n > 1) {\n    if (n % 2 === 1) {\n      collatz.unshift(n)\n      n = n / 2\n    } else {\n      collatz.unshift(3 * n + 1)\n      n = n / 3\n    }\n  }\n  collatz.unshift(1)\n  return collatz\n}\n\nexport default getOddCollatz\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  return (/^[1-9]{1}[0-2][0-9]-[1-9]{1}[0-2][0-9]-[1-9]{1}[0-9]{4}$/).test(date);\n}\n\n//Tests\nvalidDate('03-11-2000')\nconsole.log(validDate('03-11-2000'))\nconsole.log(validDate('15-01-2012'))\nconsole.log(validDate('04-0-2040'))\nconsole.log(validDate('06-04-2020'))\nconsole.log(validDate('06/04/2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const text = txt.toLowerCase()\n  const words = text.split(/\\s+/)\n  return words\n}\n\n/**\n * Given a string of words, return a map of words and their frequency count.\n * Each word should be a lower-case string.\n * Examples\n * splitWords(\"Hello world!\") ➞ {'Hello': 1, 'world!': 1}\n * splitWords(\"Hello, world! Hi, I am happy\") ➞ {'Hello': 1, 'world!': 2, 'Hi,': 1, 'I am happy': 1}\n * splitWords(\"abcdef\") == 3\n */\nconst splitWordsFrequency = (txt) => {\n  const text = txt.toLowerCase()\n  const words = text.split(/\\s+/)\n  const freq = {}\n  words.forEach(word => {\n    const wordSplit = word.split('')\n    wordSplit.forEach(char => {\n      const letter = char.charCodeAt(0)\n      if (letter >= 97 && letter <= 122) {\n        if (freq[word] === undefined) {\n          freq[word] = 0\n        }\n        freq[word] += 1\n      }\n    })\n  })\n  return freq\n}\n\nconst getWordFrequency = (word) => {\n  return splitWordsFrequency(word)\n}\n\nconst wordFrequency = (txt) => {\n  return Object.keys(splitWordsFrequency(txt))\n}\n\nconst getWords = (txt) => {\n  return splitWords(txt)\n}\n\nconst words = (txt) => {\n  return splitWords(txt)\n}\n\nconst getMostFrequentWords = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const mostFrequent = Object.keys(freq).sort((a, b) => {\n    return freq[a] - freq[b]\n  }).reverse()\n  return mostFrequent\n}\n\nconst mostFrequentWords = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const mostFrequent = Object.keys(freq).sort((a, b) => {\n    return freq[a] - freq[b]\n  }).reverse()\n  return mostFrequent\n}\n\nconst getWordsByFrequency = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const wordsByFrequency = Object.keys(freq).map(word => {\n    return [word, freq[word]]\n  })\n  return wordsByFrequency\n}\n\nconst wordsByFrequency = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const wordsByFrequency = Object.keys(freq).map(word => {\n    return [word, freq[word]]\n  })\n  return wordsByFrequency\n}\n\nconst getLeastCommonWords = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const leastCommonWords = Object.keys(freq).filter(word => {\n    return freq[word] === 1\n  }).sort((a, b) => {\n    return b - a\n  }).reverse()\n  return leastCommonWords\n}\n\nconst leastCommonWords = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const leastCommonWords = Object.keys(freq).filter(word => {\n    return freq[word] === 1\n  }).sort((a, b) => {\n    return b - a\n  }).reverse()\n  return leastCommonWords\n}\n\nconst getMostCommonWords = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const mostCommonWords = Object.keys(freq).filter(word => {\n    return freq[word] === 1\n  }).sort((a, b) => {\n    return a - b\n  }).reverse()\n  return mostCommonWords\n}\n\nconst mostCommonWords = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const mostCommonWords = Object.keys(freq).filter(word => {\n    return freq[word] === 1\n  }).sort((a, b) => {\n    return a - b\n  }).reverse()\n  return mostCommonWords\n}\n\nconst getWordFrequencyByWord = (word) => {\n  return splitWordsFrequency(word)\n}\n\nconst wordFrequencyByWord = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const wordFrequencyByWord = Object.keys(freq).filter(word => {\n    return freq[word] === 1\n  }).sort((a, b) => {\n    return a - b\n  }).reverse()\n  return wordFrequencyByWord\n}\n\nconst getWordByFrequency = (freq) => {\n  const word = Object.keys(freq).sort((a, b) => {\n    return freq[a] - freq[b]\n  }).reverse()\n  return word\n}\n\nconst wordByFrequency = (txt) => {\n  const freq = splitWordsFrequency(txt)\n  const wordByFrequency = Object.keys(freq).sort((a, b) => {\n    return freq[a] - freq[b]\n  }).reverse()\n  return wordByFrequency\n}\n\nconst getMostFrequentWordsByWord = (word) => {\n  const freq = splitWordsFrequency(word)\n  const mostFrequent = Object.keys(freq).sort((a, b) => {\n    return freq[a] - freq[b]\n  }).reverse()\n  return mostFrequent\n}\n\nconst mostF"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sort = () => {\n    const sorted = [...lst].sort((a, b) => a - b);\n    return sorted.length === lst.length;\n  };\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\n/* Given a list of numbers, return whet her o r not they are sorted\n  in descending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7, 8]) ➞ true\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSortedDesc = (lst) => {\n  const sort = () => {\n    const sorted = [...lst].sort((a, b) => b - a);\n    return sorted.length === lst.length;\n  };\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\nconst isSortedDescEnd = (lst) => {\n  const sort = () => {\n    const sorted = [...lst].sort((a, b) => b - a);\n    return sorted.length === lst.length;\n  };\n  const sorted = [...lst].sort((a, b) => b - a);\n  return sorted.length === lst.length;\n};\n\nconst isSortedDescStart = (lst) => {\n  const sort = () => {\n    const sorted = [...lst].sort((a, b) => a - b);\n    return sorted.length === lst.length;\n  };\n  const sorted = [...lst].sort((a, b) => a - b);\n  return sorted.length === lst.length;\n};\n\nexport { isSorted, isSortedDesc, isSortedDescEnd, isSortedDescStart };\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return 'NO';\n  }\n  if (interval1.end < interval2.start) {\n    return 'NO';\n  }\n  return 'YES';\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primeIntersections = (intervals) => {\n  const result = [];\n  const intervalsLength = intervals.length;\n  for (let i = 0; i < intervalsLength; i++) {\n    const [interval1, interval2] = intervals[i];\n    const resultIntersection = intersection(interval1, interval2);\n    if (resultIntersection === 'YES') {\n      const length = interval1.end - interval1.start + interval2.end - interval2.start;\n      if (isPrime(length)) {\n        result.push(interval1);\n        result.push(interval2);\n      }\n    }\n  }\n  return result;\n};\n\nexport {\n  primeIntersections,\n  intersection,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  let sign = 1\n  let prod = arr[0]\n  for(let i = 1; i < arr.length; i++) {\n    prod = prod * arr[i]\n    if(prod < 0) {\n      sign = -1\n      prod = -prod\n    }\n  }\n  return sign * prod\n}\n\nmodule.exports = prodSigns\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const height = grid.length\n  const width = grid[0].length\n  const visited = new Array(width).fill(0)\n\n  const visitedArr = Array.from({length: width}, (x, i) => {\n    return visited[i] = 1\n  })\n\n  const dfs = (row, col, visitedArr) => {\n    if (visitedArr[col] === 1) return 1\n\n    const [row1, row2, row3] = [row - 1, row, row + 1]\n    const [col1, col2, col3] = [col - 1, col, col + 1]\n\n    if (row1 < 0 || row1 >= height || row2 < 0 || row2 >= height || row3 < 0 || row3 >= height) return 1\n    if (col1 < 0 || col1 >= width || col2 < 0 || col2 >= width || col3 < 0 || col3 >= width) return 1\n\n    const [val1, val2, val3] = [grid[row1][col1], grid[row2][col1], grid[row3][col1]]\n    const [val4, val5, val6] = [grid[row1][col2], grid[row2][col2], grid[row3][col2]]\n    const [val7, val8, val9] = [grid[row1][col3], grid[row2][col3], grid[row3][col3]]\n\n    const [val10, val11, val12] = [Math.min(val1, val2), Math.min(val3, val4), Math.min(val5, val6)]\n    const [val13, val14, val15] = [Math.min(val7, val8), Math.min(val9, val10), Math.min(val11, val12)]\n    const [val16, val17, val18] = [Math.min(val13, val14), Math.min(val15, val16), Math.min(val17, val18)]\n    const [val19, val20, val21] = [Math.min(val10, val11), Math.min(val12, val13), Math.min(val14, val15)]\n    const [val22, val23, val24] = [Math.min(val18, val19), Math.min(val20, val21), Math.min(val22, val23)]\n    const [val25, val26, val27] = [Math.min(val17, val18), Math.min(val21, val22), Math.min(val23, val24)]\n    const [val28, val29, val30] = [Math.min(val15, val16), Math.min(val21, val22), Math.min(val23, val24)]\n    const [val31, val32, val33] = [Math.min(val13, val14), Math.min(val17, val18), Math.min(val19, val20)]\n    const [val34, val35, val36] = [Math.min(val23, val24), Math.min(val25, val26), Math.min(val27, val28)]\n    const [val37, val38, val39] = [Math.min(val30, val31), Math.min(val32, val33), Math.min(val34, val35)]\n    const [val40, val41, val42] = [Math.min(val29, val30), Math.min(val32, val33), Math.min(val34, val35)]\n    const [val43, val44, val45] = [Math.min(val27, val28), Math.min(val29, val30), Math.min(val31, val32)]\n    const [val46, val47, val48] = [Math.min(val25, val26), Math.min(val27, val28), Math.min(val29, val30)]\n    const [val49, val50, val51] = [Math.min(val23, val24), Math.min(val25, val26), Math.min(val27, val28)]\n    const [val52, val53, val54] = [Math.min(val21, val22), Math.min(val23, val24), Math.min(val25, val26)]\n    const [val55, val56, val57] = [Math.min(val19, val20"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let nums = [1, 1]\n  for(let i = 2; i < n; i++) {\n    nums.push(1 + (i / 2))\n  }\n  return nums\n}\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let count = 0;\n  while (n > 0) {\n    count += n % 2;\n    n = Math.floor(n / 2);\n  }\n  return count;\n};\n\nconsole.log(digits(1)); //1\nconsole.log(digits(4)); //0\nconsole.log(digits(235)); //15\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n  return str.every(x => x === '[')\n};\n\nconst isNested = (str ing ) => {\n  if (str.length < 2) return false;\n  let result = isNe(str);\n  let tmp = str.substring(1, str.length - 1);\n  result = isNested(tmp);\n  return result;\n};\n\nconsole.log(isNested(\"[]]\"));\nconsole.log(isNested(\"[][]\"));\nconsole.log(isNested(\"[]]][[[]]\"));\nconsole.log(isNested(\"[[]][[]]\"));\nconsole.log(isNested(\"[[]][[][]]\"));\nconsole.log(isNested(\"[[]] [[]] [[]] [[]] [[]] [[]]\"));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const n = lst.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const x = Math.round(lst[i]);\n    sum += x * x;\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last) && isAlphabetic(txt.charAt(txt.length - 2));\n};\n\n// const checkIfLastCharIsALetter = (txt) => {\n//     if (txt.length === 0) return false;\n//     const last = txt.charAt(txt.length - 1);\n//     return!isAlphabetic(last);\n// };\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst isAlphabetic = (char) => {\n    return char.match(/[a-zA-Z]/);\n};\n\n// const checkIfLastCharIsALetter = (txt) => {\n//     if (txt.length === 0) return false;\n//     const last = txt.charAt(txt.length - 1);\n//     return!isAlphabetic(last);\n// };\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.charAt(txt.length - 1);\n    return!isAlphabetic(last);\n};\n\nconst checkIfLastCharIsALetter = (txt) => {\n    if (txt.length === 0) return false;\n    const last = txt.char"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    let len = arr.length;\n    let min = arr[0];\n    for (let i = 0; i < len; i++) {\n        if (arr[i] <= min) {\n            min = arr[i];\n        }\n    }\n    let idx = 0;\n    for (let i = 0; i < len; i++) {\n        if (arr[i] >= min) {\n            return idx;\n        }\n        idx++;\n    }\n    return -1;\n};\n\n/*\n  Return a copy of the given array, where each element is replaced by the\n  element at the index of the given  index. If the given index is not in the\n  range of the given array, return the array unchanged.\n  */\nconst arrayWithIndex = (arr, idx) => {\n    let copy = [];\n    for (let i = 0; i < arr.length; i++) {\n        copy.push(arr[i]);\n    }\n    if (idx < 0 || idx >= copy.length) {\n        return arr;\n    }\n    return [copy[idx]];\n};\n\n/*\n  Find the maximum of two numbers.\n\n  Examples:\n  max(1,2) = 2\n  max(3,4) = 4\n  */\nconst max = (a, b) => {\n    if (a > b) {\n        return a;\n    }\n    return b;\n};\n\n/*\n  Find the minimum of two numbers.\n\n  Examples:\n  min(1,2) = 1\n  min(3,4) = 3\n  */\nconst min = (a, b) => {\n    if (a < b) {\n        return a;\n    }\n    return b;\n};\n\nconst getInput = () => {\n    let arr = [];\n    let arr_len = [];\n    let arr_max = [];\n    let arr_min = [];\n    let idx = 0;\n    let max_len = 0;\n    let min_len = 0;\n    let min_idx = -1;\n    let max_idx = -1;\n    let arr_max_len = 0;\n    let arr_min_len = 0;\n\n    while (true) {\n        let line = readLine();\n        if (line === null) {\n            break;\n        }\n        let arr = line.split(\" \");\n        arr_len.push(parseInt(arr[0]));\n        arr_max.push(parseInt(arr[1]));\n        arr_min.push(parseInt(arr[2]));\n    }\n\n    let len = arr_len.length;\n    let max_len_arr = arr_max.length;\n    let min_len_arr = arr_min.length;\n\n    for (let i = 0; i < len; i++) {\n        let max_idx = canArrange(arr_max_len);\n        if (max_idx!== -1) {\n            arr_max_len = arrayWithIndex(arr_max, max_idx);\n        }\n\n        let min_idx = canArrange(arr_min_len);\n        if (min_idx!== -1) {\n            arr_min_len = arrayWithIndex(arr_min, min_idx);\n        }\n\n        arr.push(max(arr_max_len, arr_min_len));\n        arr_max_len = arr_max_len.slice(0);\n        arr_min_len = arr_min_len.slice(0);\n    }\n\n    console.log(arr);\n\n    return arr;\n};\n\ngetInput();\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const max = (a, b) => a > b? a : b;\n  const largest = (lst, x) => lst.find(x);\n  const smallest = (lst, x) => lst.find(x, (a, b) => a > b);\n  const largestSmallest = (lst) => {\n    let x = largest(lst, -Infinity);\n    let y = smallest(lst, Infinity);\n    return x === null? y === null? null : [y, x] : [x, y];\n  };\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns the smallest value in the list\n  Examples:\n  smallest([2, 4, 1, 3, 5, 7]) == 1\n  smallest([0]) == 0\n  smallest([0, 0, 0]) == 0\n  smallest([2, 4, 1, 3, 5, 7]) == 1\n  smallest([0, 0, 0, 0, 0]) == 0\n  smallest([1, 2, 3]) == 1\n  smallest([]) == null\n  smallest([2, 4, 1, 3, 5, 7]) == 1\n  */\nconst smallest = (lst) => {\n  const min = (a, b) => a < b? a : b;\n  const largest = (lst, x) => lst.find(x);\n  const smallest = (lst, x) => lst.find(x, (a, b) => a < b);\n  const smallestSmallest = (lst) => {\n    let x = largest(lst, Infinity);\n    let y = smallest(lst, -Infinity);\n    return x === null? y === null? null : [y, x] : [x, y];\n  };\n  return smallestSmallest(lst);\n};\n\n/*\n  Create a function that returns the largest value in the list\n  Examples:\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([0]) == 0\n  largest([0, 0, 0]) == 0\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  largest([0, 0, 0, 0, 0]) == 0\n  largest([1, 2, 3]) == 3\n  largest([]) == null\n  largest([2, 4, 1, 3, 5, 7]) == 7\n  */\nconst largest = (lst) => {\n  const max = (a, b) => a > b? a : b;\n  const largest = (lst, x) => lst.find(x);\n  const smallest = (lst, x) => lst.find(x, (a, b) => a > b);\n  const largestSmallest = (lst) => {\n    let x = largest(lst, -Infinity);\n    let y = smallest(lst, Infinity);\n    return x === null? y === null? null : [y, x] : [x, y];\n  };\n  return largestSmallest(lst);\n};\n\n/*\n  Create a function that returns the sum of values in the list\n  Examples:\n  sum([1, 2, 3, 4, 5]) == 15\n  sum([0]) == 0\n  sum([0, 0, 0]) == 0\n  sum([1, 2, 3]) == 6\n  sum([]) == null\n  sum([2, 4, 1, 3, 5, 7]) == 21\n  */\nconst sum = (lst) => {\n  const sum = (lst, x) => x === null? 0 : x + sum(lst.slice(0, lst.indexOf(x)));\n  return largest(lst);\n};\n\n/*\n  Create a function that returns the average of values in the list\n  Examples:\n  average([1, 2, 3, 4, 5]) == 3\n  average([0]) == 0\n  average([0, 0, 0]) == 0\n  average([1, 2, 3]) == 2\n  average([]) == null\n  average([2, 4, 1, 3, 5, 7]) == 4\n  */\nconst average = (lst) => {\n  const sum = (lst, x) => x === null? 0 : x + sum(lst.slice(0, lst.indexOf(x)));\n  return largest(lst) / sum(lst);\n};\n\n/*\n  Create a function that returns the first element in the list\n  Examples:\n  first([2, 4, 1, 3, 5, 7]) == 2\n  first([0]) == 0\n  first([0, 0, 0]) == 0\n  first([1, 2, 3]) == 1\n  first([]) == null\n  first([2, 4, 1, 3, 5, 7]) == 2\n  */\nconst first = (lst) => {\n  return largest(lst);\n};\n\n/*\n  Create a function that returns the last element in the list\n  Examples:\n  last([2, 4, 1, 3, 5, 7]) == 7\n  last([0]) == 0\n  last([0, 0, 0]) == 0\n  last([1, 2, 3]) == 3\n  last([]) == null\n  last([2, 4, 1, 3, 5, 7]) == 7\n  */\nconst last = (lst) => {\n  return largest(lst);\n};\n\n/*\n  Create a function that returns the largest index in the list\n  Examples:\n  index([2, 4, 1, 3, 5, 7]) == 5\n  index([0]) == -1\n  index([0, 0, 0]) == -1\n  index([1, 2, 3]) == 2\n  index([]) == null\n  index([2, 4, 1, 3, 5, 7]) == 7\n  */\nconst index = ("}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconstcompare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareOne = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareTwo = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareThree = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareFour = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareFive = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareSix = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareSeven = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareEight = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareNine = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareTen = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compareEleven = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {\n    return b;\n  }\n  return null;\n}\n\nconst compare = (a, b) => {\n  if (a < b) {\n    return a;\n  }\n  if (a > b) {"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = parseInt(n);\n  const a = sum;\n  const b = a;\n  const c = b;\n  const d = c;\n  const e = d;\n  const f = e;\n  const g = f;\n  const h = g;\n  const i = h;\n  const j = i;\n  const k = j;\n  const l = k;\n  const m = l;\n  const n = m;\n  const o = n;\n  const p = o;\n  const q = p;\n  const r = q;\n  const s = r;\n  const t = s;\n  const u = t;\n  const v = u;\n  const w = v;\n  const x = w;\n  const y = x;\n  const z = y;\n  const count = 0;\n  const sum2 = parseInt(sum);\n  while (sum2 <= 0) {\n    sum2 = sum2 + 2;\n    count = count + 1;\n  }\n  if (count === 4) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\nEvaluate whether the given number n c an be  written asthe sum of exactly 6 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == true\n  isEqualToSumEven(8) == false\n  */\nconst isEqualToSumEvenTwo = (n) => {\n  const sum = parseInt(n);\n  const a = sum;\n  const b = a;\n  const c = b;\n  const d = c;\n  const e = d;\n  const f = e;\n  const g = f;\n  const h = g;\n  const i = h;\n  const j = i;\n  const k = j;\n  const l = k;\n  const m = l;\n  const n = m;\n  const o = n;\n  const p = o;\n  const q = p;\n  const r = q;\n  const s = r;\n  const t = s;\n  const u = t;\n  const v = u;\n  const w = v;\n  const x = w;\n  const y = x;\n  const z = y;\n  const count = 0;\n  const sum2 = parseInt(sum);\n  while (sum2 <= 0) {\n    sum2 = sum2 + 2;\n    count = count + 1;\n  }\n  if (count === 6) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\nEvaluate whether the given number n c an be  written asthe sum of exactly 8 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEvenThree = (n) => {\n  const sum = parseInt(n);\n  const a = sum;\n  const b = a;\n  const c = b;\n  const d = c;\n  const e = d;\n  const f = e;\n  const g = f;\n  const h = g;\n  const i = h;\n  const j = i;\n  const k = j;\n  const l = k;\n  const m = l;\n  const n = m;\n  const o = n;\n  const p = o;\n  const q = p;\n  const r = q;\n  const s = r;\n  const t = s;\n  const u = t;\n  const v = u;\n  const w = v;\n  const x = w;\n  const y = x;\n  const z = y;\n  const count = 0;\n  const sum2 = parseInt(sum);\n  while (sum2 <= 0) {\n    sum2 = sum2 + 2;\n    count = count + 1;\n  }\n  if (count === 8) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\nEvaluate whether the given number n c an be  written asthe sum of exactly 10 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == false\n  isEqualToSumEven(10) == true\n  */\nconst isEqualToSumEvenFour = (n) => {\n  const sum = parseInt(n);\n  const a = sum;\n  const b = a;\n  const c = b;\n  const d = c;\n  const e = d;\n  const f = e;\n  const g = f;\n  const h = g;\n  const i = h;\n  const j = i;\n  const k = j;\n  const l = k;\n  const m = l;\n  const n = m;\n  const o = n;\n  const p = o;\n  const q = p;\n  const r = q;\n  const s = r;\n  const t = s;\n  const u = t;\n  const v = u;\n  const w = v;\n  const x = w;\n  const y = x;\n  const z = y;\n  const count = 0;\n  const sum2 = parseInt(sum);\n  while (sum2 <= 0) {\n    sum2 = sum2 + 2;\n    count = count + 1;\n  }\n  if (count === 10) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst isEqualToSumEvenFive = (n) => {\n  const sum = parseInt(n);\n  const a = sum;\n  const b = a;\n  const c = b;\n  const d = c;\n  const e = d;\n  const f = e;\n  const g = f;\n  const h = g;\n  const i = h;\n  const j = i;\n  const k = j;"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    let total = 1;\n\n    for (let i = 1; i <= n; i++) {\n        total *= i;\n    }\n\n    return total;\n}\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.replace(/\\s/g, '_');\n    });\n    if (result.match(/([A-Z]|[0-9])+/g)) {\n        const text = result.replace(/([A-Z]|[0-9])+/g, (str) => {\n            return str.replace(/\\s/g, '_');\n        });\n        return text;\n    }\n    return result;\n}\n\n/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixAllSpaces = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.replace(/\\s/g, '_');\n    });\n    if (result.match(/([A-Z]|[0-9])+/g)) {\n        const text = result.replace(/([A-Z]|[0-9])+/g, (str) => {\n            return str.replace(/\\s/g, '_');\n        });\n        return text;\n    }\n    return result;\n}\n\nconst xSpaces = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.replace(/\\s/g, '_');\n    });\n    return result;\n}\n\nconst toCamelCase = (text) => {\n    const result = text.replace(/([a-z\\d])([A-Z])/g, '$1_$2').toLowerCase();\n    return result;\n}\n\nconst toCapitalizedCamelCase = (text) => {\n    const result = text.replace(/([a-z\\d])([A-Z])/g, '$1_$2').toUpperCase();\n    return result;\n}\n\nconst toUnderscore = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.replace(/\\s/g, '_');\n    });\n    return result;\n}\n\nconst toCapitalizedUnderscore = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.replace(/\\s/g, '_');\n    });\n    return result.toUpperCase();\n}\n\nconst toLowercase = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.toLowerCase();\n    });\n    return result;\n}\n\nconst toCapitalizedLowercase = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.toLowerCase();\n    });\n    return result.toUpperCase();\n}\n\nconst toUppercase = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.toUpperCase();\n    });\n    return result;\n}\n\nconst toCapitalizedUppercase = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.toUpperCase();\n    });\n    return result;\n}\n\nconst toSnakeCase = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.replace(/\\s/g, '_');\n    });\n    return result;\n}\n\nconst toCapitalizedSnakeCase = (text) => {\n    const result = text.replace(/([A-Z]|[0-9])+/g, (str) => {\n        return str.replace(/\\s/g, '_');\n    });\n    return result.toUpperCase();\n}\n\nconst toPascalCase = (text) => {\n    const result = text.replace(/([a-z\\d])([A-Z])/g, '$1_$2').toUpperCase();\n    return result;\n}\n\nconst toCapitalizedPascalCase = (text) => {\n    const result = text.replace(/([a-z\\d])([A-Z])/g, '$1_$2').toUpperCase();\n    return result;\n}\n\nconst toClassName = (text) => {\n    const result = text.replace(/([a-z\\d])([A-Z])/g, '$1_$2').toUpperCase();\n    return result;\n}\n\nconst toHyphenatedClassName = (text) => {\n    const result = text.replace(/([a-z\\d])([A-Z])/g, '$1-$2').toLowerCase();\n    return result;\n}\n\nconst toCamelCaseHyphenatedClassName = (text) => {\n    const result = text.replace(/([a-z\\d])([A-Z])"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n\tlet is_valid = false;\n\tlet file_name_pattern = /[^a-zA-Z\\s\\.]/;\n\tlet file_name_pattern_txt = /[^a-zA-Z\\s\\.]/;\n\tlet file_name_pattern_exe = /[^a-zA-Z\\s\\.]/;\n\tlet file_name_pattern_dll = /[^a-zA-Z\\s\\.]/;\n\tlet file_name_pattern_dot = /\\./;\n\tlet file_name_pattern_start_alpha = /^[a-zA-Z]/;\n\tlet file_name_pattern_start_num = /^[0-9]/;\n\tlet file_name_pattern_substring_txt = /\\.txt$/;\n\tlet file_name_pattern_substring_exe = /\\.exe$/;\n\tlet file_name_pattern_substring_dll = /\\.dll$/;\n\tlet file_name_pattern_substring_dot = /\\.$/;\n\tlet file_name_pattern_substring_start_alpha = /^[a-zA-Z]/;\n\tlet file_name_pattern_substring_start_num = /^[0-9]/;\n\n\tif(file_name.length > 3 && file_name.length <= 8 && file_name.includes('.')){\n\t\tif(file_name.includes('.') && file_name.includes('txt') && file_name.includes('exe') && file_name.includes('dll')){\n\t\t\tis_valid = true;\n\t\t}\n\t}else{\n\t\tis_valid = false;\n\t}\n\n\treturn is_valid;\n};\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\n//  /*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst sumSquares = ("}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let map = {};\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (map.hasOwnProperty(sentence[i])) {\n      map[sentence[i]]++;\n    } else {\n      map[sentence[i]] = 1;\n    }\n  }\n  let result = [];\n  for (let key in map) {\n    let tmp = key.split(\"\");\n    let newSentence = [];\n    for (let i = 0; i < tmp.length; i++) {\n      newSentence.push(tmp[i]);\n    }\n    result.push(newSentence.join(\"\"));\n    count++;\n  }\n  return result.sort();\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let map = {};\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (map.hasOwnProperty(sentence[i])) {\n      map[sentence[i]]++;\n    } else {\n      map[sentence[i]] = 1;\n    }\n  }\n  let result = [];\n  for (let key in map) {\n    let tmp = key.split(\"\");\n    let newSentence = [];\n    for (let i = 0; i < tmp.length; i++) {\n      newSentence.push(tmp[i]);\n    }\n    result.push(newSentence.join(\"\"));\n    count++;\n  }\n  return result.sort();\n};\n\n/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  let map = {};\n  let count = 0;\n  for (let i = 0; i < sentence.length; i++) {\n    if (map.hasOwnProperty(sentence[i])) {\n      map[sentence[i]]++;\n    } else {\n      map[sentence[i]] = 1;\n    }\n  }\n  let result = [];\n  for (let key in map) {\n    let tmp = key.split(\"\");\n    let newSentence = [];\n    for (let i = 0; i < tmp.length; i++) {\n      newSentence.push(tmp[i]);\n    }\n    result.push(newSentence.join(\"\"));\n    count++;\n  }\n  return result.sort();\n};\n\nmodule.exports = wordsInSentence;\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n    x = x.split(\"/\");\n    n = n.split(\"/\");\n    let g = x[0].toInt() * n[0].toInt();\n    let h = x[1].toInt() * n[1].toInt();\n    let i = g + h;\n    if(i.toInt() == 0) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n//con st add = (x, y) => x + y\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const list = [];\n  for (let i = 0; i < nums.length; i++) {\n    list.push([nums[i], i]);\n  }\n  list.sort((a, b) => {\n    const sumA = a[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    const sumB = b[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    return sumA - sumB;\n  });\n  return list;\n};\n\n/*\n  Write a function which sorts the giv en li st of integers\n  in descending order according to the sum of their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [1, -11, -12, -1, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsDesc = (nums) => {\n  const list = [];\n  for (let i = 0; i < nums.length; i++) {\n    list.push([nums[i], i]);\n  }\n  list.sort((a, b) => {\n    const sumA = a[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    const sumB = b[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    return sumB - sumA;\n  });\n  return list;\n};\n\n/*\n  Write a function which sorts the giv en li st of strings\n  according to the number of common characters.\n  N ote: if there a re severa l items with similar number of common characters,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByCommonChars([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByCommonChars([]) == []\n  */\nconst orderByCommonChars = (nums) => {\n  const list = [];\n  for (let i = 0; i < nums.length; i++) {\n    list.push([nums[i], i]);\n  }\n  list.sort((a, b) => {\n    const charA = a[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    const charB = b[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    return charA - charB;\n  });\n  return list;\n};\n\n/*\n  Write a function which sorts the giv en li st of strings\n  according to the number of unique characters.\n  N ote: if there a re severa l items with similar number of unique characters,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByUniqChars([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByUniqChars([]) == []\n  */\nconst orderByUniqChars = (nums) => {\n  const list = [];\n  for (let i = 0; i < nums.length; i++) {\n    list.push([nums[i], i]);\n  }\n  list.sort((a, b) => {\n    const charA = a[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    const charB = b[0].toString().split('').reduce((prev, curr) => {\n      return prev + parseInt(curr, 10);\n    }, 0);\n    return charB - charA;\n  });\n  return list;\n};\n\nmodule.exports = {\n  orderByPoints,\n  orderByPointsDesc,\n  orderByCommonChars,\n  orderByUniqChars\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let isOdd = (n) => n % 2 === 1;\n  let count = 0;\n  nums.forEach((n) => {\n    if (isOdd(n) && isOdd(nums[nums.length - 1])) {\n      count++;\n    }\n  });\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\nconsole.log(specialFilter([1, 3, 5, 7, 9]));\nconsole.log(specialFilter([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 180, 182, 184, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  const a = Array.from(new Array(n))\n  const result = []\n  for (let i = 1; i < n; i++) {\n    const a2 = []\n    for (let j = 1; j < n; j++) {\n      if (j > i) {\n        const k = j\n        while (k < n && a[i] + a[j] + a[k] % 3 === 0) {\n          a2.push(a[j] + a[k])\n          k++\n        }\n      }\n    }\n    if (a2.length === 3) {\n      result.push(a2)\n    }\n  }\n  return result\n}\n\n/*\n  Input:\n    n = 3\n    a = [1, 2, 3]\n    b = [4, 5, 6]\n    c = [7, 8, 9]\n\n  Output:\n    3\n  */\nconst getMaxTriplesWithTripleArray = (n, a, b, c) => {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        if (a[i] + b[j] + c[k] === 0) {\n          result.push([a[i], b[j], c[k]])\n        }\n      }\n    }\n  }\n  return result.length\n}\n\nconst findMaxTripleWithTripleArray = (n, a, b, c) => {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        if (a[i] + b[j] + c[k] === 0) {\n          result.push([a[i], b[j], c[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst testMaxTripleWithTripleArray = (n, a, b, c) => {\n  const result = findMaxTripleWithTripleArray(n, a, b, c)\n  return result\n}\n\nconst testMaxTriples = (n) => {\n  const a = Array.from(new Array(n))\n  const result = []\n  for (let i = 1; i < n; i++) {\n    const a2 = []\n    for (let j = 1; j < n; j++) {\n      if (j > i) {\n        const k = j\n        while (k < n && a[i] + a[j] + a[k] % 3 === 0) {\n          a2.push(a[j] + a[k])\n          k++\n        }\n      }\n    }\n    if (a2.length === 3) {\n      result.push(a2)\n    }\n  }\n  return result\n}\n\nconst testMaxTriplesWithTripleArray = (n, a, b, c) => {\n  const result = []\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      for (let k = 0; k < n; k++) {\n        if (a[i] + b[j] + c[k] === 0) {\n          result.push([a[i], b[j], c[k]])\n        }\n      }\n    }\n  }\n  return result\n}\n\nconst main = async () => {\n  const result = await testMaxTriples(3)\n  console.log(result)\n  const result2 = await testMaxTriplesWithTripleArray(3, [1, 3, 7], [4, 5, 6], [7, 8, 9])\n  console.log(result2)\n  const result3 = await testMaxTripleWithTripleArray(3, [1, 3, 7], [4, 5, 6], [7, 8, 9])\n  console.log(result3)\n  const result4 = await testMaxTripleWithTripleArray(4, [1, 3, 7, 13], [4, 5, 6, 21], [7, 8, 9, 34])\n  console.log(result4)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const sun = (planet1, planet2) => {\n    let p1 = planet1;\n    let p2 = planet2;\n    if (planet2.length > planet1.length) {\n      p1 = planet2;\n      p2 = planet1;\n    }\n    const i = p1.length;\n    const j = p2.length;\n    let s = 0;\n    let b = 0;\n    while (i > 0 && j > 0) {\n      if (p1[i - 1] === p2[j - 1]) {\n        s += 1;\n      } else if (p1[i - 1] < p2[j - 1]) {\n        b += 1;\n      } else {\n        break;\n      }\n      i -= 1;\n      j -= 1;\n    }\n    return [s, b];\n  };\n  const planet = (planet1, planet2) => {\n    const [s, b] = sun(planet1, planet2);\n    let r = 0;\n    let a = 0;\n    let p = 0;\n    if (s === 0) {\n      p = b;\n    } else {\n      r = b / s;\n      a = (2 * Math.PI * r) / (s + 1);\n      p = s - 1;\n    }\n    return [p, a];\n  };\n  return planet(planet1, planet2);\n};\n\n/*\n  Write a function that takes an array of strings and returns the longest common\n  substring.\n  Examples\n  lcs(\"G\", \"A\") ==> \"G\"\n  lcs(\"C\", \"C\") ==> \"C\"\n  lcs(\"AB\", \"AB\") ==> \"AB\"\n  lcs(\"AA\", \"A\") ==> \"A\"\n  lcs(\"AAB\", \"AB\") ==> \"AB\"\n  lcs(\"AB\", \"AA\") ==> \"AA\"\n  lcs(\"ABB\", \"BB\") ==> \"BB\"\n  lcs(\"ABC\", \"ABC\") ==> \"ABC\"\n  */\nconst lcs = (str1, str2) => {\n  let a = str1;\n  let b = str2;\n  if (str2.length > str1.length) {\n    a = str2;\n    b = str1;\n  }\n  let l = 0;\n  let i = 0;\n  while (a.charAt(i) === b.charAt(i)) {\n    i++;\n    if (i > l) {\n      l = i;\n    }\n  }\n  return b.substring(0, l);\n};\n\n/*\n  Write a function that takes an array of strings and returns the longest common\n  substring.\n  Examples\n  lcs(\"G\", \"A\") ==> \"G\"\n  lcs(\"C\", \"C\") ==> \"C\"\n  lcs(\"AB\", \"AB\") ==> \"AB\"\n  lcs(\"AA\", \"A\") ==> \"A\"\n  lcs(\"AAB\", \"AB\") ==> \"AB\"\n  lcs(\"AB\", \"AA\") ==> \"AA\"\n  lcs(\"ABB\", \"BB\") ==> \"BB\"\n  lcs(\"ABC\", \"ABC\") ==> \"ABC\"\n  */\nconst lcs2 = (str1, str2) => {\n  let a = str1;\n  let b = str2;\n  if (str2.length > str1.length) {\n    a = str2;\n    b = str1;\n  }\n  let l = 0;\n  let i = 0;\n  while (a.charAt(i) === b.charAt(i)) {\n    i++;\n    if (i > l) {\n      l = i;\n    }\n  }\n  return b.substring(0, l);\n};\n\nconst test = [\n  \"\", \"A\", \"AA\", \"AAB\", \"AABB\", \"ABAB\", \"AABBAB\", \"AABBBBAB\", \"AABBBBBBAB\",\n  \"AABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAA"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const list = lst.map(s => s.trim().toLowerCase())\n  const sorted = list.filter(s => s.length % 2 === 0)\n  const sortedSum = sorted.map(s => {\n    return sumOfStrings(s)\n  })\n  return sortedSum.sort((a, b) => a - b)\n}\n\nconst sumOfStrings = (str) => {\n  const num = str.split('').map(e => parseInt(e))\n  return num.reduce((sum, n) => sum + n)\n}\n\nconsole.log(sortedListSum([\n  'aa', 'a', 'aaa',\n  'ab', 'a', 'aaa', 'cd'\n]))\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY2 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY2(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY3 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY3(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY4 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY4(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY5 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY5(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY6 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY6(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY7 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY7(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY8 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY8(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY9 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY9(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY10 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY10(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY11 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY11(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY12 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY12(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY13 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY13(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY14 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY14(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY15 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY15(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY16 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY16(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY17 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY17(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY18 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY18(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY19 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY19(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY20 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {\n    return xOrY20(n - 1, x, y);\n  }\n\n  return y;\n};\n\nconst xOrY21 = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  }\n\n  if (n % 2 === 0) {"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    if (v % 2) {\n      sum += v * v\n    }\n  })\n  return sum\n}\n\nconst doubleTheDifference = (lst) => {\n  let diff = 0\n  lst.forEach((v) => {\n    if (v % 2) {\n      diff += v\n    }\n  })\n  return diff\n}\n\nconst odd = (lst) => {\n  let odd = 0\n  lst.forEach((v) => {\n    if (v % 2) {\n      odd += 1\n    }\n  })\n  return odd\n}\n\nconst isOdd = (lst) => {\n  return odd(lst)\n}\n\nconst sum = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v\n  })\n  return sum\n}\n\nconst doubleTheSum = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * 2\n  })\n  return sum\n}\n\nconst doubleTheSum2 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v\n  })\n  return sum\n}\n\nconst doubleTheSum3 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum4 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum5 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum6 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum7 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum8 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum9 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum10 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum11 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum12 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum13 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum14 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum15 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum16 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum17 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum18 = (lst) => {\n  let sum = 0\n  lst.forEach((v) => {\n    sum += v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v * v\n  })\n  return sum\n}\n\nconst doubleTheSum19 = (lst) => {\n  let sum = 0\n  lst.forEach(("}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const scores = game.map(num => num.toString())\n  const guess = guess.map(num => num.toString())\n  let result = []\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] === guess[i]) {\n      result.push(0)\n    } else {\n      result.push(Math.abs(scores[i] - guess[i]))\n    }\n  }\n  return result\n}\n\nconst game = [0,5,0,0,0,4]\nconst guess = [4,1,1,0,0,-2]\nconst result = compare(game, guess)\nconsole.log(result)\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let cap = 0\n  let strength = -1\n  let curr_strength = 0\n  for (let i = 0; i < extensions.length; i++) {\n    const name = extensions[i]\n    const name_len = name.length\n    for (let j = 0; j < name_len; j++) {\n      const c = name.charCodeAt(j)\n      if (c >= 97 && c <= 122) {\n        cap++\n      }\n      if (c >= 65 && c <= 90) {\n        curr_strength += 2\n      } else if (c >= 48 && c <= 57) {\n        curr_strength += 1\n      }\n    }\n  }\n  const res = class_name + '.' + extensions[0]\n  if (cap === 0) {\n    return res\n  }\n  const count = Math.abs(strength - curr_strength)\n  if (count > strength) {\n    return res\n  }\n  const min = Math.min(cap, strength)\n  for (let i = 0; i < extensions.length; i++) {\n    const name = extensions[i]\n    const name_len = name.length\n    const next = name.charCodeAt(name_len - 1)\n    if (next >= 97 && next <= 122) {\n      strength -= 2\n    } else if (next >= 65 && next <= 90) {\n      strength--\n    }\n    const curr_strength = strength\n    const res = class_name + '.' + name\n    if (curr_strength === strength) {\n      if (strength < min) {\n        return res\n      } else {\n        strength -= 1\n      }\n    }\n  }\n  return res\n}\n\nconst test = {\n  strongestExtension(class_name, extensions) {\n    const res = strongestExtension(class_name, extensions)\n    console.log(res)\n  },\n  main() {\n    const res = strongestExtension('my_class', ['AA', 'Be', 'CC'])\n    console.log(res)\n  }\n}\n\ntest.main()\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n    if (a.length===0 || b.length===0) return false;\n    let dp = new Array(a.length+1);\n    for (let i=1; i<=a.length; i++) dp[i]=[];\n    let res = false;\n    for (let i=1; i<=b.length; i++) {\n        let sub = a.slice(0);\n        sub.splice(i-1, 1);\n        let subStr = sub.join(\"\");\n        if (b.indexOf(subStr)!== -1) res = true;\n        if (dp[i].indexOf(subStr)!== -1) res = true;\n        if (dp[i-1].indexOf(subStr)!== -1) res = true;\n        dp[i].push(subStr);\n    }\n    return res;\n}\nconst c ycpatternCheck= (a, b) => {\n    if (a.length===0 || b.length===0) return false;\n    let dp = new Array(a.length+1);\n    for (let i=1; i<=a.length; i++) dp[i]=[];\n    let res = false;\n    for (let i=1; i<=b.length; i++) {\n        let sub = a.slice(0);\n        sub.splice(i-1, 1);\n        let subStr = sub.join(\"\");\n        if (b.indexOf(subStr)!== -1) res = true;\n        if (dp[i].indexOf(subStr)!== -1) res = true;\n        if (dp[i-1].indexOf(subStr)!== -1) res = true;\n        dp[i].push(subStr);\n    }\n    return res;\n}\nconst nCheck= (a, b) => {\n    if (a.length===0 || b.length===0) return false;\n    let dp = new Array(a.length+1);\n    for (let i=1; i<=a.length; i++) dp[i]=[];\n    let res = false;\n    for (let i=1; i<=b.length; i++) {\n        let sub = a.slice(0);\n        sub.splice(i-1, 1);\n        let subStr = sub.join(\"\");\n        if (b.indexOf(subStr)!== -1) res = true;\n        if (dp[i].indexOf(subStr)!== -1) res = true;\n        if (dp[i-1].indexOf(subStr)!== -1) res = true;\n        dp[i].push(subStr);\n    }\n    return res;\n}\nconst tCheck= (a, b) => {\n    if (a.length===0 || b.length===0) return false;\n    let dp = new Array(a.length+1);\n    for (let i=1; i<=a.length; i++) dp[i]=[];\n    let res = false;\n    for (let i=1; i<=b.length; i++) {\n        let sub = a.slice(0);\n        sub.splice(i-1, 1);\n        let subStr = sub.join(\"\");\n        if (b.indexOf(subStr)!== -1) res = true;\n        if (dp[i].indexOf(subStr)!== -1) res = true;\n        if (dp[i-1].indexOf(subStr)!== -1) res = true;\n        dp[i].push(subStr);\n    }\n    return res;\n}\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"));\nconsole.log(cycpatternCheck(\"ef\",\"eeff\"));\nconsole.log(cycpatternCheck(\"himensss\",\"s imen\"));\nconsole.log(cycpatternCheck(\"himenss\",\"s imen\"));\nconsole.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"aabb\",\"bbb\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cycpatternCheck(\"abc\",\"ccc\"));\nconsole.log(cy"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let odd = 0, even = 0;\n    while (num) {\n        num = num % 10;\n        if (num % 2) {\n            odd++;\n        } else {\n            even++;\n        }\n        num = num / 10;\n    }\n    return [even, odd];\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    const result = [];\n    let i = 1;\n    while (number > 0) {\n        if (number % 10 == 0) {\n            number = number / 10;\n            result.push(number + 'x');\n            i = 1;\n        } else if (number % 10 == 1) {\n            number = number - 1;\n            result.push(number + 'x');\n            i = 2;\n        } else if (number % 10 == 5) {\n            number = number - 5;\n            result.push(number + 'v');\n            i = 1;\n        } else if (number % 10 == 9) {\n            number = number - 9;\n            result.push(number + 'v');\n            i = 2;\n        } else {\n            number = number - number % 10;\n            result.push(number + 'i');\n            i++;\n        }\n    }\n    return result.reverse().join('');\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (Math.abs(a-b) + Math.abs(b-c) + Math.abs(c-a)) === 0;\n}\n\n/*\n Given the length of the longest side of a triangle, return the missing length.\n  The triangle will be non-degenerate.\n  Example:\n  longestSideTriangle(3, 4, 5) == 2\n  longestSideTriangle(3, 4, 1) == 5\n  longestSideTriangle(1, 2, 3) == 4\n  */\nconst longestSideTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a)) - Math.max(a, Math.max(b, c));\n}\n\n/*\n Given the lengths of the three sides of a triangle, determine if the triangle is\n  obtuse.\n  Example:\n  obtuseTriangle(3, 4, 5) == true\n  obtuseTriangle(1, 2, 3) == false\n  */\nconst obtuseTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a)) > (Math.max(a, Math.max(b, c)) * 1.5);\n}\n\n/*\n Given the length of the longest side of a triangle, return the missing length.\n  The triangle will be degenerate.\n  Example:\n  longestSideTriangle(3, 4, 5) == 1\n  longestSideTriangle(3, 4, 1) == 6\n  longestSideTriangle(1, 2, 3) == 2\n  */\nconst longestSideTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a)) - Math.max(a, Math.max(b, c));\n}\n\n/*\n Given the length of the longest and the shortest side of a triangle, determine\n  if the triangle is equilateral.\n  Example:\n  equilateralTriangle(3, 4, 5) == false\n  equilateralTriangle(3, 4, 1) == false\n  equilateralTriangle(3, 4, 2) == true\n  */\nconst equilateralTriangle = (a, b, c) => {\n  return Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a) === 0;\n}\n\n/*\n Given the length of the longest and the shortest side of a triangle, determine\n  if the triangle is isosceles.\n  Example:\n  isoscelesTriangle(3, 4, 5) == false\n  isoscelesTriangle(3, 4, 1) == true\n  isoscelesTriangle(3, 4, 2) == true\n  */\nconst isoscelesTriangle = (a, b, c) => {\n  return Math.abs(a - b) + Math.abs(b - c) === 0;\n}\n\n/*\n Given the length of the longest and the shortest side of a triangle, determine\n  if the triangle is scalene.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(3, 4, 1) == false\n  scaleneTriangle(3, 4, 2) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a))!== 0;\n}\n\n/*\n Given the lengths of the three sides of a triangle, determine if the triangle is\n  right-angled.\n  Example:\n  rightAngledTriangle(3, 4, 5) == true\n  rightAngledTriangle(3, 4, 1) == false\n  rightAngledTriangle(3, 4, 2) == false\n  */\nconst rightAngledTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a)) === 0;\n}\n\n/*\n Given the lengths of the three sides of a triangle, determine if the triangle is\n  scalene.\n  Example:\n  scaleneTriangle(3, 4, 5) == true\n  scaleneTriangle(3, 4, 1) == false\n  scaleneTriangle(3, 4, 2) == false\n  */\nconst scaleneTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a))!== 0;\n}\n\n/*\n Given the lengths of the three sides of a triangle, determine if the triangle is\n  obtuse.\n  Example:\n  obtuseTriangle(3, 4, 5) == true\n  obtuseTriangle(3, 4, 1) == false\n  obtuseTriangle(3, 4, 2) == false\n  */\nconst obtuseTriangle = (a, b, c) => {\n  return (Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a)) > (Math.max(a, Math.max(b, c)) * 1.5);\n}\n\n/*\n Given the length of the longest and the shortest side of a triangle, determine\n  if the triangle is equilateral.\n  Example:\n  equilateralTriangle(3, 4, 5) == false\n  equilateralTriangle(3, 4, 1) == true\n  equilateralTriangle(3, 4, 2) == true\n  */\nconst equilateralTriangle = (a, b, c) => {\n  return Math.abs(a - b) + Math.abs(b - c) + Math.abs(c - a) === 0;\n}\n\n/*\n"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  const allWords = words.filter(s => s!== \"\");\n  const maxWord = words.find(s => s === \"\");\n  return {\n    max: maxWord,\n    words: allWords\n  };\n};\n\nconsole.log(findMax([\"na me\", \"of\", \"string\"]));\nconsole.log(findMax([\"name \", \"enam\", \"game\"]));\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if(remaining === 0){\n    return number\n  }\n  if(number < need) {\n    return need - number\n  } else {\n    return eat(remaining, number - need, remaining)\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const lengthOperator = operator.length\n  const lengthOperand = operand.length\n  let result = operand[lengthOperand - 1]\n\n  if(lengthOperator > 1) {\n    for(let i = lengthOperand - 2; i > 0; i--) {\n      if(operator[i] == '+') {\n        result += operand[i]\n      }\n      if(operator[i] == '-') {\n        result -= operand[i]\n      }\n      if(operator[i] == '*') {\n        result *= operand[i]\n      }\n      if(operator[i] == '/') {\n        result /= operand[i]\n      }\n      if(operator[i] == '**') {\n        result = Math.pow(result, operand[i])\n      }\n    }\n  }\n  return result\n}\n\nconst test = (operator, operand) => {\n  console.log(doAlgebra(operator, operand))\n}\n\nconst operator = ['+', '-', '*', '/', '**']\nconst operand = [2, 3, 4, 5]\n\ntest(operator, operand)\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let c, len = s.length;\n  let ret = '';\n  for (let i = 0; i < len; i++) {\n    c = s[i];\n    if (c >= 'a' && c <= 'z') {\n      c = c.toUpperCase();\n    } else if (c >= 'A' && c <= 'Z') {\n      c = c.toLowerCase();\n    }\n    ret += c;\n  }\n  return ret;\n}\n\nconsole.log(solve('1234'));\nconsole.log(solve('ab'));\nconsole.log(solve('#a@C'));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text == null) {\n    return null;\n  }\n\n  const textArr = text.split(\"\").map(char => char.charCodeAt(0));\n\n  let h = 1, l = textArr.length;\n  let md5 = \"\";\n\n  for (let i = 0; i < l; i++) {\n    h = (h << 4) + textArr[i];\n\n    if (i % 2) {\n      md5 += String.fromCharCode(h);\n    }\n  }\n\n  return md5;\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = []\n  for (let i = a; i <= b; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nmodule.exports = generateIntegers\n<|endoftext|>"}
