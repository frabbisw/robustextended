{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    return numbers.reduce((acc, number) => {\n        const difference = Math.abs(number - acc);\n        if (difference < threshold) {\n            return acc;\n        }\n        return number;\n    }, numbers[0]);\n};\n\n/*\n  Finds the highest element in the given list.\n  >>> highest([\"a\", \"b\", \"c\"])\n  'c'\n  >>> highest([])\n  undefined\n  */\nconst highest = (numbers) => {\n    return _.max(numbers);\n};\n\n/*\n  Finds the lowest element in the given list.\n  >>> lowest([1, 2, 3])\n  1\n  >>> lowest([])\n  undefined\n  */\nconst lowest = (numbers) => {\n    return _.min(numbers);\n};\n\n/*\n  Returns the list of unique values in the given list.\n  >>> uniqueValues([1, 2, 3, 2, 3, 4, 3, 3, 4, 5, 3])\n  [1, 2, 3, 4, 5]\n  >>> uniqueValues([])\n  []\n  */\nconst uniqueValues = (numbers) => {\n    return _.uniq(numbers);\n};\n\nmodule.exports = {\n    hasCloseElements,\n    highest,\n    lowest,\n    uniqueValues\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  let parens = paren_string.split('');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.map(c => c.toUpperCase());\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.map(c => c.toLowerCase());\n  return parens;\n}\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  let parens = paren_string.split('');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.map(c => c.toUpperCase());\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.map(c => c.toLowerCase());\n  return parens;\n}\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups3 = (paren_string) => {\n  let parens = paren_string.split('');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.map(c => c.toUpperCase());\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.map(c => c.toLowerCase());\n  return parens;\n}\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups4 = (paren_string) => {\n  let parens = paren_string.split('');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.map(c => c.toUpperCase());\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.map(c => c.toLowerCase());\n  return parens;\n}\n\n/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups5 = (paren_string) => {\n  let parens = paren_string.split('');\n  parens = parens.filter(c => c!== '(');\n  parens = parens.filter(c => c!== ')');\n  parens = parens.filter(c => c!== '(');\n  parens = parens."}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const str = number.toString();\n  const i = str.indexOf('.');\n  return str.substring(0, i);\n};\n\n/* Given a number, i t can be decomposed into and integer part (largest integer smaller than n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\nR eturn the dec imal part of the number.\n  */\nconst truncateDecimal = (number) => {\n  const str = number.toString();\n  const i = str.indexOf('.');\n  return str.substring(i+1);\n};\n\n// Given a positive floating point numb e r, i t can be decomposed into and integer part (largest integer smaller than n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n//\n// R eturn the dec imal part of the number.\nconst truncateNumberDecimal = (number) => {\n  const str = number.toString();\n  const i = str.indexOf('.');\n  const dec = str.substring(i+1);\n  return truncateDecimal(dec);\n};\n\n// Given a positive floating point numb e r, i t can be decomposed into and integer part (largest integer smaller than n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n//\n// R eturn the dec imal part of the number.\nconst truncateNumberDecimalNumber = (number) => {\n  const str = number.toString();\n  const i = str.indexOf('.');\n  const dec = str.substring(i+1);\n  const number = truncateNumber(number);\n  return number + dec;\n};\n\nexport default {\n  truncateNumber,\n  truncateDecimal,\n  truncateNumberDecimal,\n  truncateNumberDecimalNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const length = operations.length;\n  let current = 0;\n  for (let i = 0; i < length; i += 1) {\n    if (operations[i] < 0) {\n      return true;\n    }\n    current += operations[i];\n  }\n  return false;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n  \n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {\n    acc += Math.abs(x - acc / (numbers.length - 1));\n    return acc;\n  });\n};\n\nconst meanAbsoluteDeviation = (numbers) => {\n  return numbers.reduce((acc, x) => {"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const half = (len + 1) / 2;\n  const middle = Array(half);\n  const start = half - 1;\n  const end = len - 1;\n  const list = Array(len);\n  for (let i = 0; i < half; i++) {\n    middle[i] = numbers[i];\n    list[start + i] = delimeter;\n  }\n  for (let i = 0; i < half; i++) {\n    middle[half + i] = numbers[i + half];\n    list[end - i] = delimeter;\n  }\n  return list.concat(middle);\n};\n\nmodule.exports = intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const levels = [0];\n  const depth = 0;\n  const stringLength = paren_string.length;\n  let current_level = 0;\n  let start_index = 0;\n  let end_index = 0;\n\n  for (let i = 0; i < stringLength; i++) {\n    if (paren_string[i] === '(') {\n      depth++;\n      levels[depth] = current_level;\n      current_level++;\n    }\n    else if (paren_string[i] === ')') {\n      if (depth === 0) {\n        return undefined;\n      }\n      depth--;\n      current_level = levels[depth];\n    }\n  }\n  return depth;\n};\n\nexport default parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const filter = (string) => string.indexOf(substring) > -1;\n  return strings.filter(filter);\n};\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  Let's calculate the sum and the product of first ten natural numbers\n  >>> sumProduct(range(1, 11))\n  (55, 3628800)\n  */\nconst sumProductRange = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  Let's calculate the sum and the product of first ten natural numbers\n  >>> sumProduct(range(1, 11))\n  (55, 3628800)\n  */\nconst sumProductIteration = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\n/*\n  Let's calculate the sum and the product of first ten natural numbers\n  >>> sumProduct(range(1, 11))\n  (55, 3628800)\n  */\nconst sumProductRecursion = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === numbers.length - 1) {\n      sum += numbers[i]\n      product *= numbers[i]\n    } else {\n      sum += numbers[i]\n      product *= numbers[i]\n      sumProductRecursion(numbers.slice(i + 1), int)\n    }\n  }\n  return [sum, product]\n}\n\nconst sumProduct = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst sumProductIteration = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst sumProductRecursion = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === numbers.length - 1) {\n      sum += numbers[i]\n      product *= numbers[i]\n    } else {\n      sum += numbers[i]\n      product *= numbers[i]\n      sumProductRecursion(numbers.slice(i + 1), int)\n    }\n  }\n  return [sum, product]\n}\n\n/*\n  Let's calculate the sum and the product of first ten natural numbers\n  >>> sumProduct(range(1, 11))\n  (55, 3628800)\n  */\nconst sumProduct = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst sumProductIteration = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst sumProductRecursion = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === numbers.length - 1) {\n      sum += numbers[i]\n      product *= numbers[i]\n    } else {\n      sum += numbers[i]\n      product *= numbers[i]\n      sumProductRecursion(numbers.slice(i + 1), int)\n    }\n  }\n  return [sum, product]\n}\n\n/*\n  Let's calculate the sum and the product of first ten natural numbers\n  >>> sumProduct(range(1, 11))\n  (55, 3628800)\n  */\nconst sumProduct = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst sumProductIteration = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n  return [sum, product]\n}\n\nconst sumProductRecursion = (numbers, int) => {\n  const [sum, product] = [0, 1]\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === numbers.length - 1) {\n      sum += numbers[i]\n      product *= numbers[i]\n    } else {\n      sum += numbers[i]\n      product *= numbers[i]\n      sumProductRecursion(numbers.slice(i + 1), int)\n    }\n  }\n  return [sum, product]\n}\n\nconst sumProduct = (n"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const list = numbers.slice(0);\n  const max = numbers[0];\n  const rollingMax = (currentNumber, index) => {\n    if (index === list.length) {\n      return currentNumber;\n    }\n    const nextNumber = list[index];\n    if (currentNumber > nextNumber) {\n      return currentNumber;\n    } else if (currentNumber < nextNumber) {\n      return rollingMax(nextNumber, index + 1);\n    } else {\n      return rollingMax(nextNumber, index + 1);\n    }\n  };\n  return rollingMax(max, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l -1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n\t\tif (pal.length == l){\n\t\t\treturn pal;\n\t\t}\n\t\ti--;\n\t}\n\treturn string;\n}\n/* \n   \n   * Find the largest palindrome that can be gens with the given string.\n   * Algorithm idea is simp le:\n   * - Find the longest t  postf ix of suppl ied str ing thatisa palindrome.\n   * - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n   * - Reverse the string.\n   * - Find the largest palindrome that can be gens with the string inversed.\n   */\nconst makePalindromeReverse = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l -1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n\t\tif (pal.length == l){\n\t\t\treturn pal;\n\t\t}\n\t\ti--;\n\t}\n\treturn string;\n}\n\nconst isPalindromeReverse = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l - 1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n\t\tif (pal.length == l){\n\t\t\treturn pal;\n\t\t}\n\t\ti--;\n\t}\n\treturn string;\n}\n\n/* Test if the strig is palindrome. */\nexport const testPalindrome = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l - 1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n\t\tif (pal.length == l){\n\t\t\treturn pal;\n\t\t}\n\t\ti--;\n\t}\n\treturn string;\n}\n\n/*\n   * Find the longest palindrome that can be gens with the given string.\n   * Algorithm idea is simp le:\n   * - Find the longest t  postf ix of suppl ied str ing thatisa palindrome.\n   * - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n   * - Reverse the string.\n   * - Find the largest palindrome that can be gens with the string inversed.\n   */\nconst makePalindromeReverseLongest = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l -1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n\t\tif (pal.length == l){\n\t\t\treturn pal;\n\t\t}\n\t\ti--;\n\t}\n\treturn string;\n}\n\nconst isPalindromeReverseLongest = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l - 1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n\t\tif (pal.length == l){\n\t\t\treturn pal;\n\t\t}\n\t\ti--;\n\t}\n\treturn string;\n}\n\n/*\n   * Find the largest palindrome that can be gens with the given string.\n   * Algorithm idea is simp le:\n   * - Find the longest t  postf ix of suppl ied str ing thatisa palindrome.\n   * - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n   * - Reverse the string.\n   * - Find the largest palindrome that can be gens with the string inversed.\n   */\nconst makePalindromeLongest = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l - 1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n\t\tif (pal.length == l){\n\t\t\treturn pal;\n\t\t}\n\t\ti--;\n\t}\n\treturn string;\n}\n\nconst isPalindromeLongest = (string) => {\n\tlet s = string.split('');\n\tlet l = s.length;\n\tlet i = l - 1;\n\twhile (i > 0 && i < l - 1){\n\t\tlet sub = s.slice(i);\n\t\tlet reverse = sub.reverse().join('');\n\t\tlet pal = sub + reverse;\n"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a.length === 0) return b;\n  if (b.length === 0) return a;\n  let result = a + b;\n  for (let i = a.length; i < b.length; i++) {\n    result = result.slice(0, i) + '1' + result.slice(i);\n  }\n  return result.slice(0, a.length) + '0' + result.slice(a.length);\n};\n\n/*\n  Given two strings, return the longest string that can be obtained by replacing a substring of the first string with the second string.\n  >>> longestCommonSubstring('a', 'b')\n  'b'\n  >>> longestCommonSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestCommonSubstring('aaa', 'a')\n  'aaa'\n  >>> longestCommonSubstring('a', 'a')\n  'a'\n  >>> longestCommonSubstring('aa', 'b')\n  'a'\n  >>> longestCommonSubstring('aaa', 'bb')\n  'aa'\n  >>> longestCommonSubstring('aaaa', 'aaaa')\n  'aaaa'\n  >>> longestCommonSubstring('a', 'bb')\n  'a'\n  >>> longestCommonSubstring('aaa', 'aaab')\n  'aaa'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('a', 'aa')\n  'a'\n  >>> longestCommonSubstring('ab', 'a')\n  'ab'\n  >>> longestCommonSubstring('a', 'aaa')\n  'a'\n  >>> longestCommonSubstring('aaa', 'a')\n  'aaa'\n  >>> longestCommonSubstring('', 'a')\n  'a'\n  >>> longestCommonSubstring('ab', 'bb')\n  'b'\n  >>> longestCommonSubstring('aaa', 'aaab')\n  'aaa'\n  >>> longestCommonSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestCommonSubstring('aaa', 'a')\n  'a'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'a'\n  >>> longestCommonSubstring('aa', 'a')\n  'aa'\n  >>> longestCommonSubstring('aa', 'aa')\n  'aa'\n  >>> longestCommonSubstring('aa', 'a')\n  'aa'\n  >>> longestCommonSubstring('a', 'a')\n  'a'\n  >>> longestCommonSubstring('a', 'aa')\n  'a'\n  >>> longestCommonSubstring('a', 'b')\n  'a'\n  >>> longestCommonSubstring('aaa', 'bb')\n  'aa'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('bb', 'a')\n  'bb'\n  >>> longestCommonSubstring('a', 'aaa')\n  'a'\n  >>> longestCommonSubstring('aaa', 'b')\n  'a'\n  >>> longestCommonSubstring('a', 'bb')\n  'a'\n  >>> longestCommonSubstring('a', 'aa')\n  'a'\n  >>> longestCommonSubstring('a', 'a')\n  'a'\n  >>> longestCommonSubstring('aaa', 'a')\n  'aaa'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestCommonSubstring('a', 'aa')\n  'a'\n  >>> longestCommonSubstring('aa', 'a')\n  'aa'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('a', 'aaab')\n  'aa'\n  >>> longestCommonSubstring('aaa', 'aaab')\n  'aaa'\n  >>> longestCommonSubstring('aa', 'aaaab')\n  'aa'\n  >>> longestCommonSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestCommonSubstring('aaa', 'a')\n  'aaa'\n  >>> longestCommonSubstring('a', 'aaa')\n  'a'\n  >>> longestCommonSubstring('aa', 'a')\n  'aa'\n  >>> longestCommonSubstring('aaa', 'b')\n  'b'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('b', 'aaa')\n  'b'\n  >>> longestCommonSubstring('bb', 'a')\n  'bb'\n  >>> longestCommonSubstring('bb', 'bb')\n  'bb'\n  >>> longestCommonSubstring('a', 'b')\n  'a'\n  >>> longestCommonSubstring('a', 'aa')\n  'a'\n  >>> longestCommonSubstring('aaa', 'b')\n  'b'\n  >>> longestCommonSubstring('a', 'bb')\n  'b'\n  >>> longestCommonSubstring('a', 'aa')\n  'a'\n  >>> longestCommonSubstring('aa', 'a')\n  'aa'\n  >>> longestCommonSubstring('aa', 'aa')\n  'aa'\n  >>> longestCommonSubstring('aa', 'a')\n  'aa'\n  >>> longestCommonSubstring('a', 'aa')\n  'a'\n  >>> longestCommonSubstring('aaa', 'a')\n  'aaa'\n  >>> longestCommonSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('a', 'aaa')\n  'a'\n  >>> longestCommonSubstring('aaa', 'a')\n  'aaa'\n  >>> longestCommonSubstring('aaa', 'aa')\n  'aaa'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('aa', 'a')\n  'aa'\n  >>> longestCommonSubstring('a', 'aaa')\n  'a'\n  >>> longestCommonSubstring('aaa', 'b')\n  'b'\n  >>> longestCommonSubstring('aa', 'aaa')\n  'aa'\n  >>> longestCommonSubstring('b', 'aaa')\n  'b'\n  "}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null;\n  const [l, s] = [0, strings[0]];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > l) {\n      [l, s] = [strings[i].length, strings[i]];\n    }\n  }\n  return s;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  while (b!== 0) {\n    const tmp = b;\n    b = a % b;\n    a = tmp;\n  }\n  return a;\n};\n\nmodule.exports = greatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  let i = 0\n  let result = []\n  while (i <= string.length) {\n    result = [string.substr(0, i)].concat(result)\n    i++\n  }\n  return result\n}\n\n/* Return longest of the input string  to shortestof the input string\n  >>> longestPrefix('abc')\n  'abc'\n  */\nconst longestPrefix = (string) => {\n  let i = 0\n  let result = ''\n  while (i <= string.length) {\n    if (string.substr(0, i).length > result.length) {\n      result = string.substr(0, i)\n    }\n    i++\n  }\n  return result\n}\n\n/* Return shortest of the input string  to longestof the input string\n  >>> shortestPrefix('abc')\n  'a'\n  */\nconst shortestPrefix = (string) => {\n  let i = 0\n  let result = ''\n  while (i <= string.length) {\n    if (string.substr(0, i).length < result.length) {\n      result = string.substr(0, i)\n    }\n    i++\n  }\n  return result\n}\n\n/* Return a list of all the unique words in the input string\n  >>> words('abcd')\n  ['abcd']\n  */\nconst words = (string) => {\n  let i = 0\n  let result = []\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (result.indexOf(word) === -1) {\n      result.push(word)\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the longest word in the input string\n  >>> longestWord('abcd')\n  'abcd'\n  */\nconst longestWord = (string) => {\n  let i = 0\n  let result = ''\n  while (i <= string.length) {\n    if (string.substr(i, i + 1).length > result.length) {\n      result = string.substr(i, i + 1)\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the shortest word in the input string\n  >>> shortestWord('abcd')\n  'a'\n  */\nconst shortestWord = (string) => {\n  let i = 0\n  let result = ''\n  while (i <= string.length) {\n    if (string.substr(i, i + 1).length < result.length) {\n      result = string.substr(i, i + 1)\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount('abcd')\n  2\n  */\nconst wordCount = (string) => {\n  let i = 0\n  let result = 0\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (string.indexOf(word)!== -1) {\n      result++\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount('abcd')\n  2\n  */\nconst wordCount2 = (string) => {\n  let i = 0\n  let result = 0\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (string.indexOf(word)!== -1) {\n      result++\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount('abcd')\n  2\n  */\nconst wordCount3 = (string) => {\n  let i = 0\n  let result = 0\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (string.indexOf(word)!== -1) {\n      result++\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount('abcd')\n  2\n  */\nconst wordCount4 = (string) => {\n  let i = 0\n  let result = 0\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (string.indexOf(word)!== -1) {\n      result++\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount('abcd')\n  2\n  */\nconst wordCount5 = (string) => {\n  let i = 0\n  let result = 0\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (string.indexOf(word)!== -1) {\n      result++\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount('abcd')\n  2\n  */\nconst wordCount6 = (string) => {\n  let i = 0\n  let result = 0\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (string.indexOf(word)!== -1) {\n      result++\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount('abcd')\n  2\n  */\nconst wordCount7 = (string) => {\n  let i = 0\n  let result = 0\n  while (i <= string.length) {\n    let word = string.substr(i, i + 1)\n    if (string.indexOf(word)!== -1) {\n      result++\n    }\n    i++\n  }\n  return result\n}\n\n/* Return the number of times the input string occurs in the input string\n  >>> wordCount"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i} `;\n  }\n  return s;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  let counter = 0;\n  string.split('').forEach((char) => {\n    counter += char.toLowerCase() === char.toUpperCase()? 1 : 0;\n  });\n  return counter;\n};\n\n// Tests\nexports.countDistinctCharacters = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_array = music_string.split(' ')\n  let beats = []\n  for (let i = 0; i < music_string_array.length; i++) {\n    beats = beats.concat(parseMusic(music_string_array[i]))\n  }\n  return beats\n}\n\nexport {parseMusic}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0;\n    let i = 0;\n    let j = 0;\n    while (i <= string.length - substring.length) {\n        while (j <= string.length - substring.length) {\n            if (string.substr(i, substring.length) === substring) {\n                count += 1;\n            }\n            i += 1;\n            j += 1;\n        }\n        i = i + 1;\n        j = 0;\n    }\n    return count;\n};\n\n/* Find the number of lines in a given file. */\nconst howManyLines = (filename) => {\n    let count = 0;\n    let index = 0;\n    let line = '';\n    const lines = fs.readFileSync(filename, 'utf8').split('\\n');\n    while (index < lines.length) {\n        line = lines[index];\n        if (line.length > 0) {\n            count += 1;\n        }\n        index += 1;\n    }\n    return count;\n};\n\n/* Find the number of words in a given file. */\nconst howManyWords = (filename) => {\n    let count = 0;\n    let index = 0;\n    let line = '';\n    const lines = fs.readFileSync(filename, 'utf8').split('\\n');\n    while (index < lines.length) {\n        line = lines[index];\n        if (line.length > 0) {\n            count += line.split(' ').length;\n        }\n        index += 1;\n    }\n    return count;\n};\n\n/* Find the number of unique words in a given file. */\nconst howManyUniqueWords = (filename) => {\n    let index = 0;\n    let line = '';\n    const lines = fs.readFileSync(filename, 'utf8').split('\\n');\n    let count = 0;\n    while (index < lines.length) {\n        line = lines[index];\n        if (line.length > 0) {\n            count += line.split(' ').length;\n        }\n        index += 1;\n    }\n    return count;\n};\n\n/* Find the number of unique words in a given file. */\nconst howManyUniqueWords2 = (filename) => {\n    let index = 0;\n    let line = '';\n    const lines = fs.readFileSync(filename, 'utf8').split('\\n');\n    let count = 0;\n    while (index < lines.length) {\n        line = lines[index];\n        if (line.length > 0) {\n            count += line.split(' ').length;\n        }\n        index += 1;\n    }\n    return count;\n};\n\n/* Find the number of unique words in a given file. */\nconst howManyUniqueWords3 = (filename) => {\n    let index = 0;\n    let line = '';\n    const lines = fs.readFileSync(filename, 'utf8').split('\\n');\n    let count = 0;\n    while (index < lines.length) {\n        line = lines[index];\n        if (line.length > 0) {\n            count += line.split(' ').length;\n        }\n        index += 1;\n    }\n    return count;\n};\n\n/* Find the number of unique words in a given file. */\nconst howManyUniqueWords4 = (filename) => {\n    let index = 0;\n    let line = '';\n    const lines = fs.readFileSync(filename, 'utf8').split('\\n');\n    let count = 0;\n    while (index < lines.length) {\n        line = lines[index];\n        if (line.length > 0) {\n            count += line.split(' ').length;\n        }\n        index += 1;\n    }\n    return count;\n};\n\nmodule.exports = {\n    howManyLines,\n    howManyWords,\n    howManyUniqueWords,\n    howManyUniqueWords2,\n    howManyUniqueWords3,\n    howManyUniqueWords4,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbers = numbers.replace(/ /g, '')\n  let n = numbers.split(' ')\n  let sortedN = []\n  for (let i = 0; i < n.length; i++) {\n    let number = parseInt(n[i], 10)\n    sortedN.push(number)\n  }\n  sortedN.sort()\n  return sortedN.join(' ')\n}\n\n/*\n  * Given a string containing non-negative integers separated by spaces,\n  * return all possible permutations.\n\n  * Note:\n  * The string may contain duplicate integers.\n  * The solution set must not contain duplicate permutations.\n  * For example, given the string '2 1 3',\n  * A solution set must not contain '2 1 3', '1 2 3', '1 3 2' or '3 2 1'.\n  */\nconst permute = (str) => {\n  let strArr = str.split(' ')\n  let strLength = strArr.length\n  let output = []\n  let i = 0\n  let j = 0\n  while (i < strLength) {\n    let subStr = strArr.splice(i, 1)\n    let subStrLength = subStr.length\n    let newPermutation = []\n    while (j < subStrLength) {\n      let subStrIndex = subStr[j]\n      let index = parseInt(subStrIndex, 10)\n      newPermutation.push(index)\n      j = j + 1\n    }\n    newPermutation.push(strArr[i])\n    output.push(newPermutation)\n    i = i + 1\n  }\n  return output\n}\n\n/*\n  * Given two words word1 and word2, return the shortest distance between these two words in the dictionary.\n\n  * For example,\n  * Given\n  * word1 = \"horse\"\n  * word2 = \"ros\"\n  * Return 3, because the distance between these two words is \"horse\" -> \"ros\" -> \"horse\"\n  *\n  * Note:\n  * A word may be defined with letters from A-Z and the characters'', '#', '@', '$', '%', '^', '&', '*', '{', '}', '~', '+', '_', '-', '=', ':', '|', '[', ']' and '\"'.\n  * The distance is calculated using the Levenshtein distance formula.\n  * */\nconst shortestDistance = (word1, word2) => {\n  let word1Arr = word1.split(' ')\n  let word2Arr = word2.split(' ')\n  let distanceArr = []\n  for (let i = 0; i < word1Arr.length; i++) {\n    for (let j = 0; j < word2Arr.length; j++) {\n      let distance = levenshteinDistance(word1Arr[i], word2Arr[j])\n      distanceArr.push(distance)\n    }\n  }\n  let shortestDistance = Math.min(...distanceArr)\n  return shortestDistance\n}\n\n/*\n  * Given two words word1 and word2, return the distance between these two words in the dictionary.\n\n  * For example,\n  * Given\n  * word1 = \"horse\"\n  * word2 = \"ros\"\n  * Return 3, because the distance between these two words is \"horse\" -> \"ros\" -> \"horse\"\n  *\n  * Note:\n  * A word may be defined with letters from A-Z and the characters'', '#', '@', '$', '%', '^', '&', '*', '{', '}', '~', '+', '_', '-', '=', ':', '|', '[', ']' and '\"'.\n  * */\nconst levenshteinDistance = (s1, s2) => {\n  if (s1 === null || s2 === null) {\n    return 0\n  }\n\n  let matrix = [\n    [0]\n  ]\n\n  for (let i = 0; i < s1.length; i++) {\n    let s1Letter = s1[i]\n    let s2Letter = s2[i]\n    matrix[0][i + 1] = i + 1\n    matrix[i + 1][0] = i + 1\n  }\n\n  for (let j = 1; j < s2.length + 1; j++) {\n    let prevJ = matrix[0][j - 1]\n    let prevI = matrix[j - 1][0]\n    let currentValue = matrix[0][j]\n    matrix[0][j] = prevJ + 1\n    matrix[j][0] = prevI + 1\n  }\n\n  for (let i = 1; i < s1.length + 1; i++) {\n    let prevI = matrix[i - 1][0]\n    let currentValue = matrix[i][0]\n    for (let j = 1; j < s2.length + 1; j++) {\n      let prevJ = matrix[i - 1][j]\n      let currentLetter = s2[j - 1]\n      let substitution = currentValue + 1\n      let deletion = prevJ + 1\n      let insert = prevI + 1\n      if (s1[i - 1] === currentLetter) {\n        substitution = prevJ + 1\n        insert = prevI + 1\n      }\n      matrix[i][j] = Math.min(substitution, deletion, insert)\n    }\n  }\n\n  return matrix[s1.length][s2.length]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  return _.chain(numbers)\n   .sortBy(x => Math.abs(x - Math.round(x)))\n   .reverse()\n   .take(2)\n   .value();\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n    const n = numbers.length;\n    if (n === 0) {\n        throw new Error('No numbers given');\n    }\n    if (n === 1) {\n        return [1.0];\n    }\n    const s = 1.0 / (Math.max(...numbers) - Math.min(...numbers));\n    return [Math.min(...numbers) * s, Math.max(...numbers) * s];\n};\n\n// ----------------------------------------------------------------------------\n//  Main\n// ----------------------------------------------------------------------------\n\nconst main = (args) => {\n    const options = parseArgs(args);\n    const [input, output] = processInput(options.input);\n    if (options.verbose) {\n        console.log('input ='+ input);\n        console.log('output ='+ output);\n    }\n\n    const inputN = input.length;\n    const outputN = output.length;\n\n    const d = {};\n\n    // Initialize the arrays\n    for (let i = 0; i < inputN; i++) {\n        d[i] = [];\n        for (let j = 0; j < outputN; j++) {\n            d[i][j] = 0.0;\n        }\n    }\n\n    // Set up the matrix\n    const m = new Float64Array(inputN);\n    for (let i = 0; i < inputN; i++) {\n        for (let j = 0; j < outputN; j++) {\n            m[i * outputN + j] = input[i][j];\n        }\n    }\n\n    // Run the matrix operation\n    const e = new Float64Array(outputN);\n    dft(m, e, outputN, options.t);\n\n    // Print the results\n    for (let i = 0; i < outputN; i++) {\n        console.log(output[i]);\n    }\n};\n\n// ----------------------------------------------------------------------------\n//  Program start\n// ----------------------------------------------------------------------------\n\nmain(process.argv.slice(2));\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const ret = []\n  for (let i = 0; i < values.length; i++) {\n    if (typeof values[i] === 'number') {\n      ret.push(values[i])\n    }\n  }\n  return ret\n}\n\n/*\n  >>> list2 = [1, 2, 3, 'a', {}, []]\n  >>> list3 = [1, 2, 3, 'a', {}, [1, 2, 3]]\n  >>> list4 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a']]\n  >>> list5 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5]]\n  >>> list6 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a']]\n  >>> list7 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1]]\n  >>> list8 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2]]\n  >>> list9 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3]]\n  >>> list10 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a']]\n  >>> list11 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6]]\n  >>> list12 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7]]\n  >>> list13 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8]]\n  >>> list14 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9]]\n  >>> list15 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10]]\n  >>> list16 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11]]\n  >>> list17 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12]]\n  >>> list18 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13]]\n  >>> list19 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14]]\n  >>> list20 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]]\n  >>> list21 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]]\n  >>> list22 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]]\n  >>> list23 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]]\n  >>> list24 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]]\n  >>> list25 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]]\n  >>> list26 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]]\n  >>> list27 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]]\n  >>> list28 = [1, 2, 3, 'a', {}, [1, 2, 3, 'a', 5, 'a', 1, 2, 3, 'a', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]]\n  >>>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    return string.length;\n};\n\n/* Return true if two strings are equal, false otherwise\n  >>> strEq('abc', 'def')\n  False\n  >>> strEq('abc', 'abc')\n  True\n  >>> strEq('abc', 'cba')\n  False\n  */\nconst strEq = (a, b) => {\n    return a === b;\n};\n\n/* Return a substring of the given string\n  >>> substr('abc', 0)\n  'abc'\n  >>> substr('abc', 1)\n  'b'\n  >>> substr('abc', 2)\n  'c'\n  >>> substr('abc', 3)\n  ''\n  >>> substr('abc', 4)\n  ''\n  */\nconst substr = (string, start) => {\n    if (start < 0 || start >= strlen(string)) {\n        return '';\n    }\n\n    return string.substring(start);\n};\n\n/* Return a copy of the given string\n  >>> strcopy('abc')\n  'abc'\n  >>> strcopy('abc')\n  'abc'\n  */\nconst strcopy = (string) => {\n    return string;\n};\n\n/* Return a string with the given number of spaces\n  >>> pad('abc', 3)\n  'abc  '\n  >>> pad('abc', 4)\n 'abc '\n  >>> pad('abc', 0)\n  ''\n  >>> pad('abc', -1)\n  ''\n  >>> pad('abc', 5)\n  'abc'\n  */\nconst pad = (string, numSpaces) => {\n    let result = '';\n\n    for (let i = 0; i < numSpaces; i++) {\n        result +='';\n    }\n\n    result += string;\n\n    return result;\n};\n\n/* Return the character at the given index in the given string\n  >>> charAt(3, 'abc')\n  'c'\n  >>> charAt(3, 'abc')\n  'c'\n  */\nconst charAt = (index, string) => {\n    if (index < 0 || index >= strlen(string)) {\n        return '';\n    }\n\n    return string.charAt(index);\n};\n\n/* Return the string with the given number of spaces appended\n  >>> padRight('abc', 3)\n  'abc  '\n  >>> padRight('abc', 4)\n 'abc '\n  >>> padRight('abc', 0)\n  ''\n  >>> padRight('abc', -1)\n  ''\n  >>> padRight('abc', 5)\n  'abc'\n  */\nconst padRight = (string, numSpaces) => {\n    let result = '';\n\n    for (let i = 0; i < numSpaces; i++) {\n        result +='';\n    }\n\n    result += string;\n\n    return result;\n};\n\n/* Return the string with the given number of spaces prepended\n  >>> padLeft('abc', 3)\n ' abc'\n  >>> padLeft('abc', 4)\n  'abc  '\n  >>> padLeft('abc', 0)\n  ''\n  >>> padLeft('abc', -1)\n  ''\n  >>> padLeft('abc', 5)\n  'abc'\n  */\nconst padLeft = (string, numSpaces) => {\n    let result = '';\n\n    for (let i = 0; i < numSpaces; i++) {\n        result +='';\n    }\n\n    result += string;\n\n    return result;\n};\n\n/* Return the character at the given index in the given string\n  >>> charCodeAt(3, 'abc')\n  97\n  >>> charCodeAt(3, 'abc')\n  97\n  */\nconst charCodeAt = (index, string) => {\n    if (index < 0 || index >= strlen(string)) {\n        return 0;\n    }\n\n    return string.charCodeAt(index);\n};\n\n/* Return the code point at the given index in the given string\n  >>> codePointAt(3, 'abc')\n  65\n  >>> codePointAt(3, 'abc')\n  65\n  */\nconst codePointAt = (index, string) => {\n    if (index < 0 || index >= strlen(string)) {\n        return 0;\n    }\n\n    return string.codePointAt(index);\n};\n\n/* Return the code point at the given index in the given string\n  >>> codePointAt(3, 'abc')\n  65\n  >>> codePointAt(3, 'abc')\n  65\n  */\nconst charCodeAt = (index, string) => {\n    if (index < 0 || index >= strlen(string)) {\n        return 0;\n    }\n\n    return string.charCodeAt(index);\n};\n\n/* Return a new string with the given code point at the given index\n  >>> codePointAt(3, 'abc')\n  65\n  >>> codePointAt(3, 'abc')\n  65\n  */\nconst charAt = (index, string) => {\n    return string.charAt(index);\n};\n\n/* Return a new string with the given code point at the given index\n  >>> codePointAt(3, 'abc')\n  65\n  >>> codePointAt(3, 'abc')\n  65\n  */\nconst charCodeAt = (index, string) => {\n    return string.charCodeAt(index);\n};\n\n/* Return the string with the given code point at the given index\n  >>> codePointAt(3, 'abc')\n  65\n  >>> codePointAt(3, 'abc')\n  65\n  */\nconst charAt = (index, string) => {\n    return string.charAt(index);\n};\n\n/* Return the number of code points in the given string\n  >>> numCodePoints('abc')\n  3\n  >>> numCodePoints('a\\u1234')\n  4\n  >>> numCodePoints('a\\u1234\\u1234')\n  6\n  */\nconst numCodePoints = (string) => {\n    let codePoints = 0;\n    let codePoint;\n\n    for (let i = 0; i < strlen(string); i++) {\n        codePoint = string.codePointAt(i);\n        codePoints++;\n    }\n\n    return codePoints;\n};\n\n/* Return the number of code points in the given string\n  >>> numCodePoints('abc"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let k = 1;\n  while (n % k) {\n    k += 1;\n  }\n  return k;\n};\n\nconst largestDivisorNumber = (n) => {\n  let k = 1;\n  while (n % k) {\n    k += 1;\n  }\n  return n / k;\n};\n\n/*\n  Finds the largest st nu mber that divides n evenly, smaller than n\n  >>> largestDivisorNumber(15)\n  5\n  >>> largestDivisorNumber(19)\n  3\n  >>> largestDivisorNumber(21)\n  7\n  >>> largestDivisorNumber(23)\n  11\n  */\nconst largestDivisorNumber = (n) => {\n  let k = 1;\n  while (n % k) {\n    k += 1;\n  }\n  return n / k;\n};\n\n/*\n  Finds the smallest st nu mber that divides n evenly, larger than n\n  >>> largestDivisorNumber(15)\n  5\n  >>> largestDivisorNumber(19)\n  7\n  >>> largestDivisorNumber(21)\n  11\n  >>> largestDivisorNumber(23)\n  3\n  */\nconst largestDivisorNumberNot = (n) => {\n  let k = largestDivisor(n);\n  while (n % k) {\n    k -= 1;\n  }\n  return n / k;\n};\n\n/*\n  Finds the smallest st nu mber that divides n evenly, larger than n\n  >>> largestDivisorNumberNot(15)\n  5\n  >>> largestDivisorNumberNot(19)\n  3\n  >>> largestDivisorNumberNot(21)\n  7\n  >>> largestDivisorNumberNot(23)\n  11\n  */\nconst largestDivisorNumberNot = (n) => {\n  let k = largestDivisorNumberNot(n);\n  while (n % k) {\n    k -= 1;\n  }\n  return n / k;\n};\n\n/*\n  Finds the smallest st nu mber that divides n evenly, larger than n\n  >>> largestDivisorNumberNot(15)\n  5\n  >>> largestDivisorNumberNot(19)\n  3\n  >>> largestDivisorNumberNot(21)\n  7\n  >>> largestDivisorNumberNot(23)\n  11\n  */\nconst largestDivisorNumber = (n) => {\n  let k = largestDivisor(n);\n  while (n % k) {\n    k -= 1;\n  }\n  return n / k;\n};\n\n/*\n  Finds the largest st nu mber that divides n evenly, smaller than n\n  >>> largestDivisorNumber(15)\n  5\n  >>> largestDivisorNumber(19)\n  3\n  >>> largestDivisorNumber(21)\n  7\n  >>> largestDivisorNumber(23)\n  11\n  */\nconst largestDivisorNumberNot = (n) => {\n  let k = largestDivisorNumber(n);\n  while (n % k) {\n    k += 1;\n  }\n  return n / k;\n};\n\n/*\n  Finds the largest st nu mber that divides n evenly, smaller than n\n  >>> largestDivisorNumber(15)\n  5\n  >>> largestDivisorNumber(19)\n  3\n  >>> largestDivisorNumber(21)\n  7\n  >>> largestDivisorNumber(23)\n  11\n  */\nconst largestDivisorNumber = (n) => {\n  let k = largestDivisor(n);\n  while (n % k) {\n    k -= 1;\n  }\n  return n / k;\n};\n\n/*\n  Finds the largest st nu mber that divides n evenly, smaller than n\n  >>> largestDivisorNumber(15)\n  5\n  >>> largestDivisorNumber(19)\n  3\n  >>> largestDivisorNumber(21)\n  7\n  >>> largestDivisorNumber(23)\n  11\n  */\nconst largestDivisorNumber = (n) => {\n  let k = largestDivisorNumber(n);\n  while (n % k) {\n    k -= 1;\n  }\n  return n / k;\n};\n\nconst largestDivisorNumber = (n) => largestDivisorNumber(n);\n\nconsole.log(largestDivisorNumber(15));\nconsole.log(largestDivisorNumber(19));\nconsole.log(largestDivisorNumber(21));\nconsole.log(largestDivisorNumber(23));\n\nconsole.log(largestDivisorNumberNot(15));\nconsole.log(largestDivisorNumberNot(19));\nconsole.log(largestDivisorNumberNot(21));\nconsole.log(largestDivisorNumberNot(23));\n\nconsole.log(largestDivisorNumber(15));\nconsole.log(largestDivisorNumber(19));\nconsole.log(largestDivisorNumber(21));\nconsole.log(largestDivisorNumber(23));\n\nconsole.log(largestDivisorNumberNot(15));\nconsole.log(largestDivisorNumberNot(19));\nconsole.log(largestDivisorNumberNot(21));\nconsole.log(largestDivisorNumberNot(23));\n\nconsole.log(largestDivisorNumber(15));\nconsole.log(largestDivisorNumber(19));\nconsole.log(largestDivisorNumber(21));\nconsole.log(largestDivisorNumber(23));\n\nconsole.log(largestDivisorNumberNot(15));\nconsole.log(largestDivisorNumberNot(19));\nconsole.log(largestDivisorNumberNot(21));\nconsole.log(largestDivisorNumberNot(23));\n\nconsole.log(largestDivisorNumber(15));\nconsole.log(largestDivisorNumber(19));\nconsole.log(largestDivisorNumber(21));\nconsole.log(largestDivisorNumber(23));\n\nconsole.log(largestDivisorNumberNot(15));\nconsole.log(largestDivisorNumberNot(19));\nconsole.log(largestDivisorNumberNot(21));\nconsole.log(largestDivisorNumberNot(23));\n\nconsole.log(largestDivisorNumber"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const num = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const result = [];\n  let current = 0;\n  while (current < numbers.length) {\n    if (numbers[current] === numbers[current + 1]) {\n      current += 2;\n    } else {\n      result.push(numbers[current]);\n      current++;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of integers, remove the maximum value.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeMax([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  >>> removeMax([1, 2, 3, 4, 2])\n  [1, 3, 4]\n  */\nconst removeMax = (numbers) => {\n  let result = [];\n  let current = 0;\n  while (current < numbers.length) {\n    if (numbers[current] > numbers[current + 1]) {\n      result.push(numbers[current]);\n      current++;\n    } else {\n      current += 2;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of strings, remove the maximum length string.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeMaxLength(\"bob\", \"sue\", \"bob\", \"sue\")\n  [\"bob\", \"sue\"]\n  >>> removeMaxLength(\"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  >>> removeMaxLength(\"bob\", \"sue\", \"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  */\nconst removeMaxLength = (strings) => {\n  let result = [];\n  let current = 0;\n  while (current < strings.length) {\n    if (strings[current].length > strings[current + 1].length) {\n      result.push(strings[current]);\n      current++;\n    } else {\n      current += 2;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of strings, remove the minimum length string.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeMinLength(\"bob\", \"sue\", \"bob\", \"sue\")\n  [\"bob\", \"sue\"]\n  >>> removeMinLength(\"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  >>> removeMinLength(\"bob\", \"sue\", \"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  */\nconst removeMinLength = (strings) => {\n  let result = [];\n  let current = 0;\n  while (current < strings.length) {\n    if (strings[current].length < strings[current + 1].length) {\n      result.push(strings[current]);\n      current++;\n    } else {\n      current += 2;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of strings, remove the last string in the list.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeLast(\"bob\", \"sue\", \"bob\", \"sue\")\n  [\"bob\", \"sue\"]\n  >>> removeLast(\"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  >>> removeLast(\"bob\", \"sue\", \"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  */\nconst removeLast = (strings) => {\n  let result = [];\n  let current = 0;\n  while (current < strings.length) {\n    if (strings[current]!== strings[current + 1]) {\n      result.push(strings[current]);\n      current++;\n    } else {\n      current += 2;\n    }\n  }\n  return result;\n};\n\n/**\n * From a list of strings, remove the first string in the list.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeFirst(\"bob\", \"sue\", \"bob\", \"sue\")\n  [\"bob\", \"sue\"]\n  >>> removeFirst(\"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  >>> removeFirst(\"bob\", \"sue\", \"bob\", \"sue\", \"bob\")\n  [\"bob\"]\n  */\nconst removeFirst = (strings) => {\n  let result = [];\n  let current = 0;\n  while (current < strings.length) {\n    if (strings[current]!== strings[current + 1]) {\n      result.push(strings[current]);\n      current++;\n    } else {\n      current += 2;\n    }\n  }\n  return result;\n};\n\nexport {\n  removeDuplicates,\n  removeMax,\n  removeMaxLength,\n  removeMinLength,\n  removeLast,\n  removeFirst\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/[a-z]/g, c => {\n    const upper = c.toUpperCase();\n    const lower = c.toLowerCase();\n    if (upper === lower) {\n      return upper;\n    }\n    return upper;\n  });\n};\n\nmodule.exports = flipCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let str = '';\n  for (let i = 0; i < strings.length; i++) {\n    str += strings[i];\n  }\n  return str;\n};\n\n/* Return a random integer from 0 to n-1 inclusive\n  >>> random(10)\n  5\n  >>> random(10, 1)\n  1\n  >>> random(10, 20)\n  9\n  */\nconst random = (n, max = undefined) => {\n  if (max === undefined) {\n    return Math.floor(Math.random() * n);\n  } else {\n    return Math.floor(Math.random() * (max - n + 1)) + n;\n  }\n};\n\n/* Convert an object to a string\n  >>> objectToString({})\n  ''\n  >>> objectToString({a: 1})\n  '{\"a\":1}'\n  >>> objectToString({a: 1, b: 2})\n  '{\"a\":1,\"b\":2}'\n  */\nconst objectToString = (obj) => {\n  let str = '';\n  for (let key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      str += `${key}:${obj[key]}\\n`;\n    }\n  }\n  return str;\n};\n\n/* Test if a string contains any characters\n  >>> contains('')\n  false\n  >>> contains('foo')\n  true\n  */\nconst contains = (str) => {\n  for (let i = 0; i < str.length; i++) {\n    if (str.indexOf(str[i]) > -1) {\n      return true;\n    }\n  }\n  return false;\n};\n\n/* Test if a string ends with another string\n  >>> endsWith('')\n  false\n  >>> endsWith('foo')\n  true\n  >>> endsWith('foo')\n  true\n  >>> endsWith('foo')\n  true\n  >>> endsWith('foo', 'f')\n  false\n  >>> endsWith('foo', 'f', 'o')\n  true\n  */\nconst endsWith = (str, end) => {\n  if (str.length >= end.length) {\n    return str.substring(str.length - end.length, str.length) === end;\n  }\n  return false;\n};\n\n/* Test if a string starts with another string\n  >>> startsWith('')\n  false\n  >>> startsWith('foo')\n  true\n  >>> startsWith('foo')\n  true\n  >>> startsWith('foo')\n  true\n  >>> startsWith('foo', 'f')\n  true\n  >>> startsWith('foo', 'f', 'o')\n  false\n  */\nconst startsWith = (str, start) => {\n  if (str.length >= start.length) {\n    return str.substring(0, start.length) === start;\n  }\n  return false;\n};\n\n/* Test if a string contains a character\n  >>> contains('', 'f')\n  false\n  >>> contains('foo', 'f')\n  true\n  >>> contains('foo', 'f', 'o')\n  true\n  >>> contains('foo', 'f', 'o', 'o')\n  true\n  >>> contains('foo', 'f', 'o', 'o', 'o')\n  true\n  >>> contains('foo', 'f', 'o', 'o', 'o', 'o')\n  true\n  >>> contains('foo', 'f', 'o', 'o', 'o', 'o', 'o')\n  true\n  >>> contains('foo', 'f', 'o', 'o', 'o', 'o', 'o', 'o')\n  true\n  */\nconst contains = (str, char) => {\n  if (str.indexOf(char) > -1) {\n    return true;\n  }\n  return false;\n};\n\n/* Test if a string contains a string\n  >>> contains('', 'foo')\n  false\n  >>> contains('foo', 'foo')\n  true\n  >>> contains('foo', 'foobar')\n  false\n  >>> contains('foo', 'foobar', 'foo')\n  true\n  >>> contains('foo', 'foobar', 'foobar')\n  true\n  */\nconst contains = (str, sub) => {\n  if (str.indexOf(sub) > -1) {\n    return true;\n  }\n  return false;\n};\n\n/* Test if a string starts with a string\n  >>> startsWith('', 'foo')\n  false\n  >>> startsWith('foo', 'foo')\n  true\n  >>> startsWith('foo', 'foobar')\n  false\n  >>> startsWith('foo', 'foobar', 'foo')\n  true\n  >>> startsWith('foo', 'foobar', 'foobar')\n  true\n  */\nconst startsWith = (str, sub) => {\n  if (str.indexOf(sub) === 0) {\n    return true;\n  }\n  return false;\n};\n\n/* Convert a string to an array of its characters\n  >>> stringToArray('foobar')\n  ['f', 'o', 'o', 'b', 'a', 'r']\n  >>> stringToArray('foobar', 'o')\n  ['f', 'f', 'o', 'o']\n  */\nconst stringToArray = (str, chars) => {\n  if (chars === undefined) {\n    return str.split('');\n  } else {\n    return str.split(chars);\n  }\n};\n\n/* Test if a string is a valid identifier\n  >>> identifier('foo')\n  true\n  >>> identifier('foo.bar')\n  false\n  >>> identifier('foo.bar.baz')\n  false\n  >>> identifier('foo.bar.baz.foo')\n  false\n  >>> identifier('foo.bar.baz.foo.bar')\n  false\n  >>> identifier('foo.bar.baz.foo.bar.baz')\n  true\n  >>> identifier('foo.bar.baz.foo.bar.baz.foo')\n  false\n  >>> identifier('foo.bar.baz.foo.bar.baz.foo.bar')\n  false\n  >>> identifier('foo.bar.baz.foo.bar.baz.foo"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (!strings) return [];\n  return strings.filter(str => str.startsWith(prefix));\n};\n\n/*\n  Convert a string to camelCase\n  >>> convertToCamelCase('foo_bar')\n  'fooBar'\n  >>> convertToCamelCase('foo_bar_baz')\n  'fooBarBaz'\n  >>> convertToCamelCase('fooBarBaz')\n  'fooBarBaz'\n  >>> convertToCamelCase('fooBar')\n  'fooBar'\n  >>> convertToCamelCase('fooBarBaz')\n  'fooBarBaz'\n  >>> convertToCamelCase('fooBarBaz-bar')\n  'fooBarBazBar'\n  >>> convertToCamelCase('fooBarBaz-bar-baz')\n  'fooBarBazBarBaz'\n  >>> convertToCamelCase('-fooBarBaz-bar-baz')\n  'fooBarBazBarBaz'\n  >>> convertToCamelCase('_fooBarBaz-bar-baz')\n  'fooBarBazBarBaz'\n  >>> convertToCamelCase('_fooBarBaz-bar-baz-')\n  'fooBarBazBarBaz'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_')\n  'fooBarBazBarBaz'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1')\n  'fooBarBazBarBaz1'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-')\n  'fooBarBazBarBaz1'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2')\n  'fooBarBazBarBaz12'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3')\n  'fooBarBazBarBaz123'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-')\n  'fooBarBazBarBaz123'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4')\n  'fooBarBazBarBaz1234'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-')\n  'fooBarBazBarBaz1234'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5')\n  'fooBarBazBarBaz12345'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-')\n  'fooBarBazBarBaz12345'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6')\n  'fooBarBazBarBaz123456'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-')\n  'fooBarBazBarBaz123456'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7')\n  'fooBarBazBarBaz1234567'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-')\n  'fooBarBazBarBaz1234567'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8')\n  'fooBarBazBarBaz12345678'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-')\n  'fooBarBazBarBaz12345678'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9')\n  'fooBarBazBarBaz123456789'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9-')\n  'fooBarBazBarBaz123456789'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9-0')\n  'fooBarBazBarBaz1234567890'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9-0-')\n  'fooBarBazBarBaz1234567890'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9-0-1')\n  'fooBarBazBarBaz12345678901'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9-0-1-')\n  'fooBarBazBarBaz12345678901'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9-0-1-2')\n  'fooBarBazBarBaz123456789012'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-5-6-7-8-9-0-1-2-')\n  'fooBarBazBarBaz123456789012'\n  >>> convertToCamelCase('fooBarBaz-bar-baz-_1-2-3-4-"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n    return l.filter((item) => item > 0)\n}\n\n/**\n  * Returns the first number in the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getFirstNumber([3, 2, 1, 3])\n  *   //-> 3\n  * @example\n  *   getFirstNumber([3, 2, 1, 3, 4])\n  *   //-> 3\n  */\nconst getFirstNumber = (list) => {\n    return list[0]\n}\n\n/**\n  * Returns the last number in the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getLastNumber([3, 2, 1, 3])\n  *   //-> 3\n  * @example\n  *   getLastNumber([3, 2, 1, 3, 4])\n  *   //-> 4\n  */\nconst getLastNumber = (list) => {\n    return list[list.length - 1]\n}\n\n/**\n  * Returns the first number in the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getLastNumber([3, 2, 1, 3])\n  *   //-> 3\n  * @example\n  *   getLastNumber([3, 2, 1, 3, 4])\n  *   //-> 4\n  */\nconst getLastNumber = (list) => {\n    return list[list.length - 1]\n}\n\n/**\n  * Returns the sum of the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getSum([3, 2, 1, 3])\n  *   //-> 6\n  * @example\n  *   getSum([3, 2, 1, 3, 4])\n  *   //-> 10\n  */\nconst getSum = (list) => {\n    return list.reduce((total, item) => total + item, 0)\n}\n\n/**\n  * Returns the mean of the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getMean([3, 2, 1, 3])\n  *   //-> 2.5\n  * @example\n  *   getMean([3, 2, 1, 3, 4])\n  *   //-> 3.0\n  */\nconst getMean = (list) => {\n    return getSum(list) / list.length\n}\n\n/**\n  * Returns the variance of the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getVariance([3, 2, 1, 3])\n  *   //-> 1\n  * @example\n  *   getVariance([3, 2, 1, 3, 4])\n  *   //-> 2.25\n  */\nconst getVariance = (list) => {\n    return getMean(list) - getSum(list) / list.length\n}\n\n/**\n  * Returns the standard deviation of the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getStandardDeviation([3, 2, 1, 3])\n  *   //-> 1\n  * @example\n  *   getStandardDeviation([3, 2, 1, 3, 4])\n  *   //-> 1.25\n  */\nconst getStandardDeviation = (list) => {\n    return Math.sqrt(getVariance(list))\n}\n\n/**\n  * Returns the median of the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getMedian([3, 2, 1, 3])\n  *   //-> 3\n  * @example\n  *   getMedian([3, 2, 1, 3, 4])\n  *   //-> 3\n  */\nconst getMedian = (list) => {\n    if (list.length % 2 === 0) {\n        return (list[Math.floor(list.length / 2)] + list[Math.floor(list.length / 2) - 1]) / 2\n    } else {\n        return list[Math.floor(list.length / 2)]\n    }\n}\n\n/**\n  * Returns the mode of the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getMode([3, 2, 1, 3])\n  *   //-> 3\n  * @example\n  *   getMode([3, 2, 1, 3, 4])\n  *   //-> 3\n  */\nconst getMode = (list) => {\n    const mode = []\n    let max = 0\n    for (let i = 0; i < list.length; i++) {\n        const item = list[i]\n        if (item > max) {\n            mode.push(item)\n            max = item\n        }\n    }\n    return mode\n}\n\n/**\n  * Returns the mode of the list.\n  *\n  * @param  {Array} list\n  * @return {Number}\n  * @example\n  *   getMode([3, 2, 1, 3])\n  *   //-> 3\n  * @example\n  *   getMode([3, 2, 1, 3, 4])\n  *   //-> 3\n  */\nconst getMode = (list) => {\n    const mode = []\n    let max = 0\n    for (let i = 0; i < list.length; i++) {\n        const item = list[i]\n        if (item > max) {\n            mode.push(item)\n            max = item\n        }\n    }\n    return mode\n}\n\n/**\n  * Returns the min of the list.\n  *\n  * @param  {Array} list\n"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) return false\n  if (n == 2) return true\n  if (n % 2 === 0) return false\n  return n > 1 && isPrime(n - 1)\n}\n\nexport default isPrime\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    let x = 0;\n    let x0 = 1;\n    let i = 0;\n    let j = xs.length;\n    while (j > 1) {\n        x = x + x0;\n        j--;\n        x0 = x0 * x;\n    }\n    return x;\n}\n\n/*\n  Given  a polynomial  p(x) = a1 + x * (a2 + x * (a3 +...)) +....,\n  finds  a  coefficient  ac  for  x^n.\n  */\nconst findCoefficient = (polynomial) => {\n    let coefficients = [];\n    let coefficient = 0;\n    let x = 1;\n    let a = polynomial.length - 1;\n    let i = a;\n    while (i >= 0) {\n        coefficient = x;\n        i--;\n        coefficient = coefficient * x;\n        coefficients.push(coefficient);\n        x = x * x;\n    }\n    return coefficients;\n}\n\n/*\n  Given  a polynomial  p(x) = a1 + x * (a2 + x * (a3 +...)) +....,\n  finds  a  coefficient  ac  for  x^n.\n  */\nconst findCoefficients = (polynomial) => {\n    let coefficients = [];\n    let coefficient = 0;\n    let x = 1;\n    let a = polynomial.length - 1;\n    let i = a;\n    while (i >= 0) {\n        coefficient = x;\n        i--;\n        coefficient = coefficient * x;\n        coefficients.push(coefficient);\n        x = x * x;\n    }\n    return coefficients;\n}\n\n/*\n  Given  a polynomial  p(x) = a1 + x * (a2 + x * (a3 +...)) +....,\n  finds  a  coefficient  ac  for  x^n.\n  */\nconst findCoefficients2 = (polynomial) => {\n    let coefficients = [];\n    let coefficient = 0;\n    let x = 1;\n    let a = polynomial.length - 1;\n    let i = a;\n    while (i >= 0) {\n        coefficient = x;\n        i--;\n        coefficient = coefficient * x;\n        coefficients.push(coefficient);\n        x = x * x;\n    }\n    return coefficients;\n}\n\n/*\n  Given  a polynomial  p(x) = a1 + x * (a2 + x * (a3 +...)) +....,\n  finds  a  coefficient  ac  for  x^n.\n  */\nconst findCoefficients3 = (polynomial) => {\n    let coefficients = [];\n    let coefficient = 0;\n    let x = 1;\n    let a = polynomial.length - 1;\n    let i = a;\n    while (i >= 0) {\n        coefficient = x;\n        i--;\n        coefficient = coefficient * x;\n        coefficients.push(coefficient);\n        x = x * x;\n    }\n    return coefficients;\n}\n\n/*\n  Given  a polynomial  p(x) = a1 + x * (a2 + x * (a3 +...)) +....,\n  finds  a  coefficient  ac  for  x^n.\n  */\nconst findCoefficients4 = (polynomial) => {\n    let coefficients = [];\n    let coefficient = 0;\n    let x = 1;\n    let a = polynomial.length - 1;\n    let i = a;\n    while (i >= 0) {\n        coefficient = x;\n        i--;\n        coefficient = coefficient * x;\n        coefficients.push(coefficient);\n        x = x * x;\n    }\n    return coefficients;\n}\n\n/*\n  Given  a polynomial  p(x) = a1 + x * (a2 + x * (a3 +...)) +....,\n  finds  a  coefficient  ac  for  x^n.\n  */\nconst findCoefficients5 = (polynomial) => {\n    let coefficients = [];\n    let coefficient = 0;\n    let x = 1;\n    let a = polynomial.length - 1;\n    let i = a;\n    while (i >= 0) {\n        coefficient = x;\n        i--;\n        coefficient = coefficient * x;\n        coefficients.push(coefficient);\n        x = x * x;\n    }\n    return coefficients;\n}\n\n/*\n  Given  a polynomial  p(x) = a1 + x * (a2 + x * (a3 +...)) +....,\n  finds  a  coefficient  ac  for  x^n.\n  */\nconst findCoefficients6 = (polynomial) => {\n    let coefficients = [];\n    let coefficient = 0;\n    let x = 1;\n    let a = polynomial.length - 1;\n    "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const ln = l.length;\n  const n = ln - 1;\n  const lt = (x, y) => x - y;\n  const ld = (x, y) => lt(x[1], y[1]) || x[0] - y[0];\n  const lx = l.slice();\n  const lz = [];\n  for (let i = 0; i < ln; i += 1) {\n    const k = (i + 1) % n;\n    const v = lz[i] = lx[k];\n    const j = i + n;\n    const x = lx[i];\n    const y = lx[j];\n    const z = v;\n    if (x - y > 3) {\n      lz.splice(i, 1);\n      lz.splice(j, 1);\n      lz.unshift(z);\n    }\n  }\n  return lz.slice();\n};\n\nconsole.log(sortThird([1, 2, 3]));\nconsole.log(sortThird([5, 6, 3, 4, 8, 9, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const uniqueArray = [];\n  const len = l.length;\n  for (let i = 0; i < len; i++) {\n    if (uniqueArray.indexOf(l[i]) === -1) {\n      uniqueArray.push(l[i]);\n    }\n  }\n  return uniqueArray;\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity\n  l.forEach((x) => {\n    if (x > max) max = x\n  })\n  return max\n}\n\n/*\n  Given an array of ints, return the index of the element that has the maximum value.\n  >>> maxElement([1, 2, 3])\n  2\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst maxElementIndex = (l) => {\n  let max = -Infinity\n  let index = -1\n  l.forEach((x, i) => {\n    if (x > max) {\n      max = x\n      index = i\n    }\n  })\n  return index\n}\n\n/*\n  Given an array of ints, return the index of the element that has the minimum value.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst minElementIndex = (l) => {\n  let min = Infinity\n  let index = -1\n  l.forEach((x, i) => {\n    if (x < min) {\n      min = x\n      index = i\n    }\n  })\n  return index\n}\n\n/*\n  Given an array of ints, return the index of the element that has the maximum value.\n  >>> maxElement([1, 2, 3])\n  2\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst minElement = (l) => {\n  let min = Infinity\n  l.forEach((x) => {\n    if (x < min) min = x\n  })\n  return min\n}\n\n/*\n  Given an array of ints, return the index of the element that has the maximum value.\n  >>> maxElement([1, 2, 3])\n  2\n  >>> maxElement([1, 2, 3, 4, 5, 6, 7])\n  7\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  9\n  */\nconst maxElement = (l) => {\n  let max = -Infinity\n  l.forEach((x) => {\n    if (x > max) max = x\n  })\n  return max\n}\n\n/*\n  Given an array of ints, return the index of the element that has the minimum value.\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  1\n  */\nconst minElement = (l) => {\n  let min = -Infinity\n  l.forEach((x) => {\n    if (x < min) min = x\n  })\n  return min\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const divisor = 13;\n    const divisor11 = 11;\n    let num = n;\n    let total = 0;\n    while (num > 0) {\n        if (num % divisor === 0) {\n            total += divisor;\n        } else if (num % divisor11 === 0) {\n            total += divisor11;\n        } else {\n            total += num;\n        }\n        num -= 1;\n    }\n    return total;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    let l1 = [...l].sort((a, b) => {\n        if(a % 2!== b % 2){\n            return a - b\n        }else{\n            return a\n        }\n    })\n    return l1\n}\n\nmodule.exports = sortEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\n/*\n  takes as input string.Returns it's decoded form.\n  */\nconst decode = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return groups2.join(' '); \n}\n\nmodule.exports.encode = encode;\nmodule.exports.decode = decode;\nmodule.exports.encodeCyclic = encodeCyclic;\nmodule.exports.decodeC = decodeC;\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    const a = 2;\n    const b = 3;\n    const i = 4;\n    const x = 5;\n\n    if (n === 1) {\n        return 2;\n    } else if (n === 2) {\n        return 3;\n    } else if (n === 3) {\n        return 5;\n    }\n\n    return a + b;\n\n    /*\n    let x = a + b;\n    while (x < n) {\n        a = b;\n        b = x;\n        x = a + b;\n    }\n\n    return x;\n    */\n}\n\n/*\n  primeFactors returns n-th number that is a prime factor of n-th number.\n  >>> primeFactors(1)\n  []\n  >>> primeFactors(2)\n  [2]\n  >>> primeFactors(3)\n  [2, 3]\n  >>> primeFactors(4)\n  [2, 2, 2]\n  >>> primeFactors(5)\n  [2, 3, 5]\n  >>> primeFactors(6)\n  [2, 3, 3, 2, 2, 2]\n  >>> primeFactors(7)\n  [2, 7, 5, 7, 3, 5, 3, 7]\n  */\nconst primeFactors = (n) => {\n    let x = 2;\n    let primeFactors = [];\n    let i = 2;\n    while (x < n) {\n        while (n % x === 0) {\n            primeFactors.push(x);\n            n = n / x;\n        }\n        x = x + 1;\n    }\n    return primeFactors;\n}\n\n/*\n  isPrime returns true if n-th number is prime and false otherwise.\n  >>> isPrime(1)\n  false\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  false\n  >>> isPrime(6)\n  true\n  >>> isPrime(7)\n  false\n  >>> isPrime(8)\n  false\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  */\nconst isPrime = (n) => {\n    if (n === 1) {\n        return false;\n    } else if (n === 2) {\n        return true;\n    } else if (n === 3) {\n        return true;\n    }\n\n    let x = 2;\n    while (x < n) {\n        if (n % x === 0) {\n            return false;\n        }\n        x = x + 1;\n    }\n    return true;\n}\n\n/*\n  factorial returns n-th factorial.\n  >>> factorial(1)\n  1\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  >>> factorial(5)\n  120\n  */\nconst factorial = (n) => {\n    if (n === 1) {\n        return 1;\n    } else if (n === 2) {\n        return 2;\n    } else if (n === 3) {\n        return 6;\n    }\n\n    let x = 1;\n    while (x < n) {\n        x = x * (n - 1);\n    }\n    return x;\n}\n\n/*\n  primeFibs returns fibonacci numbers that are also prime.\n  >>> primeFibs(1)\n  []\n  >>> primeFibs(2)\n  [2]\n  >>> primeFibs(3)\n  [2, 3]\n  >>> primeFibs(4)\n  [2, 3, 5]\n  >>> primeFibs(5)\n  [2, 3, 5, 7]\n  >>> primeFibs(6)\n  [2, 3, 5, 7, 11]\n  >>> primeFibs(7)\n  [2, 3, 5, 7, 11, 13, 17]\n  >>> primeFibs(8)\n  [2, 3, 5, 7, 11, 13, 17, 19]\n  >>> primeFibs(9)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23]\n  >>> primeFibs(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primeFibs = (n) => {\n    const a = 2;\n    const b = 3;\n    const i = 4;\n    const x = 5;\n\n    if (n === 1) {\n        return [];\n    } else if (n === 2) {\n        return [2];\n    } else if (n === 3) {\n        return [2, 3];\n    }\n\n    let fibs = [];\n    let primeFibs = [];\n    let i = 2;\n    while (i < n) {\n        fibs.push(a + b);\n        a = b;\n        b = fibs[i];\n        i += 1;\n    }\n    return primeFibs;\n}\n\n/*\n  main returns n-th Fibonacci number that is also prime.\n  >>> main(1)\n  2\n  >>> main(2)\n  3\n  >>> main(3)\n  5\n  >>> main(4)\n  13\n  >>> main(5)\n  89\n  */\nconst main = (n) => {\n    let primeFibs = primeFibs(n);\n    let primeFactors = primeFactors(n);\n    let primeFibsSum = 0;\n    let primeFactorsSum = 0;\n    for (let i = 0; i < primeFibs.length; i += 1) {\n        primeFibsSum += primeFibs[i];\n        for (let j = 0; j < primeFactors.length; j += 1) {\n            primeFactorsSum += primeFactors[j];\n        }\n    }\n    return primeFib"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  if(!l || l.length === 0) {\n    return false\n  }\n  let sum = l.reduce((prev, current) => prev + current, 0)\n  if(sum === 0) {\n    return true\n  }\n  return false\n}\n\nexport default triplesSumToZero<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n    int i;\n    for (i = 0; i < n; i++) {\n      int j;\n      for (j = 0; j < n; j++) {\n        if (i!= j) {\n          int r = rand() % (n - i);\n          int l = i + r;\n          int lx = (int) x[i];\n          int rx = (int) x[j];\n          if ((rx - lx) > 0) {\n            int m = l;\n            l = r;\n            r = m;\n          }\n          int ly = (int) y[i];\n          int ry = (int) y[j];\n          if ((ry - ly) > 0) {\n            int m = l;\n            l = r;\n            r = m;\n          }\n          int m = r;\n          int n = l;\n          if (((rx - lx) * (ry - ly)) > 0) {\n            if (((ry - ly) * (rx - lx)) < 0) {\n              r = l = m = n = 0;\n            }\n            else {\n              if (lx < rx) {\n                r = l = m = n = 0;\n              }\n              else {\n                if (rx < lx) {\n                  r = l = m = n = 0;\n                }\n              }\n            }\n          }\n          else {\n            if (((ry - ly) * (rx - lx)) < 0) {\n              r = l = m = n = 0;\n            }\n            else {\n              if (ly < ry) {\n                r = l = m = n = 0;\n              }\n              else {\n                if (ry < ly) {\n                  r = l = m = n = 0;\n                }\n              }\n            }\n          }\n          if (r > 0) {\n            r--;\n            collisions.Add(new Collision(i, j, rx, ry, x[i], y[i], x[j], y[j]));\n          }\n          if (l > 0) {\n            l--;\n            collisions.Add(new Collision(i, j, rx, ry, x[i], y[i], x[j], y[j]));\n          }\n          if (m > 0) {\n            m--;\n            collisions.Add(new Collision(i, j, rx, ry, x[i], y[i], x[j], y[j]));\n          }\n          if (n > 0) {\n            n--;\n            collisions.Add(new Collision(i, j, rx, ry, x[i], y[i], x[j], y[j]));\n          }\n        }\n      }\n    }\n  }\n\nint main() {\n  int n = 100;\n  int i, j;\n  int t = 0;\n  int *x = new int[n];\n  int *y = new int[n];\n  while (t < 10000000) {\n    for (i = 0; i < n; i++) {\n      x[i] = (int) (rand() % 2000);\n      y[i] = (int) (rand() % 2000);\n    }\n    int collisions = 0;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i!= j) {\n          if (((x[i] - x[j]) * (y[i] - y[j])) > 0) {\n            if (((y[i] - y[j]) * (x[i] - x[j])) < 0) {\n              collisions++;\n            }\n          }\n        }\n      }\n    }\n    t++;\n    cout << collisions << endl;\n  }\n  return 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.reduce((acc, x, i) => {\n    return acc.concat([x + 1, x + 2, x + 3]);\n  }, [1, 2, 3]);\n};\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  let hasZero = false;\n  l.forEach((n) => {\n    if (n < 0) {\n      hasZero = true;\n      return;\n    }\n    if (hasZero) {\n      return;\n    }\n    for (let j = 0; j < l.length; j++) {\n      if (l[j] < 0) {\n        continue;\n      }\n      if (l[j] === n) {\n        return;\n      }\n    }\n    hasZero = true;\n  });\n  return hasZero;\n};\n\nexport default pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    let string = ''\n    while (x > 0) {\n        string = (Math.floor(x % base) + base).toString(base).toString(base).padStart(base.toString(base).length, '0') + string\n        x = Math.floor(x / base)\n    }\n    return string\n}\n\n/*\n  convert the given number in base 10 to base n\n  base numbe rs ar e lesst han 10.\n  return string representation after the conversion.\n  >>> convertBase(12, 3)\n  '210'\n  >>> convertBase(8, 2)\n  '22'\n  >>> convertBase(10, 2)\n  '1010'\n  >>> convertBase(8, 16)\n  '100'\n  >>> convertBase(8, 16)\n  '100'\n  */\nconst convertBase = (x, base) => {\n    let string = ''\n    while (x > 0) {\n        string = (Math.floor(x % base) + base).toString(base).toString(base).padStart(base.toString(base).length, '0') + string\n        x = Math.floor(x / base)\n    }\n    return string\n}\n\n/*\n  convert the given number to base n\n  return string representation after the conversion.\n  >>> convertBase(12, 3)\n  '210'\n  >>> convertBase(8, 2)\n  '22'\n  >>> convertBase(10, 2)\n  '1010'\n  >>> convertBase(8, 16)\n  '100'\n  >>> convertBase(8, 16)\n  '100'\n  */\nconst convertBaseBack = (x, base) => {\n    let string = ''\n    while (x > 0) {\n        string = (Math.floor(x % base) + base).toString(base).toString(base).padStart(base.toString(base).length, '0') + string\n        x = Math.floor(x / base)\n    }\n    return string\n}\n\n/*\n  return the base 10 of the given number\n  >>> convertBaseBack(12, 3)\n  6\n  >>> convertBaseBack(8, 2)\n  4\n  >>> convertBaseBack(10, 2)\n  2\n  >>> convertBaseBack(8, 16)\n  0\n  >>> convertBaseBack(8, 16)\n  0\n  */\nconst base10 = (x, base) => {\n    let string = ''\n    while (x > 0) {\n        string = (Math.floor(x % base) + base).toString(base).toString(base).padStart(base.toString(base).length, '0') + string\n        x = Math.floor(x / base)\n    }\n    return string\n}\n\n/*\n  calculate the value of the given expression in the given base\n  >>> baseValue(0, 10)\n  0\n  >>> baseValue(1, 10)\n  9\n  >>> baseValue(2, 10)\n  10\n  >>> baseValue(3, 10)\n  11\n  >>> baseValue(4, 10)\n  12\n  >>> baseValue(5, 10)\n  13\n  >>> baseValue(6, 10)\n  14\n  >>> baseValue(7, 10)\n  15\n  >>> baseValue(8, 10)\n  16\n  >>> baseValue(9, 10)\n  17\n  >>> baseValue(10, 10)\n  18\n  >>> baseValue(11, 10)\n  19\n  >>> baseValue(12, 10)\n  20\n  >>> baseValue(13, 10)\n  21\n  >>> baseValue(14, 10)\n  22\n  >>> baseValue(15, 10)\n  23\n  >>> baseValue(16, 10)\n  24\n  >>> baseValue(17, 10)\n  25\n  >>> baseValue(18, 10)\n  26\n  >>> baseValue(19, 10)\n  27\n  >>> baseValue(20, 10)\n  28\n  >>> baseValue(21, 10)\n  29\n  >>> baseValue(22, 10)\n  30\n  >>> baseValue(23, 10)\n  31\n  >>> baseValue(24, 10)\n  32\n  >>> baseValue(25, 10)\n  33\n  >>> baseValue(26, 10)\n  34\n  >>> baseValue(27, 10)\n  35\n  >>> baseValue(28, 10)\n  36\n  >>> baseValue(29, 10)\n  37\n  >>> baseValue(30, 10)\n  38\n  >>> baseValue(31, 10)\n  39\n  >>> baseValue(32, 10)\n  40\n  >>> baseValue(33, 10)\n  41\n  >>> baseValue(34, 10)\n  42\n  >>> baseValue(35, 10)\n  43\n  >>> baseValue(36, 10)\n  44\n  >>> baseValue(37, 10)\n  45\n  >>> baseValue(38, 10)\n  46\n  >>> baseValue(39, 10)\n  47\n  >>> baseValue(40, 10)\n  48\n  >>> baseValue(41, 10)\n  49\n  >>> baseValue(42, 10)\n  50\n  >>> baseValue(43, 10)\n  51\n  >>> baseValue(44, 10)\n  52\n  >>> baseValue(45, 10)\n  53\n  >>> baseValue(46, 10)\n  54\n  >>> baseValue(47, 10)\n  55\n  >>> baseValue(48, 10)\n  56\n  >>> baseValue(49, 10)\n  57\n  >>> baseValue(50, 10)\n  58\n  >>> baseValue(51, 10)\n  59\n  >>> baseValue(52, 10)\n  60\n  >>> baseValue(53, 10)\n  61\n  >>> baseValue(54, 10)\n  62\n  >>> baseValue(55, 10)\n  63\n  >>> baseValue(56, 10)\n  64\n  >>> baseValue(57, 10)\n  65\n  >>> baseValue(58, 10"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * Math.sqrt(2) - (2 * h * (h - 1)) / 3;\n}\n\n/*\nGiven the length of a side, the length of a side and high retur n are a for a triangle.\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  >>> triangleArea(10, 10)\n  10000\n  >>> triangleArea(10, 10)\n  10000\n  */\nconst triangleArea = (a, h) => {\n  return (a * h) / 2;\n}\n\n/*\nGiven length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n}\n\n//# sourceMappingURL=fib4.js.map<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const length = l.length;\n  if (length === 0) return NaN;\n  if (length === 1) return l[0];\n  if (length === 2) return (l[0] + l[1]) / 2;\n  const half = length / 2;\n  const left = l.slice(0, half);\n  const right = l.slice(half, length);\n  return (left[length - 1] + right[0]) / 2;\n};\n\n/*\n  Return the median of the array `l`.\n  >>> median([1, 2, 3, 4])\n  2.5\n  >>> median([1, 2, 3, 4, 5])\n  3.5\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nexport const median = (l) => {\n  const length = l.length;\n  if (length === 0) return NaN;\n  if (length === 1) return l[0];\n  if (length === 2) return (l[0] + l[1]) / 2;\n  const half = length / 2;\n  const left = l.slice(0, half);\n  const right = l.slice(half, length);\n  return (left[length - 1] + right[0]) / 2;\n};\n\n/*\n  Return the mode of the list `l`.\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([1, 2, 3, 4, 5])\n  4\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8\n  */\nconst mode = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    set.add(l[i]);\n  }\n  const values = set.values();\n  if (values.length === 0) return NaN;\n  if (values.length === 1) return values[0];\n  return values.reduce((acc, v) => {\n    if (acc.length === 0) {\n      acc.push(v);\n    } else {\n      const x = acc[0];\n      const y = v;\n      if (x === y) {\n        acc.push(v);\n      }\n    }\n    return acc;\n  });\n};\n\n/*\n  Return the mode of the array `l`.\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([1, 2, 3, 4, 5])\n  4\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  8\n  */\nexport const mode = (l) => {\n  const set = new Set();\n  for (let i = 0; i < l.length; i++) {\n    set.add(l[i]);\n  }\n  const values = set.values();\n  if (values.length === 0) return NaN;\n  if (values.length === 1) return values[0];\n  return values.reduce((acc, v) => {\n    if (acc.length === 0) {\n      acc.push(v);\n    } else {\n      const x = acc[0];\n      const y = v;\n      if (x === y) {\n        acc.push(v);\n      }\n    }\n    return acc;\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  return text.split('').reverse().join('') === text;\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return Math.pow(2, n) % p;\n};\n\n/**\n  * Modulus p in binary representation\n  * @param  {number} n\n  * @param  {number} p\n  * @return {number}\n  * @example\n  * //\n  * modpbin(3, 5)\n  * //\n  * //returns 3\n  */\nconst modpbin = (n, p) => {\n    return modp(n, p);\n};\n\n/**\n  * Modulus p in hexadecimal representation\n  * @param  {number} n\n  * @param  {number} p\n  * @return {number}\n  * @example\n  * //\n  * modphp(3, 5)\n  * //\n  * //returns 3\n  */\nconst modphp = (n, p) => {\n    return modp(n, p).toString(2);\n};\n\n/**\n  * Modulus p in decimal representation\n  * @param  {number} n\n  * @param  {number} p\n  * @return {number}\n  * @example\n  * //\n  * modpdec(3, 5)\n  * //\n  * //returns 3\n  */\nconst modpdec = (n, p) => {\n    return modp(n, p).toString(10);\n};\n\n/**\n  * Modulus p in octal representation\n  * @param  {number} n\n  * @param  {number} p\n  * @return {number}\n  * @example\n  * //\n  * modpoct(3, 5)\n  * //\n  * //returns 3\n  */\nconst modpoct = (n, p) => {\n    return modp(n, p).toString(8);\n};\n\n/**\n  * Modulus p in binary representation\n  * @param  {number} n\n  * @param  {number} p\n  * @return {number}\n  * @example\n  * //\n  * modpbin(3, 5)\n  * //\n  * //returns 3\n  */\nconst modphex = (n, p) => {\n    return modp(n, p).toString(16);\n};\n\nmodule.exports = {\n    modp,\n    modpbin,\n    modpdec,\n    modpoct,\n    modphex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  let retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n}\n/*\nencode_shift is encoded by shifting e every character by 5 in the alphabet.\n*/\nconst encodeShiftTo =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\n/*\ndecode_shift is decoded by shifting e every character by 5 in the alphabet.\n*/\nconst decodeShiftTo =(s) =>{\n  let retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n}\n\nconst encode =(s) => {\n  retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n} \n\nconst decode =(s) =>{\n  let retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n}\n\n/*\nencode_shift is encoded by shifting e every character by 5 in the alphabet.\n*/\nconst encodeTo =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decodeTo =(s) =>{\n  let retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n}\n\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n\nconst decodeShift =(s) =>{\n  let retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n}\n\nconst encodeShiftTo =(s) => {\n  retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n} \n\nconst decodeShiftTo =(s) =>{\n  let retu rn s. split(\" \" ).map(c h => \n    ((ch.ch arC odeAt(0) - \"a\".charCod eAt(0)) % 26) + \"a\".charCod eAt(0)\n  ).join(\"\");\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  encode_shift: encodeShift,\n  decode_shift: decodeShift,\n  encode_shift_to: encodeShiftTo,\n  decode_shift_to: decodeShiftTo,\n  encodeTo: encodeTo,\n  decodeTo: decodeTo\n};<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    if (text === undefined) return '';\n    if (text === null) return '';\n    return text.replace(/[AEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels2 = (text) => {\n    if (text === undefined) return '';\n    if (text === null) return '';\n    return text.replace(/[AEIOUAEIOU]/g, '');\n}\n\n/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels3 = (text) => {\n    if (text === undefined) return '';\n    if (text === null) return '';\n    return text.replace(/[AEIOUAEIOUAEIOU]/g, '');\n}\n\n// test\n\n// console.log(removeVowels(\"aaBAA\"))\n// console.log(removeVowels(\"aab\"))\n// console.log(removeVowels(\"zBCD\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"Aab\"))\n// console.log(removeVowels(\"aab\"))\n// console.log(removeVowels(\"zBCD\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"Cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n// console.log(removeVowels(\"cab\"))\n// console.log(removeVowels(\"bac\"))\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let i = 0;\n  let j = 0;\n\n  for (i = 0; i < l.length; i++) {\n    for (j = 0; j < l.length; j++) {\n      if (l[i] <= t) {\n        if (l[i] < l[j]) {\n          return false;\n        }\n      }\n    }\n  }\n  return true;\n};\n\nconst main = () => {\n  console.log(belowThreshold([1, 2, 4, 10], 100));\n  console.log(belowThreshold([1, 20, 4, 10], 5));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\n// 使用方法\n/*\n  add(2, 3) = 5\n  add(5, 7) = 12\n*/\n\n// 思路\n// 每次利用add函数计算结果, 直到add函数出现不一致, 就记录一个值, 到达不一致, 则把该值添加到输出中\n\nconst add = (x, y) => {\n    if (x < y) {\n        return x + y;\n    } else if (x > y) {\n        return y + x;\n    } else {\n        return x;\n    }\n};\n\n// 使用示例\n/*\n  add(2, 3) = 5\n  add(5, 7) = 12\n*/\n\n// 功能\n// 把输入的一个值与另一个值的和与某个值进行交换, 如果这个值输入为0, 则不改变输出值, 因为为0也是0\n// 可以通过计算值的和计算出它的和与某个值的和\nconst swap = (x, y) => {\n    if (x == 0) {\n        return y;\n    } else if (y == 0) {\n        return x;\n    } else {\n        return x + y;\n    }\n};\n\n// 使用示例\n/*\n  swap(5, 0) = 5\n  swap(0, 7) = 7\n*/\n\n// 功能\n// 输入一个正整数, 输出按照该数的降序排列的两个值\n// 说明: 一个正整数可以被拆成任意两个整数, 分别与此整数分别除以10, 并且计算出它们的和, 与此和等于某个数, 说明输出的值都是正整数, 与此数之和也不能相等\n// 可以使用Math.floor, Math.ceil函数计算此数的值\nconst num = (n) => {\n    return Math.floor(n / 10) * 10 + Math.ceil(n % 10);\n};\n\n// 使用示例\n/*\n  num(5) = 2\n  num(0) = 0\n*/\n\n// 功能\n// 输入一个正整数, 判断该数是否为它最小的数, 根据算法结果, 输出该数的累加和\nconst smallest = (n) => {\n    const sum = 0;\n    const count = 0;\n    while (n) {\n        sum += n;\n        count++;\n        n = num(n);\n    }\n    return sum + count;\n};\n\n// 使用示例\n/*\n  smallest(0) = 0\n  smallest(5) = 5\n  smallest(7) = 14\n*/\n\n// 功能\n// 输入一个正整数, 判断该数是否为它最大的数, 根据算法结果, 输出该数的累加和\nconst largest = (n) => {\n    const sum = 0;\n    const count = 0;\n    while (n) {\n        sum += n;\n        count++;\n        n = num(n);\n    }\n    return sum + count;\n};\n\n// 使用示例\n/*\n  largest(0) = 0\n  largest(5) = 5\n  largest(7) = 14\n*/\n\n// 功能\n// 输入一个正整数, 判断该数是否为它最小的数, 根据算法结果, 输出该数的累加和\nconst middle = (n) => {\n    const sum = 0;\n    const count = 0;\n    while (n) {\n        sum += n;\n        count++;\n        n = num(n);\n    }\n    return sum + count;\n};\n\n// 使用示例\n/*\n  middle(0) = 0\n  middle(5) = 5\n  middle(7) = 14\n*/\n\n// 功能\n// 输入一个正整数, 判断该数是否为它最大的数, 根据算法结果, 输出该数的累加和\nconst sum = (n) => {\n    let sum = 0;\n    "}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len = s0.length;\n  let match = false;\n  let i = 0;\n  let j = 0;\n  while (i < len && j < len) {\n    if (s0.charAt(i) === s1.charAt(j)) {\n      i++;\n      j++;\n    } else {\n      i = i + 1;\n      j = j + 1;\n    }\n  }\n  if (i === len && j === len) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nmodule.exports = sameChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n    const a = 0;\n    const b = 1;\n    for (let i = 0; i < n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return a;\n}\n\n/*Return sum of all fibonacci numbers below a number n.\n  >>> sumFib(10)\n  55\n  >>> sumFib(100)\n  47900\n  >>> sumFib(1000)\n  4.711186449943706e+7\n  >>> sumFib(100000)\n  4.884420996893734e+8\n  >>> sumFib(1000000)\n  4.958464659098770e+9\n  >>> sumFib(10000000)\n  5.063718395515101e+10\n  >>> sumFib(100000000)\n  5.182320998781445e+11\n  >>> sumFib(1000000000)\n  5.307740308812254e+12\n  >>> sumFib(10000000000)\n  5.442099689373432e+13\n  */\nconst sumFib = (n) => {\n    const sum = 0;\n    const a = 1;\n    const b = 1;\n    for (let i = 0; i < n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n        sum += temp;\n    }\n    return sum;\n}\n\n/*Return sum of all fibonacci numbers below n.\n  >>> sumFib2(10)\n  55\n  >>> sumFib2(100)\n  47900\n  >>> sumFib2(1000)\n  4.711186449943706e+7\n  >>> sumFib2(100000)\n  4.884420996893734e+8\n  >>> sumFib2(1000000)\n  4.958464659098770e+9\n  >>> sumFib2(10000000)\n  5.063718395515101e+10\n  >>> sumFib2(100000000)\n  5.182320998781445e+11\n  >>> sumFib2(1000000000)\n  5.307740308812254e+12\n  >>> sumFib2(10000000000)\n  5.442099689373432e+13\n  >>> sumFib2(100000000000)\n  5.584646590987706e+14\n  >>> sumFib2(1000000000000)\n  5.707740308812254e+15\n  >>> sumFib2(10000000000000)\n  5.844209968937344e+16\n  >>> sumFib2(100000000000000)\n  5.984646590987706e+17\n  >>> sumFib2(1000000000000000)\n  6.107740308812254e+18\n  */\nconst sumFib2 = (n) => {\n    const sum = 0;\n    const a = 1;\n    const b = 1;\n    for (let i = 0; i < n; i++) {\n        const temp = a + b;\n        a = b;\n        b = temp;\n        sum += temp;\n    }\n    return sum;\n}\n\n/*\n  This function is a bit too big to be a single function. It's broken up into small pieces.\n  It's also a bit tricky.\n\n  TODO:\n    - Add a more efficient solution that uses the recursion and doesn't need to use a loop.\n    - Improve the solution so that it can handle the fact that the number we're asking for is larger than the largest fibonacci number.\n  */\nconst sumFib3 = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    const fibN = fib(n);\n    if (fibN >= n) {\n        return fibN;\n    }\n    return sumFib3(fibN) + sumFib3(n - fibN);\n}\n\n/*\n  TODO:\n    - Improve the solution so that it can handle the fact that the number we're asking for is larger than the largest fibonacci number.\n  */\nconst sumFib4 = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    const fibN = fib(n);\n    if (fibN >= n) {\n        return fibN;\n    }\n    const fibNMinus = fib(n - fibN);\n    if (fibNMinus >= fibN) {\n        return fibNMinus;\n    }\n    return sumFib4(fibN) + sumFib4(fibNMinus) + fibNMinus;\n}\n\nconst sumFib = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    const fibN = fib(n);\n    if (fibN >= n) {\n        return fibN;\n    }\n    return sumFib(fibN) + sumFib(n - fibN);\n}\n\nconst sumFib2 = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    const fibN = fib(n);\n    if (fibN >= n) {\n        return fibN;\n    }\n    const fibNMinus = fib(n - fibN);\n    if (fibNMinus >= fibN) {\n        return fibNMinus;\n    }\n    return sumFib2(fibN) + sumFib2(fibNMinus) + fibNMinus;\n}\n\nconst sumFib3 = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    const fibN = fib(n);\n    if (fibN >= n) {\n        return fibN;\n    }\n    return sumFib3(fibN) + sumFib3(n - fibN);\n}\n\nconst sumFib4 = (n) => {\n    if (n <= 1) {\n        return n;\n    }\n    const fibN = fib(n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let bracketsLength = brackets.length;\n    let bracketsChecked = brackets.split(\"\");\n    let bracketsCheckedLength = bracketsChecked.length;\n    let bracketsCheckedIndex = 0;\n    let bracketsCheckedFound = false;\n    while (bracketsCheckedIndex < bracketsCheckedLength) {\n        if (bracketsChecked[bracketsCheckedIndex] === \"<\") {\n            bracketsCheckedFound = false;\n            for (let i = bracketsCheckedIndex + 1; i < bracketsCheckedLength; i++) {\n                if (bracketsChecked[i] === \">\") {\n                    bracketsCheckedFound = true;\n                    break;\n                }\n            }\n            if (bracketsCheckedFound === false) {\n                return false;\n            }\n        }\n        bracketsCheckedIndex++;\n    }\n    return true;\n};\n\nlet result = correctBracketing(\"<>\");\nconsole.log(\"Result = \", result);<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    const a = l.slice(0);\n    const b = a.slice(1);\n    return a.every((x, i) => {\n        return x >= b[i];\n    }) && b.every((x, i) => {\n        return x >= a[i];\n    });\n};\n\n/*\n  Return true if list elements are in a given range.\n  >>> inRange([1, 2, 3, 4, 5], [2, 3, 4])\n  true\n  >>> inRange([1, 2, 3, 4, 5], [2, 4, 6, 8])\n  false\n  >>> inRange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> inRange([1, 2, 3, 4, 5], [1, 2, 3])\n  true\n  >>> inRange([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  false\n  */\nconst inRange = (l, r) => {\n    const a = l.slice(0);\n    const b = r.slice(0);\n    return a.every((x, i) => {\n        return x >= a[i] && x <= b[i];\n    });\n};\n\n/*\n  Returns true if two lists are equal.\n  >>> isEqual([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isEqual([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  false\n  >>> isEqual([1, 2, 3, 4, 5], [1, 2, 3])\n  false\n  */\nconst isEqual = (l, r) => {\n    if (l.length!== r.length) return false;\n    return l.every((x, i) => {\n        return x === r[i];\n    });\n};\n\n/*\n  Returns true if two lists are equal, ignoring the order.\n  >>> isEqualStrict([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> isEqualStrict([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  false\n  >>> isEqualStrict([1, 2, 3, 4, 5], [1, 2, 3])\n  false\n  */\nconst isEqualStrict = (l, r) => {\n    if (l.length!== r.length) return false;\n    return l.every((x, i) => {\n        return x === r[i];\n    });\n};\n\n/*\n  Returns true if list elements are sorted in increasing order.\n  >>> sorted([1, 2, 3, 4, 5])\n  false\n  >>> sorted([1, 2, 3, 4, 5, 6, 7])\n  true\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  true\n  */\nconst sorted = (l) => {\n    let lcopy = l.slice(0);\n    lcopy.sort();\n    return lcopy === l;\n};\n\n/*\n  Returns true if list elements are sorted in decreasing order.\n  >>> sorted([1, 2, 3, 4, 5])\n  true\n  >>> sorted([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  >>> sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  */\nconst sortedDecreasing = (l) => {\n    let lcopy = l.slice(0);\n    lcopy.reverse();\n    lcopy.sort();\n    return lcopy === l;\n};\n\n/*\n  Returns true if list elements are in a given set.\n  >>> inSet([1, 2, 3, 4, 5], [2, 3, 4])\n  true\n  >>> inSet([1, 2, 3, 4, 5], [2, 4, 6, 8])\n  false\n  >>> inSet([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> inSet([1, 2, 3, 4, 5], [1, 2, 3])\n  true\n  >>> inSet([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  false\n  */\nconst inSet = (l, r) => {\n    const a = l.slice(0);\n    const b = r.slice(0);\n    return a.every((x, i) => {\n        return x === b[i];\n    });\n};\n\n/*\n  Returns true if list elements are in a given set, ignoring the order.\n  >>> inSetStrict([1, 2, 3, 4, 5], [2, 3, 4])\n  true\n  >>> inSetStrict([1, 2, 3, 4, 5], [2, 4, 6, 8])\n  false\n  >>> inSetStrict([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  true\n  >>> inSetStrict([1, 2, 3, 4, 5], [1, 2, 3])\n  true\n  >>> inSetStrict([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  false\n  */\nconst inSetStrict = (l, r) => {\n    const a = l.slice(0);\n    const b = r.slice(0);\n    return a.every((x, i) => {\n        return x === b[i];\n    });\n};\n\nmodule.exports = {\n    monotonic,\n    inRange,\n    isEqual,\n    isEqualStrict,\n    sorted,\n    sortedDecreasing,\n    inSet,\n    "}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const d1 = new Set(l1);\n    const d2 = new Set(l2);\n    const res = [];\n    for (let i = 0; i < d1.size; i++) {\n        if (d2.has(d1.values[i])) {\n            res.push(d1.values[i]);\n        }\n    }\n    return res;\n};\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const d1 = new Map(l1);\n    const d2 = new Map(l2);\n    const res = [];\n    for (let i = 0; i < d1.size; i++) {\n        if (d2.has(d1.values[i])) {\n            res.push(d1.values[i]);\n        }\n    }\n    return res;\n};\n\nmodule.exports = {\n    common\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const isPrime = (n) => {\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  let i = 2;\n  while (i * i <= n) {\n    if (isPrime(i)) {\n      if (i * i > n) {\n        return i;\n      }\n    }\n    i++;\n  }\n  return n;\n};\n\n/*\n  Finds the largest composite number that is less than n.\n  >>> largestComposite(13195)\n  2047\n  >>> largestComposite(2048)\n  4\n  >>> largestComposite(13194)\n  2048\n  */\nconst largestComposite = (n) => {\n  let i = 1;\n  while (true) {\n    if (i * i > n) {\n      return i;\n    }\n    i++;\n  }\n};\n\n/*\n  Finds the smallest composite number that is greater than n.\n  >>> smallestComposite(13195)\n  13193\n  >>> smallestComposite(2048)\n  2049\n  >>> smallestComposite(13194)\n  13193\n  */\nconst smallestComposite = (n) => {\n  let i = 1;\n  while (true) {\n    if (i * i > n) {\n      return i;\n    }\n    i++;\n  }\n};\n\nmodule.exports = {\n  largestPrimeFactor,\n  largestComposite,\n  smallestComposite,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  while (sum < n) {\n    sum += 1\n  }\n  return sum\n}\n\n/*\n  sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN("}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  const closedBrackets = 0;\n  const openBrackets = brackets.length;\n  let i = 0;\n  while (i < openBrackets) {\n    stack.push(brackets[i]);\n    i++;\n  }\n  const bracketsLeft = brackets.length;\n  while (stack.length > 0) {\n    bracketsLeft--;\n    const current = stack.pop();\n    if (current === ')') {\n      closedBrackets++;\n    } else if (current === '(') {\n      closedBrackets--;\n    }\n    if (closedBrackets === 0) {\n      if (bracketsLeft === 0) {\n        return true;\n      } else {\n        stack.push(brackets[bracketsLeft]);\n      }\n    }\n  }\n  return false;\n};\n\nconst find_the_closest_closing_bracket = (brackets) => {\n  const stack = [];\n  const closedBrackets = 0;\n  const openBrackets = brackets.length;\n  let i = 0;\n  while (i < openBrackets) {\n    stack.push(brackets[i]);\n    i++;\n  }\n  const bracketsLeft = brackets.length;\n  while (stack.length > 0) {\n    bracketsLeft--;\n    const current = stack.pop();\n    if (current === ')') {\n      closedBrackets++;\n    } else if (current === '(') {\n      closedBrackets--;\n    }\n    if (closedBrackets === 0) {\n      return brackets[bracketsLeft];\n    }\n  }\n  return false;\n};\n\nconst brackets = \"()\";\nconst result = correctBracketing(brackets);\nconsole.log(find_the_closest_closing_bracket(brackets));\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  let derivative = []\n  for(let i = 0; i < len; i++){\n    derivative.push(0)\n  }\n  for(let i = len - 1; i > -1; i--){\n    derivative[i] = xs[i + 1]\n  }\n  return derivative\n}\n\n/**\n  * Return the integral of a polynomial\n  * @param xs: coefficients of a polynomials\n  * @return: integral of thispolynomials\n  */\nconst integral = (xs) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    integral += xs[i]\n  }\n  return integral\n}\n\n/**\n * Calculate polynomial's integral with given interval\n * @param xs: coefficients of a polynomials\n * @param min: min of interval\n * @param max: max of interval\n * @return: integral of thispolynomials in given interval\n */\nconst integrate = (xs, min, max) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    const num = xs[i]\n    const den = (max - min)\n    integral += num/den\n  }\n  return integral\n}\n\n/**\n * Calculate the polynomial's integral with given interval\n * @param xs: coefficients of a polynomials\n * @param min: min of interval\n * @param max: max of interval\n * @return: integral of thispolynomials in given interval\n */\nconst integral = (xs, min, max) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    const num = xs[i]\n    const den = (max - min)\n    integral += num/den\n  }\n  return integral\n}\n\n/**\n * Calculate the integral of a polynomial with given interval\n * @param xs: coefficients of a polynomials\n * @param min: min of interval\n * @param max: max of interval\n * @return: integral of thispolynomials in given interval\n */\nconst integral = (xs, min, max) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    const num = xs[i]\n    const den = (max - min)\n    integral += num/den\n  }\n  return integral\n}\n\n/**\n * Calculate the integral of a polynomial with given interval\n * @param xs: coefficients of a polynomials\n * @param min: min of interval\n * @param max: max of interval\n * @return: integral of thispolynomials in given interval\n */\nconst integral = (xs, min, max) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    const num = xs[i]\n    const den = (max - min)\n    integral += num/den\n  }\n  return integral\n}\n\n/**\n * Calculate the integral of a polynomial with given interval\n * @param xs: coefficients of a polynomials\n * @param min: min of interval\n * @param max: max of interval\n * @return: integral of thispolynomials in given interval\n */\nconst integral = (xs, min, max) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    const num = xs[i]\n    const den = (max - min)\n    integral += num/den\n  }\n  return integral\n}\n\n/**\n * Calculate the integral of a polynomial with given interval\n * @param xs: coefficients of a polynomials\n * @param min: min of interval\n * @param max: max of interval\n * @return: integral of thispolynomials in given interval\n */\nconst integral = (xs, min, max) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    const num = xs[i]\n    const den = (max - min)\n    integral += num/den\n  }\n  return integral\n}\n\n/**\n * Calculate the integral of a polynomial with given interval\n * @param xs: coefficients of a polynomials\n * @param min: min of interval\n * @param max: max of interval\n * @return: integral of thispolynomials in given interval\n */\nconst integral = (xs, min, max) => {\n  const len = xs.length\n  let integral = 0\n  for(let i = 0; i < len; i++){\n    const num = xs[i]\n    const den = (max - min)\n    integral += num/den\n  }\n  return integral\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n\n  if (n === 1) {\n    return 0;\n  }\n\n  if (n === 2) {\n    return 1;\n  }\n\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nexport default fibfib;<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const length = s.length\n  let count = 0\n  for (let i = 0; i < length; i++) {\n    if (vowels.includes(s[i])) {\n      count++\n    }\n  }\n  if (s[length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\nexport {\n  vowelsCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let str = \"\"\n  let s = shift\n  for (let i = x.length - 1; i >= 0; i--) {\n    str += x[i]\n    if (s === 0) {\n      str = str.reverse()\n      s = -1\n    } else {\n      s--\n    }\n  }\n  return str\n}\n\n/*\n * The reverse function returns the reversed string of the input string.\n *  >>> reverse(\"abc\")\n \"cba\"\n  */\nconst reverse = (str) => {\n  let arr = str.split(\"\")\n  return arr.reverse().join(\"\")\n}\n\n/*\n * The revocular shift function returns the reverse of the input string, with the first and last characters reversed.\n *  >>> revocularShift(\"abc\")\n \"cba\"\n  */\nconst revocularShift = (str) => {\n  let reversed = reverse(str)\n  return reversed.substring(1, reversed.length - 1)\n}\n\n/*\n * The main function returns the string reversed by the circular shift function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = revocularShift(str)\n  return reversed\n}\n\n/*\n * The isPalindrome function returns true if the input string is a palindrome.\n *  >>> isPalindrome(\"aA\")\n True\n  */\nconst isPalindrome = (str) => {\n  if (str.length === 0) {\n    return false\n  }\n  let strArr = str.split(\"\")\n  for (let i = 0; i < strArr.length / 2; i++) {\n    if (strArr[i]!== strArr[strArr.length - i - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n * The reversePalindrome function returns true if the input string is a palindrome and reverses the order of the characters.\n *  >>> reversePalindrome(\"aA\")\n True\n  */\nconst reversePalindrome = (str) => {\n  if (str.length === 0) {\n    return false\n  }\n  let strArr = str.split(\"\")\n  let reversed = \"\"\n  for (let i = strArr.length - 1; i >= 0; i--) {\n    reversed += strArr[i]\n  }\n  return str === reversed\n}\n\n/*\n * The isPalindrome function returns true if the input string is a palindrome and reverses the order of the characters.\n *  >>> isPalindrome(\"aA\")\n True\n  */\nconst isPalindrome = (str) => {\n  if (str.length === 0) {\n    return false\n  }\n  let strArr = str.split(\"\")\n  let reversed = \"\"\n  for (let i = strArr.length - 1; i >= 0; i--) {\n    reversed += strArr[i]\n  }\n  return str === reversed\n}\n\n/*\n * The main function returns the reversed string by the reverse function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = reverse(str)\n  return reversed\n}\n\n/*\n * The reversePalindrome function returns true if the input string is a palindrome and reverses the order of the characters.\n *  >>> reversePalindrome(\"aA\")\n True\n  */\nconst reversePalindrome = (str) => {\n  if (str.length === 0) {\n    return false\n  }\n  let strArr = str.split(\"\")\n  let reversed = \"\"\n  for (let i = strArr.length - 1; i >= 0; i--) {\n    reversed += strArr[i]\n  }\n  return str === reversed\n}\n\n/*\n * The main function returns the string reversed by the reversePalindrome function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = reversePalindrome(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the isPalindrome function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = isPalindrome(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the isPalindrome function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = reversePalindrome(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the main function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = main(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the main function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = main(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the main function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = main(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the main function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = main(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the main function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let reversed = main(str)\n  return reversed\n}\n\n/*\n * The main function returns the string reversed by the main function.\n *  >>> main(\"abc\")\n \"cba\"\n  */\nconst main = (str) => {\n  let"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  return s.reduce((a, c) => a + c.charCodeAt(0) - '0'.charCodeAt(0), 0);\n};\n\nconsole.log(digitSum(\"\"));\nconsole.log(digitSum(\"abAB\"));\nconsole.log(digitSum(\"abcCd\"));\nconsole.log(digitSum(\"helloE\"));\nconsole.log(digitSum(\"woArBld\"));\nconsole.log(digitSum(\"aAaaaXa\"));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    //Write your code here\n    let sum = 0\n    for (let i = 0; i < s.length; i++) {\n      sum = sum + parseInt(s[i])\n    }\n    let ans = sum * n\n    return ans\n  }\n\nfruitDistribution(\"5 apples and 6 oranges\",3)\n//\n//const fruitDistribution = ( s,  n) => {\n//  //Write your code here\n//  return fruitDistribution(s, n)\n//\n//}\n\nfruitDistribution(\"2 apples and 3 oranges\",100)\nfruitDistribution(\"1 apples and 2 oranges\",1 2 0)\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let min = arr[0],\n        min_index = 0;\n    arr.forEach((node, index) => {\n        if (node < min) {\n            min = node;\n            min_index = index;\n        }\n    });\n    if (min_index === arr.length) {\n        return [];\n    }\n    return [min, min_index];\n}\n\n// @lc code=end\n\n\n// TEST\n\n/*\n  Input: [4,2,3]\n  Output: [2, 1]\n*/\n\nconst test1 = pluck([4, 2, 3]);\n\n/*\n  Input: [1,2,3]\n  Output: [2, 1]\n*/\n\nconst test2 = pluck([1, 2, 3]);\n\n/*\n  Input: []\n  Output: []\n*/\n\nconst test3 = pluck([]);\n\n/*\n  Input: [5, 0, 3, 0, 4, 2]\n  Output: [0, 1]\n*/\n\nconst test4 = pluck([5, 0, 3, 0, 4, 2]);\n\nconst test = [\n    [4, 2, 3],\n    [1, 2, 3],\n    [1, 2, 3],\n    [5, 0, 3, 0, 4, 2],\n];\n\nfor (let i = 0; i < test.length; i++) {\n    console.log(`${test[i]} -> ${pluck(test[i])}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let count = 0;\n    for (let elem of lst) {\n        if (elem > 0) {\n            count++;\n        }\n    }\n    if (count < lst.length) {\n        let index = 0;\n        let counter = 1;\n        for (let i = 1; i < lst.length; i++) {\n            if (lst[i] > lst[index]) {\n                counter++;\n                index = i;\n            }\n        }\n        return lst[index] - counter;\n    }\n    return -1;\n};\n\nconsole.log(search([4, 1, 2, 2, 3, 1]));\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(search([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let sortedList = []\n\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] > lst[j]) {\n        sortedList.push(lst[j])\n        lst.splice(j, 1)\n      }\n    }\n  }\n\n  sortedList.push(lst[lst.length - 1])\n\n  return sortedList\n}\n\nmodule.exports = strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n}\n\nconst triangleArea = (a, b, c) => {\n  let s = (a + b + c) / 2\n  if (s * s <= a * b) {\n    return round(Math.sqrt(a * b) * Math.sqrt(s) / 2, 2)\n  }\n  return round(-1, 2)\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const ql = q.slice(0);\n  const wl = w.slice(0);\n  const maxw = Math.max(...wl);\n  return ql.every(x => x <= maxw) && ql.every(x => x <= wl.reduce((a, b) => a + b));\n}\n\n/*\n  Write a function that returns true if and only if  the  list l is palindrome.\n  A palindrome is a list where the first and last elements are equal.\n\n  Example:\n  isPalindrome([1, 2, 3, 2, 1]) ➞ true\n  # [1, 2, 3, 2, 1] is a palindrome.\n\n  isPalindrome([1, 2, 3, 4, 2]) ➞ false\n  # [1, 2, 3, 4, 2] is not a palindrome.\n  */\nconst isPalindrome = (l) => {\n  return l.slice(0).every((x, i) => i === l.indexOf(x))\n}\n\nconst main = () => {\n  const l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];\n  const w = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25];\n  const q = [1, 2, 3, 2, 1];\n  console.log(willItFly(q, w));\n  console.log(isPalindrome(l));\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const arrLength = arr.length\n  const min = arrLength\n  const [minP, minQ] = findMin([arrLength - 1, arrLength - 2])\n  const [maxP, maxQ] = findMax([arrLength - 1, arrLength - 2])\n  let diff = 0\n  let i = min\n  let j = min\n  let count = 0\n  while (i < arrLength - 1 && j < arrLength - 1) {\n    const minDiff = arr[i] - arr[j]\n    if (minDiff === maxP - minQ) {\n      diff += minDiff\n      i++\n      j++\n      count++\n    } else if (minDiff === minP - maxQ) {\n      diff += minDiff\n      j++\n      count++\n    } else if (minDiff === minP - minQ) {\n      diff += minDiff\n      i++\n      count++\n    } else if (minDiff === maxP - maxQ) {\n      diff += minDiff\n      j++\n      count++\n    } else {\n      diff += Math.min(minDiff, minP - minQ)\n      i++\n      j++\n      count++\n    }\n  }\n  return count\n}\n\nconst findMin = (arr) => {\n  let min = arr[0]\n  let minI = 0\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n      minI = i\n    }\n  }\n  return [min, minI]\n}\n\nconst findMax = (arr) => {\n  let max = arr[0]\n  let maxI = 0\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n      maxI = i\n    }\n  }\n  return [max, maxI]\n}\n\nconst test = () => {\n  console.log(smallestChange([1, 2, 3, 4, 3, 2, 2]))\n  console.log(smallestChange([1, 2, 3, 2, 1]))\n  console.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3, 2, 1]))\n  console.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3, 2, 1, 3, 2, 1, 4, 3, 2, 1, 4]))\n  console.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3, 2, 1, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4]))\n  console.log(smallestChange([1, 2, 3, 4, 3, 2, 2, 3, 2, 1, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4, 3, 2, 1, 4]))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0) {\n    return []\n  }\n  const lst1length = lst1.length\n  const lst2length = lst2.length\n  if(lst1length!== lst2length) {\n    return lst1\n  }\n  return [lst1[0]]\n}\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  the longest string in the first list followed by the longest string in the second list.\n\n  if the two lists have different numbers of elements, return the longest string\n  in the first list.\n\n  Examples\n  longestMatch([], []) ➞ []\n  longestMatch([], ['']) ➞ []\n  longestMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  longestMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  longestMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hi', 'hi', 'hi']\n  longestMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst longestMatch = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0) {\n    return []\n  }\n  const lst1length = lst1.length\n  const lst2length = lst2.length\n  if(lst1length!== lst2length) {\n    return lst1\n  }\n  return [lst1[lst1length - 1]]\n}\n\n/*\n  Write a function that accepts two li sts o f strings and returns the list that contains\n  the most elements of the first list followed by the most elements of the second list.\n\n  if the two lists have different numbers of elements, return the list with the most elements\n  from the first list.\n\n  Examples\n  mostMatch([], []) ➞ []\n  mostMatch([], ['']) ➞ []\n  mostMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hi', 'Hi']\n  mostMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'hi', 'admin']\n  mostMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hi', 'hi', 'hi']\n  mostMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst mostMatch = (lst1, lst2) => {\n  if(lst1.length === 0 || lst2.length === 0) {\n    return []\n  }\n  const lst1length = lst1.length\n  const lst2length = lst2.length\n  if(lst1length!== lst2length) {\n    return lst1\n  }\n  return [lst1[lst1length - 1]]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false;\n  }\n  let count = 0;\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) {\n      count++;\n    }\n  }\n  if (count === 2) {\n    return true;\n  }\n  return false;\n};\n\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport const isPrime = (n) => {\n  return n > 1 && isPrime(n) && isMultiplyPrime(n);\n};\n\nexport const isPrime2 = (n) => {\n  return n > 1 && isPrime(n);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const number = parseInt(x, 10);\n  return number % 1 === 0 && number === Math.pow(n, number);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let result = true;\n  if (a < 0) {\n    result = false;\n  } else if (a % 1!== 0) {\n    result = false;\n  }\n  for (let i = 1; i < a; i++) {\n    if (a % i === 0) {\n      result = false;\n    }\n  }\n  return result;\n}\nconsole.log(iscube(64));\nconsole.log(iscube(180));\nconsole.log(iscube(-1));\nconsole.log(iscube(0));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const s = num.toString(16).toUpperCase();\n  const c = s.length;\n  let res = 0;\n  for (let i = 0; i < c; i++) {\n    res += (parseInt(s[i]) * Math.pow(16, i));\n  }\n  return res;\n};\n\nconst prime = (num) => {\n  let arr = new Array();\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      arr.push(prime);\n    }\n    prime += 1;\n  }\n  return arr;\n};\n\nconst getPrime = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return false;\n};\n\nconst isPrime = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst hexToDec = (num) => {\n  return parseInt(num.toString(16));\n};\n\nconst hexToBin = (num) => {\n  return parseInt(num.toString(2));\n};\n\nconst binToDec = (num) => {\n  return parseInt(num.toString(2));\n};\n\nconst decToHex = (num) => {\n  return parseInt(num.toString(16));\n};\n\nconst isHexadecimal = (num) => {\n  let temp = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (!(/^[0-9A-F]$/).test(num[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrimeHex = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst countPrime = (num) => {\n  let prime = 1;\n  let i = 0;\n  while (prime < num) {\n    if (num % prime === 0) {\n      i += 1;\n    }\n    prime += 1;\n  }\n  return i;\n};\n\nconst prime2 = (num) => {\n  let prime = 1;\n  let i = 0;\n  while (prime < num) {\n    if (num % prime === 0) {\n      i += 1;\n    }\n    if (num % prime === 0) {\n      return prime;\n    }\n    prime += 1;\n  }\n  return false;\n};\n\nconst isPrimeBin = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst isPrimeDec = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst isPrimeDec2 = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst isPrimeDec3 = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst isPrimeDec4 = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst isPrimeDec5 = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst isPrimeDec6 = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n};\n\nconst isPrimeDec7 = (num) => {\n  let prime = 1;\n  while (prime < num) {\n    if (num % prime === 0) {\n      return false;\n    }\n    prime += 1;\n  }\n  return true;\n"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  // get the number\n  let binary = '';\n  let binaryString = '';\n  let decimalString = '';\n  let decimal = '';\n  let decimalLength = 0;\n  let decimalChar = '';\n  let i = 0;\n  let j = 0;\n\n  // convert the decimal to a string\n  decimalString = decimal.toString(2);\n\n  // get the length of the string\n  decimalLength = decimalString.length;\n\n  // split the string to get the bits\n  for (i = 0; i < decimalLength; i += 1) {\n    // get the charater\n    decimalChar = decimalString[i];\n    // set the bit\n    binary = binary + decimalChar;\n  }\n\n  // append the extra characters\n  for (i = 0; i < 2; i += 1) {\n    binary = binary + 'db';\n  }\n\n  // convert the binary to a string\n  binaryString = binary.toString(2);\n\n  // get the length of the string\n  return binaryString;\n};\n\n// test the function\n\n// test 1\nconsole.log('test 1');\nconsole.log(decimalToBinary(15));\n\n// test 2\nconsole.log('test 2');\nconsole.log(decimalToBinary(32));\n\n// test 3\nconsole.log('test 3');\nconsole.log(decimalToBinary(3));\n\n// test 4\nconsole.log('test 4');\nconsole.log(decimalToBinary(2));\n\n// test 5\nconsole.log('test 5');\nconsole.log(decimalToBinary(15));\n\n// test 6\nconsole.log('test 6');\nconsole.log(decimalToBinary(32));\n\n// test 7\nconsole.log('test 7');\nconsole.log(decimalToBinary(3));\n\n// test 8\nconsole.log('test 8');\nconsole.log(decimalToBinary(2));\n\n// test 9\nconsole.log('test 9');\nconsole.log(decimalToBinary(15));\n\n// test 10\nconsole.log('test 10');\nconsole.log(decimalToBinary(32));\n\n// test 11\nconsole.log('test 11');\nconsole.log(decimalToBinary(3));\n\n// test 12\nconsole.log('test 12');\nconsole.log(decimalToBinary(2));\n\n// test 13\nconsole.log('test 13');\nconsole.log(decimalToBinary(15));\n\n// test 14\nconsole.log('test 14');\nconsole.log(decimalToBinary(32));\n\n// test 15\nconsole.log('test 15');\nconsole.log(decimalToBinary(3));\n\n// test 16\nconsole.log('test 16');\nconsole.log(decimalToBinary(2));\n\n// test 17\nconsole.log('test 17');\nconsole.log(decimalToBinary(15));\n\n// test 18\nconsole.log('test 18');\nconsole.log(decimalToBinary(32));\n\n// test 19\nconsole.log('test 19');\nconsole.log(decimalToBinary(3));\n\n// test 20\nconsole.log('test 20');\nconsole.log(decimalToBinary(2));\n\n// test 21\nconsole.log('test 21');\nconsole.log(decimalToBinary(15));\n\n// test 22\nconsole.log('test 22');\nconsole.log(decimalToBinary(32));\n\n// test 23\nconsole.log('test 23');\nconsole.log(decimalToBinary(3));\n\n// test 24\nconsole.log('test 24');\nconsole.log(decimalToBinary(2));\n\n// test 25\nconsole.log('test 25');\nconsole.log(decimalToBinary(15));\n\n// test 26\nconsole.log('test 26');\nconsole.log(decimalToBinary(32));\n\n// test 27\nconsole.log('test 27');\nconsole.log(decimalToBinary(3));\n\n// test 28\nconsole.log('test 28');\nconsole.log(decimalToBinary(2));\n\n// test 29\nconsole.log('test 29');\nconsole.log(decimalToBinary(15));\n\n// test 30\nconsole.log('test 30');\nconsole.log(decimalToBinary(32));\n\n// test 31\nconsole.log('test 31');\nconsole.log(decimalToBinary(3));\n\n// test 32\nconsole.log('test 32');\nconsole.log(decimalToBinary(2));\n\n// test 33\nconsole.log('test 33');\nconsole.log(decimalToBinary(15));\n\n// test 34\nconsole.log('test 34');\nconsole.log(decimalToBinary(32));\n\n// test 35\nconsole.log('test 35');\nconsole.log(decimalToBinary(3));\n\n// test 36\nconsole.log('test 36');\nconsole.log(decimalToBinary(2));\n\n// test 37\nconsole.log('test 37');\nconsole.log(decimalToBinary(15));\n\n// test 38\nconsole.log('test 38');\nconsole.log(decimalToBinary(32));\n\n// test 39\nconsole.log('test 39');\nconsole.log(decimalToBinary(3));\n\n// test 40\nconsole.log('test 40');\nconsole.log(decimalToBinary(2));\n\n// test 41\nconsole.log('test 41');\nconsole.log(decimalToBinary(15));\n\n// test 42\nconsole.log('test 42');\nconsole.log(decimalToBinary(32));\n\n// test 43\nconsole.log('test 43');\nconsole.log(decimalTo"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.toLowerCase();\n  let d = str.length;\n  let l = 3;\n  let flag = false;\n  for (let i = 0; i < d; i++) {\n    let temp = str.charAt(i);\n    let count = 0;\n    for (let j = i + 1; j < d; j++) {\n      if (str.charAt(j) === temp) {\n        count++;\n      }\n    }\n    if (count < l) {\n      flag = false;\n      break;\n    } else if (count === l) {\n      flag = true;\n    }\n  }\n  return flag;\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let letters = []\n  for (let i = 0; i < grades.length; i++) {\n    let value = grades[i]\n    if (value >= 4.0) {\n      value = \"A+\"\n    } else if (value >= 3.7) {\n      value = \"A\"\n    } else if (value >= 3.3) {\n      value = \"A-\"\n    } else if (value >= 3.0) {\n      value = \"B+\"\n    } else if (value >= 2.7) {\n      value = \"B\"\n    } else if (value >= 2.3) {\n      value = \"B-\"\n    } else if (value >= 2.0) {\n      value = \"C+\"\n    } else if (value >= 1.7) {\n      value = \"C\"\n    } else if (value >= 1.3) {\n      value = \"C-\"\n    } else if (value >= 1.0) {\n      value = \"D+\"\n    } else if (value >= 0.7) {\n      value = \"D\"\n    } else if (value >= 0.0) {\n      value = \"D-\"\n    } else {\n      value = \"E\"\n    }\n    letters.push(value)\n  }\n  return letters\n}\n\nexport {numericalLetterGrade}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let i = 0,\n    n = string.length,\n    temp = 0;\n  for (; i < n; i++) {\n    temp = parseInt(string[i]);\n    if (temp > 1 && temp % 1 === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPrime = primeLength;\n\nmodule.exports = isPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t end sOneStarts= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigits= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigitsStart= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigitsEnd= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t number= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t allPositive= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t allNegative= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t numberNotAllPositive= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t numberNotAllNegative= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t numberNotPositive= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t numberNotNegative= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t positiveDigits= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t negativeDigits= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigitsOfNumber= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigitsOfNumberStart= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigitsOfNumberEnd= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigitsOfNumberInclude= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t nDigitsOfNumberNotInclude= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isPositive= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNegative= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotPositive= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotNegative= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isDigit= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotDigit= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isAlphabetic= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotAlphabetic= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isAlphanumeric= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotAlphanumeric= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isWhitespace= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotWhitespace= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isAllWhitespace= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotAllWhitespace= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isCapitalized= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotCapitalized= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isLowercase= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotLowercase= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isUppercase= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotUppercase= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isHexadecimal= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotHexadecimal= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isOctal= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotOctal= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isBinary= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotBinary= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isDecimal= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNotDecimal= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isAlpha= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isNumeric= (n) => {\n    // write your code in Python 3 style\n    return s\n}\ncon s t isInteger= (n) => {\n    // write your code in Python 3 style"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    return (N.toString(2).split(\"\").reduce((a, b) => a + b));\n}\n\nconst solution = solve(N);\nconsole.log(solution);\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i];\n  }\n  return res;\n};\n\n/* Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4\n  */\nconst subtract = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i];\n  }\n  return res;\n};\n\n/* Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst multiply = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i];\n  }\n  return res;\n};\n\n/* Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4\n  */\nconst divide = (lst) => {\n  let res = 0;\n  for (let i = 0; i < lst.length; i += 2) {\n    res += lst[i];\n  }\n  return res;\n};\n\nexport {\n  add,\n  subtract,\n  multiply,\n  divide\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    if (typeof s!=='string') return s;\n    let res = '';\n    for (let i = 0; i < s.length; i++) {\n        let c = s[i];\n        if (isNaN(c)) c ='';\n        res += c;\n        if (i < s.length - 1) {\n            res +='';\n            if (isNaN(s[i + 1])) res +='';\n            else res += s[i + 1];\n        }\n    }\n    return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n    const cols = getLength(lst);\n    const rows = getLength(lst[0]);\n    if(!x) x = 0;\n    const res = [];\n    for(let row = 0; row < rows; row++) {\n        const tmp = [];\n        for(let col = 0; col < cols; col++) {\n            const value = lst[row][col];\n            if(row === x) {\n                tmp.push([col, value]);\n            }\n        }\n        res.push(tmp);\n    }\n    return res;\n}\nconst getLength = (lst) => {\n    let length = 0;\n    for(let i = 0; i < lst.length; i++) {\n        length += lst[i].length;\n    }\n    return length;\n}\n\nconst test = require('tape');\ntest('getRow', t => {\n    const lst = [\n        [1, 2, 3, 4, 5, 6],\n        [1, 2, 3, 4, 1, 6],\n        [1, 2, 3, 4, 5, 1]\n    ];\n    t.deepEqual(getRow(lst, 0), [[0, 1], [1, 2], [1, 3], [2, 4], [2, 5], [2, 6]]);\n    t.deepEqual(getRow(lst, 2), [[2, 1], [3, 2], [4, 3], [5, 4], [5, 5], [6, 6]]);\n    t.deepEqual(getRow(lst, 3), [[3, 2], [4, 3], [5, 4], [5, 5], [6, 6]]);\n    t.end();\n});\ntest('getRow', t => {\n    const lst = [[], [1], [1, 2, 3]];\n    t.deepEqual(getRow(lst, 0), [[], [1], [1, 2, 3]]);\n    t.deepEqual(getRow(lst, 1), [[1], [1, 2, 3]]);\n    t.deepEqual(getRow(lst, 2), [[1, 2, 3]]);\n    t.end();\n});\ntest('getRow', t => {\n    const lst = [[], [], [], []];\n    t.deepEqual(getRow(lst, 0), [[], [], [], []]);\n    t.deepEqual(getRow(lst, 1), [[], [], [], []]);\n    t.deepEqual(getRow(lst, 2), [[], [], [], []]);\n    t.deepEqual(getRow(lst, 3), [[], [], [], []]);\n    t.end();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let len = array.length;\n  if (len === 1) {\n    return array;\n  }\n  let mid = Math.floor(len / 2);\n  let left = array.slice(0, mid);\n  let right = array.slice(mid);\n  if (left.length > right.length) {\n    return sortArray(left).concat(sortArray(right));\n  }\n  let leftLen = left.length;\n  let rightLen = right.length;\n  let result = [];\n  let leftSum = 0;\n  let rightSum = 0;\n  for (let i = 0; i < leftLen; i++) {\n    leftSum += left[i];\n    rightSum += right[i];\n  }\n  if (leftSum % 2 === 1) {\n    return sortArray(left).concat(sortArray(right));\n  }\n  for (let i = 0; i < rightLen; i++) {\n    result.push(right[i]);\n  }\n  for (let i = 0; i < leftLen; i++) {\n    result.push(left[i]);\n  }\n  return result;\n};\n\nmodule.exports = sortArray;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let encrypted = '';\n  let length = s.length;\n  for (let i = 0; i < length; i++) {\n    let c = s.charAt(i);\n    let l = alpha.indexOf(c);\n    let j = l + (i % 2);\n    let k = alpha.indexOf(c);\n    encrypted = encrypted + alpha[j];\n  }\n  return encrypted;\n}\n\n/*Create a function decrypt that takesa str ing as an argument and\n  returns a string decrypted with the alphabet.\n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let decrypted = '';\n  let length = s.length;\n  for (let i = 0; i < length; i++) {\n    let c = s.charAt(i);\n    let l = alpha.indexOf(c);\n    let j = l + (i % 2);\n    let k = alpha.indexOf(c);\n    decrypted = decrypted + alpha[j];\n  }\n  return decrypted;\n}\n\nmodule.exports = {\n  encrypt,\n  decrypt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n\tif (lst.length === 0) {\n\t\treturn null\n\t}\n\tlet n = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (n > lst[i]) {\n\t\t\tn = lst[i]\n\t\t}\n\t}\n\treturn n\n}\n\nconst nextSmallest = (lst) => {\n\tif (lst.length === 0) {\n\t\treturn null\n\t}\n\tlet n = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (n < lst[i]) {\n\t\t\tn = lst[i]\n\t\t}\n\t}\n\treturn n\n}\n\nconst nex tAlles = (lst) => {\n\tif (lst.length === 0) {\n\t\treturn null\n\t}\n\tlet n = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (n < lst[i]) {\n\t\t\tn = lst[i]\n\t\t}\n\t}\n\treturn n\n}\n\nconst nex tAllest = (lst) => {\n\tif (lst.length === 0) {\n\t\treturn null\n\t}\n\tlet n = lst[0]\n\tfor (let i = 1; i < lst.length; i++) {\n\t\tif (n > lst[i]) {\n\t\t\tn = lst[i]\n\t\t}\n\t}\n\treturn n\n}\n\nconsole.log(tSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4,  3, 2]))\nconsole.log(nex tAlles([1, 1]))\nconsole.log(nex tAllest([1, 1]))<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  let index = 0;\n  let strLen = S.length;\n  let start = 0;\n  let end = 0;\n\n  while (index < strLen) {\n    if (S[index] === '?' || S[index] === '!' || S[index] === '.') {\n      start = index;\n      end = index;\n      isBored++;\n    } else if (S[index] ==='') {\n      end = index;\n      isBored++;\n    }\n    index++;\n  }\n  return isBored;\n}\n\nconsole.log(isBored(\"Hello world\"));\nconsole.log(isBored(\"The sky is blue. The sun is shining. I love this weather\"));\nconsole.log(isBored(\"I love this weather\"));\nconsole.log(isBored(\"Hello world I love this weather\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n    if(typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number'){\n        return false;\n    }\n\n    if(x === z){\n        return true;\n    }\n\n    if(x === y + z){\n        return true;\n    }\n\n    if(x === y - z){\n        return true;\n    }\n\n    if(x === y*z){\n        return true;\n    }\n\n    if(x === y/z){\n        return true;\n    }\n\n    if(x === y%z){\n        return true;\n    }\n\n    if(x > y && x < z){\n        return true;\n    }\n\n    if(y > x && y < z){\n        return true;\n    }\n\n    if(x < y && x > z){\n        return true;\n    }\n\n    if(y < x && y > z){\n        return true;\n    }\n\n    return false;\n}\n\nmodule.exports = anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    return message.replace(/[a-z]/g, letter => {\n        let letterPos = message.indexOf(letter, 1)\n        let letter2Pos = message.indexOf(letter2, letterPos)\n        return message.substring(0, letterPos) + letter2 + message.substring(letter2Pos + 1)\n    })\n}\n\n//console.log(encode('This is a message'))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = lst[0];\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] > max) {\n            max = lst[i];\n            sum = sum + lst[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  for (const key of keys) {\n    if (key.toLowerCase()!== key) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a string, return true if all the chars in the string are either\n  lower case or upper case. Else, return false.\n  Examples:\n  checkStringCase(\"Hello\") should return true.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"Hello world\") should return false.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"HELLO\") should return true.\n  checkStringCase(\"HELLO\") should return true.\n*/\nconst checkStringCase = (str) => {\n  const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\n  const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const lowerCaseLettersLength = lowerCaseLetters.length\n  const upperCaseLettersLength = upperCaseLetters.length\n  let isAllLowerCase = true\n  let isAllUpperCase = true\n  for (let i = 0; i < str.length; i++) {\n    const letter = str[i]\n    if (letter.toLowerCase()!== letter) {\n      isAllLowerCase = false\n    }\n    if (letter.toUpperCase()!== letter) {\n      isAllUpperCase = false\n    }\n  }\n  return isAllLowerCase && isAllUpperCase\n}\n\n/*\n  Given a string, return true if all the chars in the string are either\n  upper case or lower case. Else, return false.\n  Examples:\n  checkStringCase(\"Hello\") should return true.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"Hello world\") should return false.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"HELLO\") should return true.\n  checkStringCase(\"HELLO\") should return true.\n*/\nconst checkAllCase = (str) => {\n  const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\n  const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const lowerCaseLettersLength = lowerCaseLetters.length\n  const upperCaseLettersLength = upperCaseLetters.length\n  let isAllUpperCase = true\n  let isAllLowerCase = true\n  for (let i = 0; i < str.length; i++) {\n    const letter = str[i]\n    if (letter.toLowerCase()!== letter) {\n      isAllUpperCase = false\n    }\n    if (letter.toUpperCase()!== letter) {\n      isAllLowerCase = false\n    }\n  }\n  return isAllUpperCase && isAllLowerCase\n}\n\n/*\n  Given a string, return true if all the chars in the string are either\n  upper case or lower case. Else, return false.\n  Examples:\n  checkStringCase(\"Hello\") should return true.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"Hello world\") should return false.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"HELLO\") should return true.\n  checkStringCase(\"HELLO\") should return true.\n*/\nconst checkStringCaseAll = (str) => {\n  const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\n  const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const lowerCaseLettersLength = lowerCaseLetters.length\n  const upperCaseLettersLength = upperCaseLetters.length\n  let isAllUpperCase = true\n  let isAllLowerCase = true\n  for (let i = 0; i < str.length; i++) {\n    const letter = str[i]\n    if (letter.toLowerCase()!== letter) {\n      isAllUpperCase = false\n    }\n    if (letter.toUpperCase()!== letter) {\n      isAllLowerCase = false\n    }\n  }\n  return isAllUpperCase && isAllLowerCase\n}\n\n/*\n  Given a string, return true if the string has at least one upper case \n  characters. Else, return false.\n  Examples:\n  checkStringCase(\"Hello\") should return true.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"Hello world\") should return true.\n  checkStringCase(\"hello\") should return false.\n  checkStringCase(\"HELLO\") should return true.\n  checkStringCase(\"HELLO\") should return true.\n*/\nconst checkStringCaseAnyCase = (str) => {\n  const lowerCaseLetters = 'abcdefghijklmnopqrstuvwxyz'\n  const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const lowerCaseLettersLength = lowerCaseLetters.length\n  const upperCaseLettersLength = upperCaseLetters.length\n  let isAnyUpperCase = false\n  for (let i = 0; i < str.length; i++) {\n    const letter = str[i]\n    if (letter.toLowerCase() === letter) {\n      isAnyUpperCase = true\n    }\n  }\n  return isAnyUpperCase\n}\n\n/*\n  Given a string, return true if all the chars in the string"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i++;\n  }\n  return arr;\n};\n\nconst countUpTo2 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i++;\n  }\n  return arr;\n};\n\nconst countUpTo3 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo4 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo5 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo6 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo7 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo8 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo9 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo10 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo11 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo12 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo13 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo14 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo15 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo16 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo17 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo18 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo19 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconst countUpTo20 = (n) => {\n  const arr = [];\n  let i = 1;\n  while(i <= n) {\n    arr.push(i);\n    i += 1;\n  }\n  return arr;\n};\n\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(2));\nconsole.log(countUpTo(3));\nconsole.log(countUpTo(4));\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(6));\nconsole.log(countUpTo(7));\nconsole.log(countUpTo(8));\nconsole.log(countUpTo(9));\nconsole.log(countUpTo(10));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(12));\nconsole.log(countUpTo(13));\nconsole.log(countUpTo(14));\nconsole.log(countUpTo(15));\nconsole.log(countUpTo(16));\nconsole.log(countUpTo(17));\nconsole.log(countUpTo(18));\nconsole.log(countUpTo(19"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a < 0 || b < 0) {\n    throw new Error('negative number cannot be multiplied');\n  }\n  const isNeg = a < 0 || b < 0;\n  if (isNeg) {\n    a = -a;\n    b = -b;\n  }\n\n  const res = a < b? 0 : a * b;\n\n  const numDigits = Math.max(a.toString().length, b.toString().length);\n  const numDigits = Math.min(numDigits, 10);\n  const numDigits = Math.max(numDigits, 1);\n\n  let carry = 0;\n  const digRes = new Array(numDigits);\n  for (let i = 0; i < numDigits; i++) {\n    digRes[i] = res % 10;\n    res = Math.floor(res / 10);\n    carry += res;\n  }\n  for (let i = numDigits - 1; i >= 0; i--) {\n    carry += (carry >= 10)? 0 : carry;\n    digRes[i] += carry;\n  }\n\n  let resStr = '';\n  if (isNeg) {\n    resStr = '-' + digRes.join('');\n  } else {\n    resStr = digRes.join('');\n  }\n\n  return resStr;\n};\n\nconsole.log(multiply(148, 412));\nconsole.log(multiply(19, 28));\nconsole.log(multiply(2020, 1851));\nconsole.log(multiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    return s.toUpperCase().replace(/[A-Z]/g, '1').replace(/[a-z]/g, '1').replace(/[0-9]/g, '1');\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 2\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n    return s.toLowerCase().replace(/[A-Z]/g, '1').replace(/[a-z]/g, '1').replace(/[0-9]/g, '1');\n}\n\nconst countVowels = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countPairs = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countUppercase = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary2 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 1\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n    return s.toUpperCase().replace(/[A-Z]/g, '1').replace(/[a-z]/g, '1').replace(/[0-9]/g, '1');\n}\n\nconst countVowels2 = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countPairs2 = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary3 = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countUppercase2 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary4 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary5 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countVowels3 = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countPairs3 = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary6 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countUppercase3 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary7 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countDictionary8 = (s) => {\n    return countUpper(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countVowels4 = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '').replace(/[0-9]/g, '');\n}\n\nconst countPairs4 = (s) => {\n    return countLower(s).replace(/[1]/g, '').replace(/[a-z]/g, '')."}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  let num = parseFloat(value)\n  let intPart = Math.floor(num)\n  let fracPart = num - intPart\n\n  if (intPart == num) {\n    return intPart\n  } else if (fracPart < 0.5) {\n    return intPart\n  } else {\n    return intPart + 1\n  }\n}\n\nexport default closestInteger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let levels = []\n\n  for (let i = 1; i <= n; i++) {\n    let numberOfStones = (i % 2 === 0)? i : i + 1\n    levels.push(numberOfStones)\n  }\n\n  return levels\n}\n\nconsole.log(makeAPile(3))\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    let ret = [];\n    let tokens = s.split(/[\\s,]/);\n    for (let token of tokens) {\n        ret.push(token.trim());\n    }\n    return ret;\n}\n\nconst getWordsString = (s) => {\n    let ret = [];\n    let tokens = s.split(/[\\s,]/);\n    for (let token of tokens) {\n        if (token.trim()!== '') {\n            ret.push(token.trim());\n        }\n    }\n    return ret;\n}\n\n// console.log(getWordsString(\"Hi, my name is John\"));\n// console.log(getWordsString(\"One, two, three, four, five, six\"));\n// console.log(wordsString(\"Hi, my name is John\"));\n// console.log(wordsString(\"One, two, three, four, five, six\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\n// const getNumber = (n) => {\n//     return parseInt(n, 10);\n// }\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {\n    return parseInt(n, 10);\n}\n\n// console.log(getNumber(\"6\"));\n\nconst getNumber = (n) => {\n    return parseFloat(n);\n}\n\n// console.log(getNumber(\"6.0\"));\n\nconst getNumber = (n) => {"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) return x;\n  let i = Math.max(x, y);\n  let j = Math.min(x, y);\n  while (i > j) {\n    let half = Math.floor((i + j) / 2);\n    if (half % 2 === 0) {\n      j = half;\n    } else {\n      i = half + 1;\n    }\n  }\n  return i;\n};\n\n/* This function returns true if the given number is an \n   odd number.\n\n  For example:\n  isOdd(12) = true\n  isOdd(13) = false\n  */\nconst isOdd = x => {\n  return x % 2!== 0;\n};\n\n/* This function returns true if the given number is an \n   even number.\n\n  For example:\n  isEven(12) = true\n  isEven(13) = false\n  */\nconst isEven = x => {\n  return x % 2 === 0;\n};\n\n/* This function returns the biggest even number in the given \n   range.\n\n  For example:\n  bigEven(5, 15) = 10\n  bigEven(8, 13) = 12\n  */\nconst bigEven = (x, y) => {\n  if (x === y) return x;\n  return chooseNum(x, y) + (isEven(chooseNum(x, y))? 1 : 0);\n};\n\n/* This function returns the smallest odd number in the given \n   range.\n\n  For example:\n  smallOdd(5, 15) = 5\n  smallOdd(8, 13) = 9\n  */\nconst smallOdd = (x, y) => {\n  if (x === y) return x;\n  return chooseNum(x, y) + (isOdd(chooseNum(x, y))? 1 : 0);\n};\n\nmodule.exports = {\n  chooseNum,\n  isOdd,\n  isEven,\n  bigEven,\n  smallOdd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const nl = (n << (32 - m)) | (m & 0xffffffff);\n  const ml = (n << (32 - m)) | ((m + 1) & 0xffffffff);\n  return Math.floor(\n    (Math.abs(nl) + Math.abs(ml)) / 2\n  )\n}\n\nconst avg = (n, m) => {\n  return (n + m) / 2\n}\n\nconst avg2 = (n, m) => {\n  return (n + m + 1) / 2\n}\n\nconst roundedAvg2 = (n, m) => {\n  return Math.floor(\n    (Math.abs(n + m) + 1) / 2\n  )\n}\n\nconsole.log(roundedAvg(1, 5))\n//=> 0b11\nconsole.log(roundedAvg(7, 5))\n//=> -1\nconsole.log(roundedAvg(10, 20))\n//=> 0b1111\nconsole.log(roundedAvg(20, 33))\n//=> 0b11010\nconsole.log(roundedAvg2(1, 5))\n//=> 0b11\nconsole.log(roundedAvg2(7, 5))\n//=> -1\nconsole.log(roundedAvg2(10, 20))\n//=> 0b1111\nconsole.log(roundedAvg2(20, 33))\n//=> 0b11010<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let unique = []\n  for (let i = 0; i < x; i++) {\n    for (let j = i + 1; j < x; j++) {\n      if (i % 2 === 0) {\n        if (x % i === 0) {\n          if (x % j === 0) {\n            unique.push(x)\n          }\n        }\n      }\n    }\n  }\n  return unique\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    return arr.reduce((acc, i) => {\n        if (acc.length === 0) {\n            acc.push(i)\n        }\n        if (i >= 1 && i <= 9) {\n            acc.push(i)\n        }\n        return acc\n    }, [])\n}\n\nconst byName = (arr) => {\n    const dict = {\n        'One' : 1,\n        'Two' : 2,\n        'Three': 3,\n        'Four' : 4,\n        'Five' : 5,\n        'Six' : 6,\n        'Seven': 7,\n        'Eight': 8,\n        'Nine': 9\n    }\n    return arr.reduce((acc, i) => {\n        if (acc.length === 0) {\n            acc.push(i)\n        }\n        acc.push(dict[i])\n        return acc\n    }, [])\n}\n\nconst byLengthThenName = (arr) => {\n    return arr.reduce((acc, i) => {\n        if (acc.length === 0) {\n            acc.push(i)\n        }\n        if (i >= 1 && i <= 9) {\n            acc.push(i)\n        }\n        return acc\n    }, [])\n}\n\nconst byNameThenLength = (arr) => {\n    const dict = {\n        'One' : 1,\n        'Two' : 2,\n        'Three': 3,\n        'Four' : 4,\n        'Five' : 5,\n        'Six' : 6,\n        'Seven': 7,\n        'Eight': 8,\n        'Nine': 9\n    }\n    return arr.reduce((acc, i) => {\n        if (acc.length === 0) {\n            acc.push(i)\n        }\n        acc.push(dict[i])\n        return acc\n    }, [])\n}\n\nconst sort = (arr) => {\n    const sortedArr = byLengthThenName(arr)\n    return sortedArr\n}\n\nconst reverse = (arr) => {\n    const sortedArr = byName(arr)\n    return sortedArr\n}\n\nconst reverseReverse = (arr) => {\n    const sortedArr = byLengthThenName(arr)\n    return sortedArr\n}\n\nconst reverseReverseReverse = (arr) => {\n    const sortedArr = byNameThenLength(arr)\n    return sortedArr\n}\n\nconst main = () => {\n    const arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    console.log(sort(arr))\n    console.log(reverse(arr))\n    console.log(reverseReverse(arr))\n    console.log(reverseReverseReverse(arr))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n    var list = [1];\n    for (var i = 1; i <= n; i++) {\n        var f2 = 1;\n        for (var j = 1; j <= i / 2; j++) {\n            f2 *= 2;\n        }\n        for (var j = 1; j <= i % 2; j++) {\n            f2 *= j;\n        }\n        list.push(f2);\n    }\n    return list;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n    let odd = 0;\n    let even = 0;\n    for (let i = 1; i <= n; i++) {\n        let str = i.toString();\n        let s = str.split('').reverse().join('');\n        if (str === s) {\n            if (str.length % 2 === 0) {\n                even++;\n            } else {\n                odd++;\n            }\n        }\n    }\n    return (even, odd);\n};\n\nmodule.exports = evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let res = 0\n  for(let i = 0; i < arr.length; i++) {\n    res += arr[i]\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  for (let i = arr.length - 2; i >= 0; i--) {\n    if (arr[i] < arr[i + 1]) {\n      arr[i + 1] = arr[i + 1] - arr[i];\n      arr[i] = arr[i + 1] + arr[i];\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall1 = (arr) => {\n  let r = 0;\n  let len = arr.length;\n  while (r < len) {\n    let l = r;\n    while (r < len && arr[r] >= arr[r + 1]) {\n      r++;\n    }\n    if (r - l > 1) {\n      let tmp = arr[l];\n      for (let i = l + 1; i < r; i++) {\n        arr[i - 1] = arr[i];\n      }\n      arr[r - 1] = tmp;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall2 = (arr) => {\n  let r = 0;\n  let len = arr.length;\n  while (r < len) {\n    let l = r;\n    while (r < len && arr[r] >= arr[r + 1]) {\n      r++;\n    }\n    if (r - l > 1) {\n      let tmp = arr[l];\n      for (let i = l + 1; i < r; i++) {\n        arr[i - 1] = arr[i];\n      }\n      arr[r - 1] = tmp;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall3 = (arr) => {\n  let r = 0;\n  let len = arr.length;\n  while (r < len) {\n    let l = r;\n    while (r < len && arr[r] >= arr[r + 1]) {\n      r++;\n    }\n    if (r - l > 1) {\n      let tmp = arr[l];\n      for (let i = l + 1; i < r; i++) {\n        arr[i - 1] = arr[i];\n      }\n      arr[r - 1] = tmp;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall4 = (arr) => {\n  let r = 0;\n  let len = arr.length;\n  while (r < len) {\n    let l = r;\n    while (r < len && arr[r] >= arr[r + 1]) {\n      r++;\n    }\n    if (r - l > 1) {\n      let tmp = arr[l];\n      for (let i = l + 1; i < r; i++) {\n        arr[i - 1] = arr[i];\n      }\n      arr[r - 1] = tmp;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall5 = (arr) => {\n  let r = 0;\n  let len = arr.length;\n  while (r < len) {\n    let l = r;\n    while (r < len && arr[r] >= arr[r + 1]) {\n      r++;\n    }\n    if (r - l > 1) {\n      let tmp = arr[l];\n      for (let i = l + 1; i < r; i++) {\n        arr[i - 1] = arr[i];\n      }\n      arr[r - 1] = tmp;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall6 = (arr) => {\n  let r = 0;\n  let len = arr.length;\n  while (r < len) {\n    let l = r;\n    while (r < len && arr[r] >= arr[r + 1]) {\n      r++;\n    }\n    if (r - l > 1) {\n      let tmp = arr[l];\n      for (let i = l + 1; i < r; i++) {\n        arr[i - 1] = arr[i];\n      }\n      arr[r - 1] = tmp;\n    }\n  }\n  return true;\n};\n\nconst moveOneBall7 = (arr) => {\n  let r = 0;\n  let len = arr.length;\n  while (r < len) {\n    let l = r;\n    while (r < len && arr[r] >= arr[r + 1]) {\n      r++;\n    }\n    if (r - l > 1) {\n      let tmp = arr[l];\n      for (let i = l + 1; i < r; i++) {\n        arr[i - 1] = arr[i];\n      }\n      arr[r - 1] = tmp;\n    }\n  }\n  return"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len = lst1.length;\n  if (len!== lst2.length) {\n    return 'NO';\n  }\n\n  let cnt = 0;\n  for (let i = 0; i < len; i++) {\n    if (lst1[i] === lst2[cnt]) {\n      cnt++;\n    } else {\n      if (cnt === 0) {\n        return 'NO';\n      }\n      cnt--;\n    }\n  }\n\n  if (cnt === 0) {\n    return 'YES';\n  } else {\n    return 'NO';\n  }\n};\n\nexpect(exchange([1, 2, 3, 4], [1, 2, 3, 4])).toBe('YES');\nexpect(exchange([1, 2, 3, 4], [1, 5, 3, 4])).toBe('NO');\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let max = {};\n  let count = {};\n  let last = \"\";\n  for (let i = 0; i < test.length; i++) {\n    let char = test[i];\n    if (char!== last) {\n      last = char;\n      count[char] = 1;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    } else {\n      count[char]++;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given a string representing a space seperated list of numbers, return the\n  most frequent number in the list.\n  If there are multiple most frequenct numbers, return all of them.\n  \n  Example:\n  frequency('1 2 3 2 4 5 1') == 2\n  frequency('1 2 3 2 4 5 1') == [2, 5]\n  frequency('1 2 3 2 4 5 1') == [2, 5, 1]\n  frequency('1 2 3 2 4 5 1') == [2, 5, 1]\n  frequency('1 2 3 2 4 5 1') == [2, 5, 1]\n  frequency('1 2 3 2 4 5 1') == [2, 5, 1]\n  */\nconst frequency = (test) => {\n  let max = {};\n  let count = {};\n  let last = \"\";\n  for (let i = 0; i < test.length; i++) {\n    let char = test[i];\n    if (char!== last) {\n      last = char;\n      count[char] = 1;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    } else {\n      count[char]++;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given a string representing a space seperated list of words, return the\n  most frequent word in the list.\n  If there are multiple most frequenct words, return all of them.\n  \n  Example:\n  frequency('one two three') == 'two'\n  frequency('one two three') == ['two', 'three']\n  frequency('one two three') == ['two', 'three']\n  */\nconst mostFrequent = (test) => {\n  let max = {};\n  let count = {};\n  let last = \"\";\n  for (let i = 0; i < test.length; i++) {\n    let char = test[i];\n    if (char!== last) {\n      last = char;\n      count[char] = 1;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    } else {\n      count[char]++;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given a string representing a space seperated list of numbers, return the\n  count of the most frequent number in the list.\n  \n  Example:\n  frequency('1 2 3 2 4 5 1') == 2\n  frequency('1 2 3 2 4 5 1') == [2, 5, 1]\n  */\nconst frequencyOfMostFrequent = (test) => {\n  let max = {};\n  let count = {};\n  let last = \"\";\n  for (let i = 0; i < test.length; i++) {\n    let char = test[i];\n    if (char!== last) {\n      last = char;\n      count[char] = 1;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    } else {\n      count[char]++;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    }\n  }\n  return max;\n};\n\n/*\n  Given a string representing a space seperated list of words, return the\n  count of the most frequent word in the list.\n  \n  Example:\n  frequency('one two three') == 'two'\n  frequency('one two three') == ['two', 'three']\n  */\nconst frequencyOfMostFrequentWord = (test) => {\n  let max = {};\n  let count = {};\n  let last = \"\";\n  for (let i = 0; i < test.length; i++) {\n    let char = test[i];\n    if (char!== last) {\n      last = char;\n      count[char] = 1;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    } else {\n      count[char]++;\n      if (count[char] > max[char]) {\n        max[char] = count[char];\n      }\n    }\n  }\n  return max;\n};\n\nexport { histogram, frequency, frequencyOfMostFrequent, frequencyOfMostFrequentWord };\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    let result = \"\";\n    for (let i = 0; i < s.length; i++) {\n        if (s.charAt(i)!= c.charAt(i)) {\n            result += s.charAt(i);\n        }\n    }\n    return [result, result === s];\n};\n\nmodule.exports = reverseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = (s) => {\n    let o = 0;\n    for (let i = 0; i < s.length; i++) {\n      if (s[i] % 2 === 1) {\n        o += 1;\n      }\n    }\n    return o;\n  };\n  const oList = [];\n  for (let i = 0; i < lst.length; i++) {\n    let o = odd(lst[i]);\n    oList.push(`the number of odd elements ${o}n the str4ng ${i} of the ${i}put.`);\n  }\n  return oList;\n};\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let result = -1,\n    currentSum = 0,\n    sum,\n    i = 0,\n    j = 0,\n    len = nums.length;\n\n  while (i < len) {\n    sum = currentSum;\n    while (j < len && nums[j] >= 0) {\n      sum += nums[j];\n      j++;\n    }\n    if (sum < result || result === -1) {\n      result = sum;\n    }\n    currentSum += sum;\n    i = j + 1;\n  }\n  return result;\n};\n\nconst minSubArraySum_1 = (nums) => {\n  let result = -1,\n    currentSum = 0,\n    sum,\n    i = 0,\n    j = 0,\n    len = nums.length;\n\n  while (i < len) {\n    sum = currentSum;\n    while (j < len && nums[j] >= 0) {\n      sum += nums[j];\n      j++;\n    }\n    if (sum < result || result === -1) {\n      result = sum;\n    }\n    currentSum += sum;\n    i = j + 1;\n  }\n  return result;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\nconsole.log(minSubArraySum([1, -2, -3, 4, 7, -1, 2, 1, 5, 3, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    let count = 0;\n    const n = grid.length;\n    const m = grid[0].length;\n    const buckets = new Array(n).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (grid[i][j] === 1) {\n                count += buckets[i];\n            }\n        }\n    }\n    count -= capacity;\n    return count;\n};\n\nconst main = () => {\n    const n = parseInt(console.readLine());\n    const grid = new Array(n).fill(0);\n    for (let i = 0; i < n; i++) {\n        grid[i] = [parseInt(console.readLine()), parseInt(console.readLine())];\n    }\n    const capacity = parseInt(console.readLine());\n    const ans = maxFill(grid, capacity);\n    console.log(ans);\n};\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    const arrSize = arr.length\n    const sortedArr = []\n    const sortedArr1 = []\n    const sortedArr2 = []\n\n    for (let i = 0; i < arrSize; i++) {\n        const temp = parseInt(arr[i])\n        if (temp === 0) {\n            sortedArr.push(0)\n        } else if (temp > 0) {\n            sortedArr1.push(temp)\n        } else {\n            sortedArr2.push(Math.abs(temp))\n        }\n    }\n\n    return sortedArr.concat(sortedArr1).concat(sortedArr2)\n}\n\nmodule.exports = sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n    const result = [];\n    if(!s ||!s.length || n < 1) {\n        return result;\n    }\n    let currentWord = '';\n    let currentWordIndex = 0;\n    let currentLetter = 0;\n    for(let i = 0; i < s.length; i++) {\n        if(s[i].match(/[a-z]/i)) {\n            currentLetter++;\n            if(currentLetter == n) {\n                result.push(currentWord);\n                currentWord = '';\n                currentWordIndex = 0;\n                currentLetter = 0;\n            } else {\n                currentWord += s[i];\n                currentWordIndex++;\n            }\n        }\n    }\n    if(currentWordIndex < n) {\n        result.push(currentWord);\n    }\n    return result;\n};\n\nconsole.log(selectWords('Mary had a little lamb', 3));<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n    let foundVowel = false\n    for (let i = word.length - 1; i >= 0; i--) {\n        let currentChar = word.charAt(i)\n        if (currentChar === 'a' || currentChar === 'e' || currentChar === 'i' || currentChar === 'o' || currentChar === 'u') {\n            foundVowel = true\n            break\n        }\n    }\n    if (!foundVowel) {\n        return ''\n    }\n    let closestVowel = ''\n    for (let i = word.length - 1; i >= 0; i--) {\n        let currentChar = word.charAt(i)\n        if (currentChar === 'a' || currentChar === 'e' || currentChar === 'i' || currentChar === 'o' || currentChar === 'u') {\n            if (i === 0) {\n                break\n            }\n            let prevChar = word.charAt(i - 1)\n            if (currentChar === prevChar) {\n                break\n            }\n            closestVowel = prevChar\n            break\n        }\n    }\n    return closestVowel\n}\n\nmodule.exports = getClosestVowel\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let i = 0, j = 0;\n  for (; i < lst.length; i++) {\n    if (lst[i] === ')') {\n      j++;\n    }\n    if (lst[i] === '(') {\n      j--;\n    }\n    if (j === 0) {\n      return 'Yes';\n    }\n  }\n  return 'No';\n};\n\nconst matchParens2 = (lst) => {\n  let stack = [], i = 0;\n  while (lst.length) {\n    if (lst[i] === ')') {\n      stack.pop();\n    }\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    }\n    i++;\n  }\n  if (stack.length === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nconst matchParens3 = (lst) => {\n  let i = 0, j = 0;\n  while (lst.length) {\n    if (lst[i] === ')') {\n      j++;\n    }\n    if (lst[i] === '(') {\n      j--;\n    }\n    i++;\n  }\n  if (j === 0) {\n    return 'Yes';\n  }\n  return 'No';\n};\n\nexport {\n  matchParens,\n  matchParens2,\n  matchParens3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  //console.log(k);\n  let [start, end] = [0, k-1]\n  let arrLength = arr.length\n  while (start < arrLength) {\n    if (arr[start] > arr[end]) {\n      let temp = arr[start]\n      arr[start] = arr[end]\n      arr[end] = temp\n    }\n    start++\n    end++\n  }\n  return arr.slice(0, k)\n}\n\nconst maximumTest = () => {\n  let arr = [-3, -4, 5, 4, -4, 4]\n  console.log(maximum(arr, 3))\n  console.log(maximum(arr, 2))\n  console.log(maximum(arr, 1))\n  console.log(maximum(arr, 3))\n  console.log(maximum(arr, 4))\n}\n\n//maximumTest()<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n    let sum = 0;\n    lst.forEach((element, index) => {\n        if (index % 2 === 0) {\n            sum += element;\n        }\n    });\n    return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = 0;\n  for (let i = 0; i < k; i++) {\n    result += arr[i];\n  }\n  return result;\n};\n\nexport const solution = addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = 1\n  let l = []\n  while (odd <= n) {\n    let next = odd\n    while (next % 2 == 0) {\n      next = next / 2\n    }\n    l.push(next)\n    odd = next + 1\n  }\n  return l\n}\n\n/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in the fibonacci sequence.\n\n The Fibonacci sequence is a sequence that is generated by the recurrence relation\n  f(n) = f(n-1) + f(n-2) where f(1) = 1 and f(2) = 1.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Fibonacci(1) is 1.     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddFibonacci(5) returns [1, 2, 3, 5] # The fibonacci sequence for 5 is [5, 8, 13, 21, 34, 55], so the odd numbers are only 1, 2, 3, 5.\n  */\nconst getOddFibonacci = (n) => {\n  let odd = 1\n  let fib = [1, 1]\n  while (odd <= n) {\n    let next = fib[0]\n    fib.unshift(fib[1])\n    fib[1] = fib[0] + fib[1]\n    next = next + fib[1]\n    while (next % 2 == 0) {\n      next = next / 2\n    }\n    l.push(next)\n    odd = next + 1\n  }\n  return l\n}\n\nconsole.log(getOddCollatz(2))\nconsole.log(getOddCollatz(4))\nconsole.log(getOddCollatz(5))\nconsole.log(getOddCollatz(10))\nconsole.log(getOddCollatz(13))\nconsole.log(getOddCollatz(22))\nconsole.log(getOddCollatz(30))\nconsole.log(getOddCollatz(1000))\nconsole.log(getOddCollatz(10000))\nconsole.log(getOddCollatz(100000))\nconsole.log(getOddCollatz(1000000))\nconsole.log(getOddCollatz(10000000))\nconsole.log(getOddCollatz(100000000))\nconsole.log(getOddCollatz(1000000000))\nconsole.log(getOddCollatz(10000000000))\nconsole.log(getOddCollatz(100000000000))\nconsole.log(getOddCollatz(1000000000000))\nconsole.log(getOddCollatz(10000000000000))\nconsole.log(getOddCollatz(100000000000000))\nconsole.log(getOddCollatz(1000000000000000))\nconsole.log(getOddCollatz(1000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(10000000000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(100000000000000000000000000000000000000000000000))\nconsole.log(getOddCollatz(1000000000000000000000000000000000000000000000000))\nconsole.log(getOddColl"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n  const parts = date.split('-');\n  const year = parts[2];\n  const month = parts[1];\n  const day = parts[0];\n\n  if (year === '2040' || year === '2099' || year === '2000' || year === '2018' || year === '2010') {\n    return false;\n  }\n  if (day < 1 || day > 31) {\n    return false;\n  }\n  if (month < 1 || month > 12) {\n    return false;\n  }\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst parseDate = (date) => {\n  if (!validDate(date)) {\n    return false;\n  }\n  const parts = date.split('-');\n  const year = parts[2];\n  const month = parts[1];\n  const day = parts[0];\n  return new Date(year, month - 1, day);\n};\n\nmodule.exports = {\n  parseDate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.trim().split(/\\s+/g);\n  let len = words.length;\n  let li = [];\n  let i = 0;\n  while (i < len) {\n    let word = words[i];\n    let c = 0;\n    let is_upper = true;\n    let is_lower = true;\n    let has_odd_case = false;\n    while (c < word.length) {\n      let ch = word.charAt(c);\n      if (ch.toLowerCase()!== ch.toUpperCase()) {\n        has_odd_case = true;\n      }\n      is_lower = is_lower && (ch === ch.toLowerCase());\n      is_upper = is_upper && (ch === ch.toUpperCase());\n      ++c;\n    }\n    li.push(word);\n    if (has_odd_case) {\n      li.push(word.toLowerCase());\n    }\n    ++i;\n  }\n  return li;\n};\n\nconst isWord = (word) => {\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let ch = word.charAt(i);\n    if (ch.toLowerCase()!== ch.toUpperCase()) {\n      return false;\n    }\n    ++i;\n  }\n  return true;\n};\n\nconst letterCount = (txt) => {\n  let len = txt.length;\n  let count = 0;\n  while (len--) {\n    let ch = txt.charAt(len);\n    if (ch.toLowerCase()!== ch.toUpperCase()) {\n      ++count;\n    }\n  }\n  return count;\n};\n\nconst isWordInList = (word, list) => {\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let ch = word.charAt(i);\n    if (list.indexOf(ch.toLowerCase()) === -1) {\n      return false;\n    }\n    ++i;\n  }\n  return true;\n};\n\nconst isWordInDictionary = (word, dict) => {\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let ch = word.charAt(i);\n    if (dict.indexOf(ch.toLowerCase()) === -1) {\n      return false;\n    }\n    ++i;\n  }\n  return true;\n};\n\nconst checkWord = (word, dict) => {\n  let len = word.length;\n  let i = 0;\n  while (i < len) {\n    let ch = word.charAt(i);\n    if (dict.indexOf(ch.toLowerCase()) === -1) {\n      return false;\n    }\n    ++i;\n  }\n  return true;\n};\n\nexport {\n  isWord,\n  isWordInList,\n  isWordInDictionary,\n  letterCount,\n  splitWords\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = Array.from(lst)\n  const len = sorted.length\n  const next = sorted.slice(1)\n  const last = sorted[len - 1]\n  let flag = true\n  for (let i = 0; i < len; i++) {\n    if (sorted[i] < last) {\n      flag = false\n      break\n    }\n  }\n  return flag\n}\n\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start <= interval2.start && interval1.end >= interval2.end) {\n    return \"YES\"\n  }\n  return \"NO\"\n}\n\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-1, 1), (0, 4)))\n// console.log(intersection((1, 2), (2, 3)))\n// console.log(intersection((-1, 1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n\n// console.log(intersection((-3, -1), (0, 4)))\n// console.log(intersection((-3, -1), (1, 2)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console.log(intersection((-3, -1), (-5, 5)))\n// console"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if (!arr) return 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i];\n    if (sign === 1 || sign === -1) {\n      prod *= sign;\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n  if (!arr) return 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i];\n    if (sign === 1 || sign === -1) {\n      prod *= sign;\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns3 = (arr) => {\n  if (!arr) return 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i];\n    if (sign === 1 || sign === -1) {\n      prod *= sign;\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns4 = (arr) => {\n  if (!arr) return 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i];\n    if (sign === 1 || sign === -1) {\n      prod *= sign;\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns5 = (arr) => {\n  if (!arr) return 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i];\n    if (sign === 1 || sign === -1) {\n      prod *= sign;\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns6 = (arr) => {\n  if (!arr) return 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i];\n    if (sign === 1 || sign === -1) {\n      prod *= sign;\n    }\n  }\n  return prod;\n};\n\n/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns7 = (arr) => {\n  if (!arr) return 0;\n  let prod = 1;\n  for (let i = 0; i < arr.length; i++) {\n    let sign = arr[i];\n    if (sign === 1 || sign === -1) {\n      prod *= sign;\n    }\n  }\n  return prod;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  let result = [],\n      len = grid.length,\n      r, c,\n      minPath = [];\n\n  for (r = 0; r < len; r++) {\n    for (c = 0; c < len; c++) {\n      if (r == 0) {\n        minPath.push(grid[r][c]);\n      } else {\n        if (r > 0) {\n          if (grid[r][c] < grid[r - 1][c] &&\n            grid[r][c] < grid[r - 1][c + 1]) {\n            minPath.push(grid[r][c]);\n          }\n        }\n        if (c > 0) {\n          if (grid[r][c] < grid[r][c - 1] &&\n            grid[r][c] < grid[r + 1][c - 1]) {\n            minPath.push(grid[r][c]);\n          }\n        }\n      }\n    }\n  }\n  return minPath.slice(0, k).sort();\n};\n\nconst test = (grid, k) => {\n  console.log(minPath(grid, k));\n};\n\nconst test1 = (grid, k) => {\n  console.log(minPath(grid, k));\n};\n\ntest1([[1,2,3],[4,5,6],[7,8,9]], 3);\ntest1([[1,2,3],[4,5,6],[7,8,9]], 1);\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = fibonacci(n + 1);\n  const tri_seq = [];\n  for (let i = 0; i < n + 1; i++) {\n    tri_seq.push(fib[i]);\n  }\n  return tri_seq;\n};\n\nconst fib = (n) => {\n  let a = 1;\n  let b = 1;\n  let c = 0;\n  let fib_seq = [];\n  for (let i = 0; i <= n; i++) {\n    fib_seq.push(c);\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return fib_seq;\n};\n\nconst test = () => {\n  const n = 3;\n  const tri_seq = tri(n);\n  for (let i = 0; i < n + 1; i++) {\n    console.log(tri_seq[i]);\n  }\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    const result = [];\n    for (let i = 1; i <= n; i++) {\n        const odd = n % 2;\n        result.push(odd? i : 0);\n        n = Math.floor(n / 2);\n    }\n    return result;\n};\n\nexport default digits;<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n    return str.match(/[][]/g)!== null\n}\n\nconst isNested = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested2 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested3 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested4 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested5 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested6 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested7 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested8 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested9 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested10 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested11 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested12 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested13 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null && arr.length > 0) {\n        let nxt = arr.shift()\n        if(!sted(nxt)){\n            return false\n        }\n        else{\n            return isNested(nxt)\n        }\n    }\n    return false\n}\n\nconst isNested14 = (str ing) => {\n    const arr = str.match(/[][]/g)\n    if(arr!== null"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    let sum = 0;\n    lst.forEach(x => {\n        sum += x*x;\n    });\n    return sum;\n};\n\nconsole.log(sumSquares([1,2,3]));\nconsole.log(sumSquares([1,4,9]));\nconsole.log(sumSquares([1,3,5,7]));\nconsole.log(sumSquares([1.4,4.2,0]));\nconsole.log(sumSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  txt = txt.trim()\n  let char = txt.charAt(txt.length - 1)\n  let charIsALetter = isAlpha(char)\n  let lastCharIsNotALetter = isNotALetter(char)\n  return charIsALetter && lastCharIsNotALetter\n}\n\n/*\n  Create a function that returns trueif the first character of a given string is an alphabetic character and is not  a par t  of a w ord, and false otherwise.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ true\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  txt = txt.trim()\n  let char = txt.charAt(0)\n  let charIsALetter = isAlpha(char)\n  let firstCharIsNotALetter = isNotALetter(char)\n  return charIsALetter && firstCharIsNotALetter\n}\n\n/*\n  Create a function that returns true if the given string contains at least two consecutive alphabetic characters,\n  and false otherwise.\n  Examples:\n  containsTwoALetter(\"apple\") ➞ false\n  containsTwoALetter(\"apple pie\") ➞ true\n  containsTwoALetter(\"apple pi\") ➞ false\n  containsTwoALetter(\"apple pi pie\") ➞ false\n  */\nconst containsTwoALetter = (txt) => {\n  let containsALetter = containsAletter(txt)\n  let containsALetterLength = containsALetter.length\n  let secondALetter = txt.substring(containsALetterLength)\n  let containsALetterAfterSecond = containsAletter(secondALetter)\n  return containsALetterAfterSecond\n}\n\n/*\n  Create a function that returns true if the given string contains at least one alphabetic character,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple\") ➞ true\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi\") ➞ false\n  containsALetter(\"apple pi pie\") ➞ false\n  */\nconst containsALetter = (txt) => {\n  let containsALetter = containsAletter(txt)\n  return containsALetter\n}\n\n/*\n  Create a function that returns true if the given string contains at least one alphabetic character,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple\") ➞ true\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi\") ➞ false\n  containsALetter(\"apple pi pie\") ➞ false\n  */\nconst containsAletter = (txt) => {\n  let aletter = /[a-zA-Z]/\n  return aletter.test(txt)\n}\n\n/*\n  Create a function that returns true if the given string contains any alphabetic character,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple\") ➞ true\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi\") ➞ true\n  containsALetter(\"apple pi pie\") ➞ true\n  */\nconst containsAnyALetter = (txt) => {\n  let aletter = /[a-zA-Z]/\n  return aletter.test(txt)\n}\n\n/*\n  Create a function that returns true if the given string contains only one alphabetic character,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple\") ➞ false\n  containsALetter(\"apple pie\") ➞ false\n  containsALetter(\"apple pi\") ➞ false\n  containsALetter(\"apple pi pie\") ➞ false\n  */\nconst containsOnlyALetter = (txt) => {\n  let aletter = /[a-zA-Z]/\n  return aletter.test(txt) && aletter.test(txt)\n}\n\n/*\n  Create a function that returns true if the given string contains no alphabetic character,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple\") ➞ false\n  containsALetter(\"apple pie\") ➞ false\n  containsALetter(\"apple pi\") ➞ false\n  containsALetter(\"apple pi pie\") ➞ false\n  */\nconst containsNoALetter = (txt) => {\n  let aletter = /[a-zA-Z]/\n  return!aletter.test(txt)\n}\n\n/*\n  Create a function that returns true if the given string contains at least one letter,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple\") ➞ true\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi\") ➞ true\n  containsALetter(\"apple pi pie\") ➞ true\n  */\nconst containsALetterOrALetter = (txt) => {\n  let containsALetter = containsALetter(txt)\n  let containsALetterLength = containsALetter.length\n  let secondALetter = txt.substring(containsALetterLength)\n  let containsALetterAfterSecond = containsALetter(secondALetter)\n  return containsALetterAfterSecond\n}\n\n/*\n  Create a function that returns true if the given string contains a letter at the beginning,\n  and false otherwise.\n  Examples:\n  containsALetter(\"apple\") ➞ false\n  containsALetter(\"apple pie\") ➞ true\n  containsALetter(\"apple pi\") ➞ false\n  containsALetter(\"apple pi pie\") ➞"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const length = arr.length\n  let i = 0\n  let j = length - 1\n  while (i < j) {\n    const t = arr[i]\n    let c = 1\n    while (arr[j] >= t && j > i) {\n      j--\n      c++\n    }\n    if (c === 0) {\n      return -1\n    } else if (c === length) {\n      return i\n    }\n    i++\n  }\n  return i\n}\n\n// console.log(canArrange([1,2,3,4,5,6,7,8,9,10]))\n// console.log(canArrange([1,2,3,4,5,6,7,8,9]))\n// console.log(canArrange([1,2,3,4,5,6,7,8]))\n// console.log(canArrange([1,2,3,4,5,6,7]))\n// console.log(canArrange([1,2,3,4,5,6]))\n// console.log(canArrange([1,2,3,4,5]))\n// console.log(canArrange([1,2,3,4]))\n// console.log(canArrange([1,2,3]))\n// console.log(canArrange([1,2]))\n// console.log(canArrange([1]))\n// console.log(canArrange([2]))\n// console.log(canArrange([3]))\n// console.log(canArrange([4]))\n// console.log(canArrange([5]))\n// console.log(canArrange([6]))\n// console.log(canArrange([7]))\n// console.log(canArrange([8]))\n// console.log(canArrange([9]))\n// console.log(canArrange([10]))\n// console.log(canArrange([11]))\n// console.log(canArrange([12]))\n// console.log(canArrange([13]))\n// console.log(canArrange([14]))\n// console.log(canArrange([15]))\n// console.log(canArrange([16]))\n// console.log(canArrange([17]))\n// console.log(canArrange([18]))\n// console.log(canArrange([19]))\n// console.log(canArrange([20]))\n// console.log(canArrange([21]))\n// console.log(canArrange([22]))\n// console.log(canArrange([23]))\n// console.log(canArrange([24]))\n// console.log(canArrange([25]))\n// console.log(canArrange([26]))\n// console.log(canArrange([27]))\n// console.log(canArrange([28]))\n// console.log(canArrange([29]))\n// console.log(canArrange([30]))\n// console.log(canArrange([31]))\n// console.log(canArrange([32]))\n// console.log(canArrange([33]))\n// console.log(canArrange([34]))\n// console.log(canArrange([35]))\n// console.log(canArrange([36]))\n// console.log(canArrange([37]))\n// console.log(canArrange([38]))\n// console.log(canArrange([39]))\n// console.log(canArrange([40]))\n// console.log(canArrange([41]))\n// console.log(canArrange([42]))\n// console.log(canArrange([43]))\n// console.log(canArrange([44]))\n// console.log(canArrange([45]))\n// console.log(canArrange([46]))\n// console.log(canArrange([47]))\n// console.log(canArrange([48]))\n// console.log(canArrange([49]))\n// console.log(canArrange([50]))\n// console.log(canArrange([51]))\n// console.log(canArrange([52]))\n// console.log(canArrange([53]))\n// console.log(canArrange([54]))\n// console.log(canArrange([55]))\n// console.log(canArrange([56]))\n// console.log(canArrange([57]))\n// console.log(canArrange([58]))\n// console.log(canArrange([59]))\n// console.log(canArrange([60]))\n// console.log(canArrange([61]))\n// console.log(canArrange([62]))\n// console.log(canArrange([63]))\n// console.log(canArrange([64]))\n// console.log(canArrange([65]))\n// console.log(canArrange([66]))\n// console.log(canArrange([67]))\n// console.log(canArrange([68]))\n// console.log(canArrange([69]))\n// console.log(canArrange([70]))\n// console.log(canArrange([71]))\n// console.log(canArrange([72]))\n// console.log(canArrange([73]))\n// console.log(canArrange([74]))\n// console.log(canArrange([75]))\n// console.log(canArrange([76]))\n// console.log(canArrange([77]))\n// console.log(canArrange([78]))\n// console.log(canArrange([79]))\n// console.log(canArrange([80]))\n// console.log(canArrange([81]))\n// console.log(canArrange([82]))\n// console.log(canArrange([83]))\n// console.log(canArrange(["}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  if (!lst) {\n    return (null, null)\n  }\n\n  const largest = lst.reduce((a, b) => {\n    if (b > a) {\n      return b\n    }\n    return a\n  }, 0)\n  const smallest = lst.reduce((a, b) => {\n    if (b < a) {\n      return b\n    }\n    return a\n  }, largest)\n\n  if (largest === 0) {\n    return (null, null)\n  }\n  return (largest, smallest)\n}\n\n// Find the largest and smallest elements in an array of integers\nconst findLargestAndSmallest = (arr) => {\n  if (!arr) {\n    return (null, null)\n  }\n\n  const largest = arr.reduce((a, b) => {\n    if (b > a) {\n      return b\n    }\n    return a\n  }, 0)\n\n  const smallest = arr.reduce((a, b) => {\n    if (b < a) {\n      return b\n    }\n    return a\n  }, largest)\n\n  return (largest, smallest)\n}\n\nconst isIn = (lst, elt) => {\n  return lst.indexOf(elt) > -1\n}\n\nconst main = (arr) => {\n  let largestSmallest = largestSmallestIntegers(arr)\n  if (largestSmallest[0]) {\n    console.log('largestSmallestIntegers:'+ largestSmallest)\n  }\n  else {\n    console.log('largestSmallestIntegers: no integers')\n  }\n\n  let findLargestAndSmallest = findLargestAndSmallest(arr)\n  if (findLargestAndSmallest[0]) {\n    console.log('findLargestAndSmallest:'+ findLargestAndSmallest)\n  }\n  else {\n    console.log('findLargestAndSmallest: no integers')\n  }\n\n  let largest = largestSmallest[0]\n  let smallest = largestSmallest[1]\n  if (largest) {\n    arr.forEach((elt) => {\n      if (!isIn(arr, elt)) {\n        if (elt > largest) {\n          largest = elt\n        }\n        if (elt < smallest) {\n          smallest = elt\n        }\n      }\n    })\n    console.log('largest:'+ largest)\n    console.log('smallest:'+ smallest)\n  }\n  else {\n    console.log('largest: no integers')\n    console.log('smallest: no integers')\n  }\n}\n\nmain([2, 4, 1, 3, 5, 7])\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  const aNumber = typeof a === \"number\";\n  const bNumber = typeof b === \"number\";\n  if (aNumber && bNumber) {\n    if (a > b) {\n      return b;\n    } else if (a < b) {\n      return a;\n    } else {\n      return null;\n    }\n  } else if (aNumber) {\n    return a;\n  } else if (bNumber) {\n    return b;\n  } else {\n    if (a < b) {\n      return b;\n    } else if (a > b) {\n      return a;\n    } else {\n      return null;\n    }\n  }\n};\n\nconst compareOne = (a,  b) => {\n  const aNumber = typeof a === \"number\";\n  const bNumber = typeof b === \"number\";\n  if (aNumber && bNumber) {\n    if (a > b) {\n      return b;\n    } else if (a < b) {\n      return a;\n    } else {\n      return null;\n    }\n  } else if (aNumber) {\n    return a;\n  } else if (bNumber) {\n    return b;\n  } else {\n    if (a < b) {\n      return b;\n    } else if (a > b) {\n      return a;\n    } else {\n      return null;\n    }\n  }\n};\n\ncompareOne(1, 2.5);\ncompareOne(\"5,1\", \"6\");\ncompareOne(\"1\", 1);\ncompareOne(\"1\", \"2,3\");\n\n/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the smaller va lue s in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is represented as a string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 1\n  compareOne(\"5,1\", \"6\") ➞ 1\n  compareOne(\"1\", \"2,3\")➞ \"1\"\n  compareOne(\"1\", 1)➞ 1\n  compareOne(\"1\", \"2,3\")➞ \"1\"\n  */\nconstcompareTwo = (a,  b) => {\n  const aNumber = typeof a === \"number\";\n  const bNumber = typeof b === \"number\";\n  if (aNumber && bNumber) {\n    if (a < b) {\n      return a;\n    } else if (a > b) {\n      return b;\n    } else {\n      return null;\n    }\n  } else if (aNumber) {\n    return a;\n  } else if (bNumber) {\n    return b;\n  } else {\n    if (a < b) {\n      return a;\n    } else if (a > b) {\n      return b;\n    } else {\n      return null;\n    }\n  }\n};\n\nconst compareTwo = (a,  b) => {\n  const aNumber = typeof a === \"number\";\n  const bNumber = typeof b === \"number\";\n  if (aNumber && bNumber) {\n    if (a < b) {\n      return a;\n    } else if (a > b) {\n      return b;\n    } else {\n      return null;\n    }\n  } else if (aNumber) {\n    return a;\n  } else if (bNumber) {\n    return b;\n  } else {\n    if (a < b) {\n      return a;\n    } else if (a > b) {\n      return b;\n    } else {\n      return null;\n    }\n  }\n};\n\ncompareTwo(1, 2.5);\ncompareTwo(\"5,1\", \"6\");\ncompareTwo(\"1\", \"2,3\");\ncompareTwo(\"1\", 1);\ncompareTwo(\"1\", \"2,3\");\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n    var count = 0;\n    var sum = 0;\n    var x = n;\n    while (x > 0) {\n        if (x % 2 == 0) {\n            sum += x;\n            count += 1;\n        }\n        x -= 1;\n    }\n    return count === 4 && sum === n;\n};\n\nmodule.exports = isEqualToSumEven;<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const razillian_factorial = (n) => {\n    const sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += i;\n    }\n    return sum;\n  };\n  if (n < 0) {\n    return 0;\n  }\n  if (n == 0) {\n    return 1;\n  }\n  return razillian_factorial(n);\n};\n\n/*The function specialFactorial will accept a number as input and should return\n the special factorial of that number.\n\n For example :\n  >>> specialFactorial(4)\n  288\n\n  This is a function that takes a number as input and returns the special\n  factorial of that number.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n  if (n == 0) {\n    return 1;\n  }\n  const sum = n * specialFactorial(n - 1);\n  return sum;\n};\n\n//\n//\n//\n\n/*The function factorial will accept a number as input and should return\n the factorial of that number.\n\n For example :\n  >>> factorial(4)\n  24\n  >>> factorial(1)\n  1\n\n  This is a function that takes a number as input and returns the factorial\n  of that number.\n  */\nconst factorial = (n) => {\n  const sum = 1;\n  for (let i = 2; i <= n; i++) {\n    sum *= i;\n  }\n  return sum;\n};\n\n/*The function fibonacci will accept two numbers as input and should return\n the fibonacci of those numbers.\n\n For example :\n  >>> fibonacci(1,1)\n  1\n  >>> fibonacci(2,1)\n  1\n  >>> fibonacci(3,1)\n  2\n  >>> fibonacci(4,1)\n  3\n  >>> fibonacci(5,1)\n  4\n  >>> fibonacci(6,1)\n  5\n  >>> fibonacci(7,1)\n  6\n  >>> fibonacci(8,1)\n  7\n  >>> fibonacci(9,1)\n  8\n  >>> fibonacci(10,1)\n  9\n\n  This is a function that takes two numbers as input and returns the\n  fibonacci of those numbers.\n  */\nconst fibonacci = (a, b) => {\n  let a_b;\n  if (a <= b) {\n    a_b = a;\n  } else {\n    a_b = b;\n  }\n  let sum = 0;\n  for (let i = 0; i < a_b; i++) {\n    sum += 1;\n  }\n  return sum;\n};\n\n//\n//\n//\n\n/*The function fibonacci will accept two numbers as input and should return\n the fibonacci of those numbers.\n\n For example :\n  >>> fibonacci(1,1)\n  1\n  >>> fibonacci(2,1)\n  1\n  >>> fibonacci(3,1)\n  2\n  >>> fibonacci(4,1)\n  3\n  >>> fibonacci(5,1)\n  4\n  >>> fibonacci(6,1)\n  5\n  >>> fibonacci(7,1)\n  6\n  >>> fibonacci(8,1)\n  7\n  >>> fibonacci(9,1)\n  8\n  >>> fibonacci(10,1)\n  9\n\n  This is a function that takes two numbers as input and returns the\n  fibonacci of those numbers.\n  */\nconst fibonacci = (a, b) => {\n  let a_b;\n  if (a <= b) {\n    a_b = a;\n  } else {\n    a_b = b;\n  }\n  let sum = 0;\n  let temp;\n  for (let i = 0; i < a_b; i++) {\n    temp = a_b - i;\n    sum += temp;\n    sum += a_b - i - 1;\n  }\n  return sum;\n};\n\n//\n//\n//\n\n/*The function fibonacci will accept two numbers as input and should return\n the fibonacci of those numbers.\n\n For example :\n  >>> fibonacci(1,1)\n  1\n  >>> fibonacci(2,1)\n  1\n  >>> fibonacci(3,1)\n  2\n  >>> fibonacci(4,1)\n  3\n  >>> fibonacci(5,1)\n  4\n  >>> fibonacci(6,1)\n  5\n  >>> fibonacci(7,1)\n  6\n  >>> fibonacci(8,1)\n  7\n  >>> fibonacci(9,1)\n  8\n  >>> fibonacci(10,1)\n  9\n\n  This is a function that takes two numbers as input and returns the\n  fibonacci of those numbers.\n  */\nconst fibonacci = (a, b) => {\n  let a_b;\n  if (a <= b) {\n    a_b = a;\n  } else {\n    a_b = b;\n  }\n  let sum = 0;\n  let temp;\n  for (let i = 0; i < a_b; i++) {\n    temp = a_b - i;\n    sum += temp;\n    sum += a_b - i - 1;\n  }\n  return sum;\n};\n\n//\n//\n//\n\n/*The function fibonacci will accept two numbers as input and should return\n the fibonacci of those numbers.\n\n For example :\n  >>> fibonacci(1,1)\n  1\n  >>> fibonacci(2,1)\n  1\n  >>> fibonacci(3,1)\n  2\n  >>> fibonacci(4,1)\n  3\n  >>> fibonacci(5,1)\n  4\n  >>> fibonacci(6,1)\n"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  return text.replace(/[\\s\\t\\n\\r]+/g, \" \").replace(/([A-Za-z0-9_\\-]+[\\s\\t\\n\\r]+){2}/g, \"__\")\n}\n\nconst parseText = (text) => {\n  return text.replace(/[\\s\\t\\n\\r]+/g, \" \").replace(/([A-Za-z0-9_\\-]+[\\s\\t\\n\\r]+){2}/g, \"__\")\n}\n\nconst generateSpaces = (numOfSpaces) => {\n  const spaces = []\n  while(numOfSpaces--) {\n    spaces.push(\" \")\n  }\n  return spaces.join(\"\")\n}\n\nconst generateText = (text, numOfSpaces) => {\n  return generateSpaces(numOfSpaces) + text\n}\n\nconst removeAllSpaces = (text) => {\n  return text.replace(/[\\s\\t\\n\\r]+/g, \" \")\n}\n\nconst findNextSpace = (text) => {\n  return text.indexOf(\" \", 2)\n}\n\nconst findStartOfWord = (text, index) => {\n  return text.indexOf(\" \", index)\n}\n\nconst generateNextSpaces = (text, index, numOfSpaces) => {\n  return generateSpaces(numOfSpaces) + text.substring(index + 1)\n}\n\nconst getStartOfWord = (text, index) => {\n  return index + 1\n}\n\nconst generateEndOfWord = (text, index) => {\n  return text.substring(index)\n}\n\nconst getEndOfWord = (text, index) => {\n  return index + 1\n}\n\nconst getNextSpaces = (text, index) => {\n  return text.substring(index + 1)\n}\n\nconst getStartOfWord = (text, index) => {\n  return index + 1\n}\n\nconst getNextSpace = (text, index) => {\n  return index + 1\n}\n\nconst isLetter = (char) => {\n  return char.match(/[a-zA-Z]/)\n}\n\nconst isDigit = (char) => {\n  return char.match(/[0-9]/)\n}\n\nconst isSpace = (char) => {\n  return char == \" \"\n}\n\nconst isUpperCase = (char) => {\n  return char.toUpperCase() == char\n}\n\nconst isLowerCase = (char) => {\n  return char.toLowerCase() == char\n}\n\nconst isNumeric = (char) => {\n  return char.match(/[0-9]/)\n}\n\nconst isSpecialChar = (char) => {\n  return char.match(/[!@#$%^&*()_+\\-=`{}[\\]\\\\|;:'\\\",<.>/?]/)\n}\n\nconst isWord = (text) => {\n  return text.match(/[A-Za-z0-9_\\-]+/)\n}\n\nconst isAllUpperCase = (text) => {\n  return text.toUpperCase() == text\n}\n\nconst isAllLowerCase = (text) => {\n  return text.toLowerCase() == text\n}\n\nconst isMixedCase = (text) => {\n  return text.toLowerCase() == text.toUpperCase()\n}\n\nconst isLetterOrDigit = (text) => {\n  return text.match(/[A-Za-z0-9_\\-]+/)\n}\n\nconst isSpaceOrDigit = (text) => {\n  return text.match(/[0-9]+/)\n}\n\nconst isUpperOrDigit = (text) => {\n  return text.match(/[A-Z0-9]+/)\n}\n\nconst isLowerOrDigit = (text) => {\n  return text.match(/[a-z0-9]+/)\n}\n\nconst isUpper = (text) => {\n  return text.match(/[A-Z]/)\n}\n\nconst isLower = (text) => {\n  return text.match(/[a-z]/)\n}\n\nconst isMixed = (text) => {\n  return text.match(/[A-Z0-9]+/)\n}\n\nconst isWordOrDigit = (text) => {\n  return text.match(/[A-Za-z0-9_\\-]+/)\n}\n\nconst isSpecialCharOrDigit = (text) => {\n  return text.match(/[!@#$%^&*()_+\\-=`{}[\\]\\\\|;:'\\\",<.>/?]/)\n}\n\nconst isAllUpperCaseOrDigit = (text) => {\n  return text.toUpperCase().match(/[0-9]+/)\n}\n\nconst isAllLowerCaseOrDigit = (text) => {\n  return text.toLowerCase().match(/[0-9]+/)\n}\n\nconst isAllUpperCaseOrSpecial = (text) => {\n  return text.toUpperCase().match(/[!@#$%^&*()_+\\-=`{}[\\]\\\\|;:'\\\",<.>/?]/)\n}\n\nconst isAllLowerCaseOrSpecial = (text) => {\n  return text.toLowerCase().match(/[!@#$%^&*()_+\\-=`{}[\\]\\\\|;:'\\\",<.>/?]/)\n}\n\nconst isAllUpperCaseOrMixed = (text) => {\n  return text.toUpperCase().match(/[A-Z0-9]+/)\n}\n\nconst isAllLowerCaseOrMixed = (text) => {\n  return text.toLowerCase().match(/"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const is_name = /[0-9a-zA-Z]/g.test(file_name);\n  if (is_name) {\n    const has_dot = /^[^\\.]/.test(file_name);\n    const has_only_num = /^[^\\.]*\\.[0-9a-zA-Z]+$/.test(file_name);\n    const has_only_letters = /^[^\\.]*\\.[0-9a-zA-Z]*$/.test(file_name);\n    const has_only_letters_and_num = /^[^\\.]*\\.[0-9a-zA-Z]+\\.[0-9a-zA-Z]*$/.test(file_name);\n\n    if (has_dot && has_only_letters && has_only_letters_and_num) {\n      return 'Yes';\n    } else {\n      return 'No';\n    }\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  create a function which takes a strin g rep resenting afile's name, and returns\n  the number of the file's name.\n  Examples:\n  file_name_number(\"example.txt\") => '1'\n  file_name_number(\"1example.txt\") => '2'\n  file_name_number(\"3example.txt\") => '3'\n  file_name_number(\"4example.txt\") => '4'\n  file_name_number(\"5example.txt\") => '5'\n  file_name_number(\"6example.txt\") => '6'\n  file_name_number(\"7example.txt\") => '7'\n  file_name_number(\"8example.txt\") => '8'\n  file_name_number(\"9example.txt\") => '9'\n  file_name_number(\"10example.txt\") => '10'\n  file_name_number(\"11example.txt\") => '11'\n  file_name_number(\"12example.txt\") => '12'\n  file_name_number(\"13example.txt\") => '13'\n  file_name_number(\"14example.txt\") => '14'\n  file_name_number(\"15example.txt\") => '15'\n  file_name_number(\"16example.txt\") => '16'\n  file_name_number(\"17example.txt\") => '17'\n  file_name_number(\"18example.txt\") => '18'\n  file_name_number(\"19example.txt\") => '19'\n  file_name_number(\"20example.txt\") => '20'\n  file_name_number(\"21example.txt\") => '21'\n  file_name_number(\"22example.txt\") => '22'\n  file_name_number(\"23example.txt\") => '23'\n  file_name_number(\"24example.txt\") => '24'\n  file_name_number(\"25example.txt\") => '25'\n  file_name_number(\"26example.txt\") => '26'\n  file_name_number(\"27example.txt\") => '27'\n  file_name_number(\"28example.txt\") => '28'\n  file_name_number(\"29example.txt\") => '29'\n  file_name_number(\"30example.txt\") => '30'\n  file_name_number(\"31example.txt\") => '31'\n  file_name_number(\"32example.txt\") => '32'\n  file_name_number(\"33example.txt\") => '33'\n  file_name_number(\"34example.txt\") => '34'\n  file_name_number(\"35example.txt\") => '35'\n  file_name_number(\"36example.txt\") => '36'\n  file_name_number(\"37example.txt\") => '37'\n  file_name_number(\"38example.txt\") => '38'\n  file_name_number(\"39example.txt\") => '39'\n  file_name_number(\"40example.txt\") => '40'\n  file_name_number(\"41example.txt\") => '41'\n  file_name_number(\"42example.txt\") => '42'\n  file_name_number(\"43example.txt\") => '43'\n  file_name_number(\"44example.txt\") => '44'\n  file_name_number(\"45example.txt\") => '45'\n  file_name_number(\"46example.txt\") => '46'\n  file_name_number(\"47example.txt\") => '47'\n  file_name_number(\"48example.txt\") => '48'\n  file_name_number(\"49example.txt\") => '49'\n  file_name_number(\"50example.txt\") => '50'\n  file_name_number(\"51example.txt\") => '51'\n  file_name_number(\"52example.txt\") => '52'\n  file_name_number(\"53example.txt\") => '53'\n  file_name_number(\"54example.txt\") => '54'\n  file_name_number(\"55example.txt\") => '55'\n  file_name_number(\"56example.txt\") => '56'\n  file_name_number(\"57example.txt\") => '57'\n  file_name_number(\"58example.txt\") =>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  lst.forEach((val) => {\n    if (val % 3 === 0) {\n      sum += val * val;\n    }\n    if (val % 4 === 0) {\n      sum += val * val * val;\n    }\n  })\n  return sum;\n}\n\nmodule.exports = sumSquares;<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    let sentenceWords = sentence.split(' ');\n    let sentenceLength = sentenceWords.length;\n    let newSentence = '';\n\n    for (let i = 0; i < sentenceLength; i++) {\n        let word = sentenceWords[i];\n\n        for (let j = 0; j < word.length; j++) {\n            let char = word.charAt(j);\n\n            if (isPrimeNumber(char)) {\n                newSentence += char;\n            }\n        }\n    }\n\n    return newSentence;\n}\n\nfunction isPrimeNumber(num) {\n    let p = 2;\n\n    while (p * p <= num) {\n        if (num % p === 0) {\n            return false;\n        }\n        p += 1;\n    }\n\n    return true;\n}\n\nconsole.log(wordsInSentence(\"This is a test\")); // 'is'\nconsole.log(wordsInSentence(\"lets go for swimming\")); // 'go for'\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n\tvar n1 = n.split('/');\n\tvar n2 = x.split('/');\n\tif (n1.length!== 2 || n2.length!== 2) {\n\t\treturn false;\n\t}\n\tif (n1[0].match(/\\d+/) && n1[1].match(/\\d+/) && n2[0].match(/\\d+/) && n2[1].match(/\\d+/)) {\n\t\treturn (parseInt(n1[0]) * parseInt(n2[1]) === parseInt(n1[1]) * parseInt(n2[0]));\n\t}\n\treturn false;\n}<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  return nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n}\n\nconst orderByPoints2 = (nums) => {\n  let result = []\n  nums.forEach(num => {\n    let sum = 0\n    while (num!== 0) {\n      sum += num % 10\n      num = num / 10\n    }\n    result.push(sum)\n  })\n  result.sort((a, b) => a - b)\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const result = sorted.filter((item, index) => {\n    if (index === 0) {\n      return true;\n    }\n    const secondDigit = sorted[index - 1];\n    if (item === secondDigit + 1) {\n      return true;\n    }\n    return false;\n  });\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const a = new Array(n);\n    for (let i = 0; i < n; i++) {\n        a[i] = i * i - i + 1;\n    }\n    const sum = a.reduce((acc, curr, i) => acc + curr, 0);\n    const maxTriples = sum / 3;\n    return maxTriples;\n};\n\nmodule.exports = getMaxTriples;<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const p1 = planets[planet1]\n  const p2 = planets[planet2]\n\n  const x = p1.x - p2.x\n  const y = p1.y - p2.y\n  const z = p1.z - p2.z\n  const r = Math.sqrt(x * x + y * y + z * z)\n\n  const c = new Vector3(x, y, z)\n  const u = new Vector3(c.x / r, c.y / r, c.z / r)\n  const p = new Vector3(c.x, c.y, c.z)\n\n  const p1 = p.subtract(u.multiply(p1.radius))\n  const p2 = p.subtract(u.multiply(p2.radius))\n\n  let r1 = p1.distanceTo(p2)\n  let r2 = p1.distanceTo(p)\n\n  if (r1 > r2) {\n    return (\"Sun\", planet2, planet1)\n  }\n\n  return (\"Sun\", planet1, planet2)\n}\n\nconst planets = {\n  Mercury: { x: 0.387098, y: 0.205610, z: 0.000001 },\n  Venus: { x: 0.723330, y: 0.008350, z: 0.000008 },\n  Earth: { x: 1.000001, y: 0.010000, z: 0.000002 },\n  Mars: { x: 1.523609, y: 0.485631, z: 0.000003 },\n  Jupiter: { x: 5.20888, y: 0.048309, z: 0.000004 },\n  Saturn: { x: 11.8626, y: 0.048353, z: 0.000004 },\n  Uranus: { x: 33.4447, y: 0.036291, z: 0.000004 },\n  Neptune: { x: 49.4713, y: 0.036472, z: 0.000004 }\n}\n\nmodule.exports = bf\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n    let sorted = lst.slice(0).sort((a, b) => {\n        if (a.length === b.length) {\n            return a.localeCompare(b);\n        }\n        return a.length - b.length;\n    });\n    let sum = 0;\n    for (let i = 0; i < sorted.length; i++) {\n        sum += sorted[i];\n    }\n    return sum;\n}\n\nmodule.exports = {\n    sortedListSum: sortedListSum\n}<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return xOrY(n, x, y)\n}\n\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y\n  } else {\n    return x\n  }\n}\n\nexport {xOrY}<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n  const  difference = lst.filter(x => x > 0 && x < 100000).reduce((a, b) => a + b * b);\n  return Math.pow(difference, 2);\n};\n\nconsole.log(doubleTheDifference([9, -2]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  if (game.length!== guess.length) throw new Error('wrong lengths')\n  let gameScores = game.map((g, i) => i + 1)\n  let guessScores = guess.map((g, i) => i + 1)\n  let error = (g, i) => {\n    if (g === 0) return i\n    return g - i\n  }\n  let total = gameScores.reduce((a, b) => a + b)\n  let correct = gameScores.reduce((a, b, i) => a + (guessScores[i] === b? 1 : error(guessScores[i], i)))\n  return [correct, total - correct]\n}\n\nconst compareAndUpdate = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(true)\n  return update(false)\n}\n\nconst compareAndUpdateWithIndex = (game, guess, update, index) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(index)\n  return update(index + 1)\n}\n\nconst compareAndUpdateWithIndexAndScore = (game, guess, update, index) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(index, total)\n  return update(index + 1, total)\n}\n\nconst update = (index, total) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return index\n  return index + 1\n}\n\nconst compareAndUpdateAndReturnIndex = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total)\n  return update(correct)\n}\n\nconst compareAndUpdateAndReturnIndexAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct)\n  return update(correct, total)\n}\n\nconst updateAndReturnIndex = (index, total) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return index\n  return index + 1\n}\n\nconst updateAndReturnIndexAndScore = (index, total) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return index\n  return index + 1, total - correct\n}\n\nconst compareAndUpdateAndReturnIndexAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if (correct === total) return update(total, correct, total, total)\n  return update(correct, total)\n}\n\nconst compareAndUpdateAndReturnIndexAndScoreAndScore = (game, guess, update) => {\n  let [correct, total] = compare(game, guess)\n  if ("}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = {};\n  const extension_name = {};\n  extensions.forEach((ext) => {\n    strength[ext] = (class_name.toLowerCase().replace(/\\s/g, '').split('').map((c) => c.charCodeAt(0))).reduce((acc, c) => {\n      return acc + (c > acc? 1 : 0);\n    }, 0) - (class_name.toLowerCase().replace(/\\s/g, '').split('').map((c) => c.charCodeAt(0)).indexOf(c) + 1);\n    extension_name[ext] = ext.toUpperCase();\n  });\n  const extension_index = extensions.findIndex((ext) => strength[ext] > strength[extension_name[ext]]);\n  return `${class_name}.${extensions[extension_index]}`;\n};\n\nexport default strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n    if(a.length!== b.length) {\n        return false;\n    }\n    let aStr = a.split(\"\");\n    let bStr = b.split(\"\");\n    let length = a.length;\n    let flag = 0;\n    for (let i = 0; i < length; i++) {\n        if (aStr[i] === bStr[i]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag === 1) {\n        return true;\n    }\n    let temp = [];\n    for (let i = 0; i < length; i++) {\n        for (let j = length - 1; j > i; j--) {\n            if (aStr[j] === bStr[i]) {\n                temp.push(aStr[j]);\n                break;\n            }\n        }\n    }\n    return temp.indexOf(aStr[0])!== -1;\n}\nconst rotate = (s, k) => {\n    let a = s.split(\"\");\n    let res = \"\";\n    for (let i = 0; i < a.length; i++) {\n        let j = (a.length - k) + i;\n        res += a[j];\n    }\n    return res;\n}\nconst cycpa = (s, t) => {\n    let a = s.split(\"\");\n    let b = t.split(\"\");\n    let length = a.length;\n    let flag = 0;\n    for (let i = 0; i < length; i++) {\n        if (a[i] === b[i]) {\n            flag = 1;\n            break;\n        }\n    }\n    if (flag === 1) {\n        return true;\n    }\n    let temp = [];\n    for (let i = 0; i < length; i++) {\n        for (let j = length - 1; j > i; j--) {\n            if (a[j] === b[i]) {\n                temp.push(a[j]);\n                break;\n            }\n        }\n    }\n    return temp.indexOf(a[0])!== -1;\n}\nconst nCheck = (s, t) => {\n    let a = s.split(\"\");\n    let b = t.split(\"\");\n    let lenA = a.length;\n    let lenB = b.length;\n    let flag = 0;\n    for (let i = 0; i < lenA; i++) {\n        for (let j = 0; j < lenB; j++) {\n            if (a[i] === b[j]) {\n                flag = 1;\n                break;\n            }\n        }\n    }\n    if (flag === 1) {\n        return true;\n    }\n    return false;\n}\nmodule.exports = {\n    cycpa,\n    cycpatternCheck,\n    nCheck,\n    rotate\n}<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    let odd = 0;\n    let even = 0;\n\n    while (num > 0) {\n        if (num % 2 === 0) {\n            count += 1;\n        } else {\n            odd += 1;\n        }\n\n        num = num / 2;\n    }\n\n    return [count, odd];\n};\n\n/*Given two positive integers. Return their sum.\n   Example:\n      sum(3, 4) ==> 7\n      sum(0, 1) ==> 1\n      sum(2, -2) ==> -1\n  */\nconst sum = (a, b) => {\n    return a + b;\n};\n\nconst main = () => {\n    let [count, odd] = evenOddCount(123);\n\n    console.log(count, odd);\n\n    let [sumA, sumB] = sum(2, -2);\n\n    console.log(sumA, sumB);\n\n    let [sumAB, sumBA] = sum(sumA, sumB);\n\n    console.log(sumAB, sumBA);\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const map = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xvi',\n    90: 'lx',\n    100: 'c',\n    400: 'cd',\n    500: 'd',\n    900: 'cm',\n  };\n  let result = '';\n  let number = number;\n  const getNumber = (str) => {\n    let index = 0;\n    let count = 0;\n    while (number > 0) {\n      if (str[index] === 'I') {\n        count++;\n        number--;\n      } else {\n        number--;\n      }\n      index++;\n    }\n    return count;\n  };\n  const getChar = (str, number) => {\n    if (str.length === number) {\n      return str;\n    } else if (str[number - 1] === 'X') {\n      return str[number - 2] + str[number];\n    } else if (str[number - 1] === 'V') {\n      return str[number - 1] + str[number];\n    } else {\n      return str[number] + str[number + 1];\n    }\n  };\n  while (number > 0) {\n    const index = Math.floor(number / 100);\n    number = number % 100;\n    result = getChar(result, index) + map[index];\n  }\n  return result;\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n\n  return (a + b > c && a + c > b && b + c > a);\n};\n\nconst leftAngleTriangle = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n\n  return (a + b < c && a + c < b && b + c < a);\n};\n\nconst area = (a, b, c) => {\n  return ((a * b) / 2) + ((b * c) / 2) + ((c * a) / 2);\n};\n\nconst rightAngleTriangles = (a, b, c) => {\n  const ab = (a + b) / 2;\n  const bc = (b + c) / 2;\n  const ac = (a + c) / 2;\n\n  return rightAngleTriangle(ab, bc, ac);\n};\n\nconst leftAngleTriangles = (a, b, c) => {\n  const ab = (a + b) / 2;\n  const bc = (b + c) / 2;\n  const ac = (a + c) / 2;\n\n  return leftAngleTriangle(ab, bc, ac);\n};\n\nconst areaTriangle = (a, b, c) => {\n  return area(a, b, c);\n};\n\nconst areaTriangles = (a, b, c) => {\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n\n  return rightAngleTriangles(a, b, c) || leftAngleTriangles(a, b, c);\n};\n\nconst main = () => {\n  const a = +prompt();\n  const b = +prompt();\n  const c = +prompt();\n\n  if (a === 0 || b === 0 || c === 0) {\n    return false;\n  }\n\n  console.log(areaTriangle(a, b, c));\n\n  if (areaTriangles(a, b, c)) {\n    console.log(\"It is a right-angled triangle\");\n  } else if (areaTriangles(a, b, c) === false) {\n    console.log(\"It is a left-angled triangle\");\n  }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  const max = words[0];\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (map.has(word)) {\n      continue;\n    }\n    map.set(word, 1);\n    if (map.size > max.length) {\n      max = word;\n    }\n  }\n  return max;\n};\n\nconst findMax = (words) => {\n  const max = words[0];\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (map.has(word)) {\n      continue;\n    }\n    map.set(word, 1);\n    if (map.size > max.length) {\n      max = word;\n    }\n  }\n  return max;\n};\n\nconst words = [\"na me\", \"of\", \"string\"];\n\nconsole.log(findMax(words));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  return (number >= need)? [number - need, number] : [remaining, remaining];\n}\n\nconst main = () => {\n  let [need, remaining] = eat(5, 6, 10);\n  console.log('need is', need, 'and remaining is', remaining);\n  let [eaten, remaining] = eat(4, 8, 9);\n  console.log('eaten is', eaten, 'and remaining is', remaining);\n  let [eaten, remaining] = eat(1, 10, 10);\n  console.log('eaten is', eaten, 'and remaining is', remaining);\n  let [eaten, remaining] = eat(2, 11, 5);\n  console.log('eaten is', eaten, 'and remaining is', remaining);\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    // check for correct number of arguments\n    if (typeof operator!== 'object' || typeof operand!== 'object')\n        return undefined;\n\n    // check for correct number of arguments\n    if (operator.length === 0 || operand.length < 2)\n        return undefined;\n\n    let operands = operand;\n    let operator = operator;\n    let results = [];\n    //console.log(`Operators: ${operator}`);\n    //console.log(`Operands: ${operands}`);\n    // loop through the operator list, \n    // and check if the current operator is valid\n    for (let i = 0; i < operator.length; i++) {\n        // console.log(`Checking operator ${i}`);\n        // check if the current operator is valid\n        if (operator[i]!== operand[i]) {\n            // console.log(`Operator not valid`);\n            return undefined;\n        }\n    }\n\n    // loop through the operand list, \n    // and add the results to the results array\n    for (let i = 0; i < operands.length; i++) {\n        // console.log(`Checking operand ${i}`);\n        // check if the current operand is valid\n        if (operands[i] === undefined || operands[i] < 0) {\n            // console.log(`Operand not valid`);\n            return undefined;\n        }\n\n        //console.log(`Operand ${i}: ${operands[i]}`);\n        results.push(operands[i]);\n    }\n\n    //console.log(`Results: ${results}`);\n    // check if the operands are even\n    if (results.length % 2!== 0) {\n        // console.log(`Results are not even`);\n        return undefined;\n    }\n\n    // sum the even values\n    let sum = 0;\n    for (let i = 0; i < results.length; i += 2) {\n        // sum the even values\n        sum += results[i];\n    }\n\n    // sum the odd values\n    let sum2 = 0;\n    for (let i = 1; i < results.length; i += 2) {\n        // sum the odd values\n        sum2 += results[i];\n    }\n\n    // add the results together\n    sum += sum2;\n\n    // check if the sum is even\n    if (sum % 2!== 0) {\n        // console.log(`Sum not even`);\n        return undefined;\n    }\n\n    // divide the sum by 2\n    let sum3 = sum / 2;\n\n    // loop through the results array again, \n    // and add the quotient to the sum\n    for (let i = 0; i < results.length; i += 2) {\n        // add the quotient to the sum\n        sum += (results[i] / 2) * (results[i + 1] / 2);\n    }\n\n    // check if the result is even\n    if (sum % 2!== 0) {\n        // console.log(`Sum not even`);\n        return undefined;\n    }\n\n    // divide the sum by 2\n    let sum4 = sum / 2;\n\n    // loop through the results array again, \n    // and add the quotient to the sum\n    for (let i = 0; i < results.length; i += 2) {\n        // add the quotient to the sum\n        sum += (results[i] / 2) * (results[i + 1] / 2);\n    }\n\n    // check if the result is even\n    if (sum % 2!== 0) {\n        // console.log(`Sum not even`);\n        return undefined;\n    }\n\n    // divide the sum by 2\n    let sum5 = sum / 2;\n\n    // loop through the results array again, \n    // and add the quotient to the sum\n    for (let i = 0; i < results.length; i += 2) {\n        // add the quotient to the sum\n        sum += (results[i] / 2) * (results[i + 1] / 2);\n    }\n\n    // check if the result is even\n    if (sum % 2!== 0) {\n        // console.log(`Sum not even`);\n        return undefined;\n    }\n\n    // divide the sum by 2\n    let sum6 = sum / 2;\n\n    // loop through the results array again, \n    // and add the quotient to the sum\n    for (let i = 0; i < results.length; i += 2) {\n        // add the quotient to the sum\n        sum += (results[i] / 2) * (results[i + 1] / 2);\n    }\n\n    // check if the result is even\n    if (sum % 2!== 0) {\n        // console.log(`Sum not even`);\n        return undefined;\n    }\n\n    // divide the sum by 2\n    let sum7 = sum / 2;\n\n    // loop through the results array again, \n    // and add the quotient to the sum\n    for (let i = 0; i < results.length; i += 2) {\n        // add the quotient to the sum\n        sum += (results[i] / 2) * (results[i + 1] / 2);\n    }\n\n    // check if the result is even\n    if (sum % 2!== 0) {\n        // console.log(`Sum not even`);\n        return undefined;\n    "}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const map = {\n    lower: {\n      upper: () => s.replace(/[a-z]/g, (c) => c.toUpperCase()),\n      lower: () => s.replace(/[A-Z]/g, (c) => c.toLowerCase())\n    },\n    upper: {\n      upper: () => s.replace(/[A-Z]/g, (c) => c.toUpperCase()),\n      lower: () => s.replace(/[a-z]/g, (c) => c.toLowerCase())\n    },\n    both: {\n      upper: () => s.replace(/[A-Z]/g, (c) => c.toUpperCase()),\n      lower: () => s.replace(/[a-z]/g, (c) => c.toLowerCase())\n    }\n  };\n\n  let result = s;\n  const len = s.length;\n\n  for (let i = 0; i < len; i += 1) {\n    if (map[s[i].toUpperCase()] === undefined) {\n      result = map.both.lower();\n    } else if (map[s[i].toLowerCase()] === undefined) {\n      result = map.both.upper();\n    } else {\n      result = map[s[i].toUpperCase()].lower();\n    }\n  }\n\n  return result;\n};\n\nconsole.log(solve(\"1234\")); // 4321\nconsole.log(solve(\"ab\")); // AB\nconsole.log(solve(\"#a@C\")); // #A@c<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('') == null\n  */\nconst md5ToString = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString2 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString2('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString3 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString3('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString4 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString4('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString5 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString6 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString6('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString7 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString7('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString8 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString8('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString9 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString9('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString10 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString10('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5ToString11 = (text) => {\n  if (!text) return null;\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (b <= a) {\n    return []\n  }\n  const result = []\n  for (let i = a; i <= b; i++) {\n    result.push(i)\n  }\n  return result\n}\n\nexport { generateIntegers }\n<|endoftext|>"}
