{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Check if in given list of numbers, a re an y two numbers closer to each otherthan\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n    const all = numbers.reduce((acc, curr) => {\n        return acc.concat(curr);\n    }, []);\n    const sorted = all.sort();\n    const diff = sorted[1] - sorted[0];\n    return diff <= threshold;\n};\n\n/*\n  Find the closest numbers in a given list\n  >>> findClosest(3.1, [3.1, 4.2, 5.3, 2.0, 2.8, 3.0, 4.0, 5.0])\n  [4.0, 5.0, 2.0]\n  >>> findClosest(1.0, [1.0, 2.0, 3.0])\n  [2.0, 3.0]\n  */\nconst findClosest = (num, numbers) => {\n    const sorted = numbers.sort();\n    let closest = sorted[0];\n    for (let i = 0; i < sorted.length; i++) {\n        if (Math.abs(num - sorted[i]) < Math.abs(num - closest)) {\n            closest = sorted[i];\n        }\n    }\n    return [closest, sorted[0], sorted[1]];\n};\n\nmodule.exports = {\n    hasCloseElements,\n    findClosest\n};<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string c ontai ning multiple groups of nested parentheses. Your goal isto\n  separate t hosegroup i n to sepa rate stri ngs and return the list of t hos e.\n  Separategroups are ba lanced (each openbrace is  properly closed) and n o t nest ed within e ach oth er\n  Igno reanyspaces in the inputs tring.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_list = paren_string.split('')\n  let i = 0\n  let opening_paren = 0\n  let last_char = ''\n  let inside_nest = false\n  let groups = []\n  let curr_group = ''\n  for (i; i < paren_list.length; i++) {\n    last_char = paren_list[i]\n    if (last_char === '(') {\n      opening_paren += 1\n    } else if (last_char === ')') {\n      opening_paren -= 1\n    }\n    if (opening_paren === 0 && last_char!== '(') {\n      groups.push(curr_group)\n      curr_group = ''\n    } else if (opening_paren === 0 && last_char === '(') {\n      inside_nest =!inside_nest\n    }\n    if (last_char === '(' &&!inside_nest) {\n      curr_group += last_char\n    } else if (last_char === ')' &&!inside_nest) {\n      curr_group += last_char\n    }\n  }\n  groups.push(curr_group)\n  return groups\n}\n\nconst getGroupSize = (group) => {\n  let group_size = 0\n  for (let i = 0; i < group.length; i++) {\n    if (group[i] === '(') {\n      group_size += 1\n    } else if (group[i] === ')') {\n      group_size -= 1\n    }\n  }\n  return group_size\n}\n\nconst getParenthesis = (paren_string) => {\n  let paren_list = paren_string.split('')\n  let i = 0\n  let curr_paren_string = ''\n  let opening_paren = 0\n  let last_char = ''\n  let inside_nest = false\n  let curr_group = ''\n  for (i; i < paren_list.length; i++) {\n    last_char = paren_list[i]\n    if (last_char === '(') {\n      opening_paren += 1\n    } else if (last_char === ')') {\n      opening_paren -= 1\n    }\n    if (opening_paren === 0) {\n      curr_paren_string += last_char\n    } else if (opening_paren === 0 && last_char === '(') {\n      inside_nest =!inside_nest\n    }\n    if (last_char === '(' &&!inside_nest) {\n      curr_group += last_char\n    } else if (last_char === ')' &&!inside_nest) {\n      curr_group += last_char\n    }\n  }\n  return curr_paren_string\n}\n\n/*\n  Function to return the depth of the parentheses in the string.\n  >>> getDepth('( ) (( )) (( )( ))')\n  2\n  >>> getDepth('()')\n  0\n  >>> getDepth('()(()')\n  2\n  >>> getDepth('()()')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('(()')\n  1\n  >>> getDepth('(())')\n  2\n  >>> getDepth('(()())')\n  3\n  >>> getDepth('((()()()))')\n  5\n  >>> getDepth('(()())')\n  3\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()()')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()')\n  0\n  >>> getDepth('(())')\n  1\n  >>> getDepth('(())')\n  2\n  >>> getDepth('(()())')\n  3\n  >>> getDepth('((()()()))')\n  5\n  >>> getDepth('(()())')\n  3\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('()())')\n  2\n  >>> getDepth('()')\n  1\n  >>> getDepth('()')\n  0\n  >>> getDepth('"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Given a positive floating point numb er, i t can be decomposed into\n  and integer part (largest integer smaller tha n giv en numb e r) anddecimals  (leftover part always smal ler  than 1).\n\n  R eturn the dec imal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    return number.toFixed(1).split('.')[1]\n}\n\nconst numberIsInteger = (number) => {\n    return truncateNumber(number) === 0\n}\n\nconst getBiggest = (number) => {\n    if (numberIsInteger(number)) return number\n    return number > 0? number : 0\n}\n\nconst getSmallest = (number) => {\n    if (numberIsInteger(number)) return -number\n    return number < 0? number : 0\n}\n\nconst isEven = (number) => {\n    return number % 2 === 0\n}\n\nconst isOdd = (number) => {\n    return number % 2!== 0\n}\n\nconst isEvenOrOdd = (number) => {\n    return isEven(number) || isOdd(number)\n}\n\nconst isPositive = (number) => {\n    return number >= 0\n}\n\nconst isNegative = (number) => {\n    return number < 0\n}\n\nconst isPositiveOrNegative = (number) => {\n    return isPositive(number) || isNegative(number)\n}\n\nconst getMin = (a, b) => {\n    return isPositiveOrNegative(a)? a : b\n}\n\nconst getMax = (a, b) => {\n    return isPositiveOrNegative(a)? b : a\n}\n\nconst add = (a, b) => {\n    return getMax(a + b, a - b)\n}\n\nconst subtract = (a, b) => {\n    return getMin(a - b, a + b)\n}\n\nconst multiply = (a, b) => {\n    return a * b\n}\n\nconst divide = (a, b) => {\n    return a / b\n}\n\nconst isPowerOfTwo = (number) => {\n    return (number & (number - 1)) === 0\n}\n\nconst isPowerOfTwoOrOdd = (number) => {\n    return isPowerOfTwo(number) || isOdd(number)\n}\n\nconst isPowerOfTwoOrEven = (number) => {\n    return isPowerOfTwo(number) || isEven(number)\n}\n\nconst isPowerOfTwoOrOddOrEven = (number) => {\n    return isPowerOfTwoOrOdd(number) || isEven(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrNegative = (number) => {\n    return isPowerOfTwoOrOddOrEven(number) || isNegative(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositive = (number) => {\n    return isPowerOfTwoOrOddOrEven(number) || isPositive(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegative = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositive(number) || isNegative(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZero = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegative(number) || isZero(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOne = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZero(number) || isOne(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwo = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOne(number) || isTwo(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThree = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwo(number) || isThree(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFour = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThree(number) || isFour(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFive = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFour(number) || isFive(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFiveOrSix = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFive(number) || isSix(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFiveOrSixOrSeven = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFiveOrSix(number) || isSeven(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFiveOrSixOrSevenOrEight = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFiveOrSixOrSeven(number) || isEight(number)\n}\n\nconst isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFiveOrSixOrSevenOrEightOrNine = (number) => {\n    return isPowerOfTwoOrOddOrEvenOrPositiveOrNegativeOrZeroOrOneOrTwoOrThreeOrFourOrFiveOrSixOrSevenOrEight(number) || isNine(number)\n}\n\nconst isPowerOfTwoOrOddOrEven"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero , and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You're given a list of deposit and w ithdr awal operations on a bank account that starts with\n  zero balance. Yourtaskis to d e tect if  at any p oint the balance of accountfal lls below zero, and\n  at th at point functionshould r eturn true.Otherwise i t  shoul d return fa lse.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  let check = true;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      check = false;\n    }\n  }\n  return check;\n};\n\n/*\n  >>> belowZero([0, 1, 2, 3])\n  false\n  >>> belowZero([0, 1, 2, -4, 5])\n  true\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n    const list = numbers.slice();\n    const mean = sum(list) / list.length;\n    const diff = list.map((x) => Math.abs(x - mean));\n    return sum(diff) / list.length;\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n    const list = numbers.slice();\n    const mean = sum(list) / list.length;\n    const diff = list.map((x) => Math.abs(x - mean));\n    return Math.sqrt(sum(diff * diff) / list.length);\n};\n\n/*\n  For a given list of input numbers, c alcul ate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Ab solut e Devia t ion isthe avera ge absolute difference betwe eneach\n  element  and a center point (mean in this case): \n MAD = average | x -x _mean|\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst variance = (numbers) => {\n    const list = numbers.slice();\n    const mean = sum(list) / list.length;\n    const diff = list.map((x) => Math.abs(x - mean));\n    return sum(diff * diff) / list.length;\n};\n\nconst mean = (list) => {\n    return sum(list) / list.length;\n};\n\nconst median = (list) => {\n    const sorted = list.slice().sort((a, b) => a - b);\n    if (sorted.length % 2) {\n        return sorted[Math.floor(sorted.length / 2)];\n    } else {\n        const index = sorted.length / 2;\n        return (sorted[index - 1] + sorted[index]) / 2;\n    }\n};\n\nconst variance = (list) => {\n    const mean = mean(list);\n    const sumOfSquares = sum((list.map((x) => (x - mean) * (x - mean))) * 2);\n    return sumOfSquares / (list.length - 1);\n};\n\nconst varianceOfSamples = (list) => {\n    const mean = mean(list);\n    const sumOfSquares = sum((list.map((x) => (x - mean) * (x - mean))) * 2);\n    return sumOfSquares / list.length;\n};\n\nconst standardDeviation = (list) => {\n    const mean = mean(list);\n    const sumOfSquares = sum((list.map((x) => (x - mean) * (x - mean))) * 2);\n    return Math.sqrt(sumOfSquares / list.length);\n};\n\nconst skewness = (list) => {\n    const mean = mean(list);\n    const sumOfProducts = sum((list.map((x) => (x - mean) * (x - mean) * (x - mean))) * 3);\n    return sumOfProducts / list.length;\n};\n\nconst kurtosis = (list) => {\n    const mean = mean(list);\n    const sumOfProducts = sum((list.map((x) => (x - mean) * (x - mean) * (x - mean) * (x - mean))) * 4);\n    return sumOfProducts / list.length;\n};\n\nconst skewness = (list) => {\n    const mean = mean(list);\n    const sumOfProducts = sum((list.map((x) => (x - mean) * (x - mean) * (x - mean) * (x - mean))) * 3);\n    return sumOfProducts / list.length;\n};\n\nconst kurtosis = (list) => {\n    const mean = mean(list);\n    const sumOfProducts = sum((list.map((x) => (x - mean) * (x - mean) * (x - mean) * (x - mean))) * 4);\n    return sumOfProducts / list.length;\n};\n\nconst standardDeviation = (list) => {\n    const mean = mean(list);\n    const sumOfSquares = sum((list.map((x) => (x - mean) * (x - mean))) * 2);\n    return Math.sqrt(sumOfSquares / list.length);\n};\n\nconst meanAbsoluteDeviation = (list) => {\n    const mean = mean(list);\n    const diff = list.map((x) => Math.abs(x - mean));\n    return sum(diff) / list.length;\n};\n\nconst median = (list) => {\n    const sorted = list.slice().sort((a, b) => a - b);\n    if (sorted.length % 2) {\n        return sorted[Math.floor(sorted.length / 2)];\n    } else {\n        const index = sorted.length / 2;\n        return (sorted[index - 1] + sorted[index]) / 2;\n    }\n};\n\nconst meanAbsoluteDeviation = (list) => {\n    const mean = mean(list);\n    const diff = list.map((x) => Math.abs(x - mean));\n    return sum(diff) / list.length;\n};\n\nconst varianceOfSamples = (list) => {\n    const mean = mean(list);\n    const sumOfSquares = sum((list.map((x) => (x - mean) * (x - mean))) * 2);\n    return sumOfSquares / list.length;\n};\n\nconst median = (list) => {\n"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insert a number 'delimeter' betweenevery  two consecutive elements of inputlist `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const inters = []\n  const len = numbers.length\n  for (let i = 0; i < len; i++) {\n    inters.push(numbers[i])\n  }\n  for (let i = 1; i < len - 1; i++) {\n    inters.push(delimeter)\n  }\n  return inters\n}\n\n/*\n  Convert a string to lowercase\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('Hello world')\n  'hello world'\n  >>> tolower('hElLo woRld')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  >>> tolower('HELLO WORLD')\n  'hello world'\n  "}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E .g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres ented multiple groups for nested parentheses separated by spaces.\n  Foreachof theg roup, o utput the  deepest level of nesting of  pa rentheses.\n  E.g. (()()) ha s maximum two levels of ne sting while((())) hast hree.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  let result = []\n  let level = 0\n  let paren_string_length = paren_string.length\n  let is_open_paren = false\n  for (let i = 0; i < paren_string_length; i++) {\n    if (is_open_paren) {\n      if (paren_string[i] == ')') {\n        level -= 1\n        is_open_paren = false\n      }\n    } else if (paren_string[i] == '(') {\n      level += 1\n      is_open_paren = true\n    }\n  }\n  result.push(level)\n  return result\n}\n\nmodule.exports = parseNestedParens\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  if (!substring) {\n    return strings;\n  }\n  return strings.filter(string => string.indexOf(substring) >= 0);\n};\n\n// #############################################################################\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return  a tu ple consisting of a sum and a product of all the integers in a list.\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let product = 1\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n    sum += numbers[i]\n  }\n  return (sum, product)\n}\n\n/*\n  E mptysum sho u ld be e qual to 0  and emptyproduct should be  eq ual to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers) => {\n  let product = 1\n  let sum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i]\n    sum += numbers[i]\n  }\n  return (sum, product)\n}\n\nmodule.exports = sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* From a given list of integers, gener ate a  list of rolling maximum element found until given moment\n  in the seque nce.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const max = numbers[0];\n  const maxIndex = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n    }\n  }\n  return [...numbers.slice(0, maxIndex + 1), max];\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string .\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix .\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Test if gniven strig is a palindrome  */\nc onst isPalindrome = (string) => {\n return string == string.split('').re verse ().join ( '');\n}\n/* Findthe shortest palindrome that  be gins with a su pplied string.\n  Algorithm idea is simp le:\n  - Find the longes t  postf ix of suppl ied str ing thatisa palindrome.\n  - Appendto the end ofthe strin g reverse of a string prefi x that come sb efore the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n const result = string;\n while (onst isPalindrome(result)) {\n  let suffix = '';\n  const suffix = string.slice (result.length - 1);\n  string = result + suffix.split('').reverse().join('');\n  }\n return string;\n}\n/* Find the string with the longest prefix that makes the string a palindrome\n  >>> makePalindrome('aab')\n  'aab'\n  >>> makePalindrome('ab')\n  'ab'\n  >>> makePalindrome('a')\n  'a'\n  >>> makePalindrome('aa')\n  'aa'\n  >>> makePalindrome('abcd')\n  'abcd'\n  >>> makePalindrome('abc')\n  'abc'\n  >>> makePalindrome('abcde')\n  'abcde'\n  >>> makePalindrome('abcdefg')\n  'abcdefg'\n  >>> makePalindrome('abcdefghi')\n  'abcdefghi'\n  >>> makePalindrome('abcdefghij')\n  'abcdefghij'\n  >>> makePalindrome('abcdefghijk')\n  'abcdefghijk'\n  >>> makePalindrome('abcdefghijkl')\n  'abcdefghijkl'\n  >>> makePalindrome('abcdefghijklmn')\n  'abcdefghijklmn'\n  >>> makePalindrome('abcdefghijklmno')\n  'abcdefghijklmno'\n  >>> makePalindrome('abcdefghijklmnop')\n  'abcdefghijklmnop'\n  >>> makePalindrome('abcdefghijklmnopq')\n  'abcdefghijklmnopq'\n  >>> makePalindrome('abcdefghijklmnopqr')\n  'abcdefghijklmnopqr'\n  >>> makePalindrome('abcdefghijklmnopqrst')\n  'abcdefghijklmnopqrst'\n  >>> makePalindrome('abcdefghijklmnopqrstu')\n  'abcdefghijklmnopqrstu'\n  >>> makePalindrome('abcdefghijklmnopqrstuv')\n  'abcdefghijklmnopqrstuv'\n  >>> makePalindrome('abcdefghijklmnopqrstuvw')\n  'abcdefghijklmnopqrstuvw'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrst"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Input are two strings a and b consis tingonly of 1s and 0s.\n  Perform binary XOR on these inputs and return resul t als o as as tring.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const l = a.length;\n  const m = b.length;\n  const res = new Array(l + m);\n  for (let i = 0; i < l; i++) {\n    res[i] = a[i] ^ b[i];\n  }\n  for (let i = l; i < l + m; i++) {\n    res[i] = a[i - l] ^ b[i - l];\n  }\n  return res.join('');\n};\n\n// console.log(stringXor('010', '110'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the l onges t one. Return the first one in case of multiple\n  strings of the same le ngth.  Return null in  case the  input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings.length) return null\n  let max = strings[0].length\n  strings.forEach(s => {\n    if (s.length > max) max = s.length\n  })\n  return strings[0].substring(0, max)\n}\n\n/*\n  >>> longest(['a', 'b', 'c', 'dd'])\n  'dd'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'bb', 'ccc', 'dd'])\n  'ccc'\n  */\n\nexport default longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Return a greatest common divisor oftwo i ntegers a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  while (b) {\n    const remainder = a % b;\n    a = b;\n    b = remainder;\n  }\n  return a;\n};\n\nconst gcd = (a, b) => {\n  const greatestCommonDivisor = (a, b) => {\n    while (b) {\n      const remainder = a % b;\n      a = b;\n      b = remainder;\n    }\n    return a;\n  };\n  return greatestCommonDivisor(a, b);\n};\n\n// This is the heart of the algorithm.\n// The idea is to iterate through the input array\n// and compare it to each other element in the\n// array.\n// The algorithm will stop when it finds\n// a pair of numbers that are not equal.\n// If one of the numbers is a multiple of\n// the other, the algorithm will stop.\nconst isPrime = (x) => {\n  let isPrime = true;\n  const i = x - 1;\n  const divisors = [2, 3];\n  while (i < x) {\n    if (x % divisors[i % 2] === 0) {\n      isPrime = false;\n      break;\n    }\n    i += 2;\n  }\n  return isPrime;\n};\n\nconst countPrimes = (x) => {\n  let count = 0;\n  let i = 0;\n  while (i < x) {\n    if (isPrime(i)) {\n      count++;\n    }\n    i++;\n  }\n  return count;\n};\n\nconst main = () => {\n  const x = parseInt(process.argv[2]);\n  const count = countPrimes(x);\n  console.log(count);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Return list of all prefixes from sho rtest  to longestof the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n    let prefixes = [];\n    let prefix = '';\n    for (let i = 0; i < string.length; i++) {\n        prefix = prefix + string.slice(0, i+1);\n        if (prefix in words) {\n            prefixes = prefixes.concat(words[prefix]);\n        }\n    }\n    return prefixes;\n};\n\n/* Return list of all suffixes from sho rtest  to longestof the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n    let suffixes = [];\n    let suffix = '';\n    for (let i = 0; i < string.length; i++) {\n        suffix = string.slice(i, string.length);\n        if (suffix in words) {\n            suffixes = suffixes.concat(words[suffix]);\n        }\n    }\n    return suffixes;\n};\n\n/* Return longest word in sho rtest\n  >>> longestWord('abc')\n  'abc'\n  >>> longestWord('a b c')\n  'abc'\n  >>> longestWord('a b c d')\n  'abcd'\n  >>> longestWord('a b c d e')\n  'abcd'\n  */\nconst longestWord = (string) => {\n    return words[string.slice(0, string.length-1)];\n};\n\n/* Return length of longest word in sho rtest\n  >>> lengthOfLongestWord('abc')\n  3\n  >>> lengthOfLongestWord('a b c')\n  3\n  >>> lengthOfLongestWord('a b c d')\n  4\n  >>> lengthOfLongestWord('a b c d e')\n  4\n  */\nconst lengthOfLongestWord = (string) => {\n    return longestWord(string).length;\n};\n\n/* Return list of all words in sho rtest\n  >>> allWords('abc')\n  ['abc']\n  >>> allWords('a b c')\n  ['abc', 'a b c']\n  >>> allWords('a b c d')\n  ['abc', 'abd', 'acd', 'adc', 'bcd', 'bcd', 'bdd', 'bda', 'cda', 'cdd', 'bda', 'dca', 'ddc', 'dcb', 'dcc', 'dac', 'dbc', 'dcc', 'dbd', 'dba', 'dcb', 'cbd', 'cca', 'ccb', 'cca', 'cdb', 'cdc', 'cca', 'ccc', 'cca', 'ccd', 'cda', 'ccb', 'cac', 'cdb', 'cdd', 'cac', 'cbc', 'cac', 'cad', 'cbd', 'cdd', 'cba', 'cbb', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cad', 'cbb', 'cdd', 'cba', 'cac', 'cbc', 'cad', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd', 'cdd', 'cba', 'cbb', 'cdb', 'cdd', 'cbb', 'cdd', 'cac', 'cbd', 'cdb', 'cac', 'cbd',"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Return a string containing space-del imite d numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    const sequence = '';\n    for (let i = 0; i < n; i++) {\n        sequence += `${i} `;\n    }\n    return sequence;\n}\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Given a string, find out how many di stinc t characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  return count.size\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs at least once in the string\nconst substring = (string, n) => {\n  return string.substr(0, n)\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringOne = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 1 && count.has(chars[0])) {\n    return chars[0]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs at least once in the string\nconst substringTwo = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 2 && count.has(chars[0]) && count.has(chars[1])) {\n    return chars[0] + chars[1]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringThree = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 3 && count.has(chars[0]) && count.has(chars[1]) && count.has(chars[2])) {\n    return chars[0] + chars[1] + chars[2]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringFour = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 4 && count.has(chars[0]) && count.has(chars[1]) && count.has(chars[2]) && count.has(chars[3])) {\n    return chars[0] + chars[1] + chars[2] + chars[3]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringFive = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 5 && count.has(chars[0]) && count.has(chars[1]) && count.has(chars[2]) && count.has(chars[3]) && count.has(chars[4])) {\n    return chars[0] + chars[1] + chars[2] + chars[3] + chars[4]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringSix = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 6 && count.has(chars[0]) && count.has(chars[1]) && count.has(chars[2]) && count.has(chars[3]) && count.has(chars[4]) && count.has(chars[5])) {\n    return chars[0] + chars[1] + chars[2] + chars[3] + chars[4] + chars[5]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringSeven = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 7 && count.has(chars[0]) && count.has(chars[1]) && count.has(chars[2]) && count.has(chars[3]) && count.has(chars[4]) && count.has(chars[5]) && count.has(chars[6])) {\n    return chars[0] + chars[1] + chars[2] + chars[3] + chars[4] + chars[5] + chars[6]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringEight = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 8 && count.has(chars[0]) && count.has(chars[1]) && count.has(chars[2]) && count.has(chars[3]) && count.has(chars[4]) && count.has(chars[5]) && count.has(chars[6]) && count.has(chars[7])) {\n    return chars[0] + chars[1] + chars[2] + chars[3] + chars[4] + chars[5] + chars[6] + chars[7]\n  } else {\n    return undefined\n  }\n}\n\n// Part of the exercise\n// Given a string, print the substring of length N that occurs exactly once in the string\nconst substringNine = (string, n) => {\n  const chars = string.split('')\n  const count = new Set(chars)\n  if (count.size === 9 && count.has(chars[0]) && count.has(chars[1]) && count.has(chars[2]) && count.has(chars[3]) && count.has(chars[4]) && count.has(chars[5])"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note , lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_length = music_string.length;\n  const note_list = [];\n  for (let i = 0; i < music_string_length; i++) {\n    const music_string_char = music_string[i];\n    if (music_string_char == 'o' || music_string_char == 'O') {\n      note_list.push(1);\n    } else if (music_string_char == '|' || music_string_char == 'o|') {\n      note_list.push(2);\n    } else if (music_string_char == '.' || music_string_char == 'o.') {\n      note_list.push(3);\n    } else if (music_string_char == '|' || music_string_char == 'o|') {\n      note_list.push(4);\n    } else if (music_string_char == 'o') {\n      note_list.push(5);\n    } else if (music_string_char == 'o') {\n      note_list.push(6);\n    }\n  }\n  return note_list;\n};\n\n/*\n  Input to this function is a string r epres enting musical notes in a special ASCII format.\n  Your task is to parsethisstringa nd retu rn list o f integerscorresponding tohow  many beats do es each\n  not  last.\n\n  Here isa legend :\n 'o' - whole note, l a sts fo ur beats\n 'o|' -half note, lasts two beats\n  '.|'-q uater note, lasts one b eat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst getLength = (music_string) => {\n  const music_string_length = music_string.length;\n  const note_list = [];\n  for (let i = 0; i < music_string_length; i++) {\n    const music_string_char = music_string[i];\n    if (music_string_char == 'o' || music_string_char == 'O') {\n      note_list.push(1);\n    } else if (music_string_char == '|' || music_string_char == 'o|') {\n      note_list.push(2);\n    } else if (music_string_char == '.' || music_string_char == 'o.') {\n      note_list.push(3);\n    } else if (music_string_char == '|' || music_string_char == 'o|') {\n      note_list.push(4);\n    } else if (music_string_char == 'o') {\n      note_list.push(5);\n    } else if (music_string_char == 'o') {\n      note_list.push(6);\n    }\n  }\n  return note_list.length;\n};\n\n// __________________________________________\n\n// Test Code:  Do not alter code below this line.\n\nfunction assert(test, message, test_number) {\n  if (!test) {\n    console.log(\n      \"Test \" + test_number + \" failed: \" + message,\n    );\n  }\n}\n\nassert(\n  (typeof parseMusic === \"function\"),\n  \"parseMusic should be a function.\",\n  1,\n);\n\nassert(\n  (typeof getLength === \"function\"),\n  \"getLength should be a function.\",\n  2,\n);\n\nconst music_string = \"o o|.| o| o|.|.|.|.| o o\";\n\nassert(\n  (music_string.length === getLength(music_string)),\n  \"getLength should return the length of its argument.\",\n  3,\n);\n\nassert(\n  (getLength(music_string) === parseMusic(music_string)),\n  \"parseMusic should return the list of integers representing each note in the string argument.\",\n  4,\n);\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Find how many times a given substrin g can  be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    const n = string.length;\n    let count = 0;\n    for (let i = 0; i < n; i++) {\n        const j = string.indexOf(substring, i);\n        if (j >= 0) {\n            count++;\n            i = j;\n        }\n    }\n    return count;\n};\n\n// TEST\n\nconst testString = 'aaabbbbcccc';\nconst testSubstring = 'bb';\n\nconsole.log(`Counting occurrences of ${testSubstring} in ${testString}...`);\nconsole.log(`${howManyTimes(testString, testSubstring)} occurrences`);\nconsole.log(`${howManyTimes(testString, testSubstring)} overlaps`);\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two', ' three ', 'fou r ', 'fiv e', 'six' , 'seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Input is a space-delimited string of  numb erals from 'zero' to 'nine'.\n  Valid choices are 'zero','one', 'two','three ', 'fou r ', 'fiv e','six','seven','eight' and 'nine '.  Return the s tring with nu mbers sorted fromsmallest  to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let digits = numbers.split(' ');\n  let sorted = [];\n  for (let i = 0; i < digits.length; i++){\n    sorted.push(parseInt(digits[i], 10));\n  }\n  sorted.sort();\n  let output = '';\n  for (let i = 0; i < sorted.length; i++){\n    output += sorted[i];\n    if (i < sorted.length - 1){\n      output +='';\n    }\n  }\n  return output;\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n/*\n  Test Code:  Do not alter code below this line.\n\n  This code tests your code against the training examples in the grading script\n\n  It uses eval to compile the code into JavaScript and then executes it.\n  Be sure that you save the JavaScript code in the eloquent.js file before running\n  this test code.\n*/\nconst fs = require('fs');\nconst path = require('path');\nconst glob = require('glob');\nconst assert = require('assert');\nconst currentDirectory = path.join(__dirname, '../..');\nconst outputDirectory = path.join(__dirname, '../data/output/');\n\nif (!fs.existsSync(outputDirectory)) {\n  fs.mkdirSync(outputDirectory);\n}\n\nconst files = glob.sync(`${currentDirectory}/solution/**/test_*.js`);\nconst numberOfFiles = files.length;\nconst successCount = 0;\nconst failureCount = 0;\nlet testNumber = 1;\n\nfiles.forEach((file) => {\n  const filePath = path.join(currentDirectory, file);\n  const filename = path.basename(filePath, '.js');\n  const solverName = filename.replace(/^solution/, '');\n  const testName = filename.replace(/^test_/, '');\n  const test = require(filePath);\n\n  const startTime = new Date();\n  const {stdout, stderr} = test.run();\n  const timeTaken = new Date() - startTime;\n  const currentTest = {\n    testNumber: testNumber,\n    testName: testName,\n    solverName: solverName,\n    success: true,\n    timeTaken: timeTaken\n  };\n\n  if (stderr) {\n    currentTest.success = false;\n    currentTest.stderr = stderr;\n    console.log(`${stderr}`);\n  }\n\n  const message = stdout.split('\\n').map(line => line.trim()).join('\\n');\n  if (message) {\n    currentTest.message = message;\n  }\n\n  fs.writeFileSync(path.join(outputDirectory, filename), JSON.stringify(currentTest));\n\n  if (currentTest.success) {\n    successCount++;\n  } else {\n    failureCount++;\n  }\n  testNumber++;\n});\n\nconst count = testNumber - 1;\nconst successPercentage = (successCount / count) * 100;\nconst failurePercentage = (failureCount / count) * 100;\n\nconsole.log(`\n  Total tests: ${count}\n  Successes: ${successCount}\n  Failures: ${failureCount}\n  Success Percentage: ${successPercentage}%\n  Failure Percentage: ${failurePercentage}%\n`);\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* From a supplied list of numbers (oflengt h at least two) select and return two that are the closest to each\n  oth er an d retur n  them i n order ( smaller number, larger numbe r). \n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let closest = null;\n  let current = null;\n  let difference = null;\n  let closestIndex = null;\n  let currentIndex = null;\n  let differenceIndex = null;\n  numbers.forEach(number => {\n    if (closest === null || difference > Math.abs(number - closest.value)) {\n      closest = {\n        index: currentIndex,\n        value: current\n      };\n      closestIndex = currentIndex;\n      current = number;\n      currentIndex = numbers.indexOf(number);\n    }\n    else if (difference === Math.abs(number - closest.value)) {\n      closest.index = currentIndex;\n      closestIndex = currentIndex;\n      currentIndex = numbers.indexOf(number);\n    }\n  });\n  if (closest === null) {\n    closest = {\n      index: closestIndex,\n      value: current\n    };\n  }\n  return [closest.index, closest.value];\n};\n\n/*\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  let closest = null;\n  let current = null;\n  let difference = null;\n  let closestIndex = null;\n  let currentIndex = null;\n  let differenceIndex = null;\n  let index = null;\n  let value = null;\n  numbers.forEach((value, index) => {\n    if (closest === null || difference > Math.abs(value - closest.value)) {\n      closest = {\n        index: currentIndex,\n        value: current\n      };\n      closestIndex = currentIndex;\n      current = value;\n      currentIndex = index;\n    }\n    else if (difference === Math.abs(value - closest.value)) {\n      closest.index = currentIndex;\n      closestIndex = currentIndex;\n      currentIndex = index;\n    }\n  });\n  if (closest === null) {\n    closest = {\n      index: closestIndex,\n      value: current\n    };\n  }\n  return [closest.index, closest.value];\n};\n\nmodule.exports = {\n  findClosestElements,\n  findClosestElements2\n};<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Given list of numbers (of at least t wo el ements), apply a linear transform to that list,\n  such that the smallest  numb er will become0 and the  largest will become 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  const min = numbers.reduce((a, b) => Math.min(a, b))\n  const max = numbers.reduce((a, b) => Math.max(a, b))\n  const normalized = []\n  const unit = max - min\n  for (let i = 0; i < numbers.length; i++) {\n    normalized.push((numbers[i] - min) / unit)\n  }\n  return normalized\n}\n\nexport default rescaleToUnit\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filter given list of any python valu es on ly for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter((value) => typeof value === 'number');\n};\n\nexport default filterIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": false, "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/**\n  * Return index of given string, starting at given index\n  * @param  {string} string  String to search\n  * @param  {number} index  Starting index\n  * @return {number}        Index of string\n  * @example\n  * // Return index of 'b' in 'abcd'\n  * strindex('b', 1)\n  * // => 2\n  *\n  * // Return index of 'cd' in 'abcd'\n  * strindex('cd', 3)\n  * // => 5\n  */\nconst strindex = (string, index) => {\n  const substr = string.substr(index);\n  return string.indexOf(substr);\n};\n\n/**\n  * Return substring of given string, starting at given index\n  * @param  {string} string  String to search\n  * @param  {number} index  Starting index\n  * @return {string}        Substring\n  * @example\n  * // Return substring 'bc' in 'abcd'\n  * strsubstr('abcd', 2)\n  * // => 'bc'\n  */\nconst strsubstr = (string, index) => {\n  return string.substr(index);\n};\n\n/**\n  * Return string slice from given start index to end index\n  * @param  {string} string  String to slice\n  * @param  {number} start  Starting index\n  * @param  {number} end    End index\n  * @return {string}        Slice\n  * @example\n  * // Return substring 'bc' in 'abcd'\n  * strslice('abcd', 2, 4)\n  * // => 'bc'\n  */\nconst strslice = (string, start, end) => {\n  return string.slice(start, end);\n};\n\n/**\n  * Return upper-case version of given string\n  * @param  {string} string  String to convert to upper case\n  * @return {string}         Upper-case version of string\n  * @example\n  * // Return upper-case version of 'abc'\n  * strtoupper('abc')\n  * // => 'ABC'\n  */\nconst strtoupper = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  * Return lower-case version of given string\n  * @param  {string} string  String to convert to lower case\n  * @return {string}         Lower-case version of string\n  * @example\n  * // Return lower-case version of 'ABC'\n  * strtolower('ABC')\n  * // => 'abc'\n  */\nconst strtolower = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  * Return string with all upper-case letters\n  * @param  {string} string  String to convert to all upper case\n  * @return {string}         Upper-case version of string\n  * @example\n  * // Return upper-case version of 'abc'\n  * strtoupper('abc')\n  * // => 'ABC'\n  */\nconst strtoupperall = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  * Return string with all lower-case letters\n  * @param  {string} string  String to convert to all lower case\n  * @return {string}         Lower-case version of string\n  * @example\n  * // Return lower-case version of 'ABC'\n  * strtolower('ABC')\n  * // => 'abc'\n  */\nconst strtolowerall = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  * Return string with all upper-case and lower-case letters\n  * @param  {string} string  String to convert to all lower case\n  * @return {string}         Lower-case version of string\n  * @example\n  * // Return lower-case version of 'ABC'\n  * strtolower('ABC')\n  * // => 'abc'\n  */\nconst strtolowerall2 = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  * Return substring of given string, starting at given index and\n  * return new length of the substring\n  * @param  {string} string  String to search\n  * @param  {number} index  Starting index\n  * @return {string}        Substring\n  * @example\n  * // Return substring 'bc' in 'abcd'\n  * strslice('abcd', 2, 4)\n  * // => 'bc'\n  *\n  * // Return substring 'cd' in 'abcd'\n  * strslice('abcd', 3, 5)\n  * // => 'cd'\n  */\nconst strslice2 = (string, index, length) => {\n  return string.slice(index, index + length);\n};\n\n/**\n  * Return upper-case version of given string\n  * @param  {string} string  String to convert to upper case\n  * @return {string}         Upper-case version of string\n  * @example\n  * // Return upper-case version of 'abc'\n  * strtoupper('abc')\n  * // => 'ABC'\n  */\nconst strtoupper2 = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  * Return lower-case version of given string\n  * @param  {string} string  String to convert to lower case\n  * @return {string}         Lower-case version of string\n  * @example\n  * // Return lower-case version of 'ABC'\n  * strtolower('ABC')\n  * // => 'abc'\n  */\nconst strtolower2 = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  * Return string with all upper-case letters\n  * @param  {string} string  String to convert to all upper case\n  * @return {string}         Upper-case version of string\n  * @example\n  * // Return upper-case version of 'abc'\n  * strtoupper2('abc')\n  * // => 'ABC'\n  */\nconst strtoupperall2 = (string) => {\n  return string"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the large st nu mber that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  return largestDivisorHelper(n, 0, n);\n};\n\nfunction largestDivisorHelper(n, min, max) {\n  if (min > max) {\n    return 0;\n  }\n  const i = Math.floor((min + max) / 2);\n  const remainder = n % i;\n  if (remainder == 0) {\n    return largestDivisorHelper(n, i + 1, max);\n  }\n  if (remainder > i / 2) {\n    return largestDivisorHelper(n, i + 1, max);\n  }\n  return largestDivisorHelper(n, min, i - 1);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization .\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Return list of prime factors of give n int eger in theorder from smallest tolargest.\n  Each of the factors should  be l isted n u mber of  times co rresponding to how many time s i t appeares infactorization.\n  Input number should be  equal to the product o f  all f actors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [];\n  const isPrime = (n) => {\n    if (n === 1) {\n      return false;\n    }\n    for (let i = 2; i <= Math.sqrt(n); i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const checkPrime = (n) => {\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const getPrimeFactor = (n) => {\n    for (let i = 2; i < n; i++) {\n      if (checkPrime(i)) {\n        return i;\n      }\n    }\n    return n;\n  };\n  const getPrimeFactorInOrder = (n) => {\n    let pf = getPrimeFactor(n);\n    while (n % pf!== 0) {\n      n = n / pf;\n      pf = getPrimeFactor(n);\n    }\n    return [pf, n];\n  };\n  const getPrimeFactorInOrderWithLoop = (n) => {\n    let pf = getPrimeFactor(n);\n    while (n % pf!== 0) {\n      n = n / pf;\n      pf = getPrimeFactor(n);\n    }\n    return [pf, n];\n  };\n  const factorizeInOrder = (n) => {\n    let factors = [], pf, i;\n    while (n!== 1) {\n      pf = getPrimeFactorInOrder(n);\n      i = pf[1];\n      n = n / i;\n      factors.push(i);\n    }\n    return factors;\n  };\n  const factorizeInOrderWithLoop = (n) => {\n    let factors = [], pf, i;\n    while (n!== 1) {\n      pf = getPrimeFactorInOrderWithLoop(n);\n      i = pf[1];\n      n = n / i;\n      factors.push(i);\n    }\n    return factors;\n  };\n  const factored = n => {\n    const factors = factorizeInOrderWithLoop(n);\n    return factors;\n  };\n  return factored(n);\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t .\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* From a list of integers, remove alleleme nts that occur more than once.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  let number;\n  let index = 0;\n  while (index < numbers.length) {\n    number = numbers[index];\n    if (uniqueNumbers.indexOf(number) < 0) {\n      uniqueNumbers.push(number);\n    }\n    index += 1;\n  }\n  return uniqueNumbers;\n}\n\n/*\n  From a list of strings, remove all strings that are not unique.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates(['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  let number;\n  let index = 0;\n  while (index < numbers.length) {\n    number = numbers[index];\n    if (uniqueNumbers.indexOf(number) < 0) {\n      uniqueNumbers.push(number);\n    }\n    index += 1;\n  }\n  return uniqueNumbers;\n}\n\n/*\n  Returns a new list that contains the unique elements of the original list.\n  Keep order of elements left the same as  in t he inpu t.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  >>> removeDuplicates([])\n  []\n  >>> removeDuplicates([1])\n  [1]\n  >>> removeDuplicates([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let uniqueNumbers = [];\n  let number;\n  let index = 0;\n  while (index < numbers.length) {\n    number = numbers[index];\n    if (uniqueNumbers.indexOf(number) < 0) {\n      uniqueNumbers.push(number);\n    }\n    index += 1;\n  }\n  return uniqueNumbers;\n}\n\nmodule.exports = {\n  removeDuplicates\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase c harac ters to uppercase and uppercase tolowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('').map((char) => {\n    if (char === char.toLowerCase()) {\n      return char.toUpperCase();\n    } else {\n      return char.toLowerCase();\n    }\n  }).join('');\n};\n\n// For a given string, convert lowercase to uppercase.\nconst upperCase = (string) => {\n  return string.toUpperCase();\n};\n\n// For a given string, convert uppercase to lowercase.\nconst lowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n// For a given string, convert it to uppercase.\nconst upper = (string) => {\n  return string.toUpperCase();\n};\n\n// For a given string, convert it to lowercase.\nconst lower = (string) => {\n  return string.toLowerCase();\n};\n\n// Convert a string to uppercase.\nconst upperCaseStr = (str) => {\n  return upper(str);\n};\n\n// Convert a string to lowercase.\nconst lowerCaseStr = (str) => {\n  return lower(str);\n};\n\n// Convert a string to uppercase.\nconst upperStr = (str) => {\n  return upper(str);\n};\n\n// Convert a string to lowercase.\nconst lowerStr = (str) => {\n  return lower(str);\n};\n\n// Add two numbers.\nconst add = (a, b) => {\n  return a + b;\n};\n\n// Subtract two numbers.\nconst subtract = (a, b) => {\n  return a - b;\n};\n\n// Multiplies two numbers.\nconst multiply = (a, b) => {\n  return a * b;\n};\n\n// Divides two numbers.\nconst divide = (a, b) => {\n  return a / b;\n};\n\n// Sums two numbers.\nconst sum = (a, b) => {\n  return a + b;\n};\n\n// Subtract two numbers.\nconst subtractSum = (a, b) => {\n  return a - b;\n};\n\n// Multiplies two numbers.\nconst multiplySum = (a, b) => {\n  return a * b;\n};\n\n// Divides two numbers.\nconst divideSum = (a, b) => {\n  return a / b;\n};\n\n// Subtracts two numbers.\nconst subtractMultiply = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplyMultiply = (a, b) => {\n  return a * b;\n};\n\n// Divides two numbers.\nconst divideMultiply = (a, b) => {\n  return a / b;\n};\n\n// Subtracts two numbers.\nconst subtractMultiplySum = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumMultiply = (a, b) => {\n  return a * b;\n};\n\n// Divides two numbers.\nconst divideSumMultiply = (a, b) => {\n  return a / b;\n};\n\n// Sums two numbers.\nconst addMultiply = (a, b) => {\n  return a + b * a;\n};\n\n// Subtracts two numbers.\nconst subtractMultiplySum = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumAdd = (a, b) => {\n  return a + b * a;\n};\n\n// Divides two numbers.\nconst divideSumAdd = (a, b) => {\n  return a + b * a;\n};\n\n// Sums two numbers.\nconst addSumMultiply = (a, b) => {\n  return a + b * a;\n};\n\n// Subtracts two numbers.\nconst subtractSumMultiply = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumSum = (a, b) => {\n  return a + b * a;\n};\n\n// Subtracts two numbers.\nconst subtractSumMultiply = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumSumMultiply = (a, b) => {\n  return a + b * a;\n};\n\n// Divides two numbers.\nconst divideSumSumMultiply = (a, b) => {\n  return a + b * a;\n};\n\n// Sums two numbers.\nconst addSumSum = (a, b) => {\n  return a + b * a;\n};\n\n// Subtracts two numbers.\nconst subtractSumSumMultiply = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumSumAdd = (a, b) => {\n  return a + b * a;\n};\n\n// Subtracts two numbers.\nconst subtractSumSumMultiply = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumSumSum = (a, b) => {\n  return a + b * a;\n};\n\n// Subtracts two numbers.\nconst subtractSumSumMultiply = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumSumSumMultiply = (a, b) => {\n  return a + b * a;\n};\n\n// Divides two numbers.\nconst divideSumSumSumMultiply = (a, b) => {\n  return a + b * a;\n};\n\n// Sums two numbers.\nconst addSumSumAdd = (a, b) => {\n  return a + b * a;\n};\n\n// Subtracts two numbers.\nconst subtractSumSumMultiply = (a, b) => {\n  return a - b * a;\n};\n\n// Multiplies two numbers.\nconst multiplySumSumSumAdd = (a, b) => {\n"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Concatenate list of strings into a s ingle  string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError(\"Expected an array of strings as argument\");\n  }\n  const str = strings.join(\"\");\n  return str;\n}\n\n/**\n  * Finds the number of substrings in the string that are palindromes.\n  *\n  * @param {string} str\n  * @return {number}\n  *\n  * @example\n  * findPalindromes(\"A man, a plan, a canal, Panama.\")\n  * // => 5\n  */\nconst findPalindromes = (str) => {\n  let i = 0;\n  let j = str.length - 1;\n  let count = 0;\n\n  while (i < j) {\n    if (str[i] === str[j]) {\n      count += 1;\n      i += 1;\n      j -= 1;\n    } else {\n      i += 1;\n    }\n  }\n  return count;\n}\n\n/**\n  * @name getPalindrome\n  * @description Returns a palindrome object.\n  *\n  * @param {string} str\n  * @return {object}\n  *\n  * @example\n  * getPalindrome(\"A man, a plan, a canal, Panama.\")\n  * // => {\n  * //   \"man\" : \"A man, a plan, a canal, Panama.\"\n  * //   \"plan\" : \"A man, a plan, a canal, Panama.\"\n  * //   \"canal\" : \"A man, a plan, a canal, Panama.\"\n  * //   \"panama\" : \"A man, a plan, a canal, Panama.\"\n  * // }\n  */\nconst getPalindrome = (str) => {\n  const str = str.toLowerCase();\n  const palindromes = {};\n\n  for (let i = 0; i < str.length; i += 1) {\n    const newStr = str.slice(i, i + 1);\n    const count = findPalindromes(newStr);\n    palindromes[newStr] = count;\n  }\n  return palindromes;\n}\n\n/**\n  * @name getPairs\n  * @description Returns a list of all the pairs of strings in the\n  * string, with their counts.\n  *\n  * @param {string} str\n  * @return {object}\n  *\n  * @example\n  * getPairs(\"A man, a plan, a canal, Panama.\")\n  * // => {\n  * //   \"A man, a plan, a canal, Panama.\" : 3\n  * //   \"man\" : 1\n  * //   \"plan\" : 1\n  * //   \"canal\" : 1\n  * //   \"panama\" : 1\n  * // }\n  */\nconst getPairs = (str) => {\n  const pairs = {};\n  const str = str.toLowerCase();\n  for (let i = 0; i < str.length; i += 1) {\n    const newStr = str.slice(i, i + 1);\n    const count = findPalindromes(newStr);\n    pairs[newStr] = count;\n  }\n  return pairs;\n}\n\n/**\n  * @name getStringPairs\n  * @description Returns a list of all the pairs of strings in the\n  * string, with their counts.\n  *\n  * @param {string} str\n  * @return {object}\n  *\n  * @example\n  * getStringPairs(\"A man, a plan, a canal, Panama.\")\n  * // => [\n  * //   \"A man, a plan, a canal, Panama.\" : 3,\n  * //   \"man\" : 1,\n  * //   \"plan\" : 1,\n  * //   \"canal\" : 1,\n  * //   \"panama\" : 1\n  * // ]\n  */\nconst getStringPairs = (str) => {\n  const pairs = getPairs(str);\n  const strPairs = [];\n  for (let key in pairs) {\n    const pair = {};\n    pair[key] = pairs[key];\n    strPairs.push(pair);\n  }\n  return strPairs;\n}\n\nexport default {\n  concatenate,\n  findPalindromes,\n  getPalindrome,\n  getPairs,\n  getStringPairs\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filter an input list of strings only  forones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.startsWith(prefix));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByContains = (strings, string) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.includes(string));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByContainsRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.includes(string));\n  filtered = filtered.filter(s => s.match(new RegExp(regex)));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that start with a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByStartWithRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.startsWith(string));\n  filtered = filtered.filter(s => s.match(new RegExp(regex)));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that end with a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByEndWithRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.endsWith(string));\n  filtered = filtered.filter(s => s.match(new RegExp(regex)));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByContainsRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.includes(string));\n  filtered = filtered.filter(s => s.match(new RegExp(regex)));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that start with a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByStartWithRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.startsWith(string));\n  filtered = filtered.filter(s => s.match(new RegExp(regex)));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that end with a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByEndWithRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.endsWith(string));\n  filtered = filtered.filter(s => s.match(new RegExp(regex)));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that contain a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByContainsRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.includes(string));\n  filtered = filtered.filter(s => s.match(new RegExp(regex)));\n  return filtered;\n};\n\n/**\n  * Filter an input list of strings only for ones that start with a given string, with a given regex.\n  * @param {string[]} strings List of strings to filter.\n  * @param {string} string String to filter for.\n  * @param {string} regex String to filter for, with regex syntax.\n  * @returns {string[]} Filtered list of strings.\n  */\nconst filterByStartWithRegEx = (strings, string, regex) => {\n  let filtered = strings;\n  filtered = filtered.filter(s => s.startsWith(string));\n"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Return only positive numbers in the l ist.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const pos = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      pos.push(l[i]);\n    }\n  }\n  return pos;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Return true if a given number is prim e, an d false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false\n  } else if (n === 2) {\n    return true\n  } else if (n % 2 === 0) {\n    return false\n  } else {\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/*Return true if a given number is a palindrome, an d false otherwise.\n  >>> isPalindrome(1)\n  false\n  >>> isPalindrome(100)\n  true\n  >>> isPalindrome(12)\n  true\n  >>> isPalindrome(9)\n  false\n  >>> isPalindrome(21)\n  true\n  >>> isPalindrome(99)\n  true\n  >>> isPalindrome(5)\n  false\n  >>> isPalindrome(1)\n  false\n  */\nconst isPalindrome = (n) => {\n  if (n < 0) {\n    return false\n  }\n  let reverse = reverseDigits(n)\n  return reverse === n\n}\n\nconst reverseDigits = (n) => {\n  let digits = []\n  while (n > 0) {\n    digits.push(n % 10)\n    n = Math.floor(n / 10)\n  }\n  return digits.reverse().join('')\n}\n\n/*Return true if a given number is divisible by 3, 5, or 7, an d false otherwise.\n  >>> isDivisibleBy(3, [1, 2, 3, 4, 5, 6])\n  true\n  >>> isDivisibleBy(7, [1, 2, 3, 4, 5, 6])\n  true\n  >>> isDivisibleBy(3, [1, 2, 4, 5])\n  false\n  >>> isDivisibleBy(7, [1, 2, 4, 5, 6, 7])\n  true\n  >>> isDivisibleBy(7, [1, 2, 3, 4, 5, 6, 7])\n  true\n  >>> isDivisibleBy(7, [1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> isDivisibleBy(7, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  >>> isDivisibleBy(3, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  */\nconst isDivisibleBy = (n, set) => {\n  const divisors = [3, 5, 7]\n  return set.every(d => divisors.includes(d))\n}\n\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false\n  } else if (n === 2) {\n    return true\n  } else if (n % 2 === 0) {\n    return false\n  } else {\n    for (let i = 3; i * i <= n; i += 2) {\n      if (n % i === 0) {\n        return false\n      }\n    }\n    return true\n  }\n}\n\n/*Return true if a given number is a pandigital, an d false otherwise.\n  >>> isPandigital(1)\n  false\n  >>> isPandigital(999)\n  true\n  >>> isPandigital(100000)\n  false\n  >>> isPandigital(12345678)\n  true\n  >>> isPandigital(987654321)\n  false\n  >>> isPandigital(987654321, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  */\nconst isPandigital = (n, set) => {\n  const digits = []\n  while (n > 0) {\n    digits.push(n % 10)\n    n = Math.floor(n / 10)\n  }\n  return set.every(d => digits.includes(d))\n}\n\nconst isPandigital = (n, set) => {\n  const digits = []\n  while (n > 0) {\n    digits.push(n % 10)\n    n = Math.floor(n / 10)\n  }\n  return set.every(d => digits.includes(d))\n}\n\nconst isPandigital = (n, set) => {\n  const digits = []\n  while (n > 0) {\n    digits.push(n % 10)\n    n = Math.floor(n / 10)\n  }\n  return set.every(d => digits.includes(d))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evaluates polynomial with coefficien ts xs  at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n \n  */ \nconstp oly = ( xs, x) =>  {\n  return xs.reduce((prev,  it em, index) =>{\n    returnprev + item * Math.pow(x,index);\n  }, 0);\n}\n\n/* xs ar e coefficie nts ofa polynom ial.\n findZero find x suchthat poly(x) = 0.\n  fin dZero returns only only zer o point,ev en if there are many.\n  Moreove r, findZero only  takes list  xs  having even number of coefficient s\n  andlargest non zero  co efficie nt  as it gua ra ntees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n    let zeros = [], x = 0, n = xs.length;\n    while(zeros.length < n/2) {\n      let zero = 0;\n      while(zero < n - 2 && xs[zero] == 0) {\n        zero++;\n      }\n      if(zero == n - 2) {\n        return -1;\n      }\n      zeros.push(zero);\n      x++;\n    }\n    return xs[zeros[0]] + xs[zeros[1]] * x + xs[zeros[2]] * x * x;\n}\n\nconst findRoot = (func, xmin, xmax) => {\n  let diff = xmax - xmin;\n  let count = 0, t;\n  do {\n    t = xmin + (xmax - xmin) / 2;\n    if(func(t) == 0) {\n      return t;\n    }\n    if(func(t) < 0) {\n      xmin = t;\n    } else {\n      xmax = t;\n    }\n    count++;\n  } while(count < 1000 && diff > 0);\n  return -1;\n}\n\nconst round = (x, n) => {\n  return Math.round(x * Math.pow(10, n)) / Math.pow(10, n);\n}\n\nconst poly2Poly = (poly1, poly2) => {\n  let poly1 = poly1.map(x => x);\n  let poly2 = poly2.map(x => x);\n  let r = [];\n  for(let i = 0; i < poly1.length; i++) {\n    for(let j = 0; j < poly2.length; j++) {\n      r.push(poly1[i] * poly2[j]);\n    }\n  }\n  return r;\n}\n\nconst poly2Coefficients = (poly, coeff) => {\n  let r = [];\n  for(let i = 0; i < poly.length; i++) {\n    r.push(poly[i] / coeff);\n  }\n  return r;\n}\n\nconst poly2PolyCoefficients = (poly1, poly2) => {\n  let r = [];\n  for(let i = 0; i < poly1.length; i++) {\n    for(let j = 0; j < poly2.length; j++) {\n      r.push(poly1[i] * poly2[j]);\n    }\n  }\n  return r;\n}\n\nconst polynomial = (polynomial, coeff) => {\n  let r = [];\n  for(let i = 0; i < polynomial.length; i++) {\n    r.push(polynomial[i] * coeff);\n  }\n  return r;\n}\n\nconst findPolynomialCoefficients = (polynomial) => {\n  let r = [];\n  for(let i = 0; i < polynomial.length; i++) {\n    r.push(1);\n  }\n  return r;\n}\n\nconst findPolynomialRoot = (polynomial, coeff) => {\n  let r = findRoot(polynomial, 0, 1);\n  return r;\n}\n\nconst solve = (coeffs, coeffs2) => {\n  let r = [];\n  for(let i = 0; i < coeffs.length; i++) {\n    r.push(coeffs[i] * coeffs2[i]);\n  }\n  return r;\n}\n\nconst solveCoefficients = (coeffs, coeffs2) => {\n  let r = [];\n  for(let i = 0; i < coeffs.length; i++) {\n    r.push(coeffs[i] * coeffs2[i]);\n  }\n  return r;\n}\n\nconst solve2 = (coeffs, coeffs2) => {\n  let r = [];\n  for(let i = 0; i < coeffs.length; i++) {\n    r.push(coeffs[i] * coeffs2[i]);\n  }\n  return r;\n}\n\nconst solve3 = (coeffs, coeffs2) => {\n  let r = [];\n  for(let i = 0; i < coeffs.length; i++) {\n    r.push(coeffs[i] * coeffs2[i]);\n  }\n  return r;\n}\n\nconst solvePolynomial = (polynomial, coeffs) => {\n  let r = [];\n  for(let i = 0; i < polynomial.length; i++) {\n    r.push(polynomial[i] * coeffs[i]);\n  }\n  return r;\n}\n\nconst solvePolynomial2 = (polynomial, coeffs) => {\n  let r = [];\n  for(let i = 0; i < polynomial.length; i++) {\n    r.push(polynomial[i] * coeffs[i]);\n  }"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3!== 0) {\n      a.push(l[i])\n    }\n  }\n  a.sort()\n  return a\n}\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the indicies that are not d ivisi ble byt hree, w hile itsvalues at the indicies thatare  divisible bythree are equ al\n  to the values of thecorresponding indicieso f l, b ut sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortFirst = (l) => {\n  let a = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      a.push(l[i])\n    }\n  }\n  a.sort()\n  return a\n}\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nconst sorted = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\nconst sortThird1 = sortThird(list)\n\nconsole.log(sorted.length)\nconsole.log(sorted)\n\nconst sorted1 = sortFirst(list)\n\nconsole.log(sorted1.length)\nconsole.log(sorted1)\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique elements in a li st\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let result = [];\n  let isUnique = true;\n  for (let i = 0; i < l.length; i++) {\n    let elem = l[i];\n    if (result.indexOf(elem) === -1) {\n      result.push(elem);\n    } else {\n      isUnique = false;\n    }\n  }\n  return isUnique? result : null;\n};\n\nmodule.exports = unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": false, "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n    Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return 0\n  return Math.max.apply(null, l)\n}\n\n/**\n  @name\n    maxElement\n  @param {List} l\n  @return {Number}\n  @description\n"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Return the number of times the digit7 app ears in integers less than n whichare divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const numbers = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) {\n      numbers.push('FizzBuzz');\n    } else if (i % 3 === 0) {\n      numbers.push('Fizz');\n    } else if (i % 5 === 0) {\n      numbers.push('Buzz');\n    } else {\n      numbers.push(i);\n    }\n  }\n  return numbers;\n};\n\nmodule.exports = fizzBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let l2 = [];\n  for(let i = 0; i < l.length; i++){\n    if(i%2 === 0){\n      l2.push(l[i]);\n    }else{\n      l2.push(l[i]*2);\n    }\n  }\n  return l2;\n};\n\n/*This function takes a list l and retu rns a  list l' such that\n  l' is identical to l in the odd indicies, while its  valu es at t h e evenindiciesare equal\n to the values of  th e even indicie s of l, but s orted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortOdd = (l) => {\n  let l2 = [];\n  for(let i = 0; i < l.length; i++){\n    if(i%2 === 1){\n      l2.push(l[i]);\n    }else{\n      l2.push(l[i]*2);\n    }\n  }\n  return l2;\n};\n\n//TODO: make sortEven and sortOdd take a list and return a list\n\n\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math .min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by cycling gr oupsof three characters.\n  */\nconst encodeCyclic = (s) => {\n var groups = [ ], gr oups2 = [];\n  f or (let i  = 0; i < Math.floor((s.leng th+ 2) / 3); i++ ) {\n    group s.push(s.slice(3 * i, Math.min((3 * i+ 3), s.len g th))); \n  }\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  e ls e \n      groups2.push(group);  }  return gro ups2.join(' '); \n}\n\n/*\n  takes as input string enc oded with encode_cyclicfun ction.Re turns deco de d string.\n  */\nconst decodeC yc lic = (s) =>{\n var groups = [ ], gr oups2 = [];\n  for(constgroup ofgroups) {\n    if (group.leng th == 3)\n     groups2. push(group.slice(1) + group [0]);\n  }\n  return groups2.join(''); \n}\n\n/*\n  returns first letter of the word.\n  */\nconst firstLetter = (s) =>{\n return s[0]\n}\n\n/*\n  returns last letter of the word.\n  */\nconst lastLetter = (s) =>{\n return s[s.len g th-1]\n}\n\n/*\n  returns string of the length of the word with the first letter removed.\n  */\nconst removeFirstLetter = (s) =>{\n  return s.slice(1, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the last letter removed.\n  */\nconst removeLastLetter = (s) =>{\n  return s.slice(0, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter and the last letter removed.\n  */\nconst removeFirstLastLetters = (s) =>{\n  return s.slice(1, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first and last letter removed.\n  */\nconst removeFirstLastLetters2 = (s) =>{\n  return s.slice(2, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the first and last letter and the last letter removed.\n  */\nconst removeFirstLastLetters3 = (s) =>{\n  return s.slice(2, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters4 = (s) =>{\n  return s.slice(1, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters5 = (s) =>{\n  return s.slice(1, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters6 = (s) =>{\n  return s.slice(1, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters7 = (s) =>{\n  return s.slice(1, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters8 = (s) =>{\n  return s.slice(2, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters9 = (s) =>{\n  return s.slice(2, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters10 = (s) =>{\n  return s.slice(2, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters11 = (s) =>{\n  return s.slice(2, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters12 = (s) =>{\n  return s.slice(2, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters13 = (s) =>{\n  return s.slice(2, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters14 = (s) =>{\n  return s.slice(2, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters15 = (s) =>{\n  return s.slice(2, s.len g th-1)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters16 = (s) =>{\n  return s.slice(2, s.len g th)\n}\n\n/*\n  returns string of the length of the word with the first letter, the last letter and the last letter removed.\n  */\nconst removeFirstLastLetters17 = (s) =>{\n  return s.slice(2, s.len g th-1)\n}\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib returns n-th number that is  a Fi bonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  if (n <= 2) return 1\n  let i = 0, j = 1, a = 1, b = 2, c = 3\n  while (i < n) {\n    j = c\n    c = a + b\n    a = b\n    b = j\n    i += 1\n  }\n  return c\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const a = [...l];\n    const sum = a.reduce((prev, curr) => prev + curr, 0);\n    return a.every(curr => sum - curr === 0);\n};\n\n/*\n  triplesSumToZeroInclusive takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n  if there is a element inthe l sum to zero,\n  it returns the sum of those elements.\n  \n  >>> triplesSumToZeroInclusive([1, 3, 5, 0])\n  0\n  >>> triplesSumToZeroInclusive([1, 3, -2, 1])\n  1\n  >>> triplesSumToZeroInclusive([1, 2, 3, 7])\n  9\n  >>> triplesSumToZeroInclusive([2, 4, -5, 3, 9, 7])\n  16\n  >>> triplesSumToZeroInclusive([1])\n  0\n  */\nconst triplesSumToZeroInclusive = (l) => {\n    const a = [...l];\n    const sum = a.reduce((prev, curr) => prev + curr, 0);\n    return a.every(curr => sum - curr === 0)? sum : false;\n};\n\n/*\n  triplesSumToZeroExclusive takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n  if there is a element inthe l sum to zero,\n  it returns the sum of those elements.\n  \n  >>> triplesSumToZeroExclusive([1, 3, 5, 0])\n  0\n  >>> triplesSumToZeroExclusive([1, 3, -2, 1])\n  1\n  >>> triplesSumToZeroExclusive([1, 2, 3, 7])\n  0\n  >>> triplesSumToZeroExclusive([2, 4, -5, 3, 9, 7])\n  0\n  >>> triplesSumToZeroExclusive([1])\n  false\n  */\nconst triplesSumToZeroExclusive = (l) => {\n    const a = [...l];\n    const sum = a.reduce((prev, curr) => prev + curr, 0);\n    return a.every(curr => sum - curr === 0)? sum : false;\n};\n\n/*\n  triplesSumToZeroAndZeroOrMore takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n  if there is a element inthe l sum to zero,\n  it returns the sum of those elements.\n  if there are more than one elements inthe l sum to zero,\n  it returns true.\n  \n  >>> triplesSumToZeroAndZeroOrMore([1, 3, 5, 0])\n  0\n  >>> triplesSumToZeroAndZeroOrMore([1, 3, -2, 1])\n  1\n  >>> triplesSumToZeroAndZeroOrMore([1, 2, 3, 7])\n  0\n  >>> triplesSumToZeroAndZeroOrMore([2, 4, -5, 3, 9, 7])\n  9\n  >>> triplesSumToZeroAndZeroOrMore([1])\n  false\n  >>> triplesSumToZeroAndZeroOrMore([2, 4, -5, 3, 9, 7, 5])\n  true\n  */\nconst triplesSumToZeroAndZeroOrMore = (l) => {\n    const a = [...l];\n    const sum = a.reduce((prev, curr) => prev + curr, 0);\n    return a.every(curr => sum - curr === 0)? sum : false;\n};\n\n/*\n  triplesSumToZeroAndZeroOrLess takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n  if there is a element inthe l sum to zero,\n  it returns the sum of those elements.\n  if there are less than two elements inthe l sum to zero,\n  it returns false.\n  \n  >>> triplesSumToZeroAndZeroOrLess([1, 3, 5, 0])\n  0\n  >>> triplesSumToZeroAndZeroOrLess([1, 3, -2, 1])\n  1\n  >>> triplesSumToZeroAndZeroOrLess([1, 2, 3, 7])\n  0\n  >>> triplesSumToZeroAndZeroOrLess([2, 4, -5, 3, 9, 7])\n  0\n  >>> triplesSumToZeroAndZeroOrLess([1])\n  false\n  >>> triplesSumToZeroAndZeroOrLess([2, 4, -5, 3, 9, 7, 5])\n  false\n  */\nconst triplesSumToZeroAndZeroOrLess = (l) => {\n    const a = [...l];\n    const sum = a.reduce((prev, curr) => prev + curr, 0);\n    return a.every(curr => sum - curr === 0)? sum : false;\n};\n\n/*\n  triplesSumToZeroAndZeroOrMoreInclusive takes a list of int egers  as an input.\n  it returns true ifthere are three distinct elements inthe l ist tha t \n  sumto zero,and false otherwise.\n  if there is a element inthe l sum to zero,\n  it returns the sum of those elements.\n  if there are more than two elements inthe l sum to zero,\n  it returns true.\n  \n  >>> triplesSumToZeroAndZeroOrMoreInclusive([1, 3, 5, 0])\n  0\n  >>>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imagine a road that's a perfectly st raigh t infinitely long line.\n  n cars are driving left to right;  simultaneou sly,a diffe r ent set  of n car s\n  are driving right to lef t.  The two sets  of cars star t out being very far from  each other.  All cars move i n the samespeed. Two cars  are said to collide\n  whena car that's moving lef t to right hits a car that' s movingri gh t  to left.\n  However, the car s are infinitely  sturdy and  st rong; as a result, they continuem oving\n in their traject ory  asifth eydid not  c ollide.\n\n  This function out pu ts the number of such collisions.\n  */con st carRaceCollis ion = (n) = > {\n  return carRaceCollision(n, 1, n, 1, carSpeed(car), carSpeed(otherCar));\n}\n\nint carRaceCollision(int n, int i, int j, int k, double v1, double v2) {\n  if(n < 2) return 0;\n  int res = 0;\n  int m = (i+j)/2;\n  res += carRaceCollision(n-1, i, m, v1, v2);\n  res += carRaceCollision(n-1, m+1, j, v1, v2);\n  for(int x = m+1; x <= j-1; x++) {\n    double v = carSpeed(carRace(n-1, i, x, v1, v2));\n    double v2 = carSpeed(carRace(n-1, x, j, v1, v2));\n    if(v!= v2) {\n      res++;\n    }\n  }\n  return res;\n}\n\ndouble carRaceCollisionTime(int n, int i, int j, double v1, double v2) {\n  double res = 0;\n  res += carRaceCollisionTime(n-1, i, j, v1, v2);\n  res += carRaceCollisionTime(n-1, i, j, v2, v1);\n  res += carRaceCollisionTime(n-1, i, j, v1, v1);\n  res += carRaceCollisionTime(n-1, i, j, v2, v2);\n  res += carRaceCollisionTime(n-1, i, j, v1, v2);\n  res += carRaceCollisionTime(n-1, i, j, v2, v1);\n  res += carRaceCollisionTime(n-1, i, j, v1, v1);\n  res += carRaceCollisionTime(n-1, i, j, v2, v2);\n  res += carRaceCollisionTime(n-1, i, j, v1, v2);\n  res += carRaceCollisionTime(n-1, i, j, v2, v1);\n  res += carRaceCollisionTime(n-1, i, j, v1, v1);\n  res += carRaceCollisionTime(n-1, i, j, v2, v2);\n  return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented  by 1 .\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.map((element) => element + 1);\n};\n\n/*Return list with elements incremented  by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero takes a list of integ ers a s an input.  it returns true if there are two distinct elements in thelistthat\n s um to z ero, andfalse otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const set = new Set();\n  const result = new Set();\n  const isEmpty = l.length === 0;\n  if (isEmpty) {\n    return false;\n  }\n  for (let i = 0; i < l.length; i += 1) {\n    const number = l[i];\n    if (!isNaN(number) && number!== 0) {\n      const sum = number + l[i + 1];\n      if (sum > 0 && sum < 10) {\n        if (set.has(number)) {\n          result.add(sum);\n        } else {\n          set.add(number);\n        }\n      } else if (sum < 0) {\n        const subSum = sum - l[i + 1];\n        if (set.has(subSum)) {\n          result.add(sum);\n        } else {\n          set.add(subSum);\n        }\n      } else if (sum === 0) {\n        result.add(sum);\n      }\n    }\n  }\n  return result.size!== 0;\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Change numerical base of input number  x to  base.\n  return string representation after the conversion.\n  base numbe rs ar e lesst han 10. \n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base === 2) {\n    return `${x.toString(2)}`\n  } else if (base === 8) {\n    return `${parseInt(x.toString(8), 10).toString(2)}`\n  } else {\n    return `${x.toString(base)}`\n  }\n}\n\n/*\n  Convert decimal number to its equivalent in binary.\n  >>> convertDecimalToBinary(1)\n  '1'\n  >>> convertDecimalToBinary(2)\n  '10'\n  >>> convertDecimalToBinary(3)\n  '11'\n  >>> convertDecimalToBinary(4)\n  '100'\n  >>> convertDecimalToBinary(9)\n  '1001'\n  >>> convertDecimalToBinary(10)\n  '1010'\n  >>> convertDecimalToBinary(15)\n  '111101'\n  >>> convertDecimalToBinary(19)\n  '1001011'\n  >>> convertDecimalToBinary(20)\n  '1011010'\n  >>> convertDecimalToBinary(22)\n  '101101101'\n  >>> convertDecimalToBinary(29)\n  '100101101101'\n  >>> convertDecimalToBinary(30)\n  '1011011011010'\n  >>> convertDecimalToBinary(35)\n  '101101101101101'\n  >>> convertDecimalToBinary(45)\n  '10110110110110101'\n  >>> convertDecimalToBinary(56)\n  '10110110110110101010'\n  >>> convertDecimalToBinary(63)\n  '10110110110110101010101'\n  >>> convertDecimalToBinary(64)\n  '101101101101101010101010'\n  >>> convertDecimalToBinary(69)\n  '101101101101101010101010101'\n  >>> convertDecimalToBinary(70)\n  '1011011011011010101010101010'\n  >>> convertDecimalToBinary(71)\n  '101101101101101010101010101010'\n  >>> convertDecimalToBinary(74)\n  '10110110110110101010101010101010'\n  >>> convertDecimalToBinary(80)\n  '1011011011011010101010101010101010'\n  >>> convertDecimalToBinary(90)\n  '101101101101101010101010101010101010'\n  >>> convertDecimalToBinary(92)\n  '101101101101101010101010101010101010'\n  >>> convertDecimalToBinary(95)\n  '10110110110110101010101010101010101010'\n  >>> convertDecimalToBinary(99)\n  '1011011011011010101010101010101010101010'\n  >>> convertDecimalToBinary(100)\n  '101101101101101010101010101010101010101010'\n  >>> convertDecimalToBinary(101)\n  '10110110110110101010101010101010101010101010'\n  >>> convertDecimalToBinary(103)\n  '1011011011011010101010101010101010101010101010'\n  >>> convertDecimalToBinary(105)\n  '101101101101101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(108)\n  '1011011011011010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(111)\n  '101101101101101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(115)\n  '1011011011011010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(120)\n  '10110110110110101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(125)\n  '1011011011011010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(130)\n  '101101101101101010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(132)\n  '10110110110110101010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(135)\n  '1011011011011010101010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(140)\n  '10110110110110101010101010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(145)\n  '1011011011011010101010101010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(152)\n  '101101101101101010101010101010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(155)\n  '10110110110110101010101010101010101010101010101010101010101010101010101010101010'\n  >>> convertDecimalToBinary(160)\n  '1011011011011010101010101010101010101010101010101010101010101"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(a * a / 4 + h * h) - a;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea3 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea4 = (a, h) => {\n  return Math.sqrt(a * a / 4 + h * h) - a;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea5 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea6 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea7 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea8 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea9 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea10 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea11 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea12 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea13 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea14 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea15 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea16 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea17 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea18 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea19 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea20 = (a, h) => {\n  return (Math.sqrt(a * a / 4 + h * h) - a) / 2;\n};\n\n/*Given length of a side and high retur n are a for a triangle.\n  >>> triangleArea(5, 4)\n  10\n  */\nconst triangleArea21 = (a, h"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Fib4 number sequence is a sequenc e sim ilar to theFibbonacci sequnece that's defined as follows:\n  fib4(0) ->0\n  f ib4(1)- > 0\n  f ib4(2) ->  2\n  fib4(3) -> 0\n  fib4(n)->fib4(n-1) + fi b4(n-2) + fib 4(n-3) + fib4(n-4).\n  Plea sewrite a function toe fficie ntly comput e the n -th eleme ntof the fib4 number sequen ce.  Do not use recursi on.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Return median of elements in the list  l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const length = l.length\n  if (length === 0) return undefined\n  const half = Math.floor(length / 2)\n  const middle = l[half]\n  const left = l[0]\n  const right = l[length - 1]\n  if (left < middle && right < middle) return middle\n  if (left > middle && right > middle) return middle\n  if (left < middle) return left\n  if (right < middle) return right\n}\n\nexport default median\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Checks if given string is a palindro me\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const str = text.replace(/\\s/g, '');\n    let strArray = str.split('');\n    for (let i = 0; i < strArray.length/2; i++) {\n        if (strArray[i]!== strArray[strArray.length - i - 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n//\n//\nconst main = () => {\n    let testString = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    console.log(`Is ${testString} a palindrome? ${isPalindrome(testString)}`);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of nume rics) .\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Return 2^n modulo p (be aware of nume rics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const num = n % p\n  const mod = Math.floor(num / p)\n  return mod === 0? mod : modp(mod, p)\n}\n\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a\n  } else {\n    return gcd(b, a % b)\n  }\n}\n\nconst lcm = (a, b) => {\n  const g = gcd(a, b)\n  return a * b / g\n}\n\nconst find_factors = (n, factor) => {\n  const factors = []\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      factor(i)\n    }\n  }\n}\n\n//find_factors(5, (n) => console.log(n))\n//find_factors(12, (n) => console.log(n))\nfind_factors(100, (n) => console.log(n))\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  returns encoded string by shifting e verycharacter by 5 in the alphabet.\n  */\nconst encodeShift =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode_shift functio n. Returns decoded stri ng.\n  */\nconst decodeShift= (s) =>{\n  retu rn s. split(\" \" ).map(c h => (\n    ((parseInt(c,10) - 5) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n  returns encoded string by shifting e verycharacter by 1 in the alphabet.\n  */\nconst encode =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 1 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encode functio n. Returns decoded stri ng.\n  */\nconst decode =(s) =>{\n  retu rn s. split(\" \" ).map(c h => (\n    ((parseInt(c,10) - 1) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n   returns encoded string by adding a character to the alphabet.\n   */\nconst encodeAdd =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 1 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encodeAdd functio n. Returns decoded stri ng.\n  */\nconst decodeAdd =(s) =>{\n  retu rn s. split(\" \" ).map(c h => (\n    ((parseInt(c,10) + 1) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n   returns encoded string by adding a character to the alphabet.\n   */\nconst encodeRemove =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encodeAdd functio n. Returns decoded stri ng.\n  */\nconst decodeRemove =(s) =>{\n  retu rn s. split(\" \" ).map(c h => (\n    ((parseInt(c,10) + 5) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n   returns encoded string by adding a character to the alphabet.\n   */\nconst encodeChange =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 5 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encodeAdd functio n. Returns decoded stri ng.\n  */\nconst decodeChange =(s) =>{\n  retu rn s. split(\" \" ).map(c h => (\n    ((parseInt(c,10) + 5) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n   returns encoded string by adding a character to the alphabet.\n   */\nconst encodeChange2 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 1 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encodeAdd functio n. Returns decoded stri ng.\n  */\nconst decodeChange2 =(s) =>{\n  retu rn s. split(\" \" ).map(c h => (\n    ((parseInt(c,10) + 1) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n   returns encoded string by adding a character to the alphabet.\n   */\nconst encodeChange3 =(s) => {\n  retu rn s. split(\" \" ).map(c h => Stri ng.fromCharCode(\n    ((ch.ch arC odeAt(0) + 1 -  \"a\".charCode At(0)) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \n/*\n takes as in put str ing encod edwith encodeAdd functio n. Returns decoded stri ng.\n  */\nconst decodeChange3 =(s) =>{\n  retu rn s. split(\" \" ).map(c h => (\n    ((parseInt(c,10) + 1) % 26) + \"a\".charCod eAt(0)\n  )).join(\"\");\n} \nmodule.exports = {\n  encode,\n  decode,\n  encodeShift,\n  decodeShift,\n  encodeAdd,\n  decodeAdd,\n  encodeRemove,\n  decodeRemove,\n  encodeChange,\n  decodeChange,\n  encodeChange2,\n  decodeChange2,\n  encodeChange3,\n  decodeChange3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that take s str ing and returns string without vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  const vowels = ['a','e','i','o','u','A','E','I','O','U']\n  const consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n  const vowelsList = vowels.map(v => v.toLowerCase())\n  const consonantsList = consonants.map(c => c.toLowerCase())\n  const vowelsSet = new Set(vowelsList)\n  const consonantsSet = new Set(consonantsList)\n\n  return text.toLowerCase().replace(/[a-z]+/g, (match, index) => {\n    if (vowelsSet.has(match)) {\n      return match\n    }\n    if (consonantsSet.has(match)) {\n      return consonantsList[consonantsList.indexOf(match)]\n    }\n    return match\n  })\n}\n\n/*\n  convertToSnakeCase is a function that takes a string and returns a snake case string.\n  >>> convertToSnakeCase('')\n  ''\n  >>> convertToSnakeCase('abcdef')\n  'abcdef'\n  >>> convertToSnakeCase('abcdefghijklm')\n  'abcdefghijklm'\n  >>> convertToSnakeCase('aBCdEf')\n  'abcdef'\n  >>> convertToSnakeCase('aBcDef')\n  'abcdef'\n  >>> convertToSnakeCase('aBcDefghijklm')\n  'abcdefghijklm'\n  >>> convertToSnakeCase('aBcDefghijklm')\n  'abcdefghijklm'\n  >>> convertToSnakeCase('aBcDefghijklm')\n  'abcdefghijklm'\n  >>> convertToSnakeCase('aBcDefghijklm')\n  'abcdefghijklm'\n  */\nconst convertToSnakeCase = (text) => {\n  return text.replace(/\\W+/g, function(match) {\n    return match.charAt(0).toLowerCase() + match.slice(1)\n  })\n}\n\n/*\n  isNumber is a function that takes a string and returns a boolean.\n  >>> isNumber('')\n  false\n  >>> isNumber('123')\n  true\n  >>> isNumber('a123')\n  false\n  >>> isNumber('A123')\n  false\n  >>> isNumber('123a')\n  false\n  >>> isNumber('a123a')\n  false\n  >>> isNumber('a12312')\n  false\n  >>> isNumber('a1231234')\n  true\n  >>> isNumber('a1231234b')\n  false\n  >>> isNumber('A1231234B')\n  false\n  >>> isNumber('A1231234B')\n  false\n  >>> isNumber('a1231234b')\n  false\n  >>> isNumber('a1231234b')\n  false\n  >>> isNumber('a1231234b')\n  false\n  */\nconst isNumber = (text) => {\n  return /^[0-9]+$/.test(text)\n}\n\n/*\n  isValidEmail is a function that takes a string and returns a boolean.\n  >>> isValidEmail('')\n  false\n  >>> isValidEmail('a@b.com')\n  true\n  >>> isValidEmail('a@b.com')\n  true\n  >>> isValidEmail('a@b.c')\n  false\n  >>> isValidEmail('a@b.com')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('a@b.c')\n  true\n  >>> isValidEmail('"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Return true if all numbers in the lis t l a re below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let isBelowThreshold = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      isBelowThreshold = false;\n      break;\n    }\n  }\n  return isBelowThreshold;\n};\n\n/**\n * @param {number[]} arr\n * @return {number}\n */\nconst minSubArrayLen = (arr) => {\n  let minSubArray = Infinity;\n  let minSubArrayStart = 0;\n  let minSubArrayEnd = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (belowThreshold(arr, arr[i])) {\n      if (minSubArrayEnd - minSubArrayStart < minSubArray) {\n        minSubArray = minSubArrayEnd - minSubArrayStart;\n        minSubArrayStart = i;\n        minSubArrayEnd = i + 1;\n      }\n    }\n  }\n\n  return minSubArray;\n};\n\n//TODO: test\nconst main = () => {\n  let test = [2, 3, 5, 7, 9, 11, 13, 17];\n  console.log(minSubArrayLen(test));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": false, "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\nconsole.log(add(1, 2));\nconsole.log(add(4, 9));\nconsole.log(add(10, 20));\nconsole.log(add(40, 80));\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Check if two words have the same cha racte rs.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const [len0, len1] = [s0.length, s1.length];\n    if (len0!== len1) return false;\n    for (let i = 0; i < len0; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": false, "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1\n  let b = 1\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 1\n  }\n  for (let i = 2; i < n; i++) {\n    a = b\n    b = a + b\n  }\n  return b\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  let f = 0\n  for (let i = 1; i < n; i++) {\n    f = f + (i * (i + 1))\n  }\n  return f\n}\n\nconst fib = (n) => {\n  let f = 1\n  let a = 1\n  let b = 2\n  let i = 1\n  while (i < n) {\n    f = a + b\n    a = b\n    b = f\n    i++\n  }\n  return f\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  let f = 0\n  let a = 0\n  let b = 1\n  let i = 0\n  while (i < n) {\n    f = a + b\n    a = b\n    b = f\n    i++\n  }\n  return f\n}\n\nconst fib = (n) => {\n  let f = 1\n  let a = 1\n  let b = 2\n  let i = 1\n  while (i < n) {\n    f = a + b\n    a = b\n    b = f\n    i++\n  }\n  return f\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  let f = 0\n  let i = 0\n  while (i < n) {\n    f = fib(i) + fib(i + 1)\n    i++\n  }\n  return f\n}\n\nconst fib = (n) => {\n  let f = 1\n  let i = 0\n  while (i < n) {\n    f = fib(i) + fib(i + 1)\n    i++\n  }\n  return f\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  let f = 0\n  let i = 0\n  let n = n - 1\n  while (i < n) {\n    f = fib(i) + fib(i + 1)\n    i++\n  }\n  return f\n}\n\nconst fib = (n) => {\n  let f = 1\n  let i = 0\n  let n = n - 1\n  while (i < n) {\n    f = fib(i) + fib(i + 1)\n    i++\n  }\n  return f\n}\n\n/*\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\n\nconst fib = (n) => {\n  let f = 0\n  let i = 0\n  let j = 1\n  while (i < n) {\n    f = fib(i) + fib(j)\n    i++\n    j++\n  }\n  return f\n}\n\nconst fib = (n) => {\n  let f = 1\n  let i = 0\n  let j = 1\n  while (i < n) {\n    f = fib(i) + fib(j)\n    i++\n    j++\n  }\n  return f\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\". \n  re turn false if every opening bracket has a corresponding closing bracket. \n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let openingBracket = 1;\n    let opening = 0;\n    let closingBracket = 0;\n    let closing = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] == '<') {\n            if (opening == 0) {\n                opening = openingBracket;\n            } else {\n                openingBracket--;\n            }\n        } else if (brackets[i] == '>') {\n            if (closing == 0) {\n                closing = openingBracket;\n            } else {\n                openingBracket++;\n            }\n        }\n    }\n    return opening == closing;\n}\n\n/*\n  Given a string, return the number of times that the opening \n  bracket appears in the string and the number of times the \n  closing bracket appears in the string.\n*/\nconst findBrackets = (string) => {\n    let opening = 0;\n    let closing = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] == '<') {\n            opening++;\n        } else if (string[i] == '>') {\n            closing++;\n        }\n    }\n    return [opening, closing];\n}\n\n/*\n  Given two strings, return true if they are both bracketed\n  by the same number of brackets.\n*/\nconst isBracketed = (string1, string2) => {\n    let brackets1 = findBrackets(string1);\n    let brackets2 = findBrackets(string2);\n    return brackets1[0] == brackets2[0] && brackets1[1] == brackets2[1];\n}\n\nconst isBracketed = (string1, string2) => {\n    let brackets1 = findBrackets(string1);\n    let brackets2 = findBrackets(string2);\n    return brackets1[0] == brackets2[0] && brackets1[1] == brackets2[1];\n}\n\n// These are not actually correct.\n// TODO: fix the tests\n\n/*\n  Given a string, return the number of times that the opening \n  bracket appears in the string and the number of times the \n  closing bracket appears in the string.\n*/\nconst findBrackets = (string) => {\n    let opening = 0;\n    let closing = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] == '<') {\n            opening++;\n        } else if (string[i] == '>') {\n            closing++;\n        }\n    }\n    return [opening, closing];\n}\n\nconst isBracketed = (string1, string2) => {\n    let brackets1 = findBrackets(string1);\n    let brackets2 = findBrackets(string2);\n    return brackets1[0] == brackets2[0] && brackets1[1] == brackets2[1];\n}\n\nconst isBracketed = (string1, string2) => {\n    let brackets1 = findBrackets(string1);\n    let brackets2 = findBrackets(string2);\n    return brackets1[0] == brackets2[0] && brackets1[1] == brackets2[1];\n}\n\nconsole.log('test');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('<>');\nconsole.log('<>');\nconsole.log('a<b>c');\nconsole.log('a<b>c');\nconsole.log('a"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Return true is list elements are mono tonic ally increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const length = l.length\n  let min = Infinity, max = -Infinity, i = 0\n\n  while (i < length) {\n    if (l[i] < min) {\n      min = l[i]\n    }\n\n    if (l[i] > max) {\n      max = l[i]\n    }\n\n    i++\n  }\n\n  return min <= max\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Return sorted unique common elementsfor t wo lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  return l1.filter(el => l2.indexOf(el) > -1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Return the largest prime factor of n.  Assu me n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  // The function is called from the test harness, but in the real world it\n  // can be called directly.\n  const primeFactorization = getPrimeFactorization(n);\n  const max = Math.max(...primeFactorization);\n  return max;\n};\n\n// Export the function.\nexport default largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumToN is a function that sums number s fro m 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    const sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n\n// Your code here...\nconst sumToN = (n) => {\n    const sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\". \n  re turn true if every opening brackethas a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n    let index = 0\n    while (index < brackets.length) {\n        if (brackets[index] === \")\") {\n            if (brackets[index + 1]!== \"(\") return false\n            index += 2\n        } else if (brackets[index] === \"(\" && brackets[index + 1]!== \")\") return false\n        else index++\n    }\n    return true\n}\n\nmodule.exports = correctBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polyn omial .\n  xs[0] +xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs represent coefficients of a polyn omial.\n  xs[0] +xs[1] * x + xs[2] * x^2 +....\n   Return derivative of thispolyn omial i n  the sa me form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2));\n}\n\nconst derivativeBy1 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(1));\n}\n\nconst derivativeBy2 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(2));\n}\n\nconst derivativeBy3 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(3));\n}\n\nconst derivativeBy4 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(4));\n}\n\nconst derivativeBy5 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(5));\n}\n\nconst derivativeBy6 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(6));\n}\n\nconst derivativeBy7 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(7));\n}\n\nconst derivativeBy8 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(8));\n}\n\nconst derivativeBy9 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(9));\n}\n\nconst derivativeBy10 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(10));\n}\n\nconst derivativeBy11 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(11));\n}\n\nconst derivativeBy12 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(12));\n}\n\nconst derivativeBy13 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(13));\n}\n\nconst derivativeBy14 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(14));\n}\n\nconst derivativeBy15 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(15));\n}\n\nconst derivativeBy16 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(16));\n}\n\nconst derivativeBy17 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(17));\n}\n\nconst derivativeBy18 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(18));\n}\n\nconst derivativeBy19 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(19));\n}\n\nconst derivativeBy20 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(20));\n}\n\nconst derivativeBy21 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(21));\n}\n\nconst derivativeBy22 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(22));\n}\n\nconst derivativeBy23 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(23));\n}\n\nconst derivativeBy24 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(24));\n}\n\nconst derivativeBy25 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(25));\n}\n\nconst derivativeBy26 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(26));\n}\n\nconst derivativeBy27 = (xs) => {\n  return [...xs[xs.length - 1].slice(1)].concat(...xs[xs.length - 2].slice(2).slice(27));\n}\n\nconst derivativeBy28 = (xs) => {\n"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The FibFib number sequence is a seque nce s imilar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0)  == 0 \n  fibf i b(1) ==  0\n  fibf ib(2) == 1  fibfib(n) == fi bfi b(n-1) + fibfi b(n-2) + fibf ib(n-3).\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\nconst fib = (n) => {\n    return fibfib(n);\n}\n\nconst fib2 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib2(n-1) + fib2(n-2);\n}\n\n// \n/*\n  The Fibonacci number is a seque nce s imilar to the Fibonacci sequnece that's defined as follows:\n  fib(0)  == 0 \n  fib(i)  == fib(i-1) + fib(i-2)\n  Pleasewrite afunction toefficiently comput e the n-thelement  of the f ibfib number sequence.\n  >>> fib(1)\n  0\n  >>> fib(5)\n  4\n  >>> fib(8)\n  24\n  */\nconst fib = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib(n-1) + fib(n-2);\n}\n\nconst fib2 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib2(n-1) + fib2(n-2);\n}\n\nconst fib3 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib3(n-1) + fib3(n-2);\n}\n\nconst fib4 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib4(n-1) + fib4(n-2);\n}\n\nconst fib5 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib5(n-1) + fib5(n-2);\n}\n\nconst fib6 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib6(n-1) + fib6(n-2);\n}\n\nconst fib7 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib7(n-1) + fib7(n-2);\n}\n\nconst fib8 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib8(n-1) + fib8(n-2);\n}\n\nconst fib9 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib9(n-1) + fib9(n-2);\n}\n\nconst fib10 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib10(n-1) + fib10(n-2);\n}\n\nconst fib11 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib11(n-1) + fib11(n-2);\n}\n\nconst fib12 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib12(n-1) + fib12(n-2);\n}\n\nconst fib13 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib13(n-1) + fib13(n-2);\n}\n\nconst fib14 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib14(n-1) + fib14(n-2);\n}\n\nconst fib15 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib15(n-1) + fib15(n-2);\n}\n\nconst fib16 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib16(n-1) + fib16(n-2);\n}\n\nconst fib17 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib17(n-1) + fib17(n-2);\n}\n\nconst fib18 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib18(n-1) + fib18(n-2);\n}\n\nconst fib19 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib19(n-1) + fib19(n-2);\n}\n\nconst fib20 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib20(n-1) + fib20(n-2);\n}\n\nconst fib21 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib21(n-1) + fib21(n-2);\n}\n\nconst fib22 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib22(n-1) + fib22(n-2);\n}\n\nconst fib23 = (n) => {\n    if (n <= 2) {\n        return n;\n    }\n    return fib23(n-1) + fib23(n-2);\n}\n\nconst fib24 ="}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g .\n  Vow els in th is case are 'a', 'e', 'i', ' o',  'u'. Here, 'y ' is also a\n vowel, but only when it i s at the end of the giv e n word .\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Write a function vowelsCount which ta kes a  string representing\n  a word as input and returns the number of vowelsin th e strin g.\n  Vow els in th is case are 'a', 'e', 'i','o',  'u'. Here, 'y'is also a\n vowel, but only when it i s at the end of the giv e n word.\n\n  Exampl e:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' ||\n        s[i] === 'u') {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\nconsole.log(vowelsCount(\"abcde\"))\nconsole.log(vowelsCount(\"ACEDY\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the inte ger x , shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circular shift the digits of the inte ger x, shift thedigits right by shift\n and return the result as a string.\n If s hift >n umber o f digits,  return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  let digits = []\n  for (let i = 0; i < x.length; i++) {\n    digits.push(x.charCodeAt(i))\n  }\n  let len = x.length\n  let r = digits.slice(len - shift)\n  for (let i = 0; i < shift; i++) {\n    r.unshift(digits.pop())\n  }\n  return r.join('')\n}\n\nconsole.log(circularShift(12, 1))\nconsole.log(circularShift(12, 2))\nconsole.log(circularShift(12, 3))\nconsole.log(circularShift(12, 4))\nconsole.log(circularShift(12, 5))\nconsole.log(circularShift(12, 6))\nconsole.log(circularShift(12, 7))\nconsole.log(circularShift(12, 8))\nconsole.log(circularShift(12, 9))\nconsole.log(circularShift(12, 10))\nconsole.log(circularShift(12, 11))\nconsole.log(circularShift(12, 12))\nconsole.log(circularShift(12, 13))\nconsole.log(circularShift(12, 14))\nconsole.log(circularShift(12, 15))\nconsole.log(circularShift(12, 16))\nconsole.log(circularShift(12, 17))\nconsole.log(circularShift(12, 18))\nconsole.log(circularShift(12, 19))\nconsole.log(circularShift(12, 20))\nconsole.log(circularShift(12, 21))\nconsole.log(circularShift(12, 22))\nconsole.log(circularShift(12, 23))\nconsole.log(circularShift(12, 24))\nconsole.log(circularShift(12, 25))\nconsole.log(circularShift(12, 26))\nconsole.log(circularShift(12, 27))\nconsole.log(circularShift(12, 28))\nconsole.log(circularShift(12, 29))\nconsole.log(circularShift(12, 30))\nconsole.log(circularShift(12, 31))\nconsole.log(circularShift(12, 32))\nconsole.log(circularShift(12, 33))\nconsole.log(circularShift(12, 34))\nconsole.log(circularShift(12, 35))\nconsole.log(circularShift(12, 36))\nconsole.log(circularShift(12, 37))\nconsole.log(circularShift(12, 38))\nconsole.log(circularShift(12, 39))\nconsole.log(circularShift(12, 40))\nconsole.log(circularShift(12, 41))\nconsole.log(circularShift(12, 42))\nconsole.log(circularShift(12, 43))\nconsole.log(circularShift(12, 44))\nconsole.log(circularShift(12, 45))\nconsole.log(circularShift(12, 46))\nconsole.log(circularShift(12, 47))\nconsole.log(circularShift(12, 48))\nconsole.log(circularShift(12, 49))\nconsole.log(circularShift(12, 50))\nconsole.log(circularShift(12, 51))\nconsole.log(circularShift(12, 52))\nconsole.log(circularShift(12, 53))\nconsole.log(circularShift(12, 54))\nconsole.log(circularShift(12, 55))\nconsole.log(circularShift(12, 56))\nconsole.log(circularShift(12, 57))\nconsole.log(circularShift(12, 58))\nconsole.log(circularShift(12, 59))\nconsole.log(circularShift(12, 60))\nconsole.log(circularShift(12, 61))\nconsole.log(circularShift(12, 62))\nconsole.log(circularShift(12, 63))\nconsole.log(circularShift(12, 64))\nconsole.log(circularShift(12, 65))\nconsole.log(circularShift(12, 66))\nconsole.log(circularShift(12, 67))\nconsole.log(circularShift(12, 68))\nconsole.log(circularShift(12, 69))\nconsole.log(circularShift(12, 70))\nconsole.log(circularShift(12, 71))\nconsole.log(circularShift(12, 72))\nconsole.log(circularShift(12, 73))\nconsole.log(circularShift(12, 74))\nconsole.log(circularShift(12, 75))\nconsole.log(circularShift(12, 76))\nconsole.log(circularShift(12, 77))\nconsole.log(circularShift(12, 78))\nconsole.log(circularShift(12, 79))\nconsole.log(circularShift(12, 80))\nconsole.log(circularShift(12, 81))\nconsole.log(circularShift(12, 82))\nconsole.log(circularShift(12, 83))\nconsole.log(circularShift(12, 84))\nconsole.log(circularShift(12, 85))\nconsole.log(circularShift(12, 86))\nconsole.log(circularShift(12, 87))\nconsole.log(circularShift(12, 88))\nconsole.log(circularShift(12, 89))\nconsole.log(circularShift(12, 90))\nconsole.log(circularShift(12, 91))\nconsole.log(circularShift(12, 92))\nconsole.log(circularShift(12, 93))\nconsole.log(circularShift(12, 94))\nconsole.log(circularShift(12, 95))\nconsole.log(circularShift(12, 96))\nconsole.log(circularShift(12, 97))\nconsole.log(circularShift(12, 98))\nconsole.log(circularShift(12, 99))\nconsole.log(circularShift(12, 100))\nconsole.log(circularShift(12, 101))\nconsole.log(circularShift(12, 102))\nconsole.log(circularShift(12, 103"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes astrin g as input and returns the sum of the upper characters only'\n  ASCII cod es.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let cnt = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      cnt += s[i] - 'A' + 1;\n    }\n  }\n  return cnt;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges , a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In this task, you will be given a st ringthat represents a number of applesand oranges\n  that are distributed in  a ba sket of fruit t his baske t contains  apples, oranges, a nd mango fruit s. Given thestring that represents the  total number of\n  theo ranges  and apples  and an  integerthat represent the totalnum ber of the fruits\n  inthe basket return the numbe r of thema ng o  fruits in the basket.\n  for  examble:  frui tDistributi on( \"5 apples and 6 oranges\", 19) ->19  - 5 - 6 = 8\n  fruitDist rib ution(\" 0apples and  1  oranges\",3) -> 3 - 0 - 1 =2fruitDistribution(\"2 apples and 3 ora nge s\", 100) -> 100- 2 - 3 = 9 5\n  fruitDistribution(\"100 apples and1ora nges\",1 2 0) -> 120 - 100 - 1 = 19\n  */const fruitDistribution = ( s,  n) => {\n    let s = s.split(\" \");\n    let x = parseInt(s[0]);\n    let y = parseInt(s[1]);\n    let z = parseInt(s[2]);\n    let result = x + y + z;\n    return result;\n  }\n  \n  \n  const fruitDistribution = (s, n) => {\n    let total = 0;\n    for (let i = 0; i < s.length; i++) {\n      let x = parseInt(s[i]);\n      let y = parseInt(s[i + 1]);\n      let z = parseInt(s[i + 2]);\n      total += (x + y + z);\n    }\n    return total;\n  }\n  \n  fruitDistribution(\"100 apples and1ora nges\",1 2 0)\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index .\n\n  The plucked node s hould be returned in a list , [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Given an array representing a branc h ofa tree thathas non-negative integer nodes\n  your task is to pluck one o f the  nodesa nd retu rn it.\n The plucked node should be t henode with thesmallest even  value.\n  If multiple node s with the same smalles t  evenvalue are f ound re turn thenode that has smallest index.\n\n  The plucked node s hould be returned in a list, [ smalest _v a lue, its index ],\n  If there  are no even val ues or thegiv en array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let sortedArr = arr.slice().sort();\n  let min = sortedArr[0];\n  let index = sortedArr.findIndex(v => v === min);\n  if (index === -1) return [];\n  return [min, index];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of po sitiv e integers.Return the greatest integer that is greater than\n  zero, and  hasa frequ e ncy gre ater than  or equal to the value of th e i nteger itself. \n  The freque ncy of an integeris the n umber of times it appea r s in t he list.\n If no s uch a val ueexist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const [first, last] = [0, lst.length - 1];\n  const [prev, curr] = [first, first];\n  let found = false;\n\n  while (curr < last) {\n    if (lst[curr] < lst[prev]) {\n      found = true;\n      break;\n    }\n    if (lst[curr] === lst[prev]) {\n      prev = curr;\n      curr = ++curr % last;\n    }\n    else {\n      curr = ++curr % last;\n    }\n  }\n\n  if (!found) {\n    return -1;\n  }\n\n  return lst[curr] >= 0? lst[curr] : -1;\n};\n\nconst lst = [1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, 7, 8, 8, 8];\n\nconst lst2 = [4, 1, 2, 2, 3, 1];\n\nconsole.log(search(lst));\nconsole.log(search(lst2));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value ,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Given list of integers, return listin st range order.\n  Strange sorting, iswhen you start with the minimum value,\n  t hen max i mum ofthe remai ning integers, then minimumand  so on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const sorted = lst.slice().sort((a, b) => {\n    if (a < b) {\n      return 1;\n    } else if (a > b) {\n      return -1;\n    } else {\n      return 0;\n    }\n  });\n\n  return sorted;\n};\n\nexport default strangeSortList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Given the lengths of the three sides  of a  triangle. Return the area of\n  the triangle rounded to 2 decimal points  if t he thre e  sidesform a va lid triangle.\n  Otherwise re tur n -1\n  Three s ides make a v alid triangle when the sum  of any twosides is gr e ater\n than the t hird si de.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2).toFixed(2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n    } else {\n        return -1;\n    }\n}\n\nconst triangleArea = (a, b, c) => {\n    if (a === c) return 0;\n    if (a === b) return 0;\n    if (b === c) return 0;\n\n    const s1 = a + b;\n    const s2 = b + c;\n    const s3 = c + a;\n\n    if ((s1 + s2) === (s3 + s1) && (s2 + s3) === (s1 + s2)) {\n        return ((s1 * s2) / 2);\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that returns true i f the  object q will fly, and false otherwise.\n  The object q will fly if it's  bala nced (i t  is a p alindromi c list) and the sum of its e lem ents is less t han or equalthe maximum possible weigh t w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  if (q.length!== w.length) {\n    return false;\n  }\n\n  const [a, b] = q.slice(0, w.length / 2).concat(q.slice(w.length / 2, w.length));\n\n  return (a.reduce((sum, n) => sum + n, 0) === w) && (b.reduce((sum, n) => sum + n, 0) === w);\n};\n\nmodule.exports = willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element .\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers, find  theminimum number of elements that\n  need to be changed to make the array p alind romic.A  palind romic arr ay is an array that\n  is rea d t he same backwa rds and forwa rds. In one change, you ca n change one element to any ot her element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n    let min = arr[0];\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    let count = 0;\n    let index = 0;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] === min) {\n            count++;\n        }\n        if (arr[i] === max) {\n            count++;\n        }\n    }\n    if (count === 2) {\n        return 0;\n    }\n    return (arr.length - count);\n};\n\nconst arr = [1, 2, 3, 4, 3, 2, 2];\nconsole.log(smallestChange(arr));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that accepts two li sts o f strings and returns the list that has\n  total number of chars in the a ll st rings o f  the li st less t han the other list.\n\n  if th e t wo lists havethe same numb er of chars, return the fi rst list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = []\n  lst1.forEach(s => result.push(s))\n  lst2.forEach(s => result.push(s))\n  result = result.filter(l => l.length === lst1.length)\n  return result[0]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Write a function that returns true if  thegiven number is the multiplicationof 3 prime numbers\n  and false otherw ise.  Knowi n g that(a) is le ss then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\n// const isMultiplyPrime = (a) => {\n//   let i, k;\n//   let p = 3;\n//   let x = p;\n//   for (i = 2; i < a; i++) {\n//     for (k = 2; k < x; k++) {\n//       if (a % k === 0) {\n//         return false;\n//       }\n//     }\n//     x += 2;\n//   }\n//   return true;\n// };\n\n// const isMultiplyPrime = (a) => {\n//   let i, k;\n//   let p = 3;\n//   let x = p;\n//   for (i = 2; i < a; i++) {\n//     for (k = 2; k < x; k++) {\n//       if (a % k === 0) {\n//         return false;\n//       }\n//     }\n//     x += 2;\n//   }\n//   return true;\n// };\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return true;\n};\n\nconst isMultiplyPrime = (a) => {\n  let i, k;\n  let p = 3;\n  let x = p;\n  for (i = 2; i < a; i++) {\n    for (k = 2; k < x; k++) {\n      if (a % k === 0) {\n        return false;\n      }\n    }\n    x += 2;\n  }\n  return"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases .\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that  retu rns true ifa number x is a simple  power of n and false in other cases.\n  x  is a s i mple po wer of nif n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  const x_int = parseInt(x)\n  const n_int = parseInt(n)\n  return (x_int === Math.pow(n_int, x_int))\n}\n\n// const isSimplePower = (x, n) => {\n//   const x_int = parseInt(x)\n//   const n_int = parseInt(n)\n//   return (x_int === Math.pow(n_int, x_int))\n// }\n\nconsole.log(isSimplePower(1, 4))\nconsole.log(isSimplePower(2, 2))\nconsole.log(isSimplePower(8, 2))\nconsole.log(isSimplePower(3, 2))\nconsole.log(isSimplePower(3, 1))\nconsole.log(isSimplePower(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes an integ er aand returnstrue\n  if this ingegeris a cube of some integer number.\n  N ote:you may assumethe input  is alwaysvalid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let n = a;\n  let b = 1;\n  let i = 0;\n  while (i <= n) {\n    if (b * b === n) {\n      return true;\n    } else {\n      b = b + 1;\n    }\n    i = i + 1;\n  }\n  return false;\n};\n\nconsole.log(iscube(64));\nconsole.log(iscube(180));\nconsole.log(iscube(1));\nconsole.log(iscube(128));\nconsole.log(iscube(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F .\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You have been tasked to write a funct ion t hat receives\n  a hexadecimal number as a string and counts the number of  hexa decimal   digit s that ar e primes (prime number=== or  aprime=== is anatural numbe r\n  greater than 1 that is  not a product of two s m allernatural num bers).  Hexadec imal digits are 0=== 1=== 2= == 3=== 4=== 5=== 6===7=== 8=== 9=== A=== B=== C= == D===E== =F.\n  Prime numbers are 2=== 3 ===5=== 7=== 11 === 13=== 1 7== =...\n  So you have to determine anumber of the followingdig its:2= ==  3=== 5===  7 ===\n  B (=decimal 11)=== D ( =d ecimal 13).\n Note: you may assume theinp ut is always cor rect or emp ty string===\n  and symbols A===B===C===D === E===F a r e always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let result = 0;\n  for (let i = 0; i < num.length; i += 1) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      result += 1;\n    }\n  }\n  return result;\n}\n\nconst primeNumbers = (num) => {\n  let result = 0;\n  for (let i = 2; i < num; i += 1) {\n    if (num % i === 0) {\n      result += 1;\n    }\n  }\n  return result;\n}\n\nconst primeDigits = (num) => {\n  let result = 0;\n  let n = num.toString();\n  for (let i = 0; i < n.length; i += 1) {\n    if (n[i] === '0') {\n      result += 1;\n    }\n  }\n  return result;\n}\n\nconst getNum = () => {\n  let n = \"\";\n  return n;\n}\n\nconst primeNumber = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let n = \"\";\n  return n;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main = () => {\n  let num = \"\";\n  return num;\n}\n\nconst main ="}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You will be given a number in decimal  form  and your task is to convert it to  binary format. The function shouldretur n a str i ng, wit h each ch aracter representing a binar y\n number. Eachcharacter inthe string will be '0' or'1'.\n\n  There will be a n  extra  couple ofcharact ers 'db'atthebeginning and attheend of the string.\n  Th e extra characters are ther e to help w it h  the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n    let bin = \"\";\n    for (let i = 0; i < decimal; i++) {\n        bin += \"0\";\n    }\n    return \"db\" + bin + \"db\";\n};\n\n/*  Given a binary number as a str  (i.e. \"0101\"),  it is converted to decimal  number.\n\n  Example:\n  binaryToDecimal(\"0101\")   # returns 5\n  */\nconst binaryToDecimal = (binary) => {\n    let decimal = 0;\n    for (let i = 0; i < binary.length - 1; i++) {\n        decimal += parseInt(binary[i]);\n    }\n    return decimal;\n};\n\n/*Given a number, find if it is a palindrome.\n\n  Example:\n  isPalindrome(32)   # returns false\n  isPalindrome(12)   # returns true\n  isPalindrome(100)  # returns false\n  isPalindrome(200)  # returns true\n  isPalindrome(11)   # returns false\n  isPalindrome(1111) # returns true\n  isPalindrome(111)  # returns false\n  */\nconst isPalindrome = (number) => {\n    return number === binaryToDecimal(decimalToBinary(number));\n};\n\n/*Given two binary numbers, find if they are anagrams.\n\n  Example:\n  areAnagrams(\"0101\", \"1001\")   # returns true\n  areAnagrams(\"0101\", \"0110\")   # returns false\n  areAnagrams(\"0101\", \"0101\")   # returns true\n  */\nconst areAnagrams = (a, b) => {\n    let aArr = decimalToBinary(a);\n    let bArr = decimalToBinary(b);\n    return aArr === bArr;\n};\n\nconst main = () => {\n    let n = parseInt(process.argv[2]);\n    let res = \"\";\n    for (let i = 1; i <= n; i++) {\n        if (isPalindrome(i)) {\n            res += \"Palindrome #\" + i + \"\\n\";\n        }\n        if (areAnagrams(i, decimalToBinary(i))) {\n            res += \"Anagram #\" + i + \"\\n\";\n        }\n    }\n    console.log(res);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  Your task  is t o check if the string is happy or not.\n  A string is happy if its length  is a t least 3 and e very 3 co nsecutive letters are distin ct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n    let result = false;\n    if(s.length <= 3) {\n        result = true;\n    } else {\n        let count = 0;\n        let sum = 0;\n        for(let i = 0; i < s.length; i++) {\n            let cur = s[i];\n            sum += cur;\n            if(sum < 0) {\n                sum = sum + 10;\n            }\n            count += 1;\n        }\n        result = count === 3;\n    }\n    return result;\n}\n\nconsole.log(isHappy(\"a\"));\nconsole.log(isHappy(\"aa\"));\nconsole.log(isHappy(\"abcd\"));\nconsole.log(isHappy(\"aabb\"));\nconsole.log(isHappy(\"adb\"));\nconsole.log(isHappy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0 .7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It is the last week of the semester a nd th e teacher has to give the grades\n to students. The teacher has been mak ing h er owna lgorith m for gra ding.\n  The only problem is,  sh e has lost the  code she use d for grading.\n  She has g iven you a list of GPAs for so me students  and yo u have to  write  a function thatcan  output a list of lette r grades using the followin g table:        GPA       |    Lettergrade\n         4.0              A+\n          > 3.7              A\n          >3.3           A-\n        > 3.0                B+ \n      > 2.7                B\n        > 2.3               B-\n         > 2.0                C+\n       >1.7              C\n          > 1.3             C-\n         >1.0              D+\n        > 0.7            D\n          > 0.0                D-\n           0.0               E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const numGrades = grades.length;\n  const gradeWidth = 4.0 / numGrades;\n  const gradeLength = (gradeWidth - (gradeWidth % 0.1)) / 0.1;\n  const gradesArray = [];\n\n  for (let i = 0; i < numGrades; i++) {\n    gradesArray.push(`${(grades[i] * gradeWidth).toFixed(1)}${(grades[i] * gradeLength).toFixed(1)}`);\n  }\n\n  return gradesArray;\n};\n\nmodule.exports = numericalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes a stringand r eturns trueif the string\n  lengthis a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let n = string.length;\n  let i = 2;\n  while (i < n) {\n    if (string.charAt(i)!== string.charAt(i - 1)) {\n      break;\n    }\n    i++;\n  }\n  if (i === n) {\n    return true;\n  }\n  return false;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return t he co unt of the numbers of n-digit\n  positive integers that start or end with  1.\n */\ncon s t start sOneEnds= (n) => {\n\treturn 1\n}\n\ncon t ends(n) => {\n\treturn 0\n}\n\ncon t has(n, k) => {\n\treturn n.ends(k)\n}\n\ncon t contains(n, k) => {\n\treturn n.has(k)\n}\n\ncon t starts(n) => {\n\treturn n.contains(1)\n}\n\ncon t startsWith(n, k) => {\n\treturn n.starts(k)\n}\n\ncon t endsWith(n, k) => {\n\treturn n.endsWith(k)\n}\n\ncon t hasDigit(n, d) => {\n\treturn n.hasDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isInt(n) => {\n\treturn n.isInt()\n}\n\ncon t isInt(n, b) => {\n\treturn n.isInt(b)\n}\n\ncon t hasDigit(n, d) => {\n\treturn n.hasDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t hasDigit(n, d) => {\n\treturn n.hasDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t hasDigit(n, d) => {\n\treturn n.hasDigit(d)\n}\n\ncon t hasDigit(n, d) => {\n\treturn n.hasDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t hasDigit(n, d) => {\n\treturn n.hasDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon t isDigit(n, d) => {\n\treturn n.isDigit(d)\n}\n\ncon"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer N, return th e tot al sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let result = '0';\n  let sum = 0;\n  for (let i = 0; i <= N; i++) {\n    sum += Math.pow(2, N - i) - 1;\n    result = `${sum}${result}`;\n  }\n  return result;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers ls t. ad d the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.filter(x => x % 2 === 1).reduce((prev, current) => prev + current);\n};\n\nconsole.log(add([4, 2, 6, 7]));\n\n/* Given a sorted array where the range of elements are in the form [l, r]\n\ne.g. [3, 7, 9, 11]\n\nreturn true if it can be partitioned into two subsets [3, 9] and [7, 11]\n\ne.g. [3, 7, 9, 11]\n\nreturn false if not */\nconst partition = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n\n  while (left <= right) {\n    if (arr[left] === arr[right]) {\n      ++left;\n      --right;\n    } else if (arr[left] < arr[right]) {\n      ++left;\n    } else {\n      --right;\n    }\n  }\n\n  return [arr.slice(0, left), arr.slice(left, right + 1)];\n};\n\nconsole.log(partition([3, 7, 9, 11]));\n\n/* Given a string s return the count of the number of times that the string contains a given character */\nconst countCharacters = (s, c) => {\n  return s.split('').filter(x => x === c).length;\n};\n\nconsole.log(countCharacters('Hello', 'e'));\n\n/* Given a string, s, return the number of times that the first character of the string is equal to the last character of the string */\nconst firstLast = (s) => {\n  return countCharacters(s, s[0]) === countCharacters(s, s[s.length - 1]);\n};\n\nconsole.log(firstLast('Hello'));\n\n/* Given a string, s, return the number of times that the first character of the string is equal to the last character of the string\n\nNote: The first and last characters are not necessarily the same */\nconst firstLastTwo = (s) => {\n  return countCharacters(s, s[0]) + countCharacters(s, s[s.length - 1]);\n};\n\nconsole.log(firstLastTwo('Hello'));\n\n/* Given a string, s, return the number of times that the first two characters of the string are equal */\nconst firstLastTwoTwo = (s) => {\n  return countCharacters(s, s[0]) + countCharacters(s, s[1]) + countCharacters(s, s[s.length - 2]) + countCharacters(s, s[s.length - 1]);\n};\n\nconsole.log(firstLastTwoTwo('Hello'));\n\n/* Given a string, s, return the number of times that the first two characters of the string are equal,\n\nbut the first character is not equal to the last character of the string */\nconst firstLastTwoTwoOne = (s) => {\n  return countCharacters(s, s[0]) + countCharacters(s, s[1]) + countCharacters(s, s[s.length - 2]) + countCharacters(s, s[s.length - 1]) + countCharacters(s, s[2]);\n};\n\nconsole.log(firstLastTwoTwoOne('Hello'));\n\n/* Given a string, s, return the number of times that the first two characters of the string are equal,\n\nbut the first character is not equal to the last character of the string\n\nand the first two characters are not equal */\nconst firstLastTwoTwoOneTwo = (s) => {\n  return countCharacters(s, s[0]) + countCharacters(s, s[1]) + countCharacters(s, s[2]) + countCharacters(s, s[s.length - 2]) + countCharacters(s, s[s.length - 1]) + countCharacters(s, s[3]);\n};\n\nconsole.log(firstLastTwoTwoOneTwo('Hello'));\n\n/* Given a string, s, return the number of times that the first two characters of the string are equal,\n\nbut the first character is not equal to the last character of the string\n\nand the first two characters are not equal\n\nand the first three characters are not equal */\nconst firstLastTwoTwoOneTwoThree = (s) => {\n  return countCharacters(s, s[0]) + countCharacters(s, s[1]) + countCharacters(s, s[2]) + countCharacters(s, s[3]) + countCharacters(s, s[s.length - 2]) + countCharacters(s, s[s.length - 1]) + countCharacters(s, s[4]);\n};\n\nconsole.log(firstLastTwoTwoOneTwoThree('Hello'));\n\n/* Given a string, s, return the number of times that the first two characters of the string are equal,\n\nbut the first character is not equal to the last character of the string\n\nand the first two characters are not equal\n\nand the first three characters are not equal\n\nand the first four characters are not equal */\nconst firstLastTwoTwoOneTwoThreeFour = (s) => {\n  return countCharacters(s, s[0]) + countCharacters(s, s[1]) + countCharacters(s, s[2]) + countCharacters(s, s[3]) + countCharacters(s, s[4]) + countCharacters(s, s[5]) + countCharacters(s, s[s.length - 2]) + countCharacters(s, s[s.length - 1]) + countCharacters(s, s[6]);\n};\n\nconsole.log(firstLastTwoTwoOneTwoThreeFour('Hello'));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence .\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a string  andreturns an ordered version of it.\n Ordered version of string, is a stri ng wh ere all words ( separated  by space)  are replaced by  anew word where  all the char acters arranged in\n  ascen ding order based on asc i i valu e.\n  Note:You sho uld keepthe order of words and blank  spaces in the sentence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  const a = s.split(' ');\n  const b = [];\n  for (let i = 0; i < a.length; i++) {\n    const c = a[i].split('');\n    for (let j = 0; j < c.length; j++) {\n      b.push(c[j]);\n    }\n  }\n  return b.join(' ');\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples ,  [(x1,  y1), (x2,y2) ... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data,as anested lists,\n  which is similar to matrix, however, unlike matrices,\n eachrow may contain  a differ ent numberof columns.\n  Giv enlst, and integ er x, find in tegers x in the list,\n  an d return list of tuples,  [(x1,  y1), (x2,y2)... ] such th at  each tuple is a coordin ate - (row, columns), s tarting with 0.\n  Sort coor dinatesini ti a lly by rows in ascending ord er.  Also, sort  coordinate s o f the row by columns in descending  order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[x][i];\n    if (col!== undefined) row.push([x, i]);\n  }\n  return row.sort((a, b) => {\n    if (a[0] > b[0]) return 1;\n    if (a[0] < b[0]) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[i][x];\n    if (col!== undefined) row.push(col);\n  }\n  return row.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[x][i];\n    if (col!== undefined) row.push(col);\n  }\n  return row.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[i][x];\n    if (col!== undefined) row.push(col);\n  }\n  return row.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[x][i];\n    if (col!== undefined) row.push(col);\n  }\n  return row.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[i][x];\n    if (col!== undefined) row.push(col);\n  }\n  return row.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[x][i];\n    if (col!== undefined) row.push(col);\n  }\n  return row.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) => {\n  let d = lst.length;\n  if (d === 0) return [];\n  let n = lst[0].length;\n  if (x >= n) return [];\n  let row = [];\n  for (let i = 0; i < n; i++) {\n    let col = lst[i][x];\n    if (col!== undefined) row.push(col);\n  }\n  return row.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n}\n\nconst getRow = (lst, x) =>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of non-negative integ ers,return a copy of the given array after sorting,\n  you will sort the give n arr ay in a s cending  order if  the sum( first index value,  la st index value ) is odd,\n  o r sort it in descending or der if the sum( first i n dex va lue, last i ndex va lue) is e ven.\n\n Note:\n  * don'tchan ge the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  let newArray = array.slice();\n  let newArrayLength = newArray.length;\n  newArray.sort((a, b) => {\n    let indexA = newArray.indexOf(a);\n    let indexB = newArray.indexOf(b);\n    return indexA - indexB;\n  });\n  return newArray;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Create a function encrypt that takesa str ing as an argument and\n  returns astring encrypted withthe alphabet be ing r otated. \n  Thealphabetshould be rotated in a manne r s uch that the l etters \n  shi ft down by two multipliedtotwo places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\n/*\n  Given a str in, return the string with the alphabet rotated 2 places\n  For example:\n  encrypt('hi') returns 'kj'\n  encrypt('asdfghjkl') returns 'lm'\n  encrypt('gf') returns 'et'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a.length - 1 - i])\n  }\n  return b.join('')\n}\n\nconst encrypt = (s) => {\n  const a = s.split('')\n  const b = []\n  for(let i = 0; i < a.length; i++) {\n    b.push(a[a."}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1 , 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n Write  a functionnextSmallest() that returns the 2nd smallestelement of thelist. \n  Retu r n nullif thereis no suchelement.\n  \n  nex tSm allest([1, 2,3, 4, 5]) ==2\n  nextSmallest([5, 1, 4,  3, 2]) == 2\n  nextSmal l est([] ) == null\n nextSm allest([1, 1]) == null\n  */\nconstnex tSmallest = (lst) => {\n    var smallest = lst[0];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < smallest){\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconsole.log(nextSmallest([5, 1, 4,  3, 2]));\nconsole.log(nextSmallest([1, 2, 3,  4, 5]));\nconsole.log(nextSmallest([1, 1, 1]));\n\nconstnex tNextSmallest = (lst) => {\n    var smallest = lst[0];\n    for(let i = 1; i < lst.length; i++){\n        if(lst[i] < smallest){\n            smallest = lst[i];\n        }\n    }\n    return smallest;\n}\n\nconsole.log(tNextSmallest([5, 1, 4,  3, 2]));\nconsole.log(tNextSmallest([1, 2, 3,  4, 5]));\nconsole.log(tNextSmallest([1, 1, 1]));\n\n//var lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n//console.log(nextSmallest(lst));\n//console.log(nextSmallest([5, 1, 4,  3, 2]));\n//console.log(nextSmallest([1, 2, 3,  4, 5]));\n//console.log(nextSmallest([1, 1, 1]));\n\n/*\n\nvar lst = [5, 1, 4,  3, 2];\nvar nextSm = tNextSmallest(lst);\nconsole.log(nextSm);\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of boredoms. A boredom is a sentence th at st arts wi t h the w ord \"I\".  Sentences are delimited by  '. ', '?' or '!'. \n \n  For exam ple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '?' || S[i] === '!') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of borrwed words.  Boredom is defined as the w ord \"I\" in the sentence. \n \n  For example:\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of sentences. A sentence is delimited by '. ', '?'or '! '. \n \n  For example:\n  >>> isBored(\"Hello world\")\n  1\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of words that contains 'I' in it.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  1\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  >>> isBored(\"Hello world. What a world\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'I') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of words that contains 'b' in it.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  >>> isBored(\"Hello world. What a world\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'b') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of words that contains 'i' or 'e' in it.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  >>> isBored(\"Hello world. What a world\")\n  2\n  >>> isBored(\"Hello world. What a world\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'i' || S[i] === 'e') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of words that contains 'l' in it.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  3\n  >>> isBored(\"Hello world. What a world\")\n  2\n  >>> isBored(\"Hello world. What a world\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === 'l') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of words that contains's' in it.\n \n  For example:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  2\n  >>> isBored(\"Hello world. What a world\")\n  2\n  >>> isBored(\"Hello world. What a world\")\n  1\n  */\nconst isBored = (S) => {\n  let isBored = 0;\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] ==='s') {\n      isBored += 1;\n    }\n  }\n  return isBored;\n}\n\n/*\n  You'll be given a string of words, a nd yo ur task is to count the number\n  of words that contains 't' in it.\n \n  For example:\n  >>> isBored(\"Hello world"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two , and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes 3 numbe rs.\n Returns true if one of the numbers is equal to the sum of the other two, and  all nu m bers ar e integer s.\n  Returns false in any ot her  cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === z || y === z || x === y) return false;\n  if (!isInteger(x)) return false;\n  if (!isInteger(y)) return false;\n  if (!isInteger(z)) return false;\n  return x + y === z;\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters .  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function that takes a messag e, an d encodes in such a \n  way that itswaps case of all letters, replaces a ll vo wels in \n  themessage w ith the letter that appears2 p laces ahead of  that \n  vowe l in the english alphabet.  \n Assume only letters.  \n  \n Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const string = message.toUpperCase();\n  const encode = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === 'T' || string[i] === 'W' || string[i] === 'H' || string[i] === 'K' || string[i] === 'S' || string[i] === 'C' || string[i] === 'M' || string[i] === 'G' || string[i] === 'S' || string[i] === 'C' || string[i] === 'G'){\n      encode.push(string[i]);\n    }\n  }\n  return encode.join('');\n}\n\nconst decode = (message) => {\n  const string = message.toUpperCase();\n  const decode = [];\n  for(let i = 0; i < string.length; i++){\n    if(string[i] === 'T' || string[i] === 'W' || string[i] === 'H' || string[i] === 'K' || string[i] === 'S' || string[i] === 'C' || string[i] === 'M' || string[i] === 'G' || string[i] === 'S' || string[i] === 'C' || string[i] === 'G'){\n      decode.push(string[i]);\n    }\n  }\n  return decode.join('');\n}\n\nconst test = () => {\n  const string = encode('This is a message');\n  console.log(string);\n  console.log(decode(string));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You are given a list of integers.\n  Y ou ne ed to find the largest prime valueand return the sum ofits digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let i,\n        largest = 1,\n        sum = 0,\n        digit;\n\n    for (i = 0; i < lst.length; i++) {\n        digit = lst[i];\n        if (digit === largest) {\n            largest = largest + largest;\n        } else if (digit > largest) {\n            largest = largest * 10;\n            sum = sum + largest;\n        }\n    }\n    return sum;\n};\n\nconsole.log(skjkasdkd([0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3]));\nconsole.log(skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]));\nconsole.log(skjkasdkd([1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3]));\nconsole.log(skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]));\nconsole.log(skjkasdkd([0, 81, 12, 3, 1, 21]));\nconsole.log(skjkasdkd([0, 8, 1, 2, 1, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Given a dictionary, return true if a ll ke ys are strings in lower \n  case orall keys are strings in upper case, e lse r eturn f a lse.\n The funct ion shouldreturn false is t hegiven dictiona ry is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const isEmpty = Object.keys(dict).length === 0;\n  const keys = Object.keys(dict);\n  let isValid = true;\n  keys.forEach(function(key) {\n    const char = key.charAt(0);\n    const val = dict[key];\n    const value = val.toLowerCase();\n    if (isEmpty) {\n      isValid = isEmpty;\n    } else if (char === char.toUpperCase()) {\n      isValid = value === value.toLowerCase();\n    } else {\n      isValid = value === value.toUpperCase();\n    }\n  });\n  return isValid;\n};\n\nmodule.exports = checkDictCase;<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implement a function that takes an no n-neg ative integer and returns an arrayof the first n\n  integers that are pr ime n umbersa nd less  than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let i = 1;\n  let arr = [];\n\n  if(n === 0) {\n    return arr;\n  }\n\n  while(i <= n) {\n    arr.push(i);\n    i++;\n  }\n\n  return arr;\n};\n\nconsole.log(countUpTo(3));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Complete the function that takes twointeg ers and returns \n  the product of their unit digits.\n  Assume the inputis al ways va l id.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let n = a * b\n  let unit = n % 10\n  let d1 = n / 10\n  let d2 = n / 100\n  let d3 = n / 1000\n  return d1 + d2 + d3\n}\n\nconsole.log(multiply(14, -15))\n\n// function multiply(a, b) {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// var multiply = (a, b) => {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// function multiply(a, b) {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// var multiply = (a, b) => {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// function multiply(a, b) {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// var multiply = (a, b) => {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// function multiply(a, b) {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// var multiply = (a, b) => {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// function multiply(a, b) {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// var multiply = (a, b) => {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// function multiply(a, b) {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n\n// var multiply = (a, b) => {\n//   let n = a * b\n//   let unit = n % 10\n//   let d1 = n / 10\n//   let d2 = n / 100\n//   let d3 = n / 1000\n//   return d1 + d2 + d3\n// }\n// console.log(multiply(14, -15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string s, count the number o f upp ercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i+=1) {\n        if (s[i].toUpperCase() === s[i]) {\n            count += 1;\n        }\n    }\n    return count;\n};\n\nmodule.exports = countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Create a function that takes a value  (str ing) representing a number\n  and returns the closest integer to it. If t he nu mber is equidis tant\n  fr om two integers, round it aw ayfrom zero.\n  E xamples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    let parts = value.toString().split(\".\");\n    let wholePart = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    let decPart = parts[1];\n    let num = parseInt(decPart, 10);\n    let intPart = wholePart + \".\" + num;\n    return parseInt(intPart, 10);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, you have  to m ake a pile of n levels of stones.\n The first level has n stones.\n  Thenumbe r of st o nes inthe nextlevel is:\n     - the next o ddnumber if n is  odd.\n      -  the next even number if n  is even.\n Return then umberof stones i n eachlevel ina list, where element atind ex\n  i represents the n umber of stones in the leve l (i+1).\n E x amples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const arr = Array(n + 1)\n  for (let i = 1; i <= n; i++) {\n    arr[i] = (Math.floor(n / i) * (n / i)) + 1\n  }\n  return arr\n}\n\nconst test = () => {\n  console.log(makeAPile(3))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of wordssepar ated by commas or spaces. Your task is\n  to split the string into wordsand r eturn a n  arrayof the wo rds.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const r = [];\n  let p = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === \" \") {\n      r[p] = s.slice(p, i);\n      p = i;\n    }\n  }\n  r[p] = s.slice(p);\n  return r;\n};\n\n//Tests\nconsole.log(wordsString(\"One, two, three, four, five, six\"));<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numb ers x  and y and returns the\n  biggest even integer number that is in the rang e [x,  y] inc l usive.If \n  the re's no such number, then th e f unction should  return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let result = -1;\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result = i;\n    }\n  }\n  return result;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You are given two positive integers n  andm, and yourtask is to compute the  average of the integers from n thro ugh m  (inclu d ing n a nd m). \n Round theanswer to the nea res t integer andconvert thatto binary.\n  If nis great erthan m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const sum = (n-1) * (m-1) / 2\n  let roundedSum = Math.floor(sum)\n  if (n > m) {\n    return -1\n  }\n  const sumInBinary = binary(sum)\n  return sumInBinary\n}\n\n// Binary representation of an integer\nconst binary = (num) => {\n  const digits = []\n  let str = num\n  while (str.length < 64) {\n    str = \"0\" + str\n  }\n  for (let i = 0; i < 64; i++) {\n    if (str[i] === \"1\") {\n      digits.push(i)\n    }\n  }\n  return digits\n}\n\nmodule.exports = roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Given a list of positive integers x.retur n a sorted list of all \n  elementsthat hasn't any even digit.\n\n  Note:Retur ned lis t  should  be sorte d in increasing order.\n  \n For  example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  const digits = []\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < 10; j++) {\n      if (x[i] % j === 0) {\n        digits.push(x[i])\n      }\n    }\n  }\n  digits.sort()\n  return digits\n}\n\n/*\n Given a list of positive integers x.\n\n Return the  number of the unique digits in x.\n\n */\nconst uniqueDigits = (x) => {\n  let count = 0\n  for (let i = 0; i < x.length; i++) {\n    for (let j = 0; j < 10; j++) {\n      if (x[i] % j === 0) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\n/*\n Given a list of positive integers x.\n\n Return the sum of the even digits in x.\n\n */\nconst sumOfEvenDigits = (x) => {\n  return x.reduce((prev, curr) => {\n    if (curr % 2 === 0) {\n      return prev + curr\n    } else {\n      return prev\n    }\n  }, 0)\n}\n\nconst listUniqueDigits = (x) => {\n  return listUniqueDigitsRecursive(x, 0)\n}\n\nconst listUniqueDigitsRecursive = (x, i) => {\n  const digits = uniqueDigits(x)\n  if (i === x.length) {\n    return digits\n  }\n  const result = []\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i])\n    listUniqueDigitsRecursive(x, i + 1)\n  }\n  return result\n}\n\n/*\n Given a list of positive integers x.\n\n Return the sum of the even digits in x.\n\n */\nconst sumOfEvenDigits = (x) => {\n  return x.reduce((prev, curr) => {\n    if (curr % 2 === 0) {\n      return prev + curr\n    } else {\n      return prev\n    }\n  }, 0)\n}\n\n/*\n Given a list of positive integers x.\n\n Return the sum of the even digits in x.\n\n */\nconst sumOfEvenDigits = (x) => {\n  return x.reduce((prev, curr) => {\n    if (curr % 2 === 0) {\n      return prev + curr\n    } else {\n      return prev\n    }\n  }, 0)\n}\n\nconst listUniqueDigits = (x) => {\n  return listUniqueDigitsRecursive(x, 0)\n}\n\nconst listUniqueDigitsRecursive = (x, i) => {\n  const digits = uniqueDigits(x)\n  if (i === x.length) {\n    return digits\n  }\n  const result = []\n  for (let i = 0; i < digits.length; i++) {\n    result.push(digits[i])\n    listUniqueDigitsRecursive(x, i + 1)\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers, sort the  inte gers that are between 1 and 9 inclusive,\n  reverse the resulting array,and t hen rep l ace eac h digit b y its corresponding name fro m\n \"One\", \"Two\",  \"Three\", \"Fo ur\", \"Five\", \"Six\", \"Seven \",\"Eight\",\"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const names = arr.map((el, i) => {\n    if (el >= 1 && el <= 9) {\n      return {\n        name: `${el}`,\n        length: i + 1\n      }\n    } else {\n      return {\n        name: '',\n        length: 0\n      }\n    }\n  });\n  const arrLen = names.length;\n  const sortedArr = names.sort((a, b) => {\n    if (a.length === b.length) {\n      return a.name.localeCompare(b.name);\n    }\n    return b.length - a.length;\n  });\n  return sortedArr.reverse().map((el) => el.name);\n}\n\nconsole.log(byLength([2, 1, 1, 4, 5, 8, 2, 3]));\nconsole.log(byLength([]));\nconsole.log(byLength([1, -1, 55]));<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2*  ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Implement the function f that takesn asa parameter,\n  and returns a list of size n, such that the value of theeleme nt at i n dex i i s the fac torial of i if i is even\n  o r t he sum of numb ers from 1 to  i otherwise.\n  istarts f rom 1.\n  the factorialo f i is  the multip licatio n of thenumbers from 1 to i (1 *2* ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const fact = (i) => i === 0? 1 : i * f(i - 1);\n  const sum = (n) => n === 0? 1 : n * f(n - 1);\n  const all = (n) => Array.from(Array(n + 1).keys())\n  const getFactorial = (n) => {\n    return n === 1? 1 : n === 0? 1 : all(n).reduce((sum, i) => sum * f(i), 0);\n  };\n  return all(n).reduce((sum, i) => sum + getFactorial(i), 0);\n};\n\nconsole.log(f(4));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n) , inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  tupl e that has the number of even and odd\n  integer palindromes that fall wi thinthe ran g e(1, n), inclusi ve.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const nums = new Array(n + 1);\n  let i = 0;\n  while (i <= n) {\n    nums[i] = 0;\n    i++;\n  }\n  let j = 0;\n  while (j <= n) {\n    nums[j] = 1;\n    j++;\n  }\n  let result = [];\n  for (let i = 1; i <= n; i++) {\n    if (nums[i] % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconsole.log(evenOddPalindrome(3)); // [1, 2]\nconsole.log(evenOddPalindrome(12)); // [4, 6]\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0 .\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function countNums which tak es an  array of integers and returns\n  the number of elements which has a sumof di gits >0.\n  Ifa numberis negative, then its firstsig ned digit will  be negative: \n  e.g. -123 has signed di gits -1, 2,and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const isPositive = (num) => num >= 0\n  const countNumsBySig = (arr, start, end) => {\n    let res = 0\n    for (let i = start; i <= end; i++) {\n      if (arr[i]!= 0) {\n        res += 1\n      }\n    }\n    return res\n  }\n  let res = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (isPositive(arr[i])) {\n      res += countNumsBySig(arr, i, i)\n    } else {\n      res += countNumsBySig(arr, i, i - 1)\n    }\n  }\n  return res\n}\n\nconsole.log(countNums([1, 1, 2]))\nconsole.log(countNums([1, 1, 2, -1]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integersarr[1 ], arr[2], ..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We have an array 'arr' of N integersarr[1 ], arr[2],..., arr[N].The\n  numbers in the array will be randomly order ed. Y our tas k  is todetermine  if\n  it is possible to getanarray sorted i n non-decreas ing order by performing \n the following operatio n  on th e given arr ay:\n     You ar e allowed to perform rights hift operation any numb er of times.\n  \n  One right  shift oper at i on means shifting all elemen ts of thearrayby one\n  po sit ion in the right direction. The la st element of the arraywil l bemo ve d to\n  the  s tarting position in the arra yi.e. 0thindex. \n\n  If it is possible t o o btain the sorted  array by p erforming the above operation\n  then ret urn  true e l se return false.\n  If the give n array is empty then retur ntrue.\n\n  Note: T h e given listis gu aranteed to hav e unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let count = arr.length - 1;\n    if (arr.length === 0) {\n        return true;\n    }\n    if (arr[0] === arr[count]) {\n        let i = 1;\n        while (arr[i] === arr[i - 1]) {\n            i++;\n        }\n        let j = count;\n        while (arr[i] === arr[j]) {\n            j--;\n        }\n        let k = Math.min(i, j);\n        for (let n = 0; n < k; n++) {\n            let x = arr[n];\n            let y = arr[n + 1];\n            arr[n] = y;\n            arr[n + 1] = x;\n        }\n        return false;\n    }\n    return false;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In this problem, you will implement a  func tion that takes two lists of numbers,\n  and determines whether it is pos sible  to per f orm anexchangeof elements\n  between them t o m ake lst1 a lis t of only eve n numbers.\n  There is no l imit on thenumber of e x change d elementsbetween  lst1 and  lst2.  If it is possiblet o exchange elements bet ween the lst1 and lst2 to m ake\n  all t he elements of lst1 to be even,  return \"YES\". Otherwise,  re turn \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if (lst1.length === 0) return lst2.length === 0? 'YES' : 'NO';\n  if (lst2.length === 0) return 'NO';\n  const l1 = lst1.slice();\n  const l2 = lst2.slice();\n  const r1 = [...l2,...l1];\n  const r2 = [...l1,...l2];\n  let c1 = 0;\n  let c2 = 0;\n  let i = 0;\n  while (c1 < l1.length && c2 < l2.length) {\n    if (l1[c1]!== r2[c2]) {\n      return 'NO';\n    }\n    c1 += 1;\n    c2 += 1;\n  }\n  return 'YES';\n};\n\nconst l1 = [1, 2, 3, 4];\nconst l2 = [1, 5, 3, 4];\nconsole.log(exchange(l1, l2));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Given a string representing a space s epara ted lowercase letters, return a dictionary\n  of the letter with the most  repe titiona nd cont aining th e corresponding count.\n  Ifsev eral letters h ave the sameoccurrence, return all ofthem.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    const allLetters = test.split('').map(c => c.toLowerCase());\n    const letterDict = allLetters.reduce((dictionary, letter) => {\n        const count = dictionary[letter];\n        dictionary[letter] = count + 1;\n        return dictionary;\n    }, {});\n    return letterDict;\n};\n\nconst letterCount = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount2 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount3 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount4 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount5 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount6 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount7 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount8 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount9 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount10 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount11 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount12 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount13 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount14 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount15 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount16 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount17 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount18 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount19 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount20 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount21 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount22 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount23 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sortedLetters = letters.map(key => histogram[key]);\n    return sortedLetters;\n};\n\nconst letterCount24 = (histogram) => {\n    const letters = Object.keys(histogram).sort();\n    const sorted"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and  c, y ou have to deleted all the characters in s that are equal to any charact er in  c\n  th e n check  if the r esult string is palindrome.  A  string is cal led palindrom e if it reads thesame bac kward as forward.\n  You should  return a t uple co ntainingthe result string and true/f alse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  if (!s) {\n    return ''\n  }\n  let start = 0\n  let end = 0\n  while (start < s.length && c.indexOf(s[start]) >= 0) {\n    start++\n  }\n  while (end < s.length && c.indexOf(s[end]) >= 0) {\n    end++\n  }\n  let result = s.slice(0, start)\n  while (end <= s.length) {\n    if (c.indexOf(s[end]) === -1) {\n      break\n    }\n    result = result + s[end]\n    end++\n  }\n  if (end <= s.length) {\n    result = result + s.slice(end, s.length)\n  }\n  return (result, true)\n}\n\nconst solution = reverseDelete\n\nconsole.log(solution('abcde', 'ae'))\nconsole.log(solution('abcdef', 'b'))\nconsole.log(solution('abcdedcba', 'ab'))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Given a list of strings, where each s tring  consists of only digits, return alist.\n  Each element i of the outputshoul d be \"t h e numbe r of oddelements in the\n  string i o f t he input.\" whe re all the i' s should be replaced by th e number\n  of odd digit s  in th e i'th stri ng of t he input. \n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n    const oddCount = (x, s) => x.length >= s? x.length % 2 == 1? `${x[x.length - 1]}th` : `${x[x.length - 1]}th` : `${x[x.length - 1]}nth`;\n    const evenCount = (x, s) => x.length >= s? `${x[x.length - 1]}th` : `${x[x.length - 1]}nth`;\n    return lst.reduce((acc, x) => oddCount(acc, x.length) + evenCount(acc, x.length), '');\n};\n\nmodule.exports = oddCount;<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array of integers nums, fin d the  minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let result = nums[0];\n    for (let i = 1; i < nums.length; i++) {\n        result = Math.min(result, nums[i]) + nums[i - 1];\n    }\n    return result;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\nconsole.log(minSubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid ofwells . Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water .\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets .\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid ofwells. Each row represents a single well,\n  and each 1 in a row represents asingl e unito f water.\n  Eachwell has acorresponding buc ket  that can be u sed to extrac t water from it,   and al l buckets have the same capaci ty.\n  Yourtask is  to use t hebuckets to empty thewell s.\n  Output the numberof times you need to lowerthe buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [N, L] = grid.length;\n  const [Lx, Ly] = grid[0].length;\n  const dp = new Array(N).fill(0);\n  dp[0] = 1;\n  let count = 0;\n  for (let i = 1; i < N; i++) {\n    let n = dp[i - 1];\n    let l = grid[i][0];\n    dp[i] = 0;\n    if (l < L) {\n      dp[i] = dp[i - 1] + (L - l) * n;\n      dp[i] = Math.min(dp[i], n + (capacity - n));\n      count++;\n    }\n  }\n  return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In this Kata, you have to sort an ar ray o f non-negative integers according to\n  number of ones intheir binary re prese ntation in asce nding ord er.\n  For similar number ofone s, sort basedon decimal va lue.\n\n  It must be impleme nted like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    let length = arr.length;\n    let arrArr = new Array(length);\n    for (let i = 0; i < length; i++) {\n        arrArr[i] = arr[i];\n    }\n    arrArr.sort(compare);\n    return arrArr;\n};\n\nconst compare = (a, b) => {\n    let arrA = a.toString();\n    let arrB = b.toString();\n    let result = 0;\n    let len = arrA.length;\n    let index = 0;\n    while (index < len) {\n        let oneA = parseInt(arrA[index]);\n        let oneB = parseInt(arrB[index]);\n        if (oneA == 1 && oneB == 1) {\n            result = 1;\n            break;\n        }\n        if (oneA == 1 && oneB!= 1) {\n            result = -1;\n            break;\n        }\n        if (oneA!= 1 && oneB == 1) {\n            result = 1;\n            break;\n        }\n        if (oneA == 1 && oneB == 1) {\n            result = 0;\n            break;\n        }\n        index++;\n    }\n    return result;\n};\n\nconsole.log(sortArray([1, 5, 2, 3, 4]));\nconsole.log(sortArray([-2, -3, -4, -5, -6]));\nconsole.log(sortArray([1, 0, 2, 3, 4]));\nconsole.log(sortArray([1, 0, 2, 3, 4, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Given a string s and a natural number  n, y ou have been tasked to implement \n a function that returns a list of al l wor ds from strings that co ntain exactly \n  n consonant s,in order these  words appear  in the string s.  If the  string s is empty then the fu nction shou ld retu rn an emp tylist.\n  Note: you mayass ume the inputstring co ntains only letters and spa ces.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let all = [];\n  let result = [];\n  let str = s.toLowerCase();\n  let len = str.length;\n  let index = 0;\n  for(let i = 0; i < len; i++){\n    let word = str.substring(i, i + n);\n    if(word.length === n){\n      result.push(word);\n    }\n  }\n  return result;\n};\n\nmodule.exports = selectWords;<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You are given a word. Your task is to  find  the closest vowel that stands between \n  two consonantsfrom the rightsideof thew ord (ca se sensit ive).\n  \n Vowels in the beg inn ing and ending  doesn't coun t. Return empty string ifyou didn't\n find any v o wel me t the above  condit ion. \n\n You may assume that thegive n string contains Engli sh letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let distance = 10000000;\n  for (let i = 0; i < word.length; i++) {\n    const char = word[i];\n    for (let j = i + 1; j < word.length; j++) {\n      const nextChar = word[j];\n      const v = char === nextChar;\n      if (vowels.indexOf(char)!== -1 && vowels.indexOf(nextChar)!== -1) {\n        let d = Math.abs(i - j);\n        if (d < distance) {\n          distance = d;\n          closestVowel = char;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\n/*\n  Given a string S, return the string without repeating characters.\n  Example:\n  \"abcde\" -> \"abce\"\n  \"qwde\" -> \"qwe\"\n  \"aab\" -> \"aa\"\n  \"eid\" -> \"id\"\n  \"axc\" -> \"ac\"\n  */\nconst removeDuplicates = (s) => {\n  const a = [];\n  for (let i = 0; i < s.length; i++) {\n    if (a.indexOf(s[i]) === -1) {\n      a.push(s[i]);\n    }\n  }\n  return a.join('');\n};\n\n/*\n  Given a string S, return the string without repeating characters.\n  Example:\n  \"abcde\" -> \"abce\"\n  \"qwde\" -> \"qwe\"\n  \"aab\" -> \"aa\"\n  \"eid\" -> \"id\"\n  \"axc\" -> \"ac\"\n  */\nconst removeDuplicatesInReverse = (s) => {\n  const a = [];\n  for (let i = s.length - 1; i >= 0; i--) {\n    if (a.indexOf(s[i]) === -1) {\n      a.push(s[i]);\n    }\n  }\n  return a.join('');\n};\n\nconst getClosestVowel = (word) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  let closestVowel = '';\n  let distance = 10000000;\n  for (let i = 0; i < word.length; i++) {\n    const char = word[i];\n    for (let j = i + 1; j < word.length; j++) {\n      const nextChar = word[j];\n      const v = char === nextChar;\n      if (vowels.indexOf(char)!== -1 && vowels.indexOf(nextChar)!== -1) {\n        let d = Math.abs(i - j);\n        if (d < distance) {\n          distance = d;\n          closestVowel = char;\n        }\n      }\n    }\n  }\n  return closestVowel;\n};\n\nconst isVowel = (char) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  return vowels.indexOf(char)!== -1;\n};\n\nconst isVowel = (char) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  return vowels.indexOf(char)!== -1;\n};\n\n/*\n  Given a string S, return the index of the first appearance of the first non-empty \n  substring of length 3 or more that is not a substring of the first 3 characters of the string.\n  If no such substring exists, return -1.\n  Examples:\n  S = \"abcabcabc\", return 2\n  S = \"abcabc\", return 2\n  S = \"abc\", return -1\n  */\nconst firstIndexOf3Plus = (s) => {\n  const i = 0;\n  while (i < s.length) {\n    if (s.length - i >= 3 && s.length - i > 3 - i) {\n      if (s.length - i >= 3) {\n        return i;\n      }\n      if (i === 3) {\n        return -1;\n      }\n    }\n    i++;\n  }\n  return -1;\n};\n\nconst isAlpha = (char) => {\n  const alphas = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n  return alphas.indexOf(char)!== -1;\n};\n\nconst isAlphanumeric = (char) => {\n  const alphas = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n  return alphas.indexOf(char)!== -1;\n};\n\nconst isNumber = (char) => {\n  const nums = ['0"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only .\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings,  both  strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Y our job is to c heck if i t is possible to concatenate  th e two stringsin\n  some ord er, that the resulting str ing will begood.\n  A s t ring S  is conside red tobe good i f and only if all parenthese s in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const isBalanced = (l) => {\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] === '(') count++;\n      if (l[i] === ')') count--;\n    }\n    return count === 0;\n  };\n  const balance = (l) => {\n    let balanceCount = 0;\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] === '(') balanceCount++;\n      if (l[i] === ')') balanceCount--;\n    }\n    return balanceCount;\n  };\n  const isGood = (l) => {\n    let lst = l.split('');\n    for (let i = 0; i < lst.length - 1; i++) {\n      if (lst[i] === '(' && lst[i + 1] === '(') {\n        return false;\n      }\n      if (lst[i] === ')') {\n        if (lst[i + 1]!== '(') {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n  const str = lst.join('');\n  if (!isGood(str)) {\n    return 'No';\n  }\n  if (!isBalanced(str)) {\n    return 'No';\n  }\n  return 'Yes';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r .\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Given an array arr of integers and a  posi tive integer k, return a sorted list \n  of length k withthe maximum k n umber s in ar r.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (arr.length === 0 || k === 0) {\n    return []\n  }\n\n  const half = Math.floor(k / 2)\n  let left = maximum(arr.slice(0, half), k - half)\n  let right = maximum(arr.slice(half), k - half)\n  return left.concat(right)\n}\n\nexport default maximum<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Given a non-empty list of integers, r eturn  the sum ofall of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Given a non-empty array of integersarr a nd an integer k, return\n  the sum of the elements with at most two digit s fro m the f i rst k e lements o f arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const last = arr[k - 1]\n  const second = arr[k - 2]\n  const sum = last + second\n  return sum;\n}\n\nconst addElementsSolution = (arr, k) => {\n  const sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i += 1\n  }\n  return sum\n}\n\nconst sumNumbers = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i += 1) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addElementsSolution2 = (arr, k) => {\n  let sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i += 1\n  }\n  return sum\n}\n\nconst addElementsSolution3 = (arr, k) => {\n  let sum = 0\n  let i = 0\n  while (i < k) {\n    sum += arr[i]\n    i += 1\n  }\n  return sum\n}\n\nconst sumNumbers2 = (arr) => {\n  let sum = 0\n  for (let i = 0; i < arr.length; i += 1) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nmodule.exports = {\n  addElements,\n  sumNumbers,\n  addElementsSolution,\n  addElementsSolution2,\n  addElementsSolution3,\n  sumNumbers2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer n, return a  sort ed list that has the odd numbers in collatz sequence.\n\n The Collatz con jectu re is a conject ure in ma thematics that concerns a se que nce defined\n as follows: s tart with any positive int eger n. Then each termi s obta ined from t he \n  p revious t erm asfollows: if the previ ous term is even, the n ext term is one half of \n the previou st erm. If the previous term is  odd, thenextt erm is 3 ti mes  the previous\n  term plus 1. Thec onjecture is that nomat ter  what v al ueof n, t he  sequence will always reach1.   Note: \n     1. Collatz(1) is [1].     2. returned l ist sortedin increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n    let odd = [];\n    let cur = n;\n    while (cur > 1) {\n        if (cur % 2 === 1) {\n            odd.push(cur);\n            cur = Math.floor(cur / 2);\n        } else {\n            cur = cur * 3 + 1;\n        }\n    }\n    return odd;\n};\n\n// Test\nconst test = (n, expected) => {\n    const actual = getOddCollatz(n);\n    console.log('getOddCollatz(' + n + ') ==>'+ JSON.stringify(actual) +'' + JSON.stringify(expected));\n};\n\ntest(1, [1]);\ntest(2, [1, 3]);\ntest(3, [1, 3, 5]);\ntest(4, [1, 3, 5, 7]);\ntest(5, [1, 3, 5, 7, 9]);\ntest(6, [1, 3, 5, 7, 9, 11]);\ntest(7, [1, 3, 5, 7, 9, 11, 13]);\ntest(8, [1, 3, 5, 7, 9, 11, 13, 15]);\ntest(9, [1, 3, 5, 7, 9, 11, 13, 15, 17]);\ntest(10, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]);\ntest(11, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]);\ntest(12, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23]);\ntest(13, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25]);\ntest(14, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27]);\ntest(15, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29]);\ntest(16, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]);\ntest(17, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33]);\ntest(18, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35]);\ntest(19, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37]);\ntest(20, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]);\ntest(21, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41]);\ntest(22, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43]);\ntest(23, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45]);\ntest(24, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47]);\ntest(25, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]);\ntest(26, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]);\ntest(27, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53]);\ntest(28, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55]);\ntest(29, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]);\ntest(30, [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59]);\ntest(31,"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4 .The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You have to write a function which va lidat es a given date string and\n  returns true if the date isvalid otherwise  fals e.\n  Th e  date i s valid i f all of the following rules  ar e satisfied:\n 1. The datestring is not empty.\n  2.The number of days is n o t less  than 1 orhigherthan 31 d ays for months 1,3,5,7,8,10, 12. And the number of d ays is not less than 1 or h igher than30 days for months 4,6,9,11. An d, the number of  days is no t l ess than 1 or higher than 29 fort he month 2.\n  3. Themon ths  should  n otbe less  t han 1 or higher than 12.\n  4.The dateshould be in the format: mm-dd -yy yy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) return false\n  const months = ['Januari', 'Februari', 'Mars', 'April', 'Maj', 'Juni', 'Juli', 'Augusti', 'September', 'Oktober', 'November', 'December']\n  const monthsAbb = ['Jan', 'Feb', 'Mar', 'Apr', 'Maj', 'Jun', 'Jul', 'Aug', 'Sep', 'Okt', 'Nov', 'Dec']\n  const days}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0 , ord('b')= 1, .. . ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Given a string of words, return a li st of  words split on whitespace, if no whitespaces exists in the text you\n  s hould  splito n comma s ',' ifno commas exists you shouldret urn the number  of lower-cas e letters with odd order i n the\n  alphabet, ord(' a ') = 0, ord('b')= 1,... ord('z' ) = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n    const words = txt.split(\" \");\n    return words.filter((word) => word.length > 0);\n};\n\n// Test\nconst test = (type, input, expected) => {\n    const output = splitWords(input);\n    console.log(`${type}(${input}): ${JSON.stringify(output)}`);\n    if (output.length!== expected.length) {\n        return false;\n    }\n    for (let i = 0; i < expected.length; i++) {\n        if (output[i]!== expected[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\n// Tests\ntest(\"Split words\", \"Hello world!\", [\"Hello\", \"world!\"]);\ntest(\"Split words\", \"Hello,world!\", [\"Hello\", \"world!\"]);\ntest(\"Split words\", \"Hello world, you, are, awesome, right?\", [\"Hello\", \"world\", \"you\", \"are\", \"awesome\", \"right?\"]);\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return whet her o r not they are sorted\n  in ascending order. If list has more than 1 dupl icate  of the same\n number, r eturn false. Assume no negat ive  numbers and o nly integers. \n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  let index = 1;\n  while (index < lst.length) {\n    if (lst[index - 1] > lst[index]) {\n      return false;\n    }\n    index++;\n  }\n  return true;\n};\n\n// console.log(isSorted([1, 2, 3, 4, 5]));\nconsole.log(isSorted([1, 3, 2, 4, 5]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6]));\nconsole.log(isSorted([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(isSorted([1, 3, 2, 4, 5, 6, 7]));\nconsole.log(isSorted([1, 2, 2, 3, 3, 4]));\nconsole.log(isSorted([1, 2, 2, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You are given two intervals,\n  whereeachinterval isa pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n    if (interval1[0] > interval2[1]) {\n        return \"NO\";\n    }\n    if (interval1[1] < interval2[0]) {\n        return \"NO\";\n    }\n    return \"YES\";\n};\n\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of intege rs an d you need to return\n  sum of magnitudes of integers multiplied by produ ct of  all si g ns\n  of  each num ber in thearray, represente d b y 1, -1 or 0.  Note: retur n null for empty arr.\n\n  E xample:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + 1\n    if(num < 0) return acc - 1\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + 1\n    if(num < 0) return acc - 1\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })\n  const result = arrSigns.reduce((acc, num) => {\n    if(num === 0) return acc\n    if(num > 0) return acc + num\n    if(num < 0) return acc - num\n  })\n  return result\n}\n\nconst prodSigns = (arr) => {\n  if(arr.length === 0) return null\n  const arrSigns = arr.map((num) => {\n    if(num === 0) return 0\n    if(num > 0) return 1\n    if(num < 0) return -1\n  })"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid . You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Given a grid with N rows and N colum ns (N  >= 2) and a positive integer k, \n each cell of the grid contains a val ue. E very in t eger in  the rang e [1, N * N]\n  inclusive app ear s exactly once  on the cells  of the grid.\n\n  You havetofind theminimum pat h  of le ngth k in t he grid. You can  start  from any cell,andin each step you can mo ve to any of the neighbor c ells,\n inot h er words, you can go to cell s which share an  edge withyou  current\n  cell.\n  Please note tha t a path of length kmea nsvisitin gexactly kce lls (not\n  necessarily disti nc t).\n  You CANNOT go off the grid.\n  A p ath  A (of length k)  is conside red less than a path B (of length k) if  a fter ma k ing the ordered lists of the v alues on the cells that A a nd  B go\n  through( let's call th em ls t_A and lst_B),  lst_A is lexicographically less\n  than lst_B, inother words, there exist  an integer inde x i (1 <= i <=  k ) \n such that lst_A[i]< ls t_B[i] and  for any j (1 <=  j < i) we have\n  lst_A[j ]= lst_B[j].\n  It is guar anteed tha tthe answer is unique.\n  Return an ordered listof the values on the cells that the mini mum pa thgothro ugh.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const rowCount = grid.length\n  const colCount = grid[0].length\n\n  const visited = new Array(rowCount)\n  const visitedCount = new Array(rowCount)\n  for (let i = 0; i < rowCount; i++) {\n    visited[i] = new Array(colCount)\n    for (let j = 0; j < colCount; j++) {\n      visited[i][j] = 0\n      visitedCount[i] = 0\n    }\n  }\n\n  const paths = []\n\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < colCount; j++) {\n      if (visited[i][j] === 0) {\n        dfs(grid, i, j, visited, visitedCount, paths)\n      }\n    }\n  }\n\n  const minPath = []\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < colCount; j++) {\n      if (visited[i][j] === 1) {\n        minPath.push(grid[i][j])\n      }\n    }\n  }\n\n  return minPath\n}\n\nfunction dfs(grid, i, j, visited, visitedCount, paths) {\n  if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || visited[i][j] === 1) {\n    return\n  }\n\n  visited[i][j] = 1\n  visitedCount[i]++\n\n  const adj = getNeighborCells(grid, i, j)\n\n  for (let k = 0; k < adj.length; k++) {\n    if (visited[adj[k][0]][adj[k][1]] === 0) {\n      dfs(grid, adj[k][0], adj[k][1], visited, visitedCount, paths)\n    }\n  }\n\n  visitedCount[i]--\n  visited[i][j] = 0\n}\n\nfunction getNeighborCells(grid, i, j) {\n  const rowCount = grid.length\n  const colCount = grid[0].length\n  const adj = []\n\n  if (i > 0) {\n    adj.push([i - 1, j])\n  }\n\n  if (i < rowCount - 1) {\n    adj.push([i + 1, j])\n  }\n\n  if (j > 0) {\n    adj.push([i, j - 1])\n  }\n\n  if (j < colCount - 1) {\n    adj.push([i, j + 1])\n  }\n\n  return adj\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everyone knows Fibonacci sequence, it  wasstudied deeply by mathematicians in \n  the last couple centuries. Howeve r, wh at peop l e don't  know isTribonaccisequence.\n  Tribo nac ci sequence is  defined by t he recurrence:\n  tri(1) =3\n tri(n) = 1 + n / 2, if n i s even.\n  t ri(n) =   tri(n -  1) + tri(n - 2) + tri(n+1 ), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    var res = [1];\n    for (var i = 2; i <= n; i++) {\n        res.push(res[i - 1] + res[i - 2] + res[i - 1]);\n    }\n    return res;\n}\n\nconst t = (n) => {\n    var res = [];\n    for (var i = 1; i < n; i++) {\n        res.push(tri(i));\n    }\n    return res;\n}\n\nconst t2 = (n) => {\n    var res = [];\n    for (var i = 2; i < n; i++) {\n        res.push(tri(i));\n    }\n    return res;\n}\n\nvar a = t(6);\nconsole.log(a);<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Given a positive integer n, return th e pro duct of theodd digits.\n  Return 0if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  return n % 2\n}\n\nconsole.log(digits(1))\nconsole.log(digits(4))\nconsole.log(digits(235))\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]] ' ) ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes a strin g asinput whichcontains only square brackets.\n  The function should returntrueif ando nly ifthere isa valid subsequence of brack ets \n  where at le ast one brack et in the subsequence is n ested.\n  isNested('[[]]') ➞ tr ue\n  isNest ed('[]] ]]]]][[[[ []') ➞false\n  isNested('[][ ]') ➞ false\n isNested( '[]') ➞ false\n  isNested('[ [][]]')➞ t ru e \n  isNested('[[]][[') ➞ true \n  */\nconst isNe sted = (str ing ) => {\n    let re = /([^[\\]]*)(\\[\\])*\\s*$/\n    let match = re.exec(str)\n    if(match) {\n        return match[2].trim() == match[1].trim()\n    }\n}\n\nexport { isNested }<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You are given a list of numbers.\n  Yo u nee d to returnthe sum of squared numbers in the given list,\n  round each e lemen t in th e  list t o the upp er int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    return lst.reduce((acc, x) => acc + Math.pow(x, 2), 0);\n}\n\nconst test = {\n    sumSquares([1, 2, 3]),\n    sumSquares([1, 4, 9]),\n    sumSquares([1, 3, 5, 7]),\n    sumSquares([1.4, 4.2, 0]),\n    sumSquares([-2.4, 1, 1]),\n}\n\nconsole.log(test);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns trueif th e last character\n  of a given string is an alphabetical character and is  not  a par t  of a w ord, andfalse otherwise.\n  Note: \"wo rd\"  is a group of  characters s eparated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z]/) &&!char.match(/[0-9]/);\n};\n\n/*\n  Create a function that returns true if the character is an alphabetical character and false otherwise.\n  Example:\n  checkIfAlphaNumeric(`abc123`) ➞ true\n  checkIfAlphaNumeric(`123abc`) ➞ false\n  checkIfAlphaNumeric(`abc`) ➞ false\n  */\nconst checkIfAlphaNumeric = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z0-9]/) &&!char.match(/[^a-zA-Z0-9]/);\n};\n\nconst checkIfContainsUppercaseLetters = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[A-Z]/) &&!char.match(/[a-z]/);\n};\n\nconst checkIfContainsLowercaseLetters = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-z]/) &&!char.match(/[A-Z]/);\n};\n\nconst checkIfContainsNumbers = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[0-9]/) &&!char.match(/[^0-9]/);\n};\n\nconst checkIfContainsAlphaNumeric = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[0-9a-zA-Z]/) &&!char.match(/[^0-9a-zA-Z]/);\n};\n\nconst checkIfContainsAlpha = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z]/) &&!char.match(/[^a-zA-Z]/);\n};\n\nconst checkIfContainsLettersAndNumbers = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z0-9]/) &&!char.match(/[^a-zA-Z0-9]/);\n};\n\nconst checkIfContainsLetters = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z]/) &&!char.match(/[^a-zA-Z]/);\n};\n\nconst checkIfContainsLettersAndNumbersAndNumbers = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z0-9]/) &&!char.match(/[^a-zA-Z0-9]/);\n};\n\nconst checkIfContainsLettersAndNumbersAndLetters = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z0-9]/) &&!char.match(/[^a-zA-Z0-9]/);\n};\n\nconst checkIfContainsLettersAndNumbersAndLettersAndNumbers = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z0-9]/) &&!char.match(/[^a-zA-Z0-9]/);\n};\n\nconst checkIfContainsLettersAndNumbersAndLettersAndNumbers = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z0-9]/) &&!char.match(/[^a-zA-Z0-9]/);\n};\n\nconst checkIfContainsLettersAndLetters = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z]/) &&!char.match(/[^a-zA-Z]/);\n};\n\nconst checkIfContainsLettersAndLettersAndLettersAndNumbers = (txt) => {\n    if(txt.length === 0) return false;\n    const char = txt.charAt(txt.length - 1);\n    return char.match(/[a-zA-Z]/) &&!char.match(/[^a-zA-Z]/);\n};\n\nconst checkIfContainsLettersAndLettersAndLettersAndNumbers = (txt) => {\n    if(txt."}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Create a function which returns the l arges t index of an element which\n  is not greater than or equal to the elemen t imm ediatel y  preced ing it. I f\n  no such element exists t hen  return -1. Th e given array  will not contain  duplic ate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    let len = arr.length;\n    let i = 0;\n    let result = -1;\n    while (i < len) {\n        if (arr[i] < arr[i + 1]) {\n            result = i;\n            break;\n        }\n        i++;\n    }\n    return result;\n}\n\n/*\n  Create a function which returns the maximum element in the given array.\n\n  Examples:\n  max([1,2,3]) = 3\n  max([1,2,3,4,5,6]) = 6\n  */\nconst max = (arr) => {\n    let result = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > result) {\n            result = arr[i];\n        }\n    }\n    return result;\n}\n\n/*\n  Create a function which returns the minimum element in the given array.\n\n  Examples:\n  min([1,2,3]) = 1\n  min([1,2,3,4,5,6]) = 1\n  */\nconst min = (arr) => {\n    let result = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < result) {\n            result = arr[i];\n        }\n    }\n    return result;\n}\n\n/*\n  Create a function which returns the sum of all elements in the given array.\n\n  Examples:\n  sum([1,2,3]) = 6\n  sum([1,2,3,4,5,6]) = 21\n  */\nconst sum = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n        result += arr[i];\n    }\n    return result;\n}\n\n/*\n  Create a function which returns the average of all elements in the given array.\n\n  Examples:\n  average([1,2,3]) = 2\n  average([1,2,3,4,5,6]) = 3.3333\n  */\nconst average = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum / arr.length;\n}\n\n/*\n  Create a function which returns the index of the element in the given array which is\n  greater than or equal to the element at the given index.\n\n  Examples:\n  greaterThanOrEqual([1,2,3,4,5,6,7,8,9], 2) = 5\n  greaterThanOrEqual([1,2,3,4,5,6,7,8,9], 9) = 9\n  */\nconst greaterThanOrEqual = (arr, index) => {\n    let i = index;\n    while (i < arr.length && arr[i] < arr[i + 1]) {\n        i++;\n    }\n    return i;\n}\n\n/*\n  Create a function which returns the index of the element in the given array which is\n  less than or equal to the element at the given index.\n\n  Examples:\n  lessThanOrEqual([1,2,3,4,5,6,7,8,9], 2) = 2\n  lessThanOrEqual([1,2,3,4,5,6,7,8,9], 9) = 9\n  */\nconst lessThanOrEqual = (arr, index) => {\n    let i = index;\n    while (i > 0 && arr[i] < arr[i - 1]) {\n        i--;\n    }\n    return i;\n}\n\n/*\n  Create a function which returns true if the given array contains an element which is\n  less than or equal to the element at the given index.\n\n  Examples:\n  isLessThanOrEqual([1,2,3,4,5,6,7,8,9], 2) = true\n  isLessThanOrEqual([1,2,3,4,5,6,7,8,9], 9) = true\n  */\nconst isLessThanOrEqual = (arr, index) => {\n    return lessThanOrEqual(arr, index) == index;\n}\n\n/*\n  Create a function which returns true if the given array contains an element which is\n  greater than or equal to the element at the given index.\n\n  Examples:\n  isGreaterThanOrEqual([1,2,3,4,5,6,7,8,9], 2) = true\n  isGreaterThanOrEqual([1,2,3,4,5,6,7,8,9], 9) = true\n  */\nconst isGreaterThanOrEqual = (arr, index) => {\n    return greaterThanOrEqual(arr, index) == index;\n}\n\n/*\n  Create a function which returns true if the given array contains an element which is\n  less than the element at the given index.\n\n  Examples:\n  isLessThan([1,2,3,4,5,6,7,8,9], 2) = true\n  isLessThan([1,2,3,4,5,6,7,8,9], 9) = false\n  */\nconst isLessThan = (arr, index) => {\n    return lessThanOrEqual(arr, index)!= index;\n}\n\n/*\n  Create a function which returns true if the given array contains an element which is\n  greater than the element at the given index.\n\n  Examples:\n  isGreaterThan([1,2,3,4,5,6,7,8,9], 2) = false\n  isGreaterThan([1,2,3,4,5,6,7,8,9], 9) = true\n  */\nconst isGreaterThan = (arr, index) => {\n    return greaterThanOrEqual("}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tup le (a , b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers , return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Create a function that returns a tup le (a, b), where'a' is\n  the largest of negative integers, and 'b' is the sm alles t\n  ofp ositive  integers  in a list.\n  If there is no  ne gative or posi tive integers, return them as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n    const max = (a, b) => {\n        return a > b? a : b;\n    };\n    const min = (a, b) => {\n        return a < b? a : b;\n    };\n    const largestSmallest = (a, b) => {\n        return a > b? a : b;\n    };\n    if (lst.length === 0) {\n        return (null, null);\n    }\n    const sorted = lst.sort((a, b) => {\n        return a - b;\n    });\n    const maxVal = sorted[sorted.length - 1];\n    const minVal = sorted[0];\n    const max = largestSmallest(maxVal, minVal);\n    const min = largestSmallest(minVal, maxVal);\n    return (max, min);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or ,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Create a function that takes integer s, fl oats, or strings representing\n  real numbers, and returns the larger var iable  in its given v ariable t ype.\n  Return null if the va lue s are equal.\n Note: If a r eal number is representedasa string, the floati n g poin t might be. or,\n  compar eOne(1, 2.5) ➞ 2.5\n  compare One(1, \"2,3\")➞ \"2,3\"\n compareOne(\"5,1\", \"6\") ➞ \" 6\"\n  compar eO n e(\"1\", 1) ➞ null\n  */\nconstcompareOne = (a,  b) => {\n  if (a === b) return null;\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a.indexOf(',')!== -1 && b.indexOf(',')!== -1) {\n      a = a.replace(/\\s*,\\s*/, '');\n      b = b.replace(/\\s*,\\s*/, '');\n    }\n    if (a.indexOf('.')!== -1 && b.indexOf('.')!== -1) {\n      a = a.replace(/\\s*\\.\\s*/, '');\n      b = b.replace(/\\s*\\.\\s*/, '');\n    }\n    if (a < b) return a;\n    if (b < a) return b;\n    return null;\n  }\n  if (a === null) return b;\n  if (b === null) return a;\n  if (a > b) return a;\n  return b;\n}\n\nconstcompare = (a, b) => {\n  if (a === b) return null;\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a.indexOf(',')!== -1 && b.indexOf(',')!== -1) {\n      a = a.replace(/\\s*,\\s*/, '');\n      b = b.replace(/\\s*,\\s*/, '');\n    }\n    if (a.indexOf('.')!== -1 && b.indexOf('.')!== -1) {\n      a = a.replace(/\\s*\\.\\s*/, '');\n      b = b.replace(/\\s*\\.\\s*/, '');\n    }\n    if (a < b) return a;\n    if (b < a) return b;\n    return null;\n  }\n  if (a === null) return b;\n  if (b === null) return a;\n  if (a < b) return a;\n  return b;\n}\n\nconst compare = (a, b) => {\n  if (a === b) return null;\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a.indexOf(',')!== -1 && b.indexOf(',')!== -1) {\n      a = a.replace(/\\s*,\\s*/, '');\n      b = b.replace(/\\s*,\\s*/, '');\n    }\n    if (a.indexOf('.')!== -1 && b.indexOf('.')!== -1) {\n      a = a.replace(/\\s*\\.\\s*/, '');\n      b = b.replace(/\\s*\\.\\s*/, '');\n    }\n    if (a < b) return a;\n    if (b < a) return b;\n    return null;\n  }\n  if (a === null) return b;\n  if (b === null) return a;\n  if (a < b) return a;\n  return b;\n}\n\nconst compare2 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a.indexOf(',')!== -1 && b.indexOf(',')!== -1) {\n      a = a.replace(/\\s*,\\s*/, '');\n      b = b.replace(/\\s*,\\s*/, '');\n    }\n    if (a.indexOf('.')!== -1 && b.indexOf('.')!== -1) {\n      a = a.replace(/\\s*\\.\\s*/, '');\n      b = b.replace(/\\s*\\.\\s*/, '');\n    }\n    if (a < b) return a;\n    if (b < a) return b;\n    return null;\n  }\n  if (a === null) return b;\n  if (b === null) return a;\n  if (a < b) return a;\n  return b;\n}\n\nconst compare3 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a.indexOf(',')!== -1 && b.indexOf(',')!== -1) {\n      a = a.replace(/\\s*,\\s*/, '');\n      b = b.replace(/\\s*,\\s*/, '');\n    }\n    if (a.indexOf('.')!== -1 && b.indexOf('.')!== -1) {\n      a = a.replace(/\\s*\\.\\s*/, '');\n      b = b.replace(/\\s*\\.\\s*/, '');\n    }\n    if (a < b) return a;\n    if (b < a) return b;\n    return null;\n  }\n  if (a === null) return b;\n  if (b === null) return a;\n  if (a < b) return a;\n  return b;\n}\n\nconst compare4 = (a, b) => {\n  if (a === b) return null;\n  if (typeof a ==='string' && typeof b ==='string') {\n    if (a.indexOf(',')!== -1 && b.indexOf(',')!== -1) {\n      a = a.replace(/\\s*,\\s*/, '');\n      b = b.replace(/\\s*,\\s*/, '');\n    }\n    if (a."}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evaluate whether the given number n c an be  written asthe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0;\n  for (let i = 1; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\nexport { isEqualToSumEven };\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Brazilian factorial is defined as :\n  b razilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n where n > 0\n\n Forexample : \n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  return n === 0? 1 : n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4)\n}\n\n/* The sum of two factorials is defined as:\n  s = brazillian_factorial(n) + n! + n-1! + n-2! +... + 1!\n */\nconst sumFactorial = (n) => {\n  return specialFactorial(n) + n * specialFactorial(n - 1) + n * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4) * specialFactorial(n - 5)\n}\n\n/* The Catalan number is defined as:\n  c = (b-a) + (b-2a) + (b-3a) +... + (b-na)\n */\nconst catalan = (n) => {\n  return (n - 1) * specialFactorial(n) / specialFactorial(n - 1)\n}\n\nconst catalan2 = (n) => {\n  return (n - 1) * specialFactorial(n) / specialFactorial(n - 1)\n}\n\n/*The product of two integers is defined as:\n  p = brazillian_factorial(n) * brazillian_factorial(n-1) *... * brazillian_factorial(1)\n */\nconst product = (n) => {\n  return specialFactorial(n) * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4) * specialFactorial(n - 5) * specialFactorial(n - 6) * specialFactorial(n - 7) * specialFactorial(n - 8) * specialFactorial(n - 9) * specialFactorial(n - 10) * specialFactorial(n - 11) * specialFactorial(n - 12) * specialFactorial(n - 13) * specialFactorial(n - 14) * specialFactorial(n - 15) * specialFactorial(n - 16) * specialFactorial(n - 17) * specialFactorial(n - 18) * specialFactorial(n - 19) * specialFactorial(n - 20) * specialFactorial(n - 21) * specialFactorial(n - 22) * specialFactorial(n - 23) * specialFactorial(n - 24) * specialFactorial(n - 25)\n}\n\n/*The sum of three factorials is defined as:\n  s = brazillian_factorial(n) + brazillian_factorial(n-1) + brazillian_factorial(n-2)\n */\nconst sumFactorial3 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2)\n}\n\nconst sumFactorial4 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3)\n}\n\nconst sumFactorial5 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4)\n}\n\nconst sumFactorial6 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4) + specialFactorial(n - 5)\n}\n\nconst sumFactorial7 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4) + specialFactorial(n - 5) + specialFactorial(n - 6)\n}\n\nconst sumFactorial8 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4) + specialFactorial(n - 5) + specialFactorial(n - 6) + specialFactorial(n - 7)\n}\n\nconst sumFactorial9 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4) + specialFactorial(n - 5) + specialFactorial(n - 6) + specialFactorial(n - 7) + specialFactorial(n - 8)\n}\n\nconst sumFactorial10 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4) + specialFactorial(n - 5) + specialFactorial(n - 6) + specialFactorial(n - 7) + specialFactorial(n - 8) + specialFactorial(n - 9)\n}\n\nconst sumFactorial11 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4) + specialFactorial(n - 5) + specialFactorial(n - 6) + specialFactorial(n - 7) + specialFactorial(n - 8) + specialFactorial(n - 9) + specialFactorial(n - 10)\n}\n\nconst sumFactorial12 = (n) => {\n  return specialFactorial(n) + specialFactorial(n - 1) + specialFactorial(n - 2) + specialFactorial(n - 3) + specialFactorial(n - 4) + specialFactorial(n - 5) + specialFactorial(n - 6) + specialFactorial(n - 7) + specialFactorial(n - 8) + specialFactorial(n - 9"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string text, replace all spa ces i n it with underscores, \n  and if astring has more than 2 consecutive sp aces,  \n  the n  replac e all con secutive spaces with - \n  \n fi xSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    text = text.toLowerCase();\n    text = text.replace(/\\s+/g, '_');\n    if (text.length > 2 && text.indexOf(' ')!== -1) {\n        text = text.replace(/\\s{2}/g, '-');\n    }\n    return text;\n}\n\nconst printText = (text) => {\n    text = text.replace(/\\s+/g,'');\n    return text;\n}\n\nconst printTotals = (text, words, lines) => {\n    text = text.replace(/\\s+/g,'');\n    return `${text} (${words}) ${lines} lines`;\n}\n\nconst printList = (text, words, lines) => {\n    text = text.replace(/\\s+/g,'');\n    return `${text} (${words}) ${lines} lines`;\n}\n\nconst getMax = (words) => {\n    return words.sort((a, b) => {\n        return a - b;\n    }).pop();\n}\n\nconst getAverage = (words) => {\n    return getMax(words) / words.length;\n}\n\nconst getMin = (words) => {\n    return words.sort((a, b) => {\n        return a - b;\n    }).pop();\n}\n\nconst getStdDev = (words) => {\n    let total = 0;\n    for (let i = 0; i < words.length; i++) {\n        total += Math.pow(words[i] - getAverage(words), 2);\n    }\n    return Math.sqrt(total / words.length);\n}\n\nconst getMedian = (words) => {\n    let i = 0;\n    let j = words.length - 1;\n    while (i < j) {\n        let k = (i + j) / 2;\n        if (words[k] < getAverage(words)) {\n            i = k + 1;\n        } else {\n            j = k;\n        }\n    }\n    return words[i];\n}\n\nconst getSpread = (words) => {\n    let min = words[0];\n    let max = words[words.length - 1];\n    let i = 0;\n    while (min < max) {\n        let k = (i + 1) / 2;\n        if (words[k] < min + (max - min) / 2) {\n            min = words[k];\n        } else {\n            max = words[k];\n        }\n        i = k;\n    }\n    return max - min;\n}\n\nconst getRanges = (words) => {\n    let ranges = [];\n    let i = 0;\n    let j = words.length - 1;\n    while (i < j) {\n        let k = (i + j) / 2;\n        ranges.push([words[i], words[k]]);\n        i = k + 1;\n    }\n    ranges.push([words[j], words[words.length - 1]]);\n    return ranges;\n}\n\nconst getNth = (words, n) => {\n    return words[n];\n}\n\nconst getCount = (words, text) => {\n    let count = 0;\n    let i = 0;\n    while (i < words.length) {\n        if (words[i] === text) {\n            count++;\n        }\n        i++;\n    }\n    return count;\n}\n\nconst getUnique = (words) => {\n    let unique = [];\n    for (let i = 0; i < words.length; i++) {\n        if (unique.indexOf(words[i]) === -1) {\n            unique.push(words[i]);\n        }\n    }\n    return unique;\n}\n\nconst getIndex = (words, text) => {\n    let index = -1;\n    let i = 0;\n    while (index === -1 && i < words.length) {\n        if (words[i] === text) {\n            index = i;\n        }\n        i++;\n    }\n    return index;\n}\n\nconst getWords = (text) => {\n    let words = text.split(' ');\n    let wordsList = [];\n    for (let i = 0; i < words.length; i++) {\n        wordsList.push(words[i]);\n    }\n    return wordsList;\n}\n\nconst removeWords = (words, text) => {\n    let index = getIndex(words, text);\n    if (index!== -1) {\n        words.splice(index, 1);\n    }\n    return words;\n}\n\nconst hasWords = (words, text) => {\n    let index = getIndex(words, text);\n    return index!== -1;\n}\n\nconst getWordsByIndex = (words, index) => {\n    let wordsList = [];\n    for (let i = 0; i < words.length; i++) {\n        if (index === i) {\n            wordsList.push(words[i]);\n        }\n    }\n    return wordsList;\n}\n\nconst getFirstWord = (words) => {\n    return words[0];\n}\n\nconst getLastWord = (words) => {\n    return words[words.length - 1];\n}\n\nconst removeWordsByIndex = (words, index) => {\n    let wordsList = [];\n    for (let i = 0; i < words.length; i++) {\n        if (index!== i) {\n            wordsList.push(words[i]);\n        }\n    }\n    return wordsList;\n}\n\nconst removeWordsByText = (words, text) => {\n    let wordsList = [];\n    for (let i = 0; i < words.length; i++) {\n        if (words[i]!== text) {\n            wordsList.push(words["}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file 's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d ' A'-'Z') .  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Create a function which takes a strin g rep resenting afile's name, and returns\n  'Yes' if the the file's name is v alid,  and re t urns 'N o' otherw ise.\n  A file's name is cons ide red to be vali d if and only  if all the following cond itions \n  are met:\n  -T here s hould not b e morethan thre e digits ('0'-'9') in the fi le's name.\n  - The file's name contains exactly on e dot '.'\n - The substring before the dot  should not bee mpty, and i t s tarts with a letter from \n  the la tin alphapet ('a'-'z' an d'A'-'Z').  - The su bs tring after the dot should b eone of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let check = file_name.length > 0;\n  let last_char = file_name[file_name.length - 1];\n  let valid_char = ['.', '-', '_', 't', 'x', 'c','s', 'd', 'l', 'i', 'p', 'h','s', 'j', 'w', 'g', 'f', 'b', 'y', 'n', 'o', 'a', 'e', 'r', 'z', 'k', 'u', 'v', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', 'x', '"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  This function will take a list of in teger s. For all entries in the list, the function shall square the integer en try i f its i n dex isa \n  mult iple of 3 and will cube theint eger entry ifits index isa multiple of 4 and not amultiple of3. The func t ion wi ll not \n  c hange t he entrie s in the list whose indexesare not a multiple of 3  or 4. The function shall t hen returnth e  sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let lst2 = lst.slice().reverse()\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i],2)\n    if(lst2.length > 0) {\n      if((lst[i] % 3 === 0 && lst2[0] % 3!== 0) || (lst[i] % 4 === 0 && lst2[0] % 4!== 0)) {\n        sum += lst[i]\n      }\n      lst2.shift()\n    }\n  }\n  return sum\n}\n\n// test\nconst testSumSquares = () => {\n  let lst = [1,2,3,4,5]\n  console.log(sumSquares(lst))\n  lst = []\n  console.log(sumSquares(lst))\n  lst = [-1,-5,-2,-1,-5]\n  console.log(sumSquares(lst))\n}\n\n// main\ntestSumSquares()<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representinga sen tence,\n  the sentence contains some words separated by aspace,\n  and yo u hav e to re t urn a s tring tha t containsthe words from th e o riginal senten ce,\n  whose l engths are prime numbers,  the orderof the word s  in th e new strin g shoul d be thesame as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const sentenceArray = sentence.split(\" \")\n  const newSentence = []\n  const newSentenceArray = []\n\n  for (let i = 0; i < sentenceArray.length; i++) {\n    let word = sentenceArray[i]\n    let newWord = []\n\n    let index = 0\n    while (index < word.length) {\n      if (isPrime(word[index])) {\n        newWord.push(word[index])\n        index += 1\n      } else {\n        break\n      }\n    }\n    newWord = newWord.join(\"\")\n    newSentence.push(newWord)\n  }\n\n  return newSentence\n}\n\nfunction isPrime(number) {\n  return number > 1 && new RegExp(/^\\d+$/).test(number) && Math.floor(number) == number && number > 0 && (number & 1) === 0 && number > 1 && number > 2 && (number & 3) === 0 && (number & 1) === 0 && number > 6 && number > 7 && number > 8 && (number & 1) === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format , \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a functionthatwill simplify the expression\n  x *n. The function returns true if x * n  eval uates t o  a whol e numberand false\n otherwise. Bothx a nd n, are stri ng representa tion of a fraction, and ha vethe following format, \n  <nu merator>/<d enomina tor> wher e bothnumerator and denomin ator are positive whole  numbers.\n\n  You can assume  that x,an dn  are valid fractions, and do  not havezeroa s denominat or. \n\n  simplify(\"1/5\", \"5/1\") = true  simplify(\"1/6\", \"2/1\")  =false\n s implify(\"7 /1 0\", \"10/2\") = false\n  */\ncon st simplify = (x, n) => {\n    let [p, q] = split(x);\n    let [d, e] = split(n);\n    return p * q === d * e && (p - q) % (d - e) === 0;\n}\n\nconsole.log(simplify(\"1/3\", \"3/1\"));\nconsole.log(simplify(\"3/1\", \"3/1\"));\nconsole.log(simplify(\"3/1\", \"5/2\"));\nconsole.log(simplify(\"7 /1 0\", \"10/2\"));\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits .\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Write a function which sorts the giv en li st of integers\n  in ascending order according to the sumof their digits.\n  N ote: if there a re severa l items with similar sum ofthe ir digits,\n  o rder them bas ed on their indexin origi nal list.\n\n For exampl e :\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const len = nums.length;\n  const sort = (a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  };\n  const sum = (a, b) => {\n    return a + b;\n  };\n  const count = (a, b) => {\n    return a.toString().length - b.toString().length;\n  };\n  let a = 0;\n  let b = 0;\n  let res = [];\n  for (let i = 0; i < len; i++) {\n    a = sum(a, nums[i]);\n    b = sum(b, nums[i]);\n    res[i] = count(a, b);\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Write a function that takes an arrayof nu mbers as input and returns \n  the number of elements in the array that a re gr eater t h an 10 a nd both   first and last digits of a  nu mber are odd ( 1, 3, 5, 7, 9 ).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    let x = nums[i];\n    let y = nums[i + 1];\n    if (x % 2 == 0 && y % 2 == 0) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k ,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n.You h ave to create an integer array a of length n.\n      For each i (1 ≤ i ≤n), t he valu e  of a[i ] = i * i  - i + 1.\n     Return the n umb er of triples(a[i], a[j],a[k]) of a where i < j < k,   and a[i] + a[j] +a [k] is  a multiple  of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n  let a = [...Array(n)].fill(1).map(x => x*x-x+1);\n  let m = 1;\n  for (let i = 1; i < n; i++) {\n    for (let j = i+1; j < n; j++) {\n      let k = i+j;\n      if (a[i] + a[j] + a[k] === m) {\n        return m;\n      }\n      m++;\n    }\n  }\n  return 0;\n};\n\nconsole.log(getMaxTriples(5));\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es .\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* There are eight planets in our solar  syst em: the closerst to the Sun\n  is Mercury, the next one is Venus, then Ea rth,Mars, J u piter,Saturn,\n Uranus, Neptune.\n  Write afun ction that tak es two planet  names as stringsplanet1and planet2.\n  The func t ion sh ould return  a tupl e contain ing all planets whose orbits  are\n  located betweenthe orbit of planet1 and th e orbitofpl a net2, sorted by\n  the proxim ityto the sun.  The funct ion  should return an empty tuple ifp lanet1 or planet2\n  arenot  correc tplanet nam es.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n    const planet1 = (typeof planet1 ==='string')? planet1.toLowerCase() : ''\n    const planet2 = (typeof planet2 ==='string')? planet2.toLowerCase() : ''\n    const planets = []\n    const sun ='sun'\n    if (planet1 === sun || planet2 === sun) {\n        return () => planets\n    }\n    const sunIndex = planets.indexOf(sun)\n    const sunOrbit = planets.slice(sunIndex).indexOf(sun)\n    const sunDistance = planets.slice(sunIndex).indexOf(sunOrbit)\n    const planet1Index = planets.slice(sunIndex + sunOrbit + 1).indexOf(planet1)\n    const planet2Index = planets.slice(sunIndex + sunOrbit + 1).indexOf(planet2)\n    const planet1Distance = planets.slice(sunIndex + sunOrbit + 1).indexOf(planet1Index)\n    const planet2Distance = planets.slice(sunIndex + sunOrbit + 1).indexOf(planet2Index)\n    if (sunOrbit === 0) {\n        return () => []\n    }\n    const planet1Orbit = planets.slice(sunIndex + sunOrbit + 1 + planet1Index + 1)\n    const planet2Orbit = planets.slice(sunIndex + sunOrbit + 1 + planet2Index + 1)\n    const planet1DistanceOrbit = planets.slice(sunIndex + sunOrbit + 1 + planet1Index + 1).indexOf(planet1Orbit)\n    const planet2DistanceOrbit = planets.slice(sunIndex + sunOrbit + 1 + planet2Index + 1).indexOf(planet2Orbit)\n    const planet1OrbitDistance = planets.slice(sunIndex + sunOrbit + 1 + planet1Index + 1).indexOf(planet1DistanceOrbit)\n    const planet2OrbitDistance = planets.slice(sunIndex + sunOrbit + 1 + planet2Index + 1).indexOf(planet2DistanceOrbit)\n    const planet1DistanceOrbitDistance = planets.slice(sunIndex + sunOrbit + 1 + planet1Index + 1).indexOf(planet1OrbitDistance)\n    const planet2DistanceOrbitDistance = planets.slice(sunIndex + sunOrbit + 1 + planet2Index + 1).indexOf(planet2OrbitDistance)\n    const planet1Distance = planets.slice(sunIndex + sunOrbit + 1 + planet1Index + 1).indexOf(planet1DistanceOrbitDistance)\n    const planet2Distance = planets.slice(sunIndex + sunOrbit + 1 + planet2Index + 1).indexOf(planet2DistanceOrbitDistance)\n    const planet1OrbitDistanceDistance = planets.slice(sunIndex + sunOrbit + 1 + planet1Index + 1).indexOf(planet1DistanceOrbitDistance)\n    const planet2OrbitDistanceDistance = planets.slice(sunIndex + sunOrbit + 1 + planet2Index + 1).indexOf(planet2DistanceOrbitDistance)\n    const planet1DistanceDistance = planets.slice(sunIndex + sunOrbit + 1 + planet1Index + 1).indexOf(planet1DistanceOrbitDistanceDistance)\n    const planet2DistanceDistance = planets.slice(sunIndex + sunOrbit + 1 + planet2Index + 1).indexOf(planet2DistanceOrbitDistanceDistance)\n    return () => (\n        (planet1Distance!== -1 && planet2Distance!== -1)?\n        planet1Distance <= planet2Distance?\n        [planet1, planet2].sort(compare) :\n        [planet2, planet1].sort(compare)\n    )\n}\n\nconst compare = (planet1, planet2) => (planet1.length - planet2.length)\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings as a parameter,\n  deletes the strings that have odd lengths from i t,\n and ret u rns the  resulted  list witha sorted order,\n Th e list is alwa ys a list ofstrings and neveran array  of numbers,\n  and it m a y cont ain duplica tes.\n The order  of the list should be ascen ding by length of eachword, and you\n  should retu rn the list  s o rted by that rule.\n  If twowords have thes ame length,  so rt the list alphabetically.\n  Thefunction should return a  li st of s tr ings in so rt ed order.\n  You may assume t ha tall words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const sum = 0\n  let prevSum = 0\n  let prevLen = 0\n\n  lst.forEach(item => {\n    sum += item.length\n    if (prevSum!== 0 && prevLen === item.length) {\n      sum -= prevSum\n      prevSum = 0\n      prevLen = 0\n    }\n    prevLen = item.length\n    prevSum += sum\n  })\n  return lst.sort((a, b) => a.length - b.length)\n}\n\nconst isSorted = (lst) => {\n  if (lst.length <= 1) return true\n  return lst[0].length > lst[1].length? true : false\n}\n\nconst sortedList = (lst) => {\n  const sorted = sortedListSum(lst)\n  if (isSorted(sorted)) return sorted\n  return sorted.sort((a, b) => a.length - b.length)\n}\n\nconst test = [\n  [\"abc\", \"ab\", \"a\", \"c\"],\n  [\"ab\", \"a\", \"cd\", \"b\", \"c\"],\n  [\"abc\", \"a\", \"b\", \"c\"],\n  [\"ab\", \"a\", \"b\", \"cd\"],\n  [\"abc\", \"ab\", \"a\", \"b\"],\n  [\"ab\", \"a\", \"cd\", \"b\"],\n  [\"abc\", \"a\", \"b\", \"c\"],\n  [\"ab\", \"a\", \"c\", \"cd\"],\n  [\"abc\", \"a\", \"b\", \"cd\"]\n]\n\nconst sortedTest = [\n  [\"ab\", \"a\", \"cd\", \"b\", \"c\"],\n  [\"ab\", \"a\", \"b\", \"c\"],\n  [\"abc\", \"a\", \"b\", \"c\"],\n  [\"ab\", \"a\", \"b\", \"cd\"],\n  [\"abc\", \"ab\", \"a\", \"b\"],\n  [\"ab\", \"a\", \"cd\", \"b\"],\n  [\"abc\", \"a\", \"b\", \"c\"],\n  [\"ab\", \"a\", \"c\", \"cd\"],\n  [\"abc\", \"a\", \"b\", \"cd\"]\n]\n\nconst test2 = [\n  [\"a\", \"b\", \"c\", \"d\"],\n  [\"a\", \"b\", \"c\"],\n  [\"a\", \"b\"],\n  [\"a\"],\n  [\"b\"],\n  [\"c\"],\n  [\"d\"]\n]\n\nconst sortedTest2 = [\n  [\"a\", \"b\", \"c\", \"d\"],\n  [\"a\", \"b\", \"c\"],\n  [\"a\", \"b\"],\n  [\"a\"],\n  [\"b\"],\n  [\"c\"],\n  [\"d\"]\n]\n\nmodule.exports = {\n  sortedListSum,\n  sortedList,\n  isSorted,\n  sortedTest,\n  sortedTest2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise .\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simple program which should return t he va lue of x ifn is \n  a prime numberand should return thevalue of y othe rwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n < 2) {\n    throw Error('xOrY : n should be atleast 2');\n  }\n  if (x < 0 || y < 0) {\n    throw Error('xOrY : x and y should be non-negative');\n  }\n  if (x > y) {\n    return xOrY(n - 1, x, y);\n  }\n  if (n % 2 === 1) {\n    return xOrY(n - 1, y, x);\n  }\n  return x;\n};\n\nconst print = (s, x) => {\n  const str = '' + x;\n  const len = str.length;\n  const max = 100;\n  for (let i = 0; i < len; i += max) {\n    const start = i;\n    const end = Math.min(start + max, len);\n    console.log(s + str.substr(start, end - start));\n  }\n};\n\nconst xOrYPrime = (n, x, y) => {\n  const div = xOrY(n, x, y);\n  if (div === x) {\n    print('x is prime', x);\n  } else if (div === y) {\n    print('y is prime', y);\n  } else {\n    print('prime factor is ', div);\n  }\n};\n\nconst main = () => {\n  xOrYPrime(7, 3, 5);\n  xOrYPrime(15, 5, 7);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers .\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Given a list of numbers, return thesum o f squares of the numbers\n  in the list that are odd. Ignore numbers that  arenegativ e  or not  integers.\n  doubleTheDifference([1,3,2, 0]) == 1 +9 + 0 + 0 = 1 0\n  doubleTheDifference([- 1,-2, 0]) == 0\n  doubl e TheDif ference([9,  -2]) = = 81\n  do ubleTheDifference([0]) == 0  If the input list isempty, return 0.\n  */\nconst  doubleTheD if f erence = (lst) => {\n    let  sums = 0;\n    lst.forEach(num => {\n        if (num % 2 == 1) {\n            sums += num * num;\n        }\n    });\n    return sums;\n};\nconst doubleTheDifference = (lst) => {\n    if (lst.length == 0) return 0;\n    if (lst.length == 1) return lst[0];\n    if (lst.length == 2) return lst[0] + lst[1];\n    if (lst.length == 3) return lst[0] + lst[1] + lst[2];\n    return f erence(lst.slice(1,lst.length - 1)) + lst[lst.length - 1];\n};\n\nmodule.exports = {\n    doubleTheDifference,\n    f erence\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0 ,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I think we all remember that feeling w hen t he result of some long-awaited\n  event is finally known.The feelings an d tho ughts y o u haveat that m oment are\n definitely worth  no ting down andcomparing.\n Your task is to determineifa personcorrectly g u essedthe results  of a n umber ofmatches.\n  You are giventwo  arrays of scores and g uesses of equal length, whe re eachind ex shows a match. \n  Return anarray of the sam e length de not ing how far off each guess was. If  they have guessed corre ctl y,\nth evalue is 0,and if not, the value is the  a bsolute difference between the guess an d t he score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    let ret = [];\n    game.forEach(item => {\n        let current = guess.indexOf(item);\n        if (current === -1) {\n            ret.push(1);\n        } else {\n            if (guess[current] === item) {\n                ret.push(0);\n            } else {\n                ret.push(Math.abs(guess[current] - item));\n            }\n        }\n    });\n    return ret;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName .  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You will be given the name of a class  (a s tring) and a list of extensions.\n The extensions are tobe used to load  addi tionalc lassesto the cl ass. The\n strength of the e xte nsion is as fo llows: Let CA P be the number of the upp ercase\n  letters in the extens ion's name,  and le t SM be t henumber of lowercase lette rs\n  in the extension's  name, the strength is give n by thefr ac t ion CAP - SM.\n  You should f indthe stronges t extension  an d return a string in this\n  format : ClassName.StrongestExt ens ionName.  If there  a re two or more extensions wi th the same strength, you should\n  choose  th e one that comes  first in t he list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  let class_name_parts = class_name.split('.');\n  let extension_name_parts = [];\n  let extension_strength = 0;\n  for (let extension of extensions) {\n    let extension_parts = extension.split('.');\n    let extension_strength = -1;\n    for (let i = 0; i < class_name_parts.length; i++) {\n      if (extension_parts[i] === class_name_parts[i].toLowerCase()) {\n        extension_strength = i;\n        break;\n      }\n    }\n    if (extension_strength!== -1) {\n      if (extension_strength > extension_strength) {\n        extension_strength = extension_strength;\n      }\n    }\n    extension_name_parts.push(extension);\n  }\n  return extension_name_parts.join('.');\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You are given 2 words. You need to re turntrue if thesecond word or any of its rotations is a substring in the fi rst w ord\n  c y cpatter nCheck(\"a bcd\",\"abd\") => false\n  cycpa tte rnCheck(\"hello \",\"ell\") => t rue\n  cycpatternCheck(\"wha ssup\",\"psus\") => false cycpa tternCheck( \"abab\", \"baa\") =>  true\n cycpatternCheck(\"efe f\",\"eeff\") =>false\n  c ycpatternCheck(\"himenss\",\"s imen\") => t ru e \n  */\nconst cycpatternCheck= (a, b) => {\n  const arr = a.split(\"\");\n  const arr2 = b.split(\"\");\n  const len = arr.length;\n  const len2 = arr2.length;\n  const lenMin = Math.min(len, len2);\n  let i = 0;\n  let j = 0;\n  let flag = false;\n  while (i < lenMin) {\n    if (arr[i] === arr2[j]) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i] === arr2[j].toUpperCase()) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i].toUpperCase() === arr2[j]) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i].toUpperCase() === arr2[j].toUpperCase()) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i].toUpperCase() === arr2[j].toLowerCase()) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i].toLowerCase() === arr2[j].toUpperCase()) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i].toLowerCase() === arr2[j].toLowerCase()) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i].toLowerCase() === arr2[j].toUpperCase()) {\n      flag = true;\n      i++;\n      j++;\n    } else if (arr[i].toUpperCase() === arr2[j].toLowerCase()) {\n      flag = true;\n      i++;\n      j++;\n    } else {\n      i++;\n      j++;\n    }\n  }\n  return flag;\n};\nconst ternaryCheck = (a, b) => {\n  if (a.length === 0 || b.length === 0) {\n    return false;\n  }\n  return a.split(\"\").every((s) => {\n    return b.split(\"\").every((t) => {\n      return cycpatternCheck(s, t);\n    });\n  });\n};\n\n// TESTING\n\n/*\na b c d e f g h i j k l m n o p q r s t u v w x y z\n\nnCheck(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\", \"a b c d e f g h i j k l m n o p q r s t u v w x y z\") => true\ncycpatternCheck(\"himenss\", \"s imen\") => false\ncycpatternCheck(\"himenss\", \"i men\") => false\ncycpatternCheck(\"himenss\", \"men\") => false\ncycpatternCheck(\"himen s\", \"men\") => false\ncycpatternCheck(\"himen s\", \"men \") => false\ncycpatternCheck(\"himen s\", \"meni\") => false\ncycpatternCheck(\"himen s\", \"menim\") => false\ncycpatternCheck(\"himen s\", \"menim \") => false\ncycpatternCheck(\"himen s\", \"menis\") => false\ncycpatternCheck(\"himen s\", \"menimis\") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false\ncycpatternCheck(\"himen s\", \"menimis \") => false"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Given an integer. return a tuple that  hasthe number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount1 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n    if (num % i === 1) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount2 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n    if (num % i === 1) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount3 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n    if (num % i === 1) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount4 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount5 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n    if (num % i === 1) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount6 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n    if (num % i === 1) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount7 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount8 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount9 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount10 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount11 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount12 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount13 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount14 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount15 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount16 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount17 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount18 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }\n  return [count, num % count];\n};\n\nconst evenOddCount19 = (num) => {\n  let count = 0;\n  for (let i = 1; i <= num; i++) {\n    if (num % i === 0) {\n      count++;\n    }\n  }"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Given a positive integer, obtain its  roma n numeral equivalent as a string,\n and return it in lowercase.\n  Restri ction s: 1 <= num <=1000\n\n  E xamples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  let result = 0\n  for (let i = 1; i < number; i++) {\n    let current = number % i\n    let current_m = i\n    while (current > 0) {\n      current = current % 10\n      current_m = current_m * 10\n    }\n    result = current_m + result\n  }\n  return String(result)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle , fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Given the lengths of the three sides  of a  triangle. Return true if the three\n  sides form a right-angled triangle, fal se othe r wise.\n A right- angled triangle is a triangl e i n which one an gle is rightangle or\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n    const s = (a + b + c) / 2\n    return (s === a) || (s === b) || (s === c)\n}\n\n// console.log(rightAngleTriangle(3, 4, 5))\n// console.log(rightAngleTriangle(1, 2, 3))\n\nconst triangles = [\n    [3, 4, 5],\n    [1, 2, 3],\n    [2, 5, 4]\n]\n\nconst [a, b, c] = triangles[1]\n\nconsole.log(rightAngleTriangle(a, b, c))\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\" ,\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Write a function that accepts a listof st rings.\n  The list contains different words. Return the word with maximum  numb er\n  of uniquecharacter s. If multiple strings havemax imum number of  unique\n  cha racters, return the one wh ich comes first in lexi c ograph ical order. \n\n  fin dMax([\"na me\", \"of\", \"string\"]) === \"s tring\"\n  findMax([\"name \", \"enam\", \"game\"]) === \"en am\"\n  findM ax ( [\"aaaaaaa\", \"bb\",\"cc\"]) ===  \"\"aaaaaaa\"\n  */ \nconst find Max  = (words) => {\n  let {map,filter} = require('ramda');\n  let max = 0;\n  let count = 0;\n  let unique = 0;\n  let res = map(function(word){\n    let unique = 0;\n    let uniqueArr = map(function(character){\n      return character.toUpperCase();\n    },filter(function(character){\n      return character.length > 0;\n    },word));\n    let maxCount = 0;\n    for (let i = 0; i < uniqueArr.length; i++) {\n      if(count[uniqueArr[i]] === undefined){\n        count[uniqueArr[i]] = 0;\n      }\n      if (count[uniqueArr[i]] > maxCount){\n        maxCount = count[uniqueArr[i]];\n        max = uniqueArr[i];\n      }\n    }\n    unique += maxCount;\n    return max;\n  },words);\n  return res.filter(function(x){\n    return x!== undefined;\n  }).sort((a,b)=>{\n    return b - a;\n  })[0];\n};\nmodule.exports = Max;<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You're a hungry rabbit, and you alre ady h ave eaten acertain number of carrots,\n  but now you need to eat more ca rrots  to com p lete th e day's m eals.\n  you should return an  ar ray of [ total  number of ea ten carrots afteryour mea ls,\n                              the  number  of carro tsleft after your meals] if there arenot enoug h remaining carrots, you wi ll eat allre m aining carrots, but will sti ll be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  return number - need + remaining;\n}\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Given two lists operator, and operan d. Th e first list has basic algebra operations, and \n  the second list is a l ist o f integ e rs. Use  the twogiven lists to build the alg ebr ic \n  expressi on and return  the evaluation of this ex pression.\n\n The basica lgebra  operations :\n  Add ition ( +  )\n  Subtraction ( - ) M ultiplication( * ) \n Floor division ( // ) \n  Ex ponentiatio n(  ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const length = operator.length\n  const result = []\n  for (let i = 0; i < length; i++) {\n    const op = operator[i]\n    const opLen = operand.length\n    for (let j = 0; j < opLen - 1; j++) {\n      const operand = operand[j]\n      const subOp = operand[j]\n      const prod = operand[j + 1]\n      if (op === '+') {\n        result.push(operand[j] + subOp)\n      }\n      if (op === '-') {\n        result.push(operand[j] - subOp)\n      }\n      if (op === '*') {\n        result.push(operand[j] * subOp)\n      }\n      if (op === '/') {\n        result.push(operand[j] / subOp)\n      }\n      if (op === '**') {\n        result.push(Math.pow(operand[j], subOp))\n      }\n    }\n    if (op === '+') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '-') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '*') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '/') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '**') {\n      result.push(Math.pow(operand[opLen - 1], operand[opLen - 2]))\n    }\n  }\n  return result\n}\n\nconst array = [2, 3, 4, 5]\n\nconst doEvaluation = (operator, operand) => {\n  const length = operator.length\n  const result = []\n  for (let i = 0; i < length; i++) {\n    const op = operator[i]\n    const opLen = operand.length\n    for (let j = 0; j < opLen - 1; j++) {\n      const operand = operand[j]\n      const subOp = operand[j]\n      const prod = operand[j + 1]\n      if (op === '+') {\n        result.push(operand[j] + subOp)\n      }\n      if (op === '-') {\n        result.push(operand[j] - subOp)\n      }\n      if (op === '*') {\n        result.push(operand[j] * subOp)\n      }\n      if (op === '/') {\n        result.push(operand[j] / subOp)\n      }\n      if (op === '**') {\n        result.push(Math.pow(operand[j], subOp))\n      }\n    }\n    if (op === '+') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '-') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '*') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '/') {\n      result.push(operand[opLen - 1])\n    }\n    if (op === '**') {\n      result.push(Math.pow(operand[opLen - 1], operand[opLen - 2]))\n    }\n  }\n  return result\n}\n\nconst result = doAlgebra(operator, operand)\nconsole.log(result)\n\nconst resultEval = doEvaluation(operator, operand)\nconsole.log(resultEval)<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You are given a string s.\n  if s[i] i s a l etter, reverse its case from lowerto upper or vise versa, \n  otherwisekeepit as i t  is.\n If the st ring contains no letters, re ver se the string. \n  The functi on should return the resul ted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let str = s.split(\"\")\n  for(let i=0; i < str.length; i++){\n    if(str[i]!== \"\"){\n      if(str[i].length > 1){\n        str[i] = str[i].toUpperCase()\n      }else{\n        str[i] = str[i].toLowerCase()\n      }\n    }\n  }\n  return str.join(\"\")\n}\n\nconsole.log(solve(\"1234\"))<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Given a string 'text', return its md 5 has h equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Given two positive integers a and b,  retu rn the evendigits between a\n  andb, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = []\n  let i = a\n  while (i < b) {\n    result.push(i)\n    i = i * 2 + 1\n  }\n  return result\n}\n\nconsole.log(generateIntegers(2, 8))\nconsole.log(generateIntegers(8, 2))\nconsole.log(generateIntegers(10, 14))\n<|endoftext|>"}
