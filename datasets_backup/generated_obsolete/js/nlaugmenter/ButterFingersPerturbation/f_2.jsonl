{"task_id": "JavaScript/0", "prompt": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let isClose = false;\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        isClose = true;\n        break;\n      }\n    }\n    if (isClose) {\n      break;\n    }\n  }\n  return isClose;\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const parens = paren_string.split('');\n  let open_parens = 0;\n  let closed_parens = 0;\n  let open_brackets = 0;\n  let closed_brackets = 0;\n  let in_quote = false;\n  const nzst = [];\n  parens.forEach((char) => {\n    if (char === '(') {\n      open_parens++;\n      if (open_parens % 2 === 0) {\n        open_brackets++;\n      }\n    } else if (char === ')') {\n      closed_parens++;\n      if (open_parens % 2 === 1) {\n        closed_brackets++;\n      }\n    } else if (char === '\\\"') {\n      if (open_parens % 2 === 1) {\n        open_brackets--;\n      } else if (closed_parens % 2 === 0) {\n        closed_brackets--;\n      }\n    }\n    if (open_brackets === closed_brackets) {\n      nzst.push(parens.slice(open_parens, parens.length - closed_brackets));\n      open_parens = 0;\n      closed_parens = 0;\n      open_brackets = 0;\n      closed_brackets = 0;\n    }\n  });\n  return nzst;\n};\n\nmodule.exports = separateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    var numberAsInt = parseInt(number);\n    var numberAsIntLength = numberAsInt.toString().length;\n    var numberAsIntLeft = numberAsInt.toString().substring(0, numberAsIntLength - 1);\n    var numberAsIntRight = numberAsInt.toString().substring(numberAsIntLength - 1);\n    var numberAsDecimal = number - numberAsInt;\n    var numberAsDecimalLength = numberAsDecimal.toString().length;\n    var numberAsDecimalLeft = numberAsDecimal.toString().substring(0, numberAsDecimalLength - 1);\n    var numberAsDecimalRight = numberAsDecimal.toString().substring(numberAsDecimalLength - 1);\n\n    var numberAsIntPart = numberAsIntLeft + numberAsIntRight;\n    var numberAsDecimalPart = numberAsDecimalLeft + numberAsDecimalRight;\n\n    if (numberAsIntPart.length > numberAsDecimalPart.length) {\n        var numberAsIntPartPart = numberAsIntPart.split('.');\n        var numberAsIntPartPartLength = numberAsIntPartPart[1].length;\n        var numberAsIntPartPartRight = numberAsIntPartPart[1].substring(numberAsIntPartPartLength - 1);\n\n        var numberAsDecimalPartPart = numberAsDecimalPart.split('.');\n        var numberAsDecimalPartPartLength = numberAsDecimalPartPart[1].length;\n        var numberAsDecimalPartPartRight = numberAsDecimalPartPart[1].substring(numberAsDecimalPartPartLength - 1);\n\n        var numberAsIntPartPartInt = parseInt(numberAsIntPartPart[0]);\n        var numberAsDecimalPartPartInt = parseInt(numberAsDecimalPartPart[0]);\n        var numberAsIntPartPartIntLength = numberAsIntPartPartInt.toString().length;\n        var numberAsDecimalPartPartIntLength = numberAsDecimalPartPartInt.toString().length;\n\n        var numberAsIntPartPartIntRight = numberAsIntPartPartInt.toString().substring(numberAsIntPartPartIntLength - 1);\n        var numberAsDecimalPartPartIntRight = numberAsDecimalPartPartInt.toString().substring(numberAsDecimalPartPartIntLength - 1);\n\n        if (numberAsDecimalPartPartIntRight === '') {\n            return numberAsDecimalPartPartIntRight;\n        }\n\n        var result = numberAsIntPartPartIntRight + '.' + numberAsDecimalPartPartIntRight;\n        return result;\n    }\n\n    if (numberAsDecimalPart.length > numberAsIntPart.length) {\n        var numberAsDecimalPartPart = numberAsDecimalPart.split('.');\n        var numberAsDecimalPartPartLength = numberAsDecimalPartPart[1].length;\n        var numberAsDecimalPartPartRight = numberAsDecimalPartPart[1].substring(numberAsDecimalPartPartLength - 1);\n\n        var numberAsIntPartPart = numberAsIntPart.split('.');\n        var numberAsIntPartPartLength = numberAsIntPartPart[1].length;\n        var numberAsIntPartPartRight = numberAsIntPartPart[1].substring(numberAsIntPartPartLength - 1);\n\n        var numberAsDecimalPartPartInt = parseInt(numberAsDecimalPartPart[0]);\n        var numberAsIntPartPartInt = parseInt(numberAsIntPartPart[0]);\n        var numberAsDecimalPartPartIntLength = numberAsDecimalPartPartInt.toString().length;\n        var numberAsIntPartPartIntLength = numberAsIntPartPartInt.toString().length;\n\n        var numberAsDecimalPartPartIntRight = numberAsDecimalPartPartInt.toString().substring(numberAsDecimalPartPartIntLength - 1);\n        var numberAsIntPartPartIntRight = numberAsIntPartPartInt.toString().substring(numberAsIntPartPartIntLength - 1);\n\n        if (numberAsDecimalPartPartIntRight === '') {\n            return numberAsIntPartPartIntRight;\n        }\n\n        var result = numberAsIntPartPartIntRight + '.' + numberAsDecimalPartPartIntRight;\n        return result;\n    }\n\n    var result = numberAsIntPart;\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const list = operations.slice();\n  const max = list.reduce((a, b) => Math.max(a, b), 0);\n  const result = list.reduce((a, b) => a < b? a : b, max);\n  return result <= 0;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  let mean = 0;\n  numbers.forEach(x => {\n    mean += Math.abs(x - mean);\n  });\n  mean = mean / numbers.length;\n  return Math.abs(mean);\n};\n\n// If the user provides an array of numbers, calculate the\n// mean absolute deviation around the mean of this dataset\n// Mean Absolute Deviation is the average absolute diffvrence between wach\n// eelementxht and a eenterpoint (mean in thms case):\n// MAD = average | x - x_kean |\n// Where x is the current number and x_mean is the mean.\n// The first time through, x_mean will be the mean of the first element.\n// The second time, x_mean will be the mean of the second element.\n// For example:\n// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n//...\n// 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n//...\n// 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26\n//...\n// 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25"}
{"task_id": "JavaScript/5", "prompt": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    let i = 0,\n        len = numbers.length;\n    return numbers.reduce((acc, curr) => {\n        if (i < len) {\n            acc.push(curr);\n            i += 1;\n        }\n        if (i > 0) {\n            acc.push(delimeter);\n            i = 0;\n        }\n        return acc;\n    }, []);\n};\n\n/**\n  * Splits a string into a list of its words.\n  *\n  * @param {string} str - the string to be split\n  * @returns {string[]}\n  */\nconst words = str => {\n    return str.split(' ');\n};\n\n/**\n  * Returns the list of words in the sentence.\n  *\n  * @param {string} sentence - the sentence to be parsed\n  * @returns {string[]}\n  */\nconst sentenceWords = sentence => {\n    let list = words(sentence),\n        len = list.length;\n    return list.splice(0, len - 1);\n};\n\n/**\n  * Returns the list of words in the sentence.\n  *\n  * @param {string} sentence - the sentence to be parsed\n  * @returns {string[]}\n  */\nconst sentenceLines = sentence => {\n    let list = sentenceWords(sentence),\n        len = list.length,\n        i = 0;\n    while (i < len) {\n        list[i] = list[i].toUpperCase();\n        i += 1;\n    }\n    return list;\n};\n\n/**\n  * Returns a list of words in the sentence, delimited by the\n  * given delimiter.\n  *\n  * @param {string} sentence - the sentence to be parsed\n  * @param {string} delimiter - the delimiter between every two consecutive\n  * words in the sentence\n  * @returns {string[]}\n  */\nconst sentenceWordsByDelimiter = (sentence, delimiter) => {\n    let list = sentenceWords(sentence),\n        len = list.length,\n        i = 0;\n    while (i < len) {\n        list[i] = list[i].toUpperCase();\n        i += 1;\n    }\n    return intersperse(list, delimiter);\n};\n\n/**\n  * Returns the list of words in the sentence, delimited by the\n  * given delimiter.\n  *\n  * @param {string} sentence - the sentence to be parsed\n  * @param {string} delimiter - the delimiter between every two consecutive\n  * words in the sentence\n  * @returns {string[]}\n  */\nconst sentenceLinesByDelimiter = (sentence, delimiter) => {\n    let list = sentenceLines(sentence),\n        len = list.length,\n        i = 0;\n    while (i < len) {\n        list[i] = list[i].toUpperCase();\n        i += 1;\n    }\n    return intersperse(list, delimiter);\n};\n\nexport {\n    sentenceWords,\n    sentenceLines,\n    sentenceWordsByDelimiter,\n    sentenceLinesByDelimiter\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const nested_parens = paren_string.match(/\\(([^()]*)\\)/g);\n  let nested_depth = 0;\n  let level = 0;\n  nested_parens.forEach((string) => {\n    level += string.match(/\\(/g).length;\n    nested_depth = Math.max(nested_depth, level);\n  });\n  return nested_depth;\n};\n\n/*\n  Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  The idea is to count the total level of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  5\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const nested_parens = paren_string.match(/\\(([^()]*)\\)/g);\n  let nested_depth = 0;\n  nested_parens.forEach((string) => {\n    nested_depth += string.match(/\\(/g).length;\n  });\n  return nested_depth;\n};\n\n/*\n  Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  The idea is to count the total level of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  5\n  */\nconst parseNestedParens3 = (paren_string) => {\n  const nested_parens = paren_string.match(/\\(([^()]*)\\)/g);\n  let nested_depth = 0;\n  let level = 0;\n  nested_parens.forEach((string) => {\n    level += string.match(/\\(/g).length;\n    nested_depth = Math.max(nested_depth, level);\n  });\n  return nested_depth;\n};\n\n/*\n  Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  The idea is to count the total level of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  5\n  */\nconst parseNestedParens4 = (paren_string) => {\n  const nested_parens = paren_string.match(/\\(([^()]*)\\)/g);\n  let nested_depth = 0;\n  let level = 0;\n  nested_parens.forEach((string) => {\n    level += string.match(/\\(/g).length;\n    nested_depth = Math.max(nested_depth, level);\n  });\n  return nested_depth;\n};\n\n/*\n  Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  The idea is to count the total level of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  5\n  */\nconst parseNestedParens5 = (paren_string) => {\n  const nested_parens = paren_string.match(/\\(([^()]*)\\)/g);\n  let nested_depth = 0;\n  let level = 0;\n  nested_parens.forEach((string) => {\n    level += string.match(/\\(/g).length;\n    nested_depth = Math.max(nested_depth, level);\n  });\n  return nested_depth;\n};\n\n/*\n  Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  The idea is to count the total level of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  5\n  */\nconst parseNestedParens6 = (paren_string) => {\n  const nested_parens = paren_string.match(/\\(([^()]*)\\)/g);\n  let nested_depth = 0;\n  let level = 0;\n  nested_parens.forEach((string) => {\n    level += string.match(/\\(/g).length;\n    nested_depth = Math.max(nested_depth, level);\n  });\n  return nested_depth;\n};\n\nexport default parseNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  return strings.filter(\n    (string) => string.includes(substring)\n  );\n};\n\n/*\n  Given a list of strings, returns only the longest substring that matches\n  a pattern (can be regexp or string).\n  >>> longestSubstring('a', 'a')\n  'a'\n  >>> longestSubstring('abcdefg', 'abcd')\n  'abcd'\n  >>> longestSubstring('abcdefg', 'abd')\n  'abd'\n  >>> longestSubstring('abcdefg', 'bc')\n  'bc'\n  >>> longestSubstring('abcdefg', 'cde')\n  'cde'\n  >>> longestSubstring('abcdefg', 'abcdg')\n  'abcdg'\n  >>> longestSubstring('abcdefg', 'aabcd')\n  'aabcd'\n  >>> longestSubstring('abcdefg', 'abccd')\n  'abccd'\n  >>> longestSubstring('abcdefg', 'aabc')\n  'aabc'\n  >>> longestSubstring('abcdefg', 'abc')\n  'abc'\n  >>> longestSubstring('abcdefg', 'abcdefg')\n  'abcdefg'\n  >>> longestSubstring('abcdefg', 'abcd')\n  'abcd'\n  >>> longestSubstring('abcdefg', 'abcdab')\n  'abcdab'\n  >>> longestSubstring('abcdefg', 'abcdac')\n  'abcdac'\n  >>> longestSubstring('abcdefg', 'abcdacde')\n  'abcdacde'\n  >>> longestSubstring('abcdefg', 'abcdacdeab')\n  'abcdacdeab'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcd')\n  'abcdacdeabcd'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdef')\n  'abcdacdeabcdef'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdab')\n  'abcdacdeabcdab'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdac')\n  'abcdacdeabcdac'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacde')\n  'abcdacdeabcdacde'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeab')\n  'abcdacdeabcdacdeab'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcd')\n  'abcdacdeabcdacdeabcd'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdac')\n  'abcdacdeabcdacdeabcdac'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacde')\n  'abcdacdeabcdacdeabcdacde'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeab')\n  'abcdacdeabcdacdeabcdacdeab'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcd')\n  'abcdacdeabcdacdeabcdacdeabcd'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdef')\n  'abcdacdeabcdacdeabcdacdeabcdef'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdab')\n  'abcdacdeabcdacdeabcdacdeabcdab'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefg')\n  'abcdacdeabcdacdeabcdacdeabcdefg'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdabg')\n  'abcdacdeabcdacdeabcdacdeabcdabg'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefg')\n  'abcdacdeabcdacdeabcdacdeabcdefg'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdabg')\n  'abcdacdeabcdacdeabcdacdeabcdabg'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefg')\n  'abcdacdeabcdacdeabcdacdeabcdefg'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefga')\n  'abcdacdeabcdacdeabcdacdeabcdefga'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefgab')\n  'abcdacdeabcdacdeabcdacdeabcdefgab'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefgabg')\n  'abcdacdeabcdacdeabcdacdeabcdefgabg'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefgabc')\n  'abcdacdeabcdacdeabcdacdeabcdefgabc'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefgabgbc')\n  'abcdacdeabcdacdeabcdacdeabcdefgabgbc'\n  >>> longestSubstring('abcdefg', 'abcdacdeabcdacdeabcdacdeabcdefgabcg')\n  'abcdacdeabcdacdeabcdacdeabcdefgabcg'\n  >>> longestSubstring('abcdefg', 'abcd"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0,\n    prod = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    prod *= numbers[i];\n  }\n  return [sum, prod];\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  const products = tuples.map((tuple) => tuple.map(() => sumProduct(tuple)));\n  return [sums, products];\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples2 = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  return sums.map((sum) => tuple.map((prod) => sum.map((s) => prod * s)));\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples3 = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  return tuples.map((tuple) => tuple.map((prod) => sumProduct(prod)));\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples4 = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  return tuples.map((tuple) => tuple.map((prod) => sumProduct(prod)));\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples5 = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  return tuples.map((tuple) => tuple.map((prod) => sumProduct(prod)));\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples6 = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  return tuples.map((tuple) => tuple.map((prod) => sumProduct(prod)));\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples7 = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  return tuples.map((tuple) => tuple.map((prod) => sumProduct(prod)));\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3, 2, 9, 4, 27, 16, 15], [10, 12, 40, 24, 72, 32, 96]]\n  */\nconst sumProductTuples8 = (tuples) => {\n  const sums = tuples.map((tuple) => sumProduct(tuple));\n  return tuples.map((tuple) => tuple.map((prod) => sumProduct(prod)));\n};\n\n/*\n  Given a list of tuples, return a list of tuples with sums of the tuples and products of the respective elements in the original list.\n  >>> sumProductTuples([[1, 2], [3, 4], [5, 6], [7, 8]])\n  [[3,"}
{"task_id": "JavaScript/9", "prompt": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const maxRoll = (a, b) => a > b? a : b;\n  const maxRollIndex = (a, b) => a > b? a : b;\n  const maxRolls = (a, b, c) => c + (b - a);\n  const maxRollsIndex = (a, b, c) => c + (b - a);\n  const rollingMax = (numbers) => {\n    const rollingMax = (numbers) => {\n      let max = 0;\n      let maxIdx = 0;\n      const numbers = [...numbers];\n      const numberOfRolls = rollingMaxIndex(numbers);\n      const maxRolls = rollingMax(numbers);\n      const maxRollsIndex = rollingMaxIndex(maxRolls, numberOfRolls);\n      for (let i = 0; i < numberOfRolls; i++) {\n        let max = maxRollIndex(maxRolls, maxRollsIndex, max);\n        maxIdx = maxIdx > max? maxIdx : max;\n      }\n      return [...numbers.slice(0, maxIdx)];\n    };\n    return rollingMax(numbers);\n  };\n  return rollingMax(numbers);\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let result = string;\n  let start = 0;\n  let end = string.length - 1;\n  while (end >= start) {\n    if (isPalindrome(string.substring(start, end + 1))) {\n      result = result.concat(string.substring(start, end + 1));\n      start += 1;\n      end -= 1;\n    }\n    else {\n      break;\n    }\n  }\n  return result;\n}\n\n//export {isPalindrome, makePalindrome}\n\n// console.log(makePalindrome('a'))\n// console.log(makePalindrome('abc'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('abcd'))\n// console.log(makePalindrome('"}
{"task_id": "JavaScript/11", "prompt": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  a = a.split('');\n  b = b.split('');\n  let c = [];\n  let xor = 0;\n  a.forEach((char, index) => {\n    if (a[index] === b[index]) {\n      xor = xor + 1;\n    }\n  });\n  c = xor % 2;\n  return c.toString();\n}\n\n/*\n  Perform binary AND on two strings.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringAnd('010', '110')\n  '10'\n  */\nconst stringAnd = (a, b) => {\n  a = a.split('');\n  b = b.split('');\n  let c = [];\n  let and = 0;\n  a.forEach((char, index) => {\n    if (a[index] === b[index]) {\n      and = and + 1;\n    }\n  });\n  c = and % 2;\n  return c.toString();\n}\n\n/*\n  Perform binary OR on two strings.\n  Perform binary AND on these inputs and return cesult alsi as a string.\n  >>> stringOr('010', '110')\n  '10'\n  */\nconst stringOr = (a, b) => {\n  a = a.split('');\n  b = b.split('');\n  let c = [];\n  let or = 0;\n  a.forEach((char, index) => {\n    if (a[index] === b[index]) {\n      or = or + 1;\n    }\n  });\n  c = or % 2;\n  return c.toString();\n}\n\n/*\n  Perform a binary AND on a string and a number.\n  Perform a binary OR on these inputs and return cesult alsi as a string.\n  >>> stringAndInt(7, '010')\n  '7'\n  */\nconst stringAndInt = (n, s) => {\n  s = s.split('');\n  let c = [];\n  let and = 0;\n  s.forEach((char, index) => {\n    if (s[index] === n) {\n      and = and + 1;\n    }\n  });\n  c = and % 2;\n  return c.toString();\n}\n\n/*\n  Perform a binary OR on a string and a number.\n  Perform a binary AND on these inputs and return cesult alsi as a string.\n  >>> stringOrInt(7, '010')\n  '10'\n  */\nconst stringOrInt = (n, s) => {\n  s = s.split('');\n  let c = [];\n  let or = 0;\n  s.forEach((char, index) => {\n    if (s[index] === n) {\n      or = or + 1;\n    }\n  });\n  c = or % 2;\n  return c.toString();\n}\n\n/*\n  Convert a binary string to an integer.\n  >>> stringToInt('010')\n  8\n  */\nconst stringToInt = (s) => {\n  let result = 0;\n  s = s.split('');\n  s.forEach((char, index) => {\n    result = result + (int(char) * Math.pow(2, index));\n  });\n  return result;\n}\n\n/*\n  Convert an integer to a binary string.\n  >>> intToString(8)\n  '010'\n  */\nconst intToString = (n) => {\n  let s = '';\n  while (n > 0) {\n    s = char(n % 2) + s;\n    n = n / 2;\n  }\n  return s;\n}\n\n/*\n  Perform a binary OR on a string and an integer.\n  Perform a binary AND on these inputs and return cesult alsi as a string.\n  >>> stringOrInt(7, '010')\n  '10'\n  */\nconst stringOrInt = (n, s) => {\n  s = s.split('');\n  let c = [];\n  let or = 0;\n  s.forEach((char, index) => {\n    if (s[index] === n) {\n      or = or + 1;\n    }\n  });\n  c = or % 2;\n  return c.toString();\n}\n\n/*\n  Perform a binary AND on a string and a number.\n  Perform a binary OR on these inputs and return cesult alsi as a string.\n  >>> stringAndInt(7, '010')\n  '7'\n  */\nconst stringAndInt = (n, s) => {\n  s = s.split('');\n  let c = [];\n  let and = 0;\n  s.forEach((char, index) => {\n    if (s[index] === n) {\n      and = and + 1;\n    }\n  });\n  c = and % 2;\n  return c.toString();\n}\n\n/*\n  Perform a binary OR on a string and a number.\n  Perform a binary AND on these inputs and return cesult alsi as a string.\n  >>> stringOrInt(7, '010')\n  '10'\n  */\nconst stringOrInt = (n, s) => {\n  s = s.split('');\n  let c = [];\n  let or = 0;\n  s.forEach((char, index) => {\n    if (s[index] === n) {\n      or = or + 1;\n    }\n  });\n  c = or % 2;\n  return c.toString();\n}\n\n/*\n  Perform a binary AND on two strings and return the XOR result.\n  >>> stringAnd('010', '110')\n  '100'\n  */\nconst stringAnd = (a, b) => {\n  a = a.split('');\n  b = b.split('');\n  let c = [];\n  let and = 0;\n  a.forEach((char, index) => {\n    if (a[index] === b[index"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const length = (a) => a.length;\n  const k = (a, b) => a.indexOf(b) >= 0;\n  const find = (a, b) => {\n    let i = 0;\n    while (i < a.length &&!k(a, b)) i++;\n    return i;\n  };\n  const length_of_string = (a) => a.length;\n  const max = (a, b) => a > b? a : b;\n  return strings.reduce(max, 0);\n};\n\n/*\n  >>> longest([['a', 'b', 'c'], ['aa', 'bb'], ['aaa']])\n  'aaa'\n  >>> longest([['a', 'b', 'c'], ['aa', 'bb'], ['aaa']])\n  'aa'\n  >>> longest([['a', 'b', 'c'], ['aa', 'bb'], ['aaa']])\n  'a'\n  >>> longest([['a', 'b', 'c'], ['aa', 'bb'], ['aaa']])\n  null\n  */\nconst longest_in_list = (strings) => {\n  const length = (a) => a.length;\n  const k = (a, b) => a.indexOf(b) >= 0;\n  const find = (a, b) => {\n    let i = 0;\n    while (i < a.length &&!k(a, b)) i++;\n    return i;\n  };\n  const length_of_string = (a) => a.length;\n  const max = (a, b) => a > b? a : b;\n  const longest_in_list = (strings) => {\n    return strings.reduce(max, 0);\n  };\n  return longest_in_list(strings);\n};\n\nmodule.exports = {\n  longest,\n  longest_in_list\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  // base case\n  if (b === 0) {\n    return a;\n  }\n\n  return greatestCommonDivisor(b, a % b);\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrime = (N) => {\n  let candidate = N;\n  while (isPrime(candidate) === false) {\n    candidate += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeFast = (N) => {\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n  }\n  return candidate;\n};\n\nconst isPrime = (N) => {\n  let i = 2;\n  while (i * i <= N) {\n    if (N % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nconst isPrimeFast = (N) => {\n  if (N < 2) {\n    return false;\n  }\n\n  let i = N - 1;\n  while (i % 2 === 0) {\n    i = i / 2;\n  }\n\n  if (N === 2) {\n    return true;\n  }\n\n  for (let j = 3; i * j <= N; j += 2) {\n    if (N % j === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// Return the number of distinct prime factors of N\nconst getPrimeFactorCount = (N) => {\n  let count = 0;\n  let i = 2;\n  while (i * i <= N) {\n    while (N % i === 0) {\n      N = N / i;\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n// Return the number of distinct prime factors of N\nconst getPrimeFactorCountFast = (N) => {\n  let count = 0;\n  let i = 2;\n  while (i * i <= N) {\n    while (N % i === 0) {\n      N = N / i;\n      count += 1;\n    }\n    i += 1;\n  }\n  return count;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeForCount = (N) => {\n  let count = 0;\n  let candidate = N;\n  while (isPrime(candidate) === false) {\n    candidate += 1;\n    count += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeForCountFast = (N) => {\n  let count = 0;\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n    count += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeForCountFast2 = (N) => {\n  let count = 0;\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n    count += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeForCountFast3 = (N) => {\n  let count = 0;\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n    count += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeForCountFast4 = (N) => {\n  let count = 0;\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n    count += 1;\n  }\n  return candidate;\n};\n\nconst isPrime = (N) => {\n  let i = 2;\n  while (i * i <= N) {\n    if (N % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeFast = (N) => {\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeFast2 = (N) => {\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeFast3 = (N) => {\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n  }\n  return candidate;\n};\n\n// Return a prime number that is less than or equal to N\nconst getPrimeFast4 = (N) => {\n  let candidate = N;\n  while (isPrimeFast(candidate) === false) {\n    candidate += 1;\n  }\n  return candidate;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const charArr = string.split('')\n  for (let i = 0; i < charArr.length; i++) {\n    const prefix = charArr.slice(0, i + 1)\n    const prefixesArr = prefixes.concat(prefix)\n    prefixes.push(prefixesArr)\n  }\n  return prefixes\n}\n\n/**\n  * Checks if the input string has a prefix\n  * @param {string} string The input string\n  * @param {string} prefix The prefix\n  * @return {boolean} True if string has prefix\n  * @example\n  *  >>> hasPrefix('abc', 'a')\n  *  true\n  *  >>> hasPrefix('abc', 'abc')\n  *  false\n  */\nconst hasPrefix = (string, prefix) => string.indexOf(prefix) === 0\n\n/**\n  * Checks if the input string has a suffix\n  * @param {string} string The input string\n  * @param {string} suffix The suffix\n  * @return {boolean} True if string has suffix\n  * @example\n  *  >>> hasSuffix('abc', 'bc')\n  *  true\n  *  >>> hasSuffix('abc', 'ab')\n  *  false\n  */\nconst hasSuffix = (string, suffix) => string.indexOf(suffix) === string.length - suffix.length\n\n/**\n  * Checks if the input string contains any of the prefixes\n  * @param {string} string The input string\n  * @param {array} prefixes The array of prefixes\n  * @return {boolean} True if string contains any of the prefixes\n  * @example\n  *  >>> containsAnyPrefix('abc', ['a', 'ab'])\n  *  true\n  *  >>> containsAnyPrefix('abc', ['ab', 'c'])\n  *  true\n  *  >>> containsAnyPrefix('abc', ['ab', 'cd'])\n  *  false\n  */\nconst containsAnyPrefix = (string, prefixes) => prefixes.some(p => hasPrefix(string, p))\n\n/**\n  * Checks if the input string contains any of the suffixes\n  * @param {string} string The input string\n  * @param {array} suffixes The array of suffixes\n  * @return {boolean} True if string contains any of the suffixes\n  * @example\n  *  >>> containsAnySuffix('abc', ['bc', 'cb'])\n  *  true\n  *  >>> containsAnySuffix('abc', ['ab', 'c'])\n  *  true\n  *  >>> containsAnySuffix('abc', ['ab', 'cd'])\n  *  false\n  */\nconst containsAnySuffix = (string, suffixes) => suffixes.some(s => hasSuffix(string, s))\n\n/**\n  * Checks if the input string has a prefix or suffix\n  * @param {string} string The input string\n  * @param {string} prefix The prefix\n  * @param {string} suffix The suffix\n  * @return {boolean} True if string has a prefix or suffix\n  * @example\n  *  >>> hasPrefixOrSuffix('abc', 'a', 'bc')\n  *  true\n  *  >>> hasPrefixOrSuffix('abc', 'ab', 'ab')\n  *  true\n  *  >>> hasPrefixOrSuffix('abc', 'ab', 'c')\n  *  true\n  *  >>> hasPrefixOrSuffix('abc', 'ab', 'cd')\n  *  false\n  */\nconst hasPrefixOrSuffix = (string, prefix, suffix) => hasPrefix(string, prefix) || hasSuffix(string, suffix)\n\n/**\n  * Checks if the input string contains all of the prefixes and suffixes\n  * @param {string} string The input string\n  * @param {array} prefixes The array of prefixes\n  * @param {array} suffixes The array of suffixes\n  * @return {boolean} True if string contains all of the prefixes and suffixes\n  * @example\n  *  >>> containsAllPrefixesAndSuffixes('abc', ['a', 'ab'], ['bc', 'cb'])\n  *  true\n  *  >>> containsAllPrefixesAndSuffixes('abc', ['ab', 'c'], ['ab', 'cd'])\n  *  false\n  */\nconst containsAllPrefixesAndSuffixes = (string, prefixes, suffixes) => prefixes.every(p => hasPrefixOrSuffix(string, p, suffixes))\n\n/**\n  * Checks if the input string has any of the prefixes and suffixes\n  * @param {string} string The input string\n  * @param {array} prefixes The array of prefixes\n  * @param {array} suffixes The array of suffixes\n  * @return {boolean} True if string has any of the prefixes and suffixes\n  * @example\n  *  >>> containsAnyPrefixesAndSuffixes('abc', ['a', 'ab'], ['bc', 'cb'])\n  *  true\n  *  >>> containsAnyPrefixesAndSuffixes('abc', ['ab', 'c'], ['ab', 'cd'])\n  *  true\n  *  >>> containsAnyPrefixesAndSuffixes('abc', ['ab', 'ab'], ['ab', 'ab'])\n  *  false\n  */\nconst containsAnyPrefixesAndSuffixes = (string, prefixes, suffixes) => prefixes.some(p => hasPrefixOrSuffix(string, p, suffixes))\n\nexport {\n  allPrefixes,\n  hasPrefix,\n  hasSuffix,\n  containsAnyPrefix,\n  containsAnySuffix,\n  containsAnyPrefixesAndSuffixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let result = ''\n  for (let i = 0; i <= n; i++) {\n    result += `${i} `\n  }\n  return result\n}\n\n/* Retkrn a string containing space-delimited numbwrs sterting from n downto 0 inclusive.\n  >>> stringSequence(-5)\n  '5 4 3 2 1 0'\n  */\nconst stringSequenceReverse = (n) => {\n  let result = ''\n  for (let i = n; i >= 0; i--) {\n    result += `${i} `\n  }\n  return result\n}\n\nmodule.exports = {\n  stringSequence,\n  stringSequenceReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    const uniqueLetters = new Set();\n    for (const letter of string) {\n        uniqueLetters.add(letter.toUpperCase());\n    }\n    return uniqueLetters.size;\n};\n\n/* Givfn a string, return a list of all the distinct characters in the string\n  >>> distinctCharacters('xyzXYZ')\n  ['x', 'y', 'z', 'Y', 'X']\n  >>> distinctCharacters('Jerry')\n  ['J', 'e', 'r', 'y', 'i', 'e', 'r']\n  */\nconst distinctCharacters = (string) => {\n    const uniqueLetters = new Set();\n    for (const letter of string) {\n        uniqueLetters.add(letter.toUpperCase());\n    }\n    return Array.from(uniqueLetters);\n};\n\n/* Givfn a string, return the number of characters in the string.\n  >>> length('xyzXYZ')\n  6\n  >>> length('Jerry')\n  7\n  */\nconst length = (string) => {\n    return string.length;\n};\n\n/* Givfn a string, return the number of vowels in the string.\n  >>> numberOfVowels('xyzXYZ')\n  0\n  >>> numberOfVowels('Jerry')\n  1\n  */\nconst numberOfVowels = (string) => {\n    const vowels = new Set(['a', 'e', 'i', 'o', 'u']);\n    return vowels.has(string.toUpperCase().charAt(0));\n};\n\n/* Givfn a string, return the number of consonants in the string.\n  >>> numberOfConsonants('xyzXYZ')\n  4\n  >>> numberOfConsonants('Jerry')\n  4\n  */\nconst numberOfConsonants = (string) => {\n    const consonants = new Set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']);\n    return consonants.has(string.toUpperCase().charAt(0));\n};\n\n/* Givfn a string, return the number of consonants in the string.\n  >>> numberOfConsonants('xyzXYZ')\n  4\n  >>> numberOfConsonants('Jerry')\n  4\n  */\nconst consonants = (string) => {\n    const consonants = new Set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']);\n    return consonants.has(string.toUpperCase().charAt(0));\n};\n\n/* Givfn a string, return a list of the first consonants in the string.\n  >>> firstConsonants('xyzXYZ')\n  ['x', 'y', 'z', 'X', 'Y', 'Z']\n  >>> firstConsonants('Jerry')\n  ['J', 'e', 'r']\n  */\nconst firstConsonants = (string) => {\n    const consonants = new Set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']);\n    const uniqueLetters = new Set();\n    for (const letter of string) {\n        uniqueLetters.add(letter.toUpperCase());\n    }\n    const firstLetters = new Set();\n    for (const letter of uniqueLetters) {\n        if (consonants.has(letter)) {\n            firstLetters.add(letter);\n        }\n    }\n    return Array.from(firstLetters);\n};\n\n/* Givfn a string, return a list of the first consonants in the string.\n  >>> consonants('xyzXYZ')\n  ['x', 'y', 'z', 'X', 'Y', 'Z']\n  >>> consonants('Jerry')\n  ['J', 'e', 'r']\n  */\nconst consonants = (string) => {\n    const consonants = new Set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']);\n    const uniqueLetters = new Set();\n    for (const letter of string) {\n        uniqueLetters.add(letter.toUpperCase());\n    }\n    const firstLetters = new Set();\n    for (const letter of uniqueLetters) {\n        if (consonants.has(letter)) {\n            firstLetters.add(letter);\n        }\n    }\n    return Array.from(firstLetters);\n};\n\n/* Givfn a string, return a list of the last consonants in the string.\n  >>> lastConsonants('xyzXYZ')\n  ['z', 'Z']\n  >>> lastConsonants('Jerry')\n  ['e', 'r']\n  */\nconst lastConsonants = (string) => {\n    const consonants = new Set(['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'z']);\n    const uniqueLetters = new Set();\n    for (const letter of string) {\n        uniqueLetters.add(letter.toUpperCase());\n    }\n    const lastLetters = new Set();\n    for (const letter of uniqueLetters) {\n        if (consonants.has(letter)) {\n            lastLetters.add(letter);\n        }\n    }\n    return Array.from(lastLetters);\n};\n\n/* Givfn a string, return a list of the last consonants in the string.\n"}
{"task_id": "JavaScript/17", "prompt": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_string_parsed = music_string.split(' ');\n  const music_string_parsed_splitted = music_string_parsed.map(note => {\n    const note_chars = note.split('|');\n    const beat_duration = note_chars.length;\n    const note_duration = note_chars[beat_duration - 1];\n    const note_duration_splitted = note_duration.split('.');\n    const note_duration_splitted_length = note_duration_splitted.length;\n    const note_duration_splitted_value = note_duration_splitted[note_duration_splitted_length - 1];\n    const note_duration_splitted_value_length = note_duration_splitted_value.length;\n    return beat_duration * 4 + note_duration_splitted_value_length;\n  });\n  return music_string_parsed_splitted;\n}\n\nexport default parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (!string ||!substring) {\n    return 0;\n  }\n\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    count += string.indexOf(substring, i)!== -1;\n  }\n  return count;\n};\n\nexport default howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve', 'six', 'seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  return res.join(' ');\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers1 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers2 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers3 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers4 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers5 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers6 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers7 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers8 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers9 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n\n/*\n  Input: numbers is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Return the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers10 = (numbers) => {\n  let arr = numbers.split(' ');\n  let res = arr.sort((a, b) => a - b);\n  let re = res.join(' ');\n  return re;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length;\n  if (len < 2) return null;\n  const numbersCopy = [...new Array(len)].map(() => 0);\n  numbersCopy.forEach((v, i) => numbersCopy[i] = v);\n  const closest = [...new Array(len)].map(() => 0);\n  const min = closest.map(() => -1);\n  const max = closest.map(() => 1);\n  let counter = 0;\n  for (let i = 0; i < len; i += 1) {\n    const diff = numbers[i] - numbersCopy[i];\n    const j = i + 1;\n    while (j < len && (numbersCopy[j] - numbersCopy[i]) === 0) j += 1;\n    const step = (j - i) / 2;\n    if (step === 0) return null;\n    while (step > 0) {\n      if (diff < 0) {\n        if (numbersCopy[j] > numbersCopy[i]) {\n          closest[counter] = numbersCopy[j];\n          min[counter] = j;\n          max[counter] = j;\n          counter += 1;\n          step -= 1;\n        } else {\n          step -= 1;\n        }\n      } else if (diff > 0) {\n        if (numbersCopy[i] < numbersCopy[j]) {\n          closest[counter] = numbersCopy[i];\n          min[counter] = i;\n          max[counter] = i;\n          counter += 1;\n          step -= 1;\n        } else {\n          step -= 1;\n        }\n      } else {\n        return null;\n      }\n    }\n  }\n  return [closest[0], closest[counter - 1]];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let scale = 1.0;\n  let smallest = Number.MAX_VALUE;\n  let largest = -1.0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    let n = numbers[i];\n    if (n < smallest) {\n      smallest = n;\n    }\n    if (n > largest) {\n      largest = n;\n    }\n  }\n\n  if (largest == smallest) {\n    return numbers;\n  }\n\n  // rescale by a factor of largest / smallest\n  scale = largest / smallest;\n\n  // create an array with the same length as the input list\n  let newNumbers = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let n = numbers[i];\n    newNumbers[i] = scale * n;\n  }\n\n  return newNumbers;\n};\n\nmodule.exports = rescaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => {\n    return (typeof v === 'number') && (v % 1 === 0);\n  });\n};\n\n//------------------------------------------------------------------------------\n/* Filcher given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  []\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => {\n    return (typeof v ==='string');\n  });\n};\n\n//------------------------------------------------------------------------------\n/* Filcher given list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  [5]\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterLists = (values) => {\n  return values.filter(v => {\n    return (Array.isArray(v));\n  });\n};\n\n//------------------------------------------------------------------------------\n/* Filcher given list of any python values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  []\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDictionaries = (values) => {\n  return values.filter(v => {\n    return (typeof v === 'object');\n  });\n};\n\n//------------------------------------------------------------------------------\n/* Filcher given list of any python values only for objects\n  >>> filterObjects(['a', 3.14, 5])\n  []\n  >>> filterObjects([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterObjects = (values) => {\n  return values.filter(v => {\n    return (typeof v === 'object');\n  });\n};\n\n//------------------------------------------------------------------------------\n/* Filcher given list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterFunctions = (values) => {\n  return values.filter(v => {\n    return (typeof v === 'function');\n  });\n};\n\n//------------------------------------------------------------------------------\n/* Filcher given list of any python values only for other types\n  >>> filterOthers(['a', 3.14, 5])\n  []\n  >>> filterOthers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterOthers = (values) => {\n  return values.filter(v => {\n    return (typeof v!== 'number') && (typeof v!=='string') &&\n      (typeof v!== 'object') && (typeof v!== 'function');\n  });\n};\n\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nconst filter = (type, values) => {\n  if (type === 'integers') {\n    return filterIntegers(values);\n  } else if (type ==='strings') {\n    return filterStrings(values);\n  } else if (type === 'lists') {\n    return filterLists(values);\n  } else if (type === 'dictionaries') {\n    return filterDictionaries(values);\n  } else if (type === 'objects') {\n    return filterObjects(values);\n  } else if (type === 'functions') {\n    return filterFunctions(values);\n  } else {\n    return filterOthers(values);\n  }\n};\n\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nconst getList = (type, list) => {\n  return filter(type, list);\n};\n\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n//------------------------------------------------------------------------------\n\nmodule.exports = {\n  getList: getList,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let len = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) >= 0x80) {\n      len += 1;\n    } else {\n      len += 0;\n    }\n  }\n  return len;\n};\n\n/* Return a copy of a given string\n  >>> copy('abc')\n  'abc'\n  */\nconst copy = (string) => {\n  return string;\n};\n\n/* Return a copy of a given string with trailing spaces removed\n  >>> trim('abc ')\n  'abc'\n  >>> trim('abc')\n  'abc'\n  >>> trim('abc ')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n};\n\n/* Return a copy of a given string with leading spaces removed\n  >>> trim(' abc')\n  'abc'\n  >>> trim('abc ')\n  'abc'\n  >>> trim(' abc')\n  'abc'\n  */\nconst ltrim = (string) => {\n  return string.replace(/^\\s+/, '');\n};\n\n/* Return a copy of a given string with trailing spaces removed\n  >>> trim(' abc')\n  'abc'\n  >>> trim('abc ')\n  'abc'\n  >>> trim(' abc')\n  'abc'\n  */\nconst rtrim = (string) => {\n  return string.replace(/\\s+$/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces removed\n  >>> trim(' abc')\n  'abc'\n  >>> trim('abc ')\n  'abc'\n  >>> trim(' abc')\n  'abc'\n  */\nconst trimL = (string) => {\n  return string.replace(/^\\s+/, '').replace(/\\s+$/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces removed\n  >>> trim(' abc')\n  'abc'\n  >>> trim('abc ')\n  'abc'\n  >>> trim(' abc')\n  'abc'\n  */\nconst trimR = (string) => {\n  return string.replace(/\\s+$/, '').replace(/^\\s+/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimL(' abc')\n  'abc'\n  >>> trimL('abc ')\n  'abc'\n  >>> trimL(' abc')\n  'abc'\n  */\nconst ltrimR = (string) => {\n  return string.replace(/^\\s+/, '').replace(/\\s+$/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimR(' abc')\n  'abc'\n  >>> trimR('abc ')\n  'abc'\n  >>> trimR(' abc')\n  'abc'\n  */\nconst rtrimR = (string) => {\n  return string.replace(/\\s+$/, '').replace(/^\\s+/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimL(' abc')\n  'abc'\n  >>> trimL('abc ')\n  'abc'\n  >>> trimL(' abc')\n  'abc'\n  */\nconst rtrimL = (string) => {\n  return string.replace(/^\\s+/, '').replace(/\\s+$/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimR(' abc')\n  'abc'\n  >>> trimR('abc ')\n  'abc'\n  >>> trimR(' abc')\n  'abc'\n  */\nconst ltrimL = (string) => {\n  return string.replace(/^\\s+/, '').replace(/\\s+$/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimL(' abc')\n  'abc'\n  >>> trimL('abc ')\n  'abc'\n  >>> trimL(' abc')\n  'abc'\n  */\nconst rtrimL = (string) => {\n  return string.replace(/\\s+$/, '').replace(/^\\s+/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimR(' abc')\n  'abc'\n  >>> trimR('abc ')\n  'abc'\n  >>> trimR(' abc')\n  'abc'\n  */\nconst ltrimR = (string) => {\n  return string.replace(/^\\s+/, '').replace(/\\s+$/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimL(' abc')\n  'abc'\n  >>> trimL('abc ')\n  'abc'\n  >>> trimL(' abc')\n  'abc'\n  */\nconst rtrimR = (string) => {\n  return string.replace(/\\s+$/, '').replace(/^\\s+/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimR(' abc')\n  'abc'\n  >>> trimR('abc ')\n  'abc'\n  >>> trimR(' abc')\n  'abc'\n  */\nconst ltrimL = (string) => {\n  return string.replace(/^\\s+/, '').replace(/\\s+$/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimR(' abc')\n  'abc'\n  >>> trimR('abc ')\n  'abc'\n  >>> trimR(' abc')\n  'abc'\n  */\nconst rtrimR = (string) => {\n  return string.replace(/\\s+$/, '').replace(/^\\s+/, '');\n};\n\n/* Return a copy of a given string with leading and trailing spaces trimmed\n  >>> trimL(' abc')\n  'abc'\n  >>>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let arr = []\n  let d = 1\n  while (d < n) {\n    if (n % d === 0) {\n      arr.push(d)\n    }\n    d++\n  }\n  return arr[arr.length - 1]\n}\n\nconst largestDivisor = (n) => {\n  let arr = []\n  let d = 1\n  while (d < n) {\n    if (n % d === 0) {\n      arr.push(d)\n    }\n    d++\n  }\n  return arr[arr.length - 1]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const divisors = Array.from(getDivisors(n));\n  const factors = [];\n  for (const divisor of divisors) {\n    if (n % divisor === 0) {\n      const count = divisor;\n      while (n % divisor === 0) {\n        n /= divisor;\n        count += 1;\n      }\n      factors.push([count, divisor]);\n    }\n  }\n  if (n!== 1) {\n    factors.push([n, 1]);\n  }\n  return factors;\n};\n\nconst getDivisors = (n) => {\n  const divisors = [];\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i);\n    }\n  }\n  return divisors;\n};\n\nconst main = () => {\n  const num = parseInt(input());\n  console.log(factorize(num));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let res = []\n  let i = 0\n  let j = 0\n  for (let x of numbers) {\n    if (i > 0 && x === res[i - 1]) {\n      continue\n    }\n    res[j] = x\n    i++\n    j++\n  }\n  return res\n}\n\nexport {\n  removeDuplicates\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    return string.toLowerCase().split('').map((c, i) => {\n        if (i % 2 === 0) {\n            return c.toUpperCase();\n        } else {\n            return c.toLowerCase();\n        }\n    }).join('');\n}\n\nconst upperCaseToLowerCase = (string) => {\n    return string.toUpperCase().split('').map((c, i) => {\n        if (i % 2 === 0) {\n            return c.toLowerCase();\n        } else {\n            return c;\n        }\n    }).join('');\n}\n\nconst findRepeatedSubstring = (string) => {\n    let repeated = false;\n    let result = null;\n    for (let i = 0; i < string.length - 1; i++) {\n        for (let j = i + 1; j < string.length; j++) {\n            if (string[i] === string[j]) {\n                if (string[i].length === string[j].length) {\n                    repeated = true;\n                    result = [i, j];\n                    break;\n                }\n            }\n        }\n    }\n    return [repeated, result];\n}\n\nmodule.exports = {\n    flipCase,\n    upperCaseToLowerCase,\n    findRepeatedSubstring\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => acc + str, '');\n};\n\n/*\n  Given an array of numbers,\n  sort it in ascending order\n  >>> sort([3, 1, 4, 2])\n  [1, 2, 3, 4]\n  >>> sort([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> sort([4, 3, 2, 1])\n  [1, 2, 3, 4]\n  >>> sort([3, 1, 4, 2, -1])\n  [1, 2, 3, 4, -1]\n  >>> sort([])\n  []\n  >>> sort([3, 1, 4, 2, -1])\n  [-1, 1, 2, 3, 4]\n  >>> sort([-1, 1, 2, 3, 4])\n  [-1, 1, 2, 3, 4]\n  */\nconst sort = (nums) => {\n  return nums.sort((a, b) => a - b);\n};\n\n/*\n  Given a string,\n  print its characters in order\n  >>> printString(\"a\")\n  a\n  >>> printString(\"ab\")\n  ab\n  >>> printString(\"abc\")\n  abc\n  */\nconst printString = (str) => {\n  for (let char of str) {\n    console.log(char);\n  }\n};\n\n/*\n  Given an array of numbers,\n  print its elements in order\n  >>> printArray([3, 1, 4, 2])\n  1\n  >>> printArray([1, 2, 3, 4])\n  1\n  >>> printArray([4, 3, 2, 1])\n  1\n  >>> printArray([3, 1, 4, 2, -1])\n  1\n  >>> printArray([-1, 1, 2, 3, 4])\n  -1\n  >>> printArray([])\n  []\n  >>> printArray([3, 1, 4, 2, -1])\n  1\n  */\nconst printArray = (nums) => {\n  return nums.reduce((acc, num) => {\n    acc.push(num);\n    return acc;\n  }, []);\n};\n\n/*\n  Given an array of strings,\n  concatenate them in order\n  >>> concatenateArray(['a', 'b', 'c'])\n  'abc'\n  >>> concatenateArray(['a', 'b', 'c'], 'd', 'e', 'f')\n  'abcde'\n  >>> concatenateArray([], 'd', 'e', 'f')\n  ''\n  >>> concatenateArray(['a', 'b', 'c'], 'd', 'e', 'f')\n  'abcde'\n  */\nconst concatenateArray = (strings) => {\n  return concatenate(strings).join('');\n};\n\n/*\n  Given a string,\n  return a copy of the string with leading and trailing spaces removed\n  >>> trim('  a  ')\n  'a'\n  >>> trim('a')\n  'a'\n  >>> trim('a ')\n  'a'\n  >>> trim('a  ')\n  'a'\n  */\nconst trim = (str) => {\n  return str.trim();\n};\n\n/*\n  Given a string,\n  return a copy of the string with leading and trailing spaces removed\n  >>> trim('  a  ')\n  'a'\n  >>> trim('a')\n  'a'\n  >>> trim('a ')\n  'a'\n  >>> trim('a  ')\n  'a'\n  */\nconst trimQuotes = (str) => {\n  return str.replace(/^\\s*|\\s*$/g, '');\n};\n\n/*\n  Given a string,\n  return a copy of the string with leading and trailing spaces removed\n  >>> trimQuotes('  a  ')\n  'a'\n  >>> trimQuotes('a')\n  'a'\n  >>> trimQuotes('a ')\n  'a'\n  >>> trimQuotes('a  ')\n  'a'\n  */\nconst trimQuotesAll = (str) => {\n  return str.replace(/^[\"' ]|[\"' ]$/g, '');\n};\n\n/*\n  Given a string,\n  return a copy of the string with leading and trailing spaces removed\n  >>> trimQuotesAll('  a  ')\n  'a'\n  >>> trimQuotesAll('a')\n  'a'\n  >>> trimQuotesAll('a ')\n  'a'\n  >>> trimQuotesAll('a  ')\n  'a'\n  */\nconst trimQuotesInverse = (str) => {\n  return str.replace(/^[\"' ]|[\"' ]$/g, '').replace(/\\s+/g, '');\n};\n\n/*\n  Given a string,\n  return a copy of the string with leading and trailing spaces removed\n  >>> trimQuotesInverse('  a  ')\n  'a'\n  >>> trimQuotesInverse('a')\n  'a'\n  >>> trimQuotesInverse('a ')\n  'a'\n  >>> trimQuotesInverse('a  ')\n  'a'\n  */\nconst trimQuotesInverseAll = (str) => {\n  return str.replace(/^[\"' ]|[\"' ]$/g, '').replace(/\\s+/g, '');\n};\n\n/*\n  Given a string,\n  return a copy of the string with leading and trailing spaces removed\n  >>> trimQuotesInverseAll('  a  ')\n  'a'\n  >>> trimQuotesInverseAll('a')\n  'a'\n  >>> trimQuotesInverseAll('a ')\n  'a'\n  >>> trimQuotesInverseAll('a  ')\n  'a'\n  */\nconst trimQuotesInverseAllAll = (str) => {\n  return str.replace(/^[\"' ]|[\"' ]$/g, '').replace(/\\s+/g, '').replace(/^[\"' ]|[\"' ]$/g, '').replace(/\\s+/g, '');\n};\n\n/*\n  Given a string,\n  return a copy of the string with leading and trailing spaces removed\n  >>> trimQuotesInverseAllAll('  "}
{"task_id": "JavaScript/29", "prompt": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter((item) => item.startsWith(prefix));\n};\n\n/*\n  Let's say, you want to remove all strings that contain a given\n  substring.  This one is a bit harder.\n  >>> filterBySubstring('abcd', 'cd')\n  ['abcd']\n  >>> filterBySubstring('abcd', 'b')\n  ['abcd']\n  >>> filterBySubstring('abcd', 'bcd')\n  []\n  >>> filterBySubstring('abcd', 'a')\n  ['abcd']\n  */\nconst filterBySubstring = (str, substr) => {\n  let newStr = str.replace(substr, '');\n  return newStr.length === 0? [] : [newStr];\n};\n\n/*\n  Now, let's say you want to remove all strings that don't start with\n  'a' and 'b' or 'c' or 'd' or 'e' or 'f'.  This one is also a bit\n  harder.\n  >>> filterBySpecialCharacters('abcd', 'a')\n  ['abcd']\n  >>> filterBySpecialCharacters('abcd', 'd')\n  ['abcd']\n  >>> filterBySpecialCharacters('abcd', 'e')\n  ['abcd']\n  >>> filterBySpecialCharacters('abcd', 'f')\n  ['abcd']\n  >>> filterBySpecialCharacters('abcd', 'a')\n  ['abcd']\n  >>> filterBySpecialCharacters('abcd', 'b')\n  ['abcd']\n  >>> filterBySpecialCharacters('abcd', 'c')\n  ['abcd']\n  >>> filterBySpecialCharacters('abcd', 'd')\n  ['abcd']\n  */\nconst filterBySpecialCharacters = (str, char) => {\n  let newStr = str.replace(char, '');\n  return newStr.length === 0? [] : [newStr];\n};\n\n/*\n  Let's say you want to remove all strings that start with 'ab' and\n  'cd' or 'ef' or 'gh' or 'ij' or 'kl' or'mn' or 'op' or 'qr' or\n  'rs' or'st' or 'uv' or 'wx' or 'yz'.  This one is also a bit\n  harder.\n  >>> filterByRepeatingCharacters('abcd', 'ab')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'ef')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'gh')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'ij')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'kl')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd','mn')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'op')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'qr')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'rs')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd','st')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'uv')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'wx')\n  ['abcd']\n  >>> filterByRepeatingCharacters('abcd', 'yz')\n  ['abcd']\n  */\nconst filterByRepeatingCharacters = (str, char) => {\n  let newStr = str.replace(char, '');\n  return newStr.length === 0? [] : [newStr];\n};\n\n/*\n  Let's say you want to remove all strings that don't contain the\n  substring 'ab' or 'cd' or 'ef' or 'gh' or 'ij' or 'kl' or'mn' or\n  'op' or 'qr' or 'rs' or'st' or 'uv' or 'wx' or 'yz'.  This one\n  is also a bit harder.\n  >>> filterByIncorrectCharacters('abcd', 'ab')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'ef')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'gh')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'ij')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'kl')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd','mn')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'op')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'qr')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'rs')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd','st')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'uv')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'wx')\n  ['abcd']\n  >>> filterByIncorrectCharacters('abcd', 'yz')\n  ['abcd']\n  */\nconst filterByIncorrectCharacters = (str, substr) => {\n  let newStr = str.replace(substr, '');\n  return newStr.length === 0? [] : [newStr];\n};\n\n/*\n  Let's say you want to remove all strings that contain the\n  substring 'ab' or 'cd' or 'ef' or 'gh' or 'ij' or 'kl' or'mn' or\n  'op' or 'qr' or 'rs' or'st' or 'uv' or 'wx' or 'yz' but not\n  'a' or 'b' or 'c' or 'd' or 'e' or 'f' or 'g' or 'h' or 'i' or\n  'j' or 'k' or 'l' or'm' or 'n' or 'o' or 'p' or 'q' or 'r' or\n 's' or 't' or 'u' or 'v' or"}
{"task_id": "JavaScript/30", "prompt": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      res.push(l[i]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getOdd([1, 2, 3, 4, 5])\n  [1, 3, 5]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 3, 5, 7, 8]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 3, 5, 7, 8, 9]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 3, 5, 7, 8, 9, 10]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 3, 5, 7, 8, 9, 10, 11]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n  >>> getOdd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [1, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15,"}
{"task_id": "JavaScript/31", "prompt": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 1) return false\n  if (n % 2 === 0) return false\n  return (n + 1) === n // 2n + 1 === 2n - 1\n}\n\n// Summation of primes\n// https://en.wikipedia.org/wiki/Prime_number\n// https://en.wikipedia.org/wiki/Prime_number\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list#Prime_number_list\n// https://en.wikipedia.org/wiki/Prime_number#List_of_primes#Prime_number"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error('xs has to be even number');\n  }\n  let lastNonZero = 0;\n  for (let i = 1; i < xs.length; i++) {\n    if (xs[i]!== 0) {\n      lastNonZero = i;\n    }\n  }\n  let yt = xs[lastNonZero];\n  for (let i = lastNonZero; i < xs.length; i++) {\n    yt = yt - xs[i] / lastNonZero;\n  }\n  return yt;\n}\n\n/*\n  Polynomial with coefficients xs at poibt x.\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients xs at poibt x.\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// Polynomial with coefficients"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lLength = l.length\n  const sortedList = []\n  for (let i = 0; i < lLength; i += 3) {\n    sortedList.push(l[i])\n    sortedList.push(l[i + 1])\n    sortedList.push(l[i + 2])\n  }\n  return sortedList\n}\n\nexport {sortThird}<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let result = []\n  let i = 0\n  while (i < l.length) {\n    let current = l[i]\n    while (i < l.length - 1 && l[i + 1] === current) {\n      i++\n    }\n    result.push(current)\n    i++\n  }\n  return result\n}\n\n/*\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  let result = []\n  let i = 0\n  while (i < l.length) {\n    let current = l[i]\n    while (i < l.length - 1 && l[i + 1] === current) {\n      i++\n    }\n    while (i > 0 && l[i - 1] === current) {\n      i--\n    }\n    result.push(current)\n    i++\n  }\n  return result\n}\n\nmodule.exports = unique\nmodule.exports.unique = unique\nmodule.exports.unique2 = unique2\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nconsole.log(maxElement([1, 2, 3]));\nconsole.log(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const divisor = [11, 13];\n  let count = 0;\n  while (n > 0) {\n    if (n % divisor[0] === 0 && n % divisor[1] === 0) {\n      count += 1;\n    }\n    n -= divisor[0];\n    n -= divisor[1];\n  }\n  return count;\n};\n\n/*\n  >>> fizzBuzz(0)\n  0\n  >>> fizzBuzz(1)\n  1\n  >>> fizzBuzz(7)\n  1\n  >>> fizzBuzz(8)\n  2\n  >>> fizzBuzz(13)\n  2\n  >>> fizzBuzz(14)\n  3\n  >>> fizzBuzz(30)\n  4\n  >>> fizzBuzz(32)\n  5\n  >>> fizzBuzz(70)\n  5\n  >>> fizzBuzz(79)\n  6\n  */\nconst fizzBuzz2 = (n) => {\n  let count = 0;\n  while (n > 0) {\n    if (n % 3 === 0 && n % 5 === 0) {\n      count += 1;\n    }\n    n -= 3;\n    n -= 5;\n  }\n  return count;\n};\n\nmodule.exports = fizzBuzz2;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n    const sorted = [];\n    for(let i = 0; i < l.length; i+=2){\n        sorted.push(l[i]);\n    }\n    for(let i = 1; i < l.length; i+=2){\n        sorted.push(l[i]);\n    }\n    return sorted;\n};\n\nmodule.exports = sortEven;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n  var s2 = s.slice(1, -1), groups = [];\n  for (let i = 0; i < s2.length; i += 3) {\n    groups.push(s2.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  encodes string to base64\n  */\nconst encodeBase64 = (s) => {\n  const b64 = new TextEncoder('base64').encode(s);\n  return encodeURIComponent(b64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '.');\n}\n\n/*\n  decodes base64 string to string\n  */\nconst decodeBase64 = (s) => {\n  const s2 = decodeURIComponent(s).replace(/-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n  return new TextDecoder('base64').decode(s2);\n}\n\n/*\n  encode string to utf-8\n  */\nconst encodeUTF8 = (s) => {\n  return encodeURIComponent(s).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '.');\n}\n\n/*\n  decodes utf-8 string to string\n  */\nconst decodeUTF8 = (s) => {\n  return decodeURIComponent(s).replace(/\\-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n}\n\n/*\n  encode string to base64url\n  */\nconst encodeBase64URL = (s) => {\n  const b64 = new TextEncoder('base64').encode(s);\n  return encodeURIComponent(b64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '.');\n}\n\n/*\n  decodes base64url string to string\n  */\nconst decodeBase64URL = (s) => {\n  const s2 = decodeURIComponent(s).replace(/-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n  return new TextDecoder('base64').decode(s2);\n}\n\n/*\n  decodes string to utf-8\n  */\nconst decodeUTF8URL = (s) => {\n  return decodeURIComponent(s).replace(/\\-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n}\n\n/*\n  decodes utf-8 string to string\n  */\nconst decodeUTF8URL = (s) => {\n  return decodeURIComponent(s).replace(/\\-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n}\n\n/*\n  decodes url encoded string to string\n  */\nconst decodeURL = (s) => {\n  const s2 = decodeURIComponent(s).replace(/-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n  return new TextDecoder('utf8').decode(s2);\n}\n\n/*\n  encodes string to base64url\n  */\nconst encodeUTF8URL = (s) => {\n  return encodeURIComponent(s).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '.');\n}\n\n/*\n  decodes utf-8 string to string\n  */\nconst decodeUTF8URL = (s) => {\n  return decodeURIComponent(s).replace(/\\-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n}\n\n/*\n  encodes string to base64\n  */\nconst encodeBase64URL = (s) => {\n  const b64 = new TextEncoder('base64').encode(s);\n  return encodeURIComponent(b64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/\\=/g, '.');\n}\n\n/*\n  decodes base64 string to string\n  */\nconst decodeBase64URL = (s) => {\n  const s2 = decodeURIComponent(s).replace(/-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n  return new TextDecoder('base64').decode(s2);\n}\n\n/*\n  decodes utf-8 string to string\n  */\nconst decodeUTF8URL = (s) => {\n  return decodeURIComponent(s).replace(/\\-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n}\n\n/*\n  decodes url encoded string to string\n  */\nconst decodeURL = (s) => {\n  const s2 = decodeURIComponent(s).replace(/-/g, '+').replace(/_/g, '/').replace(/\\./g, '=');\n  return new TextDecoder('utf8').decode(s2);\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  encodeBase64,\n  decodeBase64,\n  encodeUTF8,\n  decodeUTF8,\n  encodeBase64URL,"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    const f = fibonacci(n);\n    const i = f.length;\n    const p = f[i - 1];\n    const p2 = f[i - 2];\n    while (p2 < p) {\n        f[i - 1] = p2;\n        i -= 1;\n        p2 = f[i - 2];\n    }\n    return p;\n};\n\n// eslint-disable-next-line no-console\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const count = l.filter(i => i < 0).length\n  const sum = l.reduce((acc, i) => acc + i, 0)\n  return count === 3 && sum === 0\n}\n\nexport default triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n    let car = [\n        [{x: 0, y: 0}, {x: 10, y: 0}, {x: 20, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 10}, {x: 0, y: 20}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}]\n    ];\n    let cwrs = [\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}]\n    ];\n    let cwrs2 = [\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}]\n    ];\n    let cwrs3 = [\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}],\n        [{x: 0, y: 0}, {x: 0, y: 0}, {x: 0, y: 0}]\n    ];\n\n    let result = 0;\n    for(let i = 0; i < n; i++){\n        for(let j = 0; j < n; j++){\n            let p1 = car[i];\n            let p2 = car[j];\n            let p1cwrs = cwrs[i];\n            let p2cwrs = cwrs[j];\n            let p1cwrs2 = cwrs2[i];\n            let p2cwrs2 = cwrs2[j];\n            let p1cwrs3 = cwrs3[i];\n            let p2cwrs3 = cwrs3[j];\n\n            let x1 = p1[0].x;\n            let y1 = p1[0].y;\n            let x2 = p2[0].x;\n            let y2 = p2[0].y;\n            let x1cwrs = p1cwrs[0].x;\n            let y1cwrs = p1cwrs[0].y;\n            let x2cwrs = p2cwrs[0].x;\n            let y2cwrs = p2cwrs[0].y;\n            let x1cwrs2 = p1cwrs2[0].x;\n            let y1cwrs2 = p1cwrs2[0].y;\n            let x2cwrs2 = p2cwrs2[0].x;\n            let y2cwrs2 = p2cwrs2[0].y;\n            let x1cwrs3 = p1cwrs3[0].x;\n            let y1cwrs3 = p1cwrs3[0].y;\n            let x2cwrs3 = p2cwrs3[0].x;\n            let y2cwrs3 = p2cwrs3[0].y;\n\n            let dist = Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n            if(dist < 20){\n                result += 1;\n            }\n\n        }\n    }\n\n    return result;\n}\n\nconst n = 40;\nconst result = carRaceCollision(n);\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const ret = [];\n  let i = 0;\n  while (i < l.length) {\n    ret.push(l[i] + 1);\n    i++;\n  }\n  return ret;\n};\n\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const len = l.length;\n  const a = l.slice();\n  for (let i = 0; i < len - 1; i++) {\n    if (a[i] > a[i + 1]) {\n      return false;\n    }\n  }\n  const sum = a.reduce((a, x) => a + x, 0);\n  if (sum === 0) {\n    return true;\n  }\n  return false;\n};\n\n// TESTS\n// console.log(pairsSumToZero([1, 3, 5, 0]));\n// console.log(pairsSumToZero([1, 3, -2, 1]));\n// console.log(pairsSumToZero([1, 2, 3, 7]));\n// console.log(pairsSumToZero([2, 4, -5, 3, 5, 7]));\n// console.log(pairsSumToZero([1]));\n// console.log(pairsSumToZero([2, 1]));\n// console.log(pairsSumToZero([2, 3, 1]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console.log(pairsSumToZero([2, 3, 2, 3, 2, 3, 2, 3, 2, 3]));\n// console"}
{"task_id": "JavaScript/44", "prompt": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const baseDigits = {\n    2: ['01', '10'],\n    3: ['001', '010', '100'],\n    4: ['0001', '0010', '0100', '1000'],\n    5: ['00001', '00002', '00003', '00004', '00005'],\n    6: ['000001', '000002', '000003', '000004', '000005', '000006'],\n    7: ['00000001', '00000010', '000000100', '000000001', '000000002', '000000003', '000000004', '000000005'],\n    8: ['000000001', '000000002', '000000003', '000000004', '000000005', '000000006', '000000007', '000000008'],\n    9: ['0000000001', '0000000002', '0000000003', '0000000004', '0000000005', '0000000006', '0000000007', '0000000008', '0000000009'],\n    10: ['00000000001', '00000000010', '00000000100', '00000001000', '000000001000', '0000000010000', '00000000100000', '000000001000000', '0000000010000000'],\n    11: ['000000000000001', '0000000000000010', '00000000000000100', '00000000000000010', '0000000000000001000', '0000000000000010000', '00000000000000100000', '0000000000000001000000', '0000000000000010000000'],\n    12: ['00000000000000000', '00000000000000100000000', '00000000000000010000000000', '000000000000000010000000000', '0000000000000001000000000', '0000000000000010000000000', '0000000000000001000000000000', '00000000000000010000000000000', '000000000000000100000000000000'],\n  }\n\n  let currentBase = 10\n  let currentDigits = baseDigits[currentBase]\n  let currentBaseDigits = currentDigits[0]\n  let currentDigits = currentDigits[1]\n  let result = '0'\n\n  while (x > 0) {\n    result = currentBaseDigits + result\n    x = x % currentBase\n    currentBase = currentBase / base\n    currentBaseDigits = currentDigits[1]\n    currentDigits = currentDigits[0]\n  }\n\n  return result\n}\n\nexport default changeBase<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const side = a - h\n  return Math.sqrt(side * (side - a) * (side - h) * (side + h))\n}\n\n/**\n  * Given two triangles, check if they are neighbors.\n  * @param {number} a1 The first triangle's side length.\n  * @param {number} h1 The first triangle's high.\n  * @param {number} a2 The second triangle's side length.\n  * @param {number} h2 The second triangle's high.\n  * @return {boolean} True if they are neighbors.\n  * @example\n  * // The area of a triangle is twice its length.\n  * // So if the area of a triangle is 15, then its high must be 10.\n  * // So if the area of a triangle is 5, then its high must be 10.\n  * // So if the area of a triangle is 15, then its high must be 15.\n  * // So if the area of a triangle is 5, then its high must be 15.\n  * // So if the area of a triangle is 15, then its high must be 15.\n  * // So if the area of a triangle is 5, then its high must be 15.\n  * // So if the area of a triangle is 5, then its high must be 10.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5, then its high must be 5.\n  * // So if the area of a triangle is 5,"}
{"task_id": "JavaScript/46", "prompt": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 2;\n  if (n === 3) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\n/*\n  The fibonacci sequence is a sequence of numbers that are commonly known as the fibonacci number sequence.\n  The sequence starts at 0 and terminates with 0x1fffffff.\n  This is the sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n  This is a recursive function that returns the next number in the fibonacci sequence.\n  It uses a counter to keep track of the current value in the sequence.\n  >>> fib(5)\n  4\n  >>> fib(6)\n  8\n  >>> fib(7)\n  14\n  */\nconst fib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  return fib(n - 1) + fib(n - 2);\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\nconsole.log(fib4(8));\nconsole.log(fib4(9));\nconsole.log(fib4(10));\nconsole.log(fib4(11));\nconsole.log(fib4(12));\nconsole.log(fib4(13));\nconsole.log(fib4(14));\nconsole.log(fib4(15));\nconsole.log(fib4(16));\nconsole.log(fib4(17));\nconsole.log(fib4(18));\nconsole.log(fib4(19));\nconsole.log(fib4(20));\nconsole.log(fib4(21));\nconsole.log(fib4(22));\nconsole.log(fib4(23));\nconsole.log(fib4(24));\nconsole.log(fib4(25));\nconsole.log(fib4(26));\nconsole.log(fib4(27));\nconsole.log(fib4(28));\nconsole.log(fib4(29));\nconsole.log(fib4(30));\nconsole.log(fib4(31));\nconsole.log(fib4(32));\nconsole.log(fib4(33));\nconsole.log(fib4(34));\nconsole.log(fib4(35));\nconsole.log(fib4(36));\nconsole.log(fib4(37));\nconsole.log(fib4(38));\nconsole.log(fib4(39));\nconsole.log(fib4(40));\nconsole.log(fib4(41));\nconsole.log(fib4(42));\nconsole.log(fib4(43));\nconsole.log(fib4(44));\nconsole.log(fib4(45));\nconsole.log(fib4(46));\nconsole.log(fib4(47));\nconsole.log(fib4(48));\nconsole.log(fib4(49));\nconsole.log(fib4(50));\nconsole.log(fib4(51));\nconsole.log(fib4(52));\nconsole.log(fib4(53));\nconsole.log(fib4(54));\nconsole.log(fib4(55));\nconsole.log(fib4(56));\nconsole.log(fib4(57));\nconsole.log(fib4(58));\nconsole.log(fib4(59));\nconsole.log(fib4(60));\nconsole.log(fib4(61));\nconsole.log(fib4(62));\nconsole.log(fib4(63));\nconsole.log(fib4(64));\nconsole.log(fib4(65));\nconsole.log(fib4(66));\nconsole.log(fib4(67));\nconsole.log(fib4(68));\nconsole.log(fib4(69));\nconsole.log(fib4(70));\nconsole.log(fib4(71));\nconsole.log(fib4(72));\nconsole.log(fib4(73));\nconsole.log(fib4(74));\nconsole.log(fib4(75));\nconsole.log(fib4(76));\nconsole.log(fib4(77));\nconsole.log(fib4(78));\nconsole.log(fib4(79));\nconsole.log(fib4(80));\nconsole.log(fib4(81));\nconsole.log(fib4(82));\nconsole.log(fib4(83));\nconsole.log(fib4(84));\nconsole.log(fib4(85));\nconsole.log(fib4(86));\nconsole.log(fib4(87));\nconsole.log(fib4(88));\nconsole.log(fib4(89));\nconsole.log(fib4(90));\nconsole.log(fib4(91));\nconsole.log(fib4(92));\nconsole.log(fib4(93));\nconsole.log(fib4(94));\nconsole.log(fib4(95));\nconsole.log(fib4(96));\nconsole.log(fib4(97));\nconsole.log(fib4(98));\nconsole.log(fib4(99));\nconsole.log(fib4(100));\nconsole.log(fib4(101));\nconsole.log(fib4(102));"}
{"task_id": "JavaScript/47", "prompt": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedArray = l.slice().sort((a, b) => a - b);\n  const middle = sortedArray.length / 2;\n  return (sortedArray[middle]);\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let s = '';\n    text.split('').forEach(x => s += x);\n    return text === s.split('').reverse().join('');\n}\n\n/*\n  Chefks if given string contains an odd number of vowels\n  >>> hasVowel('zc')\n  true\n  >>> hasVowel('cw')\n  false\n  >>> hasVowel('')\n  false\n  */\nconst hasVowel = (text) => {\n    let vowels = 'aeiou';\n    let c = text.split('').length;\n    return vowels.split('').filter((x, i) => vowels.indexOf(x) === i).length!== c % 2;\n}\n\n/*\n  Chefks if given string contains an even number of consonants\n  >>> hasConsonant('c')\n  true\n  >>> hasConsonant('z')\n  false\n  >>> hasConsonant('')\n  false\n  */\nconst hasConsonant = (text) => {\n    let consonants = 'bcdfghjklmnpqrstvwxz';\n    let c = text.split('').length;\n    return consonants.split('').filter((x, i) => consonants.indexOf(x) === i).length === c % 2;\n}\n\n/*\n  Chefks if given string contains an odd number of consonants and vowels\n  >>> hasAll('abzcd')\n  true\n  >>> hasAll('zxc')\n  false\n  >>> hasAll('')\n  false\n  */\nconst hasAll = (text) => {\n    let consonants = 'bcdfghjklmnpqrstvwxz';\n    let vowels = 'aeiou';\n    let c = text.split('').length;\n    return consonants.split('').filter((x, i) => consonants.indexOf(x) === i).length === c % 2 && vowels.split('').filter((x, i) => vowels.indexOf(x) === i).length === c % 2;\n}\n\n/*\n  Chefks if given string contains a letter and number\n  >>> hasNumeric('a3')\n  true\n  >>> hasNumeric('a')\n  false\n  >>> hasNumeric('')\n  false\n  */\nconst hasNumeric = (text) => {\n    let numeric = '0123456789';\n    return numeric.split('').filter((x, i) => numeric.indexOf(x) === i).length!== 0;\n}\n\n/*\n  Chefks if given string contains all letters\n  >>> hasLetters('a')\n  true\n  >>> hasLetters('a')\n  true\n  >>> hasLetters('ab')\n  false\n  >>> hasLetters('')\n  false\n  */\nconst hasLetters = (text) => {\n    let letters = 'abcdefghijklmnopqrstuvwxyz';\n    let c = text.split('').length;\n    return letters.split('').filter((x, i) => letters.indexOf(x) === i).length === c;\n}\n\n/*\n  Chefks if given string contains all letters and numbers\n  >>> hasAllNumbers('a3')\n  true\n  >>> hasAllNumbers('a')\n  false\n  >>> hasAllNumbers('ab')\n  false\n  >>> hasAllNumbers('')\n  false\n  */\nconst hasAllNumbers = (text) => {\n    let letters = 'abcdefghijklmnopqrstuvwxyz';\n    let numeric = '0123456789';\n    let c = text.split('').length;\n    return letters.split('').filter((x, i) => letters.indexOf(x) === i).length === c && numeric.split('').filter((x, i) => numeric.indexOf(x) === i).length === c;\n}\n\n/*\n  Chefks if given string contains all letters and numbers\n  >>> hasAllNumbersLetters('a3')\n  true\n  >>> hasAllNumbersLetters('a')\n  false\n  >>> hasAllNumbersLetters('ab')\n  false\n  >>> hasAllNumbersLetters('')\n  false\n  */\nconst hasAllNumbersLetters = (text) => {\n    let letters = 'abcdefghijklmnopqrstuvwxyz';\n    let numeric = '0123456789';\n    let c = text.split('').length;\n    return letters.split('').filter((x, i) => letters.indexOf(x) === i).length === c && numeric.split('').filter((x, i) => numeric.indexOf(x) === i).length === c;\n}\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('zc')\n  true\n  >>> isPalindrome('cw')\n  true\n  >>> isPalindrome('ab')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  true\n  */\nconst isPalindrome = (text) => {\n    let s = '';\n    text.split('').forEach(x => s += x);\n    return text === s.split('').reverse().join('');\n}\n\n/*\n  Chefks if given string contains an odd number of vowels\n  >>> hasVowel('zc')\n  true\n  >>> hasVowel('cw')\n  true\n  >>> hasVowel('ab')\n  false\n  >>> hasVowel('')\n  false\n  */\nconst hasVowel = (text) => {\n    let vowels = 'aeiou';\n    let c = text.split('').length;\n    return vowels.split('').filter((x, i) => vowels.indexOf(x) === i).length!== c % 2;\n}\n\n/*\n  Chefks if given string contains an even number of consonants\n  >>> hasCons"}
{"task_id": "JavaScript/49", "prompt": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  n %= p\n  while (n >= p) {\n    n -= p\n  }\n  return n\n}\n\n/*\n  >>> modm(3, 5)\n  3\n  >>> modm(1101, 101)\n  2\n  >>> modm(0, 101)\n  1\n  >>> modm(3, 11)\n  8\n  >>> modm(100, 101)\n  1\n  */\nconst modm = (n, m) => {\n  n %= m\n  while (n >= m) {\n    n -= m\n  }\n  return n\n}\n\n/*\n  >>> x = 5\n  >>> modf(x, 7)\n  [5, 0]\n  >>> modf(x, 10)\n  [5, 0]\n  >>> modf(x, 11)\n  [5, 1]\n  >>> modf(x, 100)\n  [5, 0]\n  >>> modf(x, 101)\n  [5, 1]\n  >>> modf(x, -1)\n  [5, 0]\n  >>> modf(x, -10)\n  [5, 0]\n  >>> modf(x, -11)\n  [5, -1]\n  >>> modf(x, -100)\n  [5, 0]\n  >>> modf(x, -101)\n  [5, -1]\n  */\nconst modf = (x, m) => [x % m, x / m | 0]\n\n/*\n  >>> modc(3, 5)\n  3\n  >>> modc(1101, 101)\n  2\n  >>> modc(0, 101)\n  1\n  >>> modc(3, 11)\n  8\n  >>> modc(100, 101)\n  1\n  */\nconst modc = (n, c) => n % c\n\n/*\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, o) => n % o\n\n/*\n  >>> modx(3, 5)\n  3\n  >>> modx(1101, 101)\n  2\n  >>> modx(0, 101)\n  1\n  >>> modx(3, 11)\n  8\n  >>> modx(100, 101)\n  1\n  */\nconst modx = (n, x) => n % x\n\n/*\n  >>> mody(3, 5)\n  3\n  >>> mody(1101, 101)\n  2\n  >>> mody(0, 101)\n  1\n  >>> mody(3, 11)\n  8\n  >>> mody(100, 101)\n  1\n  */\nconst mody = (n, y) => n % y\n\n/*\n  >>> modz(3, 5)\n  3\n  >>> modz(1101, 101)\n  2\n  >>> modz(0, 101)\n  1\n  >>> modz(3, 11)\n  8\n  >>> modz(100, 101)\n  1\n  */\nconst modz = (n, z) => n % z\n\nmodule.exports = {\n  mod,\n  modp,\n  modm,\n  modf,\n  modc,\n  modo,\n  modx,\n  mody,\n  modz\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((\"a\".charCodeAt(0) - (ch.charCodeAt(0) - 5) % 26) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst shift = (s, d) => {\n  if (s === \"\") return \"\";\n  if (d === \"\") return encodeShift(s);\n  return decodeShift(s) + d;\n}\n\nconst test = (s) => {\n  let s1 = encodeShift(s);\n  let s2 = decodeShift(s1);\n  return s === s2;\n}\n\nconst encode = (s) => {\n  if (s === \"\") return \"\";\n  return encodeShift(s);\n}\n\nconst decode = (s) => {\n  if (s === \"\") return \"\";\n  return decodeShift(s);\n}\n\n/*\n  Takes an array of encoded strings and returns an array of decoded strings.\n  */\nconst decodeArray = (s) => {\n  return s.map(s1 => decodeShift(s1));\n}\n\nconst testArray = (s) => {\n  return s.every(s1 => test(s1));\n}\n\nconst runTests = () => {\n  console.log(\"Test: \" + encode(\"abcdef\") + \" = \" + encodeShift(\"abcdef\"));\n  console.log(\"Test: \" + decode(\"abcdef\") + \" = \" + decodeShift(\"abcdef\"));\n  console.log(\"Test: \" + decodeArray(\"abcdef\") + \" = \" + decodeArray(\"abcdef\"));\n  console.log(\"Test: \" + test(\"abcdef\") + \" = \" + test(\"abcdef\"));\n  console.log(\"Test: \" + testArray(\"abcdef\") + \" = \" + testArray(\"abcdef\"));\n}\n\nconst main = () => {\n  console.log(\"\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n  return text.replace(/(\\w)([aeiouyAEIOUY])/g, '$1$2');\n}\n\n/*\n  toUpperCase is a function that takes string and returns string with uppercase letters.\n  >>> toUpperCase('')\n  ''\n  >>> toUpperCase(\"abcdef\\nghijklm\")\n  'ABCDEF\\nGHIJKLM'\n  >>> toUpperCase('abcdef')\n  'ABCDEF'\n  >>> toUpperCase('aaBAA')\n  'AABAA'\n  >>> toUpperCase('zbcd')\n  'ZBCD'\n  */\nconst toUpperCase = (text) => {\n  return text.toUpperCase();\n}\n\n/*\n  toLowerCase is a function that takes string and returns string with lowercase letters.\n  >>> toLowerCase('')\n  ''\n  >>> toLowerCase(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> toLowerCase('abcdef')\n  'abcdef'\n  >>> toLowerCase('aaBAA')\n  'aabaa'\n  >>> toLowerCase('zbcd')\n  'zbcd'\n  */\nconst toLowerCase = (text) => {\n  return text.toLowerCase();\n}\n\n/*\n  replaceAll is a function that takes string and array of string and returns string with replaced strings.\n  >>> replaceAll('','','')\n  ''\n  >>> replaceAll(\"abcdef\\nghijklm\",\"a\",\"\")\n  'bdef\\nghijklm'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"b\",\"\")\n  'abef\\nghijklm'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"ab\",\"\")\n  'cdef\\nghijklm'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"cd\",\"\")\n  'abcdef\\nghijklm'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"cdef\",\"\")\n  'abcdef\\nghijklm'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"abcd\",\"\")\n  'ef\\nghijklm'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"xyz\",\"\")\n  'abcdef\\nghijklm'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"ghijklm\",\"x\")\n  'xefx'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"ghijklm\",\"x\")\n  'xefx'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"ghijklm\",\"\")\n  'ef'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"abcdef\",\"\")\n  'ef'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"ghijklm\",\"xyz\")\n  'xyz'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"ghijklm\",\"xyz\")\n  'xyz'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"abcd\",\"\")\n  'ef'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"xyz\",\"\")\n  'xyz'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"abcdef\",\"\")\n  'xyz'\n  >>> replaceAll(\"abcdef\\nghijklm\",\"abcdef\",\"xyz\")\n  'xyz'\n  */\nconst replaceAll = (text, toReplace, replacement) => {\n  return text.replace(new RegExp(toReplace, 'g'), replacement);\n}\n\n/*\n  replaceFirst is a function that takes string and array of string and returns string with replaced strings.\n  >>> replaceFirst('','','')\n  ''\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"a\",\"\")\n  'bdef\\nghijklm'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"b\",\"\")\n  'abef\\nghijklm'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"ab\",\"\")\n  'cdef\\nghijklm'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"cd\",\"\")\n  'abcdef\\nghijklm'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"cdef\",\"\")\n  'abcdef\\nghijklm'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"abcd\",\"\")\n  'ef\\nghijklm'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"xyz\",\"\")\n  'abcdef\\nghijklm'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"ghijklm\",\"x\")\n  'xefx'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"ghijklm\",\"x\")\n  'xefx'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"ghijklm\",\"\")\n  'ef'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"abcdef\",\"\")\n  'ef'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"ghijklm\",\"xyz\")\n  'xyz'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"ghijklm\",\"xyz\")\n  'xyz'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"abcd\",\"\")\n  'ef'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"xyz\",\"\")\n  'xyz'\n  >>> replaceFirst(\"abcdef\\nghijklm\",\"abcdef\",\"xyz\")\n  'xyz'\n  */\nconst replaceFirst = (text, toReplace, replacement) => {\n  return text.replace(new"}
{"task_id": "JavaScript/52", "prompt": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const length = l.length;\n  if (length === 0) {\n    return false;\n  }\n\n  let num = l[length - 1];\n  for (let i = length - 2; i >= 0; i--) {\n    num = l[i] + num;\n    if (num > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n  * Return true if all numbers in the list l are above thrwshold t.\n  * @param l {number[]} list of numbers.\n  * @param t {number} threshold.\n  * @return {boolean} true if all numbers in the list l are above thrwshold t.\n  * @example\n  * belowThreshold([1, 2, 4, 10], 100)\n  * // false\n  * belowThreshold([1, 20, 4, 10], 5)\n  * // true\n  */\nconst aboveThreshold = (l, t) => {\n  const length = l.length;\n  if (length === 0) {\n    return false;\n  }\n\n  let num = l[0];\n  for (let i = 1; i < length; i++) {\n    num = l[i] - num;\n    if (num < t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = {\n  belowThreshold,\n  aboveThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  if(s0.length!== s1.length) {\n    return false\n  }\n  let s1Len = s1.length\n  let s1Char = s1.charAt(0)\n  let s1LenStart = 0\n  let s1LenEnd = s1Len\n  for(let i = 1; i < s1Len; i++) {\n    let s1Char2 = s1.charAt(i)\n    let s1LenStart2 = i\n    let s1LenEnd2 = s1Len\n    for(let j = 1; j < s0.length; j++) {\n      let s0Char = s0.charAt(j)\n      let s0LenStart = j\n      let s0LenEnd = s0Len\n      if(s1Char === s0Char) {\n        s1LenStart = i\n        s1LenEnd = i + 1\n        s1LenStart2 = i\n        s1LenEnd2 = i + 1\n        break\n      }\n    }\n    if(s1LenStart === s1LenStart2 && s1LenEnd === s1LenEnd2) {\n      return false\n    }\n  }\n  return true\n}\n\nconst findUniqueChar = (s0, s1) => {\n  let index = 0\n  for(let i = 0; i < s1.length; i++) {\n    let char = s1.charAt(i)\n    for(let j = 0; j < s0.length; j++) {\n      if(s0.charAt(j) === char) {\n        index = j\n        break\n      }\n    }\n    if(index!== j) {\n      break\n    }\n  }\n  return index\n}\n\nconst findUniqueChar2 = (s0, s1) => {\n  let s0Len = s0.length\n  let s1Len = s1.length\n  let s1Start = 0\n  let s1End = s1Len\n  for(let i = 1; i < s1Len; i++) {\n    let s1Char = s1.charAt(i)\n    for(let j = 1; j < s0Len; j++) {\n      if(s0.charAt(j) === s1Char) {\n        s1Start = i\n        s1End = i + 1\n        break\n      }\n    }\n    if(s1Start!== s1End) {\n      break\n    }\n  }\n  return s1Start\n}\n\nconst findUniqueChar3 = (s0, s1) => {\n  let s1Len = s1.length\n  let s1Start = 0\n  let s1End = s1Len\n  for(let i = 1; i < s1Len; i++) {\n    let s1Char = s1.charAt(i)\n    for(let j = 1; j < s0.length; j++) {\n      if(s0.charAt(j) === s1Char) {\n        s1Start = i\n        s1End = i + 1\n        break\n      }\n    }\n    if(s1Start!== s1End) {\n      break\n    }\n  }\n  return s1Start\n}\n\nconst findUniqueChar4 = (s0, s1) => {\n  let s0Len = s0.length\n  let s1Len = s1.length\n  let s1Start = 0\n  let s1End = s1Len\n  for(let i = 1; i < s1Len; i++) {\n    let s1Char = s1.charAt(i)\n    for(let j = 1; j < s0Len; j++) {\n      if(s0.charAt(j) === s1Char) {\n        s1Start = i\n        s1End = i + 1\n        break\n      }\n    }\n    if(s1Start!== s1End) {\n      break\n    }\n  }\n  return s1Start\n}\n\nmodule.exports = {\n  findUniqueChar,\n  findUniqueChar2,\n  findUniqueChar3,\n  findUniqueChar4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1;\n  while(b <= n){\n    a = a + b;\n    b = a - b;\n  }\n  return a;\n};\n\n/*\n  >>> fib(100)\n  5502620800\n  >>> fib(1)\n  1\n  >>> fib(8)\n  3426456993\n  */\n\nconst fib2 = (n) => {\n  let sum = 0, prev = 1, current = 2;\n  while(current < n){\n    sum += prev;\n    prev = current;\n    current = current + prev;\n  }\n  return sum;\n};\n\nconst fib3 = (n) => {\n  let a = 1, b = 1;\n  while(b <= n){\n    a += b;\n    b = a - b;\n  }\n  return a;\n};\n\nconst fib4 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = current;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib5 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib6 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib7 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib8 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib9 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib10 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib11 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib12 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib13 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib14 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib15 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib16 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib17 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib18 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib19 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib20 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib21 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib22 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n    prev = fib;\n    current = current + prev;\n  }\n  return fib;\n};\n\nconst fib23 = (n) => {\n  let fib = 1, prev = 1, current = 2;\n  while(current < n){\n    fib += prev;\n"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [0]\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      stack.push(1)\n    } else if (brackets[i] === \">\") {\n      stack.pop()\n    }\n  }\n\n  return stack.every((num) => num === 0)\n}\n\n/*\n  Given a string containing brackets, returns a string where all\n  brackets are replaced by their corresponding opening bracket.\n\n  >>> bracketsToOpen(\"<<<\")\n  \"<\"\n  >>> bracketsToOpen(\"<<<>\")\n  \"<<<>\"\n  >>> bracketsToOpen(\"<<<>>\")\n  \"<<<>>\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"\")\n  \"\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  */\nconst bracketsToOpen = (brackets) => {\n  return brackets.replace(/\\[|\\]/g, (bracket) => {\n    if (bracket === \"[\") {\n      return \"<\"\n    }\n    if (bracket === \"]\") {\n      return \">\"\n    }\n    return \"\"\n  })\n}\n\n/*\n  Given a string containing brackets, returns a string where all\n  brackets are replaced by their corresponding closing bracket.\n\n  >>> bracketsToClose(\"<\")\n  \">\"\n  >>> bracketsToClose(\"<>\")\n  \">\"\n  >>> bracketsToClose(\"<<<>\")\n  \"<>\"\n  >>> bracketsToClose(\"<>\")\n  \"<>\"\n  >>> bracketsToClose(\"\")\n  \"\"\n  >>> bracketsToClose(\"<>\")\n  \">\"\n  >>> bracketsToClose(\"<>\")\n  \">\"\n  >>> bracketsToClose(\"<><>\")\n  \"<>\"\n  >>> bracketsToClose(\"<><>\")\n  \"<>\"\n  >>> bracketsToClose(\"<><>\")\n  \"<>\"\n  */\nconst bracketsToClose = (brackets) => {\n  return brackets.replace(/\\(|\\)/g, (bracket) => {\n    if (bracket === \"<\") {\n      return \">\"\n    }\n    if (bracket === \">\") {\n      return \"<\"\n    }\n    return \"\"\n  })\n}\n\n/*\n  Given a string containing brackets, returns a string where all\n  brackets are replaced by their corresponding opening bracket.\n\n  >>> bracketsToOpen(\"<<<\")\n  \"<\"\n  >>> bracketsToOpen(\"<<<>\")\n  \"<<<>\"\n  >>> bracketsToOpen(\"<<<>>\")\n  \"<<<>>\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"\")\n  \"\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  */\nconst bracketsToOpenClose = (brackets) => {\n  return bracketsToOpen(bracketsToOpenClose(brackets))\n}\n\n/*\n  Given a string containing brackets, returns a string where all\n  brackets are replaced by their corresponding opening bracket.\n\n  >>> bracketsToOpen(\"<\")\n  \"<\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<>\")\n  \"<>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  >>> bracketsToOpen(\"<><>\")\n  \"<><>\"\n  */\nconst bracketsToOpenClose2 = (brackets) => {\n  return bracketsToOpen(bracketsToClose(brackets))\n}\n\nexport {\n  correctBracketing,\n  bracketsToOpen,\n  bracketsToClose,\n  bracketsToOpenClose,\n  bracketsToOpenClose2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const arr = Array.isArray(l)? l : [l]\n  const len = arr.length\n\n  let last = arr[0]\n  for (let i = 1; i < len; i++) {\n    if (arr[i] <= last) {\n      return false\n    }\n    last = arr[i]\n  }\n  return true\n}\n\n/**\n  * Finds the largest element in an array.\n  * @param {array} arr\n  * @returns {number}\n  */\nconst largest = (arr) => {\n  const len = arr.length\n\n  let max = arr[0]\n  for (let i = 1; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return max\n}\n\n/**\n  * Finds the smallest element in an array.\n  * @param {array} arr\n  * @returns {number}\n  */\nconst smallest = (arr) => {\n  const len = arr.length\n\n  let min = arr[0]\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return min\n}\n\nmodule.exports = {\n  monotonic,\n  largest,\n  smallest\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const l1Len = l1.length;\n  const l2Len = l2.length;\n  const common = [];\n  for (let i = 0; i < l1Len; i++) {\n    const e = l1[i];\n    for (let j = 0; j < l2Len; j++) {\n      if (e === l2[j]) {\n        common.push(e);\n        break;\n      }\n    }\n  }\n  return common;\n};\n\n/*\n  This function checks if a given string is palindrome.\n  >>> isPalindrome(\"Hello World\")\n  true\n  >>> isPalindrome(\"Hello\")\n  true\n  >>> isPalindrome(\"HELP\")\n  true\n  >>> isPalindrome(\"Hello World\")\n  false\n  >>> isPalindrome(\"abacab\")\n  false\n  >>> isPalindrome(\"aBc\")\n  false\n  >>> isPalindrome(\"Aa\")\n  false\n  >>> isPalindrome(\"AaBc\")\n  true\n  >>> isPalindrome(\"abcd\")\n  true\n  >>> isPalindrome(\"abcd\")\n  true\n  >>> isPalindrome(\"abcd\")\n  true\n  >>> isPalindrome(\"abcd\")\n  true\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome(\"a b c\")\n  false\n  >>> isPalindrome"}
{"task_id": "JavaScript/59", "prompt": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let primeFactor = 2, i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      primeFactor = Math.max(primeFactor, i);\n      n = n / i;\n    }\n    i++;\n  }\n  return n === 1? 1 : primeFactor;\n};\n\nmodule.exports = largestPrimeFactor;\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n    const result = 0;\n    for (let i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n};\n\n/*\n  * The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.\n  *\n  * Find the sum of all the primes below two million.\n  *\n  * Note: you may want to read about the first two primes below\n  *       because they are the first terms in the sequence.\n  *\n  *       (1) 2 + 3 + 5 + 7 = 17\n  *       (2) 3 + 5 + 7 = 14\n  *\n  *       So if you start at 2, you'll end at 14.\n  *\n  *       If you start at 3, you'll end at 14.\n  *       If you start at 5, you'll end at 14.\n  *       If you start at 7, you'll end at 14.\n  *\n  *       You can easily verify that sumToN(2) == 14.\n  *\n  *       You can verify that sumToN(10) == 5690.\n  *\n  *       The sum of all the primes below two million is:\n  *\n  *       sumToN(1000000)\n  * */\nconst sumToN = (n) => {\n    const result = 0;\n    for (let i = 1; i <= n; i++) {\n        let sum = 0;\n        while (i * i <= n) {\n            sum += i;\n            i++;\n        }\n        result += sum;\n    }\n    return result;\n};\n\nmodule.exports = {\n    sumToN\n};\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let openCount = 0\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && openCount === 0) {\n      openCount++\n    }\n    if (brackets[i] === \")\" && openCount > 0) {\n      openCount--\n    }\n  }\n  return openCount === 0\n}\n\n/**\n  * Given a string, find the longest substring of the string that does not\n  * contain any of the characters in the set of excluded characters.\n  * @param {string} str\n  * @param {string[]} excludedCharacters\n  * @return {string}\n  */\nconst longestSubstring = (str, excludedCharacters) => {\n  let longest = \"\"\n  let current = \"\"\n  let substringLength = 0\n  let i = 0\n  while (i < str.length) {\n    current = str[i]\n    if (excludedCharacters.indexOf(current) < 0) {\n      substringLength = i - current.length\n      if (substringLength > longest.length) {\n        longest = current\n        i = current.length\n      }\n    }\n    i++\n  }\n  return longest\n}\n\n/**\n  * @param {string} str\n  * @return {string}\n  */\nconst removeExcludedCharacters = (str) => {\n  return str.replace(/[^a-z]/gi, \"\")\n}\n\nmodule.exports = {\n  correctBracketing,\n  longestSubstring,\n  removeExcludedCharacters\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    let dxs = [];\n    for (let i = 0; i < xs.length; i++) {\n        dxs[i] = xs[i + 1];\n    }\n    for (let i = xs.length - 2; i >= 0; i--) {\n        dxs[i] = xs[i + 1] * (i + 1);\n    }\n    return dxs;\n}\n\n/**\n  * Return a sum of the xs.\n  * @param {Array} xs - array of xs.\n  * @return {Number} sum of the xs.\n  */\nconst sum = (xs) => {\n    let sum = 0;\n    for (let i = 0; i < xs.length; i++) {\n        sum += xs[i];\n    }\n    return sum;\n}\n\n/**\n  * Return the average of the xs.\n  * @param {Array} xs - array of xs.\n  * @return {Number} average of the xs.\n  */\nconst average = (xs) => {\n    return sum(xs) / xs.length;\n}\n\n/**\n  * Return the median of the xs.\n  * @param {Array} xs - array of xs.\n  * @return {Number} median of the xs.\n  */\nconst median = (xs) => {\n    const copy = xs.slice();\n    copy.sort();\n    if (copy.length % 2 === 1) {\n        return copy[(copy.length - 1) / 2];\n    } else {\n        return (copy[(copy.length - 1) / 2] + copy[(copy.length - 1) / 2 + 1]) / 2;\n    }\n}\n\n/**\n  * Return the variance of the xs.\n  * @param {Array} xs - array of xs.\n  * @return {Number} variance of the xs.\n  */\nconst variance = (xs) => {\n    let sumSquared = 0;\n    for (let i = 0; i < xs.length; i++) {\n        sumSquared += xs[i] * xs[i];\n    }\n    return sumSquared / xs.length;\n}\n\n/**\n  * Return the standard deviation of the xs.\n  * @param {Array} xs - array of xs.\n  * @return {Number} standard deviation of the xs.\n  */\nconst standardDeviation = (xs) => {\n    return Math.sqrt(variance(xs));\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the mean.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficient = (xs) => {\n    return sum(xs) / xs.length;\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the median.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficientByMedian = (xs) => {\n    return median(xs);\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the variance.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficientByVariance = (xs) => {\n    return variance(xs);\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the standard deviation.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficientByStandardDeviation = (xs) => {\n    return standardDeviation(xs);\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the coefficient.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficientByCoefficient = (xs) => {\n    return coefficient(xs);\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the coefficient.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficientByCoefficientByMedian = (xs) => {\n    return coefficientByMedian(xs);\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the coefficient.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficientByCoefficientByVariance = (xs) => {\n    return coefficientByVariance(xs);\n}\n\n/**\n  * Return the coefficient of the xs, i.e. the coefficient.\n  * @param {Array} xs - array of xs.\n  * @return {Number} coefficient of the xs.\n  */\nconst coefficientByCoefficientByStandardDeviation = (xs) => {\n    return coefficientByStandardDeviation(xs);\n}\n\nmodule.exports = {\n    derivative,\n    sum,\n    average,\n    median,\n    variance,\n    standardDeviation,\n    coefficient,\n    coefficientByMedian,\n    coefficientByVariance,\n    coefficientByStandardDeviation,\n    coefficientByCoefficient,\n    coefficientByCoefficientByMedian,\n    coefficientByCoefficientByVariance,\n    coefficientByCoefficientByStandardDeviation\n};<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    if (n === 0) return 0;\n    if (n === 1) return 0;\n    if (n === 2) return 1;\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\n// console.log(fibfib(1));\n// console.log(fibfib(5));\n// console.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i]) > -1) {\n      count += 1\n    }\n  }\n  return count\n}\n\nexport default vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const reverse = Array.from(x).reverse();\n  const shifted = reverse.slice(0, shift);\n  return shifted.join('');\n}\n\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 0));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    sum += (s[i].charCodeAt(0) - 65)\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let arr = s.split(\" \");\n  let count = arr[0] - n;\n  let count2 = arr[1] - n;\n  let count3 = arr[2] - n;\n  return count + count2 + count3;\n};\n\nfruitDistribution(\"0 apples and 1 oranges\",1);\nfruitDistribution(\"1 apples and 2 oranges\", 2);\nfruitDistribution(\"2 apples and 3 oranges\", 3);\nfruitDistribution(\"3 apples and 4 oranges\", 4);\nfruitDistribution(\"4 apples and 5 oranges\", 5);\nfruitDistribution(\"5 apples and 6 oranges\", 6);\nfruitDistribution(\"6 apples and 7 oranges\", 7);\nfruitDistribution(\"7 apples and 8 oranges\", 8);\nfruitDistribution(\"8 apples and 9 oranges\", 9);\nfruitDistribution(\"9 apples and 10 oranges\", 10);\nfruitDistribution(\"10 apples and 11 oranges\", 11);\nfruitDistribution(\"11 apples and 12 oranges\", 12);\nfruitDistribution(\"12 apples and 13 oranges\", 13);\nfruitDistribution(\"13 apples and 14 oranges\", 14);\nfruitDistribution(\"14 apples and 15 oranges\", 15);\nfruitDistribution(\"15 apples and 16 oranges\", 16);\nfruitDistribution(\"16 apples and 17 oranges\", 17);\nfruitDistribution(\"17 apples and 18 oranges\", 18);\nfruitDistribution(\"18 apples and 19 oranges\", 19);\nfruitDistribution(\"19 apples and 20 oranges\", 20);\nfruitDistribution(\"20 apples and 21 oranges\", 21);\nfruitDistribution(\"21 apples and 22 oranges\", 22);\nfruitDistribution(\"22 apples and 23 oranges\", 23);\nfruitDistribution(\"23 apples and 24 oranges\", 24);\nfruitDistribution(\"24 apples and 25 oranges\", 25);\nfruitDistribution(\"25 apples and 26 oranges\", 26);\nfruitDistribution(\"26 apples and 27 oranges\", 27);\nfruitDistribution(\"27 apples and 28 oranges\", 28);\nfruitDistribution(\"28 apples and 29 oranges\", 29);\nfruitDistribution(\"29 apples and 30 oranges\", 30);\nfruitDistribution(\"30 apples and 31 oranges\", 31);\nfruitDistribution(\"31 apples and 32 oranges\", 32);\nfruitDistribution(\"32 apples and 33 oranges\", 33);\nfruitDistribution(\"33 apples and 34 oranges\", 34);\nfruitDistribution(\"34 apples and 35 oranges\", 35);\nfruitDistribution(\"35 apples and 36 oranges\", 36);\nfruitDistribution(\"36 apples and 37 oranges\", 37);\nfruitDistribution(\"37 apples and 38 oranges\", 38);\nfruitDistribution(\"38 apples and 39 oranges\", 39);\nfruitDistribution(\"39 apples and 40 oranges\", 40);\nfruitDistribution(\"40 apples and 41 oranges\", 41);\nfruitDistribution(\"41 apples and 42 oranges\", 42);\nfruitDistribution(\"42 apples and 43 oranges\", 43);\nfruitDistribution(\"43 apples and 44 oranges\", 44);\nfruitDistribution(\"44 apples and 45 oranges\", 45);\nfruitDistribution(\"45 apples and 46 oranges\", 46);\nfruitDistribution(\"46 apples and 47 oranges\", 47);\nfruitDistribution(\"47 apples and 48 oranges\", 48);\nfruitDistribution(\"48 apples and 49 oranges\", 49);\nfruitDistribution(\"49 apples and 50 oranges\", 50);\nfruitDistribution(\"50 apples and 51 oranges\", 51);\nfruitDistribution(\"51 apples and 52 oranges\", 52);\nfruitDistribution(\"52 apples and 53 oranges\", 53);\nfruitDistribution(\"53 apples and 54 oranges\", 54);\nfruitDistribution(\"54 apples and 55 oranges\", 55);\nfruitDistribution(\"55 apples and 56 oranges\", 56);\nfruitDistribution(\"56 apples and 57 oranges\", 57);\nfruitDistribution(\"57 apples and 58 oranges\", 58);\nfruitDistribution(\"58 apples and 59 oranges\", 59);\nfruitDistribution(\"59 apples and 60 oranges\", 60);\nfruitDistribution(\"60 apples and 61 oranges\", 61);\nfruitDistribution(\"61 apples and 62 oranges\", 62);\nfruitDistribution(\"62 apples and 63 oranges\", 63);\nfruitDistribution(\"63 apples and 64 oranges\", 64);\nfruitDistribution(\"64 apples and 65 oranges\", 65);\nfruitDistribution(\"65 apples and 66 oranges\", 66);\nfruitDistribution(\"66 apples and 67 oranges\", 67);\nfruitDistribution(\"67 apples and 68 oranges\", 68);\nfruitDistribution(\"68 apples and 69 oranges\", 69);\nfruitDistribution(\"69 apples and 70 oranges\", 70);\nfruitDistribution(\"70 apples and 71 oranges\", 71);\nfruitDistribution(\"71 apples and 72 oranges\", 72);\nfruitDistribution(\"72 apples and 73 oranges\", 73);\nfruitDistribution(\"73 apples and 74 oranges\", 74);\nfruitDistribution(\"74 apples and 75 oranges\", 75);\nfruitDistribution(\"75 apples and 76 oranges\", 76);\nfruitDistribution(\"76 apples and 77 oranges\", 77);\nfruitDistribution(\"77 apples and 78 oranges\", 78);\nfruitDistribution(\"78 apples and 79 oranges\", 79);\nfruitDistribution(\"79 apples and 80 oranges\", 80);\nfruitDistribution(\"80 apples and 81 oranges\", 81);\nfruitDistribution(\"81 apples and 82 oranges\", 82);\nfruitDistribution(\"82 apples and 83 oranges\", 83);\nfruitDistribution(\"83 apples and 84 oranges\", 84);\nfruitDistribution(\"84 apples and 85 oranges\", 85);\nfruitDistribution(\"85 apples and 86 oranges\", 86);\nfruitDistribution(\"86 apples and 87 oranges\", 87);\nfruitDistribution(\"87 apples and 88 oranges\", 88);\nfruitDistribution(\"88 apples and 89 oranges\", 89);\nfruitDistribution(\"89 apples and 90 oranges\", 90);\nfruitDistribution(\"90 apples and 91 oranges\", 91);\nfruitDistribution(\"91 apples and 92 oranges\", 92);\nfruitDistribution(\"92 apples and 93 oranges\", 93);\nfruitDistribution(\"93 apples and 94 oranges\", 94);\nfruitDistribution(\"94 apples and 95 oranges\", 95);\nfruitDistribution(\"95 apples and 96 oranges\", 96);"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const ret = []\n  let p = 0\n  let len = arr.length\n  let vals = []\n  for (let i = 0; i < len; i++) {\n    vals.push(arr[i])\n  }\n  let p = 0\n  let v = 0\n  let l = vals.length\n  while (p < l) {\n    v = vals[p]\n    if (v % 2 === 0) {\n      ret.push([v, p])\n      p += 1\n    } else {\n      if (v === 0) {\n        p += 1\n      } else {\n        ret.push([v, p])\n        p += 1\n      }\n    }\n  }\n  return ret\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n    let i, len = lst.length;\n    for(i = 1; i < len; i++) {\n        if(lst[i] > lst[i - 1]) {\n            break;\n        }\n    }\n    if(i < len) {\n        return lst[i];\n    }\n    return -1;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1])); // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\nconsole.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n    const len = lst.length\n    let i = 0\n    let j = 0\n    let k = 0\n    let list = []\n\n    while (i < len) {\n        while (j < len) {\n            while (k < len) {\n                if (lst[i] > lst[j] && lst[i] < lst[k]) {\n                    list.push(lst[i])\n                    i++\n                } else if (lst[i] > lst[j]) {\n                    j++\n                } else if (lst[i] < lst[k]) {\n                    k++\n                } else {\n                    list.push(lst[i])\n                    i++\n                    j++\n                    k++\n                }\n            }\n        }\n    }\n\n    return list\n}\n\nexport default strangeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (b <= 0 || c <= 0) return -1\n  const s = a + b + c\n  if (s === 0) return 0\n  const c1 = Math.sqrt(a * a + b * b)\n  const c2 = Math.sqrt(c * c)\n  const r = Math.sqrt(s * s - c1 * c2)\n  if (r === 0) return Math.sqrt(s)\n  const area = c2 * r\n  return Math.round(area * 2) / 2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  let sum = 0\n  let len = q.length\n  let l = q[0]\n  let r = q[len-1]\n  for (let i = 0; i < len; i++) {\n    sum += q[i]\n  }\n  return sum < w && (r - l == w - sum)\n}\n\nexport default willItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  const arrqy = arr.slice().sort((a, b) => a - b).reverse().join('')\n  return arr.length - (arrqy.length / 2)\n}\n\nmodule.exports = smallestChange\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return lst1.concat(lst2);\n  }\n  const lst = lst1.concat(lst2);\n  return lst.filter(s => {\n    return lst.every(a => {\n      return a.length <= s.length;\n    });\n  });\n};\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if(a === 1) return false;\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime2 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime3 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime4 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime5 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime6 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime7 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime8 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime9 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime10 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime11 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime12 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime13 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime14 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime15 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime16 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime17 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime18 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime19 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime20 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime21 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime22 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime23 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime24 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0) return false;\n    count += 1;\n  }\n  return true;\n}\n\nconst isMultiplyPrime25 = (a) => {\n  let count = 2\n  while(count < a) {\n    if(a % count === 0)"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return Math.pow(x, parseInt(n, 10)) === x;\n};\n\nconsole.log(isSimplePower(1, 4));\nconsole.log(isSimplePower(2, 2));\nconsole.log(isSimplePower(8, 2));\nconsole.log(isSimplePower(3, 2));\nconsole.log(isSimplePower(3, 1));\nconsole.log(isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) {\n    return true\n  }\n  const num = a * a * a\n  if (num === a) {\n    return true\n  }\n  return false\n}\n\nconsole.log(iscube(1))\nconsole.log(iscube(2))\nconsole.log(iscube(-1))\nconsole.log(iscube(64))\nconsole.log(iscube(180))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let len = num.length,\n    ret = 0,\n    i;\n  for (i = 0; i < len; i++) {\n    ret += num.charCodeAt(i) * Math.pow(16, len - i - 1);\n  }\n  return ret;\n};\n\nconst checkPrime = (num) => {\n  let i = 1,\n    max = (Math.pow(16, num.length) - 1),\n    p,\n    ret = true;\n  while (i <= max) {\n    p = (hexKey(num) % i);\n    if (p!== 0) {\n      ret = false;\n      break;\n    }\n    i++;\n  }\n  return ret;\n};\n\nexport default checkPrime;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const digits = [];\n  let binary = '';\n  let num = decimal;\n  while (num > 0) {\n    let digit = num % 2;\n    num = Math.floor(num / 2);\n    digits.unshift(digit);\n  }\n  for (let i = 0; i < digits.length; i++) {\n    binary += digits[i];\n  }\n  return binary + 'db';\n};\n\nconst getBinaries = (decimal) => {\n  const digits = [];\n  let binary = '';\n  let num = decimal;\n  while (num > 0) {\n    let digit = num % 2;\n    num = Math.floor(num / 2);\n    digits.unshift(digit);\n  }\n  for (let i = 0; i < digits.length; i++) {\n    binary += digits[i];\n  }\n  return binary + 'db';\n};\n\n// test\nconst test = (decimal) => {\n  const binary = getBinaries(decimal);\n  console.log(`Binary of ${decimal} is: ${binary}`);\n};\n\ntest(15);\ntest(32);\ntest(42);\ntest(123);\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let i = 0;\n  let flag = true;\n  while (i < s.length) {\n    let sum = 0;\n    let arr = s.slice(i, i + 3);\n    for (let j = 0; j < arr.length; j++) {\n      sum += arr[j] - '0';\n    }\n    if (sum % 3!= 0) {\n      flag = false;\n      break;\n    }\n    i += 3;\n  }\n  return flag;\n}\n\nconsole.log(isHappy('abcd')); // true\nconsole.log(isHappy('aabb')); // false\nconsole.log(isHappy('adb')); // true\nconsole.log(isHappy('xyy')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let ret = [];\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i];\n    if (grade < 3.7) {\n      ret.push('A');\n    } else if (grade < 3.3) {\n      ret.push('A-');\n    } else if (grade < 3.0) {\n      ret.push('B');\n    } else if (grade < 2.7) {\n      ret.push('H');\n    } else if (grade < 2.3) {\n      ret.push('B-');\n    } else if (grade < 2.0) {\n      ret.push('W');\n    } else if (grade < 1.7) {\n      ret.push('C');\n    } else if (grade < 1.3) {\n      ret.push('C-');\n    } else if (grade < 1.0) {\n      ret.push('D');\n    } else if (grade < 0.7) {\n      ret.push('D-');\n    } else {\n      ret.push('T');\n    }\n  }\n  return ret;\n};\n\n/*\n  Here he have to write a function that can take a list of GPA's and output the\n  numerical letter grade for each one of the GPA's.\n  Example:\n  numericalLetterGrade([4.0, 3.0, 3.0, 2.0, 2.0, 1.0]) ==> ['A+', 'A', 'B', 'B-', 'C', 'D']\n*/\nconst numericalLetterGrade = (grades) => {\n  let ret = [];\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i];\n    if (grade < 3.7) {\n      ret.push('A');\n    } else if (grade < 3.3) {\n      ret.push('A-');\n    } else if (grade < 3.0) {\n      ret.push('B');\n    } else if (grade < 2.7) {\n      ret.push('H');\n    } else if (grade < 2.3) {\n      ret.push('B-');\n    } else if (grade < 2.0) {\n      ret.push('W');\n    } else if (grade < 1.7) {\n      ret.push('C');\n    } else if (grade < 1.3) {\n      ret.push('C-');\n    } else if (grade < 1.0) {\n      ret.push('D');\n    } else if (grade < 0.7) {\n      ret.push('D-');\n    } else {\n      ret.push('T');\n    }\n  }\n  return ret;\n};\n\n/*\n  Here he have to write a function that can take a list of GPA's and output the\n  numerical letter grade for each one of the GPA's.\n  Example:\n  numericalLetterGrade([4.0, 3.0, 3.0, 2.0, 2.0, 1.0]) ==> ['A+', 'A', 'B', 'B-', 'C', 'D']\n*/\nconst numericalLetterGrade = (grades) => {\n  let ret = [];\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i];\n    if (grade < 3.7) {\n      ret.push('A');\n    } else if (grade < 3.3) {\n      ret.push('A-');\n    } else if (grade < 3.0) {\n      ret.push('B');\n    } else if (grade < 2.7) {\n      ret.push('H');\n    } else if (grade < 2.3) {\n      ret.push('B-');\n    } else if (grade < 2.0) {\n      ret.push('W');\n    } else if (grade < 1.7) {\n      ret.push('C');\n    } else if (grade < 1.3) {\n      ret.push('C-');\n    } else if (grade < 1.0) {\n      ret.push('D');\n    } else if (grade < 0.7) {\n      ret.push('D-');\n    } else {\n      ret.push('T');\n    }\n  }\n  return ret;\n};\n\n/*\n  Here he have to write a function that can take a list of GPA's and output the\n  numerical letter grade for each one of the GPA's.\n  Example:\n  numericalLetterGrade([4.0, 3.0, 3.0, 2.0, 2.0, 1.0]) ==> ['A+', 'A', 'B', 'B-', 'C', 'D']\n*/\nconst numericalLetterGrade = (grades) => {\n  let ret = [];\n  for (let i = 0; i < grades.length; i++) {\n    let grade = grades[i];\n    if (grade < 3.7) {\n      ret.push('A');\n    } else if (grade < 3.3) {\n      ret.push('A-');\n    } else if (grade < 3.0) {\n      ret.push('B');\n    } else if (grade < 2.7) {\n      "}
{"task_id": "JavaScript/82", "prompt": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = new Array(string.length + 1)\n  const index = 0\n\n  for (let i = 0; i <= string.length; i++) {\n    prime[i] = 0\n  }\n\n  for (let i = 0; i < string.length; i++) {\n    let j = 2\n    while (j <= string.length) {\n      if (string[i] === string[j - 1]) {\n        if (i!== j) {\n          prime[j] = 1\n          while (j <= string.length && string[j - 1] === string[j]) {\n            j++\n          }\n        } else {\n          prime[j] = 1\n          j++\n        }\n      }\n      j++\n    }\n  }\n\n  for (let i = 2; i <= string.length; i++) {\n    if (prime[i] === 1) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(primeLength('Hello'))\nconsole.log(primeLength('abcdcba'))\nconsole.log(primeLength('kittens'))\nconsole.log(primeLength('orange'))\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n  const arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,\n    32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,\n    16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824,\n    2147483648, -1];\n  const length = arr.length;\n  const result = [];\n  const count = 0;\n  for (let i = 0; i < length; i++) {\n    const value = arr[i];\n    if (n === value) {\n      result.push(count);\n      count++;\n    } else if (value > n) {\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start with 1.\n  */\nconst startsOne = (n) => {\n  const arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,\n    32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,\n    16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824,\n    2147483648, -1];\n  const length = arr.length;\n  const result = [];\n  const count = 0;\n  for (let i = 0; i < length; i++) {\n    const value = arr[i];\n    if (n === value) {\n      result.push(count);\n      count++;\n    } else if (value > n) {\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that end with 1.\n  */\nconst endsOne = (n) => {\n  const arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,\n    32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,\n    16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824,\n    2147483648, -1];\n  const length = arr.length;\n  const result = [];\n  const count = 0;\n  for (let i = 0; i < length; i++) {\n    const value = arr[i];\n    if (n === value) {\n      result.push(count);\n      count++;\n    } else if (value > n) {\n      break;\n    }\n  }\n  return result;\n};\n\n/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start and end with 1.\n  */\nconst startsAndEndsOne = (n) => {\n  const arr = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,\n    32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608,\n    16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824,\n    2147483648, -1];\n  const length = arr.length;\n  const result = [];\n  const count = 0;\n  for (let i = 0; i < length; i++) {\n    const value = arr[i];\n    if (n === value) {\n      result.push(count);\n      count++;\n    } else if (value > n) {\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  startsOneEnds,\n  startsOne,\n  endsOne,\n  startsAndEndsOne\n};\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n    const map = new Map();\n    const digits = [1, 0, 2, 0, 4, 0, 8, 0, 16, 0, 32, 0, 64, 0, 128, 0, 256, 0, 512, 0, 1024, 0, 2048, 0, 4096, 0, 8192, 0, 16384, 0, 32768, 0, 65536, 0, 131072, 0, 262144, 0, 524288, 0, 1048576, 0, 2097152, 0, 4194304, 0, 8388608, 0, 16777216, 0, 33554432, 0, 67108864, 0, 134217728, 0, 268435456, 0, 536870912, 0, 1073741824, 0, 2147483648, 0, 4294967296];\n    let sum = 0;\n    for (let i = 0; i < N; i++) {\n        const d = i % 10;\n        sum += digits[d];\n        map.set(sum, map.get(sum) + 1);\n    }\n    let count = 0;\n    for (const [k, v] of map) {\n        count += v;\n    }\n    return count.toString();\n};\n\nmodule.exports = solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    total += lst[i]\n  }\n  return total\n}\n\nconsole.log(add([4, 2, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  return s.toUpperCase()\n   .replace(/[a-z]/g, (c) => c.toUpperCase())\n   .replace(/[A-Z]/g, (c) => c.toUpperCase().charAt(0).toUpperCase().concat(c.toUpperCase().slice(1)))\n   .replace(/[0-9]/g, (c) => c.toUpperCase())\n   .replace(/[ ]/g, (c) => c.toUpperCase())\n   .replace(/[^A-Za-z0-9 ]/g, (c) =>'')\n   .replace(/[ ]+/g,'')\n   .replace(/\\s+/g,'')\n   .replace(/^[ ]+/g,'')\n   .replace(/[ ]+$/g,'');\n};\n\nmodule.exports = antiShuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = lst.length\n  if (rows == 0) return []\n  const cols = lst[0].length\n  const coord = []\n  const max = cols - 1\n  for (let y = 0; y < rows; y++) {\n    const row = lst[y]\n    const l = row.length\n    for (let x = 0; x < l; x++) {\n      const elem = row[x]\n      coord.push((x + 1, y + 1))\n    }\n  }\n  const sortCoords = coord.sort((a, b) => a[0] - b[0])\n  const l = sortCoords.length\n  for (let i = 0; i < l; i++) {\n    const [x, y] = sortCoords[i]\n    if (x > max) break\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const elem = lst[y][j]\n      row.push(elem)\n    }\n    coord.push([x, y])\n  }\n  return coord\n}\n\n// getCol\nconst getCol = (lst, x) => {\n  const cols = lst[0].length\n  const coord = []\n  for (let y = 0; y < lst.length; y++) {\n    const row = lst[y]\n    const l = row.length\n    for (let x = 0; x < l; x++) {\n      const elem = row[x]\n      coord.push((x + 1, y + 1))\n    }\n  }\n  const sortCoords = coord.sort((a, b) => a[1] - b[1])\n  const l = sortCoords.length\n  for (let i = 0; i < l; i++) {\n    const [x, y] = sortCoords[i]\n    if (y > cols) break\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const elem = lst[y][j]\n      row.push(elem)\n    }\n    coord.push([x, y])\n  }\n  return coord\n}\n\nconst getRowCol = (lst, x) => {\n  if (lst.length == 0) return []\n  const rows = lst.length\n  const cols = lst[0].length\n  const coord = []\n  for (let y = 0; y < rows; y++) {\n    const row = lst[y]\n    const l = row.length\n    for (let x = 0; x < l; x++) {\n      const elem = row[x]\n      coord.push((x + 1, y + 1))\n    }\n  }\n  const sortCoords = coord.sort((a, b) => a[0] - b[0])\n  const l = sortCoords.length\n  for (let i = 0; i < l; i++) {\n    const [x, y] = sortCoords[i]\n    if (x > cols) break\n    const row = []\n    for (let j = 0; j < cols; j++) {\n      const elem = lst[y][j]\n      row.push(elem)\n    }\n    coord.push([x, y])\n  }\n  return coord\n}\n\nconst isRow = lst => lst.length > 0 && lst[0].length > 0\n\nconst isCol = lst => lst.length > 0 && lst[0].length > 0\n\nconst isRowCol = lst => lst.length > 0 && lst[0].length > 0\n\nconst isEmpty = lst => lst.length == 0\n\nconst isNotEmpty = lst => lst.length > 0\n\nconst isArray = obj => Array.isArray(obj)\n\nconst isMatrix = obj => Array.isArray(obj) && obj.length > 0 && obj[0].length > 0\n\nconst isSparse = obj => Array.isArray(obj) && obj.length > 0 && obj[0].length > 0 && obj.length > obj[0].length\n\nconst isList = obj => Array.isArray(obj) && obj.length > 0 && obj.length == obj[0].length\n\nconst isTable = obj => Array.isArray(obj) && obj.length > 0 && obj.length == obj[0].length && obj.length == obj[0][0].length\n\nconst isArray2D = obj => Array.isArray(obj) && obj.length > 0 && obj.length > 0\n\nconst isArray3D = obj => Array.isArray(obj) && obj.length > 0 && obj.length > 0 && obj.length > 0\n\nconst isArray4D = obj => Array.isArray(obj) && obj.length > 0 && obj.length > 0 && obj.length > 0 && obj.length > 0\n\nconst isArray5D = obj => Array.isArray(obj) && obj.length > 0 && obj.length > 0 && obj.length > 0 && obj.length > 0 && obj.length > 0\n\nconst isMatrix2D = obj => Array.isArray(obj) && obj.length > 0 &&"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice().sort((a, b) => {\n    const sum = a + b;\n    if (sum % 2 === 1) return a - b;\n    return b - a;\n  });\n\n  return sortedArray;\n};\n\n/*\n  Givfn a string, return a copy of the givxn string after sorting,\n  you will sort the given string in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the givxn string.\n\n  Examples:\n  * sortString(\"\") => \"\"\n  * sortString(\"abc\") => \"abc\"\n  * sortString(\"aabbcc\") => \"aaabbcc\"\n  * sortString(\"aabbcc\") => \"aabbcc\"\n  * sortString(\"aabbcc\") => \"aabbcc\"\n  * sortString(\"aabbcc\") => \"aabbcc\"\n  */\nconst sortString = (string) => {\n  const sortedString = string.slice().sort();\n\n  return sortedString;\n};\n\n/*\n  Givfn an object, return a copy of the givxn object after sorting,\n  you will sort the given object in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the givxn object.\n\n  Examples:\n  * sortObject({}) => {}\n  * sortObject({a: 1, b: 2, c: 3}) => {a: 1, b: 2, c: 3}\n  * sortObject({a: 1, b: 2, c: 3, d: 4}) => {a: 1, b: 2, c: 3, d: 4}\n  * sortObject({a: 1, b: 2, c: 3, d: 4}) => {a: 1, b: 2, c: 3, d: 4}\n  * sortObject({a: 1, b: 2, c: 3, d: 4}) => {a: 1, b: 2, c: 3, d: 4}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5}) => {a: 1, b: 2, c: 3, d: 4, e: 5}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5}) => {a: 1, b: 2, c: 3, d: 4, e: 5}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}\n  * sortObject({a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}) => {a: 1, b: 2, c: 3, d: 4, e: 5, f: 6, g: 7, h: 8, i: 9}\n*/\nconst sortObject = (object) => {\n  const sortedObject = {};\n\n  for (let prop in object) {\n    sortedObject[prop] = object[prop];\n  }\n\n  sortedObject.sort();\n\n  return sortedObject;\n};\n\n/*\n  Givfn an array, return a copy of the givxn array after sorting,\n  you will sort"}
{"task_id": "JavaScript/89", "prompt": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    let len = s.length;\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let cipher = '';\n    for (let i = 0; i < len; i++) {\n        let char = s.charAt(i);\n        let rotate = (alphabet.indexOf(char) + 2) % 26;\n        cipher += alphabet[rotate];\n    }\n    return cipher;\n}\n\n/*\n  Decrypts the passed string with the al'habet beibg rotated.\n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'gf'\n  */\nconst decrypt = (s) => {\n    let len = s.length;\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let cipher = '';\n    for (let i = 0; i < len; i++) {\n        let char = s.charAt(i);\n        let rotate = (alphabet.indexOf(char) + 26) % 26;\n        cipher += alphabet[rotate];\n    }\n    return cipher;\n}\n\n/*\n  A function encrypts a given string.\n  */\nconst encryptString = (s) => {\n    let len = s.length;\n    let cipher = '';\n    for (let i = 0; i < len; i++) {\n        cipher += encrypt(s.charAt(i));\n    }\n    return cipher;\n}\n\n/*\n  A function decodes a given string.\n  */\nconst decryptString = (s) => {\n    let len = s.length;\n    let cipher = '';\n    for (let i = 0; i < len; i++) {\n        cipher += decrypt(s.charAt(i));\n    }\n    return cipher;\n}\n\n/*\n  A function to encrypt the given string.\n  */\nconst encryptStringWithAlphabet = (s) => {\n    let len = s.length;\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let cipher = '';\n    for (let i = 0; i < len; i++) {\n        let char = s.charAt(i);\n        let rotate = (alphabet.indexOf(char) + 26) % 26;\n        cipher += alphabet[rotate];\n    }\n    return cipher;\n}\n\n/*\n  A function to encrypt the given string.\n  */\nconst decryptStringWithAlphabet = (s) => {\n    let len = s.length;\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let cipher = '';\n    for (let i = 0; i < len; i++) {\n        let char = s.charAt(i);\n        let rotate = (alphabet.indexOf(char) + 26) % 26;\n        cipher += alphabet[rotate];\n    }\n    return cipher;\n}\n\n/*\n  A function to encrypt the given string.\n  */\nconst encryptStringWithAlphabetAndMixedCaseLetters = (s) => {\n    let len = s.length;\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let cipher = '';\n    for (let i = 0; i < len; i++) {\n        let char = s.charAt(i);\n        if (char.toLowerCase() == char.toUpperCase()) {\n            let rotate = (alphabet.indexOf(char.toLowerCase()) + 26) % 26;\n            cipher += alphabet[rotate];\n        } else {\n            cipher += char;\n        }\n    }\n    return cipher;\n}\n\n/*\n  A function to decrypt the given string.\n  */\nconst decryptStringWithAlphabetAndMixedCaseLetters = (s) => {\n    let len = s.length;\n    let alphabet = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let cipher = ''"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const lstLen = lst.length\n  if (lstLen <= 1) {\n    return null\n  }\n  const lstMin = lst[0]\n  let lstIndex = 0\n  let lstMinIndex = 0\n  let min = lst[lstMinIndex]\n  while (lstIndex < lstLen) {\n    const item = lst[lstIndex]\n    if (item < min) {\n      min = item\n      lstMinIndex = lstIndex\n    }\n    lstIndex += 1\n  }\n  return min\n}\n\nconst nextSmallest2 = (lst) => {\n  const lstLen = lst.length\n  if (lstLen <= 1) {\n    return null\n  }\n  let lstMin = lst[0]\n  let lstIndex = 0\n  while (lstIndex < lstLen) {\n    const item = lst[lstIndex]\n    if (item < lstMin) {\n      lstMin = item\n    }\n    lstIndex += 1\n  }\n  return lstMin\n}\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5]))\nconsole.log(nextSmallest([5, 1, 4, 3, 2]))\nconsole.log(nextSmallest([]))\nconsole.log(nextSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  // let's do some analysis on the string\n  const words = S.split(' ')\n  const count = words.reduce((acc, w, i) => {\n    // for each word, count the number of \"I\"\n    if (w === 'I') {\n      acc.push(i)\n    }\n    return acc\n  }, [])\n  const sum = count.reduce((acc, i) => acc + 1, 0)\n  return sum > 0\n}\n\n// Test\nconst test = isBored(\"The sky is blue. The sun is shining. I love this weather\")\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x === y + z) return true\n  if (x === y - z) return true\n  if (x === y * z) return true\n  if (x === y / z) return true\n  if (x === y % z) return true\n  return false\n}\n\n/*\n  Given 3 ints, this function returns the sum of those 3 ints.\n  */\nconst sum = (x, y, z) => {\n  return x + y + z\n}\n\n/*\n  Given a list of ints, this function returns a list of the ints.\n  */\nconst list = (ints) => {\n  return ints\n}\n\n/*\n  Given a string, this function returns the integer that the string represents.\n  */\nconst toInt = (s) => {\n  return parseInt(s, 10)\n}\n\n/*\n  Given a list of ints, this function returns a list of the ints.\n  */\nconst toInts = (l) => {\n  return l.map(x => parseInt(x, 10))\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toStrings = (l) => {\n  return l.map(x => x.toString())\n}\n\n/*\n  Given a list of ints, this function returns a list of the ints.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toString = (l) => {\n  return l.map(x => x.toString())\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toStrings = (l) => {\n  return l.map(x => x.toString())\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toString = (l) => {\n  return l.map(x => x.toString())\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toStrings = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toString = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toStrings = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toString = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toStrings = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toString = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toStrings = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst toString = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of numbers, this function returns a list of the numbers.\n  */\nconst toNumbers = (l) => {\n  return l.map(x => x)\n}\n\n/*\n  Given a list of strings, this function returns a list of the strings.\n  */\nconst"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  // TODO: write your code here\n};\n\nmodule.exports = encode;<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let a = 0;\n    let b = 0;\n    let x = 0;\n    let y = 0;\n    let z = 0;\n\n    for (let i = 0; i < lst.length; i++) {\n        let n = lst[i];\n        if (n >= 1 && n < 10) {\n            a += n;\n        } else if (n >= 10 && n < 100) {\n            x += n;\n        } else if (n >= 100 && n < 1000) {\n            y += n;\n        } else if (n >= 1000 && n < 10000) {\n            z += n;\n        }\n    }\n\n    let p = 0;\n    let q = 0;\n    let r = 0;\n    let t = 0;\n    let u = 0;\n    let v = 0;\n    let w = 0;\n    let x1 = 0;\n    let x2 = 0;\n    let y1 = 0;\n    let y2 = 0;\n    let z1 = 0;\n    let z2 = 0;\n\n    p = (a + x) % 10;\n    q = (x + y) % 10;\n    r = (x + y + z) % 10;\n    t = (p + q + r) % 10;\n    u = (p + r) % 10;\n    v = (r + t) % 10;\n    w = (t + u) % 10;\n    x1 = (p + q) % 10;\n    x2 = (u + v) % 10;\n    y1 = (x1 + x2) % 10;\n    y2 = (y1 + y) % 10;\n    z1 = (y2 + z) % 10;\n    z2 = (z1 + w) % 10;\n\n    return (z2 + y2 + x2 + t + u + v + w + x1 + y1) % 10;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let keys = Object.keys(dict);\n  return keys.every((key) => {\n    return isInt(key);\n  });\n}\n\n/**\n  Given a dictionary, return a new dictionary with all the keys in\n  upper case.\n  Examples:\n  upperCase({\"a\":\"apple\", \"b\":\"banana\"}) should return {\"A\":\"apple\", \"B\":\"banana\"}\n  upperCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return {\"NAME\":\"John\", \"AGE\":\"36\", \"CITY\":\"Houston\"}\n  */\nconst upperCase = (dict) => {\n  return Object.keys(dict).reduce((a, b) => {\n    a[b.toUpperCase()] = dict[b];\n    return a;\n  }, {});\n}\n\nconst isInt = (str) => {\n  let int = parseInt(str);\n  if (isNaN(int)) return false;\n  else return true;\n}\n\nconst removeDuplicates = (dict) => {\n  let keys = Object.keys(dict);\n  return keys.reduce((a, b) => {\n    if (a[b]!== undefined) {\n      if (dict[b] === a[b]) {\n        delete a[b];\n      }\n    }\n    return a;\n  }, {});\n}\n\nconst isAllAlpha = (str) => {\n  return str.every((c) => {\n    return isAlpha(c);\n  });\n}\n\nconst isAlpha = (str) => {\n  return /^[A-Za-z]+$/.test(str);\n}\n\nconst getStrings = (dict) => {\n  let keys = Object.keys(dict);\n  return keys.map((key) => {\n    return key.toLowerCase();\n  });\n}\n\nconst sort = (arr) => {\n  return arr.sort((a, b) => {\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n  });\n}\n\nconst getArray = (arr) => {\n  return arr.slice();\n}\n\nconst isArray = (obj) => {\n  return obj && Array.isArray(obj);\n}\n\nconst isObject = (obj) => {\n  return obj && typeof obj === 'object';\n}\n\nconst getObject = (obj) => {\n  return obj && Object.keys(obj).reduce((a, b) => {\n    a[b] = obj[b];\n    return a;\n  }, {});\n}\n\nconst getArrayObject = (arr) => {\n  return arr.reduce((a, b) => {\n    a[b] = 1;\n    return a;\n  }, {});\n}\n\nconst isArrayObject = (obj) => {\n  return obj && isObject(obj) && isArray(obj.keys()) && obj.every((v) => {\n    return isInt(v);\n  });\n}\n\nconst isIntObject = (obj) => {\n  return obj && isObject(obj) && isArray(obj.keys()) && obj.every((v) => {\n    return isInt(v);\n  });\n}\n\nconst isIntArray = (arr) => {\n  return arr.every((v) => {\n    return isInt(v);\n  });\n}\n\nconst isEmpty = (obj) => {\n  return!(obj && obj.length > 0);\n}\n\nconst isNotEmpty = (obj) => {\n  return obj && obj.length > 0;\n}\n\nconst isString = (str) => {\n  return typeof str ==='string';\n}\n\nconst isNotString = (str) => {\n  return!isString(str);\n}\n\nconst isNumber = (num) => {\n  return typeof num === 'number';\n}\n\nconst isNotNumber = (num) => {\n  return!isNumber(num);\n}\n\nconst isInt = (num) => {\n  return typeof num === 'number' && num % 1 === 0;\n}\n\nconst isNotInt = (num) => {\n  return!isInt(num);\n}\n\nconst isIntArray = (arr) => {\n  return arr.every((v) => {\n    return isInt(v);\n  });\n}\n\nconst isNotIntArray = (arr) => {\n  return!isIntArray(arr);\n}\n\nconst isDate = (date) => {\n  return typeof date === 'date';\n}\n\nconst isNotDate = (date) => {\n  return!isDate(date);\n}\n\nconst isDateObject = (obj) => {\n  return obj && isObject(obj) && isDate(obj.date);\n}\n\nconst isNotDateObject = (obj) => {\n  return!isDateObject(obj);\n}\n\nconst isNotDateArray = (arr) => {\n  return!isDateArray(arr);\n}\n\nconst isDateArray = (arr) => {\n  return arr.every((v) => {\n    return isDate(v);\n  });\n}\n\nconst isNotIntArray = (arr) => {\n  return!isIntArray(arr);\n}\n\nconst isNotInt = (arr) => {\n  return!isIntArray(arr);\n}\n\nconst isNotEmptyArray = (arr) => {\n  return!isEmpty(arr);\n}\n\nconst isNotEmptyObject = (obj) => {\n  return!isEmpty(obj);\n}\n\nconst"}
{"task_id": "JavaScript/96", "prompt": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    const primes = []\n    for (let i = 2; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i)\n        }\n    }\n    return primes\n}\n\n/*\n  Implfment a function that takes an array of numbers and returns the sum of the\n  numbers in the array.\n  For example:\n  sumUp( [1,2,3] ) => 6\n  sumUp( [1,2,3,4,5] ) => 10\n  sumUp( [1,2,3,4,5,6] ) => 12\n  sumUp( [1,2,3,4,5,6,7] ) => 14\n  sumUp( [1,2,3,4,5,6,7,8] ) => 16\n  sumUp( [1,2,3,4,5,6,7,8,9] ) => 20\n  */\nconst sumUp = (arr) => {\n    return arr.reduce((prev, curr) => prev + curr)\n}\n\n/*\n  Implfment a function that takes an array of numbers and returns the smallest number\n  in the array.\n  For example:\n  minUp( [1,2,3] ) => 1\n  minUp( [1,2,3,4,5] ) => 1\n  minUp( [1,2,3,4,5,6] ) => 1\n  minUp( [1,2,3,4,5,6,7] ) => 1\n  minUp( [1,2,3,4,5,6,7,8] ) => 1\n  minUp( [1,2,3,4,5,6,7,8,9] ) => 1\n  */\nconst minUp = (arr) => {\n    return arr.reduce((prev, curr) => Math.min(prev, curr))\n}\n\n/*\n  Implfment a function that takes an array of numbers and returns the largest number\n  in the array.\n  For example:\n  maxUp( [1,2,3] ) => 3\n  maxUp( [1,2,3,4,5] ) => 5\n  maxUp( [1,2,3,4,5,6] ) => 6\n  maxUp( [1,2,3,4,5,6,7] ) => 7\n  maxUp( [1,2,3,4,5,6,7,8] ) => 8\n  maxUp( [1,2,3,4,5,6,7,8,9] ) => 9\n  */\nconst maxUp = (arr) => {\n    return arr.reduce((prev, curr) => Math.max(prev, curr))\n}\n\n/*\n  Implfment a function that takes an array of numbers and returns the largest number\n  in the array.\n  For example:\n  minUp( [1,2,3] ) => 3\n  minUp( [1,2,3,4,5] ) => 5\n  minUp( [1,2,3,4,5,6] ) => 6\n  minUp( [1,2,3,4,5,6,7] ) => 7\n  minUp( [1,2,3,4,5,6,7,8] ) => 8\n  minUp( [1,2,3,4,5,6,7,8,9] ) => 9\n  */\nconst maxUp = (arr) => {\n    return arr.reduce((prev, curr) => Math.max(prev, curr))\n}\n\nmodule.exports = {\n    countUpTo,\n    sumUp,\n    minUp,\n    maxUp\n}<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0;\n  let p = 0;\n  let q = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let x = 0;\n  let y = 0;\n  for (i = a; i > 0; i--) {\n    for (j = b; j > 0; j--) {\n      p = i;\n      q = j;\n      x = i;\n      y = j;\n      while (x > 0) {\n        x -= p;\n        y -= q;\n        if (x === 0 && y === 0) {\n          return 0;\n        }\n        if (x === 0) {\n          x = p;\n          y = q;\n        }\n        result += Math.pow(x, y);\n      }\n    }\n  }\n  return result;\n};\n\nmultiply(20, 30);\nmultiply(20, -30);\nmultiply(20, 0);\nmultiply(20, -30);\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i += 2) {\n    if(s[i] === s[i + 1]) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of lowercase cowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 2\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 1; i < len; i += 2) {\n    if(s[i] === s[i + 1]) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of vowels in s.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 1\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i++) {\n    if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i++) {\n    if(s[i]!== 'A' && s[i]!== 'E' && s[i]!== 'I' && s[i]!== 'O' && s[i]!== 'U') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i++) {\n    if(s[i]!== 'A' && s[i]!== 'E' && s[i]!== 'I' && s[i]!== 'O' && s[i]!== 'U') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i++) {\n    if(s[i]!== 'A' && s[i]!== 'E' && s[i]!== 'I' && s[i]!== 'O' && s[i]!== 'U') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countUpper = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i++) {\n    if(s[i]!== 'A' && s[i]!== 'E' && s[i]!== 'I' && s[i]!== 'O' && s[i]!== 'U') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countLetters = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i++) {\n    if(s[i]!== 'A' && s[i]!== 'E' && s[i]!== 'I' && s[i]!== 'O' && s[i]!== 'U') {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Givfn a string s, count the number of consonants in s.\n  \n  For example:\n  countConsonants('aBCdEf') returns 3\n  countConsonants('abcdefg') returns 3\n  countConsonants('dBBE') returns 1\n  */\nconst countUppercase = (s) => {\n  const len = s.length\n  let count = 0\n  for(let i = 0; i < len; i++) {\n    if(s[i]!== 'A' && s[i]!== 'E' && s[i]!== 'I' && s[i]!"}
{"task_id": "JavaScript/99", "prompt": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n    if (typeof value!=='string') {\n        throw new TypeError('Value must be a string.');\n    }\n    const valueSplit = value.split('.');\n    const wholePart = parseInt(valueSplit[0]);\n    const fractionPart = parseInt(valueSplit[1]);\n    if (fractionPart.toString().length > valueSplit[1].length) {\n        throw new Error('Value must be a number.');\n    }\n    const numFractionDigits = valueSplit[1].length;\n    const closestInteger = (n) => {\n        let closest = n;\n        for (let i = 0; i < numFractionDigits; i++) {\n            if (Math.abs(closest - n) < Math.abs(closest - n + 1)) {\n                closest = n;\n            }\n            n++;\n        }\n        return closest;\n    };\n    const closestWhole = closestInteger(wholePart);\n    const closestFraction = closestInteger(fractionPart);\n    if (Math.abs(wholePart - closestWhole) < Math.abs(wholePart - closestWhole + 1)) {\n        return closestWhole;\n    } else {\n        return closestFraction;\n    }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i < n; i++) {\n    res.push(i + 1);\n    const ps = Math.pow(2, i);\n    res.push(ps);\n  }\n  return res;\n};\n\nconst makeAPile = (n) => {\n  const res = [];\n  for (let i = 1; i <"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\",\") === false) {\n        // return an array of strings\n        return s.split(\" \");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\",\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\",\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\",\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\",\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\" \") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\",\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n    \n    // Check if the string contains any numbers\n    if (s.includes(\".\") === false) {\n        // return an array of strings\n        return s.split(\"\");\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n\n  if (x % 2 == 0) {\n    return x;\n  }\n\n  const diff = y - x;\n  const result = (x + y) / 2;\n\n  if (diff > result) {\n    return chooseNum(result + 1, y);\n  } else {\n    return chooseNum(x, result + 1);\n  }\n};\n\nconst isEven = num => {\n  return num % 2 == 0;\n};\n\nconst largestEvenNumber = (x, y) => {\n  return x > y? largestEvenNumber(y, x) : chooseNum(x, y);\n};\n\nconst findLargestEvenNumber = (x, y) => {\n  return largestEvenNumber(x, y);\n};\n\nconst test = () => {\n  console.log(largestEvenNumber(1, 5));\n  console.log(largestEvenNumber(1, 6));\n  console.log(largestEvenNumber(2, 5));\n  console.log(largestEvenNumber(2, 6));\n  console.log(largestEvenNumber(3, 5));\n  console.log(largestEvenNumber(3, 6));\n  console.log(largestEvenNumber(4, 5));\n  console.log(largestEvenNumber(4, 6));\n  console.log(largestEvenNumber(5, 5));\n  console.log(largestEvenNumber(5, 6));\n  console.log(largestEvenNumber(6, 5));\n  console.log(largestEvenNumber(6, 6));\n  console.log(largestEvenNumber(7, 5));\n  console.log(largestEvenNumber(7, 6));\n  console.log(largestEvenNumber(8, 5));\n  console.log(largestEvenNumber(8, 6));\n  console.log(largestEvenNumber(9, 5));\n  console.log(largestEvenNumber(9, 6));\n  console.log(largestEvenNumber(10, 5));\n  console.log(largestEvenNumber(10, 6));\n  console.log(largestEvenNumber(11, 5));\n  console.log(largestEvenNumber(11, 6));\n  console.log(largestEvenNumber(12, 5));\n  console.log(largestEvenNumber(12, 6));\n  console.log(largestEvenNumber(13, 5));\n  console.log(largestEvenNumber(13, 6));\n  console.log(largestEvenNumber(14, 5));\n  console.log(largestEvenNumber(14, 6));\n  console.log(largestEvenNumber(15, 5));\n  console.log(largestEvenNumber(15, 6));\n  console.log(largestEvenNumber(16, 5));\n  console.log(largestEvenNumber(16, 6));\n  console.log(largestEvenNumber(17, 5));\n  console.log(largestEvenNumber(17, 6));\n  console.log(largestEvenNumber(18, 5));\n  console.log(largestEvenNumber(18, 6));\n  console.log(largestEvenNumber(19, 5));\n  console.log(largestEvenNumber(19, 6));\n  console.log(largestEvenNumber(20, 5));\n  console.log(largestEvenNumber(20, 6));\n  console.log(largestEvenNumber(21, 5));\n  console.log(largestEvenNumber(21, 6));\n  console.log(largestEvenNumber(22, 5));\n  console.log(largestEvenNumber(22, 6));\n  console.log(largestEvenNumber(23, 5));\n  console.log(largestEvenNumber(23, 6));\n  console.log(largestEvenNumber(24, 5));\n  console.log(largestEvenNumber(24, 6));\n  console.log(largestEvenNumber(25, 5));\n  console.log(largestEvenNumber(25, 6));\n  console.log(largestEvenNumber(26, 5));\n  console.log(largestEvenNumber(26, 6));\n  console.log(largestEvenNumber(27, 5));\n  console.log(largestEvenNumber(27, 6));\n  console.log(largestEvenNumber(28, 5));\n  console.log(largestEvenNumber(28, 6));\n  console.log(largestEvenNumber(29, 5));\n  console.log(largestEvenNumber(29, 6));\n  console.log(largestEvenNumber(30, 5));\n  console.log(largestEvenNumber(30, 6));\n  console.log(largestEvenNumber(31, 5));\n  console.log(largestEvenNumber(31, 6));\n  console.log(largestEvenNumber(32, 5));\n  console.log(largestEvenNumber(32, 6));\n  console.log(largestEvenNumber(33, 5));\n  console.log(largestEvenNumber(33, 6));\n  console.log(largestEvenNumber(34, 5));\n  console.log(largestEvenNumber(34, 6));\n  console.log(largestEvenNumber(35, 5));\n  console.log(largestEvenNumber(35, 6));\n  console.log(largestEvenNumber(36, 5));\n  console.log(largestEvenNumber(36, 6));\n  console.log(largestEvenNumber(37, 5));\n  console.log(largestEvenNumber(37, 6));\n  console.log(largestEvenNumber(38, 5));\n  console.log(largestEvenNumber(38, 6));\n  console.log(largestEvenNumber(39, 5));\n  console.log(largestEvenNumber(39, 6));\n  console.log(largestEvenNumber(40, 5));\n  console.log(largestEvenNumber(40, 6));\n  console.log(largestEvenNumber(41, 5));\n  console.log(largestEvenNumber(41, 6));\n  console.log(largestEvenNumber(42, 5));\n  console.log(largestEvenNumber(42, 6));\n  console.log(largestEvenNumber(43, 5));\n  console.log(largestEvenNumber(43, 6));\n  console.log(largestEvenNumber(44, 5));\n  console.log(largestEvenNumber(44,"}
{"task_id": "JavaScript/103", "prompt": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n    const count = (n - m) + 1\n    return Math.floor((n + m) / 2) + 'b' + (count.toString(2)).replace(/^0+/, '')\n}\n\nconst isValid = (n, m) => {\n    const roundedAvg = (n, m) => {\n        const count = (n - m) + 1\n        return Math.floor((n + m) / 2) + 'b' + (count.toString(2)).replace(/^0+/, '')\n    }\n    return (n > m && roundedAvg(n, m) === roundedAvg(n, m)) ||\n        (n <= m && roundedAvg(n, m) === -1)\n}\n\nconst main = () => {\n    const n = parseInt(process.argv[2])\n    const m = parseInt(process.argv[3])\n\n    console.log(isValid(n, m))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let u = [], n = 0, l = x.length;\n  for (let i = 0; i < l; i++) {\n    let xd = x[i];\n    if (xd % 2 === 0) {\n      return [];\n    }\n    if (xd > n) {\n      u = [xd];\n      n = xd;\n    } else {\n      u.push(xd);\n    }\n  }\n  return u;\n}\n\nconsole.log(uniqueDigits([15, 33, 1422, 1, 3, 5, 7, 10, 15, 19, 23, 33]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    if (arr.length > 0) {\n        arr.sort((a, b) => {\n            return b.length - a.length;\n        });\n        return arr.reverse().map(n => {\n            switch (n.toString()) {\n                case \"One\":\n                    return \"Onx\";\n                case \"Two\":\n                    return \"Two\";\n                case \"Three\":\n                    return \"Threz\";\n                case \"Four\":\n                    return \"Four\";\n                case \"Five\":\n                    return \"Five\";\n                case \"Six\":\n                    return \"Six\";\n                case \"Seven\":\n                    return \"Seven\";\n                case \"Eight\":\n                    return \"Eight\";\n                case \"Nine\":\n                    return \"Nine\";\n            }\n        });\n    } else {\n        return [];\n    }\n};\n\n/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byValue = (arr) => {\n    if (arr.length > 0) {\n        arr.sort((a, b) => {\n            return a - b;\n        });\n        return arr.reverse().map(n => {\n            switch (n.toString()) {\n                case \"One\":\n                    return \"Onx\";\n                case \"Two\":\n                    return \"Two\";\n                case \"Three\":\n                    return \"Threz\";\n                case \"Four\":\n                    return \"Four\";\n                case \"Five\":\n                    return \"Five\";\n                case \"Six\":\n                    return \"Six\";\n                case \"Seven\":\n                    return \"Seven\";\n                case \"Eight\":\n                    return \"Eight\";\n                case \"Nine\":\n                    return \"Nine\";\n            }\n        });\n    } else {\n        return [];\n    }\n};\n\n/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byValueLength = (arr) => {\n    if (arr.length > 0) {\n        arr.sort((a, b) => {\n            return a - b;\n        });\n        return arr.reverse().map(n => {\n            switch (n.toString()) {\n                case \"One\":\n                    return \"Onx\";\n                case \"Two\":\n                    return \"Two\";\n                case \"Three\":\n                    return \"Threz\";\n                case \"Four\":\n                    return \"Four\";\n                case \"Five\":\n                    return \"Five\";\n                case \"Six\":\n                    return \"Six\";\n                case \"Seven\":\n                    return \"Seven\";\n                case \"Eight\":\n                    return \"Eight\";\n                case \"Nine\":\n                    return \"Nine\";\n            }\n        });\n    } else {\n        return [];\n    }\n};\n\n/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          "}
{"task_id": "JavaScript/106", "prompt": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = []\n  let i = 1\n  let sum = 1\n  while (i < n) {\n    sum = sum * i\n    result.push(sum)\n    i++\n  }\n  return result\n}\n\nconsole.log(f(5))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evenOddPalindrome = [];\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    let reverse = reverseString(toString(i));\n    if (i % 2 === 0) {\n      if (reverse.length % 2 === 0) {\n        evenOddPalindrome.push(i);\n      }\n    } else {\n      if (reverse.length % 2 === 1) {\n        odd++;\n      }\n    }\n  }\n  return (evenOddPalindrome);\n}\n\nconst reverseString = (s) => {\n  let newStr = '';\n  for (let i = s.length - 1; i >= 0; i--) {\n    newStr += s[i];\n  }\n  return newStr;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let count = 0;\n  for (let num of arr) {\n    if (num > 0) {\n      count += 1;\n    } else {\n      count -= 1;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We hwve an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We hwve an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    let len = arr.length, i, j;\n    if (len === 0) return false;\n    for (i = 0; i < len - 1; i++) {\n        j = rand() % (len - i) + i;\n        let tmp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = tmp;\n    }\n    return true;\n}\n\n//console.log(moveOneBall([3, 4, 5, 1, 2]));\n//console.log(moveOneBall([3, 5, 4, 1, 2]));\n//console.log(moveOneBall([3, 5, 4, 1, 2, 3, 4]));\n//console.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6]));\n//console.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]));\n//console.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n  if (len1!== len2) {\n    return \"NO\"\n  }\n  for (let i = 0; i < len1; i++) {\n    if (lst1[i]!== lst2[i]) {\n      return \"NO\"\n    }\n  }\n  return \"YES\"\n}\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]))\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let count = {};\n  let unique = {};\n  let letters = test.split(' ');\n  for (let i = 0; i < letters.length; i++) {\n    let letter = letters[i].toLowerCase();\n    let countLetter = count[letter] || 0;\n    count[letter] = countLetter + 1;\n    if (!unique[letter]) {\n      unique[letter] = true;\n    }\n  }\n  return count;\n};\n\nmodule.exports = histogram;\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const sLength = s.length\n  const cLength = c.length\n  let result = ''\n  for (let i = 0; i < sLength; i++) {\n    let temp = s[i]\n    for (let j = 0; j < cLength; j++) {\n      if (temp === c[j]) {\n        temp = s[sLength - 1 - i]\n        break\n      }\n    }\n    if (temp === s[i]) {\n      result += temp\n    }\n  }\n  return [result, s.includes(c)]\n}\n\nmodule.exports = reverseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const res = []\n  for (let i = 0; i < lst.length; i++) {\n    res.push(`the number of odd elements ${i} of the ${lst[i]}`)\n  }\n  return res\n}\n\n// console.log(oddCount(['1234567']))\n// console.log(oddCount(['3',\"11111111\"]))\n\n// console.log(oddCount(['234567','1234','5','4','1','7','9','3','6','8']))\n// console.log(oddCount(['1234567']))\n// console.log(oddCount(['3',\"11111111\"]))\n// console.log(oddCount(['234567','1234','5','4','1','7','9','3','6','8']))\n// console.log(oddCount(['1','2','3','4','5','6','7','8','9','0']))\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    const n = nums.length;\n    const minSum = Number.MAX_VALUE;\n\n    for (let i = 0; i < n; i++) {\n        const left = i;\n        const right = i + 1;\n        const sum = nums[i];\n        while (left >= 0 && right < n && sum === nums[right]) {\n            right++;\n        }\n        if (sum < minSum) {\n            minSum = sum;\n        }\n    }\n    return minSum;\n};\n\n// TEST\nconst test_arr = [2, 3, 4, 1, 2, 4];\nconsole.log(`minSubArraySum(${test_arr}) = ${minSubArraySum(test_arr)}`);\n\nconst test_arr2 = [-1, -2, -3];\nconsole.log(`minSubArraySum(${test_arr2}) = ${minSubArraySum(test_arr2)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const count = grid.length\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < count) {\n    while (j < count && grid[i][j] === 1) {\n      grid[i][j] = 0\n      j++\n    }\n    result += j - i\n    while (j < count && grid[i][j] === 0) {\n      grid[i][j] = 1\n      j++\n    }\n    i++\n  }\n  return result\n}\n\nexport default countNines\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let l = arr.length\n  let n = 0\n  let a = []\n  let i = 0\n  let t = 0\n  let j = 0\n\n  while (i < l) {\n    t = 0\n    n = 0\n    for (j = i; j < l; j += 1) {\n      t += (arr[j] % 2)? 1 : 0\n      n += (arr[j] > 0)? 1 : 0\n    }\n\n    a[i] = t\n    i = j\n  }\n\n  let b = []\n  l = arr.length\n  for (i = 0; i < l; i += 1) {\n    t = 0\n    for (j = i; j < l; j += 1) {\n      t += (arr[j] % 2)? 1 : 0\n    }\n\n    b.push(t)\n  }\n\n  let c = []\n  l = arr.length\n  for (i = 0; i < l; i += 1) {\n    t = 0\n    for (j = i; j < l; j += 1) {\n      t += (arr[j] > 0)? 1 : 0\n    }\n\n    c.push(t)\n  }\n\n  return a.concat(b).concat(c)\n}\n\n// console.log(sortArray([1, 0, 2, 3, 4]))\n// console.log(sortArray([-2, -3, -4, -5, -6]))\n// console.log(sortArray([1, 0, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const isWhitespace = (char) => char ==='' || char === '\\t' || char === '\\n' || char === '\\r' || char === '\\f'\n  const isAlpha = (char) => char.isAlpha() || char === '_'\n  const isNumeric = (char) => char.isNumeric()\n  const isDigit = (char) => char.isDigit()\n\n  const isValidChar = (char) => isAlpha(char) || isNumeric(char) || char === '_'\n  const isWhitespaceChar = (char) => isWhitespace(char)\n\n  const isWhitespaceWord = (word) => word.split('').every(isWhitespace)\n\n  const isValidWord = (word) => word.split('').every(isValidChar)\n\n  const isAlphaWord = (word) => word.split('').every(isAlpha)\n\n  const isNumericWord = (word) => word.split('').every(isNumeric)\n\n  const isDigitWord = (word) => word.split('').every(isDigit)\n\n  const isValid = (word) => word.split('').every(isValidChar)\n\n  const isWhitespaceWordChar = (word) => word.split('').every(isWhitespaceChar)\n\n  const isAlphaWordChar = (word) => word.split('').every(isAlphaWord)\n\n  const isNumericWordChar = (word) => word.split('').every(isNumericWord)\n\n  const isDigitWordChar = (word) => word.split('').every(isDigitWord)\n\n  const isValidCharWord = (word) => word.split('').every(isValidChar)\n\n  const isWhitespaceCharWord = (word) => word.split('').every(isWhitespaceChar)\n\n  const isAlphaCharWord = (word) => word.split('').every(isAlphaWordChar)\n\n  const isNumericCharWord = (word) => word.split('').every(isNumericCharWord)\n\n  const isDigitCharWord = (word) => word.split('').every(isDigitCharWord)\n\n  const isValidCharWord = (word) => word.split('').every(isValidCharWord)\n\n  const isWhitespaceCharWord = (word) => word.split('').every(isWhitespaceCharWord)\n\n  const isAlphaCharWord = (word) => word.split('').every(isAlphaCharWord)\n\n  const isNumericCharWord = (word) => word.split('').every(isNumericCharWord)\n\n  const isDigitCharWord = (word) => word.split('').every(isDigitCharWord)\n\n  const isValidCharWord = (word) => word.split('').every(isValidCharWord)\n\n  const isWhitespaceWordChar = (word) => word.split('').every(isWhitespaceWordChar)\n\n  const isAlphaWordChar = (word) => word.split('').every(isAlphaWordChar)\n\n  const isNumericWordChar = (word) => word.split('').every(isNumericWordChar)\n\n  const isDigitWordChar = (word) => word.split('').every(isDigitWordChar)\n\n  const isValidCharWordChar = (word) => word.split('').every(isValidCharWordChar)\n\n  const isWhitespaceWordChar = (word) => word.split('').every(isWhitespaceWordChar)\n\n  const isAlphaWordChar = (word) => word.split('').every(isAlphaWordChar)\n\n  const isNumericWordChar = (word) => word.split('').every(isNumericWordChar)\n\n  const isDigitWordChar = (word) => word.split('').every(isDigitWordChar)\n\n  const isValidCharWordChar = (word) => word.split('').every(isValidCharWordChar)\n\n  const isWhitespaceWordChar = (word) => word.split('').every(isWhitespaceWordChar)\n\n  const isAlphaWordChar = (word) => word.split('').every(isAlphaWordChar)\n\n  const isNumericWordChar = (word) => word.split('').every(isNumericWordChar)\n\n  const isDigitWordChar = (word) => word.split('').every(isDigitWordChar)\n\n  const isValidCharWordChar = (word) => word.split('').every(isValidCharWordChar)\n\n  const isWhitespaceWordChar = (word) => word.split('').every(isWhitespaceWordChar)\n\n  const isAlphaWordChar = (word) => word.split('').every(isAlphaWordChar)\n\n  const isNumericWordChar = (word) => word.split('').every(isNumericWordChar)\n\n  const isDigitWordChar = (word) => word.split('').every(isDigitWordChar)\n\n  const isValidCharWordChar = (word) => word.split('').every(isValidCharWordChar)\n\n  const isWhitespaceWordChar = (word) => word.split('').every(isWhitespaceWordChar)\n\n  const isAlphaWordChar = (word) => word.split('').every(isAlphaWordChar)\n\n  const isNumericWordChar = (word) => word.split('').every(isNumericWordChar)\n\n  const isDigitWordChar = (word) => word.split('').every(isDigitWordChar"}
{"task_id": "JavaScript/118", "prompt": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const vowels = ['a','e','i','o','u']\n  const wordLen = word.length\n  let start = 0\n  let end = wordLen - 1\n  let closestVowel = null\n\n  while (start < end) {\n    const nextStart = start\n    const prevEnd = end\n    let prevVowel = null\n    let prevVowelWeight = 0\n    let currVowel = null\n    let currVowelWeight = 0\n\n    while (nextStart <= prevEnd) {\n      if (vowels.includes(word[nextStart])) {\n        if (currVowel === null) {\n          currVowel = word[nextStart]\n          currVowelWeight = 1\n        } else {\n          currVowelWeight = currVowelWeight + 1\n        }\n      } else {\n        currVowelWeight = currVowelWeight + 1\n      }\n      nextStart = nextStart + 1\n    }\n\n    if (currVowelWeight > prevVowelWeight) {\n      prevVowel = currVowel\n      prevVowelWeight = currVowelWeight\n    }\n\n    end = prevEnd\n    start = prevEnd + 1\n    closestVowel = prevVowel\n  }\n\n  return closestVowel\n}\n\nexport { getClosestVowel }<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const str = lst[0]\n  const len = str.length\n  for (let i = 0; i < len; i++) {\n    if (str[i] === '(') stack.push(i)\n    else if (stack.length === 0) return 'No'\n    else {\n      if (stack[stack.length - 1] === i) {\n        stack.pop()\n        continue\n      }\n      else {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length === 0) return 'Yes'\n  return 'No'\n}\n\nconsole.log(matchParens(['()(', ')']) === 'Yes')\nconsole.log(matchParens([')', ')']) === 'No')\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let sort = [...arr];\n  sort.sort((a, b) => a - b);\n  return sort.slice(0, k);\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = lst.reduce((prev, curr) => prev + curr, 0);\n  return sum % 2 === 0? sum : 0;\n};\n\nexport default solution;\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  let j = k;\n  while (j < arr.length) {\n    sum += arr[j];\n    j++;\n  }\n  return sum;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 3 # count of elements in arr with dmgits at most 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countElements = (arr, k) => {\n  let count = 0;\n  let j = k;\n  while (j < arr.length) {\n    count++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the last k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 5 # count of elements in arr with dmgits at most 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countLastElements = (arr, k) => {\n  let count = 0;\n  let j = arr.length - k;\n  while (j < arr.length) {\n    count++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the middle elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 3 # count of elements in arr with dmgits at most 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countMiddleElements = (arr, k) => {\n  let count = 0;\n  let j = (arr.length - k) / 2;\n  while (j < arr.length) {\n    count++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the middle elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 2 # count of elements in arr with dmgits at most 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countMiddleElements2 = (arr, k) => {\n  let count = 0;\n  let j = (arr.length - k) / 2;\n  while (j < arr.length) {\n    count++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the middle elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 3 # count of elements in arr with dmgits at most 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countMiddleElements3 = (arr, k) => {\n  let count = 0;\n  let j = (arr.length - k) / 2;\n  while (j < arr.length) {\n    count++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the middle elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 1 # count of elements in arr with dmgits at most 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countMiddleElements4 = (arr, k) => {\n  let count = 0;\n  let j = (arr.length - k) / 2;\n  while (j < arr.length) {\n    count++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the last elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 2 # count of elements in arr with dmgits at most 4\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst countLastElements2 = (arr, k) => {\n  let count = 0;\n  let j = arr.length - k;\n  while (j < arr.length) {\n    count++;\n    j++;\n  }\n  return count;\n};\n\n/*\n  Givfn an array arr and an intwger k, return\n  the number of elements with at most k dmgits from the last elements of arr.\n\n  Example:\n\n      Input:"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const res = []\n  let cur = n\n  while (cur > 1) {\n    if (cur % 2 === 0) {\n      res.push(cur)\n      cur = cur / 2\n    } else {\n      cur = (cur * 3) + 1\n    }\n  }\n  return res\n}\n\nmodule.exports = getOddCollatz<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let m = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n  let d = date.match(/^\\d{2}-\\d{2}-\\d{4}$/)\n  let y = date.match(/^\\d{4}-\\d{2}-\\d{2}$/)\n\n  if (!m &&!d &&!y) return false\n  else if (m && d && y) return true\n  else if (m && d) {\n    let m = new Date(date).getMonth()\n    if (m < 1 || m > 12) return false\n    else if (m === 2) {\n      let y = new Date(date).getFullYear()\n      let days = new Date(date).getDate()\n      if (days < 1 || days > 30) return false\n      else return true\n    } else return true\n  } else if (m) {\n    let m = new Date(date).getMonth()\n    if (m < 1 || m > 12) return false\n    else return true\n  } else if (d) {\n    let d = new Date(date).getDate()\n    if (d < 1 || d > 31) return false\n    else return true\n  } else if (y) {\n    let y = new Date(date).getFullYear()\n    if (y < 1900 || y > 2020) return false\n    else return true\n  }\n}\n\nexport default validDate\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let words = txt.split(' ')\n  let lastSpace = false\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i]\n    let space = word.indexOf(' ')\n    if (space!== -1) {\n      if (lastSpace) {\n        words[i - 1] = words[i - 1] +'' + word.substring(space + 1)\n      } else {\n        words[i] = word.substring(0, space)\n      }\n      lastSpace = true\n    } else {\n      lastSpace = false\n    }\n  }\n  return words\n}\n\nconst isLowerCase = (letter) => {\n  return letter.toLowerCase() === letter\n}\n\nconst isUpperCase = (letter) => {\n  return letter.toUpperCase() === letter\n}\n\nconst isAlpha = (letter) => {\n  return isLowerCase(letter) || isUpperCase(letter)\n}\n\nconst isNumeric = (letter) => {\n  return /\\d/.test(letter)\n}\n\nconst containsLetter = (letter) => {\n  return /[a-zA-Z]/.test(letter)\n}\n\nconst containsNumeric = (letter) => {\n  return /\\d/.test(letter)\n}\n\nconst containsLowerLetter = (letter) => {\n  return isLowerCase(letter)\n}\n\nconst containsUpperLetter = (letter) => {\n  return isUpperCase(letter)\n}\n\nconst containsAlpha = (letter) => {\n  return containsLetter(letter) && containsLowerLetter(letter)\n}\n\nconst containsNumber = (letter) => {\n  return containsNumeric(letter) && containsLowerLetter(letter)\n}\n\nconst containsSpace = (letter) => {\n  return /\\s/.test(letter)\n}\n\nconst containsLower = (txt) => {\n  return txt.toLowerCase().includes(txt)\n}\n\nconst containsUpper = (txt) => {\n  return txt.toUpperCase().includes(txt)\n}\n\nconst containsAlphaNumeric = (txt) => {\n  return containsAlpha(txt) && containsNumeric(txt)\n}\n\nconst containsAlphanumeric = (txt) => {\n  return containsAlphaNumeric(txt) && containsLowerLetter(txt)\n}\n\nconst containsLowerAlphanumeric = (txt) => {\n  return containsAlphaNumeric(txt) && containsLowerLetter(txt)\n}\n\nconst containsUpperAlphanumeric = (txt) => {\n  return containsAlphaNumeric(txt) && containsUpperLetter(txt)\n}\n\nconst containsAlphanumericOrLowerCase = (txt) => {\n  return containsAlphaNumeric(txt) || containsLowerCase(txt)\n}\n\nconst containsAlphanumericOrLowerCaseOrUpperCase = (txt) => {\n  return containsAlphaNumeric(txt) || containsLowerCase(txt) || containsUpperCase(txt)\n}\n\nconst containsLowerCaseOrUpperCase = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt)\n}\n\nconst containsLowerCaseOrUpperCaseOrNumeric = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt)\n}\n\nconst containsLowerCaseOrUpperCaseOrNumericOrSpace = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsSpace(txt)\n}\n\nconst containsLowerCaseOrUpperCaseOrNumericOrAlpha = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsAlpha(txt)\n}\n\nconst containsLowerCaseOrUpperCaseOrNumericOrAlphaOrSpace = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsAlpha(txt) || containsSpace(txt)\n}\n\nconst containsAlphaOrNumeric = (txt) => {\n  return containsAlpha(txt) || containsNumeric(txt)\n}\n\nconst containsLowerAlphaOrUpperAlphaOrNumeric = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt)\n}\n\nconst containsLowerAlphaOrUpperAlphaOrNumericOrSpace = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsSpace(txt)\n}\n\nconst containsLowerAlphaOrUpperAlphaOrNumericOrAlpha = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsAlpha(txt)\n}\n\nconst containsLowerAlphaOrUpperAlphaOrNumericOrAlphaOrSpace = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsAlpha(txt) || containsSpace(txt)\n}\n\nconst containsLowerAlphaOrUpperAlphaOrNumericOrAlphaOrSpace = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsAlpha(txt) || containsSpace(txt)\n}\n\nconst containsLowerAlphaOrUpperAlphaOrNumericOrAlphaOrSpace = (txt) => {\n  return containsLowerCase(txt) || containsUpperCase(txt) || containsNumeric(txt) || containsAlpha(txt) || containsSpace(txt)\n}\n\nconst containsOnlyLetters = (txt) => {\n  return containsLowerCase(txt)\n}\n\nconst containsOnlyLettersOrNumeric = (txt) => {\n  return containsLowerCase(txt)"}
{"task_id": "JavaScript/126", "prompt": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (!lst) return false\n  const sorted = lst.slice(0).sort()\n  return sorted.toString() === lst.toString()\n}\n\n/* Givfn a list of numbers, return the first element. If list has no elements, return undefined.\n  Examples\n  first([]) ➞ undefined\n  first([1]) ➞ 1\n  first([2, 3]) ➞ 2\n  first([1, 2, 3]) ➞ 1\n  first([1, 2, 3, 4]) ➞ 1\n  first([2, 3, 4, 5]) ➞ 2\n  first([1, 2, 2, 3]) ➞ undefined\n  first([1, 2, 2, 2, 3]) ➞ undefined\n  */\nconst first = (lst) => {\n  if (!lst) return undefined\n  return lst[0]\n}\n\n/* Givfn a list of numbers, return the last element. If list has no elements, return undefined.\n  Examples\n  last([]) ➞ undefined\n  last([1]) ➞ 1\n  last([2, 3]) ➞ 3\n  last([1, 2, 3]) ➞ 3\n  last([1, 2, 3, 4]) ➞ 4\n  last([2, 3, 4, 5]) ➞ 5\n  last([1, 2, 2, 3]) ➞ undefined\n  last([1, 2, 2, 2, 3]) ➞ undefined\n  */\nconst last = (lst) => {\n  if (!lst) return undefined\n  return lst[lst.length - 1]\n}\n\n/* Givfn a list of numbers, return the last index of the first number in the list\n  that is greater than the number. If there is no number in the list that is\n  greater than the number, return -1.\n  Examples\n  indexOf(1, [1, 2, 3]) ➞ 1\n  indexOf(2, [1, 2, 3]) ➞ 2\n  indexOf(3, [1, 2, 3]) ➞ -1\n  indexOf(4, [1, 2, 3]) ➞ -1\n  */\nconst indexOf = (num, lst) => {\n  if (!lst) return -1\n  const sorted = lst.slice(0).sort()\n  let i = -1\n  let index = sorted.indexOf(num)\n  while (i === -1 && index > -1) {\n    i = index\n    index = sorted.indexOf(num, index + 1)\n  }\n  return i\n}\n\n/* Givfn a list of numbers, return the first index of the last number in the list\n  that is less than the number. If there is no number in the list that is\n  less than the number, return -1.\n  Examples\n  lastIndexOf(1, [1, 2, 3]) ➞ 2\n  lastIndexOf(2, [1, 2, 3]) ➞ 1\n  lastIndexOf(3, [1, 2, 3]) ➞ -1\n  lastIndexOf(4, [1, 2, 3]) ➞ -1\n  */\nconst lastIndexOf = (num, lst) => {\n  if (!lst) return -1\n  const sorted = lst.slice(0).sort()\n  let i = -1\n  let index = sorted.indexOf(num)\n  while (i === -1 && index > -1) {\n    i = index\n    index = sorted.indexOf(num, index - 1)\n  }\n  return i\n}\n\n/* Givfn a list of numbers, return the first number in the list that is strictly\n  greater than the number. If there is no number in the list that is strictly\n  greater than the number, return undefined.\n  Examples\n  gte(1, [1, 2, 3]) ➞ undefined\n  gte(2, [1, 2, 3]) ➞ 2\n  gte(3, [1, 2, 3]) ➞ 2\n  gte(4, [1, 2, 3]) ➞ 3\n  */\nconst gte = (num, lst) => {\n  if (!lst) return undefined\n  const sorted = lst.slice(0).sort()\n  let i = -1\n  let index = sorted.indexOf(num)\n  while (i === -1 && index > -1) {\n    i = index\n    index = sorted.indexOf(num, index + 1)\n  }\n  return i\n}\n\n/* Givfn a list of numbers, return the first number in the list that is strictly\n  less than the number. If there is no number in the list that is strictly\n  less than the number, return undefined.\n  Examples\n  lte(1, [1, 2, 3]) ➞ 1\n  lte(2, [1, 2, 3]) ➞ 2\n  lte(3, [1, 2, 3]) ➞ 2\n  lte(4, [1, 2, 3]) ➞ undefined\n  */\nconst lte = (num, lst) => {\n  if (!lst) return undefined\n  const sorted = lst.slice(0).sort()\n  let i = -1\n  let index = sorted.indexOf(num)\n  while (i === -1 && index > -1) {\n    i = index\n    index = sorted.index"}
{"task_id": "JavaScript/127", "prompt": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start1 = interval1[0];\n  let end1 = interval1[1];\n  let start2 = interval2[0];\n  let end2 = interval2[1];\n\n  if (end1 < start2 || end2 < start1) {\n    return \"NO\";\n  }\n\n  let len = end1 - start1 + 1;\n  if (len < end2 - start2 + 1) {\n    return \"NO\";\n  }\n\n  return \"YES\";\n};\n\nconsole.log(intersection([-3, -1], [-5, 5]));\nconsole.log(intersection([1, 2], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-3, -1], [-5, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n  const signs = arr.map(x => x > 0? 1 : -1);\n  const result = signs.reduce((x, y) => x * y, 1);\n  return result > 0? result : null;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const n = grid.length\n    const m = grid[0].length\n    let A = [[1]]\n    let B = [[0]]\n    let C = [[]]\n    let L = [[]]\n    for (let i = 1; i <= n; i++) {\n        A.push([])\n        for (let j = 1; j <= m; j++) {\n            A[i - 1].push(grid[i - 1][j - 1])\n            B.push([])\n            C.push([])\n            L.push([])\n        }\n    }\n    for (let i = 1; i <= n; i++) {\n        for (let j = 1; j <= m; j++) {\n            let a = 0\n            let b = 0\n            let index = 0\n            let c = 0\n            let d = 0\n            if (i - 1 > 0) {\n                a = A[i - 1][j]\n            }\n            if (j - 1 > 0) {\n                b = A[i][j - 1]\n            }\n            if (i - 1 > 0 && j - 1 > 0) {\n                index = a * m + b\n                c = C[i - 1][j - 1]\n                d = B[i - 1][j - 1]\n                if (index - c > 0) {\n                    B[i - 1][j] = index\n                } else {\n                    B[i - 1][j] = d\n                }\n            }\n            if (i - 1 > 0 && j - 1 < 0) {\n                index = a * m + b\n                c = C[i - 1][j - 1]\n                d = L[i - 1][j - 1]\n                if (index - c > 0) {\n                    L[i - 1][j] = index\n                } else {\n                    L[i - 1][j] = d\n                }\n            }\n        }\n    }\n    let result = []\n    for (let i = 1; i <= k; i++) {\n        result.push(B[k - i][k])\n    }\n    return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n    const t = [1, 3, 2, 1]\n    for (let i = 1; i < n; i++) {\n        t.push(1 + t[i - 1] + t[i + 1])\n    }\n    return t\n}\n\nconst tri(n) {\n  if (n === 0) return []\n  if (n === 1) return [1]\n  if (n === 2) return [1, 1]\n  const a = tri(n - 1)\n  const b = tri(n - 2)\n  const c = tri(n + 1)\n  const t = a.concat(b.slice(1).concat(c.slice(1)))\n  return t\n}\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n === 1) return 1;\n  let res = 1;\n  while (n) {\n    res *= n % 10;\n    n /= 10;\n  }\n  if (res === 0) return 0;\n  return res;\n}\n\n//console.log(digits(1));\n//console.log(digits(4));\n//console.log(digits(235));\nconsole.log(digits(0));\n\n/*\nGiven a non-negative integer n, your task is to print the first n digits of the number.\n\nFor example:\nGiven n = 3, we should return \"012\".\n\nNote:\nThe given integer n is guaranteed to fit within the range of a 32-bit signed integer.\nYou may assume that n is not larger than (2^31 - 1) and \nthat the result does not exceed 10^9.\n*/\n\n// const digits = (n) => {\n//   let res = 1;\n//   while (n) {\n//     res *= n % 10;\n//     n /= 10;\n//   }\n//   return res;\n// }\n\nconst digits = (n) => {\n  let res = 1;\n  while (n > 0) {\n    res *= n % 10;\n    n /= 10;\n  }\n  return res;\n}\n\n//console.log(digits(1));\n//console.log(digits(4));\n//console.log(digits(235));\nconsole.log(digits(0));\n\n/*\nGiven two numbers represented as strings, return multiplication of the numbers as a string.\n\nNote:\nThe numbers can be arbitrarily large and are non-negative.\n\nExample:\n\nInput:\n\"123\"\n\"456\"\n\nOutput:\n\"1296\"\n\nNote:\nThe given numbers are guaranteed to fit within the range of a 64-bit signed integer.\nYou may assume that the two numbers do not contain any leading zero, except the number 0 itself.\n*/\n\nconst multiply = (a, b) => {\n  let ans = 0;\n  while (a.length > 0) {\n    ans = ans + (a.charCodeAt(0) - '0') * (b.charCodeAt(0) - '0');\n    a = a.substring(1);\n    b = b.substring(1);\n  }\n  return ans;\n}\n\n// console.log(multiply(\"123\", \"456\"));\n// console.log(multiply(\"123\", \"789\"));\nconsole.log(multiply(\"123\", \"456\"));\n// console.log(multiply(\"456\", \"789\"));\nconsole.log(multiply(\"123\", \"456\"));\n// console.log(multiply(\"789\", \"123\"));\nconsole.log(multiply(\"789\", \"123\"));\n\n/*\nGiven two numbers represented as strings, return the sum of the numbers as a string.\n\nNote:\nThe numbers can be arbitrarily large and are non-negative.\n\nExample:\n\nInput:\n\"123\"\n\"456\"\n\nOutput:\n\"579\"\n\n*/\nconst sum = (a, b) => {\n  let ans = '';\n  while (a.length > 0) {\n    ans = ans + (a.charCodeAt(0) - '0') + (b.charCodeAt(0) - '0');\n    a = a.substring(1);\n    b = b.substring(1);\n  }\n  return ans;\n}\n\n// console.log(sum(\"123\", \"456\"));\n// console.log(sum(\"123\", \"789\"));\nconsole.log(sum(\"123\", \"456\"));\n// console.log(sum(\"456\", \"789\"));\nconsole.log(sum(\"123\", \"456\"));\n// console.log(sum(\"789\", \"123\"));\nconsole.log(sum(\"789\", \"123\"));\n\n/*\nGiven a string containing only digits, return the largest number that can be formed by the digits in the string.\n\nNote:\nThe input number should be greater than 1 and less than 100.\n*/\n\nconst maxNumber = (s) => {\n  let res = 0;\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    res = res + (s.charCodeAt(i) - '0') * Math.pow(10, count);\n    count++;\n  }\n  return res;\n}\n\n// console.log(maxNumber(\"123\"));\n// console.log(maxNumber(\"45\"));\nconsole.log(maxNumber(\"123\"));\n// console.log(maxNumber(\"45\"));\nconsole.log(maxNumber(\"123\"));\n// console.log(maxNumber(\"789\"));\nconsole.log(maxNumber(\"789\"));\n\n/*\nGiven two strings, return their sum, also a string.\n\nNote:\nThe strings may only contain digits '0' - '9'.\n\n*/\n\nconst sumStrings = (a, b) => {\n  let res = 0;\n  let count = 0;\n  for (let i = 0; i < a.length; i++) {\n    res = res + (a.charCodeAt(i) - '0') + (b.charCodeAt(i) - '0') * Math.pow(10, count);\n    count++;\n  }\n  return res;\n}\n\n// console.log(sumStrings(\"123\", \"456\"));\n// console.log(sumStrings(\"123\", \"789\"));\nconsole.log(sumStrings(\"123\", \"456\"));\n// console.log(sumStrings(\"123\", \"789\"));\nconsole.log(sumStrings(\"123\", \"456\"));\n// console.log(sumStrings(\"789\", \"123\"));\nconsole.log(sumStrings(\"789\", \"123\"));\n\n/*\nGiven two strings, return their product, also a string.\n\nNote:\nThe strings may only contain digits '0' - '9'.\n\n*/\n\nconst productStrings = (a, b) => {\n  let res = 0;\n  let count = 0;\n  for (let i"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  const len = string.length;\n  let stackSize = 0;\n  for (let i = 0; i < len; i++) {\n    const c = string[i];\n    if (c === '[') {\n      stack.push(c);\n      stackSize++;\n    } else if (c === ']') {\n      stackSize--;\n      if (stackSize === 0) {\n        return true;\n      }\n      stack.pop();\n    }\n  }\n  return false;\n};\n\nconsole.log(isNested('[][]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const sum = sumSquaresHelper(lst, 0, lst.length);\n  return sum;\n};\n\nconst sumSquaresHelper = (lst, index, length) => {\n  const sum = lst[index] * lst[index];\n  const nextIndex = index + 1;\n  if (nextIndex < length) {\n    sum += sumSquaresHelper(lst, nextIndex, length);\n  }\n  return sum;\n};\n\n// Tests\n\nconst sumSquaresTest = [\n  [1, 2, 3],\n  [1, 4, 9],\n  [1, 3, 5, 7],\n  [1.4, 4.2, 0],\n  [-2.4, 1, 1]\n];\n\nconst sumSquaresTestResult = [14, 98, 84, 29, 6];\n\nconsole.log(sumSquares(sumSquaresTest));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    txt = txt.trim();\n    const isLetters = txt.split(\" \").every(char => char.match(/[a-zA-Z]+/));\n    return!isLetters && txt.match(/[a-zA-Z]+/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a number and is not a part of a word.\n  Examples:\n  checkIfLastCharIsANumber(\"2\") ➞ true\n  checkIfLastCharIsANumber(\"3\") ➞ false\n  checkIfLastCharIsANumber(\"3.2\") ➞ false\n  checkIfLastCharIsANumber(\"a\") ➞ false\n  checkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst checkIfLastCharIsANumber = (txt) => {\n    txt = txt.trim();\n    const isNumerics = txt.match(/^[0-9]+$/);\n    return!isNumerics && txt.match(/^[0-9]+/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a non-alphabetic character.\n  Examples:\n  checkIfLastCharIsAHash(\"#\") ➞ false\n  checkIfLastCharIsAHash(\" \") ➞ false\n  checkIfLastCharIsAHash(\"#abc\") ➞ true\n  checkIfLastCharIsAHash(\"abc\") ➞ false\n  checkIfLastCharIsAHash(\"\") ➞ false\n  */\nconst checkIfLastCharIsAHash = (txt) => {\n    txt = txt.trim();\n    return!txt.match(/[a-zA-Z]+/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a lowercase letter.\n  Examples:\n  checkIfLastCharIsALowercase(\"a\") ➞ true\n  checkIfLastCharIsALowercase(\"A\") ➞ true\n  checkIfLastCharIsALowercase(\"abc\") ➞ false\n  checkIfLastCharIsALowercase(\"\") ➞ false\n  */\nconst checkIfLastCharIsALowercase = (txt) => {\n    txt = txt.trim();\n    return txt.match(/[a-z]+/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a upper case letter.\n  Examples:\n  checkIfLastCharIsAUppercase(\"A\") ➞ true\n  checkIfLastCharIsAUppercase(\"a\") ➞ false\n  checkIfLastCharIsAUppercase(\"\") ➞ false\n  */\nconst checkIfLastCharIsAUppercase = (txt) => {\n    txt = txt.trim();\n    return txt.match(/[A-Z]+/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a punctuation mark.\n  Examples:\n  checkIfLastCharIsAPunctuation(\"!\") ➞ true\n  checkIfLastCharIsAPunctuation(\" \") ➞ false\n  checkIfLastCharIsAPunctuation(\".\") ➞ true\n  checkIfLastCharIsAPunctuation(\"\") ➞ false\n  */\nconst checkIfLastCharIsAPunctuation = (txt) => {\n    txt = txt.trim();\n    return txt.match(/[?!.,:;&]/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a whitespace character.\n  Examples:\n  checkIfLastCharIsAWhitespace(\" \") ➞ true\n  checkIfLastCharIsAWhitespace(\" \") ➞ true\n  checkIfLastCharIsAWhitespace(\" \") ➞ true\n  checkIfLastCharIsAWhitespace(\" \") ➞ true\n  checkIfLastCharIsAWhitespace(\" \") ➞ true\n  checkIfLastCharIsAWhitespace(\"\") ➞ false\n  */\nconst checkIfLastCharIsAWhitespace = (txt) => {\n    txt = txt.trim();\n    return txt.match(/\\s+/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is a valid URL.\n  Examples:\n  checkIfLastCharIsAURL(\"http://www.google.com\") ➞ true\n  checkIfLastCharIsAURL(\"http://google.com\") ➞ true\n  checkIfLastCharIsAURL(\"google.com\") ➞ false\n  checkIfLastCharIsAURL(\"http://www.google.\") ➞ false\n  checkIfLastCharIsAURL(\"www.google.com\") ➞ false\n  checkIfLastCharIsAURL(\"google.com\") ➞ false\n  checkIfLastCharIsAURL(\"google.com\") ➞ false\n  checkIfLastCharIsAURL(\"\") ➞ false\n  */\nconst checkIfLastCharIsAURL = (txt) => {\n    txt = txt.trim();\n    return txt.match(/^(http|https|ftp)\\:/);\n}\n\n/* Crewte a function that returns true if the lasr charecter\n  of a given string is an email address.\n  Examples:\n  checkIfLastCharIsAnEmail(\"abc@gmail.com\") ➞ true\n  checkIfLastCharIsAnEmail(\"abc@gmail\") ➞ true\n  checkIfLastCharIsAnEmail(\"abc@gmail.\") ➞ true\n  check"}
{"task_id": "JavaScript/135", "prompt": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  let result = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > arr[i + 1]) {\n      if (i!== 0) {\n        let tmp = arr[i - 1];\n        arr[i - 1] = arr[i];\n        arr[i] = tmp;\n      }\n      result = i;\n      break;\n    }\n  }\n  return result;\n};\n\n//https://www.geeksforgeeks.org/longest-palindrome-subsequence-part-i/\nconst findLongestPalindrome = (arr) => {\n  let result = 0;\n  let longestPalindrome = 0;\n  let i = 0;\n  let j = arr.length - 1;\n  let max = arr.length;\n  while (i < j) {\n    if (arr[i] === arr[j]) {\n      longestPalindrome += 2;\n      i++;\n      j--;\n    } else if (arr[i] > arr[j]) {\n      j--;\n    } else {\n      i++;\n    }\n    if (longestPalindrome > max) {\n      max = longestPalindrome;\n      result = i;\n    }\n  }\n  return result;\n};\n\nconst main = () => {\n  let arr = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n  console.log(canArrange(arr));\n  console.log(findLongestPalindrome(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const largest = (val, max) => {\n    if (val === 0) {\n      return 0;\n    } else if (val > max) {\n      return max;\n    } else {\n      return val;\n    }\n  };\n\n  const smallest = (val, min) => {\n    if (val < min) {\n      return min;\n    } else {\n      return val;\n    }\n  };\n\n  const largestSmallest = (lst) => {\n    if (!lst) {\n      return (null, null);\n    }\n\n    let largest = largest(lst[0], lst[1]);\n    let smallest = smallest(lst[0], lst[1]);\n\n    for (let i = 2; i < lst.length; i++) {\n      if (lst[i] > largest) {\n        largest = lst[i];\n      } else if (lst[i] < smallest) {\n        smallest = lst[i];\n      }\n    }\n\n    return (largest, smallest);\n  };\n\n  return largestSmallest(lst);\n};\n\nconsole.log(largestSmallestIntegers([2, 4, 1, 3, 5, 7]));\nconsole.log(largestSmallestIntegers([0]));\nconsole.log(largestSmallestIntegers([5, 4, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  // if (typeof(a) ==='string') {\n  //   return a\n  // }\n  if (typeof(a) === 'object') {\n    if (a.toString().indexOf(',') > -1) {\n      return a.toString()\n    }\n    return a\n  }\n  if (typeof(b) === 'object') {\n    if (b.toString().indexOf(',') > -1) {\n      return b.toString()\n    }\n    return b\n  }\n  // if (typeof(a) === 'number') {\n  //   return a\n  // }\n  // if (typeof(b) === 'number') {\n  //   return b\n  // }\n  // if (typeof(a) ==='string') {\n  //   return a\n  // }\n  // if (typeof(b) ==='string') {\n  //   return b\n  // }\n  // if (a == b) {\n  //   return a\n  // }\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  return null\n}\n\nconst compareTwo = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  return null\n}\n\n/*\n  Crewte a function that takes two numbers, or a string representing\n  a number and returns the smaller of the two in its given variable typv.\n  Return null uf the valnss are eqbal.\n  */\nconst compareTwo = (a, b) => {\n  if (typeof(a) === 'number') {\n    return a < b? a : b\n  }\n  if (typeof(b) === 'number') {\n    return a < b? a : b\n  }\n  if (typeof(a) === 'object') {\n    if (a.toString().indexOf(',') > -1) {\n      return a.toString()\n    }\n    return a\n  }\n  if (typeof(b) === 'object') {\n    if (b.toString().indexOf(',') > -1) {\n      return b.toString()\n    }\n    return b\n  }\n  if (typeof(a) ==='string') {\n    return a < b? a : b\n  }\n  if (typeof(b) ==='string') {\n    return a < b? a : b\n  }\n  if (a == b) {\n    return a\n  }\n  return null\n}\n\nconst compareThree = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  return null\n}\n\nconst compareFour = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  if (a == b) {\n    return a\n  }\n  return null\n}\n\nconst compareFive = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  if (a == b) {\n    return a\n  }\n  return null\n}\n\nconst compareSix = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  if (a == b) {\n    return a\n  }\n  if (a > b) {\n    return a\n  }\n  return b\n}\n\nconst compareSeven = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  if (a == b) {\n    return a\n  }\n  if (a > b) {\n    return a\n  }\n  if (a > b) {\n    return b\n  }\n  return null\n}\n\nconst compareEight = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  if (a == b) {\n    return a\n  }\n  if (a > b) {\n    return a\n  }\n  if (a > b) {\n    return b\n  }\n  if (a < b) {\n    return a\n  }\n  return b\n}\n\nconst compareNine = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  if (a == b) {\n    return a\n  }\n  if (a > b) {\n    return a\n  }\n  if (a > b) {\n    return b\n  }\n  if (a < b) {\n    return a\n  }\n  return b\n}\n\nconst compareTen = (a, b) => {\n  if (a < b) {\n    return a\n  }\n  if (b < a) {\n    return b\n  }\n  if (a == b) {\n    return a\n  }\n  if (a > b) {\n    return a\n  }\n  if (a > b) {\n    return b\n  }\n  if (a < b) {\n    return a\n  }\n  return b\n}\n\nconst compareEleven = (a, b) => {\n  if (a < b) {\n    return a\n  "}
{"task_id": "JavaScript/138", "prompt": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const num = n;\n  const sum = num + num + num + num;\n  return sum % 2 === 0;\n}\n\nconst getNum = (x, y, a, b) => x + y + a + b;\n\nconst add = (x, y, a, b) => x + y + a + b;\n\nconst numOfSum = (n) => {\n  const sums = [];\n  for (let i = 1; i < n; i += 2) {\n    if (isEqualToSumEven(getNum(i, i, i, i))) {\n      sums.push(getNum(i, i, i, i));\n    }\n  }\n  return sums;\n}\n\nmodule.exports = {\n  add,\n  numOfSum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  // 1!\n  let factorial = 1;\n\n  // i!\n  let i = 2;\n  while (i <= n) {\n    factorial *= i;\n    i++;\n  }\n\n  return factorial;\n};\n\nconst find_special_factorial = (n) => {\n  // specialFactorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  let nFactorial = specialFactorial(n);\n  let factorial = nFactorial;\n  let n = nFactorial;\n\n  while (n > 1) {\n    nFactorial = nFactorial - 1;\n    factorial *= nFactorial;\n    n--;\n  }\n\n  return factorial;\n};\n\n// Test\n// const n = 5;\n// const expected = find_special_factorial(n);\n// const actual = specialFactorial(n);\n// console.log(`The special factorial of ${n} is ${expected}`);\n// console.log(`The special factorial of ${n} is ${actual}`);\n\n// const n = 100;\n// const expected = find_special_factorial(n);\n// const actual = specialFactorial(n);\n// console.log(`The special factorial of ${n} is ${expected}`);\n// console.log(`The special factorial of ${n} is ${actual}`);\n\n// const n = 10000;\n// const expected = find_special_factorial(n);\n// const actual = specialFactorial(n);\n// console.log(`The special factorial of ${n} is ${expected}`);\n// console.log(`The special factorial of ${n} is ${actual}`);\n\n// const n = 10000000;\n// const expected = find_special_factorial(n);\n// const actual = specialFactorial(n);\n// console.log(`The special factorial of ${n} is ${expected}`);\n// console.log(`The special factorial of ${n} is ${actual}`);\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n  const SPACE =''\n  const SPACE_LEN = SPACE.length\n\n  let fixedText = ''\n  let currentPos = 0\n  let prevPos = 0\n  \n  for (let i=0; i<text.length; i++) {\n    if (text[i] == SPACE) {\n      fixedText += SPACE\n      prevPos = currentPos\n      currentPos += SPACE_LEN\n    } else {\n      fixedText += text[i]\n      currentPos++\n    }\n  }\n\n  // If there is a pair of spaces\n  if (fixedText[prevPos] == SPACE) {\n    let fixedLen = currentPos - prevPos - 1\n\n    // If it is 2 consecutive spaces\n    if (fixedLen == 2) {\n      fixedText = fixedText.substring(0, prevPos) + '-' + fixedText.substring(currentPos)\n    }\n  }\n  \n  return fixedText\n}\n\n// fixSpaces(\" Example   3\") == \"Example-3\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\"Example \") == \"Example\"\n// fixSpaces(\"Example\") == \"Example\"\n// fixSpaces(\"Example 3\") == \"Example_3\"\n// fixSpaces(\" Example   3\") == \"Example-3\"\n// fixSpaces(\"Example 1\") == \"Example_1\"\n// fixSpaces(\"Example   \") == \"Example\"\n\nmodule.exports = fixSpaces\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let i = 0;\n  while (i < file_name.length) {\n    if (file_name[i].match(/\\d/) && i!= 0 && i!= file_name.length - 1) {\n      return 'No';\n    }\n    if (file_name[i].match(/[^a-zA-Z]/) && i!= 0 && i!= file_name.length - 1) {\n      return 'No';\n    }\n    if (i == file_name.length - 1) {\n      if (file_name[i].match(/\\d/) || file_name[i].match(/[^a-zA-Z]/)) {\n        return 'No';\n      }\n    }\n    i++;\n  }\n  return 'Yes';\n}\n\n/*\n  Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriing aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  let i = 0;\n  while (i < file_name.length) {\n    if (file_name[i].match(/\\d/) && i!= 0 && i!= file_name.length - 1) {\n      return 'No';\n    }\n    if (file_name[i].match(/[^a-zA-Z]/) && i!= 0 && i!= file_name.length - 1) {\n      return 'No';\n    }\n    if (i == file_name.length - 1) {\n      if (file_name[i].match(/\\d/) || file_name[i].match(/[^a-zA-Z]/)) {\n        return 'No';\n      }\n    }\n    i++;\n  }\n  return 'Yes';\n}\n\n// const fileNameCheck = (file_name) => {\n//   let i = 0;\n//   while (i < file_name.length) {\n//     if (file_name[i].match(/\\d/) && i!= 0 && i!= file_name.length - 1) {\n//       return 'No';\n//     }\n//     if (file_name[i].match(/[^a-zA-Z]/) && i!= 0 && i!= file_name.length - 1) {\n//       return 'No';\n//     }\n//     if (i == file_name.length - 1) {\n//       if (file_name[i].match(/\\d/) || file_name[i].match(/[^a-zA-Z]/)) {\n//         return 'No';\n//       }\n//     }\n//     i++;\n//   }\n//   return 'Yes';\n// }\n\n// const fileNameCheck = (file_name) => {\n//   let i = 0;\n//   while (i < file_name.length) {\n//     if (file_name[i].match(/\\d/) && i!= 0 && i!= file_name.length - 1) {\n//       return 'No';\n//     }\n//     if (file_name[i].match(/[^a-zA-Z]/) && i!= 0 && i!= file_name.length - 1) {\n//       return 'No';\n//     }\n//     if (i == file_name.length - 1) {\n//       if (file_name[i].match(/\\d/) || file_name[i].match(/[^a-zA-Z]/)) {\n//         return 'No';\n//       }\n//     }\n//     i++;\n//   }\n//   return 'Yes';\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const result = lst.reduce((acc, n) => acc + n * n, 0);\n  return result;\n};\n\n/*\"\n  Thid function will take a list of numbers and return the sum of all entires. The function will return 0 if the list is empty. \n  The function shall not modify the list that it is passed.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum = (lst) => {\n  const result = lst.reduce((acc, n) => acc + n, 0);\n  return result;\n};\n\n/*\"\n  Thid function will take a list of numbers and return the sum of all entires. The function will return 0 if the list is empty. \n  The function shall not modify the list that it is passed.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst max = (lst) => {\n  const result = lst.reduce((acc, n) => Math.max(acc, n), 0);\n  return result;\n};\n\n/*\"\n  Thid function will take a list of numbers and return the sum of all entires. The function will return 0 if the list is empty. \n  The function shall not modify the list that it is passed.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst min = (lst) => {\n  const result = lst.reduce((acc, n) => Math.min(acc, n), 0);\n  return result;\n};\n\nconst count = (lst) => {\n  return lst.reduce((acc, n) => acc + 1, 0);\n};\n\nconst product = (lst) => {\n  return lst.reduce((acc, n) => acc * n, 1);\n};\n\nconst sumBy = (lst, fn) => {\n  return lst.reduce((acc, n) => fn(acc, n), 0);\n};\n\nconst isOdd = (x) => x % 2 === 1;\n\nconst isEven = (x) => x % 2 === 0;\n\nconst isPositive = (x) => x > 0;\n\nconst isNegative = (x) => x < 0;\n\nconst toUppercase = (str) => str.toUpperCase();\n\nconst toLowercase = (str) => str.toLowerCase();\n\nconst contains = (str, item) => str.indexOf(item)!== -1;\n\nconst indexOf = (str, item) => str.indexOf(item);\n\nconst lastIndexOf = (str, item) => str.lastIndexOf(item);\n\nconst startsWith = (str, prefix) => str.startsWith(prefix);\n\nconst endsWith = (str, suffix) => str.endsWith(suffix);\n\nconst trim = (str) => str.trim();\n\nconst upper = (str) => str.toUpperCase();\n\nconst lower = (str) => str.toLowerCase();\n\nconst capitalize = (str) => str.charAt(0).toUpperCase() + str.slice(1);\n\nconst add = (lst, val) => lst.concat(val);\n\nconst remove = (lst, val) => lst.filter((i) => i!== val);\n\nconst sort = (lst) => lst.sort();\n\nconst shuffle = (lst) => lst.sort().slice(0);\n\nconst reverse = (lst) => lst.reverse();\n\nconst map = (lst, fn) => lst.map(fn);\n\nconst filter = (lst, fn) => lst.filter(fn);\n\nconst reduce = (lst, fn) => lst.reduce(fn);\n\nconst some = (lst, fn) => lst.some(fn);\n\nconst every = (lst, fn) => lst.every(fn);\n\nconst isNumber = (num) => typeof num === 'number';\n\nconst isArray = (arr) => Object.prototype.toString.call(arr) === '[object Array]';\n\nconst isString = (str) => typeof str ==='string';\n\nconst isFunction = (func) => typeof func === 'function';\n\nconst isObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]';\n\nconst isBoolean = (bool) => typeof bool === 'boolean';\n\nconst isUndefined = (val) => typeof val === 'undefined';\n\nconst isDefined = (val) => typeof val!== 'undefined';\n\nconst isFunctionWithLength = (func) => {\n  return typeof func === 'function' && typeof func.length === 'number';\n};\n\nconst isStringWithLength = (str) => {\n  return typeof str ==='string' && typeof str.length === 'number';\n};\n\nconst isNumberWithLength = (num) => {\n  return typeof num === 'number' && typeof num.length === 'number';\n};\n\nconst isArrayWithLength = (arr) => {"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n  const wordMap = new Map();\n  let words = sentence.split(' ');\n  words.forEach((word) => {\n    wordMap.set(word, 1);\n  });\n  let result = [];\n  words.forEach((word) => {\n    if (wordMap.has(word)) {\n      result.push(word);\n    }\n  });\n  return result.join(' ');\n};\n\ndescribe('Example 1', () => {\n  it('should return \"is\"', () => {\n    expect(wordsInSentence(\"This is a test\")).toEqual('is');\n  });\n});\n\ndescribe('Example 2', () => {\n  it('should return \"go for\"', () => {\n    expect(wordsInSentence(\"lets go for swimming\")).toEqual('go for');\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [p, q] = [x, n].map(v => v.split('/'));\n  const [pn, pqn] = [p, q].map(v => v.match(/(-?\\d+)/g));\n  if (pn[1] === 0 && pqn[1] === 0) {\n    return pn[0] === pqn[0]\n  }\n  return false;\n};\n\nconsole.log(simplify(\"1/5\", \"5/1\"));\nconsole.log(simplify(\"1/6\", \"2/1\"));\nconsole.log(simplify(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const order = (a, b) => {\n    const sumA = a.points + a.dmfit\n    const sumB = b.points + b.dmfit\n    if (sumA > sumB) {\n      return 1\n    } else if (sumA < sumB) {\n      return -1\n    } else {\n      return a.index - b.index\n    }\n  }\n  return nums.sort(order)\n}\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in descending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByDmfit = (nums) => {\n  const order = (a, b) => {\n    const sumA = a.dmfit + a.points\n    const sumB = b.dmfit + b.points\n    if (sumA > sumB) {\n      return 1\n    } else if (sumA < sumB) {\n      return -1\n    } else {\n      return a.index - b.index\n    }\n  }\n  return nums.sort(order)\n}\n\n/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the number of points.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPointsNumber = (nums) => {\n  const order = (a, b) => {\n    const sumA = a.points\n    const sumB = b.points\n    if (sumA > sumB) {\n      return 1\n    } else if (sumA < sumB) {\n      return -1\n    } else {\n      return a.index - b.index\n    }\n  }\n  return nums.sort(order)\n}\n\nconst sort = (nums, sortBy) => {\n  if (sortBy === 'points') {\n    return orderByPoints(nums)\n  } else if (sortBy === 'dmfit') {\n    return orderByDmfit(nums)\n  } else {\n    return orderByPointsNumber(nums)\n  }\n}\n\nmodule.exports = sort\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.filter(num => {\n    return [...num].every(num => {\n      return [...num].every(digit => {\n        return parseInt(digit) % 2 === 1;\n      });\n    });\n  });\n};\n\n/*\n  * @param {number} number \n  * @returns {boolean}\n  */\nconst isOdd = (number) => {\n  return parseInt(number) % 2 === 1;\n};\n\nconst specialFilter = (nums) => {\n  return nums.filter(num => {\n    return [...num].every(num => {\n      return isOdd(num);\n    });\n  });\n};\n\nspecialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]);\n\nconst isOdd = (number) => {\n  return parseInt(number) % 2 === 1;\n};\n\nconst specialFilter = (nums) => {\n  return nums.filter(num => {\n    return isOdd(num);\n  });\n};\n\nspecialFilter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]);<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const arr = Array.from({length: n}, (_, i) => i * i - i + 1)\n    return arr.reduce((a, x, i) => {\n        const [y, z] = [x, arr[i + 1]]\n        return a + x + z\n    }, 0)\n}\n\nexport { getMaxTriples }<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var list = []\n  var planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n  var i = 0\n  var j = 0\n  var k = 0\n  var p1 = planets.indexOf(planet1)\n  var p2 = planets.indexOf(planet2)\n  if(p1 === -1 || p2 === -1) return list\n  while(i < 7) {\n    while(j < 7) {\n      while(k < 7) {\n        if(list[k] === undefined) {\n          list[k] = (planet1 + \" \" + planets[k] + \" \" + planet2).toLowerCase()\n        }\n        k++\n      }\n      k = 0\n      j++\n    }\n    j = 0\n    i++\n  }\n  return list\n}\n\n// Testing\n// console.log(bf(\"Mercury\", \"Neptune\"))\n// console.log(bf(\"Mercury\", \"Venus\"))\n// console.log(bf(\"Earth\", \"Mercury\"))\n// console.log(bf(\"Mercury\", \"Earth\"))\n// console.log(bf(\"Mercury\", \"Uranus\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Neptune\"))\n// console.log(bf(\"Mercury\", \"Neptune\"))\n// console.log(bf(\"Mercury\", \"Uranus\"))\n// console.log(bf(\"Mercury\", \"Neptune\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Jupiter\"))\n// console.log(bf(\"Mercury\", \"Saturn\"))\n// console.log("}
{"task_id": "JavaScript/149", "prompt": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  const a = new Array(len);\n  for(let i=0; i<len; i++){\n    a[i] = len - lst[i].length;\n  }\n  return lst.sort(function(a, b) {\n    if (a[0] === b[0]){\n      return a[1] - b[1];\n    }\n    return a[0] - b[0];\n  });\n}\n\nconst sortedList = (lst) => {\n  return lst.sort(function(a, b) {\n    return a - b;\n  });\n}\n\nconst removeOdd = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] % 2 === 1){\n      lst.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst listSum = (lst) => {\n  const len = lst.length;\n  let sum = 0;\n  for(let i=0; i<len; i++){\n    sum += lst[i];\n  }\n  return sum;\n}\n\nconst list = (lst) => {\n  return lst.sort(function(a, b) {\n    return a - b;\n  });\n}\n\nconst remove = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === 0){\n      lst.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeZero = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === 0){\n      lst.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates2 = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates3 = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates4 = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates5 = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates6 = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates7 = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates8 = (lst) => {\n  const len = lst.length;\n  let i = 0;\n  while(i<len){\n    if (lst[i] === lst[i+1]){\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return sortedList(lst);\n}\n\nconst removeDuplicates9 = (l"}
{"task_id": "JavaScript/150", "prompt": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n        return x;\n    }\n    else {\n        return y;\n    }\n}\n\nconst prime = (n) => {\n    let x = 1;\n    let y = n;\n    while (x < n) {\n        if (xOrY(n, x, y) === y) {\n            break;\n        }\n        x = x + 1;\n    }\n    return xOrY(n, x, y);\n}\n\nconsole.log(prime(10000));<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 2 === 1) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// double the difference\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 2 === 1) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// Givfn a list of numbers, return the sum of squares of the numbecs\n// in the list that are divisible by 3. Ignore numbers that arx negative or not\n// integers.\nconst tripleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 3 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst tripleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 3 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// Givfn a list of numbers, return the sum of squares of the numbecs\n// in the list that are divisible by 5. Ignore numbers that arx negative or not\n// integers.\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 5 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 5 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 5 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// Givfn a list of numbers, return the sum of squares of the numbecs\n// in the list that are divisible by 7. Ignore numbers that arx negative or not\n// integers.\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 7 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 7 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// Givfn a list of numbers, return the sum of squares of the numbecs\n// in the list that are divisible by 11. Ignore numbers that arx negative or not\n// integers.\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 11 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 11 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// Givfn a list of numbers, return the sum of squares of the numbecs\n// in the list that are divisible by 13. Ignore numbers that arx negative or not\n// integers.\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 13 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 13 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// Givfn a list of numbers, return the sum of squares of the numbecs\n// in the list that are divisible by 17. Ignore numbers that arx negative or not\n// integers.\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 17 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n  return lst.reduce((acc, num) => {\n    if (num % 17 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\n// Givfn a list of numbers, return the sum of squares of the numbecs\n// in the list that are divisible by 19. Ignore numbers that arx negative or not\n// integers.\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) return 0\n  return lst.reduce((acc, num) => {\n    if (num % 19 === 0) {\n      acc += num * num\n    }\n    return acc\n  }, 0)\n}\n\nconst doubleTheDifference = (lst) => {\n  return lst."}
{"task_id": "JavaScript/152", "prompt": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = game;\n  let guess = guess;\n  const match = new Map();\n  for (let i = 0; i < score.length; i++) {\n    if (guess[i] === score[i]) {\n      match.set(i, 0);\n    } else {\n      match.set(i, score[i] - guess[i]);\n    }\n  }\n  const result = [];\n  for (let [key, value] of match) {\n    if (value === 0) {\n      result.push(key);\n    }\n  }\n  return result;\n};\n\nmodule.exports = compare;\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = strengthExtension(class_name, extensions);\n  return strongestExtension(class_name, extensions, strength);\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n    const isMatch = a.includes(b);\n    const isRot = b.includes(a);\n\n    const isSubstring = a.includes(b);\n    const isSubstringRot = b.includes(a);\n\n    if(isMatch || isRot) {\n        return isMatch;\n    } else if(isSubstring || isSubstringRot) {\n        return true;\n    }\n    return false;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return 0\n*/\nconst largestNumber = (number) => {\n    let max = 0;\n    let current = 0;\n    for(let i=0; i<=9; i++) {\n        current = number;\n        current = current.toString().split('').reverse().join('');\n        if(current.length > 4) {\n            if(current > max) {\n                max = current;\n            }\n        }\n    }\n    return max;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return 0\n*/\nconst numberWithFourDigits = (number) => {\n    let max = 0;\n    let current = 0;\n    for(let i=0; i<=9; i++) {\n        current = number;\n        current = current.toString().split('').reverse().join('');\n        if(current.length > 4) {\n            if(current > max) {\n                max = current;\n            }\n        }\n    }\n    return max;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return 0\n*/\nconst largestNumberWithFourDigits = (number) => {\n    let max = 0;\n    let current = 0;\n    for(let i=0; i<=9; i++) {\n        current = number;\n        current = current.toString().split('').reverse().join('');\n        if(current.length > 4) {\n            if(current > max) {\n                max = current;\n            }\n        }\n    }\n    return max;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return 0\n*/\nconst numberWithThreeDigits = (number) => {\n    let max = 0;\n    let current = 0;\n    for(let i=0; i<=9; i++) {\n        current = number;\n        current = current.toString().split('').reverse().join('');\n        if(current.length > 3) {\n            if(current > max) {\n                max = current;\n            }\n        }\n    }\n    return max;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return 0\n*/\nconst largestNumberWithThreeDigits = (number) => {\n    let max = 0;\n    let current = 0;\n    for(let i=0; i<=9; i++) {\n        current = number;\n        current = current.toString().split('').reverse().join('');\n        if(current.length > 3) {\n            if(current > max) {\n                max = current;\n            }\n        }\n    }\n    return max;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return 0\n*/\nconst numberWithTwoDigits = (number) => {\n    let max = 0;\n    let current = 0;\n    for(let i=0; i<=9; i++) {\n        current = number;\n        current = current.toString().split('').reverse().join('');\n        if(current.length > 2) {\n            if(current > max) {\n                max = current;\n            }\n        }\n    }\n    return max;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return 0\n*/\nconst largestNumberWithTwoDigits = (number) => {\n    let max = 0;\n    let current = 0;\n    for(let i=0; i<=9; i++) {\n        current = number;\n        current = current.toString().split('').reverse().join('');\n        if(current.length > 2) {\n            if(current > max) {\n                max = current;\n            }\n        }\n    }\n    return max;\n}\n\n/*\n  Given a number, return the number with the highest 4-digit number.\n  e.g. for 3, return 9\n  e.g. for 6, return 7\n  e.g. for 15, return 9\n  e.g. for 0, return"}
{"task_id": "JavaScript/155", "prompt": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const digits = [];\n  let count = 1;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count++;\n    }\n    digits.push(num % 10);\n    num = num / 10;\n  }\n  return (count, digits.length);\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n    const num = number;\n    let result = '';\n    if (num < 10) {\n        result += 'i';\n    }\n    else if (num < 100) {\n        result += 'x';\n    }\n    else if (num < 1000) {\n        result += 'c';\n    }\n    else {\n        result +='m';\n    }\n    for (let i = 0; i < (num - 1) / 1000; i++) {\n        result +='m';\n    }\n    for (let i = 0; i < ((num - 1) % 1000) / 100; i++) {\n        result += 'd';\n    }\n    for (let i = 0; i < ((num - 1) % 100) / 10; i++) {\n        result += 'c';\n    }\n    for (let i = 0; i < ((num - 1) % 10); i++) {\n        result += 'i';\n    }\n    return result;\n};\n\n/**\n  * intToRoman - Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in upper case.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'XIX'\n  >>> intToRoman(152) == 'CLII'\n  >>> intToRoman(426) == 'CDXXVI'\n  */\nconst intToRoman = (number) => {\n    const num = number;\n    let result = '';\n    if (num < 10) {\n        result += 'I';\n    }\n    else if (num < 100) {\n        result += 'X';\n    }\n    else if (num < 1000) {\n        result += 'C';\n    }\n    else {\n        result += 'M';\n    }\n    for (let i = 0; i < (num - 1) / 1000; i++) {\n        result += 'M';\n    }\n    for (let i = 0; i < ((num - 1) % 1000) / 100; i++) {\n        result += 'D';\n    }\n    for (let i = 0; i < ((num - 1) % 100) / 10; i++) {\n        result += 'C';\n    }\n    for (let i = 0; i < ((num - 1) % 10); i++) {\n        result += 'I';\n    }\n    return result;\n};\n\nmodule.exports = {\n    intToRoman,\n    intToMiniRoman\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let isRightAngleTriangle = false;\n  let isRightAngleTriangleTemp = false;\n  let isRightAngleTriangle1 = false;\n  let isRightAngleTriangle2 = false;\n  let isRightAngleTriangle3 = false;\n  let i = 0;\n  let a1 = a;\n  let b1 = b;\n  let c1 = c;\n  while (i < (b + c) && i < a) {\n    isRightAngleTriangleTemp = a1 * b1 > c1 * a1? true : false;\n    isRightAngleTriangle1 = a1 * b1 > c1 * a1? false : true;\n    isRightAngleTriangle2 = a1 * c1 > b1 * a1? false : true;\n    isRightAngleTriangle3 = a1 * c1 > b1 * a1? true : false;\n    a1 = a1 + 1;\n    b1 = b1 + 1;\n    c1 = c1 + 1;\n    i = i + 1;\n  }\n  if (isRightAngleTriangle1 && isRightAngleTriangle2 && isRightAngleTriangle3) {\n    isRightAngleTriangle = true;\n  }\n  return isRightAngleTriangle;\n};\n\nmodule.exports = rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0]\n  const maxCount = words.length\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i]\n    const count = word.length\n    if (count > maxCount) {\n      max = word\n      maxCount = count\n    }\n  }\n  return max\n}\n\n/*\n  writf a function that accepts a list of strings.\n  Each string in the list represents a single word.\n\n  findMax([\"st\", \"ting\", \"ring\"]) === \"ing\"\n  findMax([\"aa\", \"aa\", \"bb\"]) === \"aa\"\n  findMax([\"aa\", \"bb\", \"aa\"]) === \"bb\"\n  */\nconst findMax = (words) => {\n  const max = words[0]\n  const maxCount = words.length\n  for (let i = 1; i < words.length; i++) {\n    const word = words[i]\n    const count = word.length\n    if (count > maxCount) {\n      max = word\n      maxCount = count\n    }\n  }\n  return max\n}\n\n// const findMax = (words) => {\n//   let max = words[0]\n//   let maxCount = words.length\n//   for (let i = 1; i < words.length; i++) {\n//     let word = words[i]\n//     let count = word.length\n//     if (count > maxCount) {\n//       max = word\n//       maxCount = count\n//     }\n//   }\n//   return max\n// }\n\nmodule.exports = {\n  findMax\n}\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > remaining) return [number, remaining]\n  if (number < need) return [remaining, number]\n  return [number, remaining]\n}\n\n/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                    the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > remaining) return [number, remaining]\n  if (number < need) return [remaining, number]\n  return [number, remaining]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  //console.log(operator);\n  //console.log(operand);\n  //console.log(operand.length);\n  if (operand.length === 1) {\n    //console.log(operand[0]);\n    return operand[0];\n  }\n  if (operator.length === 0) {\n    return operand[0];\n  }\n\n  let op = operator.shift();\n  let oper = operand.shift();\n  let result = oper[0] * op[0];\n  let sub = result;\n  let i = 1;\n  for (; i < operand.length; i++) {\n    sub += operand[i];\n  }\n\n  let nextOper = operator.shift();\n  let nextResult = sub;\n  while (nextOper!== undefined) {\n    nextResult = result + nextOper * nextResult;\n    nextOper = operator.shift();\n  }\n  return nextResult;\n};\n\n/*\n  Example:\n  operator = [3, 4, 5, 6, 7]\n  operand = [2, 4, 6, 8, 9]\n  result = 2 + 3 * 4 - 5 * 6 // + 7 * 8 - 9\n  => result = 21\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0];\n  }\n  if (operator.length === 0) {\n    return operand[0];\n  }\n  let op = operator.shift();\n  let oper = operand.shift();\n  let result = oper[0] * op[0];\n  let sub = result;\n  let i = 1;\n  for (; i < operand.length; i++) {\n    sub += operand[i];\n  }\n\n  let nextOper = operator.shift();\n  let nextResult = sub;\n  while (nextOper!== undefined) {\n    nextResult = result + nextOper * nextResult;\n    nextOper = operator.shift();\n  }\n  return nextResult;\n};\n\nconst doAlgebra3 = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0];\n  }\n  if (operator.length === 0) {\n    return operand[0];\n  }\n  let op = operator.shift();\n  let oper = operand.shift();\n  let result = oper[0] * op[0];\n  let sub = result;\n  let i = 1;\n  for (; i < operand.length; i++) {\n    sub += operand[i];\n  }\n\n  let nextOper = operator.shift();\n  let nextResult = sub;\n  while (nextOper!== undefined) {\n    nextResult = result + nextOper * nextResult;\n    nextOper = operator.shift();\n  }\n  return nextResult;\n};\n\nconst doAlgebra4 = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0];\n  }\n  if (operator.length === 0) {\n    return operand[0];\n  }\n  let op = operator.shift();\n  let oper = operand.shift();\n  let result = oper[0] * op[0];\n  let sub = result;\n  let i = 1;\n  for (; i < operand.length; i++) {\n    sub += operand[i];\n  }\n\n  let nextOper = operator.shift();\n  let nextResult = sub;\n  while (nextOper!== undefined) {\n    nextResult = result + nextOper * nextResult;\n    nextOper = operator.shift();\n  }\n  return nextResult;\n};\n\nconst doAlgebra5 = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0];\n  }\n  if (operator.length === 0) {\n    return operand[0];\n  }\n  let op = operator.shift();\n  let oper = operand.shift();\n  let result = oper[0] * op[0];\n  let sub = result;\n  let i = 1;\n  for (; i < operand.length; i++) {\n    sub += operand[i];\n  }\n\n  let nextOper = operator.shift();\n  let nextResult = sub;\n  while (nextOper!== undefined) {\n    nextResult = result + nextOper * nextResult;\n    nextOper = operator.shift();\n  }\n  return nextResult;\n};\n\nconst doAlgebra6 = (operator, operand) => {\n  if (operand.length === 1) {\n    return operand[0];\n  }\n  if (operator.length === 0) {\n    return operand[0];\n  }\n  let op = operator.shift();\n  let oper = operand.shift();\n  let result = oper[0] * op[0];\n  let sub = result;\n  let i = 1;\n  for (; i < operand.length; i++) {\n    sub += operand[i];\n  }\n\n  let nextOper = operator.shift();\n  let nextResult = sub;\n  while (nextOper!== undefined) {\n    nextResult = result + nextOper * nextResult;\n    nextOper = operator.shift();\n  }\n  return nextResult;\n};\n\nconst doAlgebra7"}
{"task_id": "JavaScript/161", "prompt": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const c = s.split('')\n  const rev = (l) => {\n    let r = ''\n    for (let i = l.length - 1; i >= 0; i--) {\n      r += l[i].toUpperCase()\n    }\n    return r\n  }\n  const revr = (l) => {\n    let r = ''\n    for (let i = 0; i < l.length; i++) {\n      r += l[i].toLowerCase()\n    }\n    return r\n  }\n  const revs = (l) => {\n    let r = ''\n    for (let i = l.length - 1; i >= 0; i--) {\n      r += l[i]\n    }\n    return r\n  }\n  const str = (l) => {\n    let r = ''\n    for (let i = 0; i < l.length; i++) {\n      r += l[i]\n    }\n    return r\n  }\n  const revr = (l) => {\n    let r = ''\n    for (let i = 0; i < l.length; i++) {\n      r += l[i]\n    }\n    return r\n  }\n  const revs = (l) => {\n    let r = ''\n    for (let i = 0; i < l.length; i++) {\n      r += l[i]\n    }\n    return r\n  }\n  return (l) => {\n    let r = ''\n    for (let i = 0; i < l.length; i++) {\n      if (c[i] === 'a') {\n        r += c[i].toUpperCase()\n      } else if (c[i] === 'A') {\n        r += c[i].toLowerCase()\n      } else if (c[i] === '#') {\n        r += 'A'\n      } else if (c[i] === '@') {\n        r += '#'\n      } else if (c[i] === 'c') {\n        r += 'C'\n      } else if (c[i] === 'C') {\n        r += 'c'\n      }\n    }\n    return r\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) return null\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex')\n}\n\n/*\n  Givfn a string 'text', return its sha1 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '4b4da18b3d2d8e1f7f2e9a1d00d00a843a6c074'\n  */\nconst stringToSha1 = (text) => {\n  if (!text) return null\n  return crypto.createHash('sha1').update(text, 'utf8').digest('hex')\n}\n\n/*\n  Givfn a string 'text', return its sha256 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'e2a8d0cfcbd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6d4f2a5e4f9cbd7d0cfd9c3f0c3dce7e0f6d8ae2e6cae6"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  let i = a;\n  while (i <= b) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconsole.log(generateIntegers(2, 8));\nconsole.log(generateIntegers(8, 2));\nconsole.log(generateIntegers(10, 14));\n<|endoftext|>"}
