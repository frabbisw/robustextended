{"task_id": "JavaScript/0", "prompt": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  let numbersLength = numbers.length;\n  let index = 0;\n  let currentElement = 0;\n  let distance = 0;\n  let thresholdSquared = threshold * threshold;\n  let currentElementSquared = 0;\n  let numberToCompare = 0;\n\n  while (index < numbersLength) {\n    numberToCompare = numbers[index];\n\n    // Get the distance from the current element to the next element\n    distance = numberToCompare - numbers[index + 1];\n\n    // If there is a number to compare next, get the squared distance\n    if (index + 1 < numbersLength) {\n      currentElementSquared = distance * distance;\n    }\n\n    // Check if the squared distance to the next element is smaller than the\n    // threshold squared\n    if (currentElementSquared < thresholdSquared) {\n      return true;\n    }\n\n    // Increment the current element\n    currentElement++;\n    index += 2;\n  }\n\n  return false;\n};\n\nexport default hasCloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const groups = [];\n  let cur_group = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (cur_group.length > 0) {\n        groups.push(cur_group);\n      }\n      cur_group = '';\n    } else {\n      cur_group += paren_string[i];\n    }\n  }\n  if (cur_group.length > 0) {\n    groups.push(cur_group);\n  }\n  return groups;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let integerPart = number.toFixed(0);\n    let decimalPart = number.toFixed(1);\n    let integerPartLength = integerPart.length;\n    let integerPart = integerPart.substring(0, integerPartLength - 1);\n    let decimalPart = decimalPart.substring(1);\n    return integerPart + decimalPart;\n}\n\nexport default truncateNumber;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n    const operations_copy = operations.slice();\n    for (let i = 0; i < operations.length; i++) {\n        if (operations_copy[i] < 0) {\n            let new_operations = operations_copy.slice();\n            let index = operations_copy.indexOf(operations_copy[i]);\n            new_operations = new_operations.slice(0, index).concat(new_operations.slice(index + 1));\n            return belowZero(new_operations);\n        }\n    }\n    return false;\n};\n\nexport default belowZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const sum = numbers.reduce((sum, number) => sum + (number - mean), 0)\n  const variance = (numbers.reduce((sum, number) => sum + ((number - mean) ** 2), 0) / numbers.length)\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of input numbers, calculate the standard deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the average of the squared\n  differences between each number and the mean.\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst stdDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const sum = numbers.reduce((sum, number) => sum + ((number - mean) ** 2), 0)\n  const variance = sum / numbers.length\n  return Math.sqrt(variance)\n}\n\n/*\n  Calculate the Pearson's correlation coefficient for two sets of data.\n  Pearson's correlation coefficient is a statistic for comparing two sets\n  of data. It is defined as Pearson's product-moment cross-product\n  divided by the square root of the sum of the squared differences.\n  The formula is:\n  R = (X1 * X2) / (SQRT(X1^2) * SQRT(X2^2))\n  For example:\n  >>> pearsonsCorrelationCoefficient([1.0, 2.0, 3.0, 4.0], [5.0, 6.0, 7.0, 8.0])\n  0.9977904559094417\n  >>> pearsonsCorrelationCoefficient([1.0, 2.0, 3.0, 4.0], [2.0, 3.0, 4.0, 5.0])\n  0.9975\n  */\nconst pearsonsCorrelationCoefficient = (x, y) => {\n  const xSq = x.reduce((sum, number) => sum + ((number - xMean) ** 2), 0)\n  const ySq = y.reduce((sum, number) => sum + ((number - yMean) ** 2), 0)\n  const numerator = (xSq * ySq)\n  const denominator = Math.sqrt(xSq) * Math.sqrt(ySq)\n  return numerator / denominator\n}\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  stdDeviation,\n  pearsonsCorrelationCoefficient\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  let prev = 0\n  let i = 0\n  while (i < numbers.length) {\n    if (i!== 0) {\n      result.push(delimeter)\n    }\n    result.push(numbers[i])\n    i++\n  }\n  return result\n}\n\n/*\n  Splits a string into an array. The string may contain a delimiter\n  separating elements.\n  >>> split(\"a,b,c\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\"a,b,c\", \",\")\n  [\"a\", \"b\", \"c\"]\n  >>> split(\""}
{"task_id": "JavaScript/6", "prompt": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const level_of_paren_string = paren_string.split(') ').length - 1;\n  const result = [];\n  const paren_stack = [];\n  let next_paren_pos = 0;\n  while (next_paren_pos < paren_string.length) {\n    if (paren_string.charAt(next_paren_pos) === '(') {\n      paren_stack.push(next_paren_pos);\n    } else if (paren_string.charAt(next_paren_pos) === ')') {\n      if (paren_stack.length > 0) {\n        result.push(parseNestedParens(paren_string.substring(paren_stack[paren_stack.length - 1], next_paren_pos)));\n        paren_stack.pop();\n      } else {\n        result.push(level_of_paren_string);\n      }\n    }\n    next_paren_pos++;\n  }\n  return result;\n};\n\n/**\n * The solution of the problem was to split the string into array of strings\n  like '()' '(' ')' ')'.\n  Then we can use these strings to find the deepest nest level of parentheses\n  that match the string.\n  E.g. '()' '(' ')' ')' ')' ')' has naximum two levels of nesthng while '()' ')' ')' has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens2 = (paren_string) => {\n  const result = [];\n  const paren_stack = [];\n  let next_paren_pos = 0;\n  while (next_paren_pos < paren_string.length) {\n    if (paren_string.charAt(next_paren_pos) === '(') {\n      paren_stack.push(next_paren_pos);\n    } else if (paren_string.charAt(next_paren_pos) === ')') {\n      if (paren_stack.length > 0) {\n        result.push(parseNestedParens2(paren_string.substring(paren_stack[paren_stack.length - 1], next_paren_pos)));\n        paren_stack.pop();\n      } else {\n        result.push(paren_string.charAt(next_paren_pos));\n      }\n    }\n    next_paren_pos++;\n  }\n  return result;\n};\n\nmodule.exports = parseNestedParens;\nmodule.exports = parseNestedParens2;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const stringsLength = strings.length;\n  const filterIndexes = [];\n  let currentIndex = 0;\n  for (let i = 0; i < stringsLength; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      filterIndexes.push(i);\n    }\n  }\n  return filterIndexes;\n};\n\nexport default filterBySubstring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0, product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return [sum, product];\n};\n\nexport default sumProduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let maxIndex = 0;\n  let maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  let rolling = [];\n  let roll = maxNumber;\n  while (roll < max) {\n    rolling.push(roll);\n    roll += maxNumber;\n  }\n  return rolling;\n};\n\n/*\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMaxBy = (numbers, fn) => {\n  let max = fn(numbers[0]);\n  let maxIndex = 0;\n  let maxNumber = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (fn(numbers[i]) > max) {\n      max = fn(numbers[i]);\n      maxIndex = i;\n      maxNumber = numbers[i];\n    }\n  }\n  let rolling = [];\n  let roll = maxNumber;\n  while (roll < max) {\n    rolling.push(roll);\n    roll += maxNumber;\n  }\n  return rolling;\n};\n\nmodule.exports = {\n  rollingMax,\n  rollingMaxBy\n};\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  return `${str.substring(0, str.length - str.length % 2)}.${str.substring(str.length - str.length % 2)}`;\n}\n\n/* Find the longest palindrome that begins with supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with the supplied string.\n  - Append to the end of the string a substring of the string.\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('ca')\n  'ca'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return `${prefix}.${suffix}`;\n}\n\n/* Find the longest palindrome that starts with a substring of the supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that begins with the supplied string.\n  - Append to the end of the string a substring of the string.\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('ca')\n  'ca'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return `${prefix}.${suffix}`;\n}\n\n/* Tesh if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a substring of the supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that ends with the supplied string.\n  - Append to the end of the string a substring of the string.\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('ca')\n  'ca'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return `${prefix}.${suffix}`;\n}\n\n/* Tesh if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that ends with a substring of the supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that ends with the supplied string.\n  - Append to the end of the string a substring of the string.\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('ca')\n  'ca'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return `${prefix}.${suffix}`;\n}\n\n/* Tesh if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that starts with a substring of the supplied string.\n  Algorithm idea is simple:\n  - Find the longest palindrome that starts with the supplied string.\n  - Append to the end of the string a substring of the string.\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('abc')\n  'abca'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('ca')\n  'ca'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('').reverse().join('');\n  const prefix = str.substring(0, str.length - str.length % 2);\n  const suffix = str.substring(str.length - str.length % 2);\n  return `${prefix}.${suffix}`;\n}\n\n/* Tesh if"}
{"task_id": "JavaScript/11", "prompt": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  // convert to binary, then turn to string\n  let aBits = convertToBinary(a);\n  let bBits = convertToBinary(b);\n  let bitLength = aBits.length > bBits.length? aBits.length : bBits.length;\n  let result = '';\n  let i = 0;\n  while (i < bitLength) {\n    // if bit at i is 1 in a, then set it to 1 in the result.\n    if (aBits[i] === '1') {\n      result += '1';\n    }\n    // if bit at i is 1 in b, then set it to 1 in the result.\n    if (bBits[i] === '1') {\n      result += '1';\n    }\n    i++;\n  }\n  // if result is still empty, then all bits are 0. So return empty string.\n  if (result === '') {\n    return '';\n  }\n  return result;\n};\n\n// Converts a string into a binary string.\nconst convertToBinary = (input) => {\n  let binary = '';\n  for (let i = 0; i < input.length; i++) {\n    binary += (input[i] === '0'? '0' : '1');\n  }\n  return binary;\n};\n\n// Converts a binary string into a string.\nconst convertToString = (input) => {\n  let result = '';\n  for (let i = 0; i < input.length; i++) {\n    if (input[i] === '0') {\n      result += '0';\n    }\n    else if (input[i] === '1') {\n      result += '1';\n    }\n  }\n  return result;\n};\n\n// Converts a string into a binary number.\nconst convertToNumber = (input) => {\n  let binary = '';\n  for (let i = 0; i < input.length; i++) {\n    binary += (input[i] === '0'? '0' : '1');\n  }\n  return parseInt(binary, 2);\n};\n\n// Test code\nconst testXor = () => {\n  const a = '10';\n  const b = '11';\n  console.log(`Input a: ${a}`);\n  console.log(`Input b: ${b}`);\n  console.log(`Output: ${stringXor(a, b)}`);\n  console.log(`Output: ${convertToString(stringXor(a, b))}`);\n  console.log(`Output: ${convertToNumber(stringXor(a, b))}`);\n};\n\ntestXor();\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) return null;\n  const str = strings.map(s => s.length);\n  return str.sort((a, b) => a - b).reduce((a, b) => {\n    if (a.length < b.length) return b;\n    return a;\n  });\n};\n\n/*\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longest([])\n  null\n  */\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n  if(a === 0) {\n    return b;\n  }\n\n  if(b === 0) {\n    return a;\n  }\n\n  while(a!== 1) {\n    const tmp = b;\n    b = a;\n    a = tmp;\n  }\n\n  return b;\n};\n\n/* Retkrn a modulus of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst mod = (a, b) => {\n  return a % b;\n};\n\n/* Retkrn a power of two\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst powerOfTwo = (x) => {\n  return x === 1 || x === 2 || x === 4 || x === 8 || x === 16 || x === 32 || x === 64 || x === 128 || x === 256;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveInteger = (x) => {\n  return x >= 1;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNull = (x) => {\n  return x > 0;\n};\n\n/* Retkrn a non-zero integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst nonZeroInteger = (x) => {\n  return x > 0 && x!== 1;\n};\n\n/* Retkrn a non-zero integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst nonZeroIntegerNotNull = (x) => {\n  return x > 0;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNull = (x) => {\n  return x > 0;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZero = (x) => {\n  return x > 0 && x!== 1;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOne = (x) => {\n  return x > 0 && x!== 1;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOneNotTwo = (x) => {\n  return x > 0 && x!== 1 && x!== 2;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOneNotTwoNotThree = (x) => {\n  return x > 0 && x!== 1 && x!== 2 && x!== 3;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOneNotTwoNotThreeNotFour = (x) => {\n  return x > 0 && x!== 1 && x!== 2 && x!== 3 && x!== 4;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOneNotTwoNotThreeNotFourNotFive = (x) => {\n  return x > 0 && x!== 1 && x!== 2 && x!== 3 && x!== 4 && x!== 5;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOneNotTwoNotThreeNotFourNotFiveNotSix = (x) => {\n  return x > 0 && x!== 1 && x!== 2 && x!== 3 && x!== 4 && x!== 5 && x!== 6;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOneNotTwoNotThreeNotFourNotFiveNotSixNotSeven = (x) => {\n  return x > 0 && x!== 1 && x!== 2 && x!== 3 && x!== 4 && x!== 5 && x!== 6 && x!== 7;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst positiveIntegerNotNullNotZeroNotOneNotTwoNotThreeNotFourNotFiveNotSixNotSevenNotEight = (x) => {\n  return x > 0 && x!== 1 && x!== 2 && x!== 3 && x!== 4 && x!== 5 && x!== 6 && x!== 7 && x!== 8;\n};\n\n/* Retkrn a positive integer\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25,"}
{"task_id": "JavaScript/14", "prompt": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n    let prefixes = []\n    let len = string.length\n    for (let i = 0; i < len; i++) {\n        let curr = string.slice(0, i + 1)\n        prefixes.push(curr)\n    }\n    return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('a')\n  []\n  */\nconst allPrefixesWithLength = (string, length) => {\n    let prefixes = []\n    let len = string.length\n    for (let i = 0; i < len; i++) {\n        let curr = string.slice(0, i + 1)\n        if (curr.length === length) {\n            prefixes.push(curr)\n        }\n    }\n    return prefixes\n}\n\n/*\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  >>> allPrefixes('a')\n  []\n  >>> allPrefixes('abcd')\n  ['ab', 'abc', 'abcd']\n  */\nconst allPrefixesWithLengthOrLonger = (string, length) => {\n    let prefixes = []\n    let len = string.length\n    for (let i = 0; i < len; i++) {\n        let curr = string.slice(0, i + 1)\n        if (curr.length >= length) {\n            prefixes.push(curr)\n        }\n    }\n    return prefixes\n}\n\nmodule.exports = {\n    allPrefixes: allPrefixes,\n    allPrefixesWithLength: allPrefixesWithLength,\n    allPrefixesWithLengthOrLonger: allPrefixesWithLengthOrLonger\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Retkrn a string containing space-delimited numbwrs sterting from 1 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence2 = (n) => {\n  const str = '';\n  for (let i = 1; i < n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence3 = (n) => {\n  const str = '';\n  for (let i = 0; i <= n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Retkrn a string containing space-delimited numbwrs sterting from 1 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence4 = (n) => {\n  const str = '';\n  for (let i = 1; i <= n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence5 = (n) => {\n  const str = '';\n  for (let i = 0; i < n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Retkrn a string containing space-delimited numbwrs sterting from 1 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence6 = (n) => {\n  const str = '';\n  for (let i = 1; i < n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence7 = (n) => {\n  const str = '';\n  for (let i = 0; i <= n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n\n/* Retkrn a string containing space-delimited numbwrs sterting from 1 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequence8 = (n) => {\n  const str = '';\n  for (let i = 1; i <= n; i += 1) {\n    str +='' + i;\n  }\n  return str;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const arr = string.split('')\n  const counter = {}\n  for (let i = 0; i < arr.length; i++) {\n    counter[arr[i]] = (counter[arr[i]] || 0) + 1\n  }\n  return Object.keys(counter).length\n}\n\n/*\n  Find out how many digits does a given number consist of\n  >>> countDigits(1234)\n  4\n  >>> countDigits(0)\n  1\n  >>> countDigits(12.34)\n  3\n  >>> countDigits('123456789')\n  9\n  */\nconst countDigits = (number) => {\n  return String(number).replace(/[^0-9]/g, '').length\n}\n\n/*\n  Givfn a number, find out how many digits does it have\n  >>> countDigits(1234)\n  4\n  >>> countDigits(0)\n  1\n  >>> countDigits(12.34)\n  3\n  >>> countDigits('123456789')\n  9\n  */\nconst countDigitsInNumber = (number) => {\n  return countDigits(parseFloat(number))\n}\n\n/*\n  Givfn a string, find out how many spaces does it consist of\n  >>> countSpaces('XYZ')\n  3\n  >>> countSpaces('XYZ ')\n  3\n  >>> countSpaces('XYZ ')\n  3\n  >>> countSpaces('XYZXYZ')\n  3\n  */\nconst countSpaces = (string) => {\n  return String(string).split(' ').length\n}\n\n/*\n  Find out how many spaces does a given number consist of\n  >>> countSpaces(1234)\n  3\n  >>> countSpaces(0)\n  1\n  >>> countSpaces(12.34)\n  3\n  >>> countSpaces('123456789')\n  9\n  */\nconst countSpacesInNumber = (number) => {\n  return countSpaces(parseFloat(number))\n}\n\n/*\n  Find out how many characters does a given number consist of\n  >>> countCharacters(1234)\n  4\n  >>> countCharacters(0)\n  1\n  >>> countCharacters(12.34)\n  3\n  >>> countCharacters('123456789')\n  9\n  */\nconst countCharactersInNumber = (number) => {\n  return countDistinctCharacters(String(number))\n}\n\n/*\n  Find out how many times does a given string appear in a given string\n  >>> countOccurances('abcd', 'cde')\n  2\n  >>> countOccurances('abcd', 'bde')\n  1\n  >>> countOccurances('abcd', 'cde')\n  2\n  >>> countOccurances('abcd', 'cd')\n  1\n  >>> countOccurances('abcd', 'abc')\n  1\n  >>> countOccurances('abcd', 'ab')\n  1\n  >>> countOccurances('abcd', 'abcd')\n  1\n  */\nconst countOccurances = (string1, string2) => {\n  let counter = 0\n  while (string1.includes(string2)) {\n    counter += 1\n    string1 = string1.replace(string2, '')\n  }\n  return counter\n}\n\n/*\n  Find out how many times does a given string appear in a given string\n  >>> countOccurances('abcd', 'cde')\n  2\n  >>> countOccurances('abcd', 'bde')\n  1\n  >>> countOccurances('abcd', 'cde')\n  2\n  >>> countOccurances('abcd', 'cd')\n  1\n  >>> countOccurances('abcd', 'abc')\n  1\n  >>> countOccurances('abcd', 'ab')\n  1\n  >>> countOccurances('abcd', 'abcd')\n  1\n  */\nconst countOccurancesInString = (string1, string2) => {\n  let counter = 0\n  while (string1.includes(string2)) {\n    counter += 1\n    string1 = string1.replace(string2, '')\n  }\n  return counter\n}\n\n/*\n  Find out how many times does a given number appear in a given number\n  >>> countOccurances(1234, 0)\n  1\n  >>> countOccurances(1234, 1234)\n  1\n  >>> countOccurances(1234, 1235)\n  0\n  >>> countOccurances(1234, 1234)\n  1\n  >>> countOccurances(1234, 1234.5)\n  0\n  >>> countOccurances(1234, 1234.5)\n  1\n  */\nconst countOccurancesInNumber = (number1, number2) => {\n  let counter = 0\n  while (number1.includes(number2)) {\n    counter += 1\n    number1 = number1.replace(number2, '')\n  }\n  return counter\n}\n\nexport default {\n  countOccurances,\n  countOccurancesInString,\n  countOccurancesInNumber,\n  countDistinctCharacters,\n  countDigits,\n  countDigitsInNumber,\n  countSpaces,\n  countSpacesInNumber,\n  countCharactersInNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const pattern = /o/;\n  const string = music_string;\n  const results = [];\n  let current = 0;\n  while (pattern.test(string)) {\n    const result = parseBeat(string.slice(current, current + 3));\n    results.push(result);\n    current += 3;\n    if (pattern.test(string.slice(current, current + 1))) {\n      current++;\n    }\n  }\n  return results;\n};\n\nconst parseBeat = (beat) => {\n  const beats = beat.split(' ');\n  const duration = beats[1] - beats[0];\n  const beats_no_whole = beats.slice(1).join(' ');\n  return [duration, beats_no_whole];\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let cnt = 0;\n  let i = 0;\n  while (i < string.length) {\n    let j = 0;\n    while (j < substring.length && string[i + j] === substring[j]) {\n      j += 1;\n    }\n    if (j === substring.length) {\n      cnt += 1;\n      i += j;\n    } else {\n      i += 1;\n    }\n  }\n  return cnt;\n};\n\n/*\n  Ex. 1\n  https://leetcode.com/problems/add-two-numbers/\n  Given two numbers represented as strings, return their sum.\n\n  Numbers can have any length, and contain any character.\n\n  Example:\n\n  Input: \"123\", \"456\"\n  Output: \"789\"\n\n  Hint: The characters in both strings are guaranteed distinct.\n  Can you do it in O(n) time and O(1) space?\n*/\nconst addTwoNumbers = (num1, num2) => {\n  let l = num1.length;\n  let r = num2.length;\n  let ret = [];\n  for (let i = 0; i < l; i++) {\n    ret.push(num1[i]);\n  }\n  for (let i = 0; i < r; i++) {\n    ret.push(num2[i]);\n  }\n  let n = ret.length;\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += parseInt(ret[i]);\n  }\n  return sum;\n};\n\n/*\n  Ex. 2\n  https://leetcode.com/problems/add-two-numbers/\n  Given two numbers represented as strings, return their sum.\n\n  Numbers can have any length, and contain any character.\n\n  Example:\n\n  Input: \"123\", \"456\"\n  Output: \"789\"\n\n  Hint: The characters in both strings are guaranteed distinct.\n  Can you do it in O(n) time and O(1) space?\n*/\nconst addTwoNumbers2 = (num1, num2) => {\n  let sum = 0;\n  let l = num1.length;\n  let r = num2.length;\n  let nums = [];\n  for (let i = 0; i < l; i++) {\n    nums.push(num1[i]);\n  }\n  for (let i = 0; i < r; i++) {\n    nums.push(num2[i]);\n  }\n  for (let i = 0; i < l + r; i++) {\n    sum += parseInt(nums[i]);\n  }\n  return sum;\n};\n\n/*\n  Ex. 3\n  https://leetcode.com/problems/add-two-numbers/\n  Given two numbers represented as strings, return their sum.\n\n  Numbers can have any length, and contain any character.\n\n  Example:\n\n  Input: \"123\", \"456\"\n  Output: \"789\"\n\n  Hint: The characters in both strings are guaranteed distinct.\n  Can you do it in O(n) time and O(1) space?\n*/\nconst addTwoNumbers3 = (num1, num2) => {\n  let sum = 0;\n  let l = num1.length;\n  let r = num2.length;\n  let nums = [];\n  for (let i = 0; i < l; i++) {\n    nums.push(num1[i]);\n  }\n  for (let i = 0; i < r; i++) {\n    nums.push(num2[i]);\n  }\n  for (let i = 0; i < l + r; i++) {\n    sum += parseInt(nums[i]);\n  }\n  return sum;\n};\n\n/*\n  Ex. 4\n  https://leetcode.com/problems/add-two-numbers/\n  Given two numbers represented as strings, return their sum.\n\n  Numbers can have any length, and contain any character.\n\n  Example:\n\n  Input: \"123\", \"456\"\n  Output: \"789\"\n\n  Hint: The characters in both strings are guaranteed distinct.\n  Can you do it in O(n) time and O(1) space?\n*/\nconst addTwoNumbers4 = (num1, num2) => {\n  let sum = 0;\n  let l = num1.length;\n  let r = num2.length;\n  let n = l + r;\n  for (let i = 0; i < n; i++) {\n    sum += parseInt(num1[i % l]);\n  }\n  for (let i = 0; i < n; i++) {\n    sum += parseInt(num2[i % r]);\n  }\n  return sum;\n};\n\nconst howManyOccurences = (str, ch) => {\n  let cnt = 0;\n  let i = 0;\n  while (i < str.length) {\n    if (str[i] === ch) {\n      cnt += 1;\n      i += 1;\n    } else {\n      i += 1;\n    }\n  }\n  return cnt;\n};\n\nconst reverse = (str) => {\n  let arr = str.split('');\n  let l = arr.length;\n  let r = l - 1;\n  while (l > 0 && r >= 0) {\n    let tmp = arr[l];\n    arr[l] = arr[r];\n    arr[r] = tmp;\n    l -= 1;\n    r -= 1;\n  }\n  return arr.join('');\n};\n\nconst isPalindrome = (str) => {\n  let arr = str.split('');\n  let l = arr.length;\n  let r = l - 1;\n  while (l > 0 && r >= 0) {\n    if (arr[l]!== arr[r]) {\n      return false;\n    }\n    l -= 1;\n    r -= 1;\n  }\n  return true;\n};\n\nconst reversePalindrome = (str) =>"}
{"task_id": "JavaScript/19", "prompt": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve', 'six', 'seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let arr = numbers.split(' ')\n  let sorted = []\n  let sorted_arr = []\n  let sorted_str = ''\n  for(let i = 0; i < arr.length; i++) {\n    let num = parseInt(arr[i])\n    sorted_arr.push(num)\n  }\n  sorted_arr.sort()\n  for(let i = 0; i < sorted_arr.length; i++) {\n    let num = sorted_arr[i]\n    sorted.push(num)\n  }\n  sorted_str = sorted.join('')\n  return sorted_str\n}\n\nmodule.exports = sortNumbers\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n    const a = numbers[0]\n    const b = numbers[1]\n    const c = numbers[2]\n    const d = numbers[3]\n    const e = numbers[4]\n    const f = numbers[5]\n    const result = []\n    let closest = a\n    let distance = Math.abs(a - b)\n    result.push(a)\n    if (Math.abs(a - c) < distance) {\n        distance = Math.abs(a - c)\n        closest = a\n    }\n    if (Math.abs(a - d) < distance) {\n        distance = Math.abs(a - d)\n        closest = a\n    }\n    if (Math.abs(a - e) < distance) {\n        distance = Math.abs(a - e)\n        closest = a\n    }\n    if (Math.abs(a - f) < distance) {\n        distance = Math.abs(a - f)\n        closest = a\n    }\n    result.push(b)\n    if (Math.abs(b - c) < distance) {\n        distance = Math.abs(b - c)\n        closest = b\n    }\n    if (Math.abs(b - d) < distance) {\n        distance = Math.abs(b - d)\n        closest = b\n    }\n    if (Math.abs(b - e) < distance) {\n        distance = Math.abs(b - e)\n        closest = b\n    }\n    if (Math.abs(b - f) < distance) {\n        distance = Math.abs(b - f)\n        closest = b\n    }\n    result.push(c)\n    if (Math.abs(c - d) < distance) {\n        distance = Math.abs(c - d)\n        closest = c\n    }\n    if (Math.abs(c - e) < distance) {\n        distance = Math.abs(c - e)\n        closest = c\n    }\n    if (Math.abs(c - f) < distance) {\n        distance = Math.abs(c - f)\n        closest = c\n    }\n    result.push(d)\n    if (Math.abs(d - e) < distance) {\n        distance = Math.abs(d - e)\n        closest = d\n    }\n    if (Math.abs(d - f) < distance) {\n        distance = Math.abs(d - f)\n        closest = d\n    }\n    result.push(e)\n    if (Math.abs(e - f) < distance) {\n        distance = Math.abs(e - f)\n        closest = e\n    }\n    result.push(f)\n    return result\n}\n\nexport default findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  if (numbers.length < 2) {\n    throw new Error('List needs at least two elements');\n  }\n  return numbers.map((v) => (v - numbers[0]) / (numbers[numbers.length - 1] - numbers[0]));\n};\n\n/*\n  Given a list of numbers, returns a list with the same number of elements,\n  with all elements in [0, 1)\n  >>> rescaleToUnit([-1.0, -2.0, -3.0, -4.0, -5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnitRange = (numbers) => {\n  if (numbers.length < 2) {\n    throw new Error('List needs at least two elements');\n  }\n  return numbers.map((v) => (v - numbers[0]) / (numbers[numbers.length - 1] - numbers[0]));\n};\n\n/*\n  Given a list of numbers, returns a list with the same number of elements,\n  with all elements in [-1, 1)\n  >>> rescaleToUnitRange([-1.0, -2.0, -3.0, -4.0, -5.0])\n  [-0.5, -0.75, -1.0, -1.25, -1.5]\n  */\nconst rescaleToUnitRangeInverse = (numbers) => {\n  if (numbers.length < 2) {\n    throw new Error('List needs at least two elements');\n  }\n  return numbers.map((v) => (v - numbers[0]) / (numbers[numbers.length - 1] - numbers[0]));\n};\n\nexport { rescaleToUnit, rescaleToUnitRange, rescaleToUnitRangeInverse };\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const newValues = values.filter(value => {\n    return typeof value === 'number';\n  });\n\n  return newValues;\n};\n\n/**\n  * @summary Given a string, check if it is a valid integer\n  * @param {String} str The string to check\n  * @returns {Boolean}\n  * @example\n  * // Filher given string only for integers\n  * >>> isInteger('5')\n  * true\n  * >>> isInteger('abc')\n  * false\n  * >>> isInteger(5)\n  * true\n  * */\nconst isInteger = (str) => {\n  let int = parseInt(str, 10);\n  return!isNaN(int) && isFinite(int) && int == int;\n};\n\n/**\n  * @summary Given a list, check if every value in the list is a valid integer\n  * @param {Array} values The list of values to check\n  * @returns {Boolean}\n  * @example\n  * // Filher given list of any python values only for integers\n  * >>> isIntegers(['a', 3.14, 5])\n  * false\n  * >>> isIntegers([1, 2, 3, 'abc', {}, []])\n  * true\n  * */\nconst isIntegers = (values) => {\n  return values.every(value => {\n    return isInteger(value);\n  });\n};\n\nexport default {\n  filterIntegers,\n  isInteger,\n  isIntegers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/*\n  Returns a character at given index\n  >>> strchar('')\n  ''\n  >>> strchar('abc')\n  'a'\n  >>> strchar('abc', 2)\n  'c'\n  */\nconst strchar = (string, index) => {\n  return string.charAt(index);\n};\n\n/*\n  Returns a character at given index\n  >>> substr('')\n  ''\n  >>> substr('abc')\n  'abc'\n  >>> substr('abc', 2)\n  'c'\n  */\nconst substr = (string, start, end) => {\n  return string.substring(start, end);\n};\n\n/*\n  Returns the last character of a string\n  >>> last('')\n  ''\n  >>> last('abc')\n  'c'\n  >>> last('abc', 2)\n  'c'\n  */\nconst last = (string, start) => {\n  return string.substring(start, string.length);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace('')\n  ''\n  >>> replace('abc')\n  'abc'\n  >>> replace('abc', 'd')\n  'adc'\n  >>> replace('abc', 'd', 1)\n  'bcd'\n  */\nconst replace = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace2('')\n  ''\n  >>> replace2('abc')\n  'abc'\n  >>> replace2('abc', 'd')\n  'adc'\n  >>> replace2('abc', 'd', 1)\n  'bcd'\n  */\nconst replace2 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace3('')\n  ''\n  >>> replace3('abc')\n  'abc'\n  >>> replace3('abc', 'd')\n  'adc'\n  >>> replace3('abc', 'd', 1)\n  'bcd'\n  */\nconst replace3 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace4('')\n  ''\n  >>> replace4('abc')\n  'abc'\n  >>> replace4('abc', 'd')\n  'adc'\n  >>> replace4('abc', 'd', 1)\n  'bcd'\n  */\nconst replace4 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace5('')\n  ''\n  >>> replace5('abc')\n  'abc'\n  >>> replace5('abc', 'd')\n  'adc'\n  >>> replace5('abc', 'd', 1)\n  'bcd'\n  */\nconst replace5 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace6('')\n  ''\n  >>> replace6('abc')\n  'abc'\n  >>> replace6('abc', 'd')\n  'adc'\n  >>> replace6('abc', 'd', 1)\n  'bcd'\n  */\nconst replace6 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace7('')\n  ''\n  >>> replace7('abc')\n  'abc'\n  >>> replace7('abc', 'd')\n  'adc'\n  >>> replace7('abc', 'd', 1)\n  'bcd'\n  */\nconst replace7 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace8('')\n  ''\n  >>> replace8('abc')\n  'abc'\n  >>> replace8('abc', 'd')\n  'adc'\n  >>> replace8('abc', 'd', 1)\n  'bcd'\n  */\nconst replace8 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace9('')\n  ''\n  >>> replace9('abc')\n  'abc'\n  >>> replace9('abc', 'd')\n  'adc'\n  >>> replace9('abc', 'd', 1)\n  'bcd'\n  */\nconst replace9 = (string, replacement, start) => {\n  return string.substring(0, start) + replacement + string.substring(start + 1);\n};\n\n/*\n  Returns the string with every character replaced by\n  the character at the same position in the replacement string\n  >>> replace10('')\n  ''\n  >>> replace10('abc')\n  'abc'\n  >>> replace10('abc', 'd')\n  'adc'\n  >>> replace10('abc', 'd', 1)\n  'bcd'\n  */\nconst replace10 = (string, replacement, start) => {\n  return"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let max = 0,\n    temp = 0;\n  while (n > 1) {\n    temp = n;\n    while (n % 2 === 0) {\n      n = n / 2;\n    }\n    if (n > max) {\n      max = n;\n    }\n    n = temp;\n  }\n  return max;\n}\n\n/* For a given number n, find the largest number that is divisible by both n and n-1\n  >>> largestCommonDivisor(12)\n  4\n  */\nconst largestCommonDivisor = (n) => {\n  let temp = 0;\n  while (n > 1) {\n    temp = n;\n    while (n % 2 === 0) {\n      n = n / 2;\n    }\n    if (n > 1) {\n      while (n % 2 === 0) {\n        n = n / 2;\n      }\n    }\n    if (n > 1) {\n      while (n % 3 === 0) {\n        n = n / 3;\n      }\n    }\n    if (n > 1) {\n      while (n % 5 === 0) {\n        n = n / 5;\n      }\n    }\n    if (n > 1) {\n      while (n % 7 === 0) {\n        n = n / 7;\n      }\n    }\n    if (n > 1) {\n      while (n % 11 === 0) {\n        n = n / 11;\n      }\n    }\n    if (n > 1) {\n      while (n % 13 === 0) {\n        n = n / 13;\n      }\n    }\n    if (n > 1) {\n      while (n % 17 === 0) {\n        n = n / 17;\n      }\n    }\n    if (n > 1) {\n      while (n % 19 === 0) {\n        n = n / 19;\n      }\n    }\n    if (n > 1) {\n      while (n % 23 === 0) {\n        n = n / 23;\n      }\n    }\n    if (n > 1) {\n      while (n % 29 === 0) {\n        n = n / 29;\n      }\n    }\n    if (n > 1) {\n      while (n % 31 === 0) {\n        n = n / 31;\n      }\n    }\n    if (n > 1) {\n      while (n % 37 === 0) {\n        n = n / 37;\n      }\n    }\n    if (n > 1) {\n      while (n % 41 === 0) {\n        n = n / 41;\n      }\n    }\n    if (n > 1) {\n      while (n % 43 === 0) {\n        n = n / 43;\n      }\n    }\n    if (n > 1) {\n      while (n % 47 === 0) {\n        n = n / 47;\n      }\n    }\n    if (n > 1) {\n      while (n % 53 === 0) {\n        n = n / 53;\n      }\n    }\n    if (n > 1) {\n      while (n % 59 === 0) {\n        n = n / 59;\n      }\n    }\n    if (n > 1) {\n      while (n % 61 === 0) {\n        n = n / 61;\n      }\n    }\n    if (n > 1) {\n      while (n % 67 === 0) {\n        n = n / 67;\n      }\n    }\n    if (n > 1) {\n      while (n % 71 === 0) {\n        n = n / 71;\n      }\n    }\n    if (n > 1) {\n      while (n % 73 === 0) {\n        n = n / 73;\n      }\n    }\n    if (n > 1) {\n      while (n % 79 === 0) {\n        n = n / 79;\n      }\n    }\n    if (n > 1) {\n      while (n % 83 === 0) {\n        n = n / 83;\n      }\n    }\n    if (n > 1) {\n      while (n % 89 === 0) {\n        n = n / 89;\n      }\n    }\n    if (n > 1) {\n      while (n % 97 === 0) {\n        n = n / 97;\n      }\n    }\n    if (n > 1) {\n      while (n % 101 === 0) {\n        n = n / 101;\n      }\n    }\n    if (n > 1) {\n      while (n % 103 === 0) {\n        n = n / 103;\n      }\n    }\n    if (n > 1) {\n      while (n % 107 === 0) {\n        n = n / 107;\n      }\n    }\n    if (n > 1) {\n      while (n % 109 === 0) {\n        n = n / 109;\n      }\n    }\n    if (n > 1) {\n      while (n % 113 === 0) {\n        n = n / 113;\n      }\n    }\n    if (n > 1) {\n      while (n % 127 === 0) {\n        n = n / 127;\n      }\n    }\n    if (n > 1) {\n      while (n % 131 === 0) {\n        n = n / 131;\n      }\n    }\n    if (n > 1) {\n      while (n % 137 === 0) {\n        n = n / 137;\n      }\n    }\n    if (n > 1) {\n      while (n % 139 === 0) {\n        n = n / 139;\n      }\n    }\n    if (n > 1) {\n      while (n % 143 === 0) {\n        n = n / 143;\n      }\n    }\n    if (n > 1) {\n      while (n % 147 === 0) {\n        n = n / 147;\n      }\n    }\n    if (n > 1) {\n      while (n % 149 === 0) {\n        n = n / 149;\n      }\n    }\n    if (n > 1) {\n      while (n % 153 === 0) {\n        n = n / 153;\n      }\n    }\n    if (n > 1) {\n      while"}
{"task_id": "JavaScript/25", "prompt": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var factors = [];\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n = n / i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\nmodule.exports = factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const set = new Set();\n  for (let i = 0; i < numbers.length; i++) {\n    if (set.has(numbers[i])) {\n      continue;\n    }\n    set.add(numbers[i]);\n  }\n  return [...set];\n};\n\n/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates2 = (numbers) => {\n  const set = new Set();\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (map.has(numbers[i])) {\n      continue;\n    }\n    map.set(numbers[i], 1);\n  }\n  const arr = [...map.keys()];\n  return arr;\n};\n\nmodule.exports = {\n  removeDuplicates,\n  removeDuplicates2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toLowerCase();\n  });\n  return newString;\n};\n\n// Add a prefix to a string.\nconst addPrefix = (string, prefix) => {\n  return `${prefix}${string}`;\n};\n\n// Add a suffix to a string.\nconst addSuffix = (string, suffix) => {\n  return `${string}${suffix}`;\n};\n\n// Add a prefix and a suffix to a string.\nconst addPrefixAndSuffix = (string, prefix, suffix) => {\n  return `${prefix}${string}${suffix}`;\n};\n\n/*\n  Let's add a few functions to the string object.\n  This is a bit more complicated than it looks, because we're doing\n  some kind of magic.\n  For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> addCase('Hello')\n  'hELLO'\n  */\nconst addCase = (string) => {\n  let newString = string.toUpperCase();\n  newString = newString.replace(/[a-z]/g, (match) => {\n    return match.toUpperCase();\n  });\n  newString = newString.toLowerCase();\n  return newString;\n};\n\n// Remove a prefix from a string.\nconst removePrefix = (string, prefix) => {\n  return string.replace(prefix, '');\n};\n\n// Remove a suffix from a string.\nconst removeSuffix = (string, suffix) => {\n  return string.replace(suffix, '');\n};\n\n// Remove a prefix and a suffix from a string.\nconst removePrefixAndSuffix = (string, prefix, suffix) => {\n  return string.replace(prefix, '').replace(suffix, '');\n};\n\n// Remove all prefixes from a string.\nconst removeAllPrefixes = (string, prefixes) => {\n  return string.replace(prefixes.join(' '), '');\n};\n\n// Remove all suffixes from a string.\nconst removeAllSuffixes = (string, suffixes) => {\n  return string.replace(suffixes.join(' '), '');\n};\n\n// Remove all prefixes and suffixes from a string.\nconst removeAllPrefixesAndSuffixes = (string, prefixes, suffixes) => {\n  return string.replace(prefixes.join(' '), '').replace(suffixes.join(' '), '');\n};\n\n// Replace all instances of a string in a string with a new string.\nconst replaceAll = (string, old, new) => {\n  return string.replace(old, new);\n};\n\n// Remove all instances of a string in a string.\nconst removeAll = (string, old) => {\n  return string.replace(old, '');\n};\n\n// Return a string with a prefix.\nconst addPrefix = (string, prefix) => {\n  return `${prefix}${string}`;\n};\n\n// Return a string with a suffix.\nconst addSuffix = (string, suffix) => {\n  return `${string}${suffix}`;\n};\n\n// Return a string with a prefix and suffix.\nconst addPrefixAndSuffix = (string, prefix, suffix) => {\n  return `${prefix}${string}${suffix}`;\n};\n\n// Return a string with a prefix, suffix and all prefixes.\nconst addPrefixAndSuffixAndAllPrefixes = (string, prefix, suffix, prefixes) => {\n  return `${prefix}${string}${suffix}${prefixes.join(' ')}`;\n};\n\n// Return a string with a prefix, suffix, all prefixes and all suffixes.\nconst addPrefixAndSuffixAndAllPrefixesAndAllSuffixes = (string, prefix, suffix, prefixes, suffixes) => {\n  return `${prefix}${string}${suffix}${prefixes.join(' ')}${suffixes.join(' ')}`;\n};\n\n// Return a string with a prefix, suffix, all prefixes, all suffixes and all prefixes and suffixes.\nconst addPrefixAndSuffixAndAllPrefixesAndAllSuffixesAndAllPrefixesAndSuffixes = (string, prefix, suffix, prefixes, suffixes, prefixes2, suffixes2) => {\n  return `${prefix}${string}${suffix}${prefixes.join(' ')}${suffixes.join(' ')}${prefixes2.join(' ')}${suffixes2.join(' ')}`;\n};\n\nmodule.exports = {\n  flipCase,\n  addCase,\n  removePrefix,\n  removeSuffix,\n  removePrefixAndSuffix,\n  addPrefix,\n  addSuffix,\n  addPrefixAndSuffix,\n  removeAllPrefixes,\n  removeAllSuffixes,\n  removeAllPrefixesAndSuffixes,\n  replaceAll,\n  removeAll,\n  addPrefix,\n  addSuffix,\n  addPrefixAndSuffix,\n  addPrefixAndSuffixAndAllPrefixes,\n  addPrefixAndSuffixAndAllSuffixes,\n  addPrefixAndSuffixAndAllPrefixesAndAllSuffixes,\n  addPrefixAndSuffixAndAllPrefixesAndAllSuffixesAndAllPrefixesAndSuffixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let result = '';\n  for (let i = 0; i < strings.length; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  >>> concatenate([1, 2, 3])\n  '123'\n  >>> concatenate([1, '2', 3])\n  '1223'\n  >>> concatenate([1, 2, 3, 4])\n  '1234'\n  >>> concatenate([1, 2, '3', 4])\n  '1234'\n  >>> concatenate([1, 2, '3', '4'])\n  '1234'\n  >>> concatenate([1, '2', '3', '4'])\n  '1234'\n  >>> concatenate([1, '2', '3', 4])\n  '1234'\n  >>> concatenate([1, '2', '3', '4', 5])\n  '12345'\n  >>> concatenate([1, '2', '3', '4', 5, 6])\n  '123456'\n  >>> concatenate([1, '2', '3', '4', 5, '6'])\n  '123456'\n  >>> concatenate([1, '2', '3', '4', '5', '6'])\n  '123456'\n  >>> concatenate([1, '2', '3', '4', '5', 6])\n  '123456'\n  >>> concatenate([1, '2', '3', '4', '5', '6', 7])\n  '1234567'\n  >>> concatenate([1, '2', '3', '4', '5', '6', 7, 8])\n  '12345678'\n  >>> concatenate([1, '2', '3', '4', '5', '6', 7, '8'])\n  '12345678'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8])\n  '12345678'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, '8'])\n  '12345678'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9])\n  '123456789'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10])\n  '12345678910'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11])\n  '1234567891011'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12])\n  '1234567891012'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  '12345678910123'\n  >>> concatenate([1, '2', '3', '4', '5', 6, 7, 8, 9"}
{"task_id": "JavaScript/29", "prompt": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix));\n};\n\n/**\n  * Counts how many times a given string appears in a given list of strings.\n  *\n  * @param  {string}   aString\n  * @param  {Array}    anArrayOfStrings\n  * @return {number}\n  * @example\n  *   countOccurences('abc', ['a', 'b', 'c', 'a', 'b', 'c']) // -> 2\n  */\nconst countOccurences = (aString, anArrayOfStrings) => {\n  return anArrayOfStrings.reduce((prev, current) => {\n    return current === aString? prev + 1 : prev;\n  }, 0);\n};\n\n/**\n  * Counts how many times a given string appears in a given list of strings.\n  *\n  * @param  {string}   aString\n  * @param  {Array}    anArrayOfStrings\n  * @return {number}\n  * @example\n  *   countOccurences('abc', ['a', 'b', 'c', 'a', 'b', 'c']) // -> 2\n  */\nconst countOccurences = (aString, anArrayOfStrings) => {\n  return anArrayOfStrings.reduce((prev, current) => {\n    return current === aString? prev + 1 : prev;\n  }, 0);\n};\n\nexport default {\n  filterByPrefix,\n  countOccurences\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((e) => e > 0);\n};\n\n// # sourceMappingURL=getPositive.js.map<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  let n_str = n.toString();\n  let i = 2;\n  while (i < n_str.length) {\n    if (n_str[i] == '0') {\n      return false;\n    } else if (n_str[i] == '1') {\n      return true;\n    } else {\n      if (n_str[i] % 2 == 0) {\n        return false;\n      }\n      while (n_str[i] % i == 0) {\n        i++;\n      }\n    }\n  }\n  return true;\n};\n\nexport { isPrime };\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let x = 0;\n  let x_ = 0;\n  let x_2 = 0;\n  let y = 0;\n  let y_ = 0;\n  for (i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n      j = i;\n    }\n    if (xs[i] < min) {\n      min = xs[i];\n      k = i;\n    }\n  }\n  x = (max + min) / 2;\n  y = poly(x, xs);\n  if (Math.abs(y) < 0.0001) {\n    return x;\n  }\n  x_ = (max - min) / 2;\n  y_ = poly(x_, xs);\n  while (Math.abs(y_) < 0.0001) {\n    x_ += (max - min) / 2;\n    y_ = poly(x_, xs);\n  }\n  while (Math.abs(y_) < 0.0001) {\n    x_ -= (max - min) / 2;\n    y_ = poly(x_, xs);\n  }\n  return (x_ + x) / 2;\n}\n\n/*\n  Evapuate polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst findPoly = (xs, x) => {\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let x = 0;\n  let x_ = 0;\n  let x_2 = 0;\n  let y = 0;\n  let y_ = 0;\n  for (i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n      j = i;\n    }\n    if (xs[i] < min) {\n      min = xs[i];\n      k = i;\n    }\n  }\n  x = (max + min) / 2;\n  y = poly(x, xs);\n  if (Math.abs(y) < 0.0001) {\n    return x;\n  }\n  x_ = (max - min) / 2;\n  y_ = poly(x_, xs);\n  while (Math.abs(y_) < 0.0001) {\n    x_ += (max - min) / 2;\n    y_ = poly(x_, xs);\n  }\n  while (Math.abs(y_) < 0.0001) {\n    x_ -= (max - min) / 2;\n    y_ = poly(x_, xs);\n  }\n  return (x_ + x) / 2;\n}\n\n/*\n  Evapuate polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst findPoly2 = (xs, x) => {\n  let max = 0;\n  let min = 0;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let x = 0;\n  let x_ = 0;\n  let x_2 = 0;\n  let y = 0;\n  let y_ = 0;\n  for (i = 0; i < xs.length; i++) {\n    if (xs[i] > max) {\n      max = xs[i];\n      j = i;\n    }\n    if (xs[i] < min) {\n      min = xs[i];\n      k = i;\n    }\n  }\n  x = (max + min) / 2;\n  y = poly(x, xs);\n  if (Math.abs(y) < 0.0001) {\n    return x;\n  }\n  x_ = (max - min) / 2;\n  y_ = poly(x_, xs);\n  while (Math.abs(y_) < 0.0001) {\n    x_ += (max - min) / 2;\n    y_ = poly(x_, xs);\n  }\n  while (Math.abs(y_) < 0.0001) {\n    x_ -= (max - min) / 2;\n    y_ = poly(x_, xs);\n  }\n  return (x_ + x) / 2;\n}\n\n/*\n  Evapuate polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst findPoly3 = (xs, x) => {\n  let max = 0;\n  "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const sorted = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0) {\n      sorted.push(l[i])\n    }\n  }\n  for (let j = 0; j < sorted.length; j++) {\n    for (let k = 0; k < l.length; k++) {\n      if (sorted[j] === l[k]) {\n        sorted.splice(j, 1)\n        break\n      }\n    }\n  }\n  return sorted\n}\n\nmodule.exports = sortThird\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let unique_list = [];\n  for (let i = 0; i < l.length; i++) {\n    if (unique_list.indexOf(l[i]) === -1) {\n      unique_list.push(l[i]);\n    }\n  }\n  return unique_list;\n};\n\n/**\n  * Return the intersection of 2 arrays\n  *\n  * @param {Array} array1\n  * @param {Array} array2\n  * @return {Array}\n  * @example\n  * //Returns only unique values in both arrays\n  * intersection([1, 2, 2, 3, 4, 5, 5], [2, 3, 4])\n  * //Returns only unique values in both arrays\n  * intersection([1, 2, 2, 3, 4, 5, 5], [2, 3, 4, 5, 6, 7])\n  */\nconst intersection = (array1, array2) => {\n  let unique_array1 = unique(array1);\n  let unique_array2 = unique(array2);\n  let array_intersection = [];\n  for (let i = 0; i < unique_array1.length; i++) {\n    if (unique_array2.indexOf(unique_array1[i])!== -1) {\n      array_intersection.push(unique_array1[i]);\n    }\n  }\n  return array_intersection;\n};\n\nmodule.exports = {\n  union,\n  intersection\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const [len,...list] = l;\n  let min = list[0];\n  for (let i = 1; i < len; i++) {\n    if (min < list[i]) min = list[i];\n  }\n  return min;\n};\n\n/**\n  * Return index of maximum element in the list.\n  * Return -1 if list is empty.\n  * Return -1 if maxElement() is undefined.\n  *\n  * @param {Array} l\n  * @return {Number}\n  * @example\n  *\n  * >>> maxElement([1, 2, 3])\n  * 3\n  * >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * 9\n  * >>> maxElement([])\n  * -1\n  * >>> maxElement(null)\n  * -1\n  * >>> maxElement([1, 2, 3, 4, 5])\n  * 5\n  */\nconst maxElementIndex = (l) => {\n  const [len,...list] = l;\n  if (len == 0) return -1;\n  const max = maxElement(list);\n  for (let i = 0; i < len; i++) {\n    if (list[i] === max) return i;\n  }\n  return -1;\n};\n\n/**\n  * Return minimum element in the list.\n  * Return undefined if list is empty.\n  *\n  * @param {Array} l\n  * @return {Number}\n  * @example\n  *\n  * >>> minElement([1, 2, 3])\n  * 1\n  * >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * -10\n  * >>> minElement([])\n  * undefined\n  * >>> minElement(null)\n  * undefined\n  * >>> minElement([1, 2, 3, 4, 5])\n  * 1\n  */\nconst minElement = (l) => {\n  const [len,...list] = l;\n  if (len == 0) return undefined;\n  let min = list[0];\n  for (let i = 1; i < len; i++) {\n    if (min > list[i]) min = list[i];\n  }\n  return min;\n};\n\n/**\n  * Return index of minimum element in the list.\n  * Return -1 if list is empty.\n  * Return -1 if minElement() is undefined.\n  *\n  * @param {Array} l\n  * @return {Number}\n  * @example\n  *\n  * >>> minElement([1, 2, 3])\n  * 1\n  * >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  * -10\n  * >>> minElement([])\n  * -1\n  * >>> minElement(null)\n  * -1\n  * >>> minElement([1, 2, 3, 4, 5])\n  * 1\n  */\nconst minElementIndex = (l) => {\n  const [len,...list] = l;\n  if (len == 0) return -1;\n  const min = minElement(list);\n  for (let i = 0; i < len; i++) {\n    if (list[i] === min) return i;\n  }\n  return -1;\n};\n\nexport default {\n  maxElement,\n  maxElementIndex,\n  minElement,\n  minElementIndex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]\n    let sum = 0\n    let count = 0\n    for (let i = 1; i <= n; i++) {\n        sum = sum + i\n        if ((sum % 11 === 0) || (sum % 13 === 0)) {\n            count = count + 1\n        }\n    }\n    return count\n}<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let even = []\n  for (let i = 0; i < l.length; i += 2) {\n    let evenIndex = l.indexOf(l[i], i)\n    if (evenIndex == -1) {\n      even.push(l[i])\n      i++\n    } else {\n      even.push(l[evenIndex])\n    }\n  }\n  return even.concat(l.slice(i))\n}\n\n// #############################################################################\n// #################### Test Functions #######################################\n// #############################################################################\n\n// console.log(sortEven([1, 2, 3, 4]))\n// console.log(sortEven([5, 6, 3, 4]))\n// console.log(sortEven([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    tlse\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  parses string and returns array of ints.\n  */\nconst parseInts = (s) => {\n  var arr = [], i, n, group = [], group2 = [];\n  for (i = 0; i < s.length; i++) {\n    if (s[i]!='') {\n      group.push(s[i]);\n      if (s[i + 1]!='') {\n        if (s[i + 1] == ',') {\n          arr.push(parseInt(group));\n          group = [];\n          i++;\n        }\n        else\n          group2.push(s[i]);\n      }\n      else\n        group2.push(s[i]);\n    }\n    else {\n      if (group.length!= 0) {\n        arr.push(parseInt(group));\n        group = [];\n      }\n      if (group2.length!= 0) {\n        arr.push(parseInt(group2));\n        group2 = [];\n      }\n    }\n  }\n  if (group.length!= 0)\n    arr.push(parseInt(group));\n  if (group2.length!= 0)\n    arr.push(parseInt(group2));\n  return arr;\n}\n\n/*\n  parses string and returns array of strings.\n  */\nconst parseStrings = (s) => {\n  var arr = [], i, n, group = [], group2 = [];\n  for (i = 0; i < s.length; i++) {\n    if (s[i]!='') {\n      group.push(s[i]);\n      if (s[i + 1]!='') {\n        if (s[i + 1] == ',') {\n          arr.push(group.slice(0, group.length - 1));\n          group = [];\n          i++;\n        }\n        else\n          group2.push(s[i]);\n      }\n      else\n        group2.push(s[i]);\n    }\n    else {\n      if (group.length!= 0) {\n        arr.push(group.slice(0, group.length - 1));\n        group = [];\n      }\n      if (group2.length!= 0) {\n        arr.push(group2.slice(0, group2.length - 1));\n        group2 = [];\n      }\n    }\n  }\n  if (group.length!= 0)\n    arr.push(group);\n  if (group2.length!= 0)\n    arr.push(group2);\n  return arr;\n}\n\n/*\n  parses string and returns array of ints.\n  */\nconst parseInts2 = (s) => {\n  var arr = [], i, n, group = [], group2 = [];\n  for (i = 0; i < s.length; i++) {\n    if (s[i]!='') {\n      group.push(s[i]);\n      if (s[i + 1]!='') {\n        if (s[i + 1] == ',') {\n          arr.push(parseInt(group));\n          group = [];\n          i++;\n        }\n        else\n          group2.push(s[i]);\n      }\n      else\n        group2.push(s[i]);\n    }\n    else {\n      if (group.length!= 0) {\n        arr.push(parseInt(group));\n        group = [];\n      }\n      if (group2.length!= 0) {\n        arr.push(parseInt(group2));\n        group2 = [];\n      }\n    }\n  }\n  if (group.length!= 0)\n    arr.push(parseInt(group));\n  if (group2.length!= 0)\n    arr.push(parseInt(group2));\n  return arr;\n}\n\n/*\n  parses string and returns array of strings.\n  */\nconst parseStrings2 = (s) => {\n  var arr = [], i, n, group = [], group2 = [];\n  for (i = 0; i < s.length; i++) {\n    if (s[i]!='') {\n      group.push(s[i]);\n      if (s[i + 1]!='') {\n        if (s[i + 1] == ',') {\n          arr.push(group.slice(0, group.length - 1));\n          group = [];\n          i++;\n        }\n        else\n          group2.push(s[i]);\n      }\n      else\n        group2.push(s[i]);\n    }\n    else {\n      if (group.length!= 0) {\n        arr.push(group.slice(0, group.length - 1));\n        group = [];\n      }\n      if (group2.length!= 0) {\n        arr.push(group2.slice(0, group2.length - 1));\n        group2 = [];\n      }\n    }\n  }\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let a = 1, b = 2, c = 3, p = 5, d = 13, max = n, min = 2, k = 0;\n    while (a < max) {\n        k = (a + b) % p;\n        if (k == 0) {\n            if (d <= max) {\n                p = p * 2;\n                d = d + 2;\n            }\n        } else {\n            b = a;\n            a = k;\n        }\n        if (c < b) {\n            c = b;\n        }\n    }\n    return (p - 1);\n}\n\n/*\n  factorialFib rehurns n-th number that is a Fibonacci number and is factorial.\n  >>> factorialFib(1)\n  2\n  >>> factorialFib(2)\n  3\n  >>> factorialFib(3)\n  6\n  >>> factorialFib(4)\n  24\n  >>> factorialFib(5)\n  30\n  >>> factorialFib(6)\n  42\n  */\nconst factorialFib = (n) => {\n    let p = 1, a = 1, b = 1, f = 1, max = n, min = 2;\n    while (a < max) {\n        f = (a + b) % p;\n        if (f == 0) {\n            p = p * 2;\n        }\n        a = f;\n        b = a;\n        if (b < min) {\n            min = b;\n        }\n    }\n    return p;\n}\n\n/*\n  getPrimeFactors rehurns a list of prime factors of n.\n  >>> getPrimeFactors(1)\n  []\n  >>> getPrimeFactors(2)\n  []\n  >>> getPrimeFactors(4)\n  [2, 2]\n  >>> getPrimeFactors(12)\n  [2, 2, 3, 3]\n  >>> getPrimeFactors(17)\n  [2, 2, 7, 7]\n  >>> getPrimeFactors(37)\n  [2, 2, 13, 13, 17, 17]\n  >>> getPrimeFactors(90)\n  [2, 2, 3, 5, 5, 7, 7, 9, 9]\n  >>> getPrimeFactors(45)\n  [3, 5, 3, 5, 15, 15]\n  >>> getPrimeFactors(1296)\n  [2, 2, 3, 3, 5, 5, 7, 7, 9, 9, 15, 15, 21, 21]\n  >>> getPrimeFactors(15)\n  [3, 5]\n  >>> getPrimeFactors(60)\n  [2, 3, 5, 7]\n  >>> getPrimeFactors(120)\n  [2, 3, 5, 7, 15]\n  >>> getPrimeFactors(180)\n  [2, 3, 5, 7, 15, 21]\n  >>> getPrimeFactors(600)\n  [2, 3, 5, 7, 15, 21, 35, 35, 45, 45, 55, 55, 65, 65]\n  >>> getPrimeFactors(1)\n  []\n  >>> getPrimeFactors(15)\n  []\n  >>> getPrimeFactors(300)\n  []\n  */\nconst getPrimeFactors = (n) => {\n    let primeFactors = [], i = 2;\n    while (i < n) {\n        while (n % i === 0) {\n            primeFactors.push(i);\n            n = n / i;\n        }\n        i = i + 1;\n    }\n    if (n > 1) {\n        primeFactors.push(n);\n    }\n    return primeFactors;\n}\n\n/*\n  getFibonacciNum rehurns a Fibonacci number that is greater than n.\n  >>> getFibonacciNum(1)\n  2\n  >>> getFibonacciNum(2)\n  3\n  >>> getFibonacciNum(3)\n  5\n  >>> getFibonacciNum(4)\n  8\n  >>> getFibonacciNum(5)\n  13\n  >>> getFibonacciNum(6)\n  21\n  >>> getFibonacciNum(7)\n  34\n  >>> getFibonacciNum(8)\n  55\n  >>> getFibonacciNum(9)\n  89\n  >>> getFibonacciNum(10)\n  144\n  >>> getFibonacciNum(11)\n  233\n  >>> getFibonacciNum(12)\n  377\n  >>> getFibonacciNum(13)\n  610\n  >>> getFibonacciNum(14)\n  987\n  >>> getFibonacciNum(15)\n  1597\n  >>> getFibonacciNum(16)\n  2584\n  >>> getFibonacciNum(17)\n  4181\n  >>> getFibonacciNum(18)\n  6368\n  >>> getFibonacciNum(19)\n  9919\n  >>> getFibonacciNum(20)\n  14694\n  >>> getFibonacciNum(21)\n  23889\n  >>> getFibonacciNum(22)\n  39480\n  >>> getFibonacciNum(23)\n  58241\n  >>> getFibonacciNum(24)\n  92301\n  >>> getFibonacciNum(25)\n  129741\n  >>> getFibonacciNum(26)\n  188412\n  >>> getFibonacciNum(27)\n  265381\n  >>> getFibonacciNum(28)\n  386688\n  >>> getFibonacciNum(29)\n  567987\n  >>> getFibonacciNum(30)\n  852066\n  >>> getFibonacciNum(31)\n  1217463\n  >>> getFibonacciNum(32)\n  1757122\n  >>> getFibonacciNum(33)\n  2444481\n  >>> get"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    let x = l.slice();\n    let y = l.slice();\n    let n = x.length;\n    let c = 0;\n    let r = 0;\n    let i = 0;\n    while (i < n) {\n        x[i] = x[i] < 0? 0 : x[i];\n        y[i] = y[i] < 0? 0 : y[i];\n        c += x[i] + y[i];\n        if (c === 0) {\n            r = true;\n            break;\n        }\n        i++;\n    }\n    return r;\n};\n\nexport {triplesSumToZero};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n    //  a   b   c   d\n    const a = [0, 1, 2, 3];\n    const b = [4, 5, 6, 7];\n    const c = [8, 9, 10, 11];\n    const d = [12, 13, 14, 15];\n\n    const collisions = 0;\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < n; j++) {\n            //  if (a[i] > b[j]) {\n            if (a[i] > c[j]) {\n                if (a[i] > d[j]) {\n                    collisions++;\n                }\n            } else {\n                if (b[j] > c[i]) {\n                    collisions++;\n                } else {\n                    if (b[j] > d[i]) {\n                        collisions++;\n                    }\n                }\n            }\n        }\n    }\n\n    return collisions;\n};\n\nconsole.log(carRaceCollision(4));\nconsole.log(carRaceCollision(5));\nconsole.log(carRaceCollision(6));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = [...l];\n  for (let i = 0; i < newList.length; i++) {\n    newList[i]++;\n  }\n  return newList;\n}\n\n/*\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nmodule.exports = incrList;\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  const isPairSumToZero = (i, j) => {\n    return (\n      Math.abs(i - j) > 1\n    );\n  };\n\n  const unique = (arr) => {\n    const uniqueArr = [];\n    for (let i = 0; i < arr.length; i++) {\n      if (uniqueArr.indexOf(arr[i]) === -1) {\n        uniqueArr.push(arr[i]);\n      }\n    }\n    return uniqueArr;\n  };\n\n  const sort = (arr) => {\n    arr.sort((a, b) => {\n      return a - b;\n    });\n  };\n\n  const checkPairs = (arr) => {\n    const uniqueArray = unique(arr);\n    if (uniqueArray.length === 2) {\n      if (\n        arr[0] === arr[1] ||\n        isPairSumToZero(arr[0], arr[1])\n      ) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  sort(l);\n  if (checkPairs(l)) {\n    return true;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    let result = '';\n    while (x > 0) {\n        result = `${base}${x % base}${result}`;\n        x = Math.floor(x / base);\n    }\n    return result;\n};\n\n// https://www.hackerrank.com/challenges/bigint\nconst BigInt = (x) => {\n    let result = '';\n    while (x > 0) {\n        result = `${x % 10}${result}`;\n        x = Math.floor(x / 10);\n    }\n    return result;\n};\n\nconst main = () => {\n    const x = parseInt(readline());\n    const y = parseInt(readline());\n    const z = parseInt(readline());\n    const n = parseInt(readline());\n\n    const result = BigInt(x) + BigInt(y) + BigInt(z);\n    console.log(`The sum of ${x} and ${y} and ${z} is ${result}.`);\n    console.log(`The number of digits in the result is ${result.length}.`);\n    console.log(`The number of digits in the sum is ${\n        changeBase(result.length, 10).length}\n    which means ${\n        changeBase(result.length, 10)} is the base 10 representation of the result.`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Calculate the area of a triangle.\n  >>> triangleArea(3, 4)\n  3.0\n  */\nconst triangleArea2 = (a, h) => {\n    return a * h / 2;\n};\n\n/*Givej the area of a traingle with high area for a traingle.\n  >>> triangleArea(3, 4)\n  3.0\n  */\nconst triangleArea3 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Calculate the area of a rectangle.\n  >>> rectangleArea(4, 5)\n  25.0\n  */\nconst rectangleArea = (w, h) => {\n    return w * h;\n};\n\n/*Givej the area of a rectangle with high area for a rectangle.\n  >>> rectangleArea(4, 5)\n  25.0\n  */\nconst rectangleArea2 = (w, h) => {\n    return w * h;\n};\n\n/*Givej the area of a rectangle with high area for a rectangle.\n  >>> rectangleArea(4, 5)\n  25.0\n  */\nconst rectangleArea3 = (w, h) => {\n    return w * h;\n};\n\n/*Calculate the area of a square.\n  >>> squareArea(4)\n  16.0\n  */\nconst squareArea = (s) => {\n    return Math.pow(s, 2);\n};\n\n/*Givej the area of a square with high area for a square.\n  >>> squareArea(4)\n  16.0\n  */\nconst squareArea2 = (s) => {\n    return Math.pow(s, 2);\n};\n\n/*Givej the area of a square with high area for a square.\n  >>> squareArea(4)\n  16.0\n  */\nconst squareArea3 = (s) => {\n    return Math.pow(s, 2);\n};\n\n/*Givej the area of a circle.\n  >>> circleArea(3)\n  3.141592653589793\n  */\nconst circleArea = (r) => {\n    return Math.PI * r * r;\n};\n\n/*Givej the area of a circle with high area for a circle.\n  >>> circleArea(3)\n  3.141592653589793\n  */\nconst circleArea2 = (r) => {\n    return Math.PI * r * r;\n};\n\n/*Givej the area of a circle with high area for a circle.\n  >>> circleArea(3)\n  3.141592653589793\n  */\nconst circleArea3 = (r) => {\n    return Math.PI * r * r;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea3 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a rectangle with high area for a rectangle.\n  >>> rectangleArea(3, 4)\n  9.0\n  */\nconst rectangleArea3 = (w, h) => {\n    return (Math.pow(w, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea4 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a rectangle with high area for a rectangle.\n  >>> rectangleArea(3, 4)\n  9.0\n  */\nconst rectangleArea5 = (w, h) => {\n    return (Math.pow(w, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea6 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea7 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea8 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea9 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea10 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea11 = (a, h) => {\n    return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n};\n\n/*Givej the area of a triangle with high area for a triangle.\n  >>> triangleArea(3, 4)\n  9.0\n  */\nconst triangleArea12 = (a, h) => {\n    return (Math.pow(a"}
{"task_id": "JavaScript/46", "prompt": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) return n;\n  else return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);\n};\n\nconst fib4 = ("}
{"task_id": "JavaScript/47", "prompt": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let half = size >> 1;\n  let left = l.slice(0, half);\n  let right = l.slice(half);\n  return (left[half - 1] + right[half]) / 2;\n};\n\n/**\n  *  Find the smallest element in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the smallest element in the list l.\n  */\nconst min = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let min_index = 0;\n  let min_value = l[0];\n  for (let i = 1; i < size; i++) {\n    if (l[i] < min_value) {\n      min_value = l[i];\n      min_index = i;\n    }\n  }\n  return min_value;\n};\n\n/**\n  *  Find the largest element in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the largest element in the list l.\n  */\nconst max = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let max_index = 0;\n  let max_value = l[0];\n  for (let i = 1; i < size; i++) {\n    if (l[i] > max_value) {\n      max_value = l[i];\n      max_index = i;\n    }\n  }\n  return max_value;\n};\n\n/**\n  *  Find the sum of all elements in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the sum of all elements in the list l.\n  */\nconst sum = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < size; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n  *  Find the mean of all elements in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the mean of all elements in the list l.\n  */\nconst mean = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < size; i++) {\n    sum += l[i];\n  }\n  return sum / size;\n};\n\n/**\n  *  Find the median of all elements in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the median of all elements in the list l.\n  */\nconst median = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let half = size >> 1;\n  let left = l.slice(0, half);\n  let right = l.slice(half);\n  return (left[half - 1] + right[half]) / 2;\n};\n\n/**\n  *  Find the smallest element in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the smallest element in the list l.\n  */\nconst min = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let min_index = 0;\n  let min_value = l[0];\n  for (let i = 1; i < size; i++) {\n    if (l[i] < min_value) {\n      min_value = l[i];\n      min_index = i;\n    }\n  }\n  return min_value;\n};\n\n/**\n  *  Find the largest element in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the largest element in the list l.\n  */\nconst max = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let max_index = 0;\n  let max_value = l[0];\n  for (let i = 1; i < size; i++) {\n    if (l[i] > max_value) {\n      max_value = l[i];\n      max_index = i;\n    }\n  }\n  return max_value;\n};\n\n/**\n  *  Find the sum of all elements in the list l.\n  *  @param {array} l - the array of elements\n  *  @return {number} the sum of all elements in the list l.\n  */\nconst sum = (l) => {\n  let size = l.length;\n  if (size === 0) {\n    return undefined;\n  }\n  if (size === 1) {\n    return l[0];\n  }\n  let sum = 0;\n  for (let i = 0; i < size; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/**\n  *  "}
{"task_id": "JavaScript/48", "prompt": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('b')\n  true\n  >>> isPalindrome('bb')\n  true\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('bbb')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aab')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('b')\n  true\n  >>> isPalindrome('aa')\n  false\n  >>> isPalindrome('aa')\n  true\n  */\nconst isPalindrome2 = (text) => {\n  if (text.length === 1) return true;\n  if (text.charAt(0)!== text.charAt(text.length - 1)) return false;\n  return isPalindrome2(text.substring(1, text.length - 1));\n};\n\n/*\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('abc')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aa')\n  true\n  >>> isPalindrome('aa')\n  true\n  */\nconst isPalindrome3 = (text) => {\n  let len = text.length;\n  for (let i = 0; i < len / 2; i++) {\n    if (text[i]!== text[len - 1 - i]) return false;\n  }\n  return true;\n};\n\n/*\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('b')\n  true\n  >>> isPalindrome('ab')\n  true\n  >>> isPalindrome('ba')\n  true\n  >>> isPalindrome('aab')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('aa')\n  true\n  >>> isPalindrome('aa')\n  true\n  */\nconst isPalindrome4 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\n/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('ab')\n  true\n  >>> isPalindrome('aa')\n  true\n  >>> isPalindrome('ab')\n  false\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('b')\n  true\n  >>> isPalindrome('a')\n  true\n  >>> isPalindrome('a')\n  true\n  */\nconst isPalindrome5 = (text) => {\n  let reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\nmodule.exports = {\n  isPalindrome,\n  isPalindrome2,\n  isPalindrome3,\n  isPalindrome4,\n  isPalindrome5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    if(n >= 0) {\n        return (n % p + p) % p;\n    }\n    else {\n        return n % p;\n    }\n}\n\n/**\n  * Calculate the sum of two numbers.\n  * @param  {number}  n The first number.\n  * @param  {number}  m The second number.\n  * @return {number}   The sum.\n  * @example\n  *   sum(1, 2)\n  *   // => 3\n  * @example\n  *   sum(3, 4)\n  *   // => 9\n  * @example\n  *   sum(3, 4, -2)\n  *   // => 5\n  */\nconst sum = (n, m) => {\n    return n + m;\n}\n\n/**\n  * Calculate the difference between two numbers.\n  * @param  {number}  n The first number.\n  * @param  {number}  m The second number.\n  * @return {number}   The difference.\n  * @example\n  *   difference(3, 4)\n  *   // => 1\n  * @example\n  *   difference(5, 4)\n  *   // => 1\n  * @example\n  *   difference(5, 4, -2)\n  *   // => 3\n  */\nconst difference = (n, m) => {\n    return n - m;\n}\n\n/**\n  * Calculate the product of two numbers.\n  * @param  {number}  n The first number.\n  * @param  {number}  m The second number.\n  * @return {number}   The product.\n  * @example\n  *   product(3, 4)\n  *   // => 12\n  * @example\n  *   product(5, 4)\n  *   // => 20\n  * @example\n  *   product(5, 4, -2)\n  *   // => 0\n  */\nconst product = (n, m) => {\n    return n * m;\n}\n\n/**\n  * Calculate the quotient of two numbers.\n  * @param  {number}  n The first number.\n  * @param  {number}  m The second number.\n  * @return {number}   The quotient.\n  * @example\n  *   quotient(5, 4)\n  *   // => 2\n  * @example\n  *   quotient(2, 4)\n  *   // => 1\n  * @example\n  *   quotient(5, 4, -2)\n  *   // => -1\n  */\nconst quotient = (n, m) => {\n    return n / m;\n}\n\n/**\n  * Calculate the remainder of two numbers.\n  * @param  {number}  n The first number.\n  * @param  {number}  m The second number.\n  * @return {number}   The remainder.\n  * @example\n  *   remainder(5, 4)\n  *   // => 1\n  * @example\n  *   remainder(2, 4)\n  *   // => 0\n  * @example\n  *   remainder(5, 4, -2)\n  *   // => 3\n  */\nconst remainder = (n, m) => {\n    return n % m;\n}\n\n/**\n  * Calculate the power of two number.\n  * @param  {number}  n The number.\n  * @return {number}   The power of two.\n  * @example\n  *   power(2)\n  *   // => 2\n  * @example\n  *   power(3)\n  *   // => 8\n  */\nconst power = (n) => {\n    return Math.pow(2, n);\n}\n\n/**\n  * Calculate the square of a number.\n  * @param  {number}  n The number.\n  * @return {number}   The square of the number.\n  * @example\n  *   square(3)\n  *   // => 9\n  */\nconst square = (n) => {\n    return n * n;\n}\n\n/**\n  * Calculate the cube of a number.\n  * @param  {number}  n The number.\n  * @return {number}   The cube of the number.\n  * @example\n  *   cube(3)\n  *   // => 27\n  */\nconst cube = (n) => {\n    return n * n * n;\n}\n\n/**\n  * Calculate the factorial of a number.\n  * @param  {number}  n The number.\n  * @return {number}   The factorial.\n  * @example\n  *   factorial(5)\n  *   // => 120\n  */\nconst factorial = (n) => {\n    return Math.pow(2, n);\n}\n\n/**\n  * Calculate the hyperbolic cosine of a number.\n  * @param  {number}  n The number.\n  * @return {number}   The hyperbolic cosine.\n  * @example\n  *   hyperbolic_cosine(2)\n  *   // => 1.414\n  */\nconst hyperbolic_cosine = (n) => {\n    return Math.cos(n * Math.PI / 2);\n}\n\n/**\n  * Calculate the hyperbolic sine of a number.\n  * @param  {number}  n The number.\n  * @return {number}   The hyperbolic sine.\n  * @example\n  *   hyperbolic_sine(2)\n  *   // => 0.707\n  */\nconst hyperbolic_sine = (n) => {\n    return Math.sin(n * Math.PI / 2);\n}\n\n/**\n  * Calculate the hyperbolic tangent of a number.\n  * @param  {number}  n The number.\n  * @return {number}   The hyperbolic tangent.\n  * @"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n  return encodeShift(s).split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst encode = (s) => encodeShift(s);\nconst decode = (s) => decodeShift(s);\n\nconst main = (args) => {\n  if (args.length === 1) {\n    const string = decode(args[0]);\n    console.log(string);\n  } else if (args.length === 2) {\n    const string = decode(args[0]);\n    const shift = args[1].toUpperCase();\n    const stringWithShift = encode(string + shift);\n    console.log(stringWithShift);\n  }\n};\n\nmain(process.argv.slice(2));\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const words = text.split('');\n    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < vowels.length; j++) {\n            if (words[i] === vowels[j]) {\n                words[i] = \"\";\n            }\n        }\n    }\n    return words.join('');\n};\n\n/*\n  getVowelsCount is a function that takes string and returns number of vowels.\n  >>> getVowelsCount(\"abcdef\")\n  3\n  >>> getVowelsCount(\"abc\")\n  0\n  >>> getVowelsCount(\"\")\n  0\n  >>> getVowelsCount(null)\n  0\n  */\nconst getVowelsCount = (text) => {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const words = text.split('');\n    const count = 0;\n    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < vowels.length; j++) {\n            if (words[i] === vowels[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n};\n\n/*\n  getVowelsCount is a function that takes string and returns number of vowels.\n  >>> getVowelsCount(\"abcdef\")\n  3\n  >>> getVowelsCount(\"abc\")\n  0\n  >>> getVowelsCount(\"\")\n  0\n  >>> getVowelsCount(null)\n  0\n  */\nconst getVowelsCount = (text) => {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const words = text.split('');\n    const count = 0;\n    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < vowels.length; j++) {\n            if (words[i] === vowels[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n};\n\n/*\n  getLettersCount is a function that takes string and returns number of letters.\n  >>> getLettersCount(\"abcdef\")\n  6\n  >>> getLettersCount(\"abc\")\n  3\n  >>> getLettersCount(\"\")\n  0\n  >>> getLettersCount(null)\n  0\n  */\nconst getLettersCount = (text) => {\n    const letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    const words = text.split('');\n    const count = 0;\n    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < letters.length; j++) {\n            if (words[i] === letters[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n};\n\n/*\n  getLettersCount is a function that takes string and returns number of letters.\n  >>> getLettersCount(\"abcdef\")\n  6\n  >>> getLettersCount(\"abc\")\n  3\n  >>> getLettersCount(\"\")\n  0\n  >>> getLettersCount(null)\n  0\n  */\nconst getLettersCount = (text) => {\n    const letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    const words = text.split('');\n    const count = 0;\n    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < letters.length; j++) {\n            if (words[i] === letters[j]) {\n                count++;\n            }\n        }\n    }\n    return count;\n};\n\n/*\n  main is a function that takes string and returns string with vowels removed.\n  >>> main(\"abcdef\")\n  'bcdf'\n  >>> main(\"abc\")\n  'bc'\n  >>> main(\"\")\n  ''\n  >>> main(null)\n  ''\n  */\nconst main = (text) => {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const words = text.split('');\n    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < vowels.length; j++) {\n            if (words[i] === vowels[j]) {\n                words[i] = \"\";\n            }\n        }\n    }\n    return words.join('');\n};\n\n/*\n  main is a function that takes string and returns string with vowels removed.\n  >>> main(\"abcdef\")\n  'bcdf'\n  >>> main(\"abc\")\n  'bc'\n  >>> main(\"\")\n  ''\n  >>> main(null)\n  ''\n  */\nconst main = (text) => {\n    const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    const words = text.split('');\n    for (let i = 0; i < words.length; i++) {\n        for (let j = 0; j < vowels.length; j++) {\n            if (words"}
{"task_id": "JavaScript/52", "prompt": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const length = l.length\n  for (let i = 0; i < length; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Returns true if every number in the list is greater than the\n  given threshold.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  const length = l.length\n  for (let i = 0; i < length; i++) {\n    if (l[i] < t) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  Returns a new list containing only the numbers that are less than\n  or equal to the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  []\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  [1, 2, 4, 10]\n  */\nconst threshold = (l, t) => {\n  const length = l.length\n  const newList = []\n  for (let i = 0; i < length; i++) {\n    if (l[i] <= t) {\n      newList.push(l[i])\n    }\n  }\n  return newList\n}\n\n/*\n  Returns a new list containing only the numbers that are less than\n  or equal to the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  [1, 2, 4, 10]\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  [1, 2, 4, 10]\n  */\nconst threshold1 = (l, t) => {\n  const length = l.length\n  const newList = []\n  for (let i = 0; i < length; i++) {\n    if (l[i] < t) {\n      newList.push(l[i])\n    }\n  }\n  return newList\n}\n\n/*\n  Returns a new list containing only the numbers that are less than\n  or equal to the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  [1, 2, 4, 10]\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  [1, 2, 4, 10]\n  */\nconst threshold2 = (l, t) => {\n  const length = l.length\n  const newList = []\n  for (let i = 0; i < length; i++) {\n    if (l[i] <= t) {\n      newList.push(l[i])\n    }\n  }\n  return newList\n}\n\n/*\n  Returns a new list containing only the numbers that are less than\n  or equal to the threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> belowThreshold([1, 2, 4, 10], 5)\n  [1, 2, 4, 10]\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  [1, 2, 4, 10]\n  >>> aboveThreshold([1, 2, 4, 10], 5)\n  [1, 2, 4, 10]\n  */\nconst threshold3 = (l, t) => {\n  const length = l.length\n  const newList = []\n  for (let i = 0; i < length; i++) {\n    if (l[i] < t) {\n      newList.push(l[i])\n    }\n  }\n  return newList\n}\n\nexport {\n  belowThreshold,\n  aboveThreshold,\n  threshold,\n  threshold1,\n  threshold2,\n  threshold3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n * @example\n * //example\n * add(2, 3)\n * 5\n * add(5, 7)\n * 12\n */\nconst multiply = (x, y) => {\n    return x * y;\n};\n\nconst divide = (x, y) => {\n    return x / y;\n};\n\nconst mod = (x, y) => {\n    return x % y;\n};\n\nconst add2 = (x) => {\n    return x + 2;\n};\n\nconst add3 = (x) => {\n    return x + 3;\n};\n\nconst add4 = (x) => {\n    return x + 4;\n};\n\nconst add5 = (x) => {\n    return x + 5;\n};\n\nconst add6 = (x) => {\n    return x + 6;\n};\n\nconst add7 = (x) => {\n    return x + 7;\n};\n\nconst add8 = (x) => {\n    return x + 8;\n};\n\nconst add9 = (x) => {\n    return x + 9;\n};\n\nconst add10 = (x) => {\n    return x + 10;\n};\n\nconst add11 = (x) => {\n    return x + 11;\n};\n\nconst add12 = (x) => {\n    return x + 12;\n};\n\nconst add13 = (x) => {\n    return x + 13;\n};\n\nconst add14 = (x) => {\n    return x + 14;\n};\n\nconst add15 = (x) => {\n    return x + 15;\n};\n\nconst add16 = (x) => {\n    return x + 16;\n};\n\nconst add17 = (x) => {\n    return x + 17;\n};\n\nconst add18 = (x) => {\n    return x + 18;\n};\n\nconst add19 = (x) => {\n    return x + 19;\n};\n\nconst add20 = (x) => {\n    return x + 20;\n};\n\nconst add21 = (x) => {\n    return x + 21;\n};\n\nconst add22 = (x) => {\n    return x + 22;\n};\n\nconst add23 = (x) => {\n    return x + 23;\n};\n\nconst add24 = (x) => {\n    return x + 24;\n};\n\nconst add25 = (x) => {\n    return x + 25;\n};\n\nconst add26 = (x) => {\n    return x + 26;\n};\n\nconst add27 = (x) => {\n    return x + 27;\n};\n\nconst add28 = (x) => {\n    return x + 28;\n};\n\nconst add29 = (x) => {\n    return x + 29;\n};\n\nconst add30 = (x) => {\n    return x + 30;\n};\n\nconst add31 = (x) => {\n    return x + 31;\n};\n\nconst add32 = (x) => {\n    return x + 32;\n};\n\nconst add33 = (x) => {\n    return x + 33;\n};\n\nconst add34 = (x) => {\n    return x + 34;\n};\n\nconst add35 = (x) => {\n    return x + 35;\n};\n\nconst add36 = (x) => {\n    return x + 36;\n};\n\nconst add37 = (x) => {\n    return x + 37;\n};\n\nconst add38 = (x) => {\n    return x + 38;\n};\n\nconst add39 = (x) => {\n    return x + 39;\n};\n\nconst add40 = (x) => {\n    return x + 40;\n};\n\nconst add41 = (x) => {\n    return x + 41;\n};\n\nconst add42 = (x) => {\n    return x + 42;\n};\n\nconst add43 = (x) => {\n    return x + 43;\n};\n\nconst add44 = (x) => {\n    return x + 44;\n};\n\nconst add45 = (x) => {\n    return x + 45;\n};\n\nconst add46 = (x) => {\n    return x + 46;\n};\n\nconst add47 = (x) => {\n    return x + 47;\n};\n\nconst add48 = (x) => {\n    return x + 48;\n};\n\nconst add49 = (x) => {\n    return x + 49;\n};\n\nconst add50 = (x) => {\n    return x + 50;\n};\n\nconst add51 = (x) => {\n    return x + 51;\n};\n\nconst add52 = (x) => {\n    return x + 52;\n};\n\nconst add53 = (x) => {\n    return x + 53;\n};\n\nconst add54 = (x) => {\n    return x + 54;\n};\n\nconst add55 = (x) => {\n    return x + 55;\n};\n\nconst add56 = (x) => {\n    return x + 56;\n};\n\nconst add57 = (x) => {\n    return x + 57;\n};\n\nconst add58 = (x) => {\n    return x + 58;\n};\n\nconst add59 = (x) => {\n    return x + 59;\n};\n\nconst add60 = (x) => {\n    return x + 60;\n};\n\nconst add61 = (x) => {\n    return x + 61;\n};\n\nconst add62 = (x) => {\n    return x + 62;\n};\n\nconst add63 = (x) => {\n    return x + 63;\n};\n\nconst add64 = (x) => {\n    return x + 64;\n};\n\nconst add65 = (x) => {\n    return x + 65;\n};\n\nconst add66 = (x) => {\n    return x + 66;\n};\n\nconst add67 = (x) => {\n    return x + 67;\n};\n\nconst add68 = (x) => {\n    return x + 68;\n};\n\nconst add69 = (x) => {\n    return x + 69;\n};\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const charSet = {};\n  const chars0 = s0.split('');\n  const chars1 = s1.split('');\n\n  for (let i = 0; i < chars0.length; i++) {\n    const char0 = chars0[i];\n    const char1 = chars1[i];\n    if (charSet[char0] === char1) {\n      continue;\n    } else if (char0 === char1) {\n      charSet[char0] = char0;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 2) return 1\n  else return fib(n - 1) + fib(n - 2)\n}\n\nexport default fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  // If we are at the end of the string, the brackets must match.\n  if (brackets === \"\") {\n    return brackets === brackets;\n  }\n\n  // Count the number of openings and closings, then compare the counts.\n  const openings = brackets.split(\"<\").length - 1;\n  const closings = brackets.split(\">\").length - 1;\n  return openings === closings;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (!l.length) return true;\n  let max = l[0];\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n    if (l[i] < min) min = l[i];\n  }\n  return max - min > 0;\n};\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst isMonotonic = (l) => {\n  if (!l.length) return true;\n  let min = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) return false;\n    min = l[i];\n  }\n  return true;\n};\n\nmodule.exports = {\n  monotonic,\n  isMonotonic\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const set1 = new Set(l1);\n    const set2 = new Set(l2);\n    const intersect = set1.intersect(set2);\n    return intersect.size === 0? [] : [...intersect];\n};\n\n/*\n  * Calculate the average of two numbers.\n  * \n  * For example, the average of 2 and 3 is 2.5, which is equal to 1.5.\n  * \n  * \n  * */\nconst average = (n1, n2) => {\n    return n1 + n2 - (n1 * n2) / 2;\n};\n\n/*\n  * Calculate the standard deviation of two numbers.\n  * \n  * For example, the standard deviation of 2 and 3 is 1.\n  * \n  * \n  * */\nconst standardDeviation = (n1, n2) => {\n    return Math.sqrt((n1 - average(n1, n2)) * (n1 - average(n1, n2)) + (n2 - average(n2, n1)) * (n2 - average(n2, n1)));\n};\n\n/*\n  * Calculate the variance of two numbers.\n  * \n  * For example, the variance of 2 and 3 is 1.\n  * \n  * \n  * */\nconst variance = (n1, n2) => {\n    return (n1 - average(n1, n2)) * (n1 - average(n1, n2)) + (n2 - average(n2, n1)) * (n2 - average(n2, n1));\n};\n\n/*\n  * Calculate the average of two numbers.\n  * \n  * For example, the average of 2 and 3 is 2.5, which is equal to 1.5.\n  * \n  * \n  * */\nconst average = (n1, n2) => {\n    return n1 + n2 - (n1 * n2) / 2;\n};\n\n/*\n  * Calculate the standard deviation of two numbers.\n  * \n  * For example, the standard deviation of 2 and 3 is 1.\n  * \n  * \n  * */\nconst standardDeviation = (n1, n2) => {\n    return Math.sqrt((n1 - average(n1, n2)) * (n1 - average(n1, n2)) + (n2 - average(n2, n1)) * (n2 - average(n2, n1)));\n};\n\n/*\n  * Calculate the variance of two numbers.\n  * \n  * For example, the variance of 2 and 3 is 1.\n  * \n  * \n  * */\nconst variance = (n1, n2) => {\n    return (n1 - average(n1, n2)) * (n1 - average(n1, n2)) + (n2 - average(n2, n1)) * (n2 - average(n2, n1));\n};\n\n/*\n  * Calculate the average of two numbers.\n  * \n  * For example, the average of 2 and 3 is 2.5, which is equal to 1.5.\n  * \n  * \n  * */\nconst average = (n1, n2) => {\n    return n1 + n2 - (n1 * n2) / 2;\n};\n\n/*\n  * Calculate the standard deviation of two numbers.\n  * \n  * For example, the standard deviation of 2 and 3 is 1.\n  * \n  * \n  * */\nconst standardDeviation = (n1, n2) => {\n    return Math.sqrt((n1 - average(n1, n2)) * (n1 - average(n1, n2)) + (n2 - average(n2, n1)) * (n2 - average(n2, n1)));\n};\n\n/*\n  * Calculate the variance of two numbers.\n  * \n  * For example, the variance of 2 and 3 is 1.\n  * \n  * \n  * */\nconst variance = (n1, n2) => {\n    return (n1 - average(n1, n2)) * (n1 - average(n1, n2)) + (n2 - average(n2, n1)) * (n2 - average(n2, n1));\n};<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  const max = Math.sqrt(n)\n  for (let i = 2; i <= max; i++) {\n    if (n % i === 0) {\n      const remainder = n % i\n      const factors = countFactors(remainder)\n      if (factors > 1) {\n        return largestPrimeFactor(n / i)\n      }\n    }\n  }\n  return n\n}\n\nconst countFactors = (n) => {\n  const factors = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      const remainder = n % i\n      const factors2 = countFactors(remainder)\n      if (factors2 > 1) {\n        factors.push(i)\n        factors.push(n / i)\n      }\n    }\n  }\n  return factors.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n/*\n  sumOfEvens is a function that sums all even numbers in an array.\n  >>> sumOfEvens([1, 2, 3, 4, 5])\n  10\n  >>> sumOfEvens([1, 2, 3, 4, 5, 6])\n  16\n  >>> sumOfEvens([1, 2, 3, 4, 5, 6, 7])\n  22\n  >>> sumOfEvens([1, 2, 3, 4, 5, 6, 7, 8])\n  30\n  */\nconst sumOfEvens = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] % 2 === 0) {\n      sum += nums[i];\n    }\n  }\n  return sum;\n}\n\n/*\n  sumOfMultiples is a function that sums all multiples of a number in an array.\n  >>> sumOfMultiples([2, 4, 6, 8, 10, 12])\n  26\n  >>> sumOfMultiples([2, 4, 6, 8, 10, 12, 14])\n  32\n  >>> sumOfMultiples([2, 4, 6, 8, 10, 12, 14, 16])\n  36\n  >>> sumOfMultiples([2, 4, 6, 8, 10, 12, 14, 16, 18])\n  42\n  */\nconst sumOfMultiples = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 1; j <= nums[i]; j++) {\n      sum += j;\n    }\n  }\n  return sum;\n}\n\n/*\n  sumOfDivisors is a function that sums all multiples of a number in an array.\n  >>> sumOfDivisors([2, 4, 6, 8, 10, 12])\n  30\n  >>> sumOfDivisors([2, 4, 6, 8, 10, 12, 14])\n  30\n  >>> sumOfDivisors([2, 4, 6, 8, 10, 12, 14, 16])\n  30\n  >>> sumOfDivisors([2, 4, 6, 8, 10, 12, 14, 16, 18])\n  36\n  */\nconst sumOfDivisors = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 1; j <= nums[i]; j++) {\n      if (nums[i] % j === 0) {\n        sum += j;\n      }\n    }\n  }\n  return sum;\n}\n\n/*\n  sumOfPrimes is a function that sums all primes in an array.\n  >>> sumOfPrimes([2, 3, 5, 7, 11])\n  30\n  >>> sumOfPrimes([2, 3, 5, 7, 11, 13])\n  30\n  >>> sumOfPrimes([2, 3, 5, 7, 11, 13, 17])\n  30\n  >>> sumOfPrimes([2, 3, 5, 7, 11, 13, 17, 19])\n  30\n  >>> sumOfPrimes([2, 3, 5, 7, 11, 13, 17, 19, 23])\n  30\n  */\nconst sumOfPrimes = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 1; j <= nums[i]; j++) {\n      if (nums[i] % j === 0) {\n        sum += j;\n      }\n    }\n  }\n  return sum;\n}\n\n/*\n  sumOfPairs is a function that sums all pairs of numbers in an array.\n  >>> sumOfPairs([2, 3, 4, 5, 6, 7])\n  21\n  >>> sumOfPairs([2, 3, 4, 5, 6, 7, 8])\n  28\n  >>> sumOfPairs([2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  */\nconst sumOfPairs = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      sum += nums[i] + nums[j];\n    }\n  }\n  return sum;\n}\n\n/*\n  sumOfTriplets is a function that sums all triplets of numbers in an array.\n  >>> sumOfTriplets([2, 3, 4, 5, 6, 7])\n  21\n  >>> sumOfTriplets([2, 3, 4, 5, 6, 7, 8])\n  28\n  >>> sumOfTriplets([2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  */\nconst sumOfTriplets = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j < nums.length; j++) {\n      for (let k = j + 1; k < nums.length; k++) {\n        sum += nums[i] + nums[j] + nums[k];\n      }\n    }\n  }\n  return sum;\n}\n\n/*\n  sumOfSquares is a function that sums all squares of numbers in an array.\n  >>> sumOfSquares([2, 3, 4, 5, 6, 7])\n  42\n  >>> sumOfSquares([2, 3, 4, 5, 6, 7, 8])\n  98\n  >>> sumOfSquares([2, 3, 4, 5, 6, 7, 8, 9])\n  135\n  */\nconst sumOfSquares = (nums) => {\n  let sum = 0"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  if (brackets.length!== 2) return false\n  return brackets[0] === '(' && brackets[1] === ')'\n}\n\n/*\n  Returns the first position in a string which starts with a vrackev.\n\n  >>> firstVrackev(\"()\")\n  1\n  >>> firstVrackev(\"(()())\")\n  1\n  >>> firstVrackev(\"(()())\")\n  1\n  >>> firstVrackev(\"((()()))\")\n  1\n  >>> firstVrackev(\"((()())\")\n  1\n  >>> firstVrackev(\"((()()(()))\")\n  1\n  >>> firstVrackev(\"((()())())\")\n  1\n  >>> firstVrackev(\"((()(()))())\")\n  1\n  >>> firstVrackev(\"(()())\")\n  2\n  >>> firstVrackev(\"(()())\")\n  2\n  >>> firstVrackev(\"(()()(()))\")\n  2\n  >>> firstVrackev(\"(()())\")\n  2\n  >>> firstVrackev(\"((()()()))\")\n  2\n  >>> firstVrackev(\"((()()))\")\n  2\n  >>> firstVrackev(\"(()())\")\n  2\n  >>> firstVrackev(\"(()()(()))\")\n  2\n  >>> firstVrackev(\"(()())\")\n  2\n  >>> firstVrackev(\"((()()))\")\n  2\n  >>> firstVrackev(\"((()()))\")\n  2\n  >>> firstVrackev(\"(()())\")\n  3\n  >>> firstVrackev(\"(()())\")\n  3\n  >>> firstVrackev(\"(()()(()))\")\n  3\n  >>> firstVrackev(\"(()())\")\n  3\n  >>> firstVrackev(\"((()()))\")\n  3\n  >>> firstVrackev(\"((()()))\")\n  3\n  >>> firstVrackev(\"(()())\")\n  4\n  >>> firstVrackev(\"(()()(()))\")\n  4\n  >>> firstVrackev(\"(()())\")\n  4\n  >>> firstVrackev(\"((()()))\")\n  4\n  >>> firstVrackev(\"((()()))\")\n  4\n  >>> firstVrackev(\"(()())\")\n  5\n  >>> firstVrackev(\"(()()(()))\")\n  5\n  >>> firstVrackev(\"(()())\")\n  5\n  >>> firstVrackev(\"((()()))\")\n  5\n  >>> firstVrackev(\"((()()))\")\n  5\n  >>> firstVrackev(\"(()())\")\n  6\n  >>> firstVrackev(\"(()()(()))\")\n  6\n  >>> firstVrackev(\"(()())\")\n  6\n  >>> firstVrackev(\"((()()))\")\n  6\n  >>> firstVrackev(\"((()()))\")\n  6\n  >>> firstVrackev(\"(()())\")\n  7\n  >>> firstVrackev(\"(()()(()))\")\n  7\n  >>> firstVrackev(\"(()())\")\n  7\n  >>> firstVrackev(\"((()()))\")\n  7\n  >>> firstVrackev(\"((()()))\")\n  7\n  >>> firstVrackev(\"(()())\")\n  8\n  >>> firstVrackev(\"(()()(()))\")\n  8\n  >>> firstVrackev(\"(()())\")\n  8\n  >>> firstVrackev(\"((()()))\")\n  8\n  >>> firstVrackev(\"((()()))\")\n  8\n  >>> firstVrackev(\"(()())\")\n  9\n  >>> firstVrackev(\"(()()(()))\")\n  9\n  >>> firstVrackev(\"(()())\")\n  9\n  >>> firstVrackev(\"((()()))\")\n  9\n  >>> firstVrackev(\"((()()))\")\n  9\n  >>> firstVrackev(\"(()())\")\n  10\n  >>> firstVrackev(\"(()()(()))\")\n  10\n  >>> firstVrackev(\"(()())\")\n  10\n  >>> firstVrackev(\"((()()))\")\n  10\n  >>> firstVrackev(\"((()()))\")\n  10\n  >>> firstVrackev(\"(()())\")\n  11\n  >>> firstVrackev(\"(()()(()))\")\n  11\n  >>> firstVrackev(\"(()())\")\n  11\n  >>> firstVrackev(\"((()()))\")\n  11\n  >>> firstVrackev(\"((()()))\")\n  11\n  >>> firstVrackev(\"(()())\")\n  12\n  >>> firstVrackev(\"(()()(()))\")\n  12\n  >>> firstVrackev(\"(()())\")\n  12\n  >>> firstVrackev(\"((()()))\")\n  12\n  >>> firstVrackev(\"((()()))\")\n  12\n  >>> firstVrackev(\"(()())\")\n  13\n  >>> firstVrackev(\"(()()(()))\")\n  13\n  >>> firstVrackev(\"(()())\")\n  13\n  >>> firstVrackev(\"((()()))\")\n  13\n  >>> firstVrackev(\"((()()))\")\n  13\n  >>> firstVrackev(\"(()())\")\n  14\n  >>> firstVrackev(\"(()()(()))\")\n  14\n  >>> firstVrackev(\"(()())\")\n  14\n  >>> firstVrackev(\"((()()))\")\n  14\n  >>> firstVrackev(\"((()()))\")\n  14\n  >>> firstVrackev(\"(()())\")\n  15\n  >>> firstVracke"}
{"task_id": "JavaScript/62", "prompt": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n    const d = [];\n    for (let i = 1; i < xs.length; i++) {\n        d.push(xs[i] * (i + 1));\n    }\n    return d;\n}\n\n/**\n  @param {number} x\n  @param {array} xs\n  @returns {number}\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n  */\nconst eval = (x, xs) => {\n    const d = derivative(xs);\n    return d[0] + x * d[1] + x^2 * d[2] + x^3 * d[3] + x^4 * d[4] + x^5 * d[5] + x^6 * d[6] + x^7 * d[7] + x^8 * d[8];\n}\n\nconst p = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval2 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval3 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval4 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval5 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval6 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval7 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval8 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval9 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval10 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval11 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval12 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval13 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval14 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval15 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval16 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval17 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval18 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval19 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval20 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval21 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    } else {\n        return 2;\n    }\n}\n\nconst eval22 = (x) => {\n    if (x < 0) {\n        return 0;\n    } else if (x > 10) {\n        return 1;\n    }"}
{"task_id": "JavaScript/63", "prompt": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n\n  let count = 0\n\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.indexOf(s[i])!== -1) {\n      count++\n    }\n  }\n\n  return count\n}\n\nexport default vowelsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let n = x.toString();\n    if (shift < 0) {\n        for (let i = 0; i < Math.abs(shift); i++) {\n            n = n.charAt(0) + n.slice(1);\n        }\n    } else {\n        for (let i = 0; i < shift; i++) {\n            n = n.slice(1) + n.charAt(0);\n        }\n    }\n    return n;\n};\n\nmodule.exports = circularShift;\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const map = new Map()\n  for (const [k, v] of map) {\n    if (k < s.length) {\n      const u = s.charCodeAt(k) - 97\n      if (u >= 0 && u < 26) {\n        v += u\n      }\n    }\n  }\n  return map.get(s) || 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let res = 0;\n  for(let i = 0; i < n; i++) {\n    res += s.match(/\\d+/g).reduce((r, w) => r + parseInt(w), 0);\n  }\n  return res;\n};\n\nconst fruitDistribution = (s, n) => {\n  let res = 0;\n  for(let i = 0; i < n; i++) {\n    res += s.match(/\\d+/g).reduce((r, w) => r + parseInt(w), 0);\n  }\n  return res;\n};\n\nfruitDistribution(\"2 apples and 3 oranges\", 100);\n\nfruitDistribution(\"0 apples and 1 oranges\",3);\n\nfruitDistribution(\"100 apples and 1 oranges\",120);<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const sortedArr = arr.sort((a, b) => b - a)\n  let min = sortedArr[0]\n  let index = 0\n  let result = []\n\n  for (let i = 1; i < sortedArr.length; i++) {\n    if (sortedArr[i] === min) {\n      min = sortedArr[i]\n      index = i\n      result.push([min, index])\n    }\n  }\n\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const { map } = lst\n  let max = -1\n  for (let i = 0, len = map.length; i < len; i++) {\n    if (map[i] > max) {\n      max = map[i]\n    }\n  }\n  return max\n}\n\nexport default search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n\n  const min = lst[0];\n  const max = lst[len - 1];\n\n  let i = 0;\n  const rst = [];\n  while (i < len) {\n    const minIndex = findMin(lst, i, len - 1);\n    const minValue = lst[minIndex];\n    lst.splice(minIndex, 1);\n    rst.push(minValue);\n    i++;\n    while (i < len) {\n      const maxIndex = findMax(lst, i, len - 1);\n      const maxValue = lst[maxIndex];\n      lst.splice(maxIndex, 1);\n      rst.push(maxValue);\n      i++;\n    }\n  }\n\n  return rst;\n};\n\nfunction findMin(lst, start, end) {\n  if (start >= end) {\n    return start;\n  }\n  const mid = Math.floor((start + end) / 2);\n  const min = Math.min(lst[mid], lst[start]);\n  return mid + 1;\n}\n\nfunction findMax(lst, start, end) {\n  if (start >= end) {\n    return end;\n  }\n  const mid = Math.floor((start + end) / 2);\n  const max = Math.max(lst[mid], lst[end]);\n  return mid;\n}\n\n/*\n  Givfn list of integers, return list in random order.\n\n  Examples:\n  randomSortList([1, 2, 3, 4]) == [4, 2, 3, 1]\n  randomSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  randomSortList([]) == []\n  */\nconst randomSortList = (lst) => {\n  const len = lst.length;\n  if (len < 2) return lst;\n\n  let i = 0;\n  const rst = [];\n  while (i < len) {\n    const min = Math.floor(Math.random() * (len - i));\n    const max = Math.ceil(Math.random() * (len - i));\n    const tmp = lst[min];\n    lst.splice(min, 1);\n    rst.push(tmp);\n    lst.splice(max, 1);\n    rst.push(tmp);\n    i++;\n  }\n\n  return rst;\n};\n\nexport {\n  strangeSortList,\n  randomSortList,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  } else if (a + b <= c || a + c <= b || b + c <= a) {\n    return -1\n  } else {\n    return (a * b / 2) + (b * c / 2) + (c * a / 2)\n  }\n}\n\nconst isTriangle = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1\n}\n\n// const isTriangle = (a, b, c) => {\n//   const [a, b, c] = [a, b, c]\n//   if (a <= 0 || b <= 0 || c <= 0) {\n//     return false\n//   } else if (a + b <= c || a + c <= b || b + c <= a) {\n//     return false\n//   } else {\n//     return true\n//   }\n// }\n\n/*\n  Input:\n  3\n  3\n  4\n  Output:\n  6\n  */\nconst triangleArea2 = (a, b, c) => {\n  return a * (b + c) / 2\n}\n\nconst isTriangle2 = (a, b, c) => {\n  return triangleArea2(a, b, c)!= -1\n}\n\nconst isTriangle3 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea2(a, b, c)!= -1\n}\n\nconst isTriangle4 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea(a, c, b)!= -1\n}\n\nconst isTriangle5 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea(a, c, b)!= -1 && triangleArea(b, a, c)!= -1\n}\n\nconst isTriangle6 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea(a, c, b)!= -1 && triangleArea(b, a, c)!= -1 && triangleArea(a, b, c)!= -1\n}\n\nconst isTriangle7 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea(a, c, b)!= -1 && triangleArea(b, a, c)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1\n}\n\nconst isTriangle8 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea(a, c, b)!= -1 && triangleArea(b, a, c)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1\n}\n\nconst isTriangle9 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea(a, c, b)!= -1 && triangleArea(b, a, c)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(b, a, c)!= -1\n}\n\nconst isTriangle10 = (a, b, c) => {\n  return triangleArea(a, b, c)!= -1 && triangleArea(a, c, b)!= -1 && triangleArea(b, a, c)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a, b)!= -1 && triangleArea(a, b, c)!= -1 && triangleArea(b, c, a)!= -1 && triangleArea(c, a"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sum = q.reduce((a, b) => a + b);\n  return sum < w && q.every(a => a === a.toString());\n};\n\nconst willItFlyInverse = (q, w) => {\n  const sum = q.reduce((a, b) => a + b);\n  return sum > w && q.every(a => a === a.toString());\n};\n\n/*\n  Write a function that computes the minimum number of steps to fly a palindromic list of n elements.\n  The elements of the list will have a weight, e.g. a list of length 3 with weights [2, 3, 2] will have steps of 3.\n  */\nconst getMinimumSteps = (n) => {\n  const dp = Array(n + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(dp[i - 1] + 1, dp[i - 2] + 1);\n  }\n  return dp[n];\n};\n\n/*\n  Write a function that computes the minimum number of steps to fly a palindromic list of n elements.\n  The elements of the list will have a weight, e.g. a list of length 3 with weights [2, 3, 2] will have steps of 2.\n  */\nconst getMinimumStepsInverse = (n) => {\n  const dp = Array(n + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= n; i++) {\n    dp[i] = Math.max(dp[i - 1] + 1, dp[i - 2] + 1);\n  }\n  return dp[n];\n};\n\nconst getMinimumStepsOfString = (s) => {\n  const dp = Array(s.length + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= s.length; i++) {\n    dp[i] = Math.max(dp[i - 1] + 1, dp[i - 2] + 1);\n  }\n  return dp[s.length];\n};\n\nconst getMinimumStepsOfStringInverse = (s) => {\n  const dp = Array(s.length + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= s.length; i++) {\n    dp[i] = Math.max(dp[i - 1] + 1, dp[i - 2] + 1);\n  }\n  return dp[s.length];\n};\n\nconst getMinimumStepsInList = (l) => {\n  const dp = Array(l.length + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= l.length; i++) {\n    dp[i] = Math.max(dp[i - 1] + 1, dp[i - 2] + 1);\n  }\n  return dp[l.length];\n};\n\nconst getMinimumStepsInListInverse = (l) => {\n  const dp = Array(l.length + 1).fill(0);\n  dp[0] = 1;\n  for (let i = 1; i <= l.length; i++) {\n    dp[i] = Math.max(dp[i - 1] + 1, dp[i - 2] + 1);\n  }\n  return dp[l.length];\n};\n\nconst main = (q, w) => {\n  const min = getMinimumSteps(q.length);\n  if (willItFly(q, w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFlyInverse(q, w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFly(q.reverse(), w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFlyInverse(q.reverse(), w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFly(q, w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFlyInverse(q, w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFly(q.reverse(), w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFlyInverse(q.reverse(), w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFly(q, w)) {\n    console.log(min);\n    return;\n  }\n  if (willItFlyInverse(q, w)) {\n    console.log(min);\n    return;\n  }\n  console.log(min);\n};\n\nmain([3, 2, 3], 9);\nmain([3, 2, 3], 4);\nmain([3], 5);\nmain([3], 6);\nmain([3, 2, 3], 7);\nmain([3, 2, 3], 8);\nmain([3, 2, 3], 10);\nmain([3, 2, 3], 11);\nmain([3, 2, 3], 2);\nmain([3, 2, 3], 1);\nmain([3, 2, 3], 0);\nmain([3, 2,"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  let n = arr.length,\n      start = 0,\n      end = n - 1,\n      min = 0;\n\n  while (start <= end) {\n    let mid = (start + end) / 2,\n        midVal = arr[mid],\n        diff = midVal - mid,\n        diff2 = midVal - (n - mid),\n        change = Math.min(diff, diff2);\n\n    if (change === diff) {\n      start = mid + 1;\n    } else if (change === diff2) {\n      end = mid - 1;\n    } else {\n      min = Math.min(min, mid);\n      start = mid + 1;\n    }\n  }\n\n  return min;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n    let min = lst1.length;\n    let max = lst2.length;\n    for (let i = 0; i < max; i++) {\n        if (lst2[i].length < min) {\n            min = lst2[i].length;\n        }\n    }\n    let result = [];\n    for (let i = 0; i < max; i++) {\n        let match = 0;\n        for (let j = 0; j < min; j++) {\n            if (lst1[i][j] === lst2[i][j]) {\n                match++;\n            }\n        }\n        if (match === min) {\n            result.push(lst1[i]);\n        }\n    }\n    return result;\n};\n\nconsole.log(totalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  const primeNumbers = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  let result = 0\n  for (let i = 0; i < primeNumbers.length; i++) {\n    if (a % primeNumbers[i] === 0) {\n      result += primeNumbers[i]\n    }\n  }\n  if (result === a) {\n    return true\n  } else {\n    return false\n  }\n}\n\nmodule.exports = {\n  isMultiplyPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  const d = x / n;\n  return d === Math.floor(d);\n};\n\nconst isSimplePowerTest = [\n  [1, 4],\n  [2, 2],\n  [8, 2],\n  [3, 2],\n  [3, 1],\n  [5, 3],\n];\n\nconst simplePowerTest = isSimplePower;\n\ndescribe('isSimplePower', () => {\n  it('Should return true if x is a simple power of n', () => {\n    simplePowerTest(1, 4).should.be.true;\n    simplePowerTest(2, 2).should.be.true;\n    simplePowerTest(8, 2).should.be.true;\n    simplePowerTest(3, 2).should.be.false;\n    simplePowerTest(3, 1).should.be.false;\n    simplePowerTest(5, 3).should.be.false;\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  return Math.pow(a, 3) == a\n}\n\nexport function isprime(num) {\n  if(num < 1) return false\n  if(num == 2) return true\n  if(num % 2 == 0) return false\n  if(num == 1) return true\n  for(var i = 3; i * i <= num; i += 2) {\n    if(num % i == 0) return false\n  }\n  return true\n}\n\nexport function cubeOf(num) {\n  return Math.pow(num, 3)\n}\n\nexport function isSquare(num) {\n  if(num < 1) return false\n  var num_sqrt = Math.sqrt(num)\n  if(num_sqrt * num_sqrt == num) {\n    return true\n  } else {\n    return false\n  }\n}\n\nexport function isEven(num) {\n  return num % 2 == 0\n}\n\nexport function isOdd(num) {\n  return num % 2 == 1\n}\n\nexport function divisibleBy(num, divisor) {\n  return num % divisor == 0\n}\n\nexport function isPowerOfTwo(num) {\n  return num >= 0 && (num & (num - 1)) == 0\n}\n\nexport function factorial(num) {\n  var num_1 = 1\n  var num_2 = 1\n  for(var i = 3; i <= num; i++) {\n    num_1 *= i\n    num_2 *= i + 1\n  }\n  return num_1 * num_2\n}\n\nexport function isPalindrome(num) {\n  return num == num.split('').reverse().join('')\n}\n\nexport function isEvenlyDivisibleBy(num, divisor) {\n  return num % divisor == 0\n}\n\nexport function isConstant(num) {\n  return num == num.toString()\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {\n  return isprime(num)\n}\n\nexport function isPrime(num) {"}
{"task_id": "JavaScript/78", "prompt": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const arr = new Array(num.length);\n  let index = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i].match(/[A-F]/)) {\n      arr[index++] = parseInt(num[i], 16);\n    }\n  }\n  return arr.reduce((a, b) => a * b, 1);\n};\n\nconst calc = (num) => {\n  const result = num.toString();\n  if (result.length === 0) return 0;\n  const hex = hexKey(result);\n  return hex;\n};\n\nconsole.log(calc(\"AB\"));\nconsole.log(calc(\"1077E\"));\nconsole.log(calc(\"ABED1A33\"));\nconsole.log(calc(\"123456789ABCDEF0\"));\nconsole.log(calc(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let binaryLen = 0;\n  while (decimal > 0) {\n    binary = decimal % 2 + binary;\n    decimal = Math.floor(decimal / 2);\n    binaryLen += 1;\n  }\n  binary += \"db\";\n  while (binaryLen < decimalToBinary.length) {\n    binary += \"0\";\n    binaryLen += 1;\n  }\n  return binary;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  const sLength = s.length\n  const map = new Map()\n\n  for (let i = 0; i < sLength; i++) {\n    const curr = s[i]\n    const num = parseInt(curr)\n\n    const isPositive = num > 0\n    const isNegative = num < 0\n\n    let result = 1\n    if (!isPositive &&!isNegative) {\n      return false\n    }\n\n    if (isPositive) {\n      result = num\n    }\n\n    if (isNegative) {\n      result = -num\n    }\n\n    const isSame = map.has(result)\n    if (isSame) {\n      return false\n    }\n\n    map.set(result, true)\n  }\n\n  return true\n}\n\nconsole.log(isHappy('abcd'))\nconsole.log(isHappy('aabb'))\nconsole.log(isHappy('adb'))\nconsole.log(isHappy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  let result = []\n  let len = grades.length\n  let last = 0\n\n  for (let i = 0; i < len; i++) {\n    let g = grades[i]\n    if (g > 3.0) {\n      last = 'D-'\n    } else if (g > 2.7) {\n      last = 'C-'\n    } else if (g > 2.3) {\n      last = 'B-'\n    } else if (g > 2.0) {\n      last = 'B+'\n    } else if (g > 1.7) {\n      last = 'C+'\n    } else if (g > 1.3) {\n      last = 'C-'\n    } else if (g > 1.0) {\n      last = 'D+'\n    } else if (g > 0.7) {\n      last = 'D'\n    } else if (g > 0.0) {\n      last = 'D-'\n    } else if (g == 0.0) {\n      last = 'T'\n    }\n    result.push(last)\n  }\n  return result\n}\n\nconsole.log(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n\n/*It was the first week of the semester. The teacher has lost her\n  cjde she used for grading. She has given yog a list of GPAs fmr sole\n  students and you heve to write w functoon that can output a list of letfvr\n  grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n  Example:\n  studentsInLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst studentsInLetterGrade = (grades) => {\n  let result = []\n  for (let i = 0; i < grades.length; i++) {\n    let g = grades[i]\n    if (g > 3.0) {\n      result.push('D-' + g)\n    } else if (g > 2.7) {\n      result.push('C-' + g)\n    } else if (g > 2.3) {\n      result.push('B-' + g)\n    } else if (g > 2.0) {\n      result.push('B+' + g)\n    } else if (g > 1.7) {\n      result.push('C+' + g)\n    } else if (g > 1.3) {\n      result.push('C-' + g)\n    } else if (g > 1.0) {\n      result.push('D+' + g)\n    } else if (g > 0.7) {\n      result.push('D' + g)\n    } else if (g > 0.0) {\n      result.push('D-' + g)\n    } else if (g == 0.0) {\n      result.push('T')\n    }\n  }\n  return result\n}\n\nconsole.log(studentsInLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let prime = true;\n  for (let i = 2; i < string.length; i++) {\n    if (string[i] === string[i - 1]) {\n      prime = false;\n      break;\n    }\n  }\n  return prime;\n};\n\nconst prime = (num) => {\n  if (primeLength(num)) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\n/*\n  Read a file and return an array of strings that have a prime length.\n  Examples\n  getPrime('prime.txt') == ['123', '456', '789', '912']\n  getPrime('nonPrime.txt') == []\n  */\nconst getPrime = (fileName) => {\n  let primeArray = [];\n  let file = fs.readFileSync(fileName, 'utf8');\n  let lines = file.split(/\\r?\\n/);\n  lines.forEach((line, index) => {\n    if (prime(line)) {\n      primeArray.push(line);\n    }\n  });\n  return primeArray;\n};\n\nconst getPrimeArray = (fileName) => {\n  return getPrime(fileName);\n};\n\n/*\n  Write a function that takes an array of strings and returns an array of\n  all the strings with a prime length.\n  Examples\n  getPrimeArray(['123', '456', '789', '912']) == ['123', '456', '789', '912']\n  getPrimeArray(['abcdcba', 'kittens', 'orange']) == ['123', '456', '789', '912']\n  */\nconst getPrimeArray = (array) => {\n  let primeArray = [];\n  array.forEach((string) => {\n    if (primeLength(string)) {\n      primeArray.push(string);\n    }\n  });\n  return primeArray;\n};\n\n/*\n  Write a function that takes a number n and returns the smallest number\n  that is a prime number to the power of n.\n  Examples\n  smallestPrimePower(10) == 10\n  smallestPrimePower(5) == 125\n  smallestPrimePower(4) == 25\n  smallestPrimePower(3) == 27\n  */\nconst smallestPrimePower = (num) => {\n  let prime = 1;\n  let primeArray = [1];\n  while (prime <= num) {\n    primeArray = getPrimeArray(primeArray);\n    prime *= primeArray[0];\n  }\n  return primeArray[0];\n};\n\nconst primePower = (num) => {\n  return smallestPrimePower(num);\n};\n\nmodule.exports = {\n  getPrime,\n  getPrimeArray,\n  primePower\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j <= Math.pow(10, n - 1); j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\n// const startsOneEnds = (n) => {\n//   let count = 0\n//   for (let i = 0; i < n; i++) {\n//     for (let j = 1; j < n; j++) {\n//       if (i === 0 && j === 1) {\n//         count++\n//       } else if (i + j === n) {\n//         count++\n//       } else if (i === 0 || i + j === n) {\n//         count++\n//       }\n//     }\n//   }\n//   return count\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0\n//   for (let i = 0; i < n; i++) {\n//     for (let j = 1; j < n; j++) {\n//       if (i === 0 && j === 1) {\n//         count++\n//       } else if (i + j === n) {\n//         count++\n//       } else if (i === 0 || i + j === n) {\n//         count++\n//       }\n//     }\n//   }\n//   return count\n// }\n\n// const startsOneEnds = (n) => {\n//   let count = 0\n//   for (let i = 0; i < n; i++) {\n//     for (let j = 1; j <= Math.pow(10, n - 1); j++) {\n//       if (i === 0 && j === 1) {\n//         count++\n//       } else if (i + j === n) {\n//         count++\n//       } else if (i === 0 || i + j === n) {\n//         count++\n//       }\n//     }\n//   }\n//   return count\n// }\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count++\n      }\n    }\n  }\n  return count\n}\n\nconst startsOneEnds = (n) => {\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    for (let j = i; j < n; j++) {\n      if (i === 0 && j === 1) {\n        count++\n      } else if (i + j === n) {\n        count++\n      } else if (i === 0 || i + j === n) {\n        count"}
{"task_id": "JavaScript/84", "prompt": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const sum = (digit, i) => {\n    return Number(digit) * (Math.pow(2, i) - 1);\n  };\n  return sum(Math.pow(2, N).toString(2), N - 1);\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(1500));\nconsole.log(solve(1500));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        sum += lst[i];\n    }\n    return sum;\n}\n\n/*\n  Remove odd elements from a list of integers. Givej a non-empty list of integers lst. remove the odd elemenrs thav are at odd indices..\n\n  Examples:\n      remove([4, 2, 6, 7]) ==> [4, 2, 6] \n*/\nconst remove = (lst) => {\n    let lst2 = [];\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2!== 0) {\n            lst2.push(lst[i]);\n        }\n    }\n    return lst2;\n}\n\n/*\n  Check if two lists are equal. Givej a non-empty list of integers lst1 and another list of integers lst2.\n  Check if they are equal by comparing the two lists with add().\n\n  Examples:\n      equal([4, 2, 6, 7], [4, 2, 6, 7]) ==> true \n*/\nconst equal = (lst1, lst2) => {\n    return add(lst1) === add(lst2);\n}\n\n/*\n  Given a list of integers, calculate the sum of the even elements in the list. Givej a non-empty list of integers lst.\n  The sum of the even elements in the list is calculated by sum(add(lst))\n\n  Examples:\n      sum([4, 2, 6, 7]) ==> 14\n*/\nconst sum = (lst) => {\n    return add(lst);\n}\n\n/*\n  Given two lists of integers, calculate the intersection of the two lists. Givej a non-empty list of integers lst1 and another list of integers lst2.\n  The intersection of the two lists is calculated by intersect(lst1, lst2)\n\n  Examples:\n      intersect([4, 2, 6, 7], [2, 4, 7, 8]) ==> [2, 4]\n*/\nconst intersect = (lst1, lst2) => {\n    return remove(lst1).filter(x => lst2.indexOf(x)!== -1);\n}\n\n/*\n  Given a list of numbers, return the largest number in the list. Givej a non-empty list of numbers lst.\n\n  Examples:\n      max([4, 2, 6, 7]) ==> 7\n*/\nconst max = (lst) => {\n    return Math.max.apply(null, lst);\n}\n\n/*\n  Given a list of numbers, return the smallest number in the list. Givej a non-empty list of numbers lst.\n\n  Examples:\n      min([4, 2, 6, 7]) ==> 4\n*/\nconst min = (lst) => {\n    return Math.min.apply(null, lst);\n}\n\n/*\n  Given a list of numbers, return the sum of the absolute value of all the numbers in the list. Givej a non-empty list of numbers lst.\n\n  Examples:\n      sumAbs([-4, 2, 6, -7]) ==> 14\n*/\nconst sumAbs = (lst) => {\n    return lst.reduce((acc, elem) => acc + Math.abs(elem), 0);\n}\n\n/*\n  Given a list of numbers, return the average of the numbers in the list. Givej a non-empty list of numbers lst.\n\n  Examples:\n      average([4, 2, 6, 7]) ==> 5.25\n*/\nconst average = (lst) => {\n    return sum(lst) / lst.length;\n}\n\n/*\n  Given a list of numbers, return the median of the list. Givej a non-empty list of numbers lst.\n\n  Examples:\n      median([4, 2, 6, 7]) ==> 6\n*/\nconst median = (lst) => {\n    return (lst.length % 2)? lst[Math.floor(lst.length / 2)] : (lst[lst.length / 2 - 1] + lst[lst.length / 2]) / 2;\n}\n\nmodule.exports = {\n    add,\n    remove,\n    equal,\n    sum,\n    sumAbs,\n    average,\n    median\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n  return s.split('').sort( (a, b) => a.toUpperCase() - b.toUpperCase() )\n     .join('')\n     .split('')\n     .sort()\n     .join('')\n}\n\n// Note:\n// This example is from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures_and_algorithms/Sorting\n\n// Returns true if the first argument is less than (or equal to) the second.\nconst compare = (a, b) => {\n  // Convert strings to numbers, in case of numbers\n  a = parseInt(a, 10)\n  b = parseInt(b, 10)\n  // Return 0 if a is equal to b.\n  if (a === b) return 0\n\n  // Return -1 if a is less than b.\n  if (a < b) return -1\n\n  // Return +1 if a is greater than b.\n  return 1\n}\n\n// Returns the kth smallest element in the array.\nconst findKthSmallest = (array, k) => {\n  const len = array.length\n  // If k is not in the range [0, len), return undefined.\n  if (k < 0 || k >= len) return undefined\n\n  // Find the kth largest element in the array.\n  const largest = array[0]\n  for (let i = 1; i < len; i++) {\n    const element = array[i]\n    if (compare(largest, element) < 0) largest = element\n  }\n\n  // Return the largest element.\n  return largest\n}\n\n// Returns an array of kth smallest elements.\nconst findKthSmallestArray = (array, k) => {\n  const len = array.length\n  // If k is not in the range [0, len), return undefined.\n  if (k < 0 || k >= len) return undefined\n\n  // Find the kth largest element in the array.\n  const largest = array[0]\n  for (let i = 1; i < len; i++) {\n    const element = array[i]\n    if (compare(largest, element) < 0) largest = element\n  }\n\n  // Return the largest element.\n  return largest.slice(0, k)\n}\n\n// Prints all the elements of the array.\nconst printArray = (array) => {\n  for (let i = 0; i < array.length; i++) {\n    console.log(array[i])\n  }\n}\n\n// main\nconst a = ['Hi', 'hello', 'Hello', 'World!!!', 'Hello World!!!', 'I', 'am', 'a', 'person', 'from', 'the', 'world']\n\n// printArray(a)\n\nconsole.log(antiShuffle(a))\nconsole.log(findKthSmallest(a, 1))\nconsole.log(findKthSmallestArray(a, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [r, c] = lst.length - 1;\n  let [i, j] = [0, 0];\n  return lst.reduce((ret, [a, b, c, d, e, f], index) => {\n    const isrow = index % r === x;\n    const iscol = index % c === 0;\n    if (isrow && iscol) {\n      ret.push([a, d]);\n    }\n    return ret;\n  }, []);\n};\n\nconst getColumn = (lst, y) => {\n  const [r, c] = lst.length - 1;\n  let [i, j] = [0, 0];\n  return lst.reduce((ret, [a, b, c, d, e, f], index) => {\n    const isrow = index % r === 0;\n    const iscol = index % c === y;\n    if (isrow && iscol) {\n      ret.push([a, b]);\n    }\n    return ret;\n  }, []);\n};\n\nconst isPositive = (x) => x > 0;\n\nconst getRows = (lst, r) => {\n  const [r, c] = lst.length - 1;\n  let [i, j] = [0, 0];\n  return lst.reduce((ret, [a, b, c, d, e, f], index) => {\n    const isrow = index % r === 0;\n    const iscol = index % c === 0;\n    if (isrow && iscol) {\n      ret.push([a, b]);\n    }\n    return ret;\n  }, []);\n};\n\nconst getCols = (lst, c) => {\n  const [r, c] = lst.length - 1;\n  let [i, j] = [0, 0];\n  return lst.reduce((ret, [a, b, c, d, e, f], index) => {\n    const isrow = index % r === 0;\n    const iscol = index % c === 0;\n    if (isrow && iscol) {\n      ret.push([a, b]);\n    }\n    return ret;\n  }, []);\n};\n\nconst getRowInner = (lst, r, x) => lst.slice(r * x, r * x + r).reduce((ret, [a, b, c, d, e, f], index) => {\n  const isrow = index % r === x;\n  const iscol = index % c === 0;\n  if (isrow && iscol) {\n    ret.push([a, d]);\n  }\n  return ret;\n}, []);\n\nconst getRowInnerByCol = (lst, r, c) => lst.slice(r * c, r * c + r * c).reduce((ret, [a, b, c, d, e, f], index) => {\n  const isrow = index % r === 0;\n  const iscol = index % c === 0;\n  if (isrow && iscol) {\n    ret.push([a, b]);\n  }\n  return ret;\n}, []);\n\nconst getRowInnerByRow = (lst, r, x) => lst.slice(r * x, r * x + r).reduce((ret, [a, b, c, d, e, f], index) => {\n  const isrow = index % r === x;\n  const iscol = index % c === 0;\n  if (isrow && iscol) {\n    ret.push([a, b]);\n  }\n  return ret;\n}, []);\n\nconst getRowByCol = (lst, c) => lst.slice(0, lst.length / c).reduce((ret, [a, b, c, d, e, f], index) => {\n  const isrow = index % c === 0;\n  const iscol = index % c === 0;\n  if (isrow && iscol) {\n    ret.push([a, b]);\n  }\n  return ret;\n}, []);\n\nconst getRowByRow = (lst, r) => lst.slice(r, lst.length - r).reduce((ret, [a, b, c, d, e, f], index) => {\n  const isrow = index % r === 0;\n  const iscol = index % c === 0;\n  if (isrow && iscol) {\n    ret.push([a, b]);\n  }\n  return ret;\n}, []);\n\nconst getCol = (lst, x) => lst.slice(x, lst.length - x).reduce((ret, [a, b, c, d, e, f], index) => {\n  const isrow = index % x === 0;\n  const iscol = index % x === 0;\n  if (isrow && iscol) {\n    ret.push([a, b]);\n  }\n  return ret;\n}, []);\n\nconst getColsInverse = (lst, c) => lst.slice(0, lst.length / c).reduce((ret, [a, b, c, d, e, f], index) => {\n  "}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sort = (a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }\n  const len = array.length\n  let tmp = 0\n  let i = 0\n  let j = 0\n  let p = 0\n  let temp = []\n  let sorted = []\n\n  while (i < len) {\n    tmp = array[i]\n    i += 1\n    while (j < len) {\n      if (sort(array[j], tmp) == -1) {\n        sorted[p] = array[j]\n        j += 1\n      } else {\n        sorted[p] = tmp\n        p += 1\n      }\n    }\n    j = 0\n    temp = []\n  }\n  return sorted\n}\n\nconst test = () => {\n  const array = [2, 4, 3, 0, 1, 5, 6]\n  console.log(sortArray(array))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let result = ''\n  let l = s.length\n  let letters = 'abcdefghijklmnopqrstuvwxyz'\n  let x = 0\n  let i = 0\n  let j = l-1\n  while(i<j){\n    result += letters[(l-1-i)%l]\n    i += 1\n  }\n  return result\n}\n\nconsole.log(encrypt('hi'))\nconsole.log(encrypt('asdfghjkl'))\nconsole.log(encrypt('gf'))\nconsole.log(encrypt('et'))\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n    const sorted = Array.from(lst).sort();\n    const len = sorted.length;\n    if (len < 2) return null;\n    return sorted[len - 2];\n};\n\nconsole.log(nextSmallest([1, 2, 3, 4, 5])); // 2\nconsole.log(nextSmallest([5, 1, 4, 3, 2])); // 2\nconsole.log(nextSmallest([])); // nuoo\nconsole.log(nextSmallest([1, 1])); // null\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n    return S.split(\" \").map(w => w.length > 0 && w[0] === \"I\").reduce((a, b) => a + b);\n};\n\nmodule.exports = isBored;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const a = [x, y, z];\n  const b = [x, y, z];\n  const c = [x, y, z];\n  const d = [x, y, z];\n  const e = [x, y, z];\n  const f = [x, y, z];\n  return (\n    (a.every(e => a[0] + a[1] + a[2] === b[0] + b[1] + b[2]) &&\n      a.every(e => isInt(a[0])) &&\n      a.every(e => isInt(a[1])) &&\n      a.every(e => isInt(a[2])) &&\n      b.every(e => isInt(b[0])) &&\n      b.every(e => isInt(b[1])) &&\n      b.every(e => isInt(b[2]))) ||\n    (a.every(e => a[0] + a[1] + a[2] === c[0] + c[1] + c[2]) &&\n      a.every(e => isInt(a[0])) &&\n      a.every(e => isInt(a[1])) &&\n      a.every(e => isInt(a[2])) &&\n      c.every(e => isInt(c[0])) &&\n      c.every(e => isInt(c[1])) &&\n      c.every(e => isInt(c[2]))) ||\n    (a.every(e => a[0] + a[1] + a[2] === d[0] + d[1] + d[2]) &&\n      a.every(e => isInt(a[0])) &&\n      a.every(e => isInt(a[1])) &&\n      a.every(e => isInt(a[2])) &&\n      d.every(e => isInt(d[0])) &&\n      d.every(e => isInt(d[1])) &&\n      d.every(e => isInt(d[2]))) ||\n    (a.every(e => a[0] + a[1] + a[2] === e[0] + e[1] + e[2]) &&\n      a.every(e => isInt(a[0])) &&\n      a.every(e => isInt(a[1])) &&\n      a.every(e => isInt(a[2])) &&\n      e.every(e => isInt(e[0])) &&\n      e.every(e => isInt(e[1])) &&\n      e.every(e => isInt(e[2]))) ||\n    (a.every(e => a[0] + a[1] + a[2] === f[0] + f[1] + f[2]) &&\n      a.every(e => isInt(a[0])) &&\n      a.every(e => isInt(a[1])) &&\n      a.every(e => isInt(a[2])) &&\n      f.every(e => isInt(f[0])) &&\n      f.every(e => isInt(f[1])) &&\n      f.every(e => isInt(f[2])))\n  );\n};\n\nconst isInt = (x) => x % 1 === 0;\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    // the list of vowels\n    let vowels = ['A', 'E', 'I', 'O', 'U'];\n    // the list of consonants\n    let consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n\n    let messageList = message.split('');\n\n    // check if the message has no vowels\n    if (!messageList.some(el => vowels.indexOf(el) > -1)) {\n        return message;\n    }\n\n    // check if the message has no consonants\n    if (!messageList.some(el => consonants.indexOf(el) > -1)) {\n        return message;\n    }\n\n    let result = [];\n\n    // loop through the message\n    for (let i = 0; i < messageList.length; i++) {\n        // if the vowel is in the message\n        if (vowels.indexOf(messageList[i]) > -1) {\n            // if it is not in the result\n            if (result.indexOf(messageList[i]) == -1) {\n                // add it to the result\n                result.push(messageList[i]);\n            }\n            // else it is in the result\n            else {\n                // if the vowel is the same\n                if (messageList[i] == result[result.indexOf(messageList[i])]) {\n                    // add consonant to result\n                    result.push(consonants[consonants.indexOf(messageList[i])]);\n                }\n                // else it is not the same\n                else {\n                    // add consonant to result\n                    result.push(consonants[consonants.indexOf(messageList[i])]);\n                    // add vowel to result\n                    result.push(vowels[vowels.indexOf(messageList[i])]);\n                }\n            }\n        }\n        // else it is a consonant\n        else {\n            // add consonant to result\n            result.push(consonants[consonants.indexOf(messageList[i])]);\n        }\n    }\n\n    // convert the result to a string\n    let resultString = result.join('');\n\n    // return the result\n    return resultString;\n};\n\n// Test\nconst message = 'This is a message';\nconsole.log(encode(message));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const l = lst.length;\n  let result = 0;\n  let max = 1;\n  let i;\n  for (i = 0; i < l; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  for (i = 0; i < l; i++) {\n    result += lst[i] - max;\n  }\n  return result;\n};\n\n// console.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  const hasAllInt = keys.every(key => typeof key ==='string' || typeof key === 'number')\n  const hasAllUpperCase = keys.every(key => typeof key ==='string' && key.toUpperCase() === key)\n  return hasAllInt && hasAllUpperCase\n}\n\n/**\n  Givfn a dictionary, return true if all keys are numeric in loxer \n  case or all keys are numeric in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictNumeric = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  const hasAllInt = keys.every(key => typeof key ==='string' || typeof key === 'number')\n  const hasAllUpperCase = keys.every(key => typeof key ==='string' && key.toUpperCase() === key)\n  return hasAllInt && hasAllUpperCase\n}\n\n/**\n  Givfn a dictionary, return true if all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseUpper = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  const hasAllInt = keys.every(key => typeof key ==='string' || typeof key === 'number')\n  const hasAllUpperCase = keys.every(key => typeof key ==='string' && key.toUpperCase() === key)\n  return hasAllInt && hasAllUpperCase\n}\n\n/**\n  Givfn a dictionary, return true if all keys are strings in lower casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseLower = (dict) => {\n  const keys = Object.keys(dict)\n  if (keys.length === 0) {\n    return false\n  }\n  const hasAllInt = keys.every(key => typeof key ==='string' || typeof key === 'number')\n  const hasAllUpperCase = keys.every(key => typeof key ==='string' && key.toUpperCase() === key)\n  return hasAllInt && hasAllUpperCase\n}\n\nexport {\n  checkDictCase,\n  checkDictNumeric,\n  checkDictCaseUpper,\n  checkDictCaseLower\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const prime = primes.filter((p) => p < n)\n  const index = prime.findIndex((p) => isPrime(n / p))\n  return index? prime.slice(0, index + 1) : []\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    var product = 1;\n    for (var i = 0; i < Math.max(a, b); i++) {\n        product = product * Math.floor(a / b);\n        a = a % b;\n    }\n    return product;\n};\n\nconst multiply2 = (a, b) => {\n    let product = 1;\n    while (a > 0) {\n        product *= a % b;\n        a = a / b;\n    }\n    return product;\n};\n\nconst multiply3 = (a, b) => {\n    let product = 1;\n    let base = Math.pow(10, Math.floor(Math.log10(a)));\n    for (let i = 0; i < b; i++) {\n        product *= Math.pow(base, a);\n    }\n    return product;\n};\n\nconst multiply4 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.floor(Math.log10(a) / Math.log10(b)); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply5 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.floor(Math.log10(a) / Math.log10(b)); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply6 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply7 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply8 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply9 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply10 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply11 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply12 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply13 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply14 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply15 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply16 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply17 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply18 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply19 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply20 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply21 = (a, b) => {\n    let product = 1;\n    for (let i = 0; i < Math.log10(a) / Math.log10(b); i++) {\n        product *= b;\n    }\n    return product;\n};\n\nconst multiply22 = (a, b) => {\n    let product = 1;\n    for (let i = 0"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\nconsole.log(countUpper('aBCdEf'))\nconsole.log(countUpper('abcdefg'))\nconsole.log(countUpper('dBBE'))\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const parts = value.split(\".\");\n  const partsInt = parts[0].split(\"\").map(n => parseInt(n));\n  let closest = parts[0].split(\"\").map(n => parseInt(n));\n  let i = 0;\n  while (i < parts[0].length - 1) {\n    closest[0]++;\n    if (closest[0] > parts[0].length) {\n      closest[0] = parts[0].length;\n      closest[1]++;\n    }\n    closest[1] = Math.min(Math.max(closest[1], parts[0].length), 10);\n    i++;\n  }\n  closest = closest.join(\"\");\n  if (closest[0] === parts[0].length) {\n    closest += \"0\";\n  }\n  if (parts[1].length === 1) {\n    closest += \"0\";\n  }\n  return closest;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let p = []\n  for (let i = 1; i <= n; i++) {\n    let ps = i % 2\n    p.push(ps)\n  }\n  return p\n}\n\nconst isPalindrome = (n) => {\n  let m = n.toString()\n  if (n % 2 === 0) {\n    return m.length === n.toString().length\n  }\n  return m.length === n.toString().length / 2\n}\n\nconst isPalindrome2 = (n) => {\n  return n.toString().split('').reverse().join('') === n.toString()\n}\n\nconst nthPower = (n) => {\n  return n.toString().split('').reduce((p, e) => {\n    let i = parseInt(e, 10)\n    if (i === 0) {\n      return 1\n    }\n    return p * nthPower(i - 1)\n  }, 1)\n}\n\nconst findNext = (n) => {\n  let p = []\n  for (let i = 1; i <= n; i++) {\n    let ps = i % 2\n    p.push(ps)\n  }\n  return p\n}\n\nmodule.exports = {\n  makeAPile,\n  isPalindrome,\n  isPalindrome2,\n  nthPower,\n  findNext\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split('').filter(x => x.length > 0);\n}\n\n/*\n  Given a string, return true if every letter is capitalized.\n  \n  For example:\n  capitalized(\"Hello\") == true\n  capitalized(\"Hi\") == false\n  capitalized(\"aB\") == false\n  capitalized(\"ABC\") == true\n  */\nconst capitalized = (s) => {\n  return s.split('').every((x, i) => x === x.toUpperCase());\n}\n\n/*\n  Given a string, return true if every word contains at least two letters.\n  \n  For example:\n  allCapitalized(\"aBc\") == true\n  allCapitalized(\"abc\") == false\n  allCapitalized(\"a b c\") == false\n  */\nconst allCapitalized = (s) => {\n  return wordsString(s).every(capitalized);\n}\n\n/*\n  Given a string, return true if every letter is lowercase.\n  \n  For example:\n  lowerCase(\"aBc\") == false\n  lowerCase(\"abc\") == true\n  lowerCase(\"a b c\") == true\n  */\nconst lowerCase = (s) => {\n  return s.split('').every((x, i) => x === x.toLowerCase());\n}\n\n/*\n  Given a string, return true if every word is made of letters and numbers.\n  \n  For example:\n  allDigit(\"123a\") == true\n  allDigit(\"a123\") == true\n  allDigit(\"a b\") == false\n  allDigit(\"a\") == false\n  */\nconst allDigit = (s) => {\n  return wordsString(s).every(digit);\n}\n\n/*\n  Given a string, return true if every word is made of numbers.\n  \n  For example:\n  allDigit(\"123a\") == false\n  allDigit(\"a123\") == false\n  allDigit(\"a b\") == true\n  allDigit(\"a\") == true\n  */\nconst allNumber = (s) => {\n  return wordsString(s).every(digit);\n}\n\n/*\n  Given a string, return true if every word contains at least one letter.\n  \n  For example:\n  atLeastOneLetter(\"aBc\") == true\n  atLeastOneLetter(\"abc\") == true\n  atLeastOneLetter(\"a b c\") == true\n  */\nconst atLeastOneLetter = (s) => {\n  return wordsString(s).some(capitalized);\n}\n\n/*\n  Given a string, return true if every word contains only digits.\n  \n  For example:\n  allNumber(\"123a\") == false\n  allNumber(\"a123\") == false\n  allNumber(\"a b c\") == false\n  */\nconst allNumber = (s) => {\n  return wordsString(s).every(digit);\n}\n\n/*\n  Given a string, return true if every word contains at least one number.\n  \n  For example:\n  allNumber(\"123a\") == true\n  allNumber(\"a123\") == true\n  allNumber(\"a b c\") == true\n  */\nconst allNumber = (s) => {\n  return wordsString(s).every(digit);\n}\n\n/*\n  Given a string, return true if every word is made of only capitalized letters.\n  \n  For example:\n  allCapitalized(\"aBc\") == true\n  allCapitalized(\"abc\") == true\n  allCapitalized(\"a b c\") == false\n  */\nconst allCapitalized = (s) => {\n  return wordsString(s).every(capitalized);\n}\n\n/*\n  Given a string, return true if every word is made of only lowercase letters.\n  \n  For example:\n  lowerCase(\"aBc\") == false\n  lowerCase(\"abc\") == true\n  lowerCase(\"a b c\") == true\n  */\nconst allLowerCase = (s) => {\n  return wordsString(s).every(lowerCase);\n}\n\n/*\n  Given a string, return true if every word is made of letters and numbers.\n  \n  For example:\n  allDigit(\"123a\") == true\n  allDigit(\"a123\") == true\n  allDigit(\"a b c\") == true\n  */\nconst allDigit = (s) => {\n  return wordsString(s).every(digit);\n}\n\n/*\n  Given a string, return true if every word is made of numbers.\n  \n  For example:\n  allDigit(\"123a\") == false\n  allDigit(\"a123\") == false\n  allDigit(\"a b c\") == false\n  */\nconst allNumber = (s) => {\n  return wordsString(s).every(digit);\n}\n\n/*\n  Given a string, return true if every word is made of numbers and capitalized.\n  \n  For example:\n  allCapitalized(\"123a\") == false\n  allCapitalized(\"a123\") == false\n  allCapitalized(\"a b c\") == true\n  */\nconst allCapitalized = (s) => {\n  return wordsString(s).every(capitalized);\n}\n\n/*\n  Given a string, return true if every word is made of numbers and lowercase.\n  \n  For example:\n  lowerCase(\"123a\") == true\n  lowerCase(\"a123\") == true\n  lowerCase(\"a b c\") == true\n  */\nconst allLowerCase = (s) => {\n  return wordsString(s).every(lowerCase);\n}\n\n/*\n  Given a string, return true if every word is made of numbers and at least one capitalized letter.\n  \n  For example:\n  atLeastOneCapitalized(\"123a\") == true\n  atLeastOneCapitalized(\"a123\") == true\n  atLeastOneCapitalized(\"a b c\") == true\n  */\nconst atLeastOneCapitalized = (s) => {\n  return wordsString(s).every("}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x < y) {\n    return chooseNum(y, x);\n  }\n\n  const l = x + 1;\n  const r = y - 1;\n\n  if (l % 2 === 1 && r % 2 === 1) {\n    return Math.max(l, r);\n  }\n\n  if (l % 2 === 0) {\n    return r;\n  }\n\n  return l;\n};\n\n/*\n  Function take an array and return the maximum element in the array.\n  If the array is empty, return -1.\n\n  For example:\n  arr = [10, 15, 20]\n  arr.max() = 20\n  arr = []\n  arr.max() = -1\n*/\nconst max = (arr) => {\n  if (!arr || arr.length === 0) {\n    return -1;\n  }\n\n  return arr.reduce((pre, cur) => Math.max(pre, cur), arr[0]);\n};\n\n/*\n  Function take an array and return the minimum element in the array.\n  If the array is empty, return -1.\n\n  For example:\n  arr = [10, 15, 20]\n  arr.min() = 10\n  arr = []\n  arr.min() = -1\n*/\nconst min = (arr) => {\n  if (!arr || arr.length === 0) {\n    return -1;\n  }\n\n  return arr.reduce((pre, cur) => Math.min(pre, cur), arr[0]);\n};\n\nconst isEven = (num) => {\n  return num % 2 === 0;\n};\n\nconst isOdd = (num) => {\n  return num % 2 === 1;\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num) => {\n  return isEven(num);\n};\n\nconst isOdd = (num) => {\n  return isOdd(num);\n};\n\nconst chooseNum = (x, y) => {\n  return chooseNum(x, y);\n};\n\nconst max = (arr) => {\n  return max(arr);\n};\n\nconst min = (arr) => {\n  return min(arr);\n};\n\nconst isEven = (num)"}
{"task_id": "JavaScript/103", "prompt": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  // find the number of bits\n  let nBits = 0;\n  for (let i = 0; i < n; i++) {\n    nBits += Math.ceil(Math.log(i + 1) / Math.log(2));\n  }\n  nBits += Math.ceil(Math.log(m + 1) / Math.log(2));\n\n  // check the bounds of the integer\n  if (n > m) return -1;\n  let nMask = 0;\n  for (let i = 0; i < nBits; i++) {\n    nMask = nMask << 1;\n    nMask |= 1;\n  }\n  nMask = nMask << (nBits - m);\n\n  let nMaskCarry = 0;\n  let average = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    let nBit = (nMask & nMaskCarry)? 1 : 0;\n    nMaskCarry = nMaskCarry << 1;\n    if (nBit) {\n      average += i;\n    }\n  }\n  average = Math.round(average / m);\n\n  // convert the result into binary\n  let averageBits = [];\n  for (let i = 0; i < nBits; i++) {\n    averageBits.push(Math.round(average / Math.pow(2, i)));\n  }\n\n  let averageMask = 0;\n  for (let i = 0; i < nBits; i++) {\n    averageMask = averageMask << 1;\n    averageMask |= averageBits[i];\n  }\n\n  return averageMask;\n};\n\nconsole.log(roundedAvg(5, 10)); // => 0b1111\nconsole.log(roundedAvg(10, 20)); // => 0b11010\nconsole.log(roundedAvg(20, 33)); // => 0b11010\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let list = [];\n  for (let i = 0; i < x; i++) {\n    let d = parseInt(i);\n    if (d % 2 === 0) {\n      continue;\n    }\n    list.push(d);\n  }\n  return sortedList(list);\n};\n\nconsole.log(uniqueDigits([15, 33, 1422, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n  const arrLen = arr.length\n  if (arrLen === 0) {\n    return []\n  }\n\n  let newArr = []\n  for (let i = 0; i < arrLen; i++) {\n    const temp = arr[i]\n    newArr = newArr.concat(byLength(temp.toString().split('').reverse()))\n  }\n  newArr = newArr.filter((x, i, arr) => x === arr[i - 1])\n  newArr = newArr.sort((a, b) => {\n    const aLen = a.length\n    const bLen = b.length\n    return aLen - bLen\n  })\n  return newArr.reverse()\n}\n\nconsole.log(byLength([8, 5, 4, 3, 2, 2, 1, 1]))\nconsole.log(byLength([1, -1, 55]))\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (x) => x <= 1? 1 : x * f(x - 1);\n  return factorial(n);\n};\n\n// f(3)\n// 1\n// 2\n// 6\n// 24\n// 15\n\n/*\n  Implementation of the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is odd\n  or the sum of numbexs from 1 to i / 2 othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (x) => x <= 1? 1 : x * f(x - 1);\n  return factorial(n);\n};\n\n// f(3)\n// 1\n// 2\n// 6\n// 24\n// 15\n\n/*\n  Implementation of the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is odd\n  or the sum of numbexs from 1 to i / 2 othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (x) => x <= 1? 1 : x * f(x - 1);\n  return factorial(n);\n};\n\n// f(3)\n// 1\n// 2\n// 6\n// 24\n// 15\n\n/*\n  Implementation of the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i / 2 othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (x) => x <= 1? 1 : x * f(x - 1);\n  return factorial(n);\n};\n\n// f(3)\n// 1\n// 2\n// 6\n// 24\n// 15\n\n/*\n  Implementation of the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is odd\n  or the sum of numbexs from 1 to i / 2 othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (x) => x <= 1? 1 : x * f(x - 1);\n  return factorial(n);\n};\n\n// f(3)\n// 1\n// 2\n// 6\n// 24\n// 15\n\n/*\n  Implementation of the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i / 2 othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (x) => x <= 1? 1 : x * f(x - 1);\n  return factorial(n);\n};\n\n// f(3)\n// 1\n// 2\n// 6\n// 24\n// 15\n\n/*\n  Implementation of the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is odd\n  or the sum of numbexs from 1 to i / 2 othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = (x) => x <= 1? 1 : x * f(x - 1);\n  return factorial(n);\n};\n\n// f(3)\n// 1\n// 2\n// 6\n// 24\n// 15\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let odd = 0\n  let even = 0\n  for (let i = 1; i <= n; i++) {\n    let isEven = i % 2\n    if (isEven === 0) {\n      odd++\n    } else {\n      even++\n    }\n  }\n  return (odd, even)\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const result = 0;\n  const count = 0;\n\n  for (let i = 0; i < arr.length; i += 1) {\n    const num = arr[i];\n    const sum = num + result;\n    if (sum >= 0) {\n      result = sum;\n      count += 1;\n    }\n  }\n\n  return count;\n};\n\nconsole.log(countNums([1, 2, 3, -1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We hwve an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We hwve an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if(arr.length === 0) return false;\n    \n    let i = 0;\n    let j = arr.length - 1;\n    let c = arr[0];\n    \n    while(i < j) {\n        while(i < j && c > arr[j]) j--;\n        \n        while(i < j && c < arr[i]) i++;\n        \n        if(i < j) {\n            arr[i] = arr[j];\n            arr[j] = c;\n            j--;\n            i++;\n        }\n    }\n    arr[i] = c;\n    \n    return true;\n};\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  // 循环两个链表的元素个数\n  for (let i = 0, j = lst1.length - 1; i < j; i++, j--) {\n    // 循环两个链表的元素\n    for (let k = 0, m = lst2.length - 1; k < m; k++) {\n      // 根据链表输入的元素来输入两个链表的元素\n      if (lst1[i] === lst2[k]) {\n        // 如果有一个元素在链表1中，找到一个在链表2中，将链表1中的元素和链表2中的元素交换\n        // 交换两个元素的位置\n        lst1[i], lst1[j] = lst1[j], lst1[i];\n        lst2[k], lst2[m] = lst2[m], lst2[k];\n        // 下一次循环\n        j--;\n        m--;\n      }\n    }\n  }\n  // 找到了一个元素只有在lst1中，且只有在lst2中\n  if (lst1.length === 1 && lst2.length === 1) {\n    // 如果链表1中只有一个元素，链表2中只有一个元素\n    return \"YES\";\n  }\n  // 如果链表1中只有一个元素，链表2中也只有一个元素\n  if (lst1.length === 1) {\n    // 如果链表2中只有一个元素，链表1中也只有一个元素\n    return \"MO\";\n  }\n  // 如果链表1中也只有一个元素，链表2中只有一个元素\n  if (lst2.length === 1) {\n    // 如果链表2中也只有一个元素，链表1中只有一个元素\n    return \"YES\";\n  }\n};\nexchange([1, 2, 3, 4], [1, 2, 3, 4]);\nexchange([1, 2, 3, 4], [1, 5, 3, 4]);\nexchange([1, 2, 3, 4], [1, 2, 5, 4]);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  if (!test) return {};\n  const letter = test.toLowerCase();\n  const dict = {};\n  for (let i = 0; i < letter.length; i++) {\n    if (!dict[letter[i]]) dict[letter[i]] = 0;\n    dict[letter[i]]++;\n  }\n  return dict;\n};\n\n//console.log(histogram('a b c'));\n//console.log(histogram('a b b a'));\n//console.log(histogram('b b b b a'));\n//console.log(histogram(''));\n//console.log(histogram('a b b a b'));\n\n//console.log(histogram('a b c a b'));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n    const sArr = s.split('');\n    const cArr = c.split('');\n    let result = [];\n    for (let i = 0; i < sArr.length; i++) {\n        if (cArr.indexOf(sArr[i]) === -1) {\n            result.push(sArr[i]);\n        }\n    }\n    return (result.join(''), result.length === sArr.length);\n}\n\n// test\nconsole.log(reverseDelete(\"abcdef\", \"ab\"));\nconsole.log(reverseDelete(\"abcdef\", \"b\"));\nconsole.log(reverseDelete(\"abcdedcba\", \"ab\"));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const len = lst.length\n  const count = []\n  for (let i = 0; i < len; i++) {\n    const s = lst[i]\n    count.push(s.replace(/[^0-9]/g, '').length)\n  }\n  return count.map((i) => `the number of odd elements ${i} of the ${len} input.`)\n}\n\n//\n//\n//\n\nconst main = () => {\n  const tests = [\n    ['1234567', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]],\n    ['3', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]],\n  ]\n\n  const len = tests.length\n  const testCount = len\n  const testResult = []\n  const testCase = []\n  let testResultCount = 0\n  let testCaseCount = 0\n\n  for (let i = 0; i < len; i++) {\n    const test = tests[i]\n    const len2 = test[0].length\n    const lst = test[1]\n\n    const testCase = []\n    for (let j = 0; j < len2; j++) {\n      testCase.push(lst[j])\n    }\n\n    const answer = test[2]\n    testResult.push(answer[testResultCount])\n    testCaseCount++\n    if (testResultCount < testCaseCount) {\n      testResultCount++\n    }\n  }\n\n  return test"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = new Array(nums.length + 1)\n  sum[0] = -1\n  for (let i = 0; i < nums.length; i++) {\n    sum[i + 1] = sum[i] + nums[i]\n  }\n  return sum[nums.length]\n}\n\n/*\n  Givfn an array of integers nums, find the minimum sum of the sub-array of nums\n  satisfying the above two conditions:\n  1. The sub-array can be any length >= 1\n  2. Each element of sub-array must be equal to the sum of the elements of the\n  preceeding sub-array\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 7\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = new Array(nums.length + 1)\n  sum[0] = -1\n  for (let i = 0; i < nums.length; i++) {\n    sum[i + 1] = sum[i] + nums[i]\n  }\n  return sum[nums.length]\n}\n\n/*\n  Givfn an array of strings strs, find the longest common prefix string among\n  the strings.\n  Example\n  longestCommonPrefix(['a', 'b', 'c', 'a', 'b', 'c']) == 'a'\n  */\nconst longestCommonPrefix = (strs) => {\n  const len = strs.length\n  const longest = 0\n  const common = []\n  for (let i = 0; i < len; i++) {\n    if (strs[i]!== strs[0]) {\n      break\n    }\n    common.push(strs[i])\n    longest = longest + 1\n  }\n  return common\n}\n\n/*\n  Givfn an array of strings strs, find the longest common suffix string among\n  the strings.\n  Example\n  longestCommonSuffix(['a', 'b', 'c', 'a', 'b', 'c']) == 'c'\n  */\nconst longestCommonSuffix = (strs) => {\n  const len = strs.length\n  const longest = 0\n  const common = []\n  for (let i = 0; i < len; i++) {\n    if (strs[i]!== strs[len - 1]) {\n      break\n    }\n    common.push(strs[i])\n    longest = longest + 1\n  }\n  return common\n}\n\n/*\n  Givfn an array of strings strs, find the longest common substring among the\n  strings.\n  Example\n  longestCommonSubstr(['a', 'b', 'c', 'a', 'b', 'c']) == 'abc'\n  */\nconst longestCommonSubstr = (strs) => {\n  const len = strs.length\n  const longest = 0\n  const common = []\n  for (let i = 0; i < len; i++) {\n    if (strs[i]!== strs[len - 1]) {\n      break\n    }\n    common.push(strs[i])\n    longest = longest + 1\n  }\n  return common\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const fill = [];\n  const row = grid.length;\n  const col = grid[0].length;\n  for (let i = 0; i < row; i++) {\n    fill[i] = [];\n    for (let j = 0; j < col; j++) {\n      fill[i][j] = 0;\n    }\n  }\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (grid[i][j] === 1) {\n        fill[i][j] = capacity;\n      }\n    }\n  }\n  let count = 0;\n  for (let i = 0; i < row; i++) {\n    for (let j = 0; j < col; j++) {\n      if (fill[i][j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nconst main = () => {\n  const grid = [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ];\n  const capacity = 1;\n  const count = 6;\n  const result = countNines(grid, capacity);\n  console.log(result);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const sortedArr = [];\n  let lastBit = 1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] == 0) {\n      lastBit = 0;\n    } else {\n      sortedArr.push(lastBit * arr[i]);\n      lastBit = 1;\n    }\n  }\n  if (lastBit) {\n    sortedArr.push(lastBit * arr[arr.length - 1]);\n  }\n  return sortedArr;\n};\n\ndescribe('#sortArray', () => {\n  it('should return the sorted array of the given array', () => {\n    expect(sortArray([1, 0, 2, 3, 4])).toEqual([1, 2, 3, 4, 0]);\n  });\n  it('should return the sorted array of the given array', () => {\n    expect(sortArray([-2, -3, -4, -5, -6])).toEqual([-6, -5, -4, -3, -2]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  const s = s.trim()\n  const l = s.length\n  const vx = Array.from(Array(n).keys())\n  const result = []\n  let k = 0\n  while (k < l) {\n    const word = s.substr(k, n)\n    if (vx.includes(word)) {\n      result.push(word)\n    }\n    k += n\n  }\n  return result\n}\n\nconst test = () => {\n  console.log(selectWords(\"Hello world\", 2))\n  console.log(selectWords(\"Uncle sam\", 3))\n  console.log(selectWords(\"Hello world\", 4))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  let char = '';\n  let start = 0;\n  let end = word.length - 1;\n  let charIndex = 0;\n  let vowel = '';\n  let result = '';\n\n  while (start <= end) {\n    char = word[charIndex++];\n    if (char.match(/\\d/)) {\n      end = charIndex - 1;\n      result += char;\n    } else if (char.match(/[a-z]/i)) {\n      vowel = char.toLowerCase();\n      if (vowel === 'vowel') {\n        return char;\n      }\n      end = charIndex - 1;\n      result += char;\n    } else if (char.match(/\\S/i)) {\n      end = charIndex - 1;\n      result += char;\n    }\n  }\n\n  return result;\n};\n\nexport {\n  getClosestVowel\n};\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const parens = [\n    '(',\n    ')',\n    '[',\n    ']',\n    '{',\n    '}',\n    '<',\n    '>',\n    '+',\n    '-',\n    '*',\n    '/',\n    '%',\n    '^',\n  ]\n\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      let curr = lst[i]\n      let next = lst[j]\n      let isValid = true\n\n      for (let k = 0; k < parens.length; k++) {\n        if (curr === parens[k] && next === parens[k]) {\n          isValid = false\n        }\n      }\n\n      if (isValid) {\n        return 'Yes'\n      }\n    }\n  }\n\n  return 'No'\n}\n\n// matchParens(['()(', ')'])\n// matchParens([')', ')'])\n// matchParens(['(', ')', ')', '('])\n// matchParens(['(', ')', ')', '(', ')'])\n// matchParens(['(', ')', ')', '(', ')', '('])\n// matchParens(['(', ')', ')', '(', ')', ')', '('])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', '('])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '('])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', '('])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', '(', ')', ')', ')', '(', ')', ')', '(', ')', ')'])\n// matchParens(['(', ')', ')', '(', ')', ')',"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let result = [];\n  let max = arr[0];\n  for (let i = 0; i < k; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      result[i] = arr[i];\n    } else if (arr[i] == max) {\n      result[i] = arr[i];\n    }\n  }\n  return result;\n}\n\n// test\nlet arr = [-3, -4, 5];\nlet k = 3;\nconsole.log(maximum(arr, k));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let result = 0\n  lst.forEach((item) => {\n    let index = lst.indexOf(item)\n    result = (result + (index % 2 === 0)? item : 0)\n  })\n  return result\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_1 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_2 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_3 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_4 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_5 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_6 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_7 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_8 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_9 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_10 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_11 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_12 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_13 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j = k - 1;\n    while (i <= j) {\n        sum += arr[i];\n        i++;\n        if (i > j) {\n            break;\n        }\n        sum += arr[j];\n        j--;\n    }\n    return sum;\n}\n\nconst addElements_14 = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    let j"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const oddCollatz = [];\n  while (n > 1) {\n    if (n % 2 === 1) {\n      oddCollatz.push(n);\n    }\n    n = Math.floor(n / 2);\n  }\n  return oddCollatz;\n};\n\nconst getCollatz = (n) => {\n  const collatz = [];\n  while (n > 1) {\n    collatz.push(n);\n    n = getOddCollatz(n);\n  }\n  return collatz;\n};\n\ngetCollatz(5);\n// getCollatz(1)\n// getCollatz(7)\n// getCollatz(10)\n// getCollatz(11)\n// getCollatz(12)\n// getCollatz(15)\n// getCollatz(16)\n// getCollatz(17)\n// getCollatz(18)\n// getCollatz(19)\n// getCollatz(20)\n// getCollatz(21)\n// getCollatz(22)\n// getCollatz(23)\n// getCollatz(24)\n// getCollatz(25)\n// getCollatz(26)\n// getCollatz(27)\n// getCollatz(28)\n// getCollatz(29)\n// getCollatz(30)\n// getCollatz(31)\n// getCollatz(32)\n// getCollatz(33)\n// getCollatz(34)\n// getCollatz(35)\n// getCollatz(36)\n// getCollatz(37)\n// getCollatz(38)\n// getCollatz(39)\n// getCollatz(40)\n// getCollatz(41)\n// getCollatz(42)\n// getCollatz(43)\n// getCollatz(44)\n// getCollatz(45)\n// getCollatz(46)\n// getCollatz(47)\n// getCollatz(48)\n// getCollatz(49)\n// getCollatz(50)\n// getCollatz(51)\n// getCollatz(52)\n// getCollatz(53)\n// getCollatz(54)\n// getCollatz(55)\n// getCollatz(56)\n// getCollatz(57)\n// getCollatz(58)\n// getCollatz(59)\n// getCollatz(60)\n// getCollatz(61)\n// getCollatz(62)\n// getCollatz(63)\n// getCollatz(64)\n// getCollatz(65)\n// getCollatz(66)\n// getCollatz(67)\n// getCollatz(68)\n// getCollatz(69)\n// getCollatz(70)\n// getCollatz(71)\n// getCollatz(72)\n// getCollatz(73)\n// getCollatz(74)\n// getCollatz(75)\n// getCollatz(76)\n// getCollatz(77)\n// getCollatz(78)\n// getCollatz(79)\n// getCollatz(80)\n// getCollatz(81)\n// getCollatz(82)\n// getCollatz(83)\n// getCollatz(84)\n// getCollatz(85)\n// getCollatz(86)\n// getCollatz(87)\n// getCollatz(88)\n// getCollatz(89)\n// getCollatz(90)\n// getCollatz(91)\n// getCollatz(92)\n// getCollatz(93)\n// getCollatz(94)\n// getCollatz(95)\n// getCollatz(96)\n// getCollatz(97)\n// getCollatz(98)\n// getCollatz(99)\n// getCollatz(100)\n// getCollatz(101)\n// getCollatz(102)\n// getCollatz(103)\n// getCollatz(104)\n// getCollatz(105)\n// getCollatz(106)\n// getCollatz(107)\n// getCollatz(108)\n// getCollatz(109)\n// getCollatz(110)\n// getCollatz(111)\n// getCollatz(112)\n// getCollatz(113)\n// getCollatz(114)\n// getCollatz(115)\n// getCollatz(116)\n// getCollatz(117)\n// getCollatz(118)\n// getCollatz(119)\n// getCollatz(120)\n// getCollatz(121)\n// getCollatz(122)\n// getCollatz(123)\n// getCollatz(124)\n// getCollatz(125)\n// getCollatz(126)\n// getCollatz(127)\n// getCollatz(128)\n// getCollatz(129)\n// getCollatz(130)\n// getCollatz(131)\n// getCollatz(132)\n// getCollatz(133)\n// getCollatz(134)\n// getCollatz(135)\n// getCollatz(136)\n// getCollatz(137)\n// getCollatz(138)\n// getCollatz(139)\n// getCollatz(140)\n// getCollatz(141)\n// getCollatz(142)\n// getCollatz(143)\n// getCollatz(144)\n// getCollatz(145)\n// getCollatz(146)\n// getCollatz(147)\n// getCollatz(148)\n// getCollatz(149)\n// getCollatz(150)\n// getCollatz(151)\n// get"}
{"task_id": "JavaScript/124", "prompt": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  let dateReg = /^(0?[1-9]|1[0-2])-(0?[1-9]|1[0-2])-(0?[1-9]|1[0-9]|2[0-9]|3[0-1])$/\n  if (date.length < 1) {\n    return false\n  }\n  let regResult = dateReg.test(date)\n  if (regResult) {\n    return true\n  } else {\n    return false\n  }\n}\n\nmodule.exports = {\n  validDate\n}\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const list = []\n  txt = txt.toLowerCase()\n  const word_regex = /\\b[a-z]*(\\b|[A-Z]|[0-9]|_)+[a-z]*\\b/i\n  let match = word_regex.exec(txt)\n  while (match!= null) {\n    list.push(match[0])\n    txt = txt.substr(match[0].length)\n    match = word_regex.exec(txt)\n  }\n  return list\n}\n\n// splitWords()<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const sorted = lst.filter(a => a < lst[lst.length - 1]);\n  return sorted.length === lst.length;\n};\n\n/*\n  Givfn a list of numbers, return whether or not they are unordered.\n  Examples\n  isUnordered([1, 2, 3]) ➞ false\n  isUnordered([1, 2, 3, 4]) ➞ false\n  isUnordered([1, 3, 2, 4, 5]) ➞ true\n  isUnordered([1, 2, 3, 4, 5, 6]) ➞ true\n  isUnordered([1, 2, 3, 4, 5, 6, 7]) ➞ false\n  isUnordered([1, 2, 2, 3, 3, 4, 4]) ➞ true\n  isUnordered([1, 2, 2, 2, 3, 4, 4]) ➞ false\n  */\nconst isUnordered = (lst) => {\n  const sorted = lst.filter(a => a < lst[lst.length - 1]);\n  return sorted.length!== lst.length;\n};\n\n/*\n  Given a list of numbers, return the largest number.\n  Examples\n  largest([1, 2, 3, 4, 5]) ➞ 5\n  largest([1, 2, 3, 4, 5, 6]) ➞ 6\n  largest([1, 2, 3, 4, 5, 6, 7]) ➞ 7\n  largest([1, 2, 2, 3, 3, 4, 4]) ➞ 4\n  largest([1, 2, 2, 2, 3, 4, 4]) ➞ 4\n  */\nconst largest = (lst) => {\n  return lst[lst.length - 1];\n};\n\n/*\n  Given a list of numbers, return the smallest number.\n  Examples\n  smallest([1, 2, 3, 4, 5]) ➞ 1\n  smallest([1, 2, 3, 4, 5, 6]) ➞ 1\n  smallest([1, 2, 3, 4, 5, 6, 7]) ➞ 1\n  smallest([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 1\n  */\nconst smallest = (lst) => {\n  return lst[0];\n};\n\n/*\n  Given a list of numbers, return the first index of the given number.\n  Examples\n  indexOf(3, [1, 2, 3, 4, 5]) ➞ 1\n  indexOf(7, [1, 2, 3, 4, 5]) ➞ -1\n  indexOf(3, [1, 2, 3, 4, 5, 6, 7]) ➞ 3\n  indexOf(7, [1, 2, 3, 4, 5, 6, 7]) ➞ -1\n  */\nconst indexOf = (x, lst) => {\n  return lst.indexOf(x);\n};\n\n/*\n  Given a list of numbers, return the last index of the given number.\n  Examples\n  lastIndexOf(3, [1, 2, 3, 4, 5]) ➞ 5\n  lastIndexOf(7, [1, 2, 3, 4, 5]) ➞ -1\n  lastIndexOf(3, [1, 2, 3, 4, 5, 6, 7]) ➞ -1\n  lastIndexOf(7, [1, 2, 3, 4, 5, 6, 7]) ➞ 6\n  */\nconst lastIndexOf = (x, lst) => {\n  return lst.lastIndexOf(x);\n};\n\n/*\n  Given a list of numbers, return the number of the given number.\n  Examples\n  count(3, [1, 2, 3, 4, 5]) ➞ 1\n  count(7, [1, 2, 3, 4, 5]) ➞ 0\n  count(3, [1, 2, 3, 4, 5, 6, 7]) ➞ 2\n  count(7, [1, 2, 3, 4, 5, 6, 7]) ➞ 1\n  */\nconst count = (x, lst) => {\n  return lst.filter(a => a === x).length;\n};\n\n/*\n  Given a list of numbers, return the number of unique numbers.\n  Examples\n  uniqCount([1, 2, 3, 4, 5]) ➞ 2\n  uniqCount([1, 2, 3, 4, 5, 6, 7]) ➞ 3\n  uniqCount([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 3\n  uniqCount([1, 2, 2, 3, 3, 4, 4, 4]) ➞ 2\n  uniqCount([1, 2, 2, 2, 3, 4, 4, 4]) ➠ 2\n  uniqCount([1, 2, 2, 2, 2, 3, 4, 4]) ➠ 1\n  uniqCount([1, 2, 2, 2, 2, 2, 3, 4]) ➠ 1\n  uniqCount([1, 2, 2, 2, 2, 2, 2, 3]) ➠ 1\n  */\nconst uniqCount = (lst) => {\n  return lst.reduce((a, b) => a + (b!== a? 1 : 0), 0);\n};\n\nmodule.exports = {\n  isSorted,\n  isUnordered,\n  largest,\n  smallest,"}
{"task_id": "JavaScript/127", "prompt": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (!interval1 ||!interval2) return \"NO\"\n  const start1 = interval1[0]\n  const end1 = interval1[1]\n  const start2 = interval2[0]\n  const end2 = interval2[1]\n  const length = end1 - start1 + 1\n  if (end2 - start2 + 1!== length) return \"NO\"\n  let sum = 0\n  for (let i = start1; i <= end1; i++) {\n    if (start2 <= i && i <= end2) {\n      sum += i\n    }\n  }\n  if (sum % length!== 0) return \"NO\"\n  return \"YES\"\n}\n\n// console.log(intersection((1, 2), (2, 3)))\n// console.log(intersection((-1, 1), (0, 4)))\n// console.log(intersection((-3, -1), (-5, 5)))\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3), (3, 4)) ==> \"NO\"\n  intersection((1, 2), (2, 3), (4, 5)) ==> \"YES\"\n  intersection((1, 2), (3, 4), (4, 5)) ==> \"YES\"\n  intersection((1, 2), (3, 4), (5, 6)) ==> \"NO\"\n*/\nconst intersection = (interval1, interval2, interval3) => {\n  const result = intersection(interval1, interval2)\n  if (result!== \"YES\") return result\n  const result2 = intersection(interval1, interval3)\n  return result === \"YES\"? \"YES\" : result2\n}\n\n// console.log(intersection((1, 2), (2, 3), (3, 4)))\n// console.log(intersection((1, 2), (2, 3), (4, 5)))\n// console.log(intersection((1, 2), (3, 4), (4, 5)))\n// console.log(intersection((1, 2), (3, 4), (5, 6)))\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3), (4, 5)) ==> \"NO\"\n  intersection((1, 2), (3, 4), (4, 5)) ==> \"YES\"\n  intersection((1, 2), (3, 4), (5, 6)) ==> \"YES\"\n*/\nconst intersection = (interval1, interval2, interval3, interval4) => {\n  const result = intersection(interval1, interval2, interval3)\n  if (result!== \"YES\") return result\n  const result2 = intersection(interval1, interval2, interval4)\n  return result === \"YES\"? \"YES\" : result2\n}\n\n// console.log(intersection((1, 2), (2, 3), (3, 4), (4, 5)))\n// console.log(intersection((1, 2), (3, 4), (4, 5), (5, 6)))\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3), (4, 5), (5, 6)) ==> \"YES\"\n*/\nconst intersection = (interval1, interval2, interval3, interval4, interval5) => {\n  const result = intersection(interval1, interval2, interval3, interval4)\n  if (result!== \"YES\") return result\n  const result2 = intersection(interval1, interval2, interval3, interval5)\n  return result === \"YES\"? \"YES\" : result2\n}\n\n// console.log(intersection((1, 2), (2, 3), (3, 4), (4, 5), (5, 6)))\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3), (3, 4), (4, 5), (5, 6)) ==> \"YES\"\n*/\nconst intersection = (interval1, interval2, interval3, interval4, interval5, interval6) => {\n  const result = intersection(interval1, interval2, interval3, interval4, interval5)\n  if (result!== \"YES\") return result\n  const result2 = intersection(interval1, interval2, interval3, interval4, interval6)\n  return result === \"YES\"? \"YES\" : result2\n}\n\n// console.log(intersection((1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)))\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)) ==> \"NO\"\n*/\nconst intersection = (interval1, interval2, interval3, interval4, interval5, interval6, interval7) => {\n  const result = intersection(interval1, interval2, interval3, interval4, interval5, interval6)\n  if (result!== \"YES\") return result\n  const result2 = intersection(interval1, interval2, interval3, interval4, interval5, interval7)\n  return result === \"YES\"? \"YES\" : result2\n}\n\n// console.log(intersection((1, 2"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        let sign = 1;\n        if (arr[i] > 0) {\n            sign = 1;\n        } else if (arr[i] < 0) {\n            sign = -1;\n        }\n        sum += Math.abs(arr[i]) * sign;\n    }\n    return sum;\n};\n\n/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied by their product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns2 = (arr) => {\n    let sum = 0;\n    for (let i = 0; i < arr.length; i++) {\n        sum += Math.abs(arr[i]) * arr[i];\n    }\n    return sum;\n};\n\nmodule.exports = {\n    prodSigns,\n    prodSigns2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    const n = grid.length;\n    const [m, n] = [n, n];\n    const dp = new Array(m * n).fill(0).map(() => new Array(m * n).fill(0));\n    const paths = [];\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            dp[i][j] = (i > 0? dp[i - 1][j] : 0) + (grid[i][j]? 1 : 0);\n            for (let iNext = i, jNext = j; iNext < m && jNext < n; iNext++, jNext++) {\n                if (grid[iNext][jNext] === true) {\n                    dp[iNext][jNext] = dp[i][j] + (iNext > 0? dp[iNext - 1][jNext] : 0);\n                }\n            }\n        }\n    }\n    let maxPath = 0;\n    let curPath = 0;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            curPath = max(curPath, dp[i][j]);\n            if (curPath === k) {\n                paths.push(i + 1);\n                curPath = 0;\n            }\n        }\n    }\n    return paths;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const fib = (n) => {\n    let res = []\n    for(let i = 0; i <= n; i++) {\n      if(i % 2) {\n        res.push(fib(i - 1) + fib(i - 2) + fib(i + 1))\n      } else {\n        res.push(fib(i - 1))\n      }\n    }\n    return res\n  }\n  return fib(n)\n}\n\n/*\n  This problem was taken from the forum,\n  http://www.geeksforgeeks.org/searching-n-unique-permutations-in-a-given-range/\n  \n  There are two sorted arrays A and B.\n  \n  Write a function to find all unique permutations of A and B in the range 0..M\n  \n  Input:\n  A = [1, 2, 3]\n  B = [1, 2, 3]\n  M = 3\n  \n  Output:\n  [\n    [1, 1, 2, 3],\n    [1, 1, 3, 2],\n    [1, 2, 1, 3],\n    [1, 2, 3, 1],\n    [1, 3, 1, 2],\n    [1, 3, 2, 1],\n    [2, 1, 1, 3],\n    [2, 1, 3, 1],\n    [2, 3, 1, 1],\n    [3, 1, 1, 2],\n    [3, 1, 2, 1],\n    [3, 2, 1, 1]\n  ]\n*/\nconst search = (a, b, m) => {\n  const permutation = (a, b) => {\n    const n = a.length\n    const a_copy = a.slice()\n    const b_copy = b.slice()\n    const n_copy = a_copy.concat(b_copy)\n    const perm_arr = []\n    \n    for(let i = 0; i < n; i++) {\n      for(let j = 0; j < n; j++) {\n        if(i!= j) {\n          let a_copy_i = a_copy.slice()\n          a_copy_i.splice(i, 1)\n          let b_copy_i = b_copy.slice()\n          b_copy_i.splice(i, 1)\n          let n_copy_i = a_copy_i.concat(b_copy_i)\n          perm_arr.push(n_copy_i)\n        }\n      }\n    }\n    return perm_arr\n  }\n  const permutation_count = (a, b) => {\n    return a.length * b.length\n  }\n  const find = (a, b, m) => {\n    let a_perm = permutation(a, b)\n    let permutation_count = 0\n    for(let i = 0; i < a_perm.length; i++) {\n      if(permutation_count > m) {\n        return false\n      }\n      if(a_perm[i].length == b.length) {\n        permutation_count += 1\n      }\n    }\n    return true\n  }\n  const generate = (a, b) => {\n    let count = 0\n    for(let i = 0; i < a.length; i++) {\n      for(let j = 0; j < b.length; j++) {\n        if(a[i] == b[j]) {\n          count++\n          if(count > a.length * b.length) {\n            return false\n          }\n        }\n      }\n    }\n    return true\n  }\n  const check = (a, b, m) => {\n    if(find(a, b, m)) {\n      return generate(a, b)\n    }\n    return false\n  }\n  const result = check(a, b, m)\n  if(result) {\n    return [\n     ...a,\n     ...b\n    ]\n  }\n  return []\n}\n\nconst permutation_count = (a, b) => {\n  return a.length * b.length\n}\n\nconst generate = (a, b) => {\n  let count = 0\n  for(let i = 0; i < a.length; i++) {\n    for(let j = 0; j < b.length; j++) {\n      if(a[i] == b[j]) {\n        count++\n        if(count > a.length * b.length) {\n          return false\n        }\n      }\n    }\n  }\n  return true\n}\n\nconst check = (a, b, m) => {\n  if(permutation_count(a, b) > m) {\n    return false\n  }\n  return generate(a, b)\n}\n\nconst result = check(a, b, m)\nif(result) {\n  return [\n   ...a,\n   ...b\n  ]\n}\n\nexport default {\n  tri,\n  search,\n  permutation_count,\n  generate,\n  check,\n  result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let i = n\n  let product = 0\n  while(i > 0) {\n    if (i % 2 === 0) {\n      product *= 2\n    } else {\n      product *= 3\n    }\n    i = Math.floor(i / 2)\n  }\n  return product\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst powerOf2 = (n) => {\n  let i = 1\n  while(i < n) {\n    i *= 2\n  }\n  return i\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst log2 = (n) => {\n  let i = 1\n  while(i < n) {\n    i *= 2\n  }\n  return i\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm = (n, m) => {\n  let i = 1\n  while(i < n) {\n    i *= m\n  }\n  return i\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm = (n, m, mn) => {\n  let i = 1\n  while(i < n) {\n    i *= m\n  }\n  return mn * i\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst gcd = (n, m) => {\n  if (n === 0) {\n    return m\n  }\n  return gcd(m % n, n)\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm2 = (n, m) => {\n  return lcm(n, m) / gcd(n, m)\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm2 = (n, m, mn) => {\n  return lcmm(n, m, mn) / gcd(n, m)\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm3 = (n, m, m2) => {\n  return lcm(n, m) / gcd(n, m) / m2\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm3 = (n, m, mn, m2) => {\n  return lcmm(n, m, mn) / gcd(n, m) / m2\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm4 = (n, m, m2, m3) => {\n  return lcm(n, m) / gcd(n, m) / m2 / m3\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm4 = (n, m, mn, m2, m3) => {\n  return lcmm(n, m, mn) / gcd(n, m) / m2 / m3\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst gcd2 = (n, m) => {\n  return gcd(n, m) * m\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm2n = (n, m) => {\n  return lcm(n, m) / gcd2(n, m)\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm2n = (n, m, mn) => {\n  return lcmm(n, m, mn) / gcd2(n, m)\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm3n = (n, m, m2) => {\n  return lcm(n, m) / gcd2(n, m) / m2\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm3n = (n, m, mn, m2) => {\n  return lcmm(n, m, mn) / gcd2(n, m) / m2\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst gcd3 = (n, m, m2) => {\n  return gcd(n, m) * m * m2\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm2n2 = (n, m) => {\n  return lcm(n, m) / gcd3(n, m)\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm2n2 = (n, m, mn) => {\n  return lcmm(n, m, mn) / gcd3(n, m)\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm3n2 = (n, m, m2) => {\n  return lcm(n, m) / gcd3(n, m) / m2\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm3n2 = (n, m, mn, m2) => {\n  return lcmm(n, m, mn) / gcd3(n, m) / m2\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm4n2 = (n, m, m2, m3) => {\n  return lcm(n, m) / gcd3(n, m) / m2 / m3\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcmm4n2 = (n, m, mn, m2, m3) => {\n  return lcmm(n, m, mn) / gcd3(n, m) / m2 / m3\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst gcd4 = (n, m, m2, m3) => {\n  return gcd(n, m) * m * m2 * m3\n}\n\n/*\n  Rxturn a positive integer\n  */\nconst lcm2n3 = (n, m) => {\n  return lcm(n,"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n    if (string === '' || string === '[]') {\n        return false\n    }\n\n    let stack = []\n    let nested = false\n    let next = false\n    let i = 0\n\n    for (; i < string.length; i++) {\n        switch (string[i]) {\n            case '[':\n                stack.push(string[i])\n                break\n            case ']':\n                if (stack.length === 0) {\n                    return false\n                }\n                stack.pop()\n                break\n            default:\n                break\n        }\n    }\n\n    if (stack.length === 0) {\n        return true\n    }\n\n    return false\n}\n\n/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isValidNested = (string) => {\n    if (string === '' || string === '[]') {\n        return false\n    }\n\n    let stack = []\n    let nested = false\n    let next = false\n    let i = 0\n\n    for (; i < string.length; i++) {\n        switch (string[i]) {\n            case '[':\n                stack.push(string[i])\n                break\n            case ']':\n                if (stack.length === 0) {\n                    return false\n                }\n                stack.pop()\n                break\n            case '[' :\n                if (stack.length === 0) {\n                    return false\n                }\n                stack.push(string[i])\n                break\n            case ']' :\n                if (stack.length === 0) {\n                    return false\n                }\n                stack.pop()\n                break\n            default:\n                break\n        }\n    }\n\n    if (stack.length === 0) {\n        return true\n    }\n\n    return false\n}\n\n/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isValid = (string) => {\n    if (string === '' || string === '[]') {\n        return false\n    }\n\n    let stack = []\n    let nested = false\n    let next = false\n    let i = 0\n\n    for (; i < string.length; i++) {\n        switch (string[i]) {\n            case '[':\n                stack.push(string[i])\n                break\n            case ']':\n                if (stack.length === 0) {\n                    return false\n                }\n                stack.pop()\n                break\n            default:\n                break\n        }\n    }\n\n    if (stack.length === 0) {\n        return true\n    }\n\n    return false\n}\n\nmodule.exports = {\n    isNested,\n    isValid,\n    isValidNested\n}\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n    let result = 0;\n    lst.forEach(n => {\n        result += n * n;\n    })\n    return Math.ceil(result)\n}\n\n// test\nconsole.log(sumSquares([1,2,3])); // 14\nconsole.log(sumSquares([1,4,9])); // 98\nconsole.log(sumSquares([1,3,5,7])); // 84\nconsole.log(sumSquares([1.4,4.2,0])); // 29\nconsole.log(sumSquares([-2.4,1,1])); // 6<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const txtLength = txt.length;\n  let isAlphabet = true;\n  for (let i = txtLength - 1; i >= 0; i--) {\n    const ch = txt[i];\n    const isAlpha = /[a-zA-Z]/.test(ch);\n    if (!isAlpha) {\n      isAlphabet = false;\n      break;\n    }\n  }\n  return isAlphabet;\n}\n\n/* Crewte a function that returns a random number of a given string\n  between 0 and n.\n  Example:\n  getRandomNum(7, \"pie\") ➞ 4\n  getRandomNum(7, \"pie \") ➞ 5\n  getRandomNum(7, \"\") ➞ 0\n  getRandomNum(7, \"apple pie\") ➞ 2\n  getRandomNum(7, \"apple pie \") ➞ 3\n  getRandomNum(7, \"apple pie \") ➞ 0\n  */\nconst getRandomNum = (n, txt) => {\n  const txtLength = txt.length;\n  let min = 0;\n  let max = txtLength - 1;\n  if (txtLength === 0) {\n    return 0;\n  }\n  while (max < txtLength) {\n    max = Math.floor(Math.random() * (max - min)) + min;\n  }\n  return max;\n}\n\n/* Crewte a function that returns a random word of a given string\n  between 0 and n.\n  Example:\n  getRandomWord(7, \"pie\") ➞ \"pie\"\n  getRandomWord(7, \"pie \") ➞ \"pie\"\n  getRandomWord(7, \"\") ➞ \"\"\n  getRandomWord(7, \"apple pie\") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  */\nconst getRandomWord = (n, txt) => {\n  let rnd = getRandomNum(n, txt);\n  const txtLength = txt.length;\n  let isAlphabet = false;\n  while (!isAlphabet) {\n    rnd = getRandomNum(n, txt);\n    isAlphabet = checkIfLastCharIsALetter(txt);\n  }\n  const randomWord = txt.substring(rnd, rnd + 1);\n  return randomWord;\n}\n\n/* Crewte a function that returns a random number of a given string\n  between 0 and n.\n  Example:\n  getRandomWord(7, \"pie\") ➞ \"pie\"\n  getRandomWord(7, \"pie \") ➞ \"pie\"\n  getRandomWord(7, \"\") ➞ \"\"\n  getRandomWord(7, \"apple pie\") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  */\nconst getRandomNumber = (n, txt) => {\n  const txtLength = txt.length;\n  let min = 0;\n  let max = txtLength - 1;\n  if (txtLength === 0) {\n    return 0;\n  }\n  while (max < txtLength) {\n    max = Math.floor(Math.random() * (max - min)) + min;\n  }\n  return max;\n}\n\n/* Crewte a function that returns a random word of a given string\n  between 0 and n.\n  Example:\n  getRandomWord(7, \"pie\") ➞ \"pie\"\n  getRandomWord(7, \"pie \") ➞ \"pie\"\n  getRandomWord(7, \"\") ➞ \"\"\n  getRandomWord(7, \"apple pie\") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  */\nconst getRandomWord = (n, txt) => {\n  let rnd = getRandomNumber(n, txt);\n  const txtLength = txt.length;\n  let isAlphabet = false;\n  while (!isAlphabet) {\n    rnd = getRandomNumber(n, txt);\n    isAlphabet = checkIfLastCharIsALetter(txt);\n  }\n  const randomWord = txt.substring(rnd, rnd + 1);\n  return randomWord;\n}\n\n/* Crewte a function that returns a random number of a given string\n  between 0 and n.\n  Example:\n  getRandomWord(7, \"pie\") ➞ \"pie\"\n  getRandomWord(7, \"pie \") ➞ \"pie\"\n  getRandomWord(7, \"\") ➞ \"\"\n  getRandomWord(7, \"apple pie\") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  getRandomWord(7, \"apple pie \") ➞ \"apple pie\"\n  */\nconst getRandomWord = (n, txt) => {\n  let rnd = getRandomNumber(n, txt);\n  const txtLength = txt.length;\n  let isAlphabet = false;\n  while (!isAlphabet) {\n    rnd = getRandomNumber(n, txt);\n    isAlphabet = checkIfLastCharIsALetter(txt);\n  }\n  const randomWord = txt.substring(rnd, rnd + 1);\n  return randomWord;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  if (!Array.isArray(arr)) throw'must be an array';\n  let max = -1;\n  let maxIdx = -1;\n  arr.forEach((element, idx) => {\n    if (element > max) {\n      max = element;\n      maxIdx = idx;\n    }\n  });\n  return maxIdx;\n};\n\nconst array = [1,2,4,3,5];\n\nconsole.log(canArrange(array));\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = null;\n  let b = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur < 0) {\n      if (a === null) {\n        a = cur;\n      } else {\n        if (a > cur) {\n          a = cur;\n        }\n      }\n    } else {\n      if (b === null) {\n        b = cur;\n      } else {\n        if (b < cur) {\n          b = cur;\n        }\n      }\n    }\n  }\n  return (a === null? null : [a, b]);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (largest === null || largest < cur) {\n      largest = cur;\n    }\n    if (smalles === null || smalles > cur) {\n      smalles = cur;\n    }\n  }\n  return largest === null? null : [largest, smalles];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (largest === null || largest < cur) {\n      largest = cur;\n    }\n    if (smalles === null || smalles > cur) {\n      smalles = cur;\n    }\n  }\n  return largest === null? null : [largest, smalles];\n};\n\n/*\n  Crewte a function that returns a tuple (a, b), where 'a' is the\n  smallestv of positive integers in a list, and 'b' is the largestv\n  of negative integers in a list.\n  If there is no piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (1, 5)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  let a = null;\n  let b = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (cur > 0) {\n      if (a === null) {\n        a = cur;\n      } else {\n        if (a < cur) {\n          a = cur;\n        }\n      }\n    } else {\n      if (b === null) {\n        b = cur;\n      } else {\n        if (b > cur) {\n          b = cur;\n        }\n      }\n    }\n  }\n  return (a === null? null : [a, b]);\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (largest === null || largest < cur) {\n      largest = cur;\n    }\n    if (smalles === null || smalles > cur) {\n      smalles = cur;\n    }\n  }\n  return largest === null? null : [largest, smalles];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (largest === null || largest < cur) {\n      largest = cur;\n    }\n    if (smalles === null || smalles > cur) {\n      smalles = cur;\n    }\n  }\n  return largest === null? null : [largest, smalles];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (largest === null || largest < cur) {\n      largest = cur;\n    }\n    if (smalles === null || smalles > cur) {\n      smalles = cur;\n    }\n  }\n  return largest === null? null : [largest, smalles];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (largest === null || largest < cur) {\n      largest = cur;\n    }\n    if (smalles === null || smalles > cur) {\n      smalles = cur;\n    }\n  }\n  return largest === null? null : [largest, smalles];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null;\n  for (let i = 0; i < lst.length; i++) {\n    let cur = lst[i];\n    if (largest === null || largest < cur) {\n      largest = cur;\n    }\n    if (smalles === null || smalles > cur) {\n      smalles = cur;\n    }\n  }\n  return largest === null? null : [largest, smalles];\n};\n\nconst largestSmallestIntegers = (lst) => {\n  let largest = null;\n  let smalles = null"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  else if (typeof a === \"string\" && typeof b === \"string\") {\n    const aArr = a.split(\".\");\n    const bArr = b.split(\".\");\n    let aArrSum = 0;\n    let bArrSum = 0;\n    for (let i = 0; i < aArr.length; i++) {\n      aArrSum += +aArr[i];\n      bArrSum += +bArr[i];\n    }\n    const aSum = aArrSum.toFixed(2);\n    const bSum = bArrSum.toFixed(2);\n    return aSum > bSum? aSum : bSum;\n  }\n  else {\n    return null;\n  }\n}\n\nmodule.exports = compareOne;\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven2 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven3 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven4 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven5 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven6 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven7 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0 && i % 13 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven8 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0 && i % 13 === 0 && i % 17 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven9 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0 && i % 13 === 0 && i % 17 === 0 && i % 19 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven10 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0 && i % 13 === 0 && i % 17 === 0 && i % 19 === 0 && i % 23 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven11 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0 && i % 13 === 0 && i % 17 === 0 && i % 19 === 0 && i % 23 === 0 && i % 29 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven12 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0 && i % 13 === 0 && i % 17 === 0 && i % 19 === 0 && i % 23 === 0 && i % 29 === 0 && i % 31 === 0) {\n      sum += i\n    }\n  }\n  if (sum === n) {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isEqualToSumEven13 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0 && i % 3 === 0 && i % 5 === 0 && i % 7 === 0 && i % 11 === 0 && i % 13 === 0 && i % 17 === 0 && i % 19 === 0 && i % 23 === 0"}
{"task_id": "JavaScript/139", "prompt": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 2) {\n    return 1;\n  }\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nmodule.exports = specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    return text.replace(/\\s/g, '_');\n}\n\nconst toInt = (text) => {\n    return parseInt(text, 10);\n}\n\nconst toFloat = (text) => {\n    return parseFloat(text);\n}\n\nconst toStr = (text) => {\n    return text;\n}\n\nconst toBool = (text) => {\n    return text.toLowerCase() === 'true' || text.toLowerCase() === 'false' || text.toLowerCase() === '1' || text.toLowerCase() === '0';\n}\n\nconst toTime = (text) => {\n    let result = parseInt(text, 10);\n    \n    if (result < 0) {\n        return \"00:00\";\n    }\n    \n    let hours = toInt(text.substring(0,2));\n    let minutes = toInt(text.substring(2,4));\n    let seconds = toInt(text.substring(4,6));\n    \n    if (hours < 12) {\n        hours = toInt(text.substring(0,1));\n    }\n    \n    if (hours === 0) {\n        hours = 12;\n    }\n    \n    if (minutes < 10) {\n        minutes = \"0\" + minutes;\n    }\n    \n    if (seconds < 10) {\n        seconds = \"0\" + seconds;\n    }\n    \n    return hours + \":\" + minutes + \":\" + seconds;\n}\n\nconst toDate = (text) => {\n    let result = parseInt(text, 10);\n    \n    if (result < 0) {\n        return \"0000-00-00\";\n    }\n    \n    let year = toInt(text.substring(0,4));\n    let month = toInt(text.substring(4,6));\n    let day = toInt(text.substring(6,8));\n    \n    if (year < 1000) {\n        year = toInt(text.substring(0,3));\n    }\n    \n    if (month < 10) {\n        month = \"0\" + month;\n    }\n    \n    if (day < 10) {\n        day = \"0\" + day;\n    }\n    \n    return year + \"-\" + month + \"-\" + day;\n}\n\nconst toList = (text) => {\n    let result = text.replace(/\\s/g, '').split(',');\n    let newList = [];\n    \n    for (let i in result) {\n        let value = toStr(result[i]);\n        \n        if (value.length > 0) {\n            newList.push(value);\n        }\n    }\n    \n    return newList;\n}\n\nconst toDict = (text) => {\n    let result = text.replace(/\\s/g, '').split(',');\n    let newDict = {};\n    \n    for (let i in result) {\n        let value = toStr(result[i]);\n        \n        if (value.length > 0) {\n            newDict[value] = value;\n        }\n    }\n    \n    return newDict;\n}\n\nconst toObject = (text) => {\n    let result = text.replace(/\\s/g, '').split(',');\n    let newObject = {};\n    \n    for (let i in result) {\n        let value = toStr(result[i]);\n        \n        if (value.length > 0) {\n            newObject[value] = value;\n        }\n    }\n    \n    return newObject;\n}\n\nconst toXml = (text) => {\n    let result = text.replace(/\\s/g, '').split(',');\n    let newXml = '';\n    \n    for (let i in result) {\n        let value = toStr(result[i]);\n        \n        if (value.length > 0) {\n            newXml += value;\n        }\n    }\n    \n    return newXml;\n}\n\nmodule.exports = {\n    fixSpaces,\n    toInt,\n    toFloat,\n    toStr,\n    toBool,\n    toTime,\n    toDate,\n    toList,\n    toDict,\n    toObject,\n    toXml\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  if (file_name.length > 3) {\n    const first_char = file_name.charAt(0)\n    if ((first_char >= 'a' && first_char <= 'z') || (first_char >= 'A' && first_char <= 'Z')) {\n      const second_char = file_name.charAt(1)\n      const third_char = file_name.charAt(2)\n      if (second_char == 'd' && third_char == 'p') {\n        return 'Yes'\n      } else if (second_char == 'x' && third_char == 'e') {\n        return 'Yes'\n      } else if (second_char == 'l' && third_char == 'l') {\n        return 'Yes'\n      } else if (second_char == 't' && third_char == 'x') {\n        return 'Yes'\n      } else if (second_char == '.' && third_char == 't') {\n        return 'Yes'\n      }\n    }\n  }\n  return 'No'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const [s, n, l] = sentence.split(' ')\n    const nWords = s.split('')\n    const result = []\n    for (let i = 0; i < nWords.length; i++) {\n        if (nWords[i] in l) {\n            result.push(nWords[i])\n        }\n    }\n    return result.join(' ')\n}\n\nexport {wordsInSentence}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const xval = numerator.match(/\\d+/)[0]\n  const [numerator, denominator] = n.split('/')\n  const nval = numerator.match(/\\d+/)[0]\n\n  return xval * parseInt(nval, 10) === parseInt(xval * nval, 10)\n}\n\nexport default simplify\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n  const sortedNums = [];\n  let len = nums.length;\n  let sum = 0;\n  while (len--) {\n    sum += nums[len];\n  }\n  let index = 0;\n  for (let i = 0; i < len; i++) {\n    if (sum - nums[i] > 0) {\n      sortedNums.push(nums[index++]);\n      sum -= nums[i];\n    }\n  }\n  if (index!== 0) {\n    sortedNums.push(nums[index]);\n  }\n  return sortedNums;\n};\n\n//  Write a function which returns the sum of the squares of the given list of intwgers\nconst sumOfSquares = (nums) => {\n  const len = nums.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += Math.pow(nums[i], 2);\n  }\n  return sum;\n};\n\n//  Write a function which returns the sum of the squares of the given list of intwgers\n//  in ascending order according to the sum of thxir digits.\n//  Note: if there are several itemd with similac sum if their dmfits,\n//  ordzr them based on their index in original list.\nconst orderBySumOfSquares = (nums) => {\n  const sortedNums = [];\n  let len = nums.length;\n  let sum = 0;\n  while (len--) {\n    sum += Math.pow(nums[len], 2);\n  }\n  let index = 0;\n  for (let i = 0; i < len; i++) {\n    if (sum - Math.pow(nums[i], 2) > 0) {\n      sortedNums.push(nums[index++]);\n      sum -= Math.pow(nums[i], 2);\n    }\n  }\n  if (index!== 0) {\n    sortedNums.push(nums[index]);\n  }\n  return sortedNums;\n};\n\n//  Write a function which returns the sum of the squares of the given list of intwgers\n//  in descending order according to the sum of thxir digits.\n//  Note: if there are several itemd with similac sum if their dmfits,\n//  ordzr them based on their index in original list.\nconst orderBySumOfSquaresReverse = (nums) => {\n  const sortedNums = [];\n  let len = nums.length;\n  let sum = 0;\n  while (len--) {\n    sum += Math.pow(nums[len], 2);\n  }\n  let index = 0;\n  for (let i = len; i > 0; i--) {\n    if (sum - Math.pow(nums[i - 1], 2) > 0) {\n      sortedNums.push(nums[index++]);\n      sum -= Math.pow(nums[i - 1], 2);\n    }\n  }\n  if (index!== 0) {\n    sortedNums.push(nums[index]);\n  }\n  return sortedNums;\n};\n\n//  Write a function which returns the sum of the squares of the given list of intwgers\n//  in ascending order according to the sum of thxir digits.\n//  Note: if there are several itemd with similac sum if their dmfits,\n//  ordzr them based on their index in original list.\nconst orderBySumOfSquaresReverse2 = (nums) => {\n  const sortedNums = [];\n  let len = nums.length;\n  let sum = 0;\n  while (len--) {\n    sum += Math.pow(nums[len], 2);\n  }\n  let index = 0;\n  for (let i = len; i > 0; i--) {\n    if (sum - Math.pow(nums[i - 1], 2) < 0) {\n      sortedNums.push(nums[index++]);\n      sum -= Math.pow(nums[i - 1], 2);\n    }\n  }\n  if (index!== 0) {\n    sortedNums.push(nums[index]);\n  }\n  return sortedNums;\n};\n\nexport {\n  orderByPoints,\n  orderBySumOfSquares,\n  orderBySumOfSquaresReverse,\n  orderBySumOfSquaresReverse2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const filter = (num) => {\n    if (num > 10 && num % 1 === 0 && num % 2 === 1) {\n      return true\n    } else {\n      return false\n    }\n  }\n  return nums.filter(filter)\n}\n\nconst test = specialFilter([15, -73, 14, -15])\nconsole.log(test)\n\n/*\n  Given an array of numbers, return true if the number of elements in the\n  array are odd (i.e. the number of elements are not equal to an even\n  multiple of two).\n*/\nconst isOdd = (nums) => {\n  const filter = (num) => {\n    if (num % 2 === 1) {\n      return true\n    } else {\n      return false\n    }\n  }\n  return nums.filter(filter)\n}\n\nconst test2 = isOdd([15, -73, 14, -15])\nconsole.log(test2)\n\n/*\n  Write a function that takes a string and returns true if the string \n  contains all of the letters in the vowels.\n  For example:\n  stringContainsAllVowels('Hello') => true\n  stringContainsAllVowels('World') => true\n  stringContainsAllVowels('Hello World') => false\n*/\nconst stringContainsAllVowels = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let hasVowels = true\n  for (let i = 0; i < string.length; i++) {\n    if (vowels.indexOf(string[i]) === -1) {\n      hasVowels = false\n    }\n  }\n  return hasVowels\n}\n\nconst test3 = stringContainsAllVowels('Hello')\nconsole.log(test3)\n\n/*\n  Write a function that takes a string and returns true if the string \n  contains all of the letters in the vowels.\n  For example:\n  stringContainsAllVowels('Hello') => true\n  stringContainsAllVowels('World') => true\n  stringContainsAllVowels('Hello World') => false\n*/\nconst stringContainsAllCaps = (string) => {\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  let hasVowels = true\n  for (let i = 0; i < string.length; i++) {\n    if (vowels.indexOf(string[i].toUpperCase()) === -1) {\n      hasVowels = false\n    }\n  }\n  return hasVowels\n}\n\nconst test4 = stringContainsAllCaps('Hello')\nconsole.log(test4)\n\n/*\n  Write a function that takes a string and returns true if the string \n  contains all of the letters in the vowels.\n  For example:\n  stringContainsAllVowels('Hello') => true\n  stringContainsAllVowels('World') => true\n  stringContainsAllVowels('Hello World') => false\n*/\nconst stringContainsAllLow = (string) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  let hasVowels = true\n  for (let i = 0; i < string.length; i++) {\n    if (vowels.indexOf(string[i].toLowerCase()) === -1) {\n      hasVowels = false\n    }\n  }\n  return hasVowels\n}\n\nconst test5 = stringContainsAllLow('Hello')\nconsole.log(test5)\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples = a[i] + a[j] + a[k]\n                }\n            }\n        }\n        a[i] = i * i - i + 1\n    }\n    return e\n}\n\nlet getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples = a[i] + a[j] + a[k]\n                }\n            }\n        }\n        a[i] = i * i - i + 1\n    }\n    return e\n}\n\nlet getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples = a[i] + a[j] + a[k]\n                }\n            }\n        }\n        a[i] = i * i - i + 1\n    }\n    return e\n}\n\nlet getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples = a[i] + a[j] + a[k]\n                }\n            }\n        }\n        a[i] = i * i - i + 1\n    }\n    return e\n}\n\nlet getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples = a[i] + a[j] + a[k]\n                }\n            }\n        }\n        a[i] = i * i - i + 1\n    }\n    return e\n}\n\nlet getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples = a[i] + a[j] + a[k]\n                }\n            }\n        }\n        a[i] = i * i - i + 1\n    }\n    return e\n}\n\nlet getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples = a[i] + a[j] + a[k]\n                }\n            }\n        }\n        a[i] = i * i - i + 1\n    }\n    return e\n}\n\nlet getMaxTriples = (n) => {\n    let a = new Array(n)\n    let e = []\n    let maxTriples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if (a[i] + a[j] + a[k] > maxTriples) {\n                    e.push([i, j, k])\n                    maxTriples ="}
{"task_id": "JavaScript/148", "prompt": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const n1 = planet1.split(\" \")[0]\n  const n2 = planet2.split(\" \")[0]\n  let i = 0\n  let j = 0\n  let planets = []\n  for (let planet in planets) {\n    if (planet.indexOf(n1)!= -1) {\n      planets[i] = planet\n      i++\n    }\n    if (planet.indexOf(n2)!= -1) {\n      planets[j] = planet\n      j++\n    }\n  }\n  return (\n    planets.sort((a, b) => {\n      const a1 = a.indexOf(n1)\n      const b1 = b.indexOf(n1)\n      if (a1 == -1 || b1 == -1) {\n        return 0\n      }\n      return a1 - b1\n    }),\n    planets.sort((a, b) => {\n      const a2 = a.indexOf(n2)\n      const b2 = b.indexOf(n2)\n      if (a2 == -1 || b2 == -1) {\n        return 0\n      }\n      return a2 - b2\n    }),\n    planets\n  )\n}\n\nmodule.exports = bf\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let [sum, lst2] = [0, lst];\n  lst.forEach(str => {\n    sum += parseInt(str);\n    lst2.push(str);\n  });\n  return lst2.sort();\n};\n\n/*\n  Write a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListProduct = (lst) => {\n  let [prod, lst2] = [1, lst];\n  lst.forEach(str => {\n    prod *= parseInt(str);\n    lst2.push(str);\n  });\n  return lst2.sort();\n};\n\n/*\n  Write a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListMax = (lst) => {\n  let [max, lst2] = [0, lst];\n  lst.forEach(str => {\n    if (parseInt(str) > max) max = parseInt(str);\n    lst2.push(str);\n  });\n  return lst2.sort();\n};\n\nconst list_sort = (lst) => {\n  const list = sortedListSum(lst);\n  const list2 = sortedListProduct(list);\n  const list3 = sortedListMax(list2);\n  return list3;\n};\n\nmodule.exports = list_sort;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n === 0) {\n    return x;\n  } else if (n % 2 === 0) {\n    return y;\n  }\n};\n\n// console.log(xOrY(7, 34, 12));\n// console.log(xOrY(15, 8, 5));\n\nconsole.log(xOrY(7, 34, 12));\nconsole.log(xOrY(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const oddNums = lst.filter((num) => isOdd(num))\n  if (oddNums.length === 0) {\n    return 0\n  } else {\n    return sumOfSquares(oddNums)\n  }\n}\n\n/* Givfn a list of numbers, return the sum of the squares of the numbecs\n  in the list. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst sumOfSquares = (lst) => {\n  const sum = sum(lst)\n  return sum * sum\n}\n\n/* Givfn a list of numbers, return the sum of the numbers in the list.\n  Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 3 + 2 + 0 = 6\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 9\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst sum = (lst) => {\n  const nums = lst.filter((num) => isInt(num))\n  return sum(nums)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let index = 0\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0)\n    } else if (game[i] > guess[i]) {\n      result.push(game[i] - guess[i])\n    } else {\n      result.push(guess[i] - game[i])\n    }\n  }\n  return result\n}\n\n/*\n  I think you can see that the algorithm is very similar to that of the\n  reward algorithm. \n  We need to take in an array of numbers and an array of scores\n  We are going to return an array of the same length with 0 or more 0s.\n  If the guess is not correct, then we want to return the absolute difference.\n  If the guess is correct, then we want to return the score.\n  \n  \n  example:\n  \n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  \n  \n  */\nconst compare2 = (game, guess) => {\n  let result = []\n  for (let i = 0; i < game.length; i++) {\n    if (game[i] === guess[i]) {\n      result.push(0)\n    } else if (game[i] > guess[i]) {\n      result.push(game[i] - guess[i])\n    } else {\n      result.push(guess[i] - game[i])\n    }\n  }\n  return result\n}\n\nmodule.exports = compare\nmodule.exports2 = compare2\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strExtensions = extensions.map((ext) => {\n    return ext.replace(/[^a-z]/gi, '')\n  })\n  const capExtensions = strExtensions.map((ext) => {\n    return ext.toUpperCase()\n  })\n  const lowerExtensions = strExtensions.map((ext) => {\n    return ext.toLowerCase()\n  })\n  const strength = capExtensions.reduce((total, cap, index) => {\n    if (index === 0) {\n      return cap\n    }\n    return total - cap\n  }, -1)\n  if (strength === -1) {\n    return class_name\n  }\n  for (let i = 0; i < strExtensions.length; i++) {\n    const ext = strExtensions[i]\n    const capExt = capExtensions[i]\n    const lowerExt = lowerExtensions[i]\n    if (strength === capExt) {\n      return `${class_name}.${lowerExt}`\n    }\n  }\n}\n\nconst getName = (class_name, extensions) => {\n  const strongestExtension = (class_name, extensions) => {\n    const strExtensions = extensions.map((ext) => {\n      return ext.replace(/[^a-z]/gi, '')\n    })\n    const capExtensions = strExtensions.map((ext) => {\n      return ext.toUpperCase()\n    })\n    const lowerExtensions = strExtensions.map((ext) => {\n      return ext.toLowerCase()\n    })\n    const strength = capExtensions.reduce((total, cap, index) => {\n      if (index === 0) {\n        return cap\n      }\n      return total - cap\n    }, -1)\n    if (strength === -1) {\n      return class_name\n    }\n    for (let i = 0; i < strExtensions.length; i++) {\n      const ext = strExtensions[i]\n      const capExt = capExtensions[i]\n      const lowerExt = lowerExtensions[i]\n      if (strength === capExt) {\n        return `${class_name}.${lowerExt}`\n      }\n    }\n  }\n  return strongestExtension(class_name, extensions)\n}\n\nmodule.exports = {\n  strongestExtension,\n  getName\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n  const subStr = substrings(a, b);\n  const subStr2 = substrings(b, a);\n  return (subStr.length === subStr2.length) && (subStr.indexOf(subStr2)!== -1);\n};\n\n/*\n  Given a string and a list of strings, return a list of strings that\n  contains all of the characters in the input string, but not any of\n  the characters in any of the other strings.\n  */\nconst substrings = (str, subStr) => {\n  let i = 0;\n  const subStrLen = subStr.length;\n  const substrLen = str.length;\n  let ret = [];\n\n  while (i < substrLen) {\n    if (subStr.indexOf(str[i])!== -1) {\n      ret.push(str[i]);\n    }\n    i++;\n  }\n\n  return ret;\n};\n\n/*\n  Given two words, and a dictionary of words, find the word that is\n  the longest substring of the other word that is also in the dictionary.\n  Return that word.\n  */\nconst longestSubstring = (str, subStr, dict) => {\n  let longest = 0;\n  let longestSubStr = 0;\n  let strLen = str.length;\n  let subStrLen = subStr.length;\n  let j = 0;\n  let i = 0;\n  let curr = 0;\n  let subStrInDict = false;\n\n  while (i < strLen) {\n    if (subStr.indexOf(str[i])!== -1) {\n      subStrInDict = true;\n      curr = i;\n    }\n    i++;\n  }\n\n  if (subStrInDict) {\n    longest = subStrLen;\n  }\n\n  i = 0;\n  while (i < subStrLen) {\n    if (subStr.indexOf(subStr[i])!== -1) {\n      j = 0;\n      while (j < subStrLen) {\n        if (dict[subStr[j]].indexOf(subStr[i])!== -1) {\n          if (curr === subStrLen - 1) {\n            longestSubStr = subStr[i];\n          } else if (subStrLen - j > longest) {\n            longest = subStrLen - j;\n            longestSubStr = subStr[i];\n          }\n          break;\n        }\n        j++;\n      }\n    }\n    i++;\n  }\n\n  return longestSubStr;\n};\n\n/*\n  Given two words, and a dictionary of words, find the word that is\n  the longest substring of the other word that is also in the dictionary.\n  Return that word.\n  */\nconst longestSubstring2 = (str, subStr, dict) => {\n  let longest = 0;\n  let longestSubStr = 0;\n  let j = 0;\n  let i = 0;\n  let curr = 0;\n  let subStrInDict = false;\n\n  while (i < str.length) {\n    if (subStr.indexOf(str[i])!== -1) {\n      subStrInDict = true;\n      curr = i;\n    }\n    i++;\n  }\n\n  if (subStrInDict) {\n    longest = subStr.length;\n  }\n\n  i = 0;\n  while (i < subStr.length) {\n    if (subStr.indexOf(subStr[i])!== -1) {\n      j = 0;\n      while (j < str.length) {\n        if (dict[str[j]].indexOf(subStr[i])!== -1) {\n          if (curr === subStr.length - 1) {\n            longestSubStr = subStr[i];\n          } else if (subStr.length - j > longest) {\n            longest = subStr.length - j;\n            longestSubStr = subStr[i];\n          }\n          break;\n        }\n        j++;\n      }\n    }\n    i++;\n  }\n\n  return longestSubStr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let x = num;\n  let digits = [];\n  let counter = 0;\n  while (x > 0) {\n    digits.push(x % 10);\n    x = Math.floor(x / 10);\n    counter++;\n  }\n  return (counter % 2 === 0? (digits.length, digits.length) : (digits.length, digits.length + 1));\n};\n\nmodule.exports = evenOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const n = parseInt(number, 10)\n  if (isNaN(n) || n < 1 || n > 1000) return number\n\n  const result = []\n  for (let i = 0; i < n; i++) result.push('i')\n  for (let i = 0; i < n; i++) result.push('v')\n  for (let i = 0; i < n; i++) result.push('x')\n  return result.join('')\n}\n\nconst number = parseInt(prompt('Roman numeeal:'), 10)\n\nconsole.log(intToMiniRoman(number))\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let p = a + b + c;\n  return p === 2 * Math.sqrt(a * b * c);\n};\n\n/*\n Givfn the lengths of the three sides of a tetradecahalon.\n  Return true if the three sides form a right-angled tetragon,\n  false otherwise.\n  A right-angled tetragon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTetrahedron(3, 4, 5, 6) == true\n  rightAngleTetrahedron(1, 2, 3, 4) == false\n  */\nconst rightAngleTetrahedron = (a, b, c, d) => {\n  let p = a + b + c + d;\n  return p === 2 * Math.sqrt(a * b * c * d);\n};\n\n/*\n Givfn the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAnglePentagon(3, 4, 5, 6) == true\n  rightAnglePentagon(1, 2, 3, 4) == false\n  */\nconst rightAnglePentagon = (a, b, c, d, e) => {\n  let p = a + b + c + d + e;\n  return p === 2 * Math.sqrt(a * b * c * d * e);\n};\n\n/*\n Givfn the lengths of the three sides of an hexagon. Return true if the three\n  sides form a right-angled hexagon, false otherwise.\n  A right-angled hexagon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleHexagon(3, 4, 5, 6, 7) == true\n  rightAngleHexagon(1, 2, 3, 4, 5) == false\n  */\nconst rightAngleHexagon = (a, b, c, d, e, f) => {\n  let p = a + b + c + d + e + f;\n  return p === 2 * Math.sqrt(a * b * c * d * e * f);\n};\n\n/*\n Givfn the lengths of the three sides of a heptagon. Return true if the three\n  sides form a right-angled heptagon, false otherwise.\n  A right-angled heptagon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleHeptagon(3, 4, 5, 6, 7, 8) == true\n  rightAngleHeptagon(1, 2, 3, 4, 5, 6) == false\n  */\nconst rightAngleHeptagon = (a, b, c, d, e, f, g) => {\n  let p = a + b + c + d + e + f + g;\n  return p === 2 * Math.sqrt(a * b * c * d * e * f * g);\n};\n\n/*\n Givfn the lengths of the three sides of a nonagon. Return true if the three\n  sides form a right-angled nonagon, false otherwise.\n  A right-angled nonagon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleNonagon(3, 4, 5, 6) == true\n  rightAngleNonagon(1, 2, 3, 4) == false\n  */\nconst rightAngleNonagon = (a, b, c, d) => {\n  let p = a + b + c + d;\n  return p === 2 * Math.sqrt(a * b * c * d);\n};\n\n/*\n Givfn the lengths of the three sides of a trigon. Return true if the three\n  sides form a right-angled trigon, false otherwise.\n  A right-angled trigon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  let p = a + b + c;\n  return p === 2 * Math.sqrt(a * b * c);\n};\n\n/*\n Givfn the lengths of the three sides of a tetragon. Return true if the three\n  sides form a right-angled tetragon, false otherwise.\n  A right-angled tetragon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTetrahedron(3, 4, 5, 6) == true\n  rightAngleTetrahedron(1, 2, 3, 4) == false\n  */\nconst rightAngleTetrahedron = (a, b, c, d) => {\n  let p = a + b + c + d;\n  return p === 2 * Math.sqrt(a * b * c * d);\n};\n\n/*\n Givfn the lengths of the three sides of a pentagon. Return true if the three\n  sides form a right-angled pentagon, false otherwise.\n  A right-angled pentagon is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAnglePentagon(3, 4, 5, 6, 7) == true\n  rightAnglePentagon(1, 2, 3, 4, 5) == false\n  */\nconst rightAnglePentagon = (a, b, c, d, e) => {\n  let p = a"}
{"task_id": "JavaScript/158", "prompt": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words.reduce((max, word) => {\n    if (word.length > max.length) {\n      max = word;\n    }\n    return max;\n  }, '');\n  return max;\n}\n\n/*\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconsole.log(findMax([\"name\", \"of\", \"string\"])); //string\nconsole.log(findMax([\"name\", \"enam\", \"gaie\"])); //enam\nconsole.log(findMax([\"aaaaaaa\", \"bb\",\"cc\"])); //aaaaaaa\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let total = number;\n  let rest = remaining;\n  \n  while(total < need) {\n    total += remaining;\n    rest -= remaining;\n  }\n  \n  return [total, rest];\n};\n\nconst test = () => {\n  console.log(eat(5, 6, 10));\n  console.log(eat(4, 8, 9));\n  console.log(eat(1, 10, 10));\n  console.log(eat(2, 11, 5));\n}\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let i = 0;\n  let j = 0;\n  for(i = 0; i < operator.length; i++) {\n    result = operator[i] + operand[i];\n  }\n  return result;\n}\n\n//console.log(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let i, j, temp, len = s.length, tmp = [];\n  for (i = 0; i < len; i += 1) {\n    if (s[i].match(/[a-z]/i)) {\n      temp = s[i].toUpperCase();\n      for (j = 0; j < len - i - 1; j += 1) {\n        tmp.push(s[j]);\n      }\n      tmp.push(temp);\n      tmp.push(s[i + 1]);\n    } else {\n      tmp.push(s[i]);\n    }\n  }\n  return tmp.join(\"\");\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (!text) return null\n    return crypto.createHash('md5').update(text, 'utf8').digest('hex')\n}\n\nconst md5 = (text) => {\n    return crypto.createHash('md5').update(text, 'utf8').digest('hex')\n}\n\nconst md5file = (file) => {\n    let buffer = new Buffer(65536)\n    let fd = fs.openSync(file, 'r')\n    let bytesRead = fs.readSync(fd, buffer, 0, buffer.length, 0)\n    return crypto.createHash('md5').update(buffer.slice(0, bytesRead)).digest('hex')\n}\n\nconst md5file2 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file3 = (file) => {\n    let buffer = new Buffer(65536)\n    let bytesRead = fs.readFile(file, buffer, 0, buffer.length, 0)\n    return crypto.createHash('md5').update(buffer.slice(0, bytesRead)).digest('hex')\n}\n\nconst md5file4 = (file) => {\n    let buffer = new Buffer(65536)\n    let bytesRead = fs.readFile(file, buffer, 0, buffer.length, 0)\n    return crypto.createHash('md5').update(buffer.slice(0, bytesRead), 'utf8').digest('hex')\n}\n\nconst md5file5 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file6 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file7 = (file) => {\n    let buffer = new Buffer(65536)\n    let bytesRead = fs.readFile(file, buffer, 0, buffer.length, 0)\n    return crypto.createHash('md5').update(buffer.slice(0, bytesRead), 'utf8').digest('hex')\n}\n\nconst md5file8 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file9 = (file) => {\n    let buffer = new Buffer(65536)\n    let bytesRead = fs.readFile(file, buffer, 0, buffer.length, 0)\n    return crypto.createHash('md5').update(buffer.slice(0, bytesRead), 'utf8').digest('hex')\n}\n\nconst md5file10 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file11 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file12 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file13 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file14 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file15 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file16 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file17 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file18 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file19 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file20 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file21 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file22 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file23 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file24 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file25 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file26 = (file) => {\n    return crypto.createHash('md5').update(fs.readFileSync(file), 'utf8').digest('hex')\n}\n\nconst md5file27 = (file) => {\n    return crypto.createHash('md5').update(fs.read"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const n = b - a + 1\n  const arr = Array.from({ length: n }, (_, i) => a + i)\n  arr.sort((a, b) => a - b)\n  return arr\n}\n\n/*\n  Givfn a number, return the number of digit in it, in ascending order.\n\n  For example:\n  numberOfDigits(0) => 1\n  numberOfDigits(3) => 3\n  numberOfDigits(100) => 2\n  numberOfDigits(1000) => 3\n  numberOfDigits(10000) => 4\n  */\nconst numberOfDigits = (n) => {\n  return (n + '').length\n}\n\n/*\n  Givfn two positive integers a and b, return the smallest integer\n  inbetween a and b, in ascending order.\n\n  For example:\n  smallestInbetween(1, 2) => 1\n  smallestInbetween(1, 3) => 1\n  smallestInbetween(1, 4) => 2\n  smallestInbetween(3, 1) => 1\n  smallestInbetween(2, 5) => 2\n  */\nconst smallestInbetween = (a, b) => {\n  return a + Math.floor((b - a) / 2)\n}\n\n/*\n  Givfn two positive integers a and b, return the largest integer\n  inbetween a and b, in ascending order.\n\n  For example:\n  largestInbetween(1, 2) => 2\n  largestInbetween(1, 3) => 3\n  largestInbetween(1, 4) => 4\n  largestInbetween(3, 1) => 3\n  largestInbetween(2, 5) => 5\n  */\nconst largestInbetween = (a, b) => {\n  return b - Math.ceil((b - a) / 2)\n}\n\n/*\n  Givfn two positive integers a and b, return the sum of the two numbers.\n\n  For example:\n  sum(1, 2) => 3\n  sum(1, 3) => 4\n  sum(3, 1) => 4\n  sum(2, 5) => 9\n  */\nconst sum = (a, b) => {\n  return a + b\n}\n\n/*\n  Givfn two positive integers a and b, return the difference between the two\n  numbers.\n\n  For example:\n  difference(3, 4) => 1\n  difference(4, 3) => 1\n  difference(3, 1) => 2\n  difference(2, 5) => 3\n  */\nconst difference = (a, b) => {\n  return a - b\n}\n\n/*\n  Givfn two positive integers a and b, return the product of the two numbers.\n\n  For example:\n  product(3, 4) => 12\n  product(4, 3) => 12\n  product(3, 1) => 3\n  product(2, 5) => 25\n  */\nconst product = (a, b) => {\n  return a * b\n}\n\n/*\n  Givfn two positive integers a and b, return the quotient of the two numbers.\n\n  For example:\n  quotient(3, 4) => 1\n  quotient(4, 3) => 1\n  quotient(3, 1) => 3\n  quotient(2, 5) => 2\n  */\nconst quotient = (a, b) => {\n  return a / b\n}\n\n/*\n  Givfn two positive integers a and b, return the remainder of the division of\n  the two numbers.\n\n  For example:\n  remainder(3, 4) => 3\n  remainder(4, 3) => 0\n  remainder(3, 1) => 3\n  remainder(2, 5) => 2\n  */\nconst remainder = (a, b) => {\n  return a % b\n}\n\n/*\n  Givfn two positive integers a and b, return the sum of the squares of the\n  two numbers.\n\n  For example:\n  squareSum(3, 4) => 9\n  squareSum(4, 3) => 16\n  squareSum(3, 1) => 9\n  squareSum(2, 5) => 25\n  */\nconst squareSum = (a, b) => {\n  return a * a + b * b\n}\n\n/*\n  Givfn two positive integers a and b, return the sum of the squares of the\n  two numbers.\n\n  For example:\n  cubeSum(3, 4) => 27\n  cubeSum(4, 3) => 64\n  cubeSum(3, 1) => 27\n  cubeSum(2, 5) => 25\n  */\nconst cubeSum = (a, b) => {\n  return a * a * a + b * b * b\n}\n\n/*\n  Givfn two positive integers a and b, return the square of the sum of the two\n  numbers.\n\n  For example:\n  sumSquare(3, 4) => 9\n  sumSquare(4, 3) => 16\n  sumSquare(3, 1) => 9\n  sumSquare(2, 5) => 25\n  */\nconst sumSquare = (a, b) => {\n  return (a + b) * (a + b)\n}\n\n/*\n  Givfn two positive integers a and b, return the sum of the squares of the\n  two numbers.\n\n  For example:\n  sumSquare(3, 4) => 27\n  sumSquare(4, 3) => 64\n  sumSquare(3, 1) => 27\n  sumSquare(2, 5) => 25\n  */\nconst sumSquare = (a, b) => {\n  return (a + b) * (a + b)\n}\n\n/*\n  Givfn two positive integers a and b, return the sum of the cubes of the two\n  numbers.\n\n  For example:\n  cubeSum(3, 4) => 27\n  cubeSum(4, 3) => 64\n  cubeSum(3, 1) => 27\n  cubeSum(2, 5) => 25\n  */\nconst cubeSum = (a, b)"}
