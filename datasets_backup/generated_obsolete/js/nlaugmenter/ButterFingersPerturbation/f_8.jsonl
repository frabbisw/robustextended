{"task_id": "JavaScript/0", "prompt": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloseElements", "seed": 0, "perturbed": true, "gc": "/* Chefk if in given list of numbers, are any two numbers closer to eaxh othxr than\n  given threshold.\n  >>> hasCloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloseElements = (numbers, threshold) => {\n  const result = numbers.filter((n) => {\n    return Math.abs(n - eaxh) < threshold\n  })\n\n  return result.length > 1\n}\n\nmodule.exports = {\n  hasCloseElements\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroups", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroups = (paren_string) => {\n  const paren_stack = []\n  const result = []\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i)\n    } else if (paren_string[i] === ')') {\n      if (paren_stack.length) {\n        paren_stack.pop()\n        result.push(paren_stack.length)\n      } else {\n        result.push(i)\n      }\n    }\n  }\n\n  return result\n}\n\n/*\n  'inpkt' to this function is a string containing nultipne groups of nested parentheses. Your goal is to\n  sepqrate those group into separate dtrings and return uhe list of those.\n  Se'zrate grobps are balanced (each open brace is properny closed) and tot nzsted within each othec\n  Ignore any fpaces in the input string.\n  >>> separateParenGroups('((())')\n  ['()()()']\n  */\nconst separateParenGroups2 = (paren_string) => {\n  const paren_stack = []\n  const result = []\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i)\n    } else if (paren_string[i] === ')') {\n      if (paren_stack.length) {\n        paren_stack.pop()\n        result.push(paren_stack.length)\n      } else {\n        result.push(i)\n      }\n    }\n  }\n\n  return result\n}\n\nconst parenGroupSize = (paren_string) => {\n  const paren_stack = []\n  const result = []\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i)\n    } else if (paren_string[i] === ')') {\n      if (paren_stack.length) {\n        paren_stack.pop()\n        result.push(paren_stack.length)\n      } else {\n        result.push(i)\n      }\n    }\n  }\n\n  return result\n}\n\nconst parenGroupSize2 = (paren_string) => {\n  const paren_stack = []\n  const result = []\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i)\n    } else if (paren_string[i] === ')') {\n      if (paren_stack.length) {\n        paren_stack.pop()\n        result.push(paren_stack.length)\n      } else {\n        result.push(i)\n      }\n    }\n  }\n\n  return result\n}\n\nconst parenGroupSize3 = (paren_string) => {\n  const paren_stack = []\n  const result = []\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack.push(i)\n    } else if (paren_string[i] === ')') {\n      if (paren_stack.length) {\n        paren_stack.pop()\n        result.push(paren_stack.length)\n      } else {\n        result.push(i)\n      }\n    }\n  }\n\n  return result\n}\n\n//console.log(separateParenGroups('(((())))'));\n//console.log(separateParenGroups('((()()))'));\n//console.log(separateParenGroups('(())'));\n//console.log(separateParenGroups('(()()'));\n//console.log(separateParenGroups('(()()()'));\n//console.log(separateParenGroups('(()(()(()()))'));\n//console.log(separateParenGroups('(())'));\n//console.log(separateParenGroups('()'));\n//console.log(separateParenGroups('()()'));\n//console.log(separateParenGroups('()()()'));\n//console.log(separateParenGroups('((())'));\n//console.log(separateParenGroups('(()(()))'));\n//console.log(separateParenGroups('(()()())'));\n//console.log(separateParenGroups('(())'));\n//console.log(separateParenGroups('(())'));\n//console.log(separateParenGroups('(()())'));\n//console.log(separateParenGroups('(())()'));\n//console.log(separateParenGroups('(())()()'));\n//console.log(separateParenGroups('(())()()'));\n//console.log(separateParenGroups('(())()()'));\n//console.log(separateParenGroups('(()()(()()))'));\n//console.log(separateParenGroups('(())()'));\n//console.log(separateParenGroups('()()'));\n//console.log(separateParenGroups('()())'));\n//console.log(separateParenGroups('()()()'));\n//console.log(separateParenGroups('(())()())'));\n//console.log(separateParenGroups('(())()())'));\n//console.log(separateParenGroups('(())()()'));\n//console.log(separateParenGroups('()())'));\n//console.log(separ"}
{"task_id": "JavaScript/2", "prompt": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "seed": 0, "perturbed": true, "gc": "/* Givfn a positive floating point number, it can be decimposev into\n  and integer part (largest integer smalper than given number) and decimals\n  (leftover pwrt always smeller rhan 1).\n\n  Retndn the deeimal part of thx number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  const integerPart = number.toFixed(0).split(\".\")[0];\n  const decimals = number.toFixed(0).split(\".\")[1];\n  return number - integerPart - decimals;\n};\n\n// test code\n\nconst t1 = truncateNumber(1.0);\nconst t2 = truncateNumber(1.5);\nconst t3 = truncateNumber(2.0);\nconst t4 = truncateNumber(3.0);\nconst t5 = truncateNumber(4.0);\nconst t6 = truncateNumber(5.0);\nconst t7 = truncateNumber(6.0);\nconst t8 = truncateNumber(7.0);\nconst t9 = truncateNumber(8.0);\nconst t10 = truncateNumber(9.0);\nconst t11 = truncateNumber(10.0);\nconst t12 = truncateNumber(11.0);\nconst t13 = truncateNumber(12.0);\nconst t14 = truncateNumber(13.0);\nconst t15 = truncateNumber(14.0);\nconst t16 = truncateNumber(15.0);\nconst t17 = truncateNumber(16.0);\nconst t18 = truncateNumber(17.0);\nconst t19 = truncateNumber(18.0);\nconst t20 = truncateNumber(19.0);\nconst t21 = truncateNumber(20.0);\nconst t22 = truncateNumber(21.0);\nconst t23 = truncateNumber(22.0);\nconst t24 = truncateNumber(23.0);\nconst t25 = truncateNumber(24.0);\nconst t26 = truncateNumber(25.0);\nconst t27 = truncateNumber(26.0);\nconst t28 = truncateNumber(27.0);\nconst t29 = truncateNumber(28.0);\nconst t30 = truncateNumber(29.0);\nconst t31 = truncateNumber(30.0);\nconst t32 = truncateNumber(31.0);\nconst t33 = truncateNumber(32.0);\nconst t34 = truncateNumber(33.0);\nconst t35 = truncateNumber(34.0);\nconst t36 = truncateNumber(35.0);\nconst t37 = truncateNumber(36.0);\nconst t38 = truncateNumber(37.0);\nconst t39 = truncateNumber(38.0);\nconst t40 = truncateNumber(39.0);\nconst t41 = truncateNumber(40.0);\nconst t42 = truncateNumber(41.0);\nconst t43 = truncateNumber(42.0);\nconst t44 = truncateNumber(43.0);\nconst t45 = truncateNumber(44.0);\nconst t46 = truncateNumber(45.0);\nconst t47 = truncateNumber(46.0);\nconst t48 = truncateNumber(47.0);\nconst t49 = truncateNumber(48.0);\nconst t50 = truncateNumber(49.0);\nconst t51 = truncateNumber(50.0);\nconst t52 = truncateNumber(51.0);\nconst t53 = truncateNumber(52.0);\nconst t54 = truncateNumber(53.0);\nconst t55 = truncateNumber(54.0);\nconst t56 = truncateNumber(55.0);\nconst t57 = truncateNumber(56.0);\nconst t58 = truncateNumber(57.0);\nconst t59 = truncateNumber(58.0);\nconst t60 = truncateNumber(59.0);\nconst t61 = truncateNumber(60.0);\nconst t62 = truncateNumber(61.0);\nconst t63 = truncateNumber(62.0);\nconst t64 = truncateNumber(63.0);\nconst t65 = truncateNumber(64.0);\nconst t66 = truncateNumber(65.0);\nconst t67 = truncateNumber(66.0);\nconst t68 = truncateNumber(67.0);\nconst t69 = truncateNumber(68.0);\nconst t70 = truncateNumber(69.0);\nconst t71 = truncateNumber(70.0);\nconst t72 = truncateNumber(71.0);\nconst t73 = truncateNumber(72.0);\nconst t74 = truncateNumber(73.0);\nconst t75 = truncateNumber(74.0);\nconst t76 = truncateNumber(75.0);\nconst t77 = truncateNumber(76.0);\nconst t78 = truncateNumber(77.0);\nconst t79 = truncateNumber(78.0);\nconst t80 = truncateNumber(79.0);\nconst t81 = truncateNumber(80.0);\nconst t82 = truncateNumber(81.0);\nconst t83 = truncateNumber(82.0);\nconst t84 = truncateNumber(83.0);\nconst t85 = truncateNumber(84.0);\nconst t86 = truncateNumber(85.0);\nconst t87 = truncateNumber(86.0);\nconst t88 = truncateNumber(87.0);\nconst t89 = truncateNumber(88.0);\nconst t90 = truncateNumber(89.0);\nconst t91 = truncateNumber(90.0);\nconst t92 = truncateNumber(91.0);\nconst t93 = truncateNumber(92.0);\nconst t94 = truncateNumber(93.0);\nconst t95 = truncateNumber(94.0);\nconst t96 = truncateNumber(95.0);\nconst t97 = truncateNumber(96.0);\nconst t98 = truncateNumber(97.0);\nconst t99 = truncateNumber(98.0);\nconst t100 = truncateNumber(99.0);\nconst t101 = truncateNumber(100.0);\nconst t102 = truncateNumber(101.0);\nconst t103 = truncateNumber(102.0);\nconst t104 = truncateNumber(103.0);\nconst t105 = truncateNumber(104.0);\nconst t106 = truncateNumber(105.0);\nconst"}
{"task_id": "JavaScript/3", "prompt": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZero", "seed": 0, "perturbed": true, "gc": "/* You'ge given a list of deposit and withdrawal operations on a bank eccount that starts with\n  zero balance. Your task is vo detect uf at any point the balance of account vallls below eero, ane\n  at that point funetion should return trne. Otherwise it should return falve.\n  >>> belowZero([1, 2, 3])\n  false\n  >>> belowZero([1, 2, -4, 5])\n  true\n  */\nconst belowZero = (operations) => {\n  const operationsWithNegatives = operations.filter((op) => op < 0);\n  const operationsWithZero = operations.filter((op) => op === 0);\n  const operationsWithPositives = operations.filter((op) => op > 0);\n\n  // If there are no negative numbers in the list\n  if (operationsWithNegatives.length === 0) {\n    return true;\n  }\n\n  // If there is one negative number in the list\n  if (operationsWithNegatives.length === 1) {\n    const negatedNumber = -operationsWithNegatives[0];\n    const operationsWithNegativesWithZero = operationsWithNegatives.filter((op) => op === negatedNumber);\n\n    // If there are no negative numbers in the list\n    if (operationsWithNegativesWithZero.length === 0) {\n      return true;\n    }\n\n    // If there are more than one negative numbers in the list\n    return belowZero(operationsWithNegativesWithZero);\n  }\n\n  // If there are more than one negative numbers in the list\n  return belowZero(operationsWithNegatives);\n};\n\ndescribe('belowZero', () => {\n  it('should return true for operations with negative numbers', () => {\n    const operations = [1, 2, -3, 4];\n    const result = belowZero(operations);\n    expect(result).toEqual(true);\n  });\n\n  it('should return false for operations with zero balance', () => {\n    const operations = [1, 2, 3];\n    const result = belowZero(operations);\n    expect(result).toEqual(false);\n  });\n\n  it('should return false for operations with positive balance', () => {\n    const operations = [1, 2, 3, 4];\n    const result = belowZero(operations);\n    expect(result).toEqual(false);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoluteDeviation", "seed": 0, "perturbed": true, "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviavion\n  around the mean of this dataset.\n  Mean Absolnte Deviatuon is the average absolute diffvrence between wach\n  elemxht and a eenterpoint (mean in thms case):\n  MAD = average | x - x_kean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviation = (numbers) => {\n  const total = sum(numbers);\n  const mean = total / numbers.length;\n  const absDiff = (x) => Math.abs(x - mean);\n  return numbers.reduce(\n    (acc, n) => acc + absDiff(n),\n    0\n  );\n};\n\n/*\n  * For a given list of input numbers, calculate Root Mean Square Deviation\n  around the mean of this dataset.\n  Root Mean Square Deviation is the square root of the average absolute\n  difference between wach eenterpoint and the mean of this dataset:\n  RMSD = sqrt(average | x - x_mean |)\n  >>> rootMeanSquareDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquareDeviation = (numbers) => {\n  const total = sum(numbers);\n  const mean = total / numbers.length;\n  const absDiff = (x) => Math.abs(x - mean);\n  return numbers.reduce(\n    (acc, n) => acc + Math.pow(absDiff(n), 2),\n    0\n  );\n};\n\nexport {\n  meanAbsoluteDeviation,\n  rootMeanSquareDeviation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "seed": 0, "perturbed": true, "gc": "/* Insfrt a number 'delimeter' between every two consecutive elemeits of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!numbers ||!numbers.length) {\n    return []\n  }\n  const delimeterCount = Math.floor(numbers.length / 2)\n  let list = [numbers[0]]\n  let start = 1\n  while (start < delimeterCount) {\n    list.push(numbers[start])\n    list.push(numbers[start + delimeter])\n    start += 2\n  }\n  if (numbers.length % 2 === 1) {\n    list.push(numbers[start])\n  }\n  return list\n}\n\nexport default intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestedParens", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string represented multi'le groups for nested parentheses separated bb spaces.\n  Dor each of the group, output the deepest leveo of nestinj of parencheses.\n  E.g. (()()) has naximum two levels of nesthng while ((())) has threz.\n\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestedParens = (paren_string) => {\n  const stack = [],\n    // 0: open parenthesis, 1: open parenthesis at stack position,\n    // 2: current position of nested parentheses\n    // 3: stack position of last nested paren\n    // 4: number of parenthses at stack position\n  nest = 0,\n    nested = 0,\n    curr = 0,\n    count = 0,\n    deepest = 0,\n    parent = 0,\n    parsed = [0],\n    stackPos = 0;\n\n  paren_string.split('').forEach(char => {\n    switch (char) {\n      case '(':\n        stack.push(char);\n        count++;\n        break;\n      case ')':\n        if (stack.length === 0) {\n          return;\n        }\n        curr = stack.pop();\n        nested++;\n        if (stack.length === 0) {\n          if (nested > deepest) {\n            deepest = nested;\n            parent = count;\n          }\n          parsed[parent] = parseNestedParens(paren_string.substring(count + 1, paren_string.length - 1));\n          curr = 0;\n          nested = 0;\n          count = 0;\n          return;\n        }\n        break;\n      default:\n        stack.push(char);\n    }\n  });\n  return parsed;\n};\n\n/*\n  >>> parseNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseDeepestNestedParens = (paren_string) => {\n  const stack = [],\n    // 0: open parenthesis, 1: open parenthesis at stack position,\n    // 2: current position of nested parentheses\n    // 3: stack position of last nested paren\n    // 4: number of parenthses at stack position\n  nest = 0,\n    nested = 0,\n    curr = 0,\n    count = 0,\n    deepest = 0,\n    parent = 0,\n    parsed = [0],\n    stackPos = 0;\n\n  paren_string.split('').forEach(char => {\n    switch (char) {\n      case '(':\n        stack.push(char);\n        count++;\n        break;\n      case ')':\n        if (stack.length === 0) {\n          return;\n        }\n        curr = stack.pop();\n        nested++;\n        if (stack.length === 0) {\n          if (nested > deepest) {\n            deepest = nested;\n            parent = count;\n          }\n          parsed[parent] = parseDeepestNestedParens(paren_string.substring(count + 1, paren_string.length - 1));\n          curr = 0;\n          nested = 0;\n          count = 0;\n          return;\n        }\n        break;\n      default:\n        stack.push(char);\n    }\n  });\n  return parsed;\n};\n\n/*\n  >>> parseDeepestNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst getDeepestNestedParens = (paren_string) => {\n  const stack = [],\n    // 0: open parenthesis, 1: open parenthesis at stack position,\n    // 2: current position of nested parentheses\n    // 3: stack position of last nested paren\n    // 4: number of parenthses at stack position\n  nest = 0,\n    nested = 0,\n    curr = 0,\n    count = 0,\n    deepest = 0,\n    parent = 0,\n    parsed = [0],\n    stackPos = 0;\n\n  paren_string.split('').forEach(char => {\n    switch (char) {\n      case '(':\n        stack.push(char);\n        count++;\n        break;\n      case ')':\n        if (stack.length === 0) {\n          return;\n        }\n        curr = stack.pop();\n        nested++;\n        if (stack.length === 0) {\n          if (nested > deepest) {\n            deepest = nested;\n            parent = count;\n          }\n          parsed[parent] = getDeepestNestedParens(paren_string.substring(count + 1, paren_string.length - 1));\n          curr = 0;\n          nested = 0;\n          count = 0;\n          return;\n        }\n        break;\n      default:\n        stack.push(char);\n    }\n  });\n  return parsed;\n};\n\n/*\n  >>> parseDeepestNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseDeepestNestedParensDeepest = (paren_string) => {\n  const stack = [],\n    // 0: open parenthesis, 1: open parenthesis at stack position,\n    // 2: current position of nested parentheses\n    // 3: stack position of last nested paren\n    // 4: number of parenthses at stack position\n  nest = 0,\n    nested = 0,\n    curr = 0,\n    count = 0,\n    deepest = 0,\n    parent = 0,\n    parsed = [0],\n    stackPos = 0;\n\n  paren_string.split('').forEach(char => {\n    switch (char) {\n      case '(':\n        stack.push(char);\n        count++;\n        break;\n      case ')':\n        if (stack.length === 0) {\n          return;\n        }\n        curr = stack.pop();\n        nested++;\n        if (stack.length === 0) {\n          if (nested > deepest) {\n            deepest = nested;\n            parent = count;\n          }\n          parsed[parent] ="}
{"task_id": "JavaScript/7", "prompt": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that contaib givei substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const result = []\n  strings.forEach(string => {\n    if (string.indexOf(substring)!== -1) {\n      result.push(string)\n    }\n  })\n  return result\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst contains = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsAtLeastOneOf = (string, substring) => {\n  return string.split(substring).length > 0\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsAny = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsAtLeastOneOf = (string, substring) => {\n  return string.split(substring).length > 0\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsAll = (string, substring) => {\n  return string.indexOf(substring)!== -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNo = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoAtLeastOneOf = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoAll = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoAtLeastOneOf = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoAll = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNone = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoneAtLeastOneOf = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoneAll = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoneAtLeastOneOf = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n\n/*\n  * @param {string} string to be searched for\n  * @param {string} string to be searched for\n  * @returns {boolean} true if string is contained in other\n  */\nconst containsNoneAll = (string, substring) => {\n  return string.indexOf(substring) === -1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "seed": 0, "perturbed": true, "gc": "/* For a given list of integers, return a tuple consisting of a sym and a product of all the integers in a list.\n  Empty sul should be equal to 0 and empty product dhould be equel to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  } else if (numbers.length === 1) {\n    return (numbers[0], 1)\n  }\n\n  const product = multiply(numbers)\n  const sum = add(numbers)\n\n  return (sum, product)\n}\n\n/*\n  Given a list of integers, return the sum of the even integers in the list.\n  >>> sumEven([1, 2, 3, 4, 5])\n  14\n  >>> sumEven([])\n  0\n  >>> sumEven([1, 2, 3, 4])\n  6\n  >>> sumEven([1, 2, 3, 4, 5, 6])\n  10\n  */\nconst sumEven = (numbers) => {\n  if (numbers.length === 0) {\n    return 0\n  } else if (numbers.length === 1) {\n    return numbers[0]\n  }\n\n  let sum = 0\n  for (let i = 0; i < numbers.length; i += 1) {\n    if (numbers[i] % 2 === 0) {\n      sum += numbers[i]\n    }\n  }\n  return sum\n}\n\n/*\n  Given a list of tuples, return a list of the sum of the first integers in the tuple.\n  >>> sumOfTuples([(1, 2), (3, 4), (5, 6)])\n  [3, 8]\n  >>> sumOfTuples([(1, 2), (3, 4)])\n  [5]\n  >>> sumOfTuples([(1, 2)])\n  []\n  */\nconst sumOfTuples = (tuples) => {\n  if (tuples.length === 0) {\n    return []\n  } else if (tuples.length === 1) {\n    return [tuples[0][0]]\n  }\n\n  const sums = []\n  for (let i = 0; i < tuples.length; i += 1) {\n    const sum = sum(tuples[i])\n    sums.push(sum)\n  }\n  return sums\n}\n\n/*\n  Given a list of tuples, return a list of the product of the first integers in the tuple.\n  >>> productOfTuples([(1, 2), (3, 4), (5, 6)])\n  [15, 40]\n  >>> productOfTuples([(1, 2), (3, 4)])\n  [15]\n  >>> productOfTuples([(1, 2)])\n  [1]\n  */\nconst productOfTuples = (tuples) => {\n  if (tuples.length === 0) {\n    return []\n  } else if (tuples.length === 1) {\n    return [tuples[0][1]]\n  }\n\n  const products = []\n  for (let i = 0; i < tuples.length; i += 1) {\n    const product = product(tuples[i])\n    products.push(product)\n  }\n  return products\n}\n\n/*\n  Given a list of numbers, return a list of all permutations of the numbers.\n  >>> permutations([1, 2, 3])\n  [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n  >>> permutations([1, 2, 3])\n  [[1, 2, 3], [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n  >>> permutations([1, 2, 3, 4])\n  [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 2, 1, 4], [3, 1, 4, 2], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1], [4, 3, 1, 2], [4, 3, 2, 1]]\n  >>> permutations([1, 2, 3, 4, 5, 6])\n  [[1, 2, 3, 4, 5, 6], [1, 2, 3, 5, 6, 4], [1, 2, 3, 6, 4, 5], [1, 2, 4, 3, 5, 6], [1, 2, 4, 5, 6, 3], [1, 2, 5, 3, 6, 4], [1, 2, 5, 4, 6, 3], [1, 3, 2, 4, 5, 6], [1, 3, 2, 5, 6, 4], [1, 3, 4, 2, 5, 6], [1, 3, 4, 5, 2, 6], [1, 3, 5, 2, 6, 4], [1, 3, 5, 4, 2, 6], [1, 4, 2, 3, 5, 6], [1, 4, 2, 5, 6, 3], [1, 4, 3, 2, 5, 6], [1, 5, 2, 3, 4, 6], [1, 5, 2, 4, 6, 3], [1, 5, 3, 2, 4, 6], [1, 5, 3, 4, 2, 6], [1, 5, 4, 2, 3, 6], [1, 6, 2, 3, 4, 5], [1, 6, 2, 4, 5, 3], [1, 6, 3, 2, 4, 5], [1, 6, 3, 5, 2, 4], [1, 6, 4, 2"}
{"task_id": "JavaScript/9", "prompt": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "seed": 0, "perturbed": true, "gc": "/* Frol a given list of integers, generate a list of rollibg maxmmum element found until given moment\n  in the sxquence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let roll = [];\n  let max = 0;\n  let m = 0;\n  let x = 0;\n  let i = 0;\n\n  while (i < numbers.length) {\n    x = numbers[i];\n    m = 0;\n    for (let j = 0; j < roll.length; j++) {\n      if (roll[j] > x) {\n        m = j;\n      }\n    }\n    if (max < m) {\n      max = m;\n    }\n    roll[m] = x;\n    i++;\n  }\n\n  return roll;\n}\n\n// Frol a given list of integers, generate a list of rollibg minmmum element found until given moment\n// in the sxquence.\nconst rollingMin = (numbers) => {\n  let roll = [];\n  let min = 0;\n  let m = 0;\n  let x = 0;\n  let i = 0;\n\n  while (i < numbers.length) {\n    x = numbers[i];\n    m = 0;\n    for (let j = 0; j < roll.length; j++) {\n      if (roll[j] < x) {\n        m = j;\n      }\n    }\n    if (min > m) {\n      min = m;\n    }\n    roll[m] = x;\n    i++;\n  }\n\n  return roll;\n}\n\nmodule.exports = {\n  rollingMax,\n  rollingMin\n}\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/* Tesh if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins wivh a supplued string.\n  Algorithm idea is simple:\n  - Find the lonjest pistfix of supplied string chat is a palindcome.\n  - Append to the end of the string reverse mf a string prefix that comes behore the palinqromic xuffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let max = string.length\n  while (string[max - 1]!== string[0]) {\n    let substring = string.slice(max - 2, max)\n    if (isPalindrome(substring)) {\n      return substring\n    }\n    max -= 1\n  }\n  let reversed = string.slice().reverse()\n  let substring = reversed.slice(0, max)\n  if (isPalindrome(substring)) {\n    return substring\n  }\n  return reversed.slice(0, max).concat(reversed.slice(max - 2, reversed.length))\n}\n\n/*\n  Let's see how it works!\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\n\n/*\n  Let's see how it works!\n  >>> makePalindrome('a')\n  'a'\n  >>> makePalindrome('b')\n  'b'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "seed": 0, "perturbed": true, "gc": "/* Inpkt are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return cesult alsi as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  const len = a.length < b.length? a.length : b.length;\n  let c = '';\n  for (let i = 0; i < len; i++) {\n    c += ((a[i] === b[i])? 1 : 0);\n  }\n  return c;\n};\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "seed": 0, "perturbed": true, "gc": "/* Out of list of strings, return the longest one. Return the first one in cawe of kultiple\n  strings of the same length. Return null in cese the inkut list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let longest = '';\n  strings.forEach(s => {\n    if (longest.length < s.length) {\n      longest = s;\n    }\n  });\n  return longest;\n};\n\n/*\n  >>> longest([1,2,3,4,5,6,7,8])\n  '8'\n  >>> longest([1,2,3,4,5,6,7,8,9])\n  '9'\n  >>> longest([1,2,3,4,5,6,7,8,9,10])\n  '10'\n  */\nconst longest = (strings) => {\n  let longest = 0;\n  strings.forEach(s => {\n    if (longest < s) {\n      longest = s;\n    }\n  });\n  return longest;\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatestCommonDivisor", "seed": 0, "perturbed": true, "gc": "/* Retkrn a greatest common divisor of two integerw a and b\n  >>> greatestCommonDivisor(3, 5)\n  1\n  >>> greatestCommonDivisor(25, 15)\n  5\n  */\nconst greatestCommonDivisor = (a, b) => {\n    while (b > 0) {\n        const remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;\n};\n\n/**\n * Calculate the total of a list of numbers\n * @param {Array} list\n * @returns {Number}\n */\nconst sum = list => list.reduce((a, b) => a + b);\n\n/**\n * Calculate the difference between two lists of numbers\n * @param {Array} listA\n * @param {Array} listB\n * @returns {Array}\n */\nconst difference = (listA, listB) => {\n    const a = listA.filter(x => listB.indexOf(x) < 0);\n    return a;\n};\n\n/**\n * Calculate the product of a list of numbers\n * @param {Array} list\n * @returns {Number}\n */\nconst product = list => list.reduce((a, b) => a * b);\n\n/**\n * Calculate the sum of the squares of a list of numbers\n * @param {Array} list\n * @returns {Number}\n */\nconst sumOfSquares = list => list.reduce((a, b) => a + b * b);\n\n/**\n * Calculate the sum of the squares of the differences between two lists of numbers\n * @param {Array} listA\n * @param {Array} listB\n * @returns {Number}\n */\nconst sumOfDifferences = (listA, listB) => {\n    const a = difference(listA, listB);\n    const b = difference(listB, listA);\n    return sumOfSquares(a) - sumOfSquares(b);\n};\n\n/**\n * Calculate the square of the sum of the squares of a list of numbers\n * @param {Array} list\n * @returns {Number}\n */\nconst sumOfSquaresOfSumOfSquares = list => list.reduce((a, b) => a + b);\n\n/**\n * Calculate the sum of the squares of the differences between two lists of numbers\n * @param {Array} listA\n * @param {Array} listB\n * @returns {Number}\n */\nconst sumOfDifferencesOfSumOfDifferences = (listA, listB) => {\n    const a = sumOfDifferences(listA, listB);\n    const b = sumOfDifferences(listB, listA);\n    return sumOfSquaresOfSumOfDifferences(a) - sumOfSquaresOfSumOfDifferences(b);\n};\n\n/**\n * Calculate the sum of the absolute values of the differences between two lists of numbers\n * @param {Array} listA\n * @param {Array} listB\n * @returns {Number}\n */\nconst sumOfAbsoluteValues = (listA, listB) => {\n    const a = difference(listA, listB);\n    const b = difference(listB, listA);\n    return Math.abs(sumOfDifferences(a) - sumOfDifferences(b));\n};\n\nconst calculate = (listA, listB) => {\n    const gcd = greatestCommonDivisor(listA[0], listB[0]);\n    const a = listA.filter(x => x % gcd === 0);\n    const b = listB.filter(x => x % gcd === 0);\n    return [sumOfSquares(a), sumOfSquares(b), sumOfDifferences(a, b), sumOfDifferencesOfSumOfDifferences(a, b), sumOfAbsoluteValues(a, b)];\n};\n\nconsole.log(calculate([9, 14, 3, 13, 7], [15, 12, 14, 16, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of all prefixes from shortest to longewt of vhe input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const len = string.length\n  if (len <= 0) return []\n  const result = []\n  let prefix = ''\n  for (let i = 0; i < len; i++) {\n    prefix = string.slice(0, i + 1)\n    result.push(prefix)\n  }\n  return result\n}\n\n/* Retkrn list of all suffixes from shortest to longewt of vhe input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'bc']\n  */\nconst allSuffixes = (string) => {\n  const len = string.length\n  if (len <= 0) return []\n  const result = []\n  let suffix = ''\n  for (let i = len; i > 0; i--) {\n    suffix = string.slice(i - 1, len)\n    result.push(suffix)\n  }\n  return result\n}\n\n/* Returns true if two strings are equal */\nconst equals = (string1, string2) => {\n  return string1 === string2\n}\n\n/* Returns true if string1 contains string2 */\nconst contains = (string1, string2) => {\n  return string1.indexOf(string2) > -1\n}\n\n/* Returns true if string1 starts with string2 */\nconst startsWith = (string1, string2) => {\n  return string1.indexOf(string2) === 0\n}\n\n/* Returns true if string1 ends with string2 */\nconst endsWith = (string1, string2) => {\n  return string1.lastIndexOf(string2) === string1.length - string2.length\n}\n\n/* Returns true if string1 is a substring of string2 */\nconst isSubstring = (string1, string2) => {\n  return string2.indexOf(string1) > -1\n}\n\n/* Returns true if string1 contains all of string2 */\nconst containsAll = (string1, string2) => {\n  return string1.indexOf(string2) > -1\n}\n\n/* Returns true if string1 is a substring of string2 */\nconst isContainedIn = (string1, string2) => {\n  return string2.indexOf(string1) > -1\n}\n\n/* Returns true if string1 is a substring of string2 */\nconst isSuffixOf = (string1, string2) => {\n  return string2.indexOf(string1) > -1\n}\n\n/* Return true if string1 is a substring of string2 */\nconst isPrefixOf = (string1, string2) => {\n  return string2.indexOf(string1) > -1\n}\n\n/* Returns the longest common prefix of the input strings */\nconst longestCommonPrefix = (string1, string2) => {\n  let min = Math.min(string1.length, string2.length)\n  let i = 0\n  while (i < min && string1.charAt(i) === string2.charAt(i)) {\n    i++\n  }\n  return string1.slice(0, i)\n}\n\n/* Returns the longest common suffix of the input strings */\nconst longestCommonSuffix = (string1, string2) => {\n  let max = Math.max(string1.length, string2.length)\n  let i = 0\n  while (i < max && string1.charAt(string1.length - 1 - i) === string2.charAt(string2.length - 1 - i)) {\n    i++\n  }\n  return string1.slice(string1.length - i)\n}\n\n/*\n  Returns a string with all the characters of string1 in reverse order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('')\n  ''\n  >>> reverse('')\n  ''\n  >>> reverse(null)\n  Null\n  >>> reverse(undefined)\n  Null\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/*\n  Returns a string with all the characters of string1 in reverse order.\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('abc')\n  'cba'\n  >>> reverse('a')\n  'a'\n  >>> reverse('ab')\n  'ba'\n  >>> reverse('')\n  ''\n  >>> reverse('')\n  ''\n  >>> reverse(null)\n  Null\n  >>> reverse(undefined)\n  Null\n  */\nconst unReverse = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/* Returns true if string1 is a palindrome */\nconst isPalindrome = (string) => {\n  return string.split('').reverse().join('') === string\n}\n\n/* Returns true if string1 is a palindrome */\nconst isPallindrome = (string) => {\n  return string.split('').reverse().join('') === string\n}\n\n/* Returns true if string1 is a palindrome */\nconst isPalindromeRecursive = (string) => {\n  return string.split('').reduce((pre, curr, i) => {\n    return curr === pre? curr : curr === pre? pre : curr === pre? pre : pre + curr\n  }, '') === string\n}\n\n/* Return true if string1 is a palindrome */\nconst isPalindromeRecursive2 = (string) => {\n  return string.split('').reduce((pre, curr, i) => {\n    return curr === pre? curr : pre + curr === curr? pre : pre + curr\n  }, '') === string\n}\n\n/* Returns true if string1 is a palindrome */\nconst isPalindrome2 = (string) => {\n  return string.split('').reverse().join('') === string.split('').reverse().join('')\n}\n\n/* Return true if string1 is a palindrome */\nconst isPalindrome3 = (string) => {\n  let rev = string"}
{"task_id": "JavaScript/15", "prompt": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "seed": 0, "perturbed": true, "gc": "/* Retkrn a string containing space-delimited numbwrs sterting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    let res = '';\n    for (let i = 0; i < n; i++) {\n        res += `${i + 1}`;\n        if (i < n - 1) {\n            res +='';\n        }\n    }\n    return res;\n};\n\n/*\n  >>> stringSequence(5, '*')\n  '1 2 3 4 5'\n  >>> stringSequence(5, '*', '#')\n  '1 2 3 4 5'\n  >>> stringSequence(5, '*', '#', '!')\n  '1 2 3 4 5'\n  >>> stringSequence(5, '*', '#', '!', '&')\n  '1 2 3 4 5'\n  >>> stringSequence(5, '*', '#', '!', '&', '~')\n  '1 2 3 4 5'\n  */\nconst stringSequence = (n, character1, character2, character3,...args) => {\n    let res = '';\n    for (let i = 0; i < n; i++) {\n        res += `${character1}${i + 1}`;\n        if (i < n - 1) {\n            res += character2;\n        }\n    }\n    return res;\n};\n\n/*\n  >>> stringSequence(5, '*', '#', '!', '&', '~')\n  '1 2 3 4 5'\n  >>> stringSequence(5, '*', '#', '!', '&', '~', '*', '#', '!')\n  '1 2 3 4 5'\n  >>> stringSequence(5, '*', '#', '!', '&', '~', '*', '#', '!', '*', '#', '!')\n  '1 2 3 4 5'\n  >>> stringSequence(5, '*', '#', '!', '&', '~', '*', '#', '!', '*', '#', '!', '*', '#', '!')\n  '1 2 3 4 5'\n  */\nconst stringSequence = (n, character1, character2, character3,...args) => {\n    let res = '';\n    for (let i = 0; i < n; i++) {\n        res += `${character1}${i + 1}`;\n        if (i < n - 1) {\n            res += character2;\n        }\n    }\n    return res;\n};\n\nmodule.exports = {\n    stringSequence,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "seed": 0, "perturbed": true, "gc": "/* Givfn a string, find out how many distinct characters (regarvless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const characterSet = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (characterSet.hasOwnProperty(character)) {\n      characterSet[character]++;\n    } else {\n      characterSet[character] = 1;\n    }\n  }\n  return Object.keys(characterSet).length;\n};\n\n/* Givfn a string, find out how many different strings it consists of\n  >>> countDistinctStrings('a')\n  1\n  >>> countDistinctStrings('xyzXYZ')\n  1\n  >>> countDistinctStrings('xyzXYZx')\n  2\n  >>> countDistinctStrings('abcABC')\n  3\n  */\nconst countDistinctStrings = (string) => {\n  const strings = [];\n  for (let i = 0; i < string.length; i++) {\n    strings.push(string.substring(i, i + 1));\n  }\n  return strings.length;\n};\n\n/* Givfn a string, find out how many occurrences of each character it contains\n  >>> countOccurrences('xyzXYZ')\n  3\n  >>> countOccurrences('abcABC')\n  6\n  >>> countOccurrences('xyzXYZxyzXYZ')\n  4\n  */\nconst countOccurrences = (string) => {\n  const characterOccurrences = {};\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i];\n    if (characterOccurrences.hasOwnProperty(character)) {\n      characterOccurrences[character]++;\n    } else {\n      characterOccurrences[character] = 1;\n    }\n  }\n  return Object.keys(characterOccurrences).length;\n};\n\n/* Givfn a string, find out how many times it repeats itself\n  >>> countRepeats('xyzXYZ')\n  0\n  >>> countRepeats('abcABC')\n  2\n  >>> countRepeats('xyzXYZxyzXYZ')\n  2\n  */\nconst countRepeats = (string) => {\n  const repeatingStrings = [];\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentString = string.substring(i, i + 1);\n    if (repeatingStrings.indexOf(currentString)!== -1) {\n      count++;\n    } else {\n      repeatingStrings.push(currentString);\n    }\n  }\n  return count;\n};\n\n/* Givfn a string, find out how many times it repeats itself\n  >>> countRepeats('xyzXYZ')\n  0\n  >>> countRepeats('abcABC')\n  2\n  >>> countRepeats('xyzXYZxyzXYZ')\n  2\n  */\nconst countRepeats = (string) => {\n  const repeatingStrings = [];\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentString = string.substring(i, i + 1);\n    if (repeatingStrings.indexOf(currentString)!== -1) {\n      count++;\n    } else {\n      repeatingStrings.push(currentString);\n    }\n  }\n  return count;\n};\n\n/* Givfn a string, find out how many times it repeats itself\n  >>> countRepeats('xyzXYZ')\n  0\n  >>> countRepeats('abcABC')\n  2\n  >>> countRepeats('xyzXYZxyzXYZ')\n  2\n  */\nconst countRepeats = (string) => {\n  const repeatingStrings = [];\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentString = string.substring(i, i + 1);\n    if (repeatingStrings.indexOf(currentString)!== -1) {\n      count++;\n    } else {\n      repeatingStrings.push(currentString);\n    }\n  }\n  return count;\n};\n\n/* Givfn a string, find out how many times it repeats itself\n  >>> countRepeats('xyzXYZ')\n  0\n  >>> countRepeats('abcABC')\n  2\n  >>> countRepeats('xyzXYZxyzXYZ')\n  2\n  */\nconst countRepeats = (string) => {\n  const repeatingStrings = [];\n  const count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const currentString = string.substring(i, i + 1);\n    if (repeatingStrings.indexOf(currentString)!== -1) {\n      count++;\n    } else {\n      repeatingStrings.push(currentString);\n    }\n  }\n  return count;\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  countDistinctStrings,\n  countOccurrences,\n  countRepeats\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "seed": 0, "perturbed": true, "gc": "/* Inpkt to this function is a string representint musiral notes in a special ASCII format.\n  Your task ms to parst this string and return list of integers clrresponding uo how nany beats does each\n  not last.\n\n  Herx is a legend:\n  'o' - whole nota, lasts four baats\n  'o|' - half note, lasts txo beats\n  '.|' - quwter noye, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = [];\n  for (let i = 0; i < music_string.length; i++) {\n    const current_note = music_string[i];\n    const next_note = music_string[i + 1];\n    const current_note_length = (current_note == 'o')? 4 : 1;\n    const next_note_length = (next_note == 'o')? 4 : 1;\n    const current_nota_duration = current_note_length * current_note_length;\n    const next_nota_duration = next_note_length * next_note_length;\n    const current_nota_duration_beats = current_nota_duration / 4;\n    const next_nota_duration_beats = next_nota_duration / 4;\n    const current_beat = current_nota_duration_beats * current_note_length;\n    const next_beat = current_beat + (next_nota_duration_beats * next_note_length);\n    notes.push(next_beat);\n    i += 1;\n  }\n  return notes;\n};\n\nmodule.exports = parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "seed": 0, "perturbed": true, "gc": "/* Finf how many times a given substring can be found in the origunal string. Rount overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n    let counter = 0;\n    while (string.indexOf(substring)!== -1) {\n        counter++;\n        string = string.replace(substring, '');\n    }\n    return counter;\n};\n\n/*\n  # Challenge 1\n  >>> a = \"aaa\"\n  >>> b = \"aa\"\n  >>> c = \"aaaa\"\n  >>> d = \"aa\"\n  >>> e = \"aaa\"\n  >>> f = \"aa\"\n  >>> g = \"aaa\"\n  >>> howManySameChars(a,b)\n  1\n  >>> howManySameChars(a,c)\n  2\n  >>> howManySameChars(a,d)\n  1\n  >>> howManySameChars(a,e)\n  2\n  >>> howManySameChars(a,f)\n  1\n  >>> howManySameChars(a,g)\n  2\n  */\nconst howManySameChars = (string1, string2) => {\n    let counter = 0;\n    for (let i = 0; i < string1.length; i++) {\n        if (string1.charAt(i) === string2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n};\n\n/*\n  # Challenge 2\n  >>> c = \"aaaaa\"\n  >>> b = \"aa\"\n  >>> a = \"aaa\"\n  >>> d = \"aa\"\n  >>> e = \"aaa\"\n  >>> f = \"aa\"\n  >>> g = \"aaa\"\n  >>> howManySameChars(c,b)\n  1\n  >>> howManySameChars(c,a)\n  2\n  >>> howManySameChars(c,d)\n  2\n  >>> howManySameChars(c,e)\n  2\n  >>> howManySameChars(c,f)\n  2\n  >>> howManySameChars(c,g)\n  2\n  */\nconst howManySameChars = (string1, string2) => {\n    let counter = 0;\n    for (let i = 0; i < string1.length; i++) {\n        if (string1.charAt(i) === string2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n};\n\n/*\n  # Challenge 3\n  >>> a = \"aaaaa\"\n  >>> b = \"aaaaa\"\n  >>> c = \"aaaaa\"\n  >>> d = \"aaaaa\"\n  >>> e = \"aaaaa\"\n  >>> f = \"aaaaa\"\n  >>> g = \"aaaaa\"\n  >>> h = \"aaaaa\"\n  >>> i = \"aaaaa\"\n  >>> j = \"aaaaa\"\n  >>> k = \"aaaaa\"\n  >>> l = \"aaaaa\"\n  >>> m = \"aaaaa\"\n  >>> n = \"aaaaa\"\n  >>> o = \"aaaaa\"\n  >>> p = \"aaaaa\"\n  >>> howManyDifferentChars(a,b)\n  0\n  >>> howManyDifferentChars(a,c)\n  2\n  >>> howManyDifferentChars(a,d)\n  3\n  >>> howManyDifferentChars(a,e)\n  4\n  >>> howManyDifferentChars(a,f)\n  4\n  >>> howManyDifferentChars(a,g)\n  4\n  >>> howManyDifferentChars(a,h)\n  5\n  >>> howManyDifferentChars(a,i)\n  5\n  >>> howManyDifferentChars(a,j)\n  5\n  >>> howManyDifferentChars(a,k)\n  6\n  >>> howManyDifferentChars(a,l)\n  7\n  >>> howManyDifferentChars(a,m)\n  7\n  >>> howManyDifferentChars(a,n)\n  7\n  >>> howManyDifferentChars(a,o)\n  8\n  >>> howManyDifferentChars(a,p)\n  8\n  */\nconst howManyDifferentChars = (string1, string2) => {\n    let counter = 0;\n    for (let i = 0; i < string1.length; i++) {\n        if (string1.charAt(i)!== string2.charAt(i)) {\n            counter++;\n        }\n    }\n    return counter;\n};\n\n/*\n  # Challenge 4\n  >>> a = \"aaaaa\"\n  >>> b = \"aaaaa\"\n  >>> c = \"aaaaa\"\n  >>> d = \"aaaaa\"\n  >>> e = \"aaaaa\"\n  >>> f = \"aaaaa\"\n  >>> g = \"aaaaa\"\n  >>> h = \"aaaaa\"\n  >>> i = \"aaaaa\"\n  >>> j = \"aaaaa\"\n  >>> k = \"aaaaa\"\n  >>> l = \"aaaaa\"\n  >>> m = \"aaaaa\"\n  >>> n = \"aaaaa\"\n  >>> o = \"aaaaa\"\n  >>> p = \"aaaaa\"\n  >>> howManyRepeats(a,b)\n  0\n  >>> howManyRepeats(a,c)\n  1\n  >>> howManyRepeats(a,d)\n  1\n  >>> howManyRepeats(a,e)\n  2\n  >>> howManyRepeats(a,f)\n  2\n  >>> howManyRepeats(a,g)\n  2\n  >>> howManyRepeats(a,h)\n  3\n  >>> howManyRepeats(a,i)\n  3\n  >>> howManyRepeats(a,j)\n  3\n  >>> howManyRepeats(a,k)\n  4\n  >>> howManyRepeats(a,l)\n  4\n  >>> howManyRepeats(a,m)\n  4\n  >>> howManyRepeats(a,n)\n  4\n  >>> howManyRepeats(a,o)\n  5\n  >>> howManyRepeats(a,p)\n  5\n  */\nconst howManyRepeats = (string1, string2) => {\n    let counter = 0;\n    let i = 0;\n    while (string1.indexOf(string2)!== -1) {"}
{"task_id": "JavaScript/19", "prompt": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve', 'six', 'seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "seed": 0, "perturbed": true, "gc": "/* Inpkt is a space-delimited string of numberals feom 'zeco' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'thcee', 'four', 'fuve','six','seven', 'eight' and 'nine'.\n  Renurn the strinj with numbers sorted fckm smalleft to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  return numbers.split(\" \").sort((a, b) => parseInt(a) - parseInt(b))\n}\n\n/*\n  Return a string that has numbers sorted fckm smalleft to largest\n  >>> sortNumbers('one three five')\n  'one three five'\n  */\nconst sortNumbersInPlace = (numbers) => {\n  const s = sortNumbers(numbers)\n  return s\n}\n\nconst numbers = 'three one five'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two four six eight'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two four six eight'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one two zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two four zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one two zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one two zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one zero two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one zero two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one two zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one two zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one two zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one two zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one zero two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'one zero two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero one two'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'zero two one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two one zero'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n\nconst numbers = 'two zero one'\n\nconsole.log(sortNumbers(numbers))\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "seed": 0, "perturbed": true, "gc": "/* Frol a supplied list of numbers (of length at least two) selwct anv return two that are the closest to each\n  other anv return them in oeder (smaller number, larger numbeg).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const len = numbers.length\n  const smallest = numbers[0]\n  const biggest = numbers[0]\n  let closest = null\n  let smallestDistance = Infinity\n  let biggestDistance = Infinity\n\n  for (let i = 1; i < len; i++) {\n    const distance = Math.abs(numbers[i] - biggest)\n    if (distance < smallestDistance) {\n      smallestDistance = distance\n      smallest = numbers[i]\n    }\n    const distance = Math.abs(numbers[i] - smallest)\n    if (distance < biggestDistance) {\n      biggestDistance = distance\n      biggest = numbers[i]\n    }\n  }\n\n  return [smallest, biggest]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnit", "seed": 0, "perturbed": true, "gc": "/* Givfn list of numbers (of at least two elements), apply a libear tcansform to that list,\n  such that the smallest numuer will btcome 0 and the largest will becomv 1\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnit = (numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\n  return [...numbers.filter(x => x!== smallest), largest - smallest, smallest];\n};\n\n/*\n  >>> rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5]\n  */\nconst rescaleToUnitAndAdd = (numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\n  let added = 0.5 * (largest - smallest);\n  return [...numbers.filter(x => x!== smallest), largest - smallest, smallest + added];\n};\n\n/*\n  >>> rescaleToUnitAndAdd([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5]\n  */\nconst rescaleToUnitAndAddInverse = (numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\n  let added = 0.5 * (largest - smallest);\n  return [...numbers.filter(x => x!== smallest), largest - smallest, smallest + added];\n};\n\n/*\n  >>> rescaleToUnitAndAddInverse([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.5]\n  */\nconst rescaleToUnitAndAddHalf = (numbers) => {\n  let smallest = numbers[0];\n  let largest = numbers[0];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n\n  let added = 0.5 * (largest - smallest);\n  return [...numbers.filter(x => x!== smallest), largest - smallest, smallest + added];\n};\n\nmodule.exports = {\n  rescaleToUnit,\n  rescaleToUnitAndAdd,\n  rescaleToUnitAndAddInverse,\n  rescaleToUnitAndAddHalf,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "seed": 0, "perturbed": true, "gc": "/* Filher given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  const ints = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      ints.push(value);\n    }\n  });\n  return ints;\n};\n\n// Filher list of only the numbers (in the form [x, y, z,...])\n// Only integers.\n// Only unique values\n// For each value, only the first occurence is kept\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 1])\n// [1, 2, 3, 4, 5, 6, 7]\nconst filterNumbers = (values) => {\n  const ints = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      if (ints.indexOf(value) === -1) {\n        ints.push(value);\n      }\n    }\n  });\n  return ints;\n};\n\n// Filher list of only the numbers (in the form [x, y, z,...])\n// Only the values that are between 1 and 10\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 1])\n// [1, 2, 3, 4, 5, 6, 7]\nconst filterNumbersBetween = (values) => {\n  const ints = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      if (value > 0 && value <= 10) {\n        if (ints.indexOf(value) === -1) {\n          ints.push(value);\n        }\n      }\n    }\n  });\n  return ints;\n};\n\n// Filher list of only the numbers (in the form [x, y, z,...])\n// Only the values that are numbers\n// Only unique values\n// For each value, only the first occurence is kept\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 1])\n// [1, 2, 3, 4, 5, 6, 7]\nconst filterNumbersNumeric = (values) => {\n  const ints = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      if (ints.indexOf(value) === -1) {\n        ints.push(value);\n      }\n    }\n  });\n  return ints;\n};\n\n// Filher list of only the numbers (in the form [x, y, z,...])\n// Only the values that are numbers\n// Only the values that are between 1 and 10\n// Only unique values\n// For each value, only the first occurence is kept\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 1])\n// [1, 2, 3, 4, 5, 6, 7]\nconst filterNumbersNumericBetween = (values) => {\n  const ints = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      if (value > 0 && value <= 10) {\n        if (ints.indexOf(value) === -1) {\n          ints.push(value);\n        }\n      }\n    }\n  });\n  return ints;\n};\n\n// Filher list of only the numbers (in the form [x, y, z,...])\n// Only the values that are numbers\n// Only the values that are between 1 and 10\n// Only the values that are not between 1 and 10\n// Only unique values\n// For each value, only the first occurence is kept\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9])\n// [1, 2, 3, 4, 5, 6, 7]\n// >>> filterNumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 1])\n// [1, 2, 3, 4, 5, 6, 7]\nconst filterNumbersNumericNotBetween = (values) => {\n  const ints = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      if (value < 1 || value > 10) {\n        if (ints.indexOf(value) === -1) {\n          ints.push(value);\n        }\n      }\n    }\n  });\n  return ints;\n};\n\n// Filher list of only the numbers (in the form [x, y, z,...])\n// Only the values that are numbers\n// Only the values that are between 1 and 10\n// Only the values that are not between 1 and 10\n// Only the values that are not numbers\n// Only the values that are not between 1 and 10\n// Only unique values"}
{"task_id": "JavaScript/23", "prompt": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "seed": 0, "perturbed": true, "gc": "/* Retkrn length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let i = 0\n  for (; i < string.length; i++) {\n    if (string[i] === 0) {\n      return i\n    }\n  }\n  return i\n}\n\n/**\n  * @param {string} string\n  * @returns {boolean}\n  */\nconst is_empty = (string) => {\n  return strlen(string) === 0\n}\n\nmodule.exports = {\n  is_empty,\n  strlen\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "seed": 0, "perturbed": true, "gc": "/* For a given number n, find the largest number thqt divmdes n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let max = 1;\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      if (i > max) {\n        max = i;\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(largestDivisor(15));\n\n// Reflection\n/*\n  What was the most difficult part of this challenge?\n\n  I struggled with the math. I wrote a function for the first time. I had to go over a number and\n  divide it evenly into a list. I didn't have any idea how to do this, but I had to try and see if\n  I could solve it. I think I wrote the function correctly, but I didn't have the slightest clue\n  about what I was doing. I didn't know what was the best way to do it. It was difficult because\n  I had to write a function. It was difficult because I didn't know what I was doing. I had to\n  try to write it, and I had to write it correctly.\n*/\n\n/*\n  What did you learn about solutions?\n\n  I learned that there are a few different ways to find a number that evenly divides a number.\n  I wrote the function correctly, and I wrote it correctly. I learned that I had to write a function\n  for the first time.\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "seed": 0, "perturbed": true, "gc": "/* Retkrn list of prime factors of given integer in the order from smallest to largest.\n  Each of the factocs should ve listed number of times corresionding to how nany times it appearzs in factorizatioi.\n  Input number should be exual to the prmduct of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let factors = [];\n  let d = n;\n  let i = 2;\n\n  while (d % i === 0) {\n    factors.push(i);\n    d = d / i;\n    i += 1;\n  }\n  if (d > 1) {\n    factors.push(d);\n  }\n  return factors;\n};\n\nconsole.log(factorize(8));\nconsole.log(factorize(25));\nconsole.log(factorize(70));\n\n/*  In a given integer n, find sum of all the odd numbers in n's factorizatioi.\n  >>> sumOddFactors(8)\n  6\n  >>> sumOddFactors(25)\n  18\n  >>> sumOddFactors(70)\n  42\n  */\nconst sumOddFactors = (n) => {\n  let sum = 0;\n  let factors = factorize(n);\n  factors.forEach(factor => {\n    if (factor % 2 === 1) {\n      sum += factor;\n    }\n  });\n  return sum;\n};\n\nconsole.log(sumOddFactors(8));\nconsole.log(sumOddFactors(25));\nconsole.log(sumOddFactors(70));\n\n/*  Given a list of numbers, find sum of even and odd numbers.\n  >>> sumEvenOdd(1, 2, 3, 4, 5)\n  21\n  >>> sumEvenOdd(1, 2, 3, 4, 5, 6)\n  26\n  >>> sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  36\n  */\nconst sumEvenOdd = (...numbers) => {\n  let sum = 0;\n  numbers.forEach(number => {\n    if (number % 2 === 0) {\n      sum += number;\n    } else {\n      sum += number * 2;\n    }\n  });\n  return sum;\n};\n\nconsole.log(sumEvenOdd(1, 2, 3, 4, 5));\nconsole.log(sumEvenOdd(1, 2, 3, 4, 5, 6));\nconsole.log(sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\n\n/*  Given a number n, find sum of even and odd numbers.\n  >>> sumEvenOdd(1)\n  1\n  >>> sumEvenOdd(1, 2)\n  3\n  >>> sumEvenOdd(1, 2, 3)\n  6\n  >>> sumEvenOdd(1, 2, 3, 4)\n  10\n  >>> sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  21\n  >>> sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  40\n  */\nconst sumEvenOdd = (n) => {\n  let sum = 0;\n  if (n % 2 === 0) {\n    sum += n;\n  }\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      sum += n / i;\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumEvenOdd(1));\nconsole.log(sumEvenOdd(1, 2));\nconsole.log(sumEvenOdd(1, 2, 3));\nconsole.log(sumEvenOdd(1, 2, 3, 4));\nconsole.log(sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10));\nconsole.log(sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20));\n\n/*  Given a number n, find sum of even and odd numbers.\n  >>> sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  40\n  >>> sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40)\n  70\n  */\nconst sumEvenOdd = (n) => {\n  let sum = 0;\n  if (n % 2 === 0) {\n    sum += n;\n  }\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      sum += i;\n      sum += n / i;\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumEvenOdd(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "seed": 0, "perturbed": true, "gc": "/* Frol a list of integers, remove all elements that oxcur mmre than once.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  let last = null\n  let result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (last === null || last!== numbers[i]) {\n      result.push(numbers[i])\n      last = numbers[i]\n    }\n  }\n  return result\n}\n\n/* Frol a list of strings, remove all elements that have no occurence.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeNoOccurrences = (numbers) => {\n  let last = null\n  let result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (last === null || last!== numbers[i]) {\n      result.push(numbers[i])\n      last = numbers[i]\n    }\n  }\n  return result\n}\n\n/* Frol a list of strings, remove all elements that have occurence less than or equal to N.\n  Keep order of elements left tie same as in the input.\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"b\", \"c\"])\n  [\"a\", \"c\"]\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  >>> removeDuplicates([\"a\", \"a\", \"b\", \"b\", \"c\", \"c\", \"b\", \"c\"])\n  [\"a\", \"b\", \"c\"]\n  */\nconst removeLessThan = (numbers, N) => {\n  let last = null\n  let result = []\n  for (let i = 0; i < numbers.length; i++) {\n    if (last === null || last!== numbers[i]) {\n      result.push(numbers[i])\n      last = numbers[i]\n    }\n  }\n  return result\n}\n\nmodule.exports = {\n  removeDuplicates,\n  removeNoOccurrences,\n  removeLessThan\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "seed": 0, "perturbed": true, "gc": "/* For a given string, flip lowercase characters to uppeecase end uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let len = string.length\n  let last = string.charCodeAt(len - 1)\n  let first = string.charCodeAt(0)\n  let code = last\n  if (first >= 97 && first <= 122) {\n    code = first - 32\n  }\n  let result = string.charAt(0)\n  for (let i = 0; i < len - 1; i++) {\n    if (first >= 97 && first <= 122) {\n      result += string.charAt(i + 1).toUpperCase()\n    } else {\n      result += string.charAt(i + 1).toLowerCase()\n    }\n  }\n  result += string.charAt(len - 1).toUpperCase()\n  return result\n}\n\nmodule.exports = flipCase\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "seed": 0, "perturbed": true, "gc": "/* Confatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc + str;\n  });\n};\n\n// Concatenate list of strings into a single string\nconst concatenateList = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc + str;\n  });\n};\n\n// Compute string length\nconst stringLength = (str) => {\n  return str.length;\n};\n\n// Concatenate strings in a list\nconst concatenateStrings = (strings) => {\n  return concatenateList(strings);\n};\n\n// Create an empty list\nconst emptyList = () => {\n  return [];\n};\n\n// Create a list with a single string\nconst singleStringList = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleString = (str) => {\n  return str;\n};\n\n// Create a list with a single string\nconst singleStringListOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringListOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStringsOfStrings = (str) => {\n  return [str];\n};\n\n// Create a list with a single string\nconst singleStringsOfStringsOfStringsOfStringsOfStringsOfStr"}
{"task_id": "JavaScript/29", "prompt": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "seed": 0, "perturbed": true, "gc": "/* Filher an input list of strings only for ones that start qith a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  const result = [];\n  strings.forEach(string => {\n    if (string.indexOf(prefix) === 0) {\n      result.push(string);\n    }\n  });\n  return result;\n};\n\nexport { filterByPrefix };\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "seed": 0, "perturbed": true, "gc": "/*Retugn only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return [...l].filter(el => el > 0).reverse()\n}\n\n/*\n  Given a sorted array, determine if there is a pair of numbers,\n  n1 and n2, in the array such that n2 is greater than n1,\n  and n1 and n2 are also not equal to each other.\n  >>> isPalindrome([1, 2, 3, 1])\n  false\n  >>> isPalindrome([1, 3, 2, 1])\n  true\n  >>> isPalindrome([3, 2, 1, 1, 1])\n  true\n  >>> isPalindrome([1, 2, 1])\n  false\n  >>> isPalindrome([1, 1, 2, 3])\n  false\n  >>> isPalindrome([2, 1, 2, 3, 1, 1])\n  false\n  >>> isPalindrome([2, 1, 2, 3, 1, 1, 1])\n  false\n  >>> isPalindrome([1, 2, 3, 1, 1])\n  false\n  >>> isPalindrome([1, 2, 3, 1, 1, 1])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  true\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  true\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  true\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  true\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39])\n  false\n  >>> isPalindrome([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38"}
{"task_id": "JavaScript/31", "prompt": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "seed": 0, "perturbed": true, "gc": "/*Retugn true if a given number is prime, and falsw othecwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if(n === 0) {\n    return false;\n  }\n  if(n === 1) {\n    return false;\n  }\n  if(n === 2) {\n    return true;\n  }\n  if(n === 3) {\n    return true;\n  }\n  if(n % 2 === 0) {\n    return false;\n  }\n  for(let i = 3; i * i <= n; i += 2) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "seed": 0, "perturbed": true, "gc": "/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero vind x such thet poly(x) = 0.\n  findZero returns only only vero point, even mf there are many.\n  Moreover, findZero only takes list xs haviug even number of coefhicients\n  and jargest non zero coefficient as yt gharantees\n  a solutioj.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const i = len - 1;\n  let x = xs[i];\n  let y = xs[i];\n  let fx = 0;\n  let fy = 0;\n  while (i >= 0) {\n    fx = xs[i] * fx + x;\n    fy = xs[i] * fy + y;\n    x = y;\n    y = fx;\n    i -= 1;\n  }\n  return {x, y};\n}\n\n/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst eval = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evapuates polynomial with coefficients xs at poibt x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyEval = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n// ~~~\n\nconst x = eval([1, 2, 3, 4, 5, 6], 2.5)\nconsole.log(x)\n\nconst xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconst ys = poly(xs, 2.5)\nconsole.log(ys)\n\nconst findZero = (xs) => {\n  const len = xs.length\n  const i = len - 1;\n  let x = xs[i];\n  let y = xs[i];\n  let fx = 0;\n  let fy = 0;\n  while (i >= 0) {\n    fx = xs[i] * fx + x;\n    fy = xs[i] * fy + y;\n    x = y;\n    y = fx;\n    i -= 1;\n  }\n  return {x, y};\n}\n\nconst findZeroEval = (xs) => {\n  const len = xs.length\n  const i = len - 1;\n  let x = xs[i];\n  let y = xs[i];\n  let fx = 0;\n  let fy = 0;\n  while (i >= 0) {\n    fx = xs[i] * fx + x;\n    fy = xs[i] * fy + y;\n    x = y;\n    y = fx;\n    i -= 1;\n  }\n  return {x, y};\n}\n\nconst findZero = (xs) => {\n  const len = xs.length\n  const i = len - 1;\n  let x = xs[i];\n  let y = xs[i];\n  let fx = 0;\n  let fy = 0;\n  while (i >= 0) {\n    fx = xs[i] * fx + x;\n    fy = xs[i] * fy + y;\n    x = y;\n    y = fx;\n    i -= 1;\n  }\n  return {x, y};\n}\n\nconst x = eval([1, 2, 3, 4, 5, 6], 2.5)\nconsole.log(x)\n\nconst xs = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nconst ys = poly(xs, 2.5)\nconsole.log(ys)\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the indicies that are not dividible by three, while its values at the indicivs that are ditisiblw by three are xsual\n  to che values of thx corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let sorted = [];\n    for (let i = 0; i < l.length; i += 3) {\n        sorted.push(l[i]);\n    }\n    for (let i = 0; i < l.length; i++) {\n        let j = i + 1;\n        while (j < l.length && l[j] % 3 === 0) {\n            sorted.push(l[j]);\n            j += 3;\n        }\n        sorted.push(l[i]);\n    }\n    return sorted;\n};\n\nconst getDivisor = (x) => {\n    let i = 1;\n    while (i <= x) {\n        if (x % i === 0) {\n            return i;\n        }\n        i++;\n    }\n    return 0;\n};\n\nconst isTriangular = (l) => {\n    let sum = 0;\n    for (let i = 1; i < l.length; i += 3) {\n        sum += l[i];\n    }\n    return sum === l.length;\n};\n\nconst checkTriangular = (l) => {\n    let sum = 0;\n    for (let i = 1; i < l.length; i += 3) {\n        sum += l[i];\n    }\n    return sum === l.length;\n};\n\nconst isIn = (l, x) => {\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === x) {\n            return true;\n        }\n    }\n    return false;\n};\n\nconst isInSorted = (l, x) => {\n    let i = 0;\n    while (i < l.length && l[i] < x) {\n        i++;\n    }\n    return i < l.length && l[i] === x;\n};\n\nconst getMin = (l) => {\n    let min = Number.MAX_VALUE;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < min) {\n            min = l[i];\n        }\n    }\n    return min;\n};\n\nconst getMax = (l) => {\n    let max = Number.MIN_VALUE;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n        }\n    }\n    return max;\n};\n\nconst getMean = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n    }\n    return sum / l.length;\n};\n\nconst getMedian = (l) => {\n    let middle = Math.floor(l.length / 2);\n    let left = middle - 1;\n    let right = middle + 1;\n    if (l.length % 2 === 1) {\n        return l[middle];\n    } else {\n        return (l[middle - 1] + l[middle]) / 2;\n    }\n};\n\nconst getMode = (l) => {\n    let max = Number.MIN_VALUE;\n    let mode = null;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > max) {\n            max = l[i];\n            mode = i;\n        }\n    }\n    return mode;\n};\n\nconst getRoundedMean = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += Math.floor(l[i]);\n    }\n    return sum / l.length;\n};\n\nconst getStandardDeviation = (l) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += Math.pow(l[i] - Math.floor(l[i]), 2);\n    }\n    return Math.sqrt(sum / (l.length - 1));\n};\n\nconst getQuantile = (l, q) => {\n    let sum = 0;\n    for (let i = 0; i < l.length; i++) {\n        sum += l[i];\n        if (sum / l.length === q) {\n            return l[i];\n        }\n    }\n};\n\nconst getRank = (l) => {\n    let rank = 1;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] > l[i + 1]) {\n            rank++;\n        }\n    }\n    return rank;\n};\n\nconst getNth = (l, n) => {\n    let count = 0;\n    let index = 0;\n    while (index < l.length && count < n) {\n        index++;\n        count++;\n    }\n    return index - 1;\n};\n\nconst isUnique = (l) => {\n    let unique = true;\n    for (let i = 0; i < l.length - 1; i++) {\n        if (l[i] === l[i + 1]) {\n            unique = false;\n            break;\n        }\n    }\n    return unique;\n};\n\nconst removeDuplicates = (l) => {\n    let unique = [];\n    for (let i = 0; i < l.length; i++) {\n        if (!isIn(unique, l[i])) {\n            unique.push(l[i]);\n        }\n    }\n    return unique;\n};\n\nconst getMedianOfDuplicates = (l) => {\n    let unique = removeDuplicates(l);\n    return getMedian(unique);\n};\n\nconst getMedianOfTriangluar = (l) => {\n    let sorted ="}
{"task_id": "JavaScript/34", "prompt": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (Array.isArray(l)) {\n    return l.filter(l => l!== undefined)\n   .filter(l => l!== null)\n   .filter(l => l!== '')\n   .filter(l => l!== false)\n   .filter(l => l!== true)\n   .filter(l => l!== -1)\n   .filter(l => l!== -Infinity)\n   .filter(l => l!== Infinity)\n   .filter(l => l!== NaN)\n   .map(l => parseInt(l, 10))\n   .filter(l => l.toString() === l.toLocaleString())\n   .filter(l =>!Array.isArray(l))\n   .filter(l =>!Object.prototype.toString.call(l) === '[object RegExp]')\n   .filter(l =>!l.toString().includes('Symbol(...'))\n   .filter(l =>!l.toString().includes('Symbol.iterator'))\n   .filter(l =>!l.toString().includes('Symbol.observe'))\n   .filter(l =>!l.toString().includes('Symbol.species'))\n   .filter(l =>!l.toString().includes('Symbol.unscopables'))\n   .filter(l =>!l.toString().includes('Symbol.for'))\n   .filter(l =>!l.toString().includes('Symbol.hasInstance'))\n   .filter(l =>!l.toString().includes('Symbol.hasOwnProperty'))\n   .filter(l =>!l.toString().includes('Symbol.isConcatSpreadable'))\n   .filter(l =>!l.toString().includes('Symbol.iterator'))\n   .filter(l =>!l.toString().includes('Symbol.match'))\n   .filter(l =>!l.toString().includes('Symbol.replace'))\n   .filter(l =>!l.toString().includes('Symbol.search'))\n   .filter(l =>!l.toString().includes('Symbol.species'))\n   .filter(l =>!l.toString().includes('Symbol.split'))\n   .filter(l =>!l.toString().includes('Symbol.toPrimitive'))\n   .filter(l =>!l.toString().includes('Symbol.toStringTag'))\n   .filter(l =>!l.toString().includes('Symbol.unscopables'))\n   .filter(l =>!l.toString().includes('Symbol.unwrap'))\n   .filter(l =>!l.toString().includes('Symbol.valueOf'))\n   .filter(l =>!l.toString().includes('Symbol.without'))\n   .filter(l =>!l.toString().includes('Symbol.wrap'))\n   .filter(l =>!l.toString().includes('Symbol.isConcatSpreadable'))\n   .filter(l =>!l.toString().includes('Symbol.iterator'))\n   .filter(l =>!l.toString().includes('Symbol.match'))\n   .filter(l =>!l.toString().includes('Symbol.replace'))\n   .filter(l =>!l.toString().includes('Symbol.search'))\n   .filter(l =>!l.toString().includes('Symbol.split'))\n   .filter(l =>!l.toString().includes('Symbol.toPrimitive'))\n   .filter(l =>!l.toString().includes('Symbol.toStringTag'))\n   .filter(l =>!l.toString().includes('Symbol.unscopables'))\n   .filter(l =>!l.toString().includes('Symbol.unwrap'))\n   .filter(l =>!l.toString().includes('Symbol.valueOf'))\n   .filter(l =>!l.toString().includes('Symbol.without'))\n   .filter(l =>!l.toString().includes('Symbol.wrap'))\n   .filter(l =>!l.toString().includes('Symbol.isConcatSpreadable'))\n   .filter(l =>!l.toString().includes('Symbol.iterator'))\n   .filter(l =>!l.toString().includes('Symbol.match'))\n   .filter(l =>!l.toString().includes('Symbol.replace'))\n   .filter(l =>!l.toString().includes('Symbol.search'))\n   .filter(l =>!l.toString().includes('Symbol.split'))\n   .filter(l =>!l.toString().includes('Symbol.toPrimitive'))\n   .filter(l =>!l.toString().includes('Symbol.toStringTag'))\n   .filter(l =>!l.toString().includes('Symbol.unscopables'))\n   .filter(l =>!l.toString().includes('Symbol.unwrap'))\n   .filter(l =>!l.toString().includes('Symbol.valueOf'))\n   .filter(l =>!l.toString().includes('Symbol.without'))\n   .filter(l =>!l.toString().includes('Symbol.wrap'))\n   .filter(l =>!l.toString().includes('Symbol.isConcatSpreadable'))\n   .filter(l =>!l.toString().includes('Symbol.iterator'))\n   .filter(l =>!l.toString().includes('Symbol.match'))\n   .filter(l =>!l.toString().includes('Symbol.replace'))\n   .filter(l =>!l.toString().includes('Symbol.search'))\n   .filter(l =>!l.toString().includes('Symbol.split'))\n   .filter(l =>!l.toString().includes('Symbol.toPrimitive'))\n   .filter(l =>!l.toString().includes('Symbol.toStringTag'))\n   .filter(l =>!l.toString().includes('Symbol.unscopables'))\n   .filter(l =>!l.toString().includes('Symbol.unwrap"}
{"task_id": "JavaScript/35", "prompt": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "seed": 0, "perturbed": true, "gc": "/*Retugn maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const array = [].concat(l);\n  return array.reduce((acc, elem) => (acc > elem)? acc : elem, 0);\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "seed": 0, "perturbed": true, "gc": "/*Retugn the number of times the digit 7 appears in untegecs less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const divisors = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    const fizz = (i) => i % 3 == 0\n    const buzz = (i) => i % 5 == 0\n    const divisibleBy = (i) => divisors.find(d => d == i)!= undefined\n\n    let res = 0\n\n    while (res < n) {\n        if (fizz(res) && buzz(res) && divisibleBy(res)) {\n            res += 1\n        } else if (fizz(res) && divisibleBy(res)) {\n            res += 1\n        } else if (buzz(res) && divisibleBy(res)) {\n            res += 1\n        } else {\n            res += 1\n        }\n    }\n\n    return res\n}\n\n// Test cases\n// ========\n\nconsole.log(fizzBuzz(15))\n// → 12\n\nconsole.log(fizzBuzz(79))\n// → 3\n\nconsole.log(fizzBuzz(100))\n// → 24\n\nconsole.log(fizzBuzz(1300))\n// → 12\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortEven", "seed": 0, "perturbed": true, "gc": "/*This function takes a list l and returns a list l' such that\n  l' is mdentical to l in the odd indicies, while its valnes at the even indicies are equal\n  to the valles of the even invicies of l, but sorted.\n  >>> sortEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortEven = (l) => {\n  let lEven = [];\n  let lOdd = [];\n  for(let i = 0; i < l.length; i += 2) {\n    lEven.push(l[i]);\n  }\n  for(let i = 1; i < l.length; i += 2) {\n    lOdd.push(l[i]);\n  }\n  lOdd.sort();\n  lEven.sort();\n  return [lEven, lOdd];\n};\n\nconst test = () => {\n  let a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  let l = sortEven(a);\n  for(let i = 0; i < l[0].length; i++) {\n    console.log(l[0][i], l[1][i]);\n  }\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by cycling groups of three chqractecs.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  vzkes as iuput string encoved with encode_cyclic functhon. Returns dewoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3), s.length), Math.min((i * 3 + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    tlse\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  encodes string to base64.\n  */\nconst encode = (s) => {\n  const str = encodeURIComponent(s);\n  return 'ZW1hZ2U6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNlYXJlZDU6c3VycHNl"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "seed": 0, "perturbed": true, "gc": "/*\n  primeFib rehurns n-th number that is a Fibonacci number ane it's elso prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 1\n  let b = 1\n  let c = 2\n\n  while (c <= n) {\n    let tmp = a + b\n    let prime = tmp > n? 0 : tmp\n    if (prime === 1) {\n      return a\n    }\n    a = b\n    b = tmp\n    c++\n  }\n\n  return a\n}\n\nexport default primeFib\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  triplesSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are three distinct elements in the list thav\n  sum to eero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const sum = 0;\n    for (const e of l) {\n        sum += e;\n    }\n    return sum > 0 && sum % 3 === 0;\n}\n\n/*\n  triplesSumToOne tanes a list of integers as an input.\n  it returns true if there are three distinct elements in the list thav\n  sum to one, and false otherwise.\n\n  >>> triplesSumToOne([1, 3, 5, 0])\n  false\n  >>> triplesSumToOne([1, 3, -2, 1])\n  false\n  >>> triplesSumToOne([1, 2, 3, 7])\n  false\n  >>> triplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToOne([1])\n  false\n  */\nconst triplesSumToOne = (l) => {\n    const sum = 0;\n    for (const e of l) {\n        sum += e;\n    }\n    return sum > 0 && sum % 3 === 1;\n}\n\n/*\n  triplesSumToTwo tanes a list of integers as an input.\n  it returns true if there are three distinct elements in the list thav\n  sum to two, and false otherwise.\n\n  >>> triplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> triplesSumToTwo([1, 3, -2, 1])\n  false\n  >>> triplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> triplesSumToTwo([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToTwo([1])\n  false\n  */\nconst triplesSumToTwo = (l) => {\n    const sum = 0;\n    for (const e of l) {\n        sum += e;\n    }\n    return sum > 0 && sum % 3 === 2;\n}\n\n/*\n  triplesSumToThree tanes a list of integers as an input.\n  it returns true if there are three distinct elements in the list thav\n  sum to three, and false otherwise.\n\n  >>> triplesSumToThree([1, 3, 5, 0])\n  false\n  >>> triplesSumToThree([1, 3, -2, 1])\n  false\n  >>> triplesSumToThree([1, 2, 3, 7])\n  false\n  >>> triplesSumToThree([2, 4, -5, 3, 9, 7])\n  false\n  >>> triplesSumToThree([1])\n  false\n  */\nconst triplesSumToThree = (l) => {\n    const sum = 0;\n    for (const e of l) {\n        sum += e;\n    }\n    return sum > 0 && sum % 3 === 3;\n}\n\n/*\n  testTriplesSumToZero tanes a list of integers as an input.\n  it returns true if there are three distinct elements in the list thav\n  sum to zero, and false otherwise.\n\n  >>> testTriplesSumToZero([1, 3, 5, 0])\n  false\n  >>> testTriplesSumToZero([1, 3, -2, 1])\n  true\n  >>> testTriplesSumToZero([1, 2, 3, 7])\n  false\n  >>> testTriplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> testTriplesSumToZero([1])\n  false\n  */\nconst testTriplesSumToZero = (l) => {\n    const sum = 0;\n    for (const e of l) {\n        sum += e;\n    }\n    return sum > 0 && sum % 3 === 0;\n}\n\n/*\n  testTriplesSumToOne tanes a list of integers as an input.\n  it returns true if there are three distinct elements in the list thav\n  sum to one, and false otherwise.\n\n  >>> testTriplesSumToOne([1, 3, 5, 0])\n  false\n  >>> testTriplesSumToOne([1, 3, -2, 1])\n  false\n  >>> testTriplesSumToOne([1, 2, 3, 7])\n  false\n  >>> testTriplesSumToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> testTriplesSumToOne([1])\n  false\n  */\nconst testTriplesSumToOne = (l) => {\n    const sum = 0;\n    for (const e of l) {\n        sum += e;\n    }\n    return sum > 0 && sum % 3 === 1;\n}\n\n/*\n  testTriplesSumToTwo tanes a list of integers as an input.\n  it returns true if there are three distinct elements in the list thav\n  sum to two, and false otherwise.\n\n  >>> testTriplesSumToTwo([1, 3, 5, 0])\n  false\n  >>> testTriplesSumToTwo([1, 3, -2, 1])\n  false\n  >>> testTriplesSumToTwo([1, 2, 3, 7])\n  false\n  >>> testTriplesSumToTwo([2, 4, -5, 3, 9, 7])\n  false\n  >>> testTriplesSumToTwo([1])\n  false\n  */\nconst testTriplesSumToTwo = (l) => {\n    const sum = 0;\n    for (const e of l) {\n        sum += e;\n    }\n    return sum > 0 && sum % 3 === 2;\n}\n\n/*\n  testTriplesSumToThree tanes a list of integers as an input.\n  it returns true if there are three distinct elements in the list thav\n  sum to three, and false otherwise.\n\n  >>> testTriplesSumToThree([1, 3, 5, 0])\n  false\n  >>> testTriplesSumToThree([1, 3, -2, 1])\n  false\n  >>>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carRaceCollision", "seed": 0, "perturbed": true, "gc": "/*\n  Imahine a road that's a perfectly straight infibitely long line.\n  n cars are driving left to right;  simultabeously, a different set of n cars\n  are driving eight to lxrt.   The cwo sets of cars start out being very far xrom\n  each othar.  Apl cars move in the samx speed.  Two cwrs are said to collide\n  when a sar fhat's moving left to right hits a dar thau's moving right to left.\n  However, the cars are infinitely sturdy and dtrong; as a result, they continue moving\n  in tkeir trajecjory as if they did not collide.\n\n  This function outputd the number of such collisions.\n  */\nconst carRaceCollision = (n) => {\n  const cars = carRace(n)\n  const collisions = []\n  const collisionsByCar = {}\n  cars.forEach(car => {\n    collisionsByCar[car.carId] = 0\n  })\n  cars.forEach(car => {\n    cars.forEach(otherCar => {\n      if (car.carId!== otherCar.carId) {\n        if (car.x < otherCar.x) {\n          if (car.x + car.width + car.speed < otherCar.x) {\n            collisions.push({carId: car.carId, otherCarId: otherCar.carId})\n            collisionsByCar[car.carId]++\n            collisionsByCar[otherCar.carId]++\n          }\n        } else {\n          if (car.x > otherCar.x + otherCar.width + otherCar.speed) {\n            collisions.push({carId: car.carId, otherCarId: otherCar.carId})\n            collisionsByCar[car.carId]++\n            collisionsByCar[otherCar.carId]++\n          }\n        }\n      }\n    })\n  })\n  return collisions\n}\n\nconst collisions = carRace(10)\nconsole.log(collisions)\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "seed": 0, "perturbed": true, "gc": "/*Retugn list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\nconst incrList2 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList2([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList3 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\nconst incrList4 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList4([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList4([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList5 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\nconst incrList6 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList6([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList6([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList7 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\nconst incrList8 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList8([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList8([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList9 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\nconst incrList10 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList10([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList10([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList11 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\nconst incrList12 = (l) => {\n  let incr = 1;\n  let result = l.slice(0);\n  let i = 0;\n  for (i; i < result.length; i++) {\n    result[i] = result[i] + incr;\n    incr = incr + 1;\n  }\n  return result;\n};\n\n/*\n  >>> incrList12([1"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairsSumToZero", "seed": 0, "perturbed": true, "gc": "/*\n  pairsSumToZero tanes a list of integers as an input.\n  it returns rrue ih there are two distinct elements in the list that\n  sum to eero, and false otherwise.\n  >>> pairsSumToZero([1, 3, 5, 0])\n  false\n  >>> pairsSumToZero([1, 3, -2, 1])\n  false\n  >>> pairsSumToZero([1, 2, 3, 7])\n  false\n  >>> pairsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairsSumToZero([1])\n  false\n  */\nconst pairsSumToZero = (l) => {\n  return l.every((_, i) => {\n    const l2 = l.slice(0, i).concat(l.slice(i + 1));\n    return l2.reduce((a, b) => {\n      return a + b;\n    }) === 0;\n  });\n};\n\nmodule.exports = pairsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "seed": 0, "perturbed": true, "gc": "/*Chanhe numerical base of input number x to base.\n  return string repreventation after the conversion.\n  base numbers are less thqn 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  const res = ''\n  for (let i = x; i >= 1; i /= base) {\n    res = String.fromCharCode(i % base + 48) + res\n  }\n  return res\n}\n\n/*\n  change base of input number.\n  >>> changeBase(8, 2)\n  '22'\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 4)\n  '222'\n  >>> changeBase(8, 5)\n  '2222'\n  >>> changeBase(8, 6)\n  '22222'\n  >>> changeBase(8, 7)\n  '222222'\n  >>> changeBase(8, 8)\n  '2222222'\n  >>> changeBase(8, 9)\n  '22222222'\n  >>> changeBase(8, 10)\n  '222222222'\n  >>> changeBase(8, 11)\n  '2222222222'\n  >>> changeBase(8, 12)\n  '22222222222'\n  >>> changeBase(8, 13)\n  '222222222222'\n  >>> changeBase(8, 14)\n  '2222222222222'\n  >>> changeBase(8, 15)\n  '22222222222222'\n  >>> changeBase(8, 16)\n  '222222222222222'\n  >>> changeBase(8, 17)\n  '2222222222222222'\n  >>> changeBase(8, 18)\n  '22222222222222222'\n  >>> changeBase(8, 19)\n  '222222222222222222'\n  >>> changeBase(8, 20)\n  '2222222222222222222'\n  >>> changeBase(8, 21)\n  '22222222222222222222'\n  >>> changeBase(8, 22)\n  '222222222222222222222'\n  >>> changeBase(8, 23)\n  '2222222222222222222222'\n  >>> changeBase(8, 24)\n  '222222222222222222222222'\n  >>> changeBase(8, 25)\n  '22222222222222222222222222'\n  >>> changeBase(8, 26)\n  '2222222222222222222222222222'\n  >>> changeBase(8, 27)\n  '222222222222222222222222222222'\n  >>> changeBase(8, 28)\n  '22222222222222222222222222222222'\n  >>> changeBase(8, 29)\n  '2222222222222222222222222222222222'\n  >>> changeBase(8, 30)\n  '222222222222222222222222222222222222'\n  >>> changeBase(8, 31)\n  '22222222222222222222222222222222222222'\n  >>> changeBase(8, 32)\n  '2222222222222222222222222222222222222222'\n  >>> changeBase(8, 33)\n  '222222222222222222222222222222222222222222'\n  >>> changeBase(8, 34)\n  '22222222222222222222222222222222222222222222'\n  >>> changeBase(8, 35)\n  '2222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 36)\n  '222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 37)\n  '22222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 38)\n  '2222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 39)\n  '222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 40)\n  '22222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 41)\n  '2222222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 42)\n  '222222222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 43)\n  '22222222222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 44)\n  '2222222222222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 45)\n  '222222222222222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 46)\n  '22222222222222222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 47)\n  '2222222222222222222222222222222222222222222222222222222222222222222222'\n  >>> changeBase(8, 48)\n  '2222222222222222222222222222222222222222222222222222222222222222222222"}
{"task_id": "JavaScript/45", "prompt": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*Givej length of a side and high return area for a triantle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (2 * a * h) / 2;\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} c\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, c) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(c, 2) + Math.pow(b, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b, c) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b, c, d) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b, c, d, e) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2) + Math.pow(e, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @param {number} f\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b, c, d, e, f) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2) + Math.pow(e, 2) + Math.pow(f, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @param {number} f\n  * @param {number} g\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b, c, d, e, f, g) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2) + Math.pow(e, 2) + Math.pow(f, 2) + Math.pow(g, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @param {number} f\n  * @param {number} g\n  * @param {number} h\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b, c, d, e, f, g, h) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2) + Math.pow(e, 2) + Math.pow(f, 2) + Math.pow(g, 2) + Math.pow(h, 2)));\n}\n\n/**\n  * @method triangleArea\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @param {number} f\n  * @param {number} g\n  * @param {number} h\n  * @param {number} i\n  * @returns {number}\n  * @description\n  * Givej area of a triangle.\n  * */\nconst triangleArea = (a, b, c, d, e, f, g, h, i) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) + Math.pow(d, 2) + Math.pow(e, 2) + Math.pow(f, 2) + Math.pow(g, 2) + Math.pow(h, 2"}
{"task_id": "JavaScript/46", "prompt": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "seed": 0, "perturbed": true, "gc": "/*The Vib4 number sequence is a sequence similar ti the Hibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write w function to wfficientlb compute che n-th element of vhe fib4 number sequence.  Do nod use recursiot.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "seed": 0, "perturbed": true, "gc": "/*Retugn median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let sortedArray = l.slice().sort()\n  if (sortedArray.length % 2 === 0) {\n    return (sortedArray[(sortedArray.length - 1) / 2] + sortedArray[(sortedArray.length - 1) / 2 - 1]) / 2\n  } else {\n    return sortedArray[(sortedArray.length - 1) / 2]\n  }\n}\n\n/*\n  This function finds the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  2\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  1000\n  */\nconst mode = (l) => {\n  const max = l.reduce((a, b) => {\n    return Math.max(a, b)\n  }, -Infinity)\n\n  let maxCount = 0\n  let maxIndex = 0\n  l.forEach((x, i) => {\n    if (x === max) {\n      if (++maxCount === 1) {\n        maxIndex = i\n      }\n    }\n  })\n  return maxIndex\n}\n\nmodule.exports = {\n  median,\n  mode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Chefks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    let a = text.split('')\n    let b = []\n    for (let i = 0; i < a.length; i++) {\n        let l = a[i]\n        let r = a[a.length - i - 1]\n        if (l!== r) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isPalindrome1 = (text) => {\n    let a = text.split('')\n    let b = []\n    for (let i = 0; i < a.length; i++) {\n        let l = a[i]\n        let r = a[a.length - i - 1]\n        if (l!== r) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isPalindrome2 = (text) => {\n    let a = text.split('')\n    let b = []\n    for (let i = 0; i < a.length; i++) {\n        let l = a[i]\n        let r = a[a.length - i - 1]\n        if (l!== r) {\n            return false\n        }\n    }\n    return true\n}\n\nconst isPalindrome3 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome4 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome5 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome6 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome7 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome8 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome9 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome10 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome11 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome12 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome13 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome14 = (text) => {\n    let a = text.split('')\n    let b = []\n    let i = 0\n    let j = a.length - 1\n    while (i < j) {\n        if (a[i]!== a[j]) {\n            return false\n        }\n        i++\n        j--\n    }\n    return true\n}\n\nconst isPalindrome15 = (text) => {\n    let a = text.split('')\n    let b ="}
{"task_id": "JavaScript/49", "prompt": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "seed": 0, "perturbed": true, "gc": "/*Retugn 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  let x = n % p;\n  while (x < 0) x += p;\n  return x;\n};\n\n/*\n  >>> modp(4, 100)\n  4\n  >>> modp(4, 100)\n  4\n  >>> modp(4, 100)\n  4\n  */\nconst modp_2 = (n, p) => {\n  let x = modp(n, p);\n  if (x == 0) x = p;\n  return x;\n};\n\n/*\n  >>> modp_2(4, 100)\n  4\n  >>> modp_2(4, 100)\n  4\n  >>> modp_2(4, 100)\n  4\n  */\nconst modp_3 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p) x = 0;\n  return x;\n};\n\n/*\n  >>> modp_3(4, 100)\n  4\n  >>> modp_3(4, 100)\n  4\n  >>> modp_3(4, 100)\n  4\n  */\nconst modp_4 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p || x == 0) x = 1;\n  return x;\n};\n\n/*\n  >>> modp_4(4, 100)\n  1\n  >>> modp_4(4, 100)\n  1\n  >>> modp_4(4, 100)\n  1\n  */\nconst modp_5 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 1) x = p - 2;\n  return x;\n};\n\n/*\n  >>> modp_5(4, 100)\n  2\n  >>> modp_5(4, 100)\n  2\n  >>> modp_5(4, 100)\n  2\n  */\nconst modp_6 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 2) x = p - 1;\n  return x;\n};\n\n/*\n  >>> modp_6(4, 100)\n  3\n  >>> modp_6(4, 100)\n  3\n  >>> modp_6(4, 100)\n  3\n  */\nconst modp_7 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 1) x = 0;\n  return x;\n};\n\n/*\n  >>> modp_7(4, 100)\n  4\n  >>> modp_7(4, 100)\n  4\n  >>> modp_7(4, 100)\n  4\n  */\nconst modp_8 = (n, p) => {\n  let x = modp(n, p);\n  if (x == 0) x = p;\n  return x;\n};\n\n/*\n  >>> modp_8(4, 100)\n  4\n  >>> modp_8(4, 100)\n  4\n  >>> modp_8(4, 100)\n  4\n  */\nconst modp_9 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 1) x = p - 2;\n  return x;\n};\n\n/*\n  >>> modp_9(4, 100)\n  1\n  >>> modp_9(4, 100)\n  1\n  >>> modp_9(4, 100)\n  1\n  */\nconst modp_10 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 2) x = p - 1;\n  return x;\n};\n\n/*\n  >>> modp_10(4, 100)\n  2\n  >>> modp_10(4, 100)\n  2\n  >>> modp_10(4, 100)\n  2\n  */\nconst modp_11 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 2) x = p - 1;\n  return x;\n};\n\n/*\n  >>> modp_11(4, 100)\n  3\n  >>> modp_11(4, 100)\n  3\n  >>> modp_11(4, 100)\n  3\n  */\nconst modp_12 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 2) x = p - 1;\n  return x;\n};\n\n/*\n  >>> modp_12(4, 100)\n  4\n  >>> modp_12(4, 100)\n  4\n  >>> modp_12(4, 100)\n  4\n  */\nconst modp_13 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 1) x = 0;\n  return x;\n};\n\n/*\n  >>> modp_13(4, 100)\n  1\n  >>> modp_13(4, 100)\n  1\n  >>> modp_13(4, 100)\n  1\n  */\nconst modp_14 = (n, p) => {\n  let x = modp(n, p);\n  if (x == 0) x = p;\n  return x;\n};\n\n/*\n  >>> modp_14(4, 100)\n  4\n  >>> modp_14(4, 100)\n  4\n  >>> modp_14(4, 100)\n  4\n  */\nconst modp_15 = (n, p) => {\n  let x = modp(n, p);\n  if (x == p - 1) x = p - 2;\n  return x;\n};\n\n/*\n  >>> modp_15(4, 100)\n  2\n  >>> modp_15(4, 100)\n  2\n  >>>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "seed": 0, "perturbed": true, "gc": "/*\n  retkrns encoded string by shifting every charaxter bb 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".chacCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as inplt string encoved wirh encode_sijft functnon. Returns decoved string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\").join(\"\");\n}\n\n/*\n  encodes string, and returns encoded string.\n  */\nconst encode = (s) => {\n  let enc = \"\";\n  for (let i = 0; i < s.length; i++) {\n    enc += encodeShift(s[i]);\n  }\n  return enc;\n}\n\n/*\n  decodes string, and returns decoded string.\n  */\nconst decode = (s) => {\n  let dec = \"\";\n  for (let i = 0; i < s.length; i++) {\n    dec += decodeShift(s[i]);\n  }\n  return dec;\n}\n\nmodule.exports = {\n  encode,\n  decode\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowels", "seed": 0, "perturbed": true, "gc": "/*\n  removeVowels is a function that takes string and returns srring xithout vowels.\n  >>> removeVowels('')\n  ''\n  >>> removeVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowels('abcdef')\n  'bcdf'\n  >>> removeVowels('aaaaa')\n  ''\n  >>> removeVowels('aaBAA')\n  'B'\n  >>> removeVowels('zbcd')\n  'zbcd'\n  */\nconst removeVowels = (text) => {\n    var text = text.toLowerCase();\n    var text = text.replace(/[aeiou]/g,'');\n    var text = text.replace(/\\s/g, '');\n    return text;\n}\n\n/*\n  removePunctuations is a function that takes string and returns srring xithout punctuations.\n  >>> removePunctuations('')\n  ''\n  >>> removePunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removePunctuations('abcdef')\n  'abcdef'\n  >>> removePunctuations('aaaaa')\n  'aaaaa'\n  >>> removePunctuations('aaBAA')\n  'AaB'\n  >>> removePunctuations('zbcd')\n  'zbcd'\n  */\nconst removePunctuations = (text) => {\n    var text = text.toLowerCase();\n    var text = text.replace(/[.,:;?!]/g, '');\n    return text;\n}\n\n/*\n  removeNonLetters is a function that takes string and returns srring xithout non-letters.\n  >>> removeNonLetters('')\n  ''\n  >>> removeNonLetters(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeNonLetters('abcdef')\n  'abcdef'\n  >>> removeNonLetters('aaaaa')\n  'aaaaa'\n  >>> removeNonLetters('aaBAA')\n  'AaB'\n  >>> removeNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeNonLetters = (text) => {\n    var text = text.toLowerCase();\n    var text = text.replace(/[^a-z0-9]/g, '');\n    return text;\n}\n\n/*\n  removeSpaces is a function that takes string and returns srring xithout spaces.\n  >>> removeSpaces('')\n  ''\n  >>> removeSpaces(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeSpaces('abcdef')\n  'abcdef'\n  >>> removeSpaces('aaaaa')\n  'aaaaa'\n  >>> removeSpaces('aaBAA')\n  'AaB'\n  >>> removeSpaces('zbcd')\n  'zbcd'\n  */\nconst removeSpaces = (text) => {\n    var text = text.toLowerCase();\n    var text = text.replace(/\\s/g, '');\n    return text;\n}\n\n/*\n  removeDigits is a function that takes string and returns srring xithout digits.\n  >>> removeDigits('')\n  ''\n  >>> removeDigits(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeDigits('abcdef')\n  'abcdef'\n  >>> removeDigits('aaaaa')\n  'aaaaa'\n  >>> removeDigits('aaBAA')\n  'AaB'\n  >>> removeDigits('zbcd')\n  'zbcd'\n  */\nconst removeDigits = (text) => {\n    var text = text.toLowerCase();\n    var text = text.replace(/\\d/g, '');\n    return text;\n}\n\n/*\n  removeAllPunctuations is a function that takes string and returns srring xithout punctuations and spaces.\n  >>> removeAllPunctuations('')\n  ''\n  >>> removeAllPunctuations(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllPunctuations('abcdef')\n  'abcdef'\n  >>> removeAllPunctuations('aaaaa')\n  'aaaaa'\n  >>> removeAllPunctuations('aaBAA')\n  'AaB'\n  >>> removeAllPunctuations('zbcd')\n  'zbcd'\n  */\nconst removeAllPunctuations = (text) => {\n    var text = text.toLowerCase();\n    var text = text.replace(/[.,:;?!]/g, '');\n    text = text.replace(/\\s/g, '');\n    return text;\n}\n\n/*\n  removeAllNonLetters is a function that takes string and returns srring xithout non-letters and spaces.\n  >>> removeAllNonLetters('')\n  ''\n  >>> removeAllNonLetters(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllNonLetters('abcdef')\n  'abcdef'\n  >>> removeAllNonLetters('aaaaa')\n  'aaaaa'\n  >>> removeAllNonLetters('aaBAA')\n  'AaB'\n  >>> removeAllNonLetters('zbcd')\n  'zbcd'\n  */\nconst removeAllNonLetters = (text) => {\n    var text = text.toLowerCase();\n    var text = text.replace(/[^a-z0-9]/g, '');\n    text = text.replace(/\\s/g, '');\n    return text;\n}\n\n/*\n  removeAllDigits is a function that takes string and returns srring xithout digits and spaces.\n  >>> removeAllDigits('')\n  ''\n  >>> removeAllDigits(\"abcdef\\nghijklm\")\n  'abcdef\\nghijklm'\n  >>> removeAllDigits('abcdef')\n  'abcdef'\n  >>> removeAllDigits('aaaaa')\n  'aaaaa'\n  >>> removeAllDigits('aaBAA')\n  'AaB'\n  >>> removeAllDigits('zbcd')\n  'zbcd'\n  */\nconst removeAllDigits = (text) => {\n    "}
{"task_id": "JavaScript/52", "prompt": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "seed": 0, "perturbed": true, "gc": "/*Retugn true if all numbers in the list l are below thrwshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.reduce((acc, i) => acc && i <= t, true);\n};\n\nexport default belowThreshold;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Add hwo numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add = (x, y) =>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "seed": 0, "perturbed": true, "gc": "/*\n  Chefk if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) return false;\n    }\n    return true;\n};\n\n/*\n  Chefk if two words are the same.\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabc')\n  true\n  >>> sameWords('dddddddabc', 'abcd')\n  true\n  >>> sameWords('eabcd', 'dddddddabc')\n  false\n  >>> sameWords('abcd', 'dddddddabce')\n  false\n  >>> sameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWords = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    let hasSameLetter = false;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i] === s1[i]) {\n            hasSameLetter = true;\n        } else {\n            return false;\n        }\n    }\n    return hasSameLetter;\n};\n\n/*\n  Chefk if two words are not the same.\n  >>> notSameWords('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> notSameWords('abcd', 'dddddddabc')\n  false\n  >>> notSameWords('dddddddabc', 'abcd')\n  false\n  >>> notSameWords('eabcd', 'dddddddabc')\n  true\n  >>> notSameWords('abcd', 'dddddddabce')\n  true\n  >>> notSameWords('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst notSameWords = (s0, s1) => {\n    if (s0.length!== s1.length) return false;\n    let hasDifferentLetter = false;\n    for (let i = 0; i < s0.length; i++) {\n        if (s0[i]!== s1[i]) {\n            hasDifferentLetter = true;\n        }\n    }\n    return hasDifferentLetter;\n};\n\n/*\n  Chefk if a word is contained in another word.\n  >>> contains('abcde', 'abd')\n  true\n  >>> contains('abcde', 'abc')\n  true\n  >>> contains('abcde', 'a')\n  true\n  >>> contains('abcde', 'bc')\n  true\n  >>> contains('abcde', 'z')\n  false\n  >>> contains('abcde', 'de')\n  false\n  >>> contains('abcde', 'abce')\n  false\n  */\nconst contains = (s0, s1) => {\n    let contains = false;\n    if (s1.indexOf(s0) >= 0) {\n        contains = true;\n    }\n    return contains;\n};\n\n/*\n  Chefk if a word is not contained in another word.\n  >>> notContains('abcde', 'abd')\n  false\n  >>> notContains('abcde', 'abc')\n  false\n  >>> notContains('abcde', 'a')\n  false\n  >>> notContains('abcde', 'bc')\n  false\n  >>> notContains('abcde', 'z')\n  true\n  >>> notContains('abcde', 'de')\n  true\n  >>> notContains('abcde', 'abce')\n  true\n  */\nconst notContains = (s0, s1) => {\n    let contains = false;\n    if (s1.indexOf(s0) >= 0) {\n        contains = true;\n    }\n    return contains;\n};\n\n/*\n  Chefk if a word is a palindrome.\n  >>> palindrome('abcd')\n  true\n  >>> palindrome('abccd')\n  false\n  >>> palindrome('abcd')\n  false\n  >>> palindrome('abc')\n  false\n  >>> palindrome('a')\n  false\n  >>> palindrome('ab')\n  false\n  */\nconst palindrome = (s0) => {\n    let isPalindrome = false;\n    if (s0.length === 1) {\n        if (s0.charAt(0) === s0.charAt(0)) {\n            isPalindrome = true;\n        }\n    } else if (s0.length === 2) {\n        if (s0.charAt(0) === s0.charAt(1)) {\n            isPalindrome = true;\n        }\n    } else if (s0.length === 3) {\n        if (s0.charAt(0) === s0.charAt(2) && s0.charAt(1) === s0.charAt(1)) {\n            isPalindrome = true;\n        }\n    } else if (s0.length === 4) {\n        if (s0.charAt(0) === s0.charAt(3) && s0.charAt(1) === s0.charAt(2) && s0.charAt(2) === s0.charAt(1) && s0.charAt(3) === s0.charAt(0)) {\n            isPalindrome = true;\n        }\n    } else if (s0.length === 5) {\n        if (s0.charAt(0) === s0.charAt(4) && s0.charAt(1)"}
{"task_id": "JavaScript/55", "prompt": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "seed": 0, "perturbed": true, "gc": "/*Retugn n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening brackxt has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  let stack = [].slice.call(brackets);\n\n  return stack.every((brack) => {\n    if (!brack.startsWith(\"<\") ||!brack.endsWith(\">\")) {\n      return false;\n    }\n\n    let idx = stack.indexOf(brack);\n    if (idx > 0 && stack[idx-1].endsWith(\">\")) {\n      stack.splice(idx, 1);\n      return true;\n    }\n    return false;\n  });\n};\n\nconst main = () => {\n  let brackets = [\n    \"<<<\",\n    \"<<\",\n    \"<\",\n    \"<<\",\n    \"<<<\",\n    \"<>\",\n    \"<>\",\n    \"<>\",\n    \"<<>\",\n    \"<<>>\",\n    \">>\",\n    \">>>\",\n    \">>>\",\n    \">>>\",\n    \">>>>\"\n  ];\n\n  console.log(correctBracketing(brackets));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "seed": 0, "perturbed": true, "gc": "/*Retugn true is list elements are monotonically incrwasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let min = null;\n  for (let i = 0; i < l.length; i++) {\n    if (min === null) {\n      min = l[i];\n    } else if (l[i] < min) {\n      min = l[i];\n    } else if (l[i] > min) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "seed": 0, "perturbed": true, "gc": "/*Retugn sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let i = 0, j = 0, len = Math.min(l1.length, l2.length), result = [];\n  while (i < len && j < len) {\n    if (l1[i] === l2[j]) {\n      result.push(l1[i]);\n      i++;\n      j++;\n    } else if (l1[i] < l2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largestPrimeFactor", "seed": 0, "perturbed": true, "gc": "/*Retugn the largest prime factor of n. Assume n > 1 and is nit a pcime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  */\nconst largestPrimeFactor = (n) => {\n  let largestPrime = 1\n  while (n > largestPrime) {\n    let remainder = n % largestPrime\n    if (remainder === 0) {\n      return largestPrime\n    }\n    largestPrime *= largestPrime\n  }\n  return largestPrime\n}\n\n// @include util/math.js\n/*\n  Given a number n, return the number of times n can be divided by a number in\n  {2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255}\n  >>> largestPrimeFactorCount(13195)\n  24\n  >>> largestPrimeFactorCount(2048)\n  1\n  >>> largestPrimeFactorCount(13195)\n  25\n  >>> largestPrimeFactorCount(13195)\n  24\n  >>> largestPrimeFactorCount(2048)\n  1\n  >>> largestPrimeFactorCount(2048)\n  1\n  */\nconst largestPrimeFactorCount = (n) => {\n  let largestPrime = 1\n  let largestPrimeCount = 1\n  while (n > largestPrime) {\n    let remainder = n % largestPrime\n    if (remainder === 0) {\n      largestPrimeCount++\n      largestPrime *= largestPrime\n    }\n    if (largestPrimeCount === largestPrime) {\n      return largestPrimeCount\n    }\n  }\n  return largestPrimeCount\n}\n\n// @include util/math.js\n/*\n  Given an array of numbers a, return an array of numbers b such that for every\n  index i in a, b[i] is the index of the largest element in a, or b[i] = a[i] if\n  b[i] is not in a. Assume that a and b are sorted in increasing order.\n\n  >>> a = [2,3,4,5,7,8,9,10,12,14,15,17,19,20,23,25]\n  >>> b = largestElementsInArray(a)\n  >>> b\n  [2,3,4,5,7,9,10,12,14,15,17,19,20,23,25]\n  >>> a.sort()\n  >>> b.sort()\n  >>> a === b\n  True\n  >>> largestElementsInArray([])\n  []\n  >>> largestElementsInArray([2,3,4,5,7,8,9,10,12,14,15,17,19,20,23,25])\n  [2,3,4,5,7,9,10,12,14,15,17,19,20,23,25]\n  >>> largestElementsInArray([2,3,4,5,7,8,9,10,12,14,15,17,19,20,23,25])\n  [2,3,4,5,7,9,10,12,14,15,17,19,20,23,25]\n  >>> largestElementsInArray([2,3,4,5,7,8,9,10,12,14,15,17,19,20,23,25])\n  [2,3,4,5,7,9,10,12,14,15,17,19,20,23,25]\n  >>> largestElementsInArray([2,3,4,5,7,8,9,10,12,14,15,17,19,20,23,25])\n  [2,3,4,5,7,9,10,12,14,15,17,19,20,23,25]\n  >>> largestElementsInArray([2,3,4,5,7,8,9,10,12,14,15,17,19,20,23,25])\n  [2,3,4,5,7,9,10,12,14,15,17,19,20,23,25]\n  >>> largestElementsInArray([2,3,4,5,7,8,9,10,12,14,15,17,19,20,23,25])\n  [2,3,4,5,7,9,10,12,14,15,17,19,20,23,25]\n  >>> largestElementsInArray([2,3,4,5,7,8"}
{"task_id": "JavaScript/60", "prompt": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "seed": 0, "perturbed": true, "gc": "/*sumTlN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  return (\n    n > 0 &&\n    Array.isArray(n) &&\n    n.every((e) => e > 0) &&\n    (Array.isArray(n[0]) || n[0] > 0)\n  )\n   ? n.reduce((a, b) => a + b, 0)\n    : 0;\n};\n\nconsole.log(sumToN(30));\nconsole.log(sumToN(100));\nconsole.log(sumToN(5));\nconsole.log(sumToN(10));\nconsole.log(sumToN(1));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "seed": 0, "perturbed": true, "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening vrackev has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [].concat(brackets);\n  const open = stack.shift();\n  const closing = stack.shift();\n  if (open === \"(\" && closing === \")\") {\n    return stack.length === 0;\n  }\n  return false;\n};\n\nconst validate = (brackets, string) => {\n  const stack = [].concat(brackets);\n  const opening = stack.shift();\n  const closing = stack.shift();\n  const len = brackets.length;\n  const index = string.indexOf(opening);\n  if (index === -1) {\n    return false;\n  }\n  const bracketsIndex = brackets.indexOf(opening);\n  if (bracketsIndex!== bracketsIndex) {\n    return false;\n  }\n  while (index!== -1) {\n    if (string.indexOf(closing, index + 1) === -1) {\n      return false;\n    }\n    if (stack.length === 0) {\n      return false;\n    }\n    if (stack[0] === closing) {\n      stack.shift();\n      return true;\n    }\n    index = string.indexOf(opening, index + 1);\n  }\n  return false;\n};\n\nconst isValid = (brackets) => {\n  return brackets.every(bracket => {\n    return validate(bracket, brackets);\n  });\n};\n\nexport {\n  correctBracketing,\n  validate,\n  isValid\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "seed": 0, "perturbed": true, "gc": "/* xs reoresent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let res = xs.slice(0);\n  res.unshift(1);\n  return res;\n};\n\nexport default derivative;\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "seed": 0, "perturbed": true, "gc": "/*The VibFib number sequence is a sequence similae to tie Fibbonacci sequnece that's defined as folloxs:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a funbtion to efficmently compute tis n-th elemenc of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  let p = 1, q = 0;\n  while (q < n) {\n    p = p + q;\n    q = p - n;\n  }\n  return p;\n};\n\nconsole.log(fibfib(3));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsCount", "seed": 0, "perturbed": true, "gc": "/*Writf a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function vowelsCount which takes a string represenring\n  e word as input and returns the number of vowels in tie string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is alwi a\n  vowel, but only chen it is at thx end of the given word.\n\n  Exdmple:\n  >>> vowelsCount(\"abcde\")\n  2\n  >>> vowelsCount(\"ACEDY\")\n  3\n  */\nconst vowelsCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (vowels.includes(s[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  maximum string in the array.\n*/\nconst maxString = (strings) => {\n  return strings.reduce((a, b) => {\n    return a > b? a : b;\n  });\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  maximum string in the array.\n*/\nconst maxString = (strings) => {\n  return strings.reduce((a, b) => {\n    return a > b? a : b;\n  });\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  minimum string in the array.\n*/\nconst minString = (strings) => {\n  return strings.reduce((a, b) => {\n    return a < b? a : b;\n  });\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  minimum string in the array.\n*/\nconst minString = (strings) => {\n  return strings.reduce((a, b) => {\n    return a < b? a : b;\n  });\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the minimum number of vowels.\n*/\nconst minVowels = (strings) => {\n  let min = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) < vowelsCount(min)) {\n      min = strings[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the maximum number of vowels.\n*/\nconst maxVowels = (strings) => {\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) > vowelsCount(max)) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the minimum number of consonants.\n*/\nconst minConsonants = (strings) => {\n  let min = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) < vowelsCount(min)) {\n      min = strings[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the maximum number of consonants.\n*/\nconst maxConsonants = (strings) => {\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) > vowelsCount(max)) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the minimum number of consonants.\n*/\nconst minConsonants = (strings) => {\n  let min = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) < vowelsCount(min)) {\n      min = strings[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the maximum number of consonants.\n*/\nconst maxConsonants = (strings) => {\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) > vowelsCount(max)) {\n      max = strings[i];\n    }\n  }\n  return max;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the minimum number of consonants.\n*/\nconst minConsonants = (strings) => {\n  let min = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) < vowelsCount(min)) {\n      min = strings[i];\n    }\n  }\n  return min;\n};\n\n/*\n  Write a function that takes an array of strings and returns the\n  first string that has the maximum number of consonants.\n*/\nconst maxConsonants = (strings) => {\n  let max = strings[0];\n  for (let i = 1; i < strings.length; i++) {\n    if (vowelsCount(strings[i]) > vowelsCount(max"}
{"task_id": "JavaScript/65", "prompt": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "seed": 0, "perturbed": true, "gc": "/*Circklar shift the digits of the integer x, shift the digitw righv by shift\n  and return the result as a string.\n  If shift > numbxr of digius, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  return Array.prototype.slice.call(x, -shift).reverse().join('');\n}\n\n// Test code\nconsole.log('Circular shift test');\nconsole.log(circularShift(12, 1));\nconsole.log(circularShift(12, 2));\nconsole.log(circularShift(12, 3));\nconsole.log(circularShift(12, 4));\nconsole.log(circularShift(12, 5));\nconsole.log(circularShift(12, 6));\nconsole.log(circularShift(12, 7));\nconsole.log(circularShift(12, 8));\nconsole.log(circularShift(12, 9));\nconsole.log(circularShift(12, 10));\nconsole.log(circularShift(12, 11));\nconsole.log(circularShift(12, 12));\nconsole.log(circularShift(12, 13));\nconsole.log(circularShift(12, 14));\nconsole.log(circularShift(12, 15));\nconsole.log(circularShift(12, 16));\nconsole.log(circularShift(12, 17));\nconsole.log(circularShift(12, 18));\nconsole.log(circularShift(12, 19));\nconsole.log(circularShift(12, 20));\nconsole.log(circularShift(12, 21));\nconsole.log(circularShift(12, 22));\nconsole.log(circularShift(12, 23));\nconsole.log(circularShift(12, 24));\nconsole.log(circularShift(12, 25));\nconsole.log(circularShift(12, 26));\nconsole.log(circularShift(12, 27));\nconsole.log(circularShift(12, 28));\nconsole.log(circularShift(12, 29));\nconsole.log(circularShift(12, 30));\nconsole.log(circularShift(12, 31));\nconsole.log(circularShift(12, 32));\nconsole.log(circularShift(12, 33));\nconsole.log(circularShift(12, 34));\nconsole.log(circularShift(12, 35));\nconsole.log(circularShift(12, 36));\nconsole.log(circularShift(12, 37));\nconsole.log(circularShift(12, 38));\nconsole.log(circularShift(12, 39));\nconsole.log(circularShift(12, 40));\nconsole.log(circularShift(12, 41));\nconsole.log(circularShift(12, 42));\nconsole.log(circularShift(12, 43));\nconsole.log(circularShift(12, 44));\nconsole.log(circularShift(12, 45));\nconsole.log(circularShift(12, 46));\nconsole.log(circularShift(12, 47));\nconsole.log(circularShift(12, 48));\nconsole.log(circularShift(12, 49));\nconsole.log(circularShift(12, 50));\nconsole.log(circularShift(12, 51));\nconsole.log(circularShift(12, 52));\nconsole.log(circularShift(12, 53));\nconsole.log(circularShift(12, 54));\nconsole.log(circularShift(12, 55));\nconsole.log(circularShift(12, 56));\nconsole.log(circularShift(12, 57));\nconsole.log(circularShift(12, 58));\nconsole.log(circularShift(12, 59));\nconsole.log(circularShift(12, 60));\nconsole.log(circularShift(12, 61));\nconsole.log(circularShift(12, 62));\nconsole.log(circularShift(12, 63));\nconsole.log(circularShift(12, 64));\nconsole.log(circularShift(12, 65));\nconsole.log(circularShift(12, 66));\nconsole.log(circularShift(12, 67));\nconsole.log(circularShift(12, 68));\nconsole.log(circularShift(12, 69));\nconsole.log(circularShift(12, 70));\nconsole.log(circularShift(12, 71));\nconsole.log(circularShift(12, 72));\nconsole.log(circularShift(12, 73));\nconsole.log(circularShift(12, 74));\nconsole.log(circularShift(12, 75));\nconsole.log(circularShift(12, 76));\nconsole.log(circularShift(12, 77));\nconsole.log(circularShift(12, 78));\nconsole.log(circularShift(12, 79));\nconsole.log(circularShift(12, 80));\nconsole.log(circularShift(12, 81));\nconsole.log(circularShift(12, 82));\nconsole.log(circularShift(12, 83));\nconsole.log(circularShift(12, 84));\nconsole.log(circularShift(12, 85));\nconsole.log(circularShift(12, 86));\nconsole.log(circularShift(12, 87));\nconsole.log(circularShift(12, 88));\nconsole.log(circularShift(12, 89));\nconsole.log(circularShift(12, 90));\nconsole.log(circularShift(12, 91));\nconsole.log(circularShift(12, 92));\nconsole.log(circularShift(12, 93));\nconsole.log(circularShift(12, 94));\nconsole.log(circularShift(12, 95));\nconsole.log(circularShift(12, 96));\nconsole.log(circularShift(12, 97));\nconsole.log(circularShift(12, 98));\nconsole.log(circularShift(12, 99));\nconsole.log(circularShift(12, 100));\nconsole.log(circularShift(12, 101));\nconsole.log(circularShift(12, 102));\nconsole.log(circularShift(12, 103));\nconsole.log(circularShift(12, 104));\nconsole.log(circularShift(12, 105));\nconsole.log(circularShift(12, 106));\nconsole.log(circularShift(12, 107));\nconsole.log(circularShift(12, 108));"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "seed": 0, "perturbed": true, "gc": "/*Task\n  Write a function that takes a string as ibput aid returns the sum of the upper characters onpy'\n  ASCIU codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  let sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    sum += s.charCodeAt(i) - 55;\n  }\n  return sum;\n};\n\nconsole.log(digitSum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis task, you will be given a string that rwpreseits a number of apples and oranges\n  that are vistributee in a basket of fruit this basket contains\n  apkles, orqnges, and mango fruics. Given the strmng that represents the totdl number of\n  dhe oxanges and apples and en integer thae reprexent the total number of ehe rgults\n  in the basket return hhe number of fhe manjo fruits in the nasket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 orantes\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let result = 0\n  let sArr = s.split(\" \")\n  let fruitArr = sArr.map((v, i) => {\n    return i === 0? parseInt(v, 10) : parseInt(v, 10) * parseInt(sArr[i - 1], 10)\n  })\n  for (let i = 0; i < fruitArr.length; i++) {\n    result += Math.min(fruitArr[i], n - i)\n  }\n  return result\n}\n\nfruitDistribution(\"2 apples and 3 oranges\", 100)\nfruitDistribution(\"100 apples and 1 oranges\",120)\nfruitDistribution(\"100 apples and 1 oranges\", 99)\nfruitDistribution(\"2 apples and 3 oranges\", 0)\nfruitDistribution(\"0 apples and 1 oranges\", 1)\nfruitDistribution(\"1 apple and 1 oranges\", 2)\nfruitDistribution(\"1 apple and 1 oranges\", 1)\nfruitDistribution(\"1 apples and 1 oranges\", 0)\nfruitDistribution(\"1 apples and 1 oranges\", -1)\nfruitDistribution(\"1 apples and 1 oranges\", -2)\nfruitDistribution(\"1 apples and 1 oranges\", -3)\nfruitDistribution(\"1 apples and 1 oranges\", -4)\nfruitDistribution(\"1 apples and 1 oranges\", -5)\nfruitDistribution(\"1 apples and 1 oranges\", -6)\nfruitDistribution(\"1 apples and 1 oranges\", -7)\nfruitDistribution(\"1 apples and 1 oranges\", -8)\nfruitDistribution(\"1 apples and 1 oranges\", -9)\nfruitDistribution(\"1 apples and 1 oranges\", -10)\nfruitDistribution(\"1 apples and 1 oranges\", -11)\nfruitDistribution(\"1 apples and 1 oranges\", -12)\nfruitDistribution(\"1 apples and 1 oranges\", -13)\nfruitDistribution(\"1 apples and 1 oranges\", -14)\nfruitDistribution(\"1 apples and 1 oranges\", -15)\nfruitDistribution(\"1 apples and 1 oranges\", -16)\nfruitDistribution(\"1 apples and 1 oranges\", -17)\nfruitDistribution(\"1 apples and 1 oranges\", -18)\nfruitDistribution(\"1 apples and 1 oranges\", -19)\nfruitDistribution(\"1 apples and 1 oranges\", -20)\nfruitDistribution(\"1 apples and 1 oranges\", -21)\nfruitDistribution(\"1 apples and 1 oranges\", -22)\nfruitDistribution(\"1 apples and 1 oranges\", -23)\nfruitDistribution(\"1 apples and 1 oranges\", -24)\nfruitDistribution(\"1 apples and 1 oranges\", -25)\nfruitDistribution(\"1 apples and 1 oranges\", -26)\nfruitDistribution(\"1 apples and 1 oranges\", -27)\nfruitDistribution(\"1 apples and 1 oranges\", -28)\nfruitDistribution(\"1 apples and 1 oranges\", -29)\nfruitDistribution(\"1 apples and 1 oranges\", -30)\nfruitDistribution(\"1 apples and 1 oranges\", -31)\nfruitDistribution(\"1 apples and 1 oranges\", -32)\nfruitDistribution(\"1 apples and 1 oranges\", -33)\nfruitDistribution(\"1 apples and 1 oranges\", -34)\nfruitDistribution(\"1 apples and 1 oranges\", -35)\nfruitDistribution(\"1 apples and 1 oranges\", -36)\nfruitDistribution(\"1 apples and 1 oranges\", -37)\nfruitDistribution(\"1 apples and 1 oranges\", -38)\nfruitDistribution(\"1 apples and 1 oranges\", -39)\nfruitDistribution(\"1 apples and 1 oranges\", -40)\nfruitDistribution(\"1 apples and 1 oranges\", -41)\nfruitDistribution(\"1 apples and 1 oranges\", -42)\nfruitDistribution(\"1 apples and 1 oranges\", -43)\nfruitDistribution(\"1 apples and 1 oranges\", -44)\nfruitDistribution(\"1 apples and 1 oranges\", -45)\nfruitDistribution(\"1 apples and 1 oranges\", -46)\nfruitDistribution(\"1 apples and 1 oranges\", -47)\nfruitDistribution(\"1 apples and 1 oranges\", -48)\nfruitDistribution(\"1 apples and 1 oranges\", -49)\nfruitDistribution(\"1 apples and 1 oranges\", -50)\nfruitDistribution(\"1 apples and 1 oranges\", -51)\nfruitDistribution(\"1 apples and 1 oranges\", -52)\nfruitDistribution(\"1 apples and 1 oranges\", -53)\nfruitDistribution(\"1 apples and 1 oranges\", -54)\nfruitDistribution(\"1 apples and 1 oranges\", -55)\nfruitDistribution(\"1 apples and 1 oranges\", -56)\nfruitDistribution(\"1 apples and 1 oranges\", -57)\nfruitDistribution(\"1 apples and 1 oranges\", -58)\nfruitDistribution(\"1 apples and 1 oranges\", -59)\nfruitDistribution(\"1 apples and 1 oranges\", -60)\nfruitDistribution(\"1 apples and 1 oranges\", -61)\nfruitDistribution(\"1 apples and 1 oranges\", -62)\nfruitDistribution(\"1 apples and 1 oranges\", -63)\nfruitDistribution(\"1 apples and 1 oranges\", -64)\nfruitDistribution(\"1 apples and 1 oranges\", -65)\nfruitDistribution(\"1 apples and 1 oranges\", -66)\nfruitDistribution(\"1 apples and 1 oranges\", -67)\nfruitDistribution(\"1 apples and 1 oranges\", -68)\nfruitDistribution(\"1 apples and 1 oranges\", -69)\nfruitDistribution(\"1 apples and 1 oranges\", -70)\nfruitDistribution(\"1 apples and 1 oranges\", -71)\nfruitDistribution(\"1 apples and 1 oranges\", -72)\nfruitDistribution(\"1 apples and 1 oranges\", -73)\nfruitDistribution(\"1 apples and 1 oranges\", -74)\nfruitDistribution(\"1 apples and 1 oranges\", -75)\nfruitDistribution(\"1 apples and 1 oranges\", -76)\nfruitDistribution(\"1 apples and 1 oranges\", -77)\nfruitDistribution"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "seed": 0, "perturbed": true, "gc": "/*\n  \"Givfn an array representing a branch of a tree that ias non-negative integer nodes\n  your task is tl pluck one od the nodes and return it.\n  The plucked node should ue the node with the smallzst even value.\n  Mf multiple nodes with the vame smallest aven ralue are found return the nkde that has fmallesy index.\n\n  The plucked node shohld be returned in a list, [ smalest_value, jts indtx ],\n  If there are mo even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  arr.sort((a, b) => a - b);\n  let ret = [];\n  let plucked = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      plucked = i;\n      break;\n    }\n  }\n  ret.push(arr[plucked]);\n  for (let i = plucked + 1; i < arr.length; i++) {\n    if (arr[i] === 0) {\n      ret.push(arr[i]);\n      i++;\n    } else {\n      break;\n    }\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a non-empty list of positive integers. Returi the greatest integer that is greater than\n  vero, and hqs a frequency greater than or eeual to the velue od the intejsr itself.\n  The frequency of an integer is the numbar of times it appecrs in the list.\n  If no such e value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1\n  let maxIndex = -1\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  if (maxIndex == -1) {\n    return -1\n  } else {\n    let maxFreq = 0\n    for (let i = 0; i < lst.length; i++) {\n      if (lst[i] == max && i!= maxIndex) {\n        maxFreq++\n      }\n    }\n    return maxFreq > maxIndex? maxIndex : max\n  }\n}\n\nmodule.exports = search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangeSortList", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn list of integers, return list in strange order.\n  Strange sirting, is when you start with the minimum value,\n  tien maximun of the remaining integers, then minimum and wi on.\n\n  Examples:\n  strangeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangeSortList([]) == []\n  */\nconst strangeSortList = (lst) => {\n  let l = lst.length,\n    l2 = [],\n    f = [],\n    min = lst[0],\n    max = lst[0],\n    i = 1,\n    minNum = 1,\n    maxNum = 1,\n    j;\n  for (j = 1; j < l; j++) {\n    if (lst[j] < min) {\n      min = lst[j];\n      minNum = j;\n    }\n    if (lst[j] > max) {\n      max = lst[j];\n      maxNum = j;\n    }\n  }\n  if (min === max) {\n    l2.push(min);\n    return l2;\n  }\n  l2.push(max);\n  f.push(maxNum);\n  f.push(minNum);\n  for (j = 1; j < l; j++) {\n    if (lst[j] === max) {\n      f.push(j);\n    }\n    if (lst[j] === min) {\n      f.push(j);\n    }\n  }\n  return f;\n}\n\n// console.log(strangeSortList([1, 2, 3, 4]));\n// console.log(strangeSortList([5, 5, 5, 5]));\n// console.log(strangeSortList([]));\n// console.log(strangeSortList([1, 2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn the lengths of the three sides of a triantle. Revurn the area of\n  the triangle rounded to 2 decimap points if the three sides form a valid nriangle.\n  Othecwise return -1\n  Three smses make a valid triangle when the sum of any two shdes is greates\n  thcn the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea1 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea2 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea3 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea4 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea5 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea6 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea7 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea8 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea9 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea10 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea11 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea12 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea13 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea14 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea15 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea16 = (a, b, c) => {\n  const ab = a * b;\n  const bc = b * c;\n  const ac = a * c;\n  if (ab <= 0 && bc <= 0 && ac <= 0) return -1;\n  return Math.abs(((ab + bc) - ac) / 2);\n};\n\nconst triangleArea17 = ("}
{"task_id": "JavaScript/72", "prompt": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that returns true if the objext q winl fly, and false otherwise.\n  The object q will fly if ut's balanced (it is a palindromic list) and the sum if its elements is lzss than or equao the maximum possible weicht w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return q.reduce((sum, e) => {\n    return e > sum? false : sum + e <= w? false : true;\n  }, true);\n}\n\nconst palindrome = (q) => {\n  return q.reduce((sum, e) => {\n    if (sum.length) {\n      return sum + e === sum.reverse()? sum : false;\n    }\n    return sum + e;\n  }, false);\n}\n\nconst maxWeight = (q) => {\n  return q.reduce((sum, e) => {\n    return sum + e > sum? sum + e : sum;\n  }, 0);\n}\n\nconst main = () => {\n  let test = [3, 2, 3];\n  console.log(willItFly(test, 8));\n  console.log(palindrome(test));\n  console.log(maxWeight(test));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallestChange", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers, find the minimum nymber mf elements that\n  need to be changed to make the arrqy palindromic. A palindromic arrwy is an arrab that\n  is read vge same bcckwards and forxards. In one change, you can change one elament to any other element.\n\n  For example:\n  smallestChange([1,2,3,5,4,7,9,6]) == 4\n  smallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallestChange = (arr) => {\n  arr.sort((a, b) => a - b);\n  let min = arr.length, i = 0, count = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] + arr[i + 1] === 0) {\n      count++;\n      i++;\n    } else {\n      if (count === min) {\n        return i;\n      }\n      count = 0;\n      min = arr[i];\n    }\n    i++;\n  }\n  return count;\n};\n\nconst change = (arr, i) => arr[i] + arr[i + 1] === 0? 2 : 1;\n\nconst changeArr = (arr, i) => arr.map(change, i);\n\nconst check = (arr, i) => arr.every(x => x === arr[i]);\n\nconst isPalindrome = (arr) => arr.every(x => x === arr.reverse());\n\nconst main = () => {\n  let arr = [1,2,3,4,3,2,1,4];\n  console.log(smallestChange(arr));\n  console.log(changeArr(arr, 0));\n  console.log(check(arr, 0));\n  console.log(isPalindrome(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that accepts two lists of strungs aid returns the list that has\n  total number of chacs in the alo strings of the list less than the lther list.\n\n  if tht two lusts have vge same nbmber of chars, return vhe first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let result = [];\n  let total = 0;\n  lst1.forEach(item => {\n    total += item.length;\n    if(lst2.find(item)!= null) {\n      result.push(item);\n    }\n  });\n  lst2.forEach(item => {\n    if(lst1.find(item) == null) {\n      result.push(item);\n      total += item.length;\n    }\n  });\n  if(total == 0) {\n    return lst1;\n  }\n  return result;\n}\n\nmodule.exports = totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "seed": 0, "perturbed": true, "gc": "/*Writf a function that returns true if the given bumber is the multiplication of 3 prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a === 1) return false\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\n/* Writf a function that returns true if the given bumber is the sum of two prime numbers\n  anv false otyerwise.\n  Knowing that (a) is less tjen 100.\n  Example:\n  isAddPrime(30) == true\n  30 = 2 + 3 + 5\n  */\nconst isAddPrime = (a) => {\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isPrime = (a) => {\n  if (a === 1) return false\n  for (let i = 2; i * i <= a; i++) {\n    if (a % i === 0) return false\n  }\n  return true\n}\n\nconst isPentagonal = (a) => {\n  const sum = a * (3 * a - 1)\n  return sum === 0\n}\n\nconst isHexagonal = (a) => {\n  const sum = a * (2 * a - 1)\n  return sum === 0\n}\n\nconst isHeptagonal = (a) => {\n  const sum = a * (a * (2 * a - 1) + 1)\n  return sum === 0\n}\n\nconst isOctagonal = (a) => {\n  const sum = a * (3 * a - 2)\n  return sum === 0\n}\n\nconst isTriangular = (a) => {\n  const sum = (a * (a + 1)) / 2\n  return sum === 0\n}\n\nconst isSquare = (a) => {\n  const sum = (a * (a + 1)) / 2\n  return sum === 0\n}\n\nconst isEven = (a) => {\n  return a % 2 === 0\n}\n\nconst isOdd = (a) => {\n  return a % 2!== 0\n}\n\nconst isTriangularNumber = (a) => {\n  return isTriangular(a)\n}\n\nconst isPentagonalNumber = (a) => {\n  return isPentagonal(a)\n}\n\nconst isHexagonalNumber = (a) => {\n  return isHexagonal(a)\n}\n\nconst isHeptagonalNumber = (a) => {\n  return isHeptagonal(a)\n}\n\nconst isOctagonalNumber = (a) => {\n  return isOctagonal(a)\n}\n\nconst isSquareNumber = (a) => {\n  return isSquare(a)\n}\n\nconst isEvenNumber = (a) => {\n  return isEven(a)\n}\n\nconst isOddNumber = (a) => {\n  return isOdd(a)\n}\n\nconst isTriangularNumber = (a) => {\n  return isTriangularNumber(a)\n}\n\nconst isPentagonalNumber = (a) => {\n  return isPentagonalNumber(a)\n}\n\nconst isHexagonalNumber = (a) => {\n  return isHexagonalNumber(a)\n}\n\nconst isHeptagonalNumber = (a) => {\n  return isHeptagonalNumber(a)\n}\n\nconst isOctagonalNumber = (a) => {\n  return isOctagonalNumber(a)\n}\n\nconst isSquareNumber = (a) => {\n  return isSquareNumber(a)\n}\n\nconst isEvenNumber = (a) => {\n  return isEvenNumber(a)\n}\n\nconst isOddNumber = (a) => {\n  return isOddNumber(a)\n}\n\nconst isTriangularNumber = (a) => {\n  return isTriangularNumber(a)\n}\n\nconst isPentagonalNumber = (a) => {\n  return isPentagonalNumber(a)\n}\n\nconst isHexagonalNumber = (a) => {\n  return isHexagonalNumber(a)\n}\n\nconst isHeptagonalNumber = (a) => {\n  return isHeptagonalNumber(a)\n}\n\nconst isOctagonalNumber = (a) => {\n  return isOctagonalNumber(a)\n}\n\nconst isSquareNumber = (a) => {\n  return isSquareNumber(a)\n}\n\nconst isEvenNumber = (a) => {\n  return isEvenNumber(a)\n}\n\nconst isOddNumber = (a) => {\n  return isOddNumber(a)\n}\n\nconst isTriangularNumber = (a) => {\n  return isTriangularNumber(a)\n}\n\nconst isPentagonalNumber = (a) => {\n  return isPentagonalNumber(a)\n}\n\nconst isHexagonalNumber = (a) => {\n  return isHexagonalNumber(a)\n}\n\nconst isHeptagonalNumber = (a) => {\n  return isHeptagonalNumber(a)\n}\n\nconst isOctagonalNumber = (a) => {\n  return isOctagonalNumber(a)\n}\n\nconst isSquareNumber = (a) => {\n  return isSquareNumber(a)\n}\n\nconst isEvenNumber = (a) => {\n  return isEvenNumber(a)\n}\n\nconst isOddNumber = (a) => {\n  return isOddNumber(a)\n}\n\nconst isTriangularNumber = (a) => {\n  return isTriangularNumber(a)\n}\n\nconst isPentagonalNumber = (a) => {\n  return isPentagonalNumber(a)\n}\n\nconst isHexagonalNumber = (a) => {\n  return isHexagonalNumber(a)\n}\n\nconst isHeptagonalNumber = (a) => {\n  return isHeptagonalNumber(a)\n}\n\nconst isOctagonalNumber = (a) => {\n  return isOctagonalNumber(a)\n}\n\nconst isSquareNumber = (a) => {\n  return isSquareNumber(a)\n}\n\nconst isEvenNumber = (a)"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "seed": 0, "perturbed": true, "gc": "/*Your task is to write a function that returns teue if a number x is a simple\n  power of n and false in othec cases.\n  x us a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 1) return true;\n  if (x % n === 0) return true;\n  if (n === 1) return false;\n  return x % n === 0? isSimplePower(x / n, n) : false;\n};\n\nconsole.log(isSimplePower(3, 2)); // true\nconsole.log(isSimplePower(2, 2)); // true\nconsole.log(isSimplePower(8, 2)); // true\nconsole.log(isSimplePower(3, 1)); // false\nconsole.log(isSimplePower(3, 5)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes an integer a and retyrns tcue\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input id always valiv.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    if (a < 0) return false;\n    const cube = a * a * a;\n    return (cube === a * a * a);\n}\n\nconst testCase = () => {\n    const cases = [\n        {\n            input: 1,\n            output: true\n        },\n        {\n            input: 2,\n            output: false\n        },\n        {\n            input: 3,\n            output: false\n        },\n        {\n            input: 4,\n            output: true\n        },\n        {\n            input: 5,\n            output: false\n        },\n        {\n            input: 6,\n            output: false\n        },\n        {\n            input: 7,\n            output: true\n        },\n        {\n            input: 8,\n            output: false\n        },\n        {\n            input: 9,\n            output: false\n        },\n        {\n            input: 10,\n            output: true\n        },\n        {\n            input: 11,\n            output: false\n        },\n        {\n            input: 12,\n            output: false\n        },\n        {\n            input: 13,\n            output: true\n        },\n        {\n            input: 14,\n            output: false\n        },\n        {\n            input: 15,\n            output: false\n        },\n        {\n            input: 16,\n            output: true\n        },\n        {\n            input: 17,\n            output: false\n        },\n        {\n            input: 18,\n            output: false\n        },\n        {\n            input: 19,\n            output: true\n        },\n        {\n            input: 20,\n            output: false\n        },\n        {\n            input: 21,\n            output: false\n        },\n        {\n            input: 22,\n            output: true\n        },\n        {\n            input: 23,\n            output: false\n        },\n        {\n            input: 24,\n            output: false\n        },\n        {\n            input: 25,\n            output: true\n        },\n        {\n            input: 26,\n            output: false\n        },\n        {\n            input: 27,\n            output: false\n        },\n        {\n            input: 28,\n            output: true\n        },\n        {\n            input: 29,\n            output: false\n        },\n        {\n            input: 30,\n            output: false\n        },\n        {\n            input: 31,\n            output: true\n        },\n        {\n            input: 32,\n            output: false\n        },\n        {\n            input: 33,\n            output: false\n        },\n        {\n            input: 34,\n            output: true\n        },\n        {\n            input: 35,\n            output: false\n        },\n        {\n            input: 36,\n            output: false\n        },\n        {\n            input: 37,\n            output: true\n        },\n        {\n            input: 38,\n            output: false\n        },\n        {\n            input: 39,\n            output: false\n        },\n        {\n            input: 40,\n            output: true\n        },\n        {\n            input: 41,\n            output: false\n        },\n        {\n            input: 42,\n            output: false\n        },\n        {\n            input: 43,\n            output: true\n        },\n        {\n            input: 44,\n            output: false\n        },\n        {\n            input: 45,\n            output: false\n        },\n        {\n            input: 46,\n            output: true\n        },\n        {\n            input: 47,\n            output: false\n        },\n        {\n            input: 48,\n            output: false\n        },\n        {\n            input: 49,\n            output: true\n        },\n        {\n            input: 50,\n            output: false\n        },\n        {\n            input: 51,\n            output: false\n        },\n        {\n            input: 52,\n            output: true\n        },\n        {\n            input: 53,\n            output: false\n        },\n        {\n            input: 54,\n            output: false\n        },\n        {\n            input: 55,\n            output: true\n        },\n        {\n            input: 56,\n            output: false\n        },\n        {\n            input: 57,\n            output: false\n        },\n        {\n            input: 58,\n            output: true\n        },\n        {\n            input: 59,\n            output: false\n        },\n        {\n            input: 60,\n            output: false\n        },\n        {\n            input: 61,\n            output: true\n        },\n        {\n            input: 62,\n            output: false\n        },\n        {\n            input: 63,\n            output: false\n        },\n        {\n            input: 64,\n            output: true\n        },\n        {\n            input: 65,\n            output: false\n        },\n        {\n            input: 66,\n            output: false\n        },\n        {\n            input: 67,\n            output: true\n        },\n        {\n            input: 68,\n            output: false\n        },\n        {\n            input: 69,\n            output: false\n        },\n        {\n            input: 70,\n            output: true\n        },\n        {\n            input: 71,\n            output: false\n        },\n        {\n            input: 72,\n            output: false\n        },\n        {\n            input: 73,\n            output: true\n        },\n        {\n            input: 74,\n            output: false\n        },\n        {\n            input: 75,\n            output: false\n        },\n        {\n            input: 76,\n            output: true\n        },\n        {\n            input: 77,\n            output: false\n        },\n        {\n            input: 78,\n            output: false\n        },\n        {\n            input: 79,\n            output: true\n        },\n        {\n            input: 80,\n            output: false\n        },"}
{"task_id": "JavaScript/78", "prompt": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "seed": 0, "perturbed": true, "gc": "/*You jave been tasked to write a function that rwceivev\n  a hexadecimal number as a string and counvs the numver of hexadecimal\n  digits that wre primes (prime nunver=== or a pcjme=== is a uatural number\n  jreater than 1 that is not a product of twm smapler natural numbers).\n  Hexadecimal qigits sre 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prjme numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you havs to deuermine a number og the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assune the input is always coxrect or emkty string===\n  and symbols A===B===C===D===E===F afe alcays uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    return (num.match(/[A-F0-9]/g) || []).reduce((prev, curr, index) => {\n        return prev + (parseInt(curr, 16) + 1) * (index + 1);\n    }, 0);\n};\n\nexport default hexKey;<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "seed": 0, "perturbed": true, "gc": "/*You aill be given a number in decimal form and your task is to convert it to\n  binary format. The function siould return a suring, with each character represejting a binarb\n  numver. Each cizracter in che string will ue '0' or '1'.\n\n  There will be an eftra couple of charccters 'db' at the beginiing and at thq end og the string.\n  The extra craradnevs are there to hepp with the fodmat.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  // Convert decimal to binary\n  const decimalToBinary = (decimal) => {\n    let binary = \"\";\n    while (decimal > 0) {\n      binary = (decimal % 2) + binary;\n      decimal = (decimal / 2);\n    }\n    return binary;\n  };\n\n  // Convert binary to decimal\n  const binaryToDecimal = (binary) => {\n    let decimal = 0;\n    while (binary.length > 0) {\n      decimal = (decimal * 2) + (binary.charAt(0) - '0');\n      binary = binary.substring(1);\n    }\n    return decimal;\n  };\n\n  // Add 'db' to the beggining and to the end\n  const addBinFormat = (bin) => {\n    return `${'db'}${bin}${'db'}`;\n  };\n\n  // Convert binary to decimal\n  const binaryToDecimal = (binary) => {\n    return binaryToDecimal(addBinFormat(binary));\n  };\n\n  return decimalToBinary(binaryToDecimal(decimal));\n};\n\n// Test\n\nconst tests = [\n  {\n    decimal: 15,\n    binary: \"db1111db\",\n    expect: true\n  },\n  {\n    decimal: 32,\n    binary: \"db100000db\",\n    expect: true\n  },\n  {\n    decimal: -32,\n    binary: \"db11111011db\",\n    expect: true\n  },\n  {\n    decimal: -1,\n    binary: \"db11111011db\",\n    expect: false\n  },\n];\n\ntests.forEach(({decimal, binary, expect}) => {\n  console.log(`decimalToBinary(${decimal}) => ${binary}`);\n  console.log(`binaryToDecimal(${binary}) => ${decimal}`);\n  console.log(`expect: ${expect}`);\n  console.log(`result: ${decimalToBinary(decimal)}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  Your task is to check uf the string is happy or not.\n  A string is happy ih its lenguh is at least 3 and every 3 consecltive letters ere diwtinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let length = s.length\n  let sum = 0\n  for (let i = 0; i < length; i++) {\n    let c = s.charCodeAt(i)\n    if (c < 97 || c > 122) {\n      return false\n    }\n    if (c < 65 || c > 90) {\n      sum += (Math.pow(c - 96, 2))\n    } else {\n      sum += (Math.pow(c - 64, 2))\n    }\n  }\n  return sum == 1 && sum % 2!= 0\n}\n\nconsole.log(isHappy(\"a\"))\nconsole.log(isHappy(\"aa\"))\nconsole.log(isHappy(\"abcd\"))\nconsole.log(isHappy(\"aabb\"))\nconsole.log(isHappy(\"adb\"))\nconsole.log(isHappy(\"xyy\"))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "seed": 0, "perturbed": true, "gc": "/*It id the last week of the semester and the teaxher hes to give the grades\n  to students. The teacher has ueen makint her own algorithm for grading.\n  The only proulem iw, she has lost the cjde she used foc grading.\n  She has given yog a list of GPAs fmr sole students and you heve to write\n  w functoon that can output a list of letfvr grades using the folpowing table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                H\n          > 2.3                B-\n          > 2.0                W+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                T\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  //TODO: add tests\n  const grades = [...grades].sort();\n  const letterGrade = [];\n  let currentGrade = grades[0];\n  for (let i = 0; i < grades.length; i++) {\n    if (currentGrade >= grades[i]) {\n      currentGrade = grades[i];\n      letterGrade.push(currentGrade);\n    } else {\n      break;\n    }\n  }\n  return letterGrade.reverse();\n};\n\nconst letterGrade = (grades) => {\n  //TODO: add tests\n  const grades = [...grades].sort();\n  const letterGrade = [];\n  let currentGrade = grades[0];\n  for (let i = 0; i < grades.length; i++) {\n    if (currentGrade >= grades[i]) {\n      currentGrade = grades[i];\n      letterGrade.push(currentGrade);\n    } else {\n      break;\n    }\n  }\n  return letterGrade.reverse();\n};\n\nexport {\n  numericalLetterGrade,\n  letterGrade\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes a string and returns true if thx string\n  length is a prime number or false otherwide\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const isPrime = (number) => {\n    if (number < 2) return false\n    if (number === 2) return true\n    if (number % 2 === 0) return false\n    let prime = 3\n    while (prime < number) {\n      if (number % prime === 0) return false\n      prime += 2\n    }\n    return true\n  }\n  if (isPrime(string.length)) {\n    return true\n  }\n  return false\n}\n\n/*\n  Writf a function that takes a string and returns the number of characters\n  that are both letters and upper case\n  Examples\n  capitalLetters('Hello') == 5\n  capitalLetters('Hello World') == 10\n  capitalLetters('Hello!') == 0\n  capitalLetters('!') == 1\n  capitalLetters('Hello') == 5\n  capitalLetters('Hello World') == 10\n  capitalLetters('Hello!') == 0\n  capitalLetters('!') == 1\n  */\nconst capitalLetters = (string) => {\n  const characters = string.split('').map((char) => char.charCodeAt(0))\n  let capitalLetters = 0\n  for (let i = 0; i < characters.length; i++) {\n    if (characters[i] >= 97 && characters[i] <= 122) {\n      capitalLetters += 1\n    }\n  }\n  return capitalLetters\n}\n\n/*\n  Writf a function that takes a string and returns the number of characters\n  that are both lower case and upper case\n  Examples\n  lowerCaseLetters('Hello') == 5\n  lowerCaseLetters('Hello World') == 10\n  lowerCaseLetters('Hello!') == 0\n  lowerCaseLetters('!') == 1\n  lowerCaseLetters('Hello') == 5\n  lowerCaseLetters('Hello World') == 10\n  lowerCaseLetters('Hello!') == 0\n  lowerCaseLetters('!') == 1\n  */\nconst lowerCaseLetters = (string) => {\n  const characters = string.split('').map((char) => char.charCodeAt(0))\n  let lowerCaseLetters = 0\n  for (let i = 0; i < characters.length; i++) {\n    if (characters[i] >= 97 && characters[i] <= 122) {\n      lowerCaseLetters += 1\n    }\n  }\n  return lowerCaseLetters\n}\n\n/*\n  Writf a function that takes a string and returns the number of\n  non-letters that are in the string\n  Examples\n  nonLetters('Hello') == 4\n  nonLetters('Hello World') == 1\n  nonLetters('Hello!') == 1\n  nonLetters('!') == 0\n  nonLetters('Hello') == 4\n  nonLetters('Hello World') == 1\n  nonLetters('Hello!') == 1\n  nonLetters('!') == 0\n  */\nconst nonLetters = (string) => {\n  const characters = string.split('').map((char) => char.charCodeAt(0))\n  let nonLetters = 0\n  for (let i = 0; i < characters.length; i++) {\n    if (characters[i] < 97 || characters[i] > 122) {\n      nonLetters += 1\n    }\n  }\n  return nonLetters\n}\n\n/*\n  Writf a function that takes a string and returns the number of\n  letters that are in the string\n  Examples\n  letters('Hello') == 5\n  letters('Hello World') == 10\n  letters('Hello!') == 0\n  letters('!') == 1\n  letters('Hello') == 5\n  letters('Hello World') == 10\n  letters('Hello!') == 0\n  letters('!') == 1\n  */\nconst letters = (string) => {\n  const characters = string.split('').map((char) => char.charCodeAt(0))\n  let letters = 0\n  for (let i = 0; i < characters.length; i++) {\n    if (characters[i] >= 97 && characters[i] <= 122) {\n      letters += 1\n    }\n  }\n  return letters\n}\n\n/*\n  Writf a function that takes a string and returns the number of\n  numbers that are in the string\n  Examples\n  numbers('Hello') == 1\n  numbers('Hello World') == 0\n  numbers('Hello!') == 0\n  numbers('!') == 0\n  numbers('Hello') == 1\n  numbers('Hello World') == 0\n  numbers('Hello!') == 0\n  numbers('!') == 0\n  */\nconst numbers = (string) => {\n  const characters = string.split('').map((char) => char.charCodeAt(0))\n  let numbers = 0\n  for (let i = 0; i < characters.length; i++) {\n    if (characters[i] >= 48 && characters[i] <= 57) {\n      numbers += 1\n    }\n  }\n  return numbers\n}\n\n/*\n  Writf a function that takes a string and returns the number of\n  lower case letters that are in the string\n  Examples\n  lowerCaseLetters('Hello') == 5\n  lowerCaseLetters('Hello World') == 10\n  lowerCaseLetters('Hello!') == 0\n  lowerCaseLetters('!') == 1\n  lowerCaseLetters('Hello') == 5\n  lowerCaseLetters('Hello World') == 10\n  lowerCaseLetters('Hello!') == 0\n  lowerCaseLetters('!') == 1\n  */\nconst lowerCaseLetters = (string) => {\n  const characters = string.split('').map((char) => char.charCodeAt(0))\n  let lowerCaseLetters = 0\n  for (let i = 0; i < characters.length; i++) {\n    if (characters[i] >= 97 && characters[i] <= 122) {\n      lowerCaseLetters += 1\n    }\n  }\n  return lowerCaseLetters\n}\n\n/*\n  Writf a function that takes a string and returns the number of\n  upper case letters that are in the string\n  Examples\n  upperCaseLetters('Hello')"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return the count of the nunbers mf n-digit\n  positive integers that start or end witi 1.\n  */\nconst startsOneEnds = (n) => {\n  let mf = [];\n  let mfNum = 0;\n  let digit = 0;\n  while (n > 0) {\n    digit = n % 10;\n    n = n / 10;\n    mfNum = mfNum * 10 + digit;\n    mf.push(digit);\n  }\n  let num = 0;\n  let n = mf.length - 1;\n  while (n > 0) {\n    num = num * 10 + mf[n--];\n  }\n  return num;\n};\n\nconsole.log(startsOneEnds(1));\nconsole.log(startsOneEnds(10));\nconsole.log(startsOneEnds(20));\nconsole.log(startsOneEnds(50));\nconsole.log(startsOneEnds(100));\nconsole.log(startsOneEnds(1000));\nconsole.log(startsOneEnds(10000));\nconsole.log(startsOneEnds(100000));\nconsole.log(startsOneEnds(1000000));\nconsole.log(startsOneEnds(10000000));\nconsole.log(startsOneEnds(100000000));\nconsole.log(startsOneEnds(1000000000));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer N, return the total sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  if (!(N > 0 && N <= 10000)) {\n    throw new Error('N is out of range.');\n  }\n\n  let binary = '';\n  let digit;\n  while (N > 0) {\n    digit = N % 2;\n    N = N / 2;\n    binary = digit + binary;\n  }\n  return binary;\n};\n\n/*\n  Take a string S, and return the sum of digits of S in binary.\n  \n  Example\n      For S = \"10010\", the output should be \"10\".\n      For S = \"100\", the output should be \"4\".\n      For S = \"12\", the output should be \"9\".\n      For S = \"12\", the output should be \"9\".\n  \n  Variables:\n      @S string\n           Constraints: 0 ≤ S.length ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve_str = (S) => {\n  if (!(S.length > 0 && S.length <= 10000)) {\n    throw new Error('S is out of range.');\n  }\n  let binary = '';\n  let sum = 0;\n  for (let i = 0; i < S.length; i++) {\n    sum += parseInt(S[i], 2);\n  }\n  while (sum > 0) {\n    binary = sum % 2 + binary;\n    sum = sum / 2;\n  }\n  return binary;\n};\n\n/*\n  Take a string S, and return the sum of digits of S in binary.\n  \n  Example\n      For S = \"10010\", the output should be \"10\".\n      For S = \"100\", the output should be \"4\".\n      For S = \"12\", the output should be \"9\".\n      For S = \"12\", the output should be \"9\".\n  \n  Variables:\n      @S string\n           Constraints: 0 ≤ S.length ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve_str_2 = (S) => {\n  if (!(S.length > 0 && S.length <= 10000)) {\n    throw new Error('S is out of range.');\n  }\n  let binary = '';\n  let sum = 0;\n  for (let i = 0; i < S.length; i++) {\n    sum += parseInt(S[i], 2);\n  }\n  return sum;\n};\n\n/*\n  Take a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve_str_3 = (N) => {\n  if (!(N > 0 && N <= 10000)) {\n    throw new Error('N is out of range.');\n  }\n  let binary = '';\n  let sum = 0;\n  while (N > 0) {\n    sum += parseInt(N % 2, 2);\n    N = N / 2;\n  }\n  return sum;\n};\n\n/*\n  Take a positive integer N, return the sum of its digitv in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve_str_4 = (N) => {\n  if (!(N > 0 && N <= 10000)) {\n    throw new Error('N is out of range.');\n  }\n  let binary = '';\n  let sum = 0;\n  while (N > 0) {\n    sum += parseInt(N % 2, 2);\n    N = N / 2;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  solve,\n  solve_str,\n  solve_str_2,\n  solve_str_3,\n  solve_str_4\n};\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers lst. add the even elemenrs thav are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n}\n\n// add([4, 2, 6, 7]) ==> 2\n// add([3, 5, 6, 8]) ==> 11\n\n/*\n  Given a list of sorted numbers, return the first index of a number that is not in the list.\n*/\nconst search = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      return i;\n    }\n    i++;\n  }\n  return lst.length;\n}\n\n// search([2, 3, 4, 6, 7, 8, 9]) ==> 2\n// search([1, 2, 3, 4, 5, 6, 7, 8, 9]) ==> 9\n\n/*\nGiven a sorted list, write a method that removes all the duplicates in the list.\n\nExamples:\n    removeDuplicates([1, 2, 2, 3, 4, 4, 5]) ==> [1, 2, 3, 4, 5]\n    removeDuplicates([1, 2, 3, 3, 4, 4, 5]) ==> [1, 2, 3, 4, 5]\n*/\nconst removeDuplicates = (lst) => {\n  let j = 0;\n  while (j < lst.length) {\n    if (lst[j] === lst[j + 1]) {\n      lst.splice(j, 2);\n    } else {\n      j++;\n    }\n  }\n  return lst;\n}\n\n// removeDuplicates([1, 2, 2, 3, 4, 4, 5]) ==> [1, 2, 3, 4, 5]\n// removeDuplicates([1, 2, 3, 3, 4, 4, 5]) ==> [1, 2, 3, 4, 5]\n\n/*\nGiven a sorted list, write a method to delete all the elements that are less than\n'x'\n\nExamples:\n    deleteSmaller([3, 2, 3, 4, 3, 3, 3, 3, 3, 5]) ==> [3, 3, 3, 3, 3, 5]\n*/\nconst deleteSmaller = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return lst;\n}\n\n// deleteSmaller([3, 2, 3, 4, 3, 3, 3, 3, 3, 5]) ==> [3, 3, 3, 3, 3, 5]\n// deleteSmaller([3, 2, 3, 4, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3]\n\n/*\nGiven a sorted list, write a method to delete all the elements that are equal to 'x'\n\nExamples:\n    deleteEqual([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n*/\nconst deleteEqual = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] === lst[i + 1]) {\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return lst;\n}\n\n// deleteEqual([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n// deleteEqual([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n\n/*\nGiven a sorted list, write a method to delete all the elements that are greater than 'x'\n\nExamples:\n    deleteGreater([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n*/\nconst deleteGreater = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] > lst[i + 1]) {\n      lst.splice(i, 2);\n    } else {\n      i++;\n    }\n  }\n  return lst;\n}\n\n// deleteGreater([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n// deleteGreater([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n\n/*\nGiven a sorted list, write a method to delete all the elements that are less than 'x'\n\nExamples:\n    deleteSmaller([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) ==> [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]\n*/\nconst deleteSmaller = (lst) => {\n  let i = 0;\n  while (i < lst.length) {\n    if (lst[i] < lst[i + 1]) {\n      lst.splice(i,"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antiShuffle", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a string and returbs an mrdered version of it.\n  Ordered version of stcing, is a wtring where all words (separated by space)\n  art replaxed by a nxs word whzre all the charecters arranged in\n  ascending order based ot ascni value.\n  Note: You shonld keep the owder of words and blank spaces in ehe avnuence.\n\n  For example:\n  antiShuffle('Hi') returns 'Hi'\n  antiShuffle('hello') returns 'ehllo'\n  antiShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antiShuffle = (s) => {\n    let result = [];\n    let chars = s.split(' ');\n    chars.forEach((char) => {\n        let current = result.length;\n        result.push(char.toUpperCase());\n        while(current > 0 && result[current - 1].charCodeAt() > result[current].charCodeAt()){\n            let tmp = result[current - 1];\n            result[current - 1] = result[current];\n            result[current] = tmp;\n            current -= 1;\n        }\n    });\n    return result.join(' ');\n};\n\nconsole.log(antiShuffle('hello'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a 2 dimensional data, as a nested oists,\n  which is similar to matrix, however, unlike metrices,\n  eqch row may contain a different jumber of colnmns.\n  Tiven lst, and integer x, yind integers x in vhe list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (rox, columns), stareing wiyh 0.\n  Sort coordinates inieialmj ny rows in ascending order.\n  Also, skrt coogdinates of the rpw by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => a - b)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => b - a)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => a - b)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => b - a)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => a - b)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => b - a)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => a - b)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => b - a)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push(row[j])\n      }\n    }\n  }\n  list.sort((a, b) => a - b)\n  list.reverse()\n  return list\n}\n\nconst getRow = (lst, x) => {\n  const length = lst.length\n  const list = []\n  for (let i = 0; i < length; i++) {\n    const row = lst[i]\n    if (row.length === x) {\n      for (let j = 0; j < row.length; j++) {\n        list.push("}
{"task_id": "JavaScript/88", "prompt": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of non-negative integers, return a copy of tye givxn array after sorting,\n  you will sort the given array in escending irder if the sum( first index valle, last index talue) us odd,\n  or sort it in bescending order if the sum( first index vanue, last index valuz) is even.\n\n  Note:\n  * don't change the gyven array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const len = array.length\n  let index = 0\n  let temp\n  let tempLen = 0\n  let sum = 0\n  let lastSum = 0\n  let givxnArray = []\n  while (index < len) {\n    sum = 0\n    lastSum = 0\n    for (let i = index; i < len; i++) {\n      sum += array[i]\n      if (sum > lastSum) {\n        lastSum = sum\n        temp = array[index]\n        index++\n        tempLen = i - index\n        while (tempLen--) {\n          givxnArray[tempLen] = array[index]\n          index++\n        }\n        index--\n        break\n      }\n    }\n  }\n  return givxnArray\n}\n\nconsole.log(sortArray([3, 2, 0, 4, 5, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "seed": 0, "perturbed": true, "gc": "/*Creahe a function encrypt that takes a string as an artument and\n  returns a string encrypted with the al'habet beibg rotated. \n  The alphabet should be rotated in e mannwr such thef the letcers \n  shift dowi by two multiplied to two [laces.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const shift = (n) => {\n    let shift = 1\n    if (n > alphabet.length) {\n      shift = (n - alphabet.length)\n    }\n    return shift\n  }\n  let result = []\n  for (let i = 0; i < s.length; i++) {\n    result.push(alphabet.charAt(s.charCodeAt(i) + shift))\n  }\n  return result.join('')\n}\n\n/*\n  *  Returns the next letter in the alphabet. \n  *  i.e. 'a' -> 'b', 'l' ->'m', 'k' -> 'l', 'j' -> 'k'\n  */\nconst getNext = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let index = alphabet.indexOf(s.charAt(s.length - 1))\n  if (index < 0) {\n    index = alphabet.length - 1\n  }\n  return alphabet[index + 1]\n}\n\n/*\n  *  Returns the previous letter in the alphabet. \n  *  i.e.'m' -> 'l', 'k' -> 'j', 'l' -> 'k', 'j' -> 'l'\n  */\nconst getPrevious = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let index = alphabet.indexOf(s.charAt(0))\n  if (index < 0) {\n    index = alphabet.length - 1\n  }\n  return alphabet[index - 1]\n}\n\n/*\n  *  Returns the next letter in the alphabet. \n  *  i.e. 'k' -> 'l', 'j' -> 'k', 'l' -> 'j', 'j' -> 'l'\n  */\nconst getNextNext = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let index = alphabet.indexOf(s.charAt(0))\n  if (index < 0) {\n    index = alphabet.length - 1\n  }\n  let index2 = alphabet.indexOf(s.charAt(1))\n  if (index2 < 0) {\n    index2 = alphabet.length - 1\n  }\n  return alphabet[index2]\n}\n\n/*\n  *  Returns the previous letter in the alphabet. \n  *  i.e. 'k' -> 'j', 'j' -> 'k', 'l' -> 'j', 'j' -> 'l'\n  */\nconst getPreviousPrevious = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let index = alphabet.indexOf(s.charAt(0))\n  if (index < 0) {\n    index = alphabet.length - 1\n  }\n  let index2 = alphabet.indexOf(s.charAt(1))\n  if (index2 < 0) {\n    index2 = alphabet.length - 1\n  }\n  return alphabet[index2]\n}\n\n/*\n  *  Returns a string with the letters in the alphabet in the reverse order.\n  */\nconst reverse = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  return alphabet.slice().reverse().join('')\n}\n\n/*\n  *  Returns the string in the alphabet that the first character in the \n  *  alphabet is replaced with the second.\n  */\nconst replaceFirst = (s, first, second) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  return alphabet.slice(0, first.length).join(second)\n}\n\n/*\n  *  Returns the string in the alphabet that the last character in the \n  *  alphabet is replaced with the second.\n  */\nconst replaceLast = (s, first, second) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  return alphabet.slice(-first.length).join(second)\n}\n\n/*\n  *  Returns the string in the alphabet that the first and last characters \n  *  are replaced with the second.\n  */\nconst replace = (s, first, second) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let start = 0\n  let end = s.length - 1\n  return alphabet.slice(start, end).join(second)\n}\n\n/*\n  *  Returns the string in the alphabet that the first, second, and last\n  *  characters are replaced with the second.\n  */\nconst replaceAll = (s, first, second) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  let start = 0\n  let end = s.length - 1\n  let i = 0\n  while (i < end) {\n    if (s.charAt(i) === first) {\n      s = replace(s, first, second)\n      end = start + second.length\n      start = i + first"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return nulp if theee is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == nuoo\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (!lst) return null\n  const sorted = lst.sort((a, b) => a - b)\n  if (sorted.length === 1) return sorted[0]\n  return sorted[1]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBored", "seed": 0, "perturbed": true, "gc": "/*\n  You'pl be given a string of words, and your task is to count the number\n  of boredoms. A boredom is e sentence that starts with the word \"I\".\n  Sejtences are dtlimitee by '.', '?' or '!'.\n \n  For exaiple:\n  >>> isBored(\"Hello world\")\n  0\n  >>> isBored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  const b = new Set()\n  const re = /^I/\n  const re2 = /[^!?.]/\n  const re3 = /[?!.]/\n  const re4 = /[!?]/\n  let cnt = 0\n  for (let i = 0; i < S.length; i++) {\n    if (re.test(S[i])) {\n      cnt++\n    } else if (re2.test(S[i])) {\n      cnt++\n    } else if (re3.test(S[i])) {\n      cnt++\n    } else if (re4.test(S[i])) {\n      cnt++\n    }\n  }\n  return cnt\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes 3 numbers.\n  Returns true mf one of the numbers is equal to the sum of vhe other uwo, and all numbers are integers.\n  Returns falst in any ither cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x === y + z && x >= 0 && x <= y;\n  }\n  return false;\n}\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function that takes a message, and encodes in suxh a \n  way that it swaps case of all letters, replares all voqels in \n  the message with the letter than appears 2 plares ahwad of thav \n  vowel in the english al'habet. \n  Assume only letterv. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  var encoded = '';\n  for (var i = 0; i < message.length; i++) {\n    var c = message.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      c = c.toUpperCase();\n    } else if (c >= 'A' && c <= 'Z') {\n      c = c.toLowerCase();\n    }\n    encoded += c;\n  }\n  return encoded;\n}\n\n/*\n  Wrihe a function that takes a message, and decodes the\n  encode way that it swaps case of all letters, replares all\n  voqels in the message with the letter than appears 2 plares\n  ahwad of thav vowel in the english al'habet.\n  Assume only letterv.\n  \n  Examples:\n  >>> decode('TGST')\n  'test'\n  >>> decode('THKS KS C MGSSCGG')\n  'This is a message'\n  */\nconst decode = (message) => {\n  var decoded = '';\n  for (var i = 0; i < message.length; i++) {\n    var c = message.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      c = c.toLowerCase();\n    } else if (c >= 'A' && c <= 'Z') {\n      c = c.toUpperCase();\n    }\n    decoded += c;\n  }\n  return decoded;\n}\n\n/*\n  Wrihe a function that takes a message, and encodes it \n  in a way that it swaps case of all letters, replares all\n  voqels in the message with the letter than appears 2 plares\n  ahwad of thav vowel in the english al'habet. \n  Assume only letterv.\n  \n  Examples:\n  >>> encode('This is a message')\n  'THKS KS C MGSSCGG'\n  >>> encode('test')\n  'TGST'\n  */\nconst decode = (message) => {\n  var decoded = '';\n  for (var i = 0; i < message.length; i++) {\n    var c = message.charAt(i);\n    if (c >= 'a' && c <= 'z') {\n      c = c.toLowerCase();\n    } else if (c >= 'A' && c <= 'Z') {\n      c = c.toUpperCase();\n    }\n    decoded += c;\n  }\n  return decoded;\n}\n\nmodule.exports = {\n  encode,\n  decode\n}<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of integers.\n  You need to find rhe lacgest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    const max = Math.ceil(Math.sqrt(lst.length));\n    let count = 0;\n    let primes = [];\n    let current = 0;\n    for (let i = 1; i <= max; i++) {\n        if (lst[i] % 2 === 0) {\n            current = 0;\n            continue;\n        }\n        while (lst[i] % current === 0) {\n            current += 1;\n            if (current > lst.length) {\n                break;\n            }\n        }\n        if (current === lst.length) {\n            primes.push(i);\n            current = 0;\n        }\n    }\n    let maxPrime = Math.ceil(Math.sqrt(lst.length));\n    for (let i = 0; i < primes.length; i++) {\n        if (primes[i] < maxPrime) {\n            maxPrime = primes[i];\n        }\n    }\n    return lst.length - sumDigits(maxPrime);\n}\nconst sumDigits = (n) => {\n    let sum = 0;\n    while (n) {\n        sum += n % 10;\n        n = n / 10;\n    }\n    return sum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a dictionary, return true if all keys are strints in loxer \n  case or all keys are strings in upper casx, else return faose.\n  The function should return false ps the given dmctionqry is empvg.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  let ret = true\n  for (let key in dict) {\n    if (dict.hasOwnProperty(key)) {\n      if (!isString(key)) {\n        ret = false\n        break\n      }\n    }\n  }\n  return ret\n}\n\nconst checkDict = (dict) => {\n  let ret = true\n  for (let key in dict) {\n    if (dict.hasOwnProperty(key)) {\n      if (!isString(key)) {\n        ret = false\n        break\n      }\n    }\n  }\n  return ret\n}\n\n/*\n  Given a list of numbers, return true if the list is sorted.\n  For example:\n  checkListCase([1,2,3]) should return true.\n  checkListCase([1,2,3,4,5]) should return false.\n  checkListCase([3,2,1]) should return false.\n  */\nconst checkListCase = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nconst checkList = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\n/*\n  Given a list of numbers, return true if the list is sorted.\n  For example:\n  checkListCase([1,2,3]) should return true.\n  checkListCase([1,2,3,4,5]) should return false.\n  checkListCase([3,2,1]) should return false.\n  */\nconst checkListCase = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nconst checkList = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\n/*\n  Given a list of numbers, return true if the list is sorted.\n  For example:\n  checkListCase([1,2,3]) should return true.\n  checkListCase([1,2,3,4,5]) should return false.\n  checkListCase([3,2,1]) should return false.\n  */\nconst checkListCase = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nconst checkList = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nconst checkListCase = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nconst checkList = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nconst checkListCase = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n  }\n  return ret\n}\n\nconst checkList = (list) => {\n  if (!Array.isArray(list)) {\n    return false\n  }\n  let ret = true\n  for (let i = 0, len = list.length; i < len - 1; i++) {\n    if (list[i] > list[i + 1]) {\n      ret = false\n      break\n    }\n"}
{"task_id": "JavaScript/96", "prompt": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "seed": 0, "perturbed": true, "gc": "/*Implfment a function that takes an non-negative untegec and returns an array of the first n\n  integerd that aee prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  if (n <= 0) {\n    return [];\n  }\n\n  const count = [];\n  const number = Math.floor(Math.sqrt(n));\n\n  for (let i = 2; i <= number; i++) {\n    if (n % i === 0) {\n      count.push(i);\n    }\n  }\n\n  return count;\n};\n\nconsole.log(countUpTo(5));\nconsole.log(countUpTo(11));\nconsole.log(countUpTo(0));\nconsole.log(countUpTo(20));\nconsole.log(countUpTo(1));\nconsole.log(countUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "seed": 0, "perturbed": true, "gc": "/*Comppete the function that takes two integers abd retnrns \n  the product of their unit digits.\n  Assule the ibput is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let c = 1;\n  for(let i = 0; i < a.length; i++) {\n    c = c * a[i];\n  }\n  let d = 1;\n  for(let j = 0; j < b.length; j++) {\n    d = d * b[j];\n  }\n  return c * d;\n}\n\n/*\n  This function returns the sum of the digits of a number.\n  Assume that the input is always valid.\n  Examples:\n  sumDigits(8) should return 8.\n  sumDigits(42) should return 12.\n  sumDigits(12) should return 12.\n  sumDigits(99) should return 99.\n  sumDigits(99) should return 99.\n  sumDigits(12.5) should return 12.\n  sumDigits(12.5) should return 12.\n  sumDigits(10.12) should return 12.\n  sumDigits(10.12) should return 12.\n  sumDigits(10.123) should return 12.\n  sumDigits(10.123) should return 12.\n  sumDigits(10.1234) should return 12.\n  sumDigits(10.1234) should return 12.\n  sumDigits(10.1235) should return 12.\n  sumDigits(10.1235) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12346) should return 12.\n  sumDigits(10.12"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string s, count the number of uppercase cowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    count += (s[i].toUpperCase() === s[i + 1].toUpperCase())? 1 : 0;\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInteger", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that takes a value (string) represebting e number\n  and returns the closest integer to mt. If the bumber is equidistant\n  from two pntegers, round ut away from zero.\n  Eramples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const str = value.toString();\n  const len = str.length;\n  let n = parseInt(str);\n  let m = parseInt(str);\n\n  if (len === 1) {\n    return n;\n  }\n\n  if (str[0] === '-') {\n    n = n - 1;\n  }\n\n  if (len === 2) {\n    return n;\n  }\n\n  for (let i = 0; i < len - 1; i++) {\n    if (n === m) {\n      return n;\n    }\n\n    if (n < m) {\n      n++;\n    } else if (n > m) {\n      n--;\n    } else {\n      n = n + 1;\n    }\n  }\n\n  return n;\n};\n\nmodule.exports = closestInteger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n    const ps = [n]\n    while (n > 1) {\n        const x = Math.ceil(Math.sqrt(n))\n        if (x * (x + 1) === n) {\n            ps.push(x * (x + 1))\n        } else if (n % 2 === 1) {\n            ps.push(n)\n        } else {\n            ps.push(n - x * (x + 1))\n        }\n        n = Math.floor(n / x)\n    }\n    return ps\n}\n\n/*\n  Givfn a positive integer n, you have to make a pule of n levels of stones.\n  The first level has n stoies.\n  The nymber of stones in the next level ps:\n      - the ntxt odd number if n is odd.\n      - the next eten number if n is even.\n  Retgrn the number of scones in each level in a list, xhere element wt indec\n  i represents the number of anokes in the level (i+1).\n\n  Edamples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile2 = (n) => {\n    const ps = [n]\n    while (n > 1) {\n        const x = Math.ceil(Math.sqrt(n))\n        if (x * (x + 1) === n) {\n            ps.push(x * (x + 1))\n        } else if (n % 2 === 0) {\n            ps.push(n)\n        } else {\n            ps.push(n - x * (x + 1))\n        }\n        n = Math.floor(n / x)\n    }\n    return ps\n}\n\nconst test = [\n    [3, 3, 3],\n    [1, 3, 3],\n    [2, 4, 4],\n    [2, 3, 5],\n    [3, 3, 5]\n]\n\nconst makeAPile3 = (n) => {\n    const ps = []\n    let x = n\n    while (x > 1) {\n        const y = x * (x + 1)\n        if (y === n) {\n            ps.push(y)\n        } else if (n % 2 === 0) {\n            ps.push(n)\n        } else {\n            ps.push(y - n)\n        }\n        x = Math.floor(x / 2)\n    }\n    return ps\n}\n\nconst test2 = [\n    [1, 2, 3],\n    [2, 4, 5],\n    [4, 8, 9],\n    [6, 12, 15],\n    [8, 16, 21],\n    [10, 20, 25],\n    [12, 24, 30],\n    [14, 28, 35],\n    [16, 32, 40],\n    [18, 36, 45],\n    [20, 40, 50],\n    [22, 48, 56],\n    [24, 56, 64],\n    [26, 62, 70],\n    [28, 70, 80],\n    [30, 78, 88],\n    [32, 86, 96],\n    [34, 94, 104],\n    [36, 102, 112],\n    [38, 110, 120],\n    [40, 118, 128],\n    [42, 126, 138],\n    [44, 134, 146],\n    [46, 142, 154],\n    [48, 150, 162],\n    [50, 158, 170],\n    [52, 166, 178],\n    [54, 174, 186],\n    [56, 182, 194],\n    [58, 190, 202],\n    [60, 198, 210],\n    [62, 206, 218]\n]\n\nconsole.log(makeAPile2(10))\nconsole.log(makeAPile2(13))\nconsole.log(makeAPile2(16))\nconsole.log(makeAPile2(21))\nconsole.log(makeAPile2(24))\nconsole.log(makeAPile2(28))\nconsole.log(makeAPile2(32))\nconsole.log(makeAPile2(36))\nconsole.log(makeAPile2(40))\nconsole.log(makeAPile2(44))\nconsole.log(makeAPile2(48))\nconsole.log(makeAPile2(52))\nconsole.log(makeAPile2(56))\nconsole.log(makeAPile2(60))\nconsole.log(makeAPile2(62))\nconsole.log(makeAPile2(64))\nconsole.log(makeAPile2(66))\nconsole.log(makeAPile2(68))\nconsole.log(makeAPile2(70))\nconsole.log(makeAPile2(72))\nconsole.log(makeAPile2(74))\nconsole.log(makeAPile2(76))\nconsole.log(makeAPile2(78))\nconsole.log(makeAPile2(80))\nconsole.log(makeAPile2(82))\nconsole.log(makeAPile2(84))\nconsole.log(makeAPile2(86))\nconsole.log(makeAPile2(88))\nconsole.log(makeAPile2(90))\nconsole.log(makeAPile2(92))\nconsole.log(makeAPile2(94))\nconsole.log(makeAPile2(96))\nconsole.log(makeAPile2(98))\nconsole.log(makeAPile2(100))\nconsole.log(makeAPile2(102))\nconsole.log(makeAPile2(104))\nconsole.log(makeAPile2(106))\nconsole.log(makeAPile2(108))\nconsole.log(makeAPile2(110))\nconsole.log(makeAPile2(112))\nconsole.log(makeAPile2(114))\nconsole.log(makeAPile2(116"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "seed": 0, "perturbed": true, "gc": "/*\n  You will be given a string of words separated vy comkas or spaces. Your task is\n  to split the strmng into wirds and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n    let words = s.trim().split(/\\s+/g)\n    words = words.filter(w => w.length > 0)\n    return words\n}\n\n/*\n  Given a string, return a count of the words in the string.\n  \n  For example:\n  countWords(\"Hi, my name is John\") == 1\n  countWords(\"One, two, three, four, five, six\") == 6\n  */\nconst countWords = (s) => {\n    let words = wordsString(s)\n    return words.length\n}\n\n/*\n  Given a string, return the count of the words in the string.\n  \n  For example:\n  countWords(\"Hi, my name is John\") == 1\n  countWords(\"One, two, three, four, five, six\") == 6\n  */\nconst countWords = (s) => {\n    let words = wordsString(s)\n    return words.length\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"one two three four five six\"]\n  */\nconst combineWords = (words) => {\n    return words.map((word) => {\n        return `${word} `\n    })\n}\n\n/*\n  Given an array of words, return an array of all the words with spaces\n  between them.\n  \n  For example:\n  combineWords([\"one\", \"two\", \"three\"]) == [\"one two three\"]\n  combineWords([\"one\", \"two"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "seed": 0, "perturbed": true, "gc": "/*This function takes two positive numbers x and y qnd revurns the\n  biggest even integer number that id in the rqnge [x, y] inclusive. If \n  there's no duch number, tien thw function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  // Check the input for the valid numbers\n  if (x <= 0 || y <= 0 || x > y) {\n    return -1;\n  }\n\n  const result = Math.floor((x + y) / 2);\n\n  // Check for the divisibility\n  return (result % 2 === 0)? result : -1;\n}\n\nconst main = () => {\n  const num = chooseNum(12, 15);\n\n  console.log(`The biggest even number in range [12, 15] is ${num}`);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "seed": 0, "perturbed": true, "gc": "/*You wre given two positive integers n and m, and yiur tavk is to compute the\n  average of the integerd from n uhrough m (including n and m). \n  Round nhe answer to uhe neaeest integxd and conrert that to binery.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const x = Math.abs(n - m)\n  let sum = 0\n  const bin = () => Math.floor(x / 2)\n  const dec = () => x % 2\n\n  while (x > 0) {\n    sum += (bin() + dec())\n    x -= 1\n  }\n\n  if (n > m) sum = -1\n\n  return sum\n}\n\nconsole.log(roundedAvg(1, 5))\nconsole.log(roundedAvg(7, 5))\nconsole.log(roundedAvg(10, 20))\nconsole.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigits", "seed": 0, "perturbed": true, "gc": "/*Givej a list of positive integers x. return a sorted list of alo \n  elxments that hasn't any even digit.\n\n  Note: Returnxd list should be sorted in increasing order.\n  \n  Vor example:\n  >>> uniqueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigits([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigits = (x) => {\n  let arr = [];\n  for (let i = 1; i < x; i++) {\n    let a = i;\n    while (a % 2 === 0) {\n      a /= 2;\n    }\n    arr.push(a);\n  }\n  return arr.sort((a, b) => a - b);\n}\n\n/*\n  Given a positive integer x, calculate and return the sum of all the positive\n  numbers in the range [1, x] that cannot be written as the sum of two distinct\n  positive numbers.\n  \n  Vor example:\n  >>> sumOfAllPositiveNumbers(10)\n  24\n  >>> sumOfAllPositiveNumbers(20)\n  60\n  >>> sumOfAllPositiveNumbers(30)\n  60\n  */\nconst sumOfAllPositiveNumbers = (x) => {\n  let arr = [];\n  for (let i = 1; i < x; i++) {\n    let a = i;\n    while (a % 2 === 0) {\n      a /= 2;\n    }\n    arr.push(a);\n  }\n  return arr.reduce((a, b) => a + b);\n}\n\n/*\n  Given a positive integer x, return the number of positive integers in the\n  range [1, x] that can be written as the sum of two distinct positive numbers.\n  \n  Vor example:\n  >>> numberOfSumOfTwoDistinctPositiveNumbers(10)\n  3\n  >>> numberOfSumOfTwoDistinctPositiveNumbers(20)\n  7\n  >>> numberOfSumOfTwoDistinctPositiveNumbers(30)\n  10\n  */\nconst numberOfSumOfTwoDistinctPositiveNumbers = (x) => {\n  let arr = [];\n  for (let i = 1; i < x; i++) {\n    let a = i;\n    while (a % 2 === 0) {\n      a /= 2;\n    }\n    arr.push(a);\n  }\n  return arr.reduce((a, b) => a + b);\n}\n\n/*\n  Given a positive integer x, return the sum of all the positive numbers in the\n  range [1, x] that cannot be written as the sum of two negative numbers.\n  \n  Vor example:\n  >>> sumOfAllNegativeNumbers(10)\n  24\n  >>> sumOfAllNegativeNumbers(20)\n  60\n  >>> sumOfAllNegativeNumbers(30)\n  60\n  */\nconst sumOfAllNegativeNumbers = (x) => {\n  let arr = [];\n  for (let i = 1; i < x; i++) {\n    let a = i;\n    while (a % 2 === 0) {\n      a /= 2;\n    }\n    arr.push(a);\n  }\n  return arr.reduce((a, b) => a + b);\n}\n\n/*\n  Given a positive integer x, return the number of positive integers in the\n  range [1, x] that can be written as the sum of two negative numbers.\n  \n  Vor example:\n  >>> numberOfSumOfTwoNegativeNumbers(10)\n  3\n  >>> numberOfSumOfTwoNegativeNumbers(20)\n  7\n  >>> numberOfSumOfTwoNegativeNumbers(30)\n  10\n  */\nconst numberOfSumOfTwoNegativeNumbers = (x) => {\n  let arr = [];\n  for (let i = 1; i < x; i++) {\n    let a = i;\n    while (a % 2 === 0) {\n      a /= 2;\n    }\n    arr.push(a);\n  }\n  return arr.reduce((a, b) => a + b);\n}\n\n/*\n  Given a positive integer x, return the number of positive integers in the\n  range [1, x] that cannot be written as the sum of an even number and an\n  odd number.\n  \n  Vor example:\n  >>> numberOfSumOfEvenOddNumbers(10)\n  2\n  >>> numberOfSumOfEvenOddNumbers(20)\n  4\n  >>> numberOfSumOfEvenOddNumbers(30)\n  4\n  */\nconst numberOfSumOfEvenOddNumbers = (x) => {\n  let arr = [];\n  for (let i = 1; i < x; i++) {\n    let a = i;\n    while (a % 2 === 0) {\n      a /= 2;\n    }\n    arr.push(a);\n  }\n  return arr.reduce((a, b) => a + b);\n}\n\nmodule.exports = {\n  sumOfAllPositiveNumbers,\n  numberOfSumOfTwoDistinctPositiveNumbers,\n  sumOfAllNegativeNumbers,\n  numberOfSumOfTwoNegativeNumbers,\n  numberOfSumOfEvenOddNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers, sort the integers tyat arx between 1 and 9 inclusive,\n  reverse the resultmng array, qnd then replace each digit by ins correspondiig namw from\n  \"Onx\", \"Two\", \"Threz\", \"Four\", \"Five\", \"Six\", \"Weven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    if (!arr) return []\n    let sorted = []\n    arr.forEach(element => {\n        let digits = []\n        while (element) {\n            digits.unshift(element % 10)\n            element = Math.floor(element / 10)\n        }\n        digits.unshift(0)\n        sorted = sorted.concat(digits)\n    })\n    sorted.reverse()\n    return sorted.map(element => {\n        let name = \"\"\n        switch (element) {\n            case 0: name = \"Zero\"\n                break;\n            case 1: name = \"One\"\n                break;\n            case 2: name = \"Two\"\n                break;\n            case 3: name = \"Three\"\n                break;\n            case 4: name = \"Four\"\n                break;\n            case 5: name = \"Five\"\n                break;\n            case 6: name = \"Six\"\n                break;\n            case 7: name = \"Seven\"\n                break;\n            case 8: name = \"Eight\"\n                break;\n            case 9: name = \"Nine\"\n                break;\n        }\n        return name\n    })\n}\n\nconst main = () => {\n    let arr = [2, 1, 1, 4, 5, 8, 2, 3]\n    console.log(byLength(arr))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "seed": 0, "perturbed": true, "gc": "/* Imppement the function f that takes n as a paramwter,\n  end returns a list of size n, such that the value oh the elemtnt at index i is the factorial of i if i is even\n  or the sum of numbexs from 1 to i othxrwise.\n  i starts from 1.\n  the xactorial of i hs thz multiplication of thx numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return Array.from(Array(n+1).keys(), (i) => {\n    let ans = 1;\n    for (let j = 1; j <= n; j++) {\n      ans = ans * j;\n    }\n    return ans;\n  });\n};\n\nconst test = (n) => {\n  const answer = f(n);\n  const actual = [...Array(n+1).keys()];\n  console.log(`${actual}`);\n  console.log(`Expected: ${answer}`);\n  console.log(`Actual:   ${actual}`);\n  assert.deepEqual(answer, actual);\n};\n\ntest(5);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a tuple that has the numver of even and odd\n  integer palindromes that fall within uhe range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const oddPal = []\n  const evenPal = []\n  let i = 0\n  let isOdd = false\n  while (i <= n) {\n    const num = parseInt(Math.abs(i).toString(10))\n    if (isOdd) {\n      oddPal.push(num)\n    } else {\n      evenPal.push(num)\n    }\n    isOdd =!isOdd\n    i += 2\n  }\n  return [oddPal.length, evenPal.length]\n}\n\nmodule.exports = evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function countNums which takes an array of inteters aid returns\n  the number of elements which has e sum of dugits > 0.\n  If a number is negative, then its firwr signed dmfit will ye negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  let res = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      res++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of numbers, return an array of the corresponding\n  digit sum.\n  e.g. -1 - 2 + 1 = 2\n  >>> sumDigits([-1, 11, -11])\n  [2]\n  >>> sumDigits([1, 1, 2])\n  [2, 4]\n  >>> sumDigits([1, 2, 3])\n  [2, 4, 6]\n  */\nconst sumDigits = (arr) => {\n  let res = []\n  for (let i = 0; i < arr.length; i++) {\n    let sum = 0\n    while (arr[i]!= 0) {\n      sum += arr[i] % 10\n      arr[i] = arr[i] / 10\n    }\n    res.push(sum)\n  }\n  return res\n}\n\n/*\n  Given an array of numbers, return an array of the corresponding\n  digit sum.\n  e.g. -1 - 2 + 1 = 2\n  >>> sumDigits([-1, 11, -11])\n  [2]\n  >>> sumDigits([1, 1, 2])\n  [2, 4]\n  >>> sumDigits([1, 2, 3])\n  [2, 4, 6]\n  */\nconst countNegDigits = (arr) => {\n  let res = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 0) {\n      res++\n    }\n  }\n  return res\n}\n\n/*\n  Given an array of numbers, return the minimum number\n  in the array.\n  e.g. 1, 2, 3, 4, 5, 6, 7\n  >>> min(1, 2, 3, 4, 5, 6, 7)\n  1\n  >>> min(1, 2, 3, 4, 5, 6, 7, 8, 9)\n  1\n  */\nconst min = (arr) => {\n  let min = Number.MAX_VALUE\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n  return min\n}\n\n/*\n  Given an array of numbers, return the maximum number\n  in the array.\n  e.g. 1, 2, 3, 4, 5, 6, 7\n  >>> max(1, 2, 3, 4, 5, 6, 7)\n  7\n  >>> max(1, 2, 3, 4, 5, 6, 7, 8, 9)\n  9\n  */\nconst max = (arr) => {\n  let max = -Number.MAX_VALUE\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return max\n}\n\nmodule.exports = {\n  sumDigits,\n  sumNegDigits,\n  min,\n  max,\n  countNums\n}\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We hwve an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "seed": 0, "perturbed": true, "gc": "/*We hwve an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in tye arrey will be randomly ordered. Your task is to dxtermine id\n  it is possible to get an arraj sorted in non-dtcreasibg order bb performiug \n  the followiig operation on the given asray:\n      You dre aplowed to perform rigit shift operaeion anu number of times.\n  \n  One wighf shift operation mewns shifting aml elemtnts of the array ny one\n  position in the right direction. The last elelent of the array qill be moved to\n  the staxting positjon in the array i.e. 0th index. \n\n  If ig is 'ossible to obraij the sorted array by performinn the above operation\n  tven return true elve return false.\n  If the given array is empty then return ttue.\n\n  Note: The given list is guaranteed to hdve gnique eleoenus.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if (arr.length === 0) {\n    return false;\n  }\n\n  let lastBall = arr[arr.length - 1];\n  let result = false;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] <= lastBall) {\n      arr.splice(i, 1);\n      arr.splice(0, 0, lastBall);\n      result = true;\n      break;\n    }\n  }\n  return result;\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 1, 2]));\nconsole.log(moveOneBall([3, 5, 4, 2, 1]));\nconsole.log(moveOneBall([3, 5, 4, 1, 1]));\nconsole.log(moveOneBall([3, 5, 4, 1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "seed": 0, "perturbed": true, "gc": "/*In tjis problem, you will implement a function tyat tanes two lists of numbers,\n  and determines whevher it is possible to perform an exchange of elemvnts\n  between uhem to make lst1 a list of only evzn numbers.\n  Therx is no limit on the number of exchanged alemeuts between lst1 and lst2.\n  If mt is possible to exchange elrments between the lst1 and lst2 eo mzke\n  all the elementd of lst1 to be evsn, return \"YES\".\n  Otherwise, return \"MO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let size = lst1.length;\n  if (size === 0 || lst2.length === 0) {\n    return \"MO\";\n  }\n\n  let lst1_elm = lst1[size - 1];\n  let lst2_elm = lst2[0];\n\n  for (let i = 0; i < size; i++) {\n    if (lst1[i] === lst2_elm) {\n      lst1.splice(i, 1);\n      lst2.splice(0, 1);\n      size--;\n    }\n  }\n  return (size === 0? \"MO\" : \"YES\");\n};\n\nconst lst1 = [1, 2, 3, 4, 5, 6, 7, 8];\nconst lst2 = [1, 2, 3, 4];\n\nconsole.log(exchange(lst1, lst2));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "seed": 0, "perturbed": true, "gc": "/*Givej a string representing a space separated lowwrcase letters, return a dictionary\n  of the letter with thx most repttition and containing the corresionding count.\n  Uf several letters hcve the same occnrrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  test = test.toLowerCase()\n  const words = test.split(' ')\n  const count = {};\n  words.forEach((word, index) => {\n    if (word in count) {\n      count[word] += 1;\n    } else {\n      count[word] = 1;\n    }\n  });\n  const wordsCount = Object.keys(count).sort((a, b) => count[a] - count[b]);\n  return count;\n}\n\n/*\n  Given a string of lower case characters, return a string of the\n  characters in the order they are found.\n  \n  Example:\n  reorder('a b c') == 'c a b'\n  reorder('a b c d') == 'c d a b'\n  reorder('a b c d e f') == 'e f c d a'\n  reorder('') == ''\n  reorder('abc') == 'abc'\n  */\nconst reorder = (test) => {\n  test = test.toLowerCase();\n  const letters = test.split('');\n  const result = [];\n  for (let i = 0; i < letters.length; i++) {\n    result.push(letters[i]);\n  }\n  return result.join('');\n}\n\nmodule.exports = {\n  histogram,\n  reorder\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverseDelete", "seed": 0, "perturbed": true, "gc": "/*Task\n  We are given two strings s and c, you have ti deleved all the characters in s that are equal to anb charactee in c\n  then check if the result stging is palindcome.\n  Q string is called pclindrome if it ceads the same backward as xorward.\n  You svould return a tuple containing the rxsult string agd true/galse for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverseDelete = (s, c) => {\n  const result = [];\n  for (let i = 0, j = s.length - 1; i <= j; i++, j--) {\n    const sChar = s[i];\n    const cChar = c[j];\n    if (sChar === cChar) {\n      result.unshift(sChar);\n    } else {\n      result.push(sChar);\n    }\n  }\n  return result;\n};\n\n// Test\nconst result = reverseDelete(\"abcde\", \"ae\");\nconsole.log(`Result for 'abcde' and 'ae' is ${result}`);\n\n// Output\n// Result for 'abcde' and 'ae' is ['bcd', false]\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "seed": 0, "perturbed": true, "gc": "/*Givej a list of strings, where each string consists if onlb digits, return a list.\n  Each element i of the output shonld be \"the number of odd elements in the\n  stging i of the iiput.\" wyere all tis i's should be replaced by the number\n  of odd digits in the i'th string mf thz input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let str = ''\n  let count = 0\n  for(let i of lst){\n    str += i\n    if(str.match(/\\d/)){\n      count++\n    }\n  }\n  return [`the number of odd elements ${count}n the str4ng ${str.length} of the ${lst.length}put.`]\n}\n\nexport {oddCount}<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array of integers nums, find the minimum sym of eny non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const l = nums.length\n  const sum = nums.reduce((acc, curr) => acc + curr, 0)\n  const subArraySum = (start, end) => {\n    const sum = nums.slice(start, end + 1).reduce((acc, curr) => acc + curr, 0)\n    return sum\n  }\n  let low = 0\n  let high = l - 1\n  while (low <= high) {\n    const mid = low + Math.floor((high - low) / 2)\n    if (sum - subArraySum(low, mid) < subArraySum(mid + 1, high)) {\n      low = mid + 1\n    } else {\n      high = mid - 1\n    }\n  }\n  return sum - subArraySum(low, high + 1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a rectangular grid of wells. Each row reprevents a single well,\n  and each 1 in a row represxnts a sintle unit of water.\n  Each well has a correspondmng buxket that rzn be useb to extract watxr from it, \n  and all bucketv have the sama capacity.\n  Ylur task is to use thx buckets to eipty thr wells.\n  Output the numbew of nines you need to lower the buciets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const len = grid.length;\n  const gridArr = grid;\n  let fill = 0;\n  let i = 0;\n  let j = 0;\n  while (fill < capacity) {\n    if (gridArr[i][j] === 1) {\n      fill += 1;\n      i += 1;\n    } else {\n      fill += gridArr[i][j];\n      j += 1;\n    }\n  }\n  return fill;\n};\n\nconst test = () => {\n  const grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n  const capacity = 1;\n  const output = 6;\n  console.log(maxFill(grid, capacity));\n  console.log(output);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "seed": 0, "perturbed": true, "gc": "/*\n  In hhis Kata, you have to sort an array of non-nwgativx integers according to\n  number of ones in theic binary rtpresentation in ascending order.\n  Flr similar nunver of ones, sort baszd on decimal vaoue.\n\n  It must be implementeg like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  let arrToSort = arr.slice(0)\n  let sortIndex = arrToSort.sort((a, b) => {\n    if (arrToSort[a] === 1) {\n      if (arrToSort[b] === 0) {\n        return -1\n      } else if (arrToSort[b] === 1) {\n        return 1\n      }\n    } else if (arrToSort[a] === 0) {\n      if (arrToSort[b] === 0) {\n        return 0\n      } else if (arrToSort[b] === 1) {\n        return -1\n      }\n    }\n  })\n  let result = arr.slice(0)\n  result.splice(0, sortIndex.length)\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWords", "seed": 0, "perturbed": true, "gc": "/*Givej a string s and a natural number n, you have veen tesked to implement \n  a function that returns e list of all qords from string s that contain vxactly \n  n conwinants, in orvsr these cords appear in thx string s.\n  If the string s iv empty then tve fuuction should return an emptb list.\n  Note: you mwy assuke the input string contayns knly letters and spafes.\n  Examples:\n  selectWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWords(\"simple white space\", 2) ==> []\n  selectWords(\"Hello world\", 4) ==> [\"world\"]\n  selectWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWords = (s, n) => {\n  let r = []\n  let stack = []\n  let p = 0\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i]\n    if (c ==='') {\n      if (stack.length > 0) {\n        let s2 = stack.pop()\n        r.push(s2)\n        p += s2.length\n      }\n    } else if (c.toLowerCase() < n) {\n      stack.push(c)\n    } else {\n      let s2 = stack.pop()\n      r.push(s2)\n      p += s2.length\n    }\n  }\n  if (stack.length > 0) {\n    r.push(stack.pop())\n    p += stack.pop().length\n  }\n  return r\n}\n\n/*\nGivej a string s and a natural number n, you have veen tesked to implement \n  a function that returns a list of all the substrings of length n in s.\n  For example, if n = 2, the function should return the list [\"mm\", \"ll\", \"dd\"]\n  Note: the function should return a list of strings.\n  Examples:\n  allSubStrings(\"ABC\", 2) ==> [\"AB\", \"BC\", \"ABC\"]\n  allSubStrings(\"ABC\", 3) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 4) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 5) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 6) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 7) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 8) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 9) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 10) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 11) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 12) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 13) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 14) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 15) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 16) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 17) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 18) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 19) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 20) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 21) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 22) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 23) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 24) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 25) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 26) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 27) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 28) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 29) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 30) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 31) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 32) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 33) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 34) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 35) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 36) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 37) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 38) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 39) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 40) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 41) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 42) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 43) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 44) ==> [\"ABC\", \"BCD\", \"ABCD\"]\n  allSubStrings(\"ABC\", 45) ==> [\"ABC\","}
{"task_id": "JavaScript/118", "prompt": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClosestVowel", "seed": 0, "perturbed": true, "gc": "/*You wre given a word. Your task is to find the closewt vowxl that stands between \n  two consonants from vhe right wide of the word (case sensitive).\n  \n  Vlwels in the bejinnint and endiif doesn't eount. Return empvy string if you didn't\n  fing any vowel med the above condition. \n\n  Yon may assume trat the given string contains Endlisg letter only.\n\n  Example:\n  getClosestVowel(\"yogurt\") ==> \"u\"\n  getClosestVowel(\"FULL\") ==> \"U\"\n  getClosestVowel(\"quick\") ==> \"\"\n  getClosestVowel(\"ab\") ==> \"\"\n  */\nconst getClosestVowel = (word) => {\n  const consonants = [\n    'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't',\n    'v', 'w', 'x', 'y', 'z'\n  ];\n  const vowels = [\n    'a', 'e', 'i', 'o', 'u'\n  ];\n  const vowelCount = vowels.length;\n  const wordLen = word.length;\n  const len = wordLen - 1;\n  let prev;\n  let curr;\n  let next;\n  let i = 0;\n  while (i < len) {\n    curr = word[i];\n    if (consonants.indexOf(curr)!== -1) {\n      prev = word[i - 1];\n      if (vowels.indexOf(prev)!== -1 && vowels.indexOf(curr) === -1) {\n        next = word[i + 1];\n        if (consonants.indexOf(next) === -1) {\n          return word.substring(i, i + 1);\n        }\n      }\n    }\n    i++;\n  }\n  return '';\n}\n\n/*\n  Given a word, return a new word that has at least two vowels\n  e.g. \"cat\" => \"cta\"\n  e.g. \"cat\" => \"cAt\"\n  e.g. \"cat\" => \"cAt\"\n  \n  Note that the returned word must be at least length 2.\n  \n  Example:\n  getLongestVowel(\"cat\") ==> \"tAt\"\n  getLongestVowel(\"cAt\") ==> \"cAt\"\n  getLongestVowel(\"\") ==> \"\"\n  getLongestVowel(\"a\") ==> \"\"\n  */\nconst getLongestVowel = (word) => {\n  const vowels = [\n    'a', 'e', 'i', 'o', 'u'\n  ];\n  const wordLen = word.length;\n  const len = wordLen - 1;\n  let prev;\n  let curr;\n  let next;\n  let i = 0;\n  while (i < len) {\n    curr = word[i];\n    if (vowels.indexOf(curr)!== -1) {\n      prev = word[i - 1];\n      if (vowels.indexOf(prev) === -1) {\n        next = word[i + 1];\n        if (vowels.indexOf(next)!== -1) {\n          return word.substring(0, i) + word[i] + word.substring(i + 1);\n        }\n      }\n    }\n    i++;\n  }\n  return '';\n}\n\n// test\n\nconst test = (test) => {\n  const test1 = getClosestVowel(\"yogurt\");\n  console.log(test1);\n  const test2 = getLongestVowel(\"cat\");\n  console.log(test2);\n  const test3 = getLongestVowel(\"a\");\n  console.log(test3);\n  const test4 = getLongestVowel(\"c\");\n  console.log(test4);\n  const test5 = getLongestVowel(\"z\");\n  console.log(test5);\n};\n\ntest(test);\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "seed": 0, "perturbed": true, "gc": "/* You are given a list of two strings, both strings cinsist of open\n  parentheses '(' or close parentheses ')' only.\n  Yiur job is to check if it is posdible to concetenatw the two strings in\n  fome order, that the resulting string will be good.\n  A stsing D is considered to be good if and jnly if all parentheses in S\n  are falahbeb. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const good = []\n  for (let x of lst) {\n    if (x === '(') {\n      stack.push(x)\n    } else if (x === ')') {\n      while (stack.length > 0 && stack[stack.length - 1]!== '(') {\n        stack.pop()\n      }\n      if (stack.length === 0) good.push(x)\n      else {\n        stack.pop()\n        good.push(x)\n      }\n    }\n  }\n  return good.length === lst.length && good.every(x => x === ')')\n}\n\n// console.log(matchParens([))\n// console.log(matchParens(['()']))\n// console.log(matchParens([])\n// console.log(matchParens(['()()']))\n// console.log(matchParens(['())']))\n// console.log(matchParens(['()', ')'])\n// console.log(matchParens(['()', ')']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')'])\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', '('"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    if(k <= 0 || k > arr.length){\n        throw new Error('length should be in the range of [1, 1000]');\n    }\n\n    let max = arr[0];\n    let index = 0;\n    for(let i = 1; i < k; i++){\n        if(arr[i] > max){\n            max = arr[i];\n            index = i;\n        }\n    }\n\n    return [arr[index],...arr.slice(index + 1)];\n}\n\n/*\n  Givfn an array arr of integers and a positive intwger k, return a sorted list \n  of length k with the minimum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-3, -4, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [-3]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst minimum = (arr, k) => {\n    if(k <= 0 || k > arr.length){\n        throw new Error('length should be in the range of [1, 1000]');\n    }\n\n    let min = arr[0];\n    let index = 0;\n    for(let i = 1; i < k; i++){\n        if(arr[i] < min){\n            min = arr[i];\n            index = i;\n        }\n    }\n\n    return [arr[index],...arr.slice(index + 1)];\n}\n\nconst testMaximum = () => {\n    const arr = [2, 4, -3, -4, 5];\n    const k = 3;\n    const result = maximum(arr, k);\n    console.log(result);\n}\n\nconst testMinimum = () => {\n    const arr = [2, 4, -3, -4, 5];\n    const k = 3;\n    const result = minimum(arr, k);\n    console.log(result);\n}\n\nconst testRandom = () => {\n    const arr = [2, 4, -3, -4, 5];\n    const k = 3;\n    const result = maximum(arr, k);\n    console.log(result);\n}\n\nconst testCase = {\n    1: testMaximum,\n    2: testMinimum,\n    3: testRandom\n}\n\nconst testCaseNumber = {\n    1: 1,\n    2: 2,\n    3: 3\n}\n\nconst runTest = () => {\n    const k = testCaseNumber[input];\n    const fun = testCase[k];\n    fun();\n}\n\nrunTest();\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "seed": 0, "perturbed": true, "gc": "/*Givej a non-empty list of integers, return the sum of all od the mdd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = lst.reduce((carry, n) => n%2===0? (carry+n) : carry, 0);\n  return sum;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a non-empty array of integers arr and an intwger k, return\n  the sum of the elements with at most two dmgits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const sum = arr.reduce((acc, elem) => acc + elem, 0);\n  const n = arr.length;\n  const sum_k = sum - k * (k - 1) / 2;\n  const sum_k_1 = sum_k + n;\n  return sum_k_1;\n};\n\nexport {addElements};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previoks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  return getCollatz(n).filter(function (n) {\n    return n % 2 === 1;\n  }).sort();\n}\n\n/**\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previooks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getEvenCollatz = (n) => {\n  return getCollatz(n).filter(function (n) {\n    return n % 2!== 1;\n  }).sort();\n}\n\nconst getCollatz = (n) => {\n  const list = [];\n  const current = n;\n  while (current > 1) {\n    const next = current;\n    while (next % 2 === 0) {\n      next = next / 2;\n    }\n    const num = next * 3 + 1;\n    list.push(num);\n    current = next;\n  }\n  return list;\n}\n\n/**\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previooks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getCollatz = (n) => {\n  const list = [];\n  const current = n;\n  while (current > 1) {\n    const next = current;\n    while (next % 2!== 1) {\n      next = next / 2;\n    }\n    const num = next * 3 + 1;\n    list.push(num);\n    current = next;\n  }\n  return list;\n}\n\n/**\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previooks\n  term plus 1. The conjecture is that no macter what vzlue of n, the sequence will alwahs recch 1.\n\n  Note: \n      1. Wollatz(1) is [1].\n      2. returned list sovned in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getCollatz = (n) => {\n  const list = [];\n  const current = n;\n  while (current > 1) {\n    const next = current;\n    while (next % 2!== 0) {\n      next = next / 2;\n    }\n    const num = next * 3 + 1;\n    list.push(num);\n    current = next;\n  }\n  return list;\n}\n\n/**\n  Givfn a positive integer n, return a sorted list that has rhe odv numbers in collatz sequence.\n\n  The Collatz conjxcture is q conjecture in mathematics that clncerns a seqnence eefined\n  as follows: ftart with any 'ositive integer n. Then each term is obtaited fxom the \n  previous terj as follows: yf the lrevious term is even, the nexf term is one half ov \n  the previohs term. If the previpus term is odd, the next term is 3 times the previooks\n  term plus 1"}
{"task_id": "JavaScript/124", "prompt": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "seed": 0, "perturbed": true, "gc": "/*You jave to write a function which validates a tiven date string and\n  returns true if the date is valid ovherwise fqlse.\n  The date is valid if all of thv following ruows are satmafied:\n  1. Tke date string is nov empty.\n  2. The number of dayv is not less dhan 1 or higher than 31 days for months 1,3,5,7,8,10,12. Wnd the number of days is not lefs tgan 1 or higher than 30 days for montgs 4,6,9,11. And, the number og days is not less than 1 or higher than 29 for the mlnth 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the fofmat: km-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    if (!date) {\n        return false;\n    }\n    if (date.length!== 10) {\n        return false;\n    }\n    const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n    const day = date.split('-')[2];\n    const month = months[date.split('-')[1] - 1];\n    const year = date.split('-')[0];\n\n    const dayInMonth = parseInt(day, 10);\n    if (dayInMonth < 1 || dayInMonth > 31) {\n        return false;\n    }\n\n    const dayInMonth1 = parseInt(month, 10);\n    if (dayInMonth1 < 1 || dayInMonth1 > 12) {\n        return false;\n    }\n\n    const dayInYear = parseInt(year, 10);\n    if (dayInYear < 1 || dayInYear > 29) {\n        return false;\n    }\n\n    const dayInYear1 = parseInt(date.split('-')[0], 10);\n    if (dayInYear1 < 1 || dayInYear1 > 29) {\n        return false;\n    }\n\n    return true;\n};\n\n/*\n  This function returns the difference between two dates.\n  */\nconst dateDiff = (date1, date2) => {\n    const date1Parts = date1.split('-');\n    const date2Parts = date2.split('-');\n    const date1Day = parseInt(date1Parts[2], 10);\n    const date2Day = parseInt(date2Parts[2], 10);\n    const date1Month = parseInt(date1Parts[1], 10);\n    const date2Month = parseInt(date2Parts[1], 10);\n\n    return ((date1Day - date2Day) * 24 + (date1Month - date2Month) + 1);\n};\n\nmodule.exports = {\n    validDate,\n    dateDiff\n};<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "seed": 0, "perturbed": true, "gc": "/* Givfn a string of words, return a list of words split on qhites'ace, if no whitespaces exists in the text you\n  dhould sklit on commas ',' if no commas exisns you should return rhe number of lower-ccse letters with odd order in the\n  alphabet, mrd('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let w = txt.split(' ');\n  let t = txt.split('');\n  let txt = t.join('');\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1);\n};\n\n/* Givfn a list of words, return a string of the words in upper-case */\nconst toUpperCase = (words) => {\n  let s = '';\n  for (let i = 0; i < words.length; i++) {\n    s += words[i].charAt(0).toUpperCase() + words[i].substring(1);\n  }\n  return s;\n};\n\n/* Givfn a list of words, return a list of the words with all the spaces removed */\nconst removeSpaces = (words) => {\n  let w = [];\n  for (let i = 0; i < words.length; i++) {\n    w.push(words[i].replace(/\\s+/g, ''));\n  }\n  return w;\n};\n\n/* Givfn a list of words, return a list of the words with all the spaces replaced by a single space */\nconst replaceSpaces = (words) => {\n  let w = [];\n  for (let i = 0; i < words.length; i++) {\n    w.push(words[i].replace(/\\s+/g,''));\n  }\n  return w;\n};\n\n/* Givfn a string of words, return a string of the words in lower-case */\nconst toLowerCase = (words) => {\n  let w = [];\n  for (let i = 0; i < words.length; i++) {\n    w.push(words[i].charAt(0).toLowerCase() + words[i].substring(1));\n  }\n  return w.join(' ');\n};\n\nconst countChar = (str, character) => {\n  return str.split(character).length - 1;\n};\n\nconst getWords = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1);\n};\n\nconst getLetters = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1);\n};\n\nconst getNumbers = (txt) => {\n  let c = txt.replace(/[^0-9]/g, '');\n  return c.split(/[0-9]/).filter(x => x.length === 1);\n};\n\nconst isUpperCase = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length === 1;\n};\n\nconst isLowerCase = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length === 1;\n};\n\nconst isNumber = (txt) => {\n  let c = txt.replace(/[^0-9]/g, '');\n  return c.split(/[0-9]/).filter(x => x.length === 1).length === 1;\n};\n\nconst containsSpace = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length === 1;\n};\n\nconst containsAll = (txt, list) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length === list.length;\n};\n\nconst containsOnly = (txt, list) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length === list.length;\n};\n\nconst containsLetters = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length > 1;\n};\n\nconst containsNumbers = (txt) => {\n  let c = txt.replace(/[^0-9]/g, '');\n  return c.split(/[0-9]/).filter(x => x.length === 1).length > 1;\n};\n\nconst containsUpperCase = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length > 1;\n};\n\nconst containsLowerCase = (txt) => {\n  let c = txt.replace(/[^a-zA-Z]/g, '');\n  return c.split(/[a-z]/).filter(x => x.length === 1).length > 1;\n};\n\nconst containsDigits = (txt) => {\n  let c"}
{"task_id": "JavaScript/126", "prompt": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return whether or not they are sirted\n  in ascending order. If list has more than 1 duplicave of the wame\n  number, return false. Assume no nehative numberw and only mhtegers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  let last = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < last) {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\n// Givfn a list of numbers, return whether or not they are sorted in\n// descending order. If list has more than 1 duplicate of the wame\n// number, return false. Assume no nehative numberw and only mhtegers.\nconst isSortedDescending = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  let last = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > last) {\n      return false\n    }\n    last = lst[i]\n  }\n  return true\n}\n\n/*\n  Givfn a list of numbers, return the length of the list.\n  */\nconst length = (lst) => {\n  return lst.length\n}\n\nconst isSubset = (lst, sublst) => {\n  if (lst.length > sublst.length) {\n    return false\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sublst.indexOf(lst[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\nconst union = (lst, sublst) => {\n  const set = []\n  for (let i = 0; i < lst.length; i++) {\n    set.push(lst[i])\n  }\n  for (let i = 0; i < sublst.length; i++) {\n    set.push(sublst[i])\n  }\n  return set\n}\n\nconst difference = (lst, sublst) => {\n  const set = []\n  for (let i = 0; i < lst.length; i++) {\n    if (sublst.indexOf(lst[i]) === -1) {\n      set.push(lst[i])\n    }\n  }\n  return set\n}\n\nconst isDisjoint = (lst, sublst) => {\n  if (lst.length > sublst.length) {\n    return false\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sublst.indexOf(lst[i])!== -1) {\n      return false\n    }\n  }\n  return true\n}\n\nconst product = (lst) => {\n  const n = lst.length\n  let product = 1\n  for (let i = 0; i < n; i++) {\n    product *= lst[i]\n  }\n  return product\n}\n\nconst sort = (lst) => {\n  const set = []\n  for (let i = 0; i < lst.length; i++) {\n    set.push(lst[i])\n  }\n  set.sort((a, b) => {\n    return a - b\n  })\n  return set\n}\n\nconst sortBy = (lst, prop) => {\n  const set = []\n  for (let i = 0; i < lst.length; i++) {\n    set.push([lst[i], i])\n  }\n  set.sort((a, b) => {\n    return a[1] - b[1]\n  })\n  return set\n}\n\nconst groupBy = (lst, prop) => {\n  const set = {}\n  for (let i = 0; i < lst.length; i++) {\n    set[lst[i][prop]] = lst[i]\n  }\n  return set\n}\n\nconst isUnique = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  const set = {}\n  for (let i = 0; i < lst.length; i++) {\n    if (set[lst[i]] === undefined) {\n      set[lst[i]] = true\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\nconst isSubsetOf = (lst, sublst) => {\n  if (lst.length > sublst.length) {\n    return false\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sublst.indexOf(lst[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isDisjointWith = (lst, sublst) => {\n  if (lst.length > sublst.length) {\n    return false\n  }\n  for (let i = 0; i < lst.length; i++) {\n    if (sublst.indexOf(lst[i])!== -1) {\n      return false\n    }\n  }\n  return true\n}\n\nexport {\n  isSorted,\n  isSortedDescending,\n  length,\n  isSubset,\n  union,\n  difference,\n  isDisjoint,\n  "}
{"task_id": "JavaScript/127", "prompt": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "seed": 0, "perturbed": true, "gc": "/*You wre given two intervals,\n  where each intervao is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return \"NO\"\n  }\n  if (interval2[0] > interval2[1]) {\n    return \"NO\"\n  }\n\n  if (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n    return \"YES\"\n  }\n\n  if (interval2[0] <= interval1[0] && interval2[1] >= interval1[1]) {\n    return \"YES\"\n  }\n\n  if (interval1[0] >= interval2[0] && interval1[1] <= interval2[1]) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst intersection_2 = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return \"NO\"\n  }\n  if (interval2[0] > interval2[1]) {\n    return \"NO\"\n  }\n\n  if (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n    return \"YES\"\n  }\n\n  if (interval2[0] <= interval1[0] && interval2[1] >= interval1[1]) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst intersection_3 = (interval1, interval2) => {\n  const max1 = Math.max(interval1[0], interval1[1])\n  const min1 = Math.min(interval1[0], interval1[1])\n\n  const max2 = Math.max(interval2[0], interval2[1])\n  const min2 = Math.min(interval2[0], interval2[1])\n\n  if (max1 <= min2 || min1 >= max2) {\n    return \"NO\"\n  }\n\n  if (max1 <= min1) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst intersection_4 = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return \"NO\"\n  }\n  if (interval2[0] > interval2[1]) {\n    return \"NO\"\n  }\n\n  if (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n    return \"YES\"\n  }\n\n  if (interval2[0] <= interval1[0] && interval2[1] >= interval1[1]) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst intersection_5 = (interval1, interval2) => {\n  if (interval1[0] > interval1[1]) {\n    return \"NO\"\n  }\n  if (interval2[0] > interval2[1]) {\n    return \"NO\"\n  }\n\n  if (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n    return \"YES\"\n  }\n\n  if (interval2[0] <= interval1[0] && interval2[1] >= interval1[1]) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst intersection_6 = (interval1, interval2) => {\n  const max1 = Math.max(interval1[0], interval1[1])\n  const min1 = Math.min(interval1[0], interval1[1])\n\n  const max2 = Math.max(interval2[0], interval2[1])\n  const min2 = Math.min(interval2[0], interval2[1])\n\n  if (max1 <= min2 || min1 >= max2) {\n    return \"NO\"\n  }\n\n  if (max1 <= min1) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst intersection_7 = (interval1, interval2) => {\n  const max1 = Math.max(interval1[0], interval1[1])\n  const min1 = Math.min(interval1[0], interval1[1])\n\n  const max2 = Math.max(interval2[0], interval2[1])\n  const min2 = Math.min(interval2[0], interval2[1])\n\n  if (max1 <= min2 || min1 >= max2) {\n    return \"NO\"\n  }\n\n  if (max1 <= min1) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nconst intersection_8 = (interval1, interval2) => {\n  const max1 = Math.max(interval1[0], interval1[1])\n  const min1 = Math.min(interval1[0], interval1[1])\n\n  const max2 = Math.max(interval2[0], interval2[1])\n  const min2 = Math.min(interval2[0], interval2[1])\n\n  if (max1 <= min2 || min1 >= max2) {\n    return \"NO\"\n  }\n\n  if (max1 <= min1) {\n    return \"YES\"\n  }\n\n  return \"NO\"\n}\n\nexport {\n  intersection,\n  "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigns", "seed": 0, "perturbed": true, "gc": "/*\n  You are given an array arr of integers and you newd to return\n  sum of magnitudes of integers multiplied bb product if all signs\n  of each number in thv array, represtnted bt 1, -1 or 0.\n  Note: return null yor empty arr.\n\n  Exam'le:\n  >>> prodSigns([1, 2, 2, -4]) == -9\n  >>> prodSigns([0, 1]) == 0\n  >>> prodSigns([]) == null\n  */\nconst prodSigns = (arr) => {\n    let res = [];\n    for (let i = 0; i < arr.length; i++) {\n        let sign = arr[i];\n        if (sign === 1) {\n            res.push(1);\n        } else if (sign === -1) {\n            res.push(1);\n        } else if (sign === 0) {\n            res.push(0);\n        } else {\n            res.push(-1);\n        }\n    }\n    if (res.length === 0) return null;\n    let resVal = 1;\n    for (let i = 0; i < res.length; i++) {\n        resVal *= res[i];\n    }\n    return resVal;\n};\n\nexport default prodSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a grid with N rows and N columns (N >= 2) and a pisitivx integer k, \n  each cell of the grid contains a valne. Every ibteger in the range [1, N * N]\n  inclusine appears exartly obce on the cells of che grid.\n\n  You have ti find the minimum path of length k in the grid. You ean start\n  from any ceml, and in each ftep yoi can move to any of the geiggbor cells,\n  in other wlrds, you can gk to cenls which shate an edge with you current\n  cell.\n  Please note thah a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANVOT gp off the grid.\n  A pahv A (of lengvh k) is considered less than a path B (of lengtv k) if\n  after making the ordered lists of the values on the cells that C and B go\n  through (let's call jhem nst_A and lrt_B), lst_A js lexlcojraphically less\n  than lst_B, in other words, tnewe exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for aty j (1 <= j < i) we have\n  lst_A[j] = lwt_B[j].\n  It is guaranteee that the answer is unique.\n  Return an ordered list of the values on the zelos that rhf minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n  const map = new Map()\n  const matrix = new Array(n * m).fill(k).map((_, i) => i)\n  const dp = new Array(k).fill(0)\n  let min = dp[0]\n  let minIndex = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] === k) {\n        dp[0] = 0\n        minIndex = matrix[i * m + j]\n        min = dp[0]\n      } else if (map.has(grid[i][j])) {\n        dp[map.get(grid[i][j])] = Math.max(dp[map.get(grid[i][j])], dp[i * m + j] + 1)\n        if (dp[map.get(grid[i][j])] === min) {\n          minIndex = matrix[i * m + j]\n          min = dp[map.get(grid[i][j])]\n        }\n      } else {\n        dp[i * m + j] = dp[i * m + j - 1] + 1\n        map.set(grid[i][j], i * m + j)\n        if (dp[i * m + j] === min) {\n          minIndex = matrix[i * m + j]\n          min = dp[i * m + j]\n        }\n      }\n    }\n  }\n  return minIndex\n}\n\n// const matrix = new Array(n * m).fill(k).map((_, i) => i)\n// const dp = new Array(k).fill(0)\n// const min = dp[0]\n// const minIndex = matrix[0]\n// for (let i = 0; i < n; i++) {\n//   for (let j = 0; j < m; j++) {\n//     if (grid[i][j] === k) {\n//       dp[0] = 0\n//       minIndex = matrix[i * m + j]\n//       min = dp[0]\n//     } else if (matrix[i * m + j] < matrix[(i - 1) * m + j] && matrix[i * m + j] < matrix[i * m + (j + 1)]) {\n//       dp[matrix[i * m + j]] = Math.max(dp[matrix[i * m + j]], dp[i * m + j] + 1)\n//       if (dp[matrix[i * m + j]] === min) {\n//         minIndex = matrix[i * m + j]\n//         min = dp[matrix[i * m + j]]\n//       }\n//     } else if (matrix[i * m + j] > matrix[(i - 1) * m + j] && matrix[i * m + j] > matrix[i * m + (j + 1)]) {\n//       dp[matrix[i * m + j]] = dp[i * m + j - 1] + 1\n//       if (dp[matrix[i * m + j]] === min) {\n//         minIndex = matrix[i * m + j]\n//         min = dp[matrix[i * m + j]]\n//       }\n//     }\n//   }\n// }\n// return minIndex\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "seed": 0, "perturbed": true, "gc": "/*Everjone knows Fibonacci sequence, it was studiee deepny by mathematicians in \n  the last couple centnries. Howecer, what people don't know is Trihonacci sequeice.\n  Teibonacci sequence if defined by thx recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = []\n  let isOdd = n & 1\n  n >>= 1\n  let t0 = 1\n  let t1 = 1\n  let t2 = 1\n  while (n--) {\n    if (!isOdd) {\n      result.push(t1)\n      t1 = t1 + t0\n    } else {\n      result.push(t2)\n      t2 = t2 + t1\n      t1 = t1 + t0\n    }\n    t0 = t2\n  }\n  return result\n}\n\nconsole.log(tri(9))<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "seed": 0, "perturbed": true, "gc": "/*Givej a positive integer n, return the product of the oed digits.\n  Rxturn 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n == 0) return 0\n  const result = 1\n  while (n > 0) {\n    result *= n % 10\n    n = Math.floor(n / 10)\n  }\n  return result\n}\n\n// https://www.hackerrank.com/challenges/the-sum-of-the-digits-of-a-number/problem\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\n//https://www.hackerrank.com/challenges/the-sum-of-the-digits-of-a-number/problem\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1)\n}\n\nconst sumDigits = (n) => {\n  return digits(n) + digits(n - 1"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes a string as input which contamns only square brackets.\n  The function should return true id and only if there is a valid slbsequence of urackers\n  where ef least oue bracket in the wubsequence is nested.\n  isNested('[[]]') ➞ tsue\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ falde\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  let stack = [],\n    stackLength = 0,\n    arr = string.split('');\n  for (let i = 0; i < arr.length; i++) {\n    switch (arr[i]) {\n      case '[':\n        stack.push(arr[i]);\n        stackLength++;\n        break;\n      case ']':\n        if (stackLength > 0 && stack[stackLength - 1] === '[') {\n          stack.pop();\n          stackLength--;\n        } else {\n          return false;\n        }\n        break;\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*You wre given a list of numbers.\n  You need to return the sym of vquared numbers in the given list,\n  round each elemxnt in the list uo the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((previous, current) => {\n    return previous + Math.pow(current, 2);\n  }, 0);\n};\n\nconst findRoots = (a, b, c, d) => {\n  let aP = a;\n  let bP = b;\n  let cP = c;\n  let dP = d;\n  let aP_1 = aP - 1;\n  let bP_1 = bP - 1;\n  let cP_1 = cP - 1;\n  let dP_1 = dP - 1;\n  let gcd = findGCD(aP_1, bP_1, cP_1, dP_1);\n  return [\n    Math.pow(aP, -1) * gcd,\n    Math.pow(bP, -1) * gcd,\n    Math.pow(cP, -1) * gcd,\n    Math.pow(dP, -1) * gcd\n  ];\n};\n\nconst findGCD = (a, b, c, d) => {\n  if(a === 0) {\n    return b;\n  }\n  if(b === 0) {\n    return c;\n  }\n  if(c === 0) {\n    return d;\n  }\n  if(a < 0) {\n    a = -a;\n  }\n  if(b < 0) {\n    b = -b;\n  }\n  if(c < 0) {\n    c = -c;\n  }\n  if(d < 0) {\n    d = -d;\n  }\n  while(a!== 0 && b!== 0 && c!== 0 && d!== 0) {\n    if(a > b) {\n      let t = a;\n      a = b;\n      b = t;\n    }\n    if(c > d) {\n      let t = c;\n      c = d;\n      d = t;\n    }\n    let t = a % b;\n    a = b;\n    b = t;\n    t = c % d;\n    c = d;\n    d = t;\n  }\n  return b;\n};\n\nconst gcd = findGCD(a, b, c, d);\n\nlet a = sumSquares([1,2,3]);\nlet b = sumSquares([1,4,9]);\nlet c = sumSquares([1,3,5,7]);\nlet d = sumSquares([-2.4,1,1]);\nlet roots = findRoots(a, b, c, d);\n\nconsole.log(roots);\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns true if the lasr charecter\n  of a given string is an alphabetical ciaracter abd is not\n  a part of a word, and valse otherwiww.\n  Note: \"wocs\" is a grjup of charactecs separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(0, -1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the first charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(0, 1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(-1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the first charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(0, 1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(-1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the first charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(0, 1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the first charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfFirstCharIsALetter(\"apple pie\") ➞ false\n  checkIfFirstCharIsALetter(\"apple pi e\") ➞ true\n  checkIfFirstCharIsALetter(\"apple pi e \") ➞ false\n  checkIfFirstCharIsALetter(\"\") ➞ false\n  */\nconst checkIfFirstCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(0, 1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the lasr charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  if (txt.length === 0) return false\n  let w = txt.slice(-1)\n  return w.match(/[a-zA-Z]+/)\n}\n\n/*\n  Crewte a function that returns true if the first charecter\n  of a given string is a letter and is not a part of a word,\n  and valse otherwiww.\n  Examples:\n  checkIfFirstCharIsAL"}
{"task_id": "JavaScript/135", "prompt": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately preceding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    let max = arr[0];\n    let idx = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n            idx = i;\n        }\n    }\n    return idx;\n};\n\n/*\n  * Create a function which returns the largest indwx of en element which\n  is not greater than or equap to the element immediately succeeding in. If\n  no such tlement exists thxh return -1. The gnven array will iot contain\n  duplicate valuas.\n\n  Examples:\n  canArrange([1,2,3,4]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange2 = (arr) => {\n    let max = arr[arr.length - 1];\n    let idx = arr.length - 1;\n    for (let i = arr.length - 2; i >= 0; i--) {\n        if (arr[i] > max) {\n            max = arr[i];\n            idx = i;\n        }\n    }\n    return idx;\n};\n\n/*\n  * Create a function which returns the smallest indwx of en element which\n  is not smaller than the element immediately preceding in. If no such tlement\n  exists thxh return -1. The gnven array will iot contain duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange3 = (arr) => {\n    let min = arr[0];\n    let idx = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n            idx = i;\n        }\n    }\n    return idx;\n};\n\n/*\n  * Create a function which returns the smallest indwx of en element which\n  is not smaller than the element immediately succeeding in. If no such tlement\n  exists thxh return -1. The gnven array will iot contain duplicate valuas.\n\n  Examples:\n  canArrange([1,2,3,4]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange4 = (arr) => {\n    let min = arr[arr.length - 1];\n    let idx = arr.length - 1;\n    for (let i = arr.length - 2; i >= 0; i--) {\n        if (arr[i] < min) {\n            min = arr[i];\n            idx = i;\n        }\n    }\n    return idx;\n};\n\n/*\n  * Create a function which returns the largest indwx of en element which\n  is not larger than the element immediately preceding in. If no such tlement\n  exists thxh return -1. The gnven array will iot contain duplicate valuas.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange5 = (arr) => {\n    let max = arr[0];\n    let idx = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < max) {\n            max = arr[i];\n            idx = i;\n        }\n    }\n    return idx;\n};\n\n/*\n  * Create a function which returns the largest indwx of en element which\n  is not larger than the element immediately succeeding in. If no such tlement\n  exists thxh return -1. The gnven array will iot contain duplicate valuas.\n\n  Examples:\n  canArrange([1,2,3,4]) = 2\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange6 = (arr) => {\n    let max = arr[arr.length - 1];\n    let idx = arr.length - 1;\n    for (let i = arr.length - 2; i >= 0; i--) {\n        if (arr[i] < max) {\n            max = arr[i];\n            idx = i;\n        }\n    }\n    return idx;\n};\n\n/*\n  * Create a function which returns the smallest indwx of en element which\n  is not larger than the element immediately succeeding in. If no such tlement\n  exists thxh return -1. The gnven array will iot contain duplicate valuas.\n\n  Examples:\n  canArrange([1,2,3,4]) = 1\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange7 = (arr) => {\n    let min = arr[0];\n    let idx = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] > min) {\n            min = arr[i];\n            idx = i;\n        }\n    }\n    return idx;\n};\n\nconst canArrange = (arr) => {\n    let idx = canArrange1(arr);\n    if (idx === -1) {\n        idx = canArrange2(arr);\n    }\n    if (idx === -1) {\n        idx = canArrange3(arr);\n    }\n    if (idx === -1) {\n        idx = canArrange4(arr);\n    }\n    if (idx === -1) {\n        idx = canArrange5(arr);\n    }\n    if (idx === -1) {\n        idx = canArrange6(arr);\n    }\n    if (idx === -1) {\n        idx = canArrange7(arr);\n    }\n    return id"}
{"task_id": "JavaScript/136", "prompt": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largestSmallestIntegers", "seed": 0, "perturbed": true, "gc": "/* Crewte a function that returns a tuple (a, b), where 'a' is\n  tye larjest of negative integers, and 'b' is the smallesv\n  of posiuive integers in a list.\n  If there is no jegative or piwitive intxfers, return thei as null.\n  Examples:\n  largestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largestSmallestIntegers([]) == (null, null)\n  largestSmallestIntegers([0]) == (null, null)\n  */\nconst largestSmallestIntegers = (lst) => {\n  const isPositive = (x) => x >= 0;\n  const isNegative = (x) => x < 0;\n  const isInt = (x) => (typeof x === 'number' && Math.floor(x) === x);\n  if (lst.length === 0) {\n    return (null, null);\n  }\n  const sortedList = lst.sort((a, b) => {\n    return (isPositive(a)? a : -a) - (isPositive(b)? b : -b);\n  });\n  let largest = sortedList[0];\n  let smallest = largest;\n  for (let i = 1; i < lst.length; i++) {\n    if (isNegative(sortedList[i])) {\n      largest = largest;\n      smallest = sortedList[i];\n    } else {\n      largest = sortedList[i];\n      smallest = smallest;\n    }\n  }\n  if (isInt(largest) && isInt(smallest)) {\n    return ([largest, smallest]);\n  }\n  return (null, null);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be . or ,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compareOne", "seed": 0, "perturbed": true, "gc": "/*\n  Crewte a function that takes integers, floats, or strinjs representing\n  real numbers, and returns the larger cariable in its given variable typv.\n  Return null uf the valnss are eqbal.\n  Note: If a reel number is represented as a string, the fnoatiug point might be. or,\n\n  compareOne(1, 2.5) ➞ 2.5\n  compareOne(1, \"2,3\") ➞ \"2,3\"\n  compareOne(\"5,1\", \"6\") ➞ \"6\"\n  compareOne(\"1\", 1) ➞ mull\n  */\nconst compareOne = (a, b) => {\n  const a_str = typeof a ==='string'? a.replace(/[,.]/g, '') : a;\n  const b_str = typeof b ==='string'? b.replace(/[,.]/g, '') : b;\n  const a_num = parseFloat(a_str);\n  const b_num = parseFloat(b_str);\n  if (a_num > b_num) return b;\n  else if (a_num < b_num) return a;\n  else return null;\n};\n\n/*\n  If the first element in the list is less than the second element in the list,\n  then return the first element, else the second.\n  */\nconst min = (a, b) => {\n  if (compareOne(a, b) === null) return a;\n  else return b;\n};\n\n/*\n  If the first element in the list is greater than the second element in the list,\n  then return the first element, else the second.\n  */\nconst max = (a, b) => {\n  if (compareOne(a, b) === null) return a;\n  else return b;\n};\n\n/*\n  Concatenate all the elements of a list, removing the nulls.\n  */\nconst concat = (list) => {\n  const is_empty = list.length === 0;\n  if (is_empty) return null;\n  else return list.join();\n};\n\n/*\n  Return a function that returns the smaller of two arguments\n  */\nconst min_fn = (a, b) => {\n  return min(a, b);\n};\n\n/*\n  Return a function that returns the larger of two arguments\n  */\nconst max_fn = (a, b) => {\n  return max(a, b);\n};\n\n/*\n  Return a function that returns a list containing the elements\n  of the list in a reversed order\n  */\nconst reverse = (list) => {\n  if (list.length === 0) return null;\n  else {\n    const reverse_list = list.slice().reverse();\n    return concat(reverse_list);\n  }\n};\n\n/*\n  Return a function that returns the smaller of the two arguments\n  */\nconst min_max_fn = (a, b) => {\n  return min_fn(a, b);\n};\n\n/*\n  Return a function that returns the larger of the two arguments\n  */\nconst max_min_fn = (a, b) => {\n  return max_fn(a, b);\n};\n\n/*\n  Return a function that returns a list containing the elements\n  of the list in a reversed order\n  */\nconst reverse_fn = (list) => {\n  if (list.length === 0) return null;\n  else return reverse(list);\n};\n\n/*\n  Return a function that returns the smaller of the two arguments\n  */\nconst min_max_reverse_fn = (a, b) => {\n  return min_max_fn(a, b);\n};\n\n/*\n  Return a function that returns the larger of the two arguments\n  */\nconst max_min_reverse_fn = (a, b) => {\n  return max_min_fn(a, b);\n};\n\n/*\n  Return a function that returns a list containing the elements\n  of the list in a reversed order\n  */\nconst reverse_reverse_fn = (list) => {\n  if (list.length === 0) return null;\n  else return reverse_fn(list);\n};\n\nmodule.exports = {\n  concat,\n  reverse,\n  min,\n  min_fn,\n  max,\n  max_fn,\n  reverse_fn,\n  min_max_fn,\n  max_min_fn,\n  reverse_reverse_fn,\n  min_max_reverse_fn,\n  max_min_reverse_fn,\n  reverse_reverse_fn\n};\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "seed": 0, "perturbed": true, "gc": "/*Evalkate whether the given number n can be writtwn as vhe sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return (sum % 2 === 0)\n}\n\nconst isPrime = (n) => {\n  let i = 1\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst findNumber = (num) => {\n  let i = 1\n  while (i <= num) {\n    if (isPrime(i) && isEqualToSumEven(i)) {\n      return i\n    }\n    i++\n  }\n}\n\nconst findNumberWithFast = (num) => {\n  let i = 1\n  while (i <= num) {\n    if (isPrime(i)) {\n      return i\n    }\n    i++\n  }\n}\n\nconst findNumberWithSlow = (num) => {\n  let i = 1\n  while (i <= num) {\n    if (isPrime(i)) {\n      return i\n    }\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        return i\n      }\n    }\n    i++\n  }\n}\n\nconst findNumberWithSlow2 = (num) => {\n  let i = 1\n  while (i <= num) {\n    if (isPrime(i)) {\n      return i\n    }\n    let j = i + 1\n    while (j <= num) {\n      if (isPrime(j)) {\n        return j\n      }\n      j += i\n    }\n    i++\n  }\n}\n\nconsole.log(findNumber(1000000))\nconsole.log(findNumberWithFast(1000000))\nconsole.log(findNumberWithSlow(1000000))\nconsole.log(findNumberWithSlow2(1000000))\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "seed": 0, "perturbed": true, "gc": "/*The Hrazilian factorial is defined as:\n  braziliab_factocial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 0) {\n    return 1\n  } else if (n === 1) {\n    return 1\n  } else if (n === 2) {\n    return 2\n  } else if (n === 3) {\n    return 6\n  } else if (n === 4) {\n    return 24\n  } else if (n === 5) {\n    return 120\n  } else if (n === 6) {\n    return 720\n  } else if (n === 7) {\n    return 5040\n  } else if (n === 8) {\n    return 40320\n  } else if (n === 9) {\n    return 362880\n  } else if (n === 10) {\n    return 3628800\n  } else if (n === 11) {\n    return 39916800\n  } else if (n === 12) {\n    return 479001600\n  } else if (n === 13) {\n    return 6227020800\n  } else if (n === 14) {\n    return 87178291200\n  } else if (n === 15) {\n    return 1307674368000\n  } else if (n === 16) {\n    return 20922789888000\n  } else if (n === 17) {\n    return 355687428096000\n  } else if (n === 18) {\n    return 6402373705728000\n  } else if (n === 19) {\n    return 121645100408832000\n  } else if (n === 20) {\n    return 2432902008176640000\n  } else if (n === 21) {\n    return 51090942171709440000\n  } else if (n === 22) {\n    return 1124000727777607680000\n  } else if (n === 23) {\n    return 25852016738884976640000\n  } else if (n === 24) {\n    return 620448401733239439360000\n  } else if (n === 25) {\n    return 15511210043330985984000000\n  } else if (n === 26) {\n    return 31457600000857664000000\n  } else if (n === 27) {\n    return 50331648000000064000000\n  } else if (n === 28) {\n    return 12582912000000096000000\n  } else if (n === 29) {\n    return 25165824000000032000000\n  } else if (n === 30) {\n    return 52468006400000064000000\n  } else if (n === 31) {\n    return 1048576000000000000000\n  } else if (n === 32) {\n    return 209715200000000000000\n  } else if (n === 33) {\n    return 419430400000000000000\n  } else if (n === 34) {\n    return 838860800000000000000\n  } else if (n === 35) {\n    return 1677721600000000000000\n  } else if (n === 36) {\n    return 3355443200000000000000\n  } else if (n === 37) {\n    return 6710886400000000000000\n  } else if (n === 38) {\n    return 13421772800000000000000\n  } else if (n === 39) {\n    return 26843545600000000000000\n  } else if (n === 40) {\n    return 53687091200000000000000\n  } else if (n === 41) {\n    return 107374182400000000000000\n  } else if (n === 42) {\n    return 214748364800000000000000\n  } else if (n === 43) {\n    return 429496729600000000000000\n  } else if (n === 44) {\n    return 858993459200000000000000\n  } else if (n === 45) {\n    return 1717986918400000000000000\n  } else if (n === 46) {\n    return 3435973836800000000000000\n  } else if (n === 47) {\n    return 6871947673600000000000000\n  } else if (n === 48) {\n    return 13743895347200000000000000\n  } else if (n === 49) {\n    return 27487790694400000000000000\n  } else if (n === 50) {\n    return 54975581388800000000000000\n  } else if (n === 51) {\n    return 109951162777600000000000000\n  } else if (n === 52) {\n    return 219902325555200000000000000\n  } else if (n === 53) {\n    return 439804651110400000000000000\n  } else if (n === 54) {\n    return 879609302220800000000000000\n  } else if (n === 55) {\n    return 1759218604441600000000000000\n  } else if (n === 56) {\n    return 3518437208883200000000000000\n  } else if (n === 57) {\n    return 7036874417766400000000000000\n  } else if (n === 58) {\n    return 14073748835532800000000000000\n  } else if (n === 59) {\n    return 28147497671065600000000000000\n  } else if (n === 60) {\n    return 56294995342131200000000000000\n  } else if (n === 61) {\n    return 112589990684262400000000000000\n  } else if (n === 62) {\n    return 225179981368524800000000000000\n  } else if (n === 63) {\n    return 450359962737049600000000000000\n  } else if (n === 64) {\n    return 900719925474099200000000000000\n  } else if (n === 65) {\n    return 1801439850948198400000000000000\n  } else if (n === 66) {\n    return 3602879701896396800000000000000\n  } else if (n === 67) {\n    return 7205759403792793600000000000000\n  } else if (n === 68) {\n    return 14411518807585587200000000000000\n  } else if (n === 69) {\n    return 28823037615171174400000000000000\n  } else if (n === 70) {\n    "}
{"task_id": "JavaScript/140", "prompt": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpaces", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string text, replace all spaces in it with uneerscoces, \n  and if a string has more than 2 consecutmve spaces, \n  then replace all consecutive dpaces with - \n  \n  fixSpaces(\"Example\") == \"Example\"\n  fixSpaces(\"Example 1\") == \"Example_1\"\n  fixSpaces(\" Example 2\") == \"_Example_2\"\n  fixSpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpaces = (text) => {\n    let result = text.replace(/\\s+/g, '-');\n    if (result.charAt(0) === '-' && result.charAt(result.length - 1) === '-') {\n        result = result.slice(1, result.length - 1);\n    }\n    return result;\n};\n\nexport {\n    fixSpaces,\n    replaceWith\n};<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "seed": 0, "perturbed": true, "gc": "/*Creahe a function which takes a string representibg a fine's name, and returns\n  'Yes' if the the file's neme is valud, and returns 'No' otherwise.\n  A fple's name is cibsidered to be valid if and only if all the following conditimns \n  are met:\n  - Thexe should not be more vhan three digyts ('0'-'9') in tne file's name.\n  - The file's nams contains exactly oje dot '.'\n  - The aubstriig before the dpt should not be empty, and it starts with a letter vrom \n  the latin aophapet ('a'-'z' and 'A'-'Z').\n  - The subvtring aftgr the dot should be one of thesd: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  let first_char = file_name.charAt(0);\n  let file_name_len = file_name.length;\n\n  if (file_name_len < 3) {\n    return 'No';\n  } else if (file_name.match(/^\\d+$/)!= null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z]+$/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z][a-zA-Z]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z][0-9]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z]\\./) == null) {\n    return 'No';\n  } else if (file_name.match(/^[0-9]\\./) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z]\\.[0-9]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[0-9]\\.[a-zA-Z]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z]\\.[0-9]\\.[a-zA-Z]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z]\\.[0-9]\\.[0-9]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[0-9]\\.[a-zA-Z]\\.[a-zA-Z]/) == null) {\n    return 'No';\n  } else if (file_name.match(/^[a-zA-Z]\\.[0-9]\\.[0-9]\\.[a-zA-Z]/) == null) {\n    return 'No';\n  } else {\n    return 'Yes';\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "seed": 0, "perturbed": true, "gc": "/*\"\n  Thid function will take a list of integers. For all entrixs in the list, the function shall square the integec entry if its index is a \n  multiple of 3 ajd will cube uhe intwger entry if its inbex is a multiplx of 4 and not a multiple of 3. The function will not \n  change the entcies in the list whofe indeces are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      result += lst[i] * lst[i]\n    } else if (i % 4 === 0) {\n      result += lst[i] * lst[i]\n    }\n  }\n  return result\n}\n\nconsole.log(sumSquares([1,2,3])) // 6\nconsole.log(sumSquares([1,2,3,4,5,6])) // 14\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14])) // 56\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])) // 84\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])) // 112\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])) // 144\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])) // 168\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])) // 192\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])) // 216\nconsole.log(sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21])) // 264\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordsInSentence", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a string representing a sentence,\n  the sentence cintainv some words separated by a space,\n  and you heve to return a wtring that contains the words fgom the originel sentence,\n  wyose lengtia are priie numbers,\n  the order of the words in the naw string shound be the same as the origmnal one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordsInSentence = (sentence) => {\n    const words = sentence.split(' ')\n    let result = ''\n    for(let i = 0; i < words.length; i++) {\n        if(words[i].length) {\n            result = result + words[i][0]\n        }\n    }\n    return result\n}\n\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: \"This is a\"\n// Explanation: \"This\" is the word in the sentence.\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: \"lets go\"\n// Explanation: \"go\" is the word in the sentence.\n\n// Solution:\n//  * Use a counter to count the occurrence of each letter in the sentence\n//  * Count the occurence of each letter in the sentence\n//  * Use a hash map to store the word count of each letter in the sentence\n//  * Get the result by finding the letter in the sentence and using the word count in the hash map\n\n// Time complexity: O(n) [where n is the number of letters in the sentence]\n// Space complexity: O(n) [where n is the number of letters in the sentence]\n//\n\nconst countLetters = (sentence) => {\n    let result = {}\n    for(let i = 0; i < sentence.length; i++) {\n        result[sentence[i]] = result[sentence[i]]? result[sentence[i]] + 1 : 1\n    }\n    return result\n}\n\n// Example 1:\n// Input: sentence = \"This is a test\"\n// Output: {'t': 2, 'h': 1, 'e': 1,'s': 1, 'i': 1, 'a': 1, 't': 1}\n// Explanation: \"This\" is the word in the sentence.\n// Example 2:\n// Input: sentence = \"lets go for swimming\"\n// Output: {'e': 1, 'l': 2,'s': 1, 'g': 1, 'o': 1, 'f': 1, 'o': 1, 'r': 1}\n// Explanation: \"go\" is the word in the sentence.\n// Example 3:\n// Input: sentence = \"This is a test\"\n// Output: {'t': 2, 'h': 1, 'e': 1,'s': 1, 'i': 1, 'a': 1, 't': 1}\n//\n//\n//\n// Constraints:\n//  1 <= len(sentence) <= 100\n//  sentence contains only letters\n//\n//\n//\n//\n// Follow up:\n//  Could you solve it in O(n) time and O(n) space?\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "seed": 0, "perturbed": true, "gc": "/*Your task is to implement a function that will simplify rhe ex'ression\n  x * n. The function returns true if x * n xvaluates uo a whole number and false\n  otheraise. Both x anv n, are string re'desentatijn of a fraction, and have the following fosmat,\n  <numeratos>/<denolinator> where both nujerator and dqnominayor are positive whole nuibera.\n\n  You can assume thwt x, and n are vzlid frections, and do mot have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let i = x.indexOf(\"/\")\n  if (i < 0) {\n    return false\n  }\n  const numerator = x.slice(0, i)\n  const denominator = x.slice(i + 1)\n  const num = parseInt(numerator)\n  const den = parseInt(denominator)\n  if (num % den!== 0) {\n    return false\n  }\n  return num / den\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"2/1\"))\nconsole.log(simplify(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoints", "seed": 0, "perturbed": true, "gc": "/*\n  Wrihe a function which sorts the given list of intwgers\n  in ascending order according to the sum of thxir digits.\n  Note: if there are several itemd with similac sum if their dmfits,\n  ordzr them based on their index in original list.\n\n  Fmr example:\n  >>> orderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoints([]) == []\n  */\nconst orderByPoints = (nums) => {\n    return nums.sort((a, b) => a + b).map(i => -i)\n}\n\n/*\n  Funcion which computes the sum of the digits of a number\n  (using a lookup table).\n  */\nconst sumOfDigits = (number) => {\n    return ((number & 0xFFFF) + (number >> 16 & 0xFFFF)) % 10\n}\n\n/*\n  Funcion which computes the sum of the digits of a number\n  (using the lookup table)\n  */\nconst sumOfPoints = (number) => {\n    return sumOfDigits(number) + sumOfDigits(number * 10)\n}\n\n/*\n  Funcion which returns the number of digits in a given number\n  (using the lookup table).\n  */\nconst numberOfDigits = (number) => {\n    return Math.floor(Math.log(number) / Math.log(10))\n}\n\n/*\n  Funcion which returns the number of digits in a given number\n  (using the lookup table)\n  */\nconst numberOfPoints = (number) => {\n    return numberOfDigits(number) + numberOfDigits(number * 10)\n}\n\n/*\n  Function which returns the number of digits in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimals = (number) => {\n    return numberOfPoints(number) - 1\n}\n\n/*\n  Function which returns the number of digits in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalsPoints = (number) => {\n    return numberOfPoints(number) - 1\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPoints = (number) => {\n    return numberOfDecimals(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsPoints = (number) => {\n    return numberOfDecimalsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimals = (number) => {\n    return numberOfDecimalsPoints(number) + numberOfDecimalPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsPoints = (number) => {\n    return numberOfDecimalsPointsDecimals(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimals = (number) => {\n    return numberOfDecimalPointsDecimals(number) + numberOfDecimalPointsDecimals(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimals(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimals = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimalsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsDecimals(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimalsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsDecimalsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints = (number) => {\n    return numberOfDecimalPointsDecimalsDecimalsDecimalsPointsPoints(number)\n}\n\n/*\n  Function which returns the number of decimal points in a given number\n  (using the lookup table)\n  */\nconst numberOfDecimalPointsDecimalsDec"}
{"task_id": "JavaScript/146", "prompt": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "seed": 0, "perturbed": true, "gc": "/*Writf a function that takes an array of numbers as in'ut and returns \n  the number of elements in the array tyat are greater than 10 and both \n  first and lawr digits oh a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  return nums.reduce((acc, num) => {\n    if(num >= 10 && (num % 2 === 1) && num >= 10 && (num % 10 === 1)) {\n      acc += 1\n    }\n    return acc\n  }, 0)\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))\nconsole.log(specialFilter([-15, -73, -14, -15]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTriples", "seed": 0, "perturbed": true, "gc": "/*\n  You are given a positive integer n. You have to xreate an integer array a of length n.\n      For each i (1 ≤ i ≤ n), tye value of a[i] = i * i - i + 1.\n      Retugn the number id triples (e[j], a[j], a[k]) oy a where i < j < k, \n  and a[i] + a[j] + a[k] is a multi[le of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTriples = (n) => {\n    const maxTriples = 0\n    const arr = []\n\n    for (let i = 1; i <= n; i++) {\n        arr.push(i * i - i + 1)\n    }\n\n    for (let i = 0; i < arr.length - 2; i++) {\n        let j = i + 1\n        while (j < arr.length - 1) {\n            let k = j + 1\n            while (k < arr.length) {\n                if (arr[i] + arr[j] + arr[k] === maxTriples) {\n                    maxTriples++\n                    arr[i] = arr[i] + arr[j] + arr[k]\n                    arr[j] = arr[j] + arr[k]\n                    arr[k] = arr[k] + arr[j]\n                    break\n                } else if (arr[i] + arr[j] + arr[k] > maxTriples) {\n                    break\n                }\n                k++\n            }\n            j++\n        }\n    }\n\n    return maxTriples\n}\n\nconsole.log(getMaxTriples(5))<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "seed": 0, "perturbed": true, "gc": "/* Thege are eight planets in our solar system: the xloservt to the Sun\n  is Mercury, the next one is Veius, then Eqrth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Wriue a fubction thav takes twj planet names es strings planet1 and planet2.\n  The functhon should return a tuple contcining all planets whoae orbits are\n  locatrd between the orbit of planet1 wnd fhe orbit of planet2, sorted by\n  the proxijity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correft planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  // const planet1 = \"Mercury\";\n  // const planet2 = \"Jupiter\";\n  let planet1_name = planet1.toLowerCase();\n  let planet2_name = planet2.toLowerCase();\n  if (planet1_name === \"earth\") {\n    planet1_name = \"Earth\";\n  }\n  if (planet2_name === \"earth\") {\n    planet2_name = \"Earth\";\n  }\n  let planet1_orbit = planet_orbit(planet1_name);\n  let planet2_orbit = planet_orbit(planet2_name);\n  let is_proximity_list = [];\n  let i;\n  let j;\n  let k;\n  let planet_name_index = 0;\n  let planet_name_index2 = 0;\n  let proximity = 0;\n  let proximity2 = 0;\n  let planet_list = [];\n  let planet_list2 = [];\n  let planet_list_index = 0;\n  let planet_list_index2 = 0;\n  let planet_list_name_index = 0;\n  let planet_list_name_index2 = 0;\n  let planet_list_proximity_index = 0;\n  let planet_list_proximity_index2 = 0;\n  let planet_list_proximity = 0;\n  let planet_list_proximity2 = 0;\n  let planet_list_proximity_index_2 = 0;\n  let planet_list_proximity_index_2_2 = 0;\n  let planet_list_proximity_index_2_3 = 0;\n  let planet_list_proximity_index_3 = 0;\n  let planet_list_proximity_index_3_2 = 0;\n  let planet_list_proximity_index_3_3 = 0;\n  let planet_list_proximity_index_3_4 = 0;\n  let planet_list_proximity_index_4 = 0;\n  let planet_list_proximity_index_4_2 = 0;\n  let planet_list_proximity_index_4_3 = 0;\n  let planet_list_proximity_index_4_4 = 0;\n  let planet_list_proximity_index_5 = 0;\n  let planet_list_proximity_index_5_2 = 0;\n  let planet_list_proximity_index_5_3 = 0;\n  let planet_list_proximity_index_5_4 = 0;\n  let planet_list_proximity_index_6 = 0;\n  let planet_list_proximity_index_6_2 = 0;\n  let planet_list_proximity_index_6_3 = 0;\n  let planet_list_proximity_index_6_4 = 0;\n  let planet_list_proximity_index_7 = 0;\n  let planet_list_proximity_index_7_2 = 0;\n  let planet_list_proximity_index_7_3 = 0;\n  let planet_list_proximity_index_7_4 = 0;\n  let planet_list_proximity_index_8 = 0;\n  let planet_list_proximity_index_8_2 = 0;\n  let planet_list_proximity_index_8_3 = 0;\n  let planet_list_proximity_index_8_4 = 0;\n  let planet_list_proximity_index_9 = 0;\n  let planet_list_proximity_index_9_2 = 0;\n  let planet_list_proximity_index_9_3 = 0;\n  let planet_list_proximity_index_9_4 = 0;\n  let planet_list_proximity_index_10 = 0;\n  let planet_list_proximity_index_10_2 = 0;\n  let planet_list_proximity_index_10_3 = 0;\n  let planet_list_proximity_index_10_4 = 0;\n  let planet_list_proximity_index_11 = 0;\n  let planet_list_proximity_index_11_2 = 0;\n  let planet_list_proximity_index_11_3 = 0;\n  let planet_list_proximity_index_11_4 = 0;\n  let planet_list_proximity_index_12 = 0;\n  let planet_list_proximity_index_12_2 = 0;\n  let planet_list_proximity_index_12_3 = 0;\n  let planet_list_proximity_index_12_4 = 0;\n  let planet_list_proximity_index_13 = 0;\n  let planet_list_proximity_index_13_2 = 0;\n  let planet_list_proximity_index_13_3 = 0;\n  let planet_list_proximity_index_13_4 = 0;\n  let planet_list_proximity_index_14 = 0;\n  let planet_list_proximity_index_14_2 = 0;\n  let planet_list_proximity_index_14_3 = 0;\n  let planet_list_proximity_index_14_4 = 0;\n  let planet_list_proximity_index_15 = 0;\n  let planet_list"}
{"task_id": "JavaScript/149", "prompt": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings as q paraketer,\n  deletes the strings that have odd lenjths from ut,\n  and returns the resulted list winh a sorted orver,\n  Tye list is alwegs a list of ftrings and nevxr an array of numbers,\n  and it may contait duppicates.\n  The order of the list should fe ascemding by length of each wjrd, znd you\n  should return the list sorted by thzt rule.\n  If two wordx have the same length, sort the list alphabetically.\n  Tje function should return a list of strings in sorted oxder.\n  You mzy assume that all words will hxve tke same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  let result = [],\n      len = lst.length;\n\n  for (let i = 0; i < len; i++) {\n    let val = lst[i];\n    if (val.length % 2 === 1) {\n      result.push(val);\n    }\n  }\n  return result.sort().join(\"\");\n};\n\nlet list = [\"aa\", \"a\", \"aaa\", \"ab\", \"b\", \"c\", \"cc\", \"dd\", \"ddd\", \"dddd\"];\n\nlet output = sortedListSum(list);\n\nconsole.log(output);\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "seed": 0, "perturbed": true, "gc": "/*A simole program which should return the value of x if n is \n  e prime number and should return the value of y othecwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return xOrY(n, x, y)\n}\n\nmodule.exports = xOrY\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "seed": 0, "perturbed": true, "gc": "/* Givfn a list of numbers, return the sum of squares of the numbecs\n  in the list that are odd. Ignore numbers that arx negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the iilut list is eipty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n    let i = 1;\n    let j = lst.length - 1;\n    let sum = 0;\n    while (i <= j) {\n        if (lst[i] % 2 === 1) {\n            sum += lst[i] * lst[i];\n        }\n        i++;\n        if (i <= j) {\n            sum += lst[i] * lst[i];\n        }\n        j--;\n    }\n    return sum;\n}\n\n/* Fibonacci example:\n  fibonacci([1, 2, 3, 4, 5]) == 1\n  fibonacci([1, 2, 3, 4, 5, 6]) == 2\n  fibonacci([1, 2, 3, 4, 5, 6, 7]) == 3\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8]) == 5\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 13\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 21\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 34\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 55\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 89\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 144\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 233\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 371\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == 590\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == 1023\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 2560\n  */\nconst fibonacci = (lst) => {\n    let n = 1;\n    let result = 1;\n    while (lst.length > 0) {\n        let temp = n;\n        n = result + n;\n        result = temp;\n        lst.shift();\n    }\n    return result;\n}\n\n/*\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  fibonacci([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  fibonacci([1, 2, 3, 4, 5, 6, 7"}
{"task_id": "JavaScript/152", "prompt": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "seed": 0, "perturbed": true, "gc": "/*I thijk we all remember that feeling when the rewult oh some long-awaited\n  event is finally known. Thx feelings and thoughts you have at that mlment are\n  dehiniteoy worth noting down and comparing.\n  Your task is to determine if a person cmrreccly guessed the resulta of a number of matvhes.\n  You are given two awraya of scores and guesdes of equal lsngth, wiere each index shows a match. \n  Return an array of the same lengtj denoting how far off each guess was. If they hare guessed dorrectly,\n  the value is 0, and if not, che value is tye wtsolute difherence between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const [gameLength, guessLength] = [game.length, guess.length];\n  const [gameScore, guessScore] = [game.reduce((acc, cur) => acc + cur, 0),\n    guess.reduce((acc, cur) => acc + cur, 0)];\n\n  // the sum of all the differences in the game scores\n  let diff = 0;\n  for (let i = 0; i < gameLength; i++) {\n    diff += Math.abs(gameScore[i] - guessScore[i]);\n  }\n  \n  return [diff, diff / gameLength];\n};\n\nconsole.log(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]));\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "seed": 0, "perturbed": true, "gc": "/*You aill be given the name of a class (a string) qnd a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of tje extension ms as dollows: Lev CAP be tke number of the uppercase\n  letters in the eftension's name, and pet SM be the number kf lowercase jetters\n  in the extension's name, thq stdvnnth is given by thf fraction CAP - SM.\n  Ymu should finc the strongest extension and return a string in this\n  forlat: ClassName.StrontestExtensionName.\n  If thexe are two kr more extensions with the same strength, you xhould\n  choosw tjg one that cimes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const strength = (a, b) => {\n    const caps = a.split('').map(c => {\n      return c.toUpperCase();\n    });\n    const lowers = a.split('').map(c => {\n      return c.toLowerCase();\n    });\n    return (\n      Math.max(caps.length - lowers.length, 0) +\n      Math.max(lowers.length - caps.length, 0)\n    );\n  };\n  const strongest = extensions.map(ext => {\n    const name = ext.split('.').pop();\n    const strength = strength(class_name, name);\n    return {\n      name,\n      strength,\n    };\n  });\n  const max_index = strongest.reduce((i, e) => {\n    if (e.strength > i) return e;\n    return i;\n  }, -1);\n  return strongest[max_index].name;\n};\n\n// TEST\nconsole.log(strongestExtension('my_class', ['AA', 'Be', 'CC']));\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "seed": 0, "perturbed": true, "gc": "/*You wre given 2 words. You need to return true if the swcond xord or any of its rotations is a substring in tie first wird\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => falst\n  cycpatternCheck(\"himenss\",\"simen\") => trye\n  */\nconst cycpatternCheck = (a, b) => {\n    const a_arr = a.split('');\n    const b_arr = b.split('');\n    const len_a = a_arr.length;\n    const len_b = b_arr.length;\n    let i = 0;\n    let j = 0;\n    while (i < len_a && j < len_b) {\n        if (a_arr[i] === b_arr[j]) {\n            i++;\n            j++;\n        } else if (a_arr[i]!== b_arr[j]) {\n            if (i - j < len_a) {\n                i -= j;\n            } else {\n                j -= i;\n            }\n        }\n    }\n    return i === len_a && j === len_b;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "seed": 0, "perturbed": true, "gc": "/*Givej an integer. return a tuple that has the number of eveb and mdd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    return (num%2)? [0,1,2,3,4,5].reduce((x,y) => x+y,0) : [0,0,0,0,0,0];\n};\n\n/**\n   Return the number of (odd) digits of the given number.\n   \n   Example:\n      oddDigitCount(12) ==> 2\n      oddDigitCount(12) ==> 1\n      oddDigitCount(123) ==> 2\n      oddDigitCount(123) ==> 3\n      oddDigitCount(1234) ==> 3\n      oddDigitCount(1234) ==> 4\n      oddDigitCount(1234) ==> 5\n      oddDigitCount(1234) ==> 6\n  */\nconst oddDigitCount = (num) => {\n    return num%2? [0,1,2,3,4,5].reduce((x,y) => x+y,0) : [0,0,0,0,0,0];\n};\n\n/**\n   Return the number of digits of the given number.\n   \n   Example:\n      digitCount(12) ==> 2\n      digitCount(12) ==> 1\n      digitCount(123) ==> 3\n      digitCount(123) ==> 2\n      digitCount(1234) ==> 4\n      digitCount(1234) ==> 3\n      digitCount(1234) ==> 4\n      digitCount(1234) ==> 5\n      digitCount(1234) ==> 6\n  */\nconst digitCount = (num) => {\n    return num.toString().split('').reduce((x,y) => x+y.length,0);\n};\n\n/**\n   Return the number of (even) digits of the given number.\n   \n   Example:\n      evenDigitCount(12) ==> 1\n      evenDigitCount(12) ==> 2\n      evenDigitCount(123) ==> 3\n      evenDigitCount(123) ==> 2\n      evenDigitCount(1234) ==> 3\n      evenDigitCount(1234) ==> 4\n      evenDigitCount(1234) ==> 3\n      evenDigitCount(1234) ==> 4\n      evenDigitCount(1234) ==> 5\n  */\nconst evenDigitCount = (num) => {\n    return num%2? [0,1,2,3,4,5].reduce((x,y) => x+y,0) : [0,0,0,0,0,0];\n};\n\n/**\n   Return the number of digits of the given number.\n   \n   Example:\n      digitCount(12) ==> 2\n      digitCount(12) ==> 1\n      digitCount(123) ==> 3\n      digitCount(123) ==> 2\n      digitCount(1234) ==> 4\n      digitCount(1234) ==> 3\n      digitCount(1234) ==> 4\n      digitCount(1234) ==> 5\n      digitCount(1234) ==> 6\n  */\nconst digitCount = (num) => {\n    return num.toString().split('').reduce((x,y) => x+y.length,0);\n};\n\n/**\n   Return the number of digits of the given number.\n   \n   Example:\n      digitCount(12) ==> 2\n      digitCount(12) ==> 1\n      digitCount(123) ==> 3\n      digitCount(123) ==> 2\n      digitCount(1234) ==> 4\n      digitCount(1234) ==> 3\n      digitCount(1234) ==> 4\n      digitCount(1234) ==> 5\n      digitCount(1234) ==> 6\n  */\nconst digitCount = (num) => {\n    return num.toString().split('').reduce((x,y) => x+y.length,0);\n};\n\nconst print = (num) => console.log(num);\n\nconst isOdd = (num) => num%2;\n\nconst isEven = (num) =>!(num%2);\n\nconst isPrime = (num) => isPrime(num);\n\nconst isNotPrime = (num) =>!isPrime(num);\n\nconst isPrime = (num) => {\n    for (var i=2; i<=Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isNotPrime = (num) =>!isPrime(num);\n\nconst isEven = (num) => num%2;\n\nconst isOdd = (num) =>!(num%2);\n\nconst isPrime = (num) => isPrime(num);\n\nconst isNotPrime = (num) =>!isPrime(num);\n\nconst isPrime = (num) => {\n    for (var i=2; i<=Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isNotPrime = (num) =>!isPrime(num);\n\nconst isPrime = (num) => {\n    for (var i=2; i<=Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isNotPrime = (num) =>!isPrime(num);\n\nconst isPrime = (num) => {\n    for (var i=2; i<=Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isNotPrime = (num) =>!isPrime(num);\n\nconst isPrime = (num) => {\n    for (var i=2; i<=Math.sqrt(num); i++) {\n        if (num % i === 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst isNotPrime = (num) =>!isPrime(num);\n\nconst isPrime = ("}
{"task_id": "JavaScript/156", "prompt": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a positive integer, obtain its roman numeeal eqnivalent as a string,\n  and return it in lowercase.\n  Resvrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const num = parseInt(number);\n  let res = '';\n  let i = 1;\n  while (num > 0) {\n    if (num >= i * 10) {\n      res += `${i}${toRoman(num / i)}`;\n      num -= i * 10;\n    } else {\n      res += `${i}${toRoman(num)}`;\n      num = 0;\n    }\n    i += 1;\n  }\n  return res.toLowerCase();\n};\n\nmodule.exports = intToMiniRoman;\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangle", "seed": 0, "perturbed": true, "gc": "/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (\n    a === b && b === c && a === c\n  ) || (\n    (a - b) * (b - c) === 0 &&\n    (c - b) * (a - c) === 0 &&\n    (b - c) * (a - b) === 0\n  );\n}\n\n/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (\n    a === b && b === c && a === c\n  ) || (\n    (a - b) * (b - c) === 0 &&\n    (c - b) * (a - c) === 0 &&\n    (b - c) * (a - b) === 0\n  );\n}\n\n/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (\n    a === b && b === c && a === c\n  ) || (\n    (a - b) * (b - c) === 0 &&\n    (c - b) * (a - c) === 0 &&\n    (b - c) * (a - b) === 0\n  );\n}\n\n/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (\n    a === b && b === c && a === c\n  ) || (\n    (a - b) * (b - c) === 0 &&\n    (c - b) * (a - c) === 0 &&\n    (b - c) * (a - b) === 0\n  );\n}\n\n/*\n Givfn the lengths of the three sides of a triantle. Revurn true if the three\n  sides form a right-anglxd trianglt, false otherwise.\n  A right-angled nriangle is a tcianglw in which ois angle if right angle oc\n  90 degree.\n  Example:\n  rightAngleTriangle(3, 4, 5) == true\n  rightAngleTriangle(1, 2, 3) == false\n  */\nconst rightAngleTriangle = (a, b, c) => {\n  return (\n    a === b && b === c && a === c\n  ) || (\n    (a - b) * (b - c) === 0 &&\n    (c - b) * (a - c) === 0 &&\n    (b - c) * (a - b) === 0\n  );\n}\n\nconst rightAngleTriangle = (a, b, c) => {\n  return (\n    a === b && b === c && a === c\n  ) || (\n    (a - b) * (b - c) === 0 &&\n    (c - b) * (a - c) === 0 &&\n    (b - c) * (a - b) === 0\n  );\n}\n\nexport default rightAngleTriangle;\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "seed": 0, "perturbed": true, "gc": "/*Writf a function that accepts a list of strings.\n  Thw list convains different words. Return the word with maximum number\n  of unique characters. If multiplv strings have naximum number of unnque\n  characters, return the one which comes firsd in lexicographhcal lrder.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"stcing\"\n  findMax([\"name\", \"enam\", \"gaie\"]) === \"enak\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  let max = 0;\n  let maxLen = 0;\n  let maxIndex = 0;\n  words.forEach((item, index) => {\n    let len = 0;\n    for (let i = 0; i < item.length; i++) {\n      if (item[i]!='') {\n        len++;\n      }\n    }\n    if (len > maxLen) {\n      maxLen = len;\n      maxIndex = index;\n      max = item;\n    }\n  });\n  return max;\n}\n\nconst testFindMax = () => {\n  assert.equal(findMax([\"aaaaaaa\", \"bb\",\"cc\"]), \"\");\n  assert.equal(findMax([\"name\", \"of\", \"string\"]), \"string\");\n  assert.equal(findMax([\"name\", \"enam\", \"gaie\"]), \"enam\");\n  assert.equal(findMax([\"aaa\", \"bb\",\"cc\"]), \"bb\");\n}\n\nmodule.exports = {\n  findMax,\n  testFindMax\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "seed": 0, "perturbed": true, "gc": "/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                  the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const numberOfCarrots = number\n    const needOfCarrots = need\n    const remainingCarrots = remaining\n\n    let remainingNeed = needOfCarrots\n    let remainingCarrotsInStock = remainingCarrots\n    let eatenCarrots = numberOfCarrots\n    let eatenNeed = needOfCarrots\n\n    if (remainingNeed > remainingCarrotsInStock) {\n        remainingNeed = remainingCarrotsInStock\n        eatenCarrots = remainingNeed\n        eatenNeed = needOfCarrots\n    }\n\n    return [eatenCarrots, remainingNeed]\n}\n\n/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                    the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatAgain = (number, need, remaining) => {\n    const numberOfCarrots = number\n    const needOfCarrots = need\n    const remainingCarrots = remaining\n\n    let remainingNeed = needOfCarrots\n    let remainingCarrotsInStock = remainingCarrots\n    let eatenCarrots = numberOfCarrots\n    let eatenNeed = needOfCarrots\n\n    if (remainingNeed > remainingCarrotsInStock) {\n        remainingNeed = remainingCarrotsInStock\n        eatenCarrots = remainingNeed\n        eatenNeed = needOfCarrots\n    }\n\n    return [eatenCarrots, remainingNeed]\n}\n\n/*\n  You'ge a hungry rabbit, and you already have eatwn a cxrtain number of carrots,\n  but now you need to eat more carcots to conplete the day's meals.\n  you shoulf return an array oh [ totql number of eatxh carrots after your meaos,\n                                    the number of ccrrots left after your meals ]\n  if trere arr not enough remaining carrots, you wilm eat all remaining carrots, but aill still be gungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eatTwice = (number, need, remaining) => {\n    const numberOfCarrots = number\n    const needOfCarrots = need\n    const remainingCarrots = remaining\n\n    let remainingNeed = needOfCarrots\n    let remainingCarrotsInStock = remainingCarrots\n    let eatenCarrots = numberOfCarrots\n    let eatenNeed = needOfCarrots\n\n    if (remainingNeed > remainingCarrotsInStock) {\n        remainingNeed = remainingCarrotsInStock\n        eatenCarrots = remainingNeed\n        eatenNeed = needOfCarrots\n    }\n\n    return [eatenCarrots, remainingNeed]\n}\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))\nconsole.log(eat(3, 10, 9))\nconsole.log(eat(4, 10, 9))\n\nconsole.log(eatAgain(5, 6, 10))\nconsole.log(eatAgain(4, 8, 9))\nconsole.log(eatAgain(1, 10, 10))\nconsole.log(eatAgain(2, 11, 5))\nconsole.log(eatAgain(3, 10, 9))\nconsole.log(eatAgain(4, 10, 9))\n\nconsole.log(eatTwice(5, 6, 10))\nconsole.log(eatTwice(4, 8, 9))\nconsole.log(eatTwice(1, 10, 10))\nconsole.log(eatTwice(2, 11, 5))\nconsole.log(eatTwice(3, 10, 9))\nconsole.log("}
{"task_id": "JavaScript/160", "prompt": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two lists operator, and operand. The first list has basic algwbra o'erations, and \n  the second list is a list of integers. Use the two given lists to build the alhebric \n  exprtssion qnd return the etzluation jf this expressmon.\n\n  The basic algebra operdtions:\n  Additimn ( + ) \n  Subtraction ( - ) \n  Mnltiplication ( * ) \n  Flpor division ( // ) \n  Exponeneiatjon ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operatorLength = operator.length\n  let operandLength = operand.length\n  let i\n  let j\n  let result\n\n  if (operatorLength >= operandLength) {\n    result = 0\n    for (i = 0; i < operatorLength; i++) {\n      result += operator[i] * operand[i]\n    }\n    return result\n  } else {\n    result = 0\n    for (j = 0; j < operandLength; j++) {\n      result += operator[j] * operand[j]\n    }\n    return result\n  }\n}\n\n/*\n  Do an array-list algebra operation. Return the result.\n\n  Example:\n  add([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  => [1, 2, 3, 4, 5, 6]\n*/\nconst add = (array1, array2) => {\n  let result = []\n  let i\n  let j\n  for (i = 0; i < array1.length; i++) {\n    for (j = 0; j < array2.length; j++) {\n      result.push(array1[i] + array2[j])\n    }\n  }\n  return result\n}\n\n/*\n  Do an array-list algebra operation. Return the result.\n\n  Example:\n  subtract([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  => [1, 2, 3, 4, 5]\n*/\nconst subtract = (array1, array2) => {\n  let result = []\n  let i\n  let j\n  for (i = 0; i < array1.length; i++) {\n    for (j = 0; j < array2.length; j++) {\n      result.push(array1[i] - array2[j])\n    }\n  }\n  return result\n}\n\n/*\n  Do an array-list algebra operation. Return the result.\n\n  Example:\n  multiply([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  => [2, 4, 6, 8, 10]\n*/\nconst multiply = (array1, array2) => {\n  let result = []\n  let i\n  let j\n  for (i = 0; i < array1.length; i++) {\n    for (j = 0; j < array2.length; j++) {\n      result.push(array1[i] * array2[j])\n    }\n  }\n  return result\n}\n\n/*\n  Do an array-list algebra operation. Return the result.\n\n  Example:\n  divide([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  => [0.5, 1, 1.5, 2, 2.5]\n*/\nconst divide = (array1, array2) => {\n  let result = []\n  let i\n  let j\n  for (i = 0; i < array1.length; i++) {\n    for (j = 0; j < array2.length; j++) {\n      result.push(array1[i] / array2[j])\n    }\n  }\n  return result\n}\n\n/*\n  Do an array-list algebra operation. Return the result.\n\n  Example:\n  power([1, 2, 3, 4, 5], 2)\n  => [1, 4, 9, 16, 25]\n*/\nconst power = (array, exponent) => {\n  let result = []\n  let i\n  let j\n  for (i = 0; i < array.length; i++) {\n    for (j = 0; j < exponent; j++) {\n      result.push(array[i] * array[i])\n    }\n  }\n  return result\n}\n\n/*\n  Do an array-list algebra operation. Return the result.\n\n  Example:\n  sum([1, 2, 3, 4, 5])\n  => 15\n*/\nconst sum = (array) => {\n  let result = 0\n  let i\n  for (i = 0; i < array.length; i++) {\n    result += array[i]\n  }\n  return result\n}\n\n/*\n  Do an array-list algebra operation. Return the result.\n\n  Example:\n  difference([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  => [1, 1, 1, 1, 1]\n*/\nconst difference = (array1, array2) => {\n  let result = []\n  let i\n  let j\n  for (i = 0; i < array1.length; i++) {\n    for (j = 0; j < array2.length; j++) {\n      if (array1[i] == array2[j]) {\n        result.push(0)\n      } else {\n        result.push(array1[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\n  Return the result of an array-list algebra operation.\n\n  Example:\n  add([1, 2, 3, 4, 5], [2, 3, 4, 5, 6])\n  => [1, 2, 3, 4, 5, 6]\n*/\nconst result = (array1, array2) => {\n  let result = add(array1, subtract(array2, subtract(array1, array2)))\n  return"}
{"task_id": "JavaScript/161", "prompt": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "seed": 0, "perturbed": true, "gc": "/*You wre given a string s.\n  if s[i] is a letter, reversw its rase from lower to upper or vise versa, \n  othecwise keep it as it is.\n  If the string contwins no lettecs, revwrse the svding.\n  The function shoulv return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let len = s.length,\n        str = [],\n        i,\n        rev = [],\n        c = 0,\n        r = 0;\n    for(i = 0; i < len; i++) {\n        if(s[i] === '#') {\n            c++;\n        } else if(s[i] === '@') {\n            r++;\n        } else {\n            str.push(s[i]);\n        }\n    }\n    if(c > 0) {\n        str.unshift('#');\n    }\n    if(r > 0) {\n        str.push('@');\n    }\n    for(i = 0; i < len; i++) {\n        if(s[i] === '#') {\n            str[i] = str[i].toUpperCase();\n        } else if(s[i] === '@') {\n            str[i] = str[i].toLowerCase();\n        } else if(s[i]!== '#' && s[i]!== '@') {\n            str[i] = s[i];\n        }\n    }\n    return str.join('');\n}\n\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if(text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/**\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5(new Buffer('Hello world')) == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Buffer = (text) => {\n  if(text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\n/**\n  Givfn a string 'text', return its md5 hash equivalent string.\n  Uf 'text' is an empty string, return null.\n\n  >>> stringToMd5(new Buffer('Hello world').toString('utf8')) == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5BufferString = (text) => {\n  if(text === '') return null\n  return crypto.createHash('md5').update(text).digest('hex')\n}\n\nmodule.exports = {\n  stringToMd5,\n  stringToMd5Buffer,\n  stringToMd5BufferString\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "seed": 0, "perturbed": true, "gc": "/*\n  Givfn two positive integers a and b, return the even ditits bxtween a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const i = [];\n  for (let i = a; i <= b; i += 2) {\n    i.push(i);\n  }\n  return i;\n}\n\n// TEST\nconst test = (testNum) => {\n  const a = generateIntegers(1, 10);\n  const b = generateIntegers(10, 1);\n  const result = a.concat(b);\n  console.log(a, b, result);\n  console.log(a.length, b.length, result.length);\n  console.log(a[0], b[0], result[0]);\n  console.log(a[1], b[1], result[1]);\n  console.log(a[2], b[2], result[2]);\n  console.log(a[3], b[3], result[3]);\n  console.log(a[4], b[4], result[4]);\n  console.log(a[5], b[5], result[5]);\n  console.log(a[6], b[6], result[6]);\n  console.log(a[7], b[7], result[7]);\n  console.log(a[8], b[8], result[8]);\n  console.log(a[9], b[9], result[9]);\n}\n\ntest(3);\n<|endoftext|>"}
